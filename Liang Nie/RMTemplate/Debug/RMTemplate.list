
RMTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08011eb0  08011eb0  00012eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012548  08012548  00014238  2**0
                  CONTENTS
  4 .ARM          00000008  08012548  08012548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012550  08012550  00014238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012550  08012550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012554  08012554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08012558  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014238  2**0
                  CONTENTS
 10 .bss          000054c8  20000238  20000238  00014238  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005700  20005700  00014238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002528c  00000000  00000000  00014268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005410  00000000  00000000  000394f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f40  00000000  00000000  0003e908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001853  00000000  00000000  00040848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bf8  00000000  00000000  0004209b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025a55  00000000  00000000  00068c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2b1f  00000000  00000000  0008e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00171207  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009500  00000000  00000000  0017124c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0017a74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011e98 	.word	0x08011e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	08011e98 	.word	0x08011e98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000ea2:	e003      	b.n	8000eac <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea8:	f000 f80a 	bl	8000ec0 <BMI088_delay_us>
    while(ms--)
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	80fa      	strh	r2, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f6      	bne.n	8000ea4 <BMI088_delay_ms+0xc>
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	22a8      	movs	r2, #168	@ 0xa8
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d0f8      	beq.n	8000ef4 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d206      	bcs.n	8000f18 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4413      	add	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	e007      	b.n	8000f28 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad2      	subs	r2, r2, r3
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4413      	add	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d200      	bcs.n	8000f36 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000f34:	e7de      	b.n	8000ef4 <BMI088_delay_us+0x34>
            {
                break;
 8000f36:	bf00      	nop
            }
        }
    }


}
 8000f38:	bf00      	nop
 8000f3a:	3724      	adds	r7, #36	@ 0x24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <BMI088_ACCEL_NS_L+0x18>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <BMI088_ACCEL_NS_L+0x1c>)
 8000f52:	8811      	ldrh	r1, [r2, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 fab2 	bl	80074c0 <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <BMI088_ACCEL_NS_H+0x18>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <BMI088_ACCEL_NS_H+0x1c>)
 8000f72:	8811      	ldrh	r1, [r2, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4618      	mov	r0, r3
 8000f78:	f006 faa2 	bl	80074c0 <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <BMI088_GYRO_NS_L+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <BMI088_GYRO_NS_L+0x1c>)
 8000f92:	8811      	ldrh	r1, [r2, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 fa92 	bl	80074c0 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	2000000c 	.word	0x2000000c

08000fa8 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <BMI088_GYRO_NS_H+0x18>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <BMI088_GYRO_NS_H+0x1c>)
 8000fb2:	8811      	ldrh	r1, [r2, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f006 fa82 	bl	80074c0 <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	2000000c 	.word	0x2000000c

08000fc8 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000fd2:	f107 020f 	add.w	r2, r7, #15
 8000fd6:	1df9      	adds	r1, r7, #7
 8000fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <BMI088_read_write_byte+0x28>)
 8000fe2:	f007 ff67 	bl	8008eb4 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000714 	.word	0x20000714

08000ff4 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001002:	f7ff ffa1 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001006:	2080      	movs	r0, #128	@ 0x80
 8001008:	f7ff ffde 	bl	8000fc8 <BMI088_read_write_byte>
 800100c:	2055      	movs	r0, #85	@ 0x55
 800100e:	f7ff ffdb 	bl	8000fc8 <BMI088_read_write_byte>
 8001012:	2055      	movs	r0, #85	@ 0x55
 8001014:	f7ff ffd8 	bl	8000fc8 <BMI088_read_write_byte>
 8001018:	4603      	mov	r3, r0
 800101a:	71bb      	strb	r3, [r7, #6]
 800101c:	f7ff ffa4 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001020:	2096      	movs	r0, #150	@ 0x96
 8001022:	f7ff ff4d 	bl	8000ec0 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001026:	f7ff ff8f 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800102a:	2080      	movs	r0, #128	@ 0x80
 800102c:	f7ff ffcc 	bl	8000fc8 <BMI088_read_write_byte>
 8001030:	2055      	movs	r0, #85	@ 0x55
 8001032:	f7ff ffc9 	bl	8000fc8 <BMI088_read_write_byte>
 8001036:	2055      	movs	r0, #85	@ 0x55
 8001038:	f7ff ffc6 	bl	8000fc8 <BMI088_read_write_byte>
 800103c:	4603      	mov	r3, r0
 800103e:	71bb      	strb	r3, [r7, #6]
 8001040:	f7ff ff92 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001044:	2096      	movs	r0, #150	@ 0x96
 8001046:	f7ff ff3b 	bl	8000ec0 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 800104a:	f7ff ff7d 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800104e:	21b6      	movs	r1, #182	@ 0xb6
 8001050:	207e      	movs	r0, #126	@ 0x7e
 8001052:	f000 fa4d 	bl	80014f0 <BMI088_write_single_reg>
 8001056:	f7ff ff87 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800105a:	2050      	movs	r0, #80	@ 0x50
 800105c:	f7ff ff1c 	bl	8000e98 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001060:	f7ff ff72 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001064:	2080      	movs	r0, #128	@ 0x80
 8001066:	f7ff ffaf 	bl	8000fc8 <BMI088_read_write_byte>
 800106a:	2055      	movs	r0, #85	@ 0x55
 800106c:	f7ff ffac 	bl	8000fc8 <BMI088_read_write_byte>
 8001070:	2055      	movs	r0, #85	@ 0x55
 8001072:	f7ff ffa9 	bl	8000fc8 <BMI088_read_write_byte>
 8001076:	4603      	mov	r3, r0
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	f7ff ff75 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800107e:	2096      	movs	r0, #150	@ 0x96
 8001080:	f7ff ff1e 	bl	8000ec0 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001084:	f7ff ff60 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001088:	2080      	movs	r0, #128	@ 0x80
 800108a:	f7ff ff9d 	bl	8000fc8 <BMI088_read_write_byte>
 800108e:	2055      	movs	r0, #85	@ 0x55
 8001090:	f7ff ff9a 	bl	8000fc8 <BMI088_read_write_byte>
 8001094:	2055      	movs	r0, #85	@ 0x55
 8001096:	f7ff ff97 	bl	8000fc8 <BMI088_read_write_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	f7ff ff63 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010a2:	2096      	movs	r0, #150	@ 0x96
 80010a4:	f7ff ff0c 	bl	8000ec0 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	2b1e      	cmp	r3, #30
 80010ac:	d001      	beq.n	80010b2 <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 80010ae:	23ff      	movs	r3, #255	@ 0xff
 80010b0:	e052      	b.n	8001158 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e04b      	b.n	8001150 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 80010b8:	f7ff ff46 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	4928      	ldr	r1, [pc, #160]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	7818      	ldrb	r0, [r3, #0]
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4924      	ldr	r1, [pc, #144]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	3301      	adds	r3, #1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	f000 fa08 	bl	80014f0 <BMI088_write_single_reg>
 80010e0:	f7ff ff42 	bl	8000f68 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010e4:	2096      	movs	r0, #150	@ 0x96
 80010e6:	f7ff feeb 	bl	8000ec0 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80010ea:	f7ff ff2d 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	491b      	ldr	r1, [pc, #108]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff60 	bl	8000fc8 <BMI088_read_write_byte>
 8001108:	2055      	movs	r0, #85	@ 0x55
 800110a:	f7ff ff5d 	bl	8000fc8 <BMI088_read_write_byte>
 800110e:	2055      	movs	r0, #85	@ 0x55
 8001110:	f7ff ff5a 	bl	8000fc8 <BMI088_read_write_byte>
 8001114:	4603      	mov	r3, r0
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	f7ff ff26 	bl	8000f68 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800111c:	2096      	movs	r0, #150	@ 0x96
 800111e:	f7ff fecf 	bl	8000ec0 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	490e      	ldr	r1, [pc, #56]	@ (8001160 <BMI088_accel_init+0x16c>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	440b      	add	r3, r1
 800112e:	3301      	adds	r3, #1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	79ba      	ldrb	r2, [r7, #6]
 8001134:	429a      	cmp	r2, r3
 8001136:	d008      	beq.n	800114a <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	4909      	ldr	r1, [pc, #36]	@ (8001160 <BMI088_accel_init+0x16c>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	440b      	add	r3, r1
 8001144:	3302      	adds	r3, #2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	e006      	b.n	8001158 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d9b0      	bls.n	80010b8 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000018 	.word	0x20000018

08001164 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001172:	f7ff ff09 	bl	8000f88 <BMI088_GYRO_NS_L>
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	4619      	mov	r1, r3
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f9cc 	bl	8001518 <BMI088_read_single_reg>
 8001180:	f7ff ff12 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001184:	2096      	movs	r0, #150	@ 0x96
 8001186:	f7ff fe9b 	bl	8000ec0 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800118a:	f7ff fefd 	bl	8000f88 <BMI088_GYRO_NS_L>
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	4619      	mov	r1, r3
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f9c0 	bl	8001518 <BMI088_read_single_reg>
 8001198:	f7ff ff06 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800119c:	2096      	movs	r0, #150	@ 0x96
 800119e:	f7ff fe8f 	bl	8000ec0 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80011a2:	f7ff fef1 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011a6:	21b6      	movs	r1, #182	@ 0xb6
 80011a8:	2014      	movs	r0, #20
 80011aa:	f000 f9a1 	bl	80014f0 <BMI088_write_single_reg>
 80011ae:	f7ff fefb 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80011b2:	2050      	movs	r0, #80	@ 0x50
 80011b4:	f7ff fe70 	bl	8000e98 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011b8:	f7ff fee6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011bc:	1dbb      	adds	r3, r7, #6
 80011be:	4619      	mov	r1, r3
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f9a9 	bl	8001518 <BMI088_read_single_reg>
 80011c6:	f7ff feef 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011ca:	2096      	movs	r0, #150	@ 0x96
 80011cc:	f7ff fe78 	bl	8000ec0 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011d0:	f7ff feda 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	4619      	mov	r1, r3
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f99d 	bl	8001518 <BMI088_read_single_reg>
 80011de:	f7ff fee3 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011e2:	2096      	movs	r0, #150	@ 0x96
 80011e4:	f7ff fe6c 	bl	8000ec0 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	d001      	beq.n	80011f2 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80011ee:	23ff      	movs	r3, #255	@ 0xff
 80011f0:	e049      	b.n	8001286 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e042      	b.n	800127e <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 80011f8:	f7ff fec6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4924      	ldr	r1, [pc, #144]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	440b      	add	r3, r1
 8001208:	7818      	ldrb	r0, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	4920      	ldr	r1, [pc, #128]	@ (8001290 <BMI088_gyro_init+0x12c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	440b      	add	r3, r1
 8001216:	3301      	adds	r3, #1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	f000 f968 	bl	80014f0 <BMI088_write_single_reg>
 8001220:	f7ff fec2 	bl	8000fa8 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001224:	2096      	movs	r0, #150	@ 0x96
 8001226:	f7ff fe4b 	bl	8000ec0 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 800122a:	f7ff fead 	bl	8000f88 <BMI088_GYRO_NS_L>
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	4917      	ldr	r1, [pc, #92]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	440b      	add	r3, r1
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	1dba      	adds	r2, r7, #6
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f969 	bl	8001518 <BMI088_read_single_reg>
 8001246:	f7ff feaf 	bl	8000fa8 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800124a:	2096      	movs	r0, #150	@ 0x96
 800124c:	f7ff fe38 	bl	8000ec0 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	490f      	ldr	r1, [pc, #60]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	440b      	add	r3, r1
 800125c:	3301      	adds	r3, #1
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	429a      	cmp	r2, r3
 8001264:	d008      	beq.n	8001278 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4909      	ldr	r1, [pc, #36]	@ (8001290 <BMI088_gyro_init+0x12c>)
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	440b      	add	r3, r1
 8001272:	3302      	adds	r3, #2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	e006      	b.n	8001286 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	3301      	adds	r3, #1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d9b9      	bls.n	80011f8 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000002c 	.word	0x2000002c

08001294 <IMU_get_gyro>:

float IMU_get_gyro(axis_t axis) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	BMI088_read(gyro, accel, &temp);
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <IMU_get_gyro+0x4c>)
 80012a0:	4910      	ldr	r1, [pc, #64]	@ (80012e4 <IMU_get_gyro+0x50>)
 80012a2:	4811      	ldr	r0, [pc, #68]	@ (80012e8 <IMU_get_gyro+0x54>)
 80012a4:	f000 f836 	bl	8001314 <BMI088_read>
	if(axis == x){
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <IMU_get_gyro+0x20>
		return gyro[0];
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <IMU_get_gyro+0x54>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	e00d      	b.n	80012d0 <IMU_get_gyro+0x3c>
	} else if (axis == y) {
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d102      	bne.n	80012c0 <IMU_get_gyro+0x2c>
		return gyro[1];
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <IMU_get_gyro+0x54>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	e007      	b.n	80012d0 <IMU_get_gyro+0x3c>
	} else if (axis == z) {
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d102      	bne.n	80012cc <IMU_get_gyro+0x38>
		return gyro[2];
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <IMU_get_gyro+0x54>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	e001      	b.n	80012d0 <IMU_get_gyro+0x3c>
	} else {
		return 0;
 80012cc:	f04f 0300 	mov.w	r3, #0
	}
}
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000026c 	.word	0x2000026c
 80012e4:	20000260 	.word	0x20000260
 80012e8:	20000254 	.word	0x20000254

080012ec <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 80012f0:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <IMU_get_temp+0x1c>)
 80012f2:	4906      	ldr	r1, [pc, #24]	@ (800130c <IMU_get_temp+0x20>)
 80012f4:	4806      	ldr	r0, [pc, #24]	@ (8001310 <IMU_get_temp+0x24>)
 80012f6:	f000 f80d 	bl	8001314 <BMI088_read>
	return temp;
 80012fa:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <IMU_get_temp+0x1c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	ee07 3a90 	vmov	s15, r3
}
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000026c 	.word	0x2000026c
 800130c:	20000260 	.word	0x20000260
 8001310:	20000254 	.word	0x20000254

08001314 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8001320:	4a70      	ldr	r2, [pc, #448]	@ (80014e4 <BMI088_read+0x1d0>)
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	3304      	adds	r3, #4
 800132e:	8019      	strh	r1, [r3, #0]
 8001330:	3302      	adds	r3, #2
 8001332:	0c0a      	lsrs	r2, r1, #16
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 800133a:	f7ff fe05 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800133e:	2092      	movs	r0, #146	@ 0x92
 8001340:	f7ff fe42 	bl	8000fc8 <BMI088_read_write_byte>
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2206      	movs	r2, #6
 800134a:	4619      	mov	r1, r3
 800134c:	2012      	movs	r0, #18
 800134e:	f000 f8fb 	bl	8001548 <BMI088_read_muli_reg>
 8001352:	f7ff fe09 	bl	8000f68 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8001356:	7d7b      	ldrb	r3, [r7, #21]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7d3b      	ldrb	r3, [r7, #20]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001364:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001370:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <BMI088_read+0x1d4>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	7dbb      	ldrb	r3, [r7, #22]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800138e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139a:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <BMI088_read+0x1d4>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3304      	adds	r3, #4
 80013a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a8:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80013ac:	7e7b      	ldrb	r3, [r7, #25]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7e3b      	ldrb	r3, [r7, #24]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80013ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c6:	4b48      	ldr	r3, [pc, #288]	@ (80014e8 <BMI088_read+0x1d4>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3308      	adds	r3, #8
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 80013d8:	f7ff fdd6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2208      	movs	r2, #8
 80013e2:	4619      	mov	r1, r3
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f8af 	bl	8001548 <BMI088_read_muli_reg>
 80013ea:	f7ff fddd 	bl	8000fa8 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80013ee:	7d3b      	ldrb	r3, [r7, #20]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d140      	bne.n	8001476 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001402:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140e:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <BMI088_read+0x1d8>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800141e:	7e7b      	ldrb	r3, [r7, #25]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	7e3b      	ldrb	r3, [r7, #24]
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800142c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <BMI088_read+0x1d8>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001446:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001458:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <BMI088_read+0x1d8>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3308      	adds	r3, #8
 800146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001472:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001476:	f7ff fd67 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800147a:	20a2      	movs	r0, #162	@ 0xa2
 800147c:	f7ff fda4 	bl	8000fc8 <BMI088_read_write_byte>
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2202      	movs	r2, #2
 8001486:	4619      	mov	r1, r3
 8001488:	2022      	movs	r0, #34	@ 0x22
 800148a:	f000 f85d 	bl	8001548 <BMI088_read_muli_reg>
 800148e:	f7ff fd6b 	bl	8000f68 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	b21a      	sxth	r2, r3
 8001498:	7d7b      	ldrb	r3, [r7, #21]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 80014a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ac:	db04      	blt.n	80014b8 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 80014b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80014d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a00 	vstr	s15, [r3]
}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08011eb0 	.word	0x08011eb0
 80014e8:	20000010 	.word	0x20000010
 80014ec:	20000014 	.word	0x20000014

080014f0 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	460a      	mov	r2, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd60 	bl	8000fc8 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fd5c 	bl	8000fc8 <BMI088_read_write_byte>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd4b 	bl	8000fc8 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8001532:	2055      	movs	r0, #85	@ 0x55
 8001534:	f7ff fd48 	bl	8000fc8 <BMI088_read_write_byte>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	701a      	strb	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fd31 	bl	8000fc8 <BMI088_read_write_byte>

    while (len != 0)
 8001566:	e00c      	b.n	8001582 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001568:	2055      	movs	r0, #85	@ 0x55
 800156a:	f7ff fd2d 	bl	8000fc8 <BMI088_read_write_byte>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	701a      	strb	r2, [r3, #0]
        buf++;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	603b      	str	r3, [r7, #0]
        len--;
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	3b01      	subs	r3, #1
 8001580:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ef      	bne.n	8001568 <BMI088_read_muli_reg+0x20>
    }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	f107 0214 	add.w	r2, r7, #20
 80015a4:	2100      	movs	r1, #0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f004 fd73 	bl	8006092 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 80015b2:	f080 80d9 	bcs.w	8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 80015b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ba:	d807      	bhi.n	80015cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 80015bc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80015c0:	d066      	beq.n	8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 80015c2:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 80015c6:	f000 80a4 	beq.w	8001712 <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 80015ca:	e0cd      	b.n	8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015d6:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 80015d8:	4b69      	ldr	r3, [pc, #420]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a69      	ldr	r2, [pc, #420]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015e0:	460b      	mov	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	881a      	ldrh	r2, [r3, #0]
 80015ec:	4b64      	ldr	r3, [pc, #400]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	b210      	sxth	r0, r2
 80015f4:	4a63      	ldr	r2, [pc, #396]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015f6:	460b      	mov	r3, r1
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	3308      	adds	r3, #8
 8001602:	4602      	mov	r2, r0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	7b3b      	ldrb	r3, [r7, #12]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	b290      	uxth	r0, r2
 800161c:	4a59      	ldr	r2, [pc, #356]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800161e:	460b      	mov	r3, r1
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	4602      	mov	r2, r0
 800162a:	801a      	strh	r2, [r3, #0]
 800162c:	7bbb      	ldrb	r3, [r7, #14]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	b21b      	sxth	r3, r3
 8001636:	4952      	ldr	r1, [pc, #328]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001638:	7809      	ldrb	r1, [r1, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	b218      	sxth	r0, r3
 800163e:	4a51      	ldr	r2, [pc, #324]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001640:	460b      	mov	r3, r1
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	3302      	adds	r3, #2
 800164c:	4602      	mov	r2, r0
 800164e:	801a      	strh	r2, [r3, #0]
 8001650:	7c3b      	ldrb	r3, [r7, #16]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	7c7b      	ldrb	r3, [r7, #17]
 8001658:	b21b      	sxth	r3, r3
 800165a:	4949      	ldr	r1, [pc, #292]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800165c:	7809      	ldrb	r1, [r1, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	b218      	sxth	r0, r3
 8001662:	4a48      	ldr	r2, [pc, #288]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	3304      	adds	r3, #4
 8001670:	4602      	mov	r2, r0
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	4b42      	ldr	r3, [pc, #264]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	7cb8      	ldrb	r0, [r7, #18]
 800167c:	4a41      	ldr	r2, [pc, #260]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800167e:	460b      	mov	r3, r1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	3306      	adds	r3, #6
 800168a:	4602      	mov	r2, r0
 800168c:	701a      	strb	r2, [r3, #0]
            break;
 800168e:	e072      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8001690:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	f240 1201 	movw	r2, #257	@ 0x101
 8001698:	4293      	cmp	r3, r2
 800169a:	d067      	beq.n	800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b33      	ldr	r3, [pc, #204]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016be:	805a      	strh	r2, [r3, #2]
 80016c0:	7c3b      	ldrb	r3, [r7, #16]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	7c7b      	ldrb	r3, [r7, #17]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016d0:	809a      	strh	r2, [r3, #4]
 80016d2:	7cbb      	ldrb	r3, [r7, #18]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	7cfb      	ldrb	r3, [r7, #19]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016e2:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 80016e4:	4b29      	ldr	r3, [pc, #164]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ea:	f5b3 6f53 	cmp.w	r3, #3376	@ 0xd30
 80016ee:	db04      	blt.n	80016fa <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016f2:	f44f 6253 	mov.w	r2, #3376	@ 0xd30
 80016f6:	801a      	strh	r2, [r3, #0]
        		break;
 80016f8:	e03a      	b.n	8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 80016fa:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	f640 0254 	movw	r2, #2132	@ 0x854
 8001704:	4293      	cmp	r3, r2
 8001706:	dc33      	bgt.n	8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800170a:	f640 0254 	movw	r2, #2132	@ 0x854
 800170e:	801a      	strh	r2, [r3, #0]
        		break;
 8001710:	e02e      	b.n	8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f240 1211 	movw	r2, #273	@ 0x111
 800171a:	4293      	cmp	r3, r2
 800171c:	d02a      	beq.n	8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 800171e:	7b3b      	ldrb	r3, [r7, #12]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21a      	sxth	r2, r3
 8001724:	7b7b      	ldrb	r3, [r7, #13]
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21a      	sxth	r2, r3
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b21a      	sxth	r2, r3
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001740:	805a      	strh	r2, [r3, #2]
 8001742:	7c3b      	ldrb	r3, [r7, #16]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b21a      	sxth	r2, r3
 8001748:	7c7b      	ldrb	r3, [r7, #17]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21a      	sxth	r2, r3
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001752:	809a      	strh	r2, [r3, #4]
 8001754:	7cbb      	ldrb	r3, [r7, #18]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b21a      	sxth	r2, r3
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	b21b      	sxth	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001764:	80da      	strh	r2, [r3, #6]
        	    break;
 8001766:	e006      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 8001768:	bf00      	nop
 800176a:	e004      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 800176c:	bf00      	nop
 800176e:	e002      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001770:	bf00      	nop
 8001772:	e000      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001774:	bf00      	nop
        }
    }
}
 8001776:	bf00      	nop
 8001778:	3730      	adds	r7, #48	@ 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200003d8 	.word	0x200003d8
 8001784:	20000288 	.word	0x20000288
 8001788:	20000058 	.word	0x20000058
 800178c:	200002f8 	.word	0x200002f8
 8001790:	20000300 	.word	0x20000300

08001794 <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	80fb      	strh	r3, [r7, #6]
 80017a6:	4603      	mov	r3, r0
 80017a8:	80bb      	strh	r3, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]
 80017ae:	4613      	mov	r3, r2
 80017b0:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4a20      	ldr	r2, [pc, #128]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 80017b6:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 80017c6:	2208      	movs	r2, #8
 80017c8:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 80017ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ce:	121b      	asrs	r3, r3, #8
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <CAN2_cmd_motors+0xa8>)
 80017d6:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <CAN2_cmd_motors+0xa8>)
 80017de:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 80017e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017e4:	121b      	asrs	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <CAN2_cmd_motors+0xa8>)
 80017ec:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <CAN2_cmd_motors+0xa8>)
 80017f4:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 80017f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017fa:	121b      	asrs	r3, r3, #8
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <CAN2_cmd_motors+0xa8>)
 8001802:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 8001804:	883b      	ldrh	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <CAN2_cmd_motors+0xa8>)
 800180a:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 800180c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001810:	121b      	asrs	r3, r3, #8
 8001812:	b21b      	sxth	r3, r3
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <CAN2_cmd_motors+0xa8>)
 8001818:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 800181a:	8c3b      	ldrh	r3, [r7, #32]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <CAN2_cmd_motors+0xa8>)
 8001820:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <CAN2_cmd_motors+0xa8>)
 8001828:	4903      	ldr	r1, [pc, #12]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <CAN2_cmd_motors+0xac>)
 800182c:	f004 fb56 	bl	8005edc <HAL_CAN_AddTxMessage>
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	200003b8 	.word	0x200003b8
 800183c:	200003d0 	.word	0x200003d0
 8001840:	20000698 	.word	0x20000698

08001844 <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af02      	add	r7, sp, #8
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	3b01      	subs	r3, #1
 800185a:	491c      	ldr	r1, [pc, #112]	@ (80018cc <set_M3508_current+0x88>)
 800185c:	88ba      	ldrh	r2, [r7, #4]
 800185e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b04      	cmp	r3, #4
 8001868:	dc02      	bgt.n	8001870 <set_M3508_current+0x2c>
 800186a:	2b00      	cmp	r3, #0
 800186c:	dc04      	bgt.n	8001878 <set_M3508_current+0x34>
		case (7):
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
		}
		default: {
	        break;
 800186e:	e027      	b.n	80018c0 <set_M3508_current+0x7c>
 8001870:	3b05      	subs	r3, #5
	switch(motorID) {
 8001872:	2b03      	cmp	r3, #3
 8001874:	d824      	bhi.n	80018c0 <set_M3508_current+0x7c>
 8001876:	e011      	b.n	800189c <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <set_M3508_current+0x88>)
 800187a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <set_M3508_current+0x88>)
 8001880:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <set_M3508_current+0x88>)
 8001886:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <set_M3508_current+0x88>)
 800188c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	4603      	mov	r3, r0
 8001894:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001898:	f7ff ff7c 	bl	8001794 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <set_M3508_current+0x88>)
 800189e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <set_M3508_current+0x88>)
 80018a4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <set_M3508_current+0x88>)
 80018aa:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80018ae:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <set_M3508_current+0x88>)
 80018b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4603      	mov	r3, r0
 80018b8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80018bc:	f7ff ff6a 	bl	8001794 <CAN2_cmd_motors>
	        break;
 80018c0:	bf00      	nop
	    }
	}
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000270 	.word	0x20000270

080018d0 <set_GM6020_voltage>:
/**
  * @brief          similar to the above function, but specifically for the GM6020's voltage control mode
  * @param[in]      motor ID (5~11) and its target voltage (-25000 ~ 25000)
  * @retval         none
  */
void set_GM6020_voltage(int8_t motorID, int16_t setVoltage) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	460a      	mov	r2, r1
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setVoltage;      // -1 for 0 indexing and -4 for group 1, which cannot contain GM6020s
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	491a      	ldr	r1, [pc, #104]	@ (8001950 <set_GM6020_voltage+0x80>)
 80018e8:	88ba      	ldrh	r2, [r7, #4]
 80018ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	dc02      	bgt.n	80018fc <set_GM6020_voltage+0x2c>
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	da04      	bge.n	8001904 <set_GM6020_voltage+0x34>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
		}
		default: {
	        break;
 80018fa:	e024      	b.n	8001946 <set_GM6020_voltage+0x76>
 80018fc:	3b09      	subs	r3, #9
	switch(motorID) {
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d821      	bhi.n	8001946 <set_GM6020_voltage+0x76>
 8001902:	e011      	b.n	8001928 <set_GM6020_voltage+0x58>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001906:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <set_GM6020_voltage+0x80>)
 800190c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001912:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001918:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4603      	mov	r3, r0
 8001920:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8001924:	f7ff ff36 	bl	8001794 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <set_GM6020_voltage+0x80>)
 800192a:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001930:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001936:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800193a:	2000      	movs	r0, #0
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	f240 20ff 	movw	r0, #767	@ 0x2ff
 8001942:	f7ff ff27 	bl	8001794 <CAN2_cmd_motors>
	        break;
 8001946:	bf00      	nop
	    }
	}
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000270 	.word	0x20000270

08001954 <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001954:	b490      	push	{r4, r7}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	eef0 6a40 	vmov.f32	s13, s0
 8001962:	eeb0 7a60 	vmov.f32	s14, s1
 8001966:	eef0 7a41 	vmov.f32	s15, s2
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	4613      	mov	r3, r2
 800196e:	81bb      	strh	r3, [r7, #12]
 8001970:	edc7 6a00 	vstr	s13, [r7]
 8001974:	ed87 7a01 	vstr	s14, [r7, #4]
 8001978:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	3b01      	subs	r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001988:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800198c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ab8 <calc_current2RPM_PID+0x164>)
 800198e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001992:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001996:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800199a:	4c48      	ldr	r4, [pc, #288]	@ (8001abc <calc_current2RPM_PID+0x168>)
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4423      	add	r3, r4
 80019a6:	3302      	adds	r3, #2
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	1ac2      	subs	r2, r0, r3
 80019ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019b2:	440a      	add	r2, r1
 80019b4:	4940      	ldr	r1, [pc, #256]	@ (8001ab8 <calc_current2RPM_PID+0x164>)
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 80019ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019be:	4a40      	ldr	r2, [pc, #256]	@ (8001ac0 <calc_current2RPM_PID+0x16c>)
 80019c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80019c8:	483c      	ldr	r0, [pc, #240]	@ (8001abc <calc_current2RPM_PID+0x168>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4403      	add	r3, r0
 80019d4:	3302      	adds	r3, #2
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	461a      	mov	r2, r3
 80019dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019e0:	1a8a      	subs	r2, r1, r2
 80019e2:	4938      	ldr	r1, [pc, #224]	@ (8001ac4 <calc_current2RPM_PID+0x170>)
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 80019e8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80019ec:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80019f0:	4832      	ldr	r0, [pc, #200]	@ (8001abc <calc_current2RPM_PID+0x168>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4403      	add	r3, r0
 80019fc:	3302      	adds	r3, #2
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	461a      	mov	r2, r3
 8001a04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a08:	1a8a      	subs	r2, r1, r2
 8001a0a:	492f      	ldr	r1, [pc, #188]	@ (8001ac8 <calc_current2RPM_PID+0x174>)
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001a10:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a14:	4929      	ldr	r1, [pc, #164]	@ (8001abc <calc_current2RPM_PID+0x168>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	440b      	add	r3, r1
 8001a20:	3302      	adds	r3, #2
 8001a22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <calc_current2RPM_PID+0x16c>)
 8001a2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001a32:	ed97 7a00 	vldr	s14, [r7]
 8001a36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a3a:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <calc_current2RPM_PID+0x174>)
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a54:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <calc_current2RPM_PID+0x164>)
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a72:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <calc_current2RPM_PID+0x170>)
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	ee17 3a90 	vmov	r3, s15
 8001a90:	617b      	str	r3, [r7, #20]
	//apply power limit
	//if (ID == 6) {sendB2bData(CAN_b2b_B_gyro_ID, errRPM[5], 0, 0, 0);}
	if (return_current_val > 16384) {return_current_val = 16384;}
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a98:	dd02      	ble.n	8001aa0 <calc_current2RPM_PID+0x14c>
 8001a9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a9e:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001aa6:	da01      	bge.n	8001aac <calc_current2RPM_PID+0x158>
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <calc_current2RPM_PID+0x178>)
 8001aaa:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001aac:	697b      	ldr	r3, [r7, #20]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc90      	pop	{r4, r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000360 	.word	0x20000360
 8001abc:	20000288 	.word	0x20000288
 8001ac0:	20000308 	.word	0x20000308
 8001ac4:	20000334 	.word	0x20000334
 8001ac8:	2000038c 	.word	0x2000038c
 8001acc:	ffffc000 	.word	0xffffc000

08001ad0 <calc_voltage2RPM_PID>:
	if (return_current_val > 10000) {return_current_val = 10000;}
	if (return_current_val < -10000) {return_current_val = -10000;}
	return return_current_val;
}

int32_t calc_voltage2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001ad0:	b490      	push	{r4, r7}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460a      	mov	r2, r1
 8001ada:	eef0 6a40 	vmov.f32	s13, s0
 8001ade:	eeb0 7a60 	vmov.f32	s14, s1
 8001ae2:	eef0 7a41 	vmov.f32	s15, s2
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	81bb      	strh	r3, [r7, #12]
 8001aec:	edc7 6a00 	vstr	s13, [r7]
 8001af0:	ed87 7a01 	vstr	s14, [r7, #4]
 8001af4:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001b04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b08:	4a53      	ldr	r2, [pc, #332]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001b0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b0e:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001b12:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b16:	4c51      	ldr	r4, [pc, #324]	@ (8001c5c <calc_voltage2RPM_PID+0x18c>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4423      	add	r3, r4
 8001b22:	3302      	adds	r3, #2
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	1ac2      	subs	r2, r0, r3
 8001b2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b2e:	440a      	add	r2, r1
 8001b30:	4949      	ldr	r1, [pc, #292]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001b36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b3a:	4a49      	ldr	r2, [pc, #292]	@ (8001c60 <calc_voltage2RPM_PID+0x190>)
 8001b3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b40:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b44:	4845      	ldr	r0, [pc, #276]	@ (8001c5c <calc_voltage2RPM_PID+0x18c>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4403      	add	r3, r0
 8001b50:	3302      	adds	r3, #2
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	461a      	mov	r2, r3
 8001b58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b5c:	1a8a      	subs	r2, r1, r2
 8001b5e:	4941      	ldr	r1, [pc, #260]	@ (8001c64 <calc_voltage2RPM_PID+0x194>)
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001b64:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b68:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b6c:	483b      	ldr	r0, [pc, #236]	@ (8001c5c <calc_voltage2RPM_PID+0x18c>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4403      	add	r3, r0
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b84:	1a8a      	subs	r2, r1, r2
 8001b86:	4938      	ldr	r1, [pc, #224]	@ (8001c68 <calc_voltage2RPM_PID+0x198>)
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// usart_printf("%d %d\r\n", getMotorRPM(5), 0);
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001b8c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b90:	4932      	ldr	r1, [pc, #200]	@ (8001c5c <calc_voltage2RPM_PID+0x18c>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ba2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c60 <calc_voltage2RPM_PID+0x190>)
 8001baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (iRPM[ID] >= 3400) {iRPM[ID] = 2600;}
 8001bae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bb2:	4a29      	ldr	r2, [pc, #164]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	dd06      	ble.n	8001bce <calc_voltage2RPM_PID+0xfe>
 8001bc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bc4:	4a24      	ldr	r2, [pc, #144]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001bc6:	f640 2128 	movw	r1, #2600	@ 0xa28
 8001bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001bce:	ed97 7a00 	vldr	s14, [r7]
 8001bd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bd6:	4a24      	ldr	r2, [pc, #144]	@ (8001c68 <calc_voltage2RPM_PID+0x198>)
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be8:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c06:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c0e:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <calc_voltage2RPM_PID+0x194>)
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c28:	ee17 3a90 	vmov	r3, s15
 8001c2c:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001c34:	4293      	cmp	r3, r2
 8001c36:	dd02      	ble.n	8001c3e <calc_voltage2RPM_PID+0x16e>
 8001c38:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001c3c:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <calc_voltage2RPM_PID+0x19c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	da01      	bge.n	8001c4a <calc_voltage2RPM_PID+0x17a>
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <calc_voltage2RPM_PID+0x19c>)
 8001c48:	617b      	str	r3, [r7, #20]

	return return_voltage_val;
 8001c4a:	697b      	ldr	r3, [r7, #20]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc90      	pop	{r4, r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000360 	.word	0x20000360
 8001c5c:	20000288 	.word	0x20000288
 8001c60:	20000308 	.word	0x20000308
 8001c64:	20000334 	.word	0x20000334
 8001c68:	2000038c 	.word	0x2000038c
 8001c6c:	ffff9e58 	.word	0xffff9e58

08001c70 <setM3508RPM>:
	return return_voltage_val;
}

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	eef0 6a40 	vmov.f32	s13, s0
 8001c7e:	eeb0 7a60 	vmov.f32	s14, s1
 8001c82:	eef0 7a41 	vmov.f32	s15, s2
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	81bb      	strh	r3, [r7, #12]
 8001c8c:	edc7 6a00 	vstr	s13, [r7]
 8001c90:	ed87 7a01 	vstr	s14, [r7, #4]
 8001c94:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 8001c98:	edd7 6a00 	vldr	s13, [r7]
 8001c9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cac:	eeb0 0a66 	vmov.f32	s0, s13
 8001cb0:	eef0 0a47 	vmov.f32	s1, s14
 8001cb4:	eeb0 1a67 	vmov.f32	s2, s15
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fe4a 	bl	8001954 <calc_current2RPM_PID>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fdba 	bl	8001844 <set_M3508_current>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <setGM6020voltageRPM>:

void setGM6020currentRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
}

void setGM6020voltageRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	eef0 6a40 	vmov.f32	s13, s0
 8001ce6:	eeb0 7a60 	vmov.f32	s14, s1
 8001cea:	eef0 7a41 	vmov.f32	s15, s2
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	81bb      	strh	r3, [r7, #12]
 8001cf4:	edc7 6a00 	vstr	s13, [r7]
 8001cf8:	ed87 7a01 	vstr	s14, [r7, #4]
 8001cfc:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2RPM_PID(motorID, RPMtarget, preset));
 8001d00:	edd7 6a00 	vldr	s13, [r7]
 8001d04:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d14:	eeb0 0a66 	vmov.f32	s0, s13
 8001d18:	eef0 0a47 	vmov.f32	s1, s14
 8001d1c:	eeb0 1a67 	vmov.f32	s2, s15
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fed4 	bl	8001ad0 <calc_voltage2RPM_PID>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fdcc 	bl	80018d0 <set_GM6020_voltage>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <getMotorPosition>:

void setM2006RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_M3508_current(motorID, calc_M2006_current2RPM_PID(motorID, RPMtarget, preset));
}

uint16_t getMotorPosition(int8_t motorID) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].motor_position;
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	1e5a      	subs	r2, r3, #1
 8001d50:	4906      	ldr	r1, [pc, #24]	@ (8001d6c <getMotorPosition+0x2c>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	440b      	add	r3, r1
 8001d5c:	881b      	ldrh	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000288 	.word	0x20000288

08001d70 <usart_Init>:
referee_warning_t referee_warning;
dart_info_t dart_info;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d78:	4905      	ldr	r1, [pc, #20]	@ (8001d90 <usart_Init+0x20>)
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <usart_Init+0x24>)
 8001d7c:	f008 fa8b 	bl	800a296 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d84:	4904      	ldr	r1, [pc, #16]	@ (8001d98 <usart_Init+0x28>)
 8001d86:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <usart_Init+0x2c>)
 8001d88:	f008 fa85 	bl	800a296 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200003dc 	.word	0x200003dc
 8001d94:	2000088c 	.word	0x2000088c
 8001d98:	200004dc 	.word	0x200004dc
 8001d9c:	20000914 	.word	0x20000914

08001da0 <HAL_UARTEx_RxEventCallback>:
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da4:	b09f      	sub	sp, #124	@ 0x7c
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8001daa:	460b      	mov	r3, r1
 8001dac:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	if (huart == &huart6) {
 8001db0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001db2:	4b81      	ldr	r3, [pc, #516]	@ (8001fb8 <HAL_UARTEx_RxEventCallback+0x218>)
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f040 81c9 	bne.w	800214c <HAL_UARTEx_RxEventCallback+0x3ac>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dbe:	497f      	ldr	r1, [pc, #508]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001dc0:	487d      	ldr	r0, [pc, #500]	@ (8001fb8 <HAL_UARTEx_RxEventCallback+0x218>)
 8001dc2:	f008 fa68 	bl	800a296 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001dc8:	795b      	ldrb	r3, [r3, #5]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	4b7b      	ldr	r3, [pc, #492]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001dd0:	799b      	ldrb	r3, [r3, #6]
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 8001ddc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8001de0:	f240 2302 	movw	r3, #514	@ 0x202
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f000 8153 	beq.w	8002090 <HAL_UARTEx_RxEventCallback+0x2f0>
 8001dea:	f240 2302 	movw	r3, #514	@ 0x202
 8001dee:	429a      	cmp	r2, r3
 8001df0:	f300 81ab 	bgt.w	800214a <HAL_UARTEx_RxEventCallback+0x3aa>
 8001df4:	f240 2301 	movw	r3, #513	@ 0x201
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f000 80e7 	beq.w	8001fcc <HAL_UARTEx_RxEventCallback+0x22c>
 8001dfe:	f240 2301 	movw	r3, #513	@ 0x201
 8001e02:	429a      	cmp	r2, r3
 8001e04:	f300 81a1 	bgt.w	800214a <HAL_UARTEx_RxEventCallback+0x3aa>
 8001e08:	f5b2 7f83 	cmp.w	r2, #262	@ 0x106
 8001e0c:	f280 819d 	bge.w	800214a <HAL_UARTEx_RxEventCallback+0x3aa>
 8001e10:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001e14:	f280 80da 	bge.w	8001fcc <HAL_UARTEx_RxEventCallback+0x22c>
 8001e18:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8001e1c:	f300 8195 	bgt.w	800214a <HAL_UARTEx_RxEventCallback+0x3aa>
 8001e20:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001e24:	f300 80d2 	bgt.w	8001fcc <HAL_UARTEx_RxEventCallback+0x22c>
 8001e28:	2a03      	cmp	r2, #3
 8001e2a:	f000 80cf 	beq.w	8001fcc <HAL_UARTEx_RxEventCallback+0x22c>
 8001e2e:	2a03      	cmp	r2, #3
 8001e30:	f300 818b 	bgt.w	800214a <HAL_UARTEx_RxEventCallback+0x3aa>
 8001e34:	2a01      	cmp	r2, #1
 8001e36:	d003      	beq.n	8001e40 <HAL_UARTEx_RxEventCallback+0xa0>
 8001e38:	2a02      	cmp	r2, #2
 8001e3a:	f000 80c3 	beq.w	8001fc4 <HAL_UARTEx_RxEventCallback+0x224>
		    case MINIMAP_DATA_HEADER: {}
		    case CUSTOM_INFO_HEADER: {}

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 8001e3e:	e184      	b.n	800214a <HAL_UARTEx_RxEventCallback+0x3aa>
		    	game_status.game_type = RxBuff_2[7];
 8001e40:	4b5e      	ldr	r3, [pc, #376]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001e42:	79db      	ldrb	r3, [r3, #7]
 8001e44:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc0 <HAL_UARTEx_RxEventCallback+0x220>)
 8001e46:	7013      	strb	r3, [r2, #0]
		    	game_status.game_progress = RxBuff_2[8];
 8001e48:	4b5c      	ldr	r3, [pc, #368]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001e4a:	7a1b      	ldrb	r3, [r3, #8]
 8001e4c:	4a5c      	ldr	r2, [pc, #368]	@ (8001fc0 <HAL_UARTEx_RxEventCallback+0x220>)
 8001e4e:	7053      	strb	r3, [r2, #1]
		    	game_status.stage_remain_time = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 8001e50:	4b5a      	ldr	r3, [pc, #360]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001e52:	7a5b      	ldrb	r3, [r3, #9]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	4b58      	ldr	r3, [pc, #352]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001e5a:	7a9b      	ldrb	r3, [r3, #10]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4a56      	ldr	r2, [pc, #344]	@ (8001fc0 <HAL_UARTEx_RxEventCallback+0x220>)
 8001e66:	8053      	strh	r3, [r2, #2]
		    		((uint64_t) RxBuff_2[11] << 56) |
 8001e68:	4b54      	ldr	r3, [pc, #336]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001e6a:	7adb      	ldrb	r3, [r3, #11]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e72:	667a      	str	r2, [r7, #100]	@ 0x64
 8001e74:	f04f 0000 	mov.w	r0, #0
 8001e78:	f04f 0100 	mov.w	r1, #0
 8001e7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e7e:	0619      	lsls	r1, r3, #24
 8001e80:	2000      	movs	r0, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 8001e82:	4b4e      	ldr	r3, [pc, #312]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001e84:	7b1b      	ldrb	r3, [r3, #12]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2200      	movs	r2, #0
 8001e8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e8c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 8001e98:	0433      	lsls	r3, r6, #16
 8001e9a:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[11] << 56) |
 8001e9c:	ea40 0402 	orr.w	r4, r0, r2
 8001ea0:	ea41 0503 	orr.w	r5, r1, r3
		    		((uint64_t) RxBuff_2[13] << 40) |
 8001ea4:	4b45      	ldr	r3, [pc, #276]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001ea6:	7b5b      	ldrb	r3, [r3, #13]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2200      	movs	r2, #0
 8001eac:	653b      	str	r3, [r7, #80]	@ 0x50
 8001eae:	657a      	str	r2, [r7, #84]	@ 0x54
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001eba:	020b      	lsls	r3, r1, #8
 8001ebc:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 8001ebe:	ea44 0802 	orr.w	r8, r4, r2
 8001ec2:	ea45 0903 	orr.w	r9, r5, r3
		    		((uint64_t) RxBuff_2[14] << 32) |
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001ec8:	7b9b      	ldrb	r3, [r3, #14]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2200      	movs	r2, #0
 8001ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ed0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001edc:	000b      	movs	r3, r1
 8001ede:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[13] << 40) |
 8001ee0:	ea48 0102 	orr.w	r1, r8, r2
 8001ee4:	6439      	str	r1, [r7, #64]	@ 0x40
 8001ee6:	ea49 0303 	orr.w	r3, r9, r3
 8001eea:	647b      	str	r3, [r7, #68]	@ 0x44
		    		((uint64_t) RxBuff_2[15] << 24) |
 8001eec:	4b33      	ldr	r3, [pc, #204]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001eee:	7bdb      	ldrb	r3, [r3, #15]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ef6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ef8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8001efc:	460b      	mov	r3, r1
 8001efe:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001f02:	460b      	mov	r3, r1
 8001f04:	ea4f 6a03 	mov.w	sl, r3, lsl #24
		    		((uint64_t) RxBuff_2[14] << 32) |
 8001f08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	ea43 030a 	orr.w	r3, r3, sl
 8001f12:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f14:	4613      	mov	r3, r2
 8001f16:	ea43 030b 	orr.w	r3, r3, fp
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
		    		((uint64_t) RxBuff_2[16] << 16) |
 8001f1c:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f1e:	7c1b      	ldrb	r3, [r3, #16]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2200      	movs	r2, #0
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001f34:	4629      	mov	r1, r5
 8001f36:	040b      	lsls	r3, r1, #16
 8001f38:	4621      	mov	r1, r4
 8001f3a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001f3e:	4621      	mov	r1, r4
 8001f40:	040a      	lsls	r2, r1, #16
		    		((uint64_t) RxBuff_2[15] << 24) |
 8001f42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f46:	4621      	mov	r1, r4
 8001f48:	4311      	orrs	r1, r2
 8001f4a:	6239      	str	r1, [r7, #32]
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	4319      	orrs	r1, r3
 8001f50:	6279      	str	r1, [r7, #36]	@ 0x24
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f54:	7c5b      	ldrb	r3, [r3, #17]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	61fa      	str	r2, [r7, #28]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	020b      	lsls	r3, r1, #8
 8001f6e:	4621      	mov	r1, r4
 8001f70:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001f74:	4621      	mov	r1, r4
 8001f76:	020a      	lsls	r2, r1, #8
		    		((uint64_t) RxBuff_2[16] << 16) |
 8001f78:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	6139      	str	r1, [r7, #16]
 8001f82:	4629      	mov	r1, r5
 8001f84:	4319      	orrs	r1, r3
 8001f86:	6179      	str	r1, [r7, #20]
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f8a:	7c9b      	ldrb	r3, [r3, #18]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	60fa      	str	r2, [r7, #12]
 8001f94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f98:	4623      	mov	r3, r4
 8001f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	460a      	mov	r2, r1
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	607b      	str	r3, [r7, #4]
		    	game_status.SyncTimeStamp =
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <HAL_UARTEx_RxEventCallback+0x220>)
 8001fae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001fb2:	e9c3 1202 	strd	r1, r2, [r3, #8]
		    	break;
 8001fb6:	e0c9      	b.n	800214c <HAL_UARTEx_RxEventCallback+0x3ac>
 8001fb8:	20000914 	.word	0x20000914
 8001fbc:	200004dc 	.word	0x200004dc
 8001fc0:	200005e0 	.word	0x200005e0
		    	game_status.game_type = RxBuff_2[7];
 8001fc4:	4b64      	ldr	r3, [pc, #400]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8001fc6:	79da      	ldrb	r2, [r3, #7]
 8001fc8:	4b64      	ldr	r3, [pc, #400]	@ (800215c <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001fca:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_id = RxBuff_2[7];
 8001fcc:	4b62      	ldr	r3, [pc, #392]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8001fce:	79da      	ldrb	r2, [r3, #7]
 8001fd0:	4b63      	ldr	r3, [pc, #396]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8001fd2:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_level = RxBuff_2[8];
 8001fd4:	4b60      	ldr	r3, [pc, #384]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8001fd6:	7a1a      	ldrb	r2, [r3, #8]
 8001fd8:	4b61      	ldr	r3, [pc, #388]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8001fda:	705a      	strb	r2, [r3, #1]
		    	robot_status.current_HP = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 8001fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8001fde:	7a5b      	ldrb	r3, [r3, #9]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8001fe6:	7a9b      	ldrb	r3, [r3, #10]
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8001ff2:	805a      	strh	r2, [r3, #2]
		    	robot_status.maximum_HP = ((uint16_t) RxBuff_2[11] << 8) | RxBuff_2[12];
 8001ff4:	4b58      	ldr	r3, [pc, #352]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8001ff6:	7adb      	ldrb	r3, [r3, #11]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	4b56      	ldr	r3, [pc, #344]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8001ffe:	7b1b      	ldrb	r3, [r3, #12]
 8002000:	b21b      	sxth	r3, r3
 8002002:	4313      	orrs	r3, r2
 8002004:	b21b      	sxth	r3, r3
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b55      	ldr	r3, [pc, #340]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 800200a:	809a      	strh	r2, [r3, #4]
		    	robot_status.shooter_barrel_cooling_value = ((uint16_t) RxBuff_2[13] << 8) | RxBuff_2[14];
 800200c:	4b52      	ldr	r3, [pc, #328]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800200e:	7b5b      	ldrb	r3, [r3, #13]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	b21a      	sxth	r2, r3
 8002014:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002016:	7b9b      	ldrb	r3, [r3, #14]
 8002018:	b21b      	sxth	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b21b      	sxth	r3, r3
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b4f      	ldr	r3, [pc, #316]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8002022:	80da      	strh	r2, [r3, #6]
		    	robot_status.shooter_barrel_heat_limit = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 8002024:	4b4c      	ldr	r3, [pc, #304]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002026:	7bdb      	ldrb	r3, [r3, #15]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21a      	sxth	r2, r3
 800202c:	4b4a      	ldr	r3, [pc, #296]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800202e:	7c1b      	ldrb	r3, [r3, #16]
 8002030:	b21b      	sxth	r3, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	b21b      	sxth	r3, r3
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 800203a:	811a      	strh	r2, [r3, #8]
		    	robot_status.chassis_power_limit = ((uint16_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 800203c:	4b46      	ldr	r3, [pc, #280]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800203e:	7c5b      	ldrb	r3, [r3, #17]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b21a      	sxth	r2, r3
 8002044:	4b44      	ldr	r3, [pc, #272]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002046:	7c9b      	ldrb	r3, [r3, #18]
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21b      	sxth	r3, r3
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8002052:	815a      	strh	r2, [r3, #10]
		    	robot_status.power_management_gimbal_output = RxBuff_2[19];
 8002054:	4b40      	ldr	r3, [pc, #256]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002056:	7cdb      	ldrb	r3, [r3, #19]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	b2d9      	uxtb	r1, r3
 800205e:	4a40      	ldr	r2, [pc, #256]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8002060:	7b13      	ldrb	r3, [r2, #12]
 8002062:	f361 0300 	bfi	r3, r1, #0, #1
 8002066:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_chassis_output = RxBuff_2[20];
 8002068:	4b3b      	ldr	r3, [pc, #236]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800206a:	7d1b      	ldrb	r3, [r3, #20]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	b2d9      	uxtb	r1, r3
 8002072:	4a3b      	ldr	r2, [pc, #236]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8002074:	7b13      	ldrb	r3, [r2, #12]
 8002076:	f361 0341 	bfi	r3, r1, #1, #1
 800207a:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_shooter_output = RxBuff_2[21];
 800207c:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800207e:	7d5b      	ldrb	r3, [r3, #21]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	4a36      	ldr	r2, [pc, #216]	@ (8002160 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8002088:	7b13      	ldrb	r3, [r2, #12]
 800208a:	f361 0382 	bfi	r3, r1, #2, #1
 800208e:	7313      	strb	r3, [r2, #12]
		    	power_heat_data.chassis_voltage = ((uint16_t) RxBuff_2[8] << 8) | RxBuff_2[7];
 8002090:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002092:	7a1b      	ldrb	r3, [r3, #8]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	b21a      	sxth	r2, r3
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800209a:	79db      	ldrb	r3, [r3, #7]
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80020a6:	801a      	strh	r2, [r3, #0]
		    	power_heat_data.chassis_current = ((uint16_t) RxBuff_2[10] << 8) | RxBuff_2[9];
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020aa:	7a9b      	ldrb	r3, [r3, #10]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020b2:	7a5b      	ldrb	r3, [r3, #9]
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	4b29      	ldr	r3, [pc, #164]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80020be:	805a      	strh	r2, [r3, #2]
		    	power_heat_data.chassis_power = ((uint32_t) RxBuff_2[14] << 24) | ((uint32_t) RxBuff_2[13] << 16) | ((uint32_t) RxBuff_2[12] << 8) | RxBuff_2[11];
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020c2:	7b9b      	ldrb	r3, [r3, #14]
 80020c4:	061a      	lsls	r2, r3, #24
 80020c6:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020c8:	7b5b      	ldrb	r3, [r3, #13]
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	431a      	orrs	r2, r3
 80020ce:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020d0:	7b1b      	ldrb	r3, [r3, #12]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	4313      	orrs	r3, r2
 80020d6:	4a20      	ldr	r2, [pc, #128]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020d8:	7ad2      	ldrb	r2, [r2, #11]
 80020da:	4313      	orrs	r3, r2
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80020e6:	edc3 7a01 	vstr	s15, [r3, #4]
		    	power_heat_data.buffer_energy = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 80020ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020ec:	7bdb      	ldrb	r3, [r3, #15]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020f4:	7c1b      	ldrb	r3, [r3, #16]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8002100:	811a      	strh	r2, [r3, #8]
		    	power_heat_data.shooter_17mm_1_barrel_heat = ((uint16_t) RxBuff_2[18] << 8) | RxBuff_2[17];
 8002102:	4b15      	ldr	r3, [pc, #84]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002104:	7c9b      	ldrb	r3, [r3, #18]
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	b21a      	sxth	r2, r3
 800210a:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800210c:	7c5b      	ldrb	r3, [r3, #17]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8002118:	815a      	strh	r2, [r3, #10]
		    	power_heat_data.shooter_17mm_2_barrel_heat = ((uint16_t) RxBuff_2[20] << 8) | RxBuff_2[19];
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800211c:	7d1b      	ldrb	r3, [r3, #20]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	b21a      	sxth	r2, r3
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002124:	7cdb      	ldrb	r3, [r3, #19]
 8002126:	b21b      	sxth	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b21b      	sxth	r3, r3
 800212c:	b29a      	uxth	r2, r3
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8002130:	819a      	strh	r2, [r3, #12]
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002134:	7d9b      	ldrb	r3, [r3, #22]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21a      	sxth	r2, r3
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800213c:	7d5b      	ldrb	r3, [r3, #21]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8002148:	81da      	strh	r2, [r3, #14]
		        break;
 800214a:	bf00      	nop
		    }
		}
	}
}
 800214c:	bf00      	nop
 800214e:	377c      	adds	r7, #124	@ 0x7c
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002156:	bf00      	nop
 8002158:	200004dc 	.word	0x200004dc
 800215c:	200005e0 	.word	0x200005e0
 8002160:	20000600 	.word	0x20000600
 8002164:	200005f0 	.word	0x200005f0

08002168 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800216e:	2301      	movs	r3, #1
 8002170:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8002176:	2301      	movs	r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8002192:	463b      	mov	r3, r7
 8002194:	4619      	mov	r1, r3
 8002196:	480f      	ldr	r0, [pc, #60]	@ (80021d4 <can_filter_init+0x6c>)
 8002198:	f003 fd7c 	bl	8005c94 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800219c:	480d      	ldr	r0, [pc, #52]	@ (80021d4 <can_filter_init+0x6c>)
 800219e:	f003 fe59 	bl	8005e54 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80021a2:	2102      	movs	r1, #2
 80021a4:	480b      	ldr	r0, [pc, #44]	@ (80021d4 <can_filter_init+0x6c>)
 80021a6:	f004 f886 	bl	80062b6 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 80021aa:	230e      	movs	r3, #14
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 80021ae:	230e      	movs	r3, #14
 80021b0:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80021b2:	463b      	mov	r3, r7
 80021b4:	4619      	mov	r1, r3
 80021b6:	4808      	ldr	r0, [pc, #32]	@ (80021d8 <can_filter_init+0x70>)
 80021b8:	f003 fd6c 	bl	8005c94 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80021bc:	4806      	ldr	r0, [pc, #24]	@ (80021d8 <can_filter_init+0x70>)
 80021be:	f003 fe49 	bl	8005e54 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80021c2:	2102      	movs	r1, #2
 80021c4:	4804      	ldr	r0, [pc, #16]	@ (80021d8 <can_filter_init+0x70>)
 80021c6:	f004 f876 	bl	80062b6 <HAL_CAN_ActivateNotification>
}
 80021ca:	bf00      	nop
 80021cc:	3728      	adds	r7, #40	@ 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000670 	.word	0x20000670
 80021d8:	20000698 	.word	0x20000698

080021dc <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <imu_pwm_set+0x1c>)
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40014400 	.word	0x40014400

080021fc <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 800220a:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <RC_init+0xac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <RC_init+0xac>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002218:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 800221a:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <RC_init+0xac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <RC_init+0xac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0210 	orr.w	r2, r2, #16
 8002228:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <RC_init+0xb0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <RC_init+0xb0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 800223a:	e007      	b.n	800224c <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800223c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <RC_init+0xb0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <RC_init+0xb0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <RC_init+0xb0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <RC_init+0xb0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <RC_init+0xb4>)
 8002260:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <RC_init+0xb0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <RC_init+0xb0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <RC_init+0xb0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 800227a:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <RC_init+0xb0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <RC_init+0xb0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002288:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <RC_init+0xb0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <RC_init+0xb0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200008d0 	.word	0x200008d0
 80022ac:	20000a18 	.word	0x20000a18
 80022b0:	40004804 	.word	0x40004804

080022b4 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    osDelay(500);
 80022bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022c0:	f009 f9e0 	bl	800b684 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80022c4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002368 <imu_temp_control_task+0xb4>
 80022c8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800236c <imu_temp_control_task+0xb8>
 80022cc:	4a28      	ldr	r2, [pc, #160]	@ (8002370 <imu_temp_control_task+0xbc>)
 80022ce:	2100      	movs	r1, #0
 80022d0:	4828      	ldr	r0, [pc, #160]	@ (8002374 <imu_temp_control_task+0xc0>)
 80022d2:	f002 f941 	bl	8004558 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022d6:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <imu_temp_control_task+0xc4>)
 80022d8:	2210      	movs	r2, #16
 80022da:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022dc:	4826      	ldr	r0, [pc, #152]	@ (8002378 <imu_temp_control_task+0xc4>)
 80022de:	f006 fd60 	bl	8008da2 <HAL_SPI_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80022e8:	f002 f930 	bl	800454c <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80022ec:	2000      	movs	r0, #0
 80022ee:	f00a fae7 	bl	800c8c0 <pcTaskGetName>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00a fb77 	bl	800c9e8 <xTaskGetHandle>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a1f      	ldr	r2, [pc, #124]	@ (800237c <imu_temp_control_task+0xc8>)
 80022fe:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8002300:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <imu_temp_control_task+0xcc>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8002306:	bf00      	nop
 8002308:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800230c:	2001      	movs	r0, #1
 800230e:	f00a ff97 	bl	800d240 <ulTaskNotifyTake>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d1f7      	bne.n	8002308 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8002318:	f7fe ffe8 	bl	80012ec <IMU_get_temp>
 800231c:	eef0 7a40 	vmov.f32	s15, s0
 8002320:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002384 <imu_temp_control_task+0xd0>
 8002324:	eeb0 0a67 	vmov.f32	s0, s15
 8002328:	4812      	ldr	r0, [pc, #72]	@ (8002374 <imu_temp_control_task+0xc0>)
 800232a:	f002 f96c 	bl	8004606 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <imu_temp_control_task+0xc0>)
 8002330:	edd3 7a08 	vldr	s15, [r3, #32]
 8002334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	d503      	bpl.n	8002346 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <imu_temp_control_task+0xc0>)
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8002346:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <imu_temp_control_task+0xc0>)
 8002348:	edd3 7a08 	vldr	s15, [r3, #32]
 800234c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002350:	ee17 3a90 	vmov	r3, s15
 8002354:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff3f 	bl	80021dc <imu_pwm_set>
        osDelay(5);
 800235e:	2005      	movs	r0, #5
 8002360:	f009 f990 	bl	800b684 <osDelay>
    {
 8002364:	e7cf      	b.n	8002306 <imu_temp_control_task+0x52>
 8002366:	bf00      	nop
 8002368:	45898000 	.word	0x45898000
 800236c:	458ca000 	.word	0x458ca000
 8002370:	08011f34 	.word	0x08011f34
 8002374:	20000618 	.word	0x20000618
 8002378:	20000714 	.word	0x20000714
 800237c:	20000610 	.word	0x20000610
 8002380:	20000614 	.word	0x20000614
 8002384:	42200000 	.word	0x42200000

08002388 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8002392:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_GPIO_EXTI_Callback+0x54>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	88fa      	ldrh	r2, [r7, #6]
 8002398:	429a      	cmp	r2, r3
 800239a:	d11b      	bne.n	80023d4 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 800239c:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_GPIO_EXTI_Callback+0x58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d016      	beq.n	80023d4 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80023a6:	f00a febd 	bl	800d124 <xTaskGetSchedulerState>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d011      	beq.n	80023d4 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	490c      	ldr	r1, [pc, #48]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00a ff8e 	bl	800d2d8 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_EXTI_Callback+0x4c>
 80023c4:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <HAL_GPIO_EXTI_Callback+0x64>)
 80023c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000000e 	.word	0x2000000e
 80023e0:	20000614 	.word	0x20000614
 80023e4:	20000610 	.word	0x20000610
 80023e8:	20000660 	.word	0x20000660
 80023ec:	e000ed04 	.word	0xe000ed04

080023f0 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80023fe:	f000 f8bd 	bl	800257c <ist8310_GPIO_init>
    ist8310_com_init();
 8002402:	f000 f8c2 	bl	800258a <ist8310_com_init>

    ist8310_RST_L();
 8002406:	f000 f97b 	bl	8002700 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 800240a:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <ist8310_init+0xdc>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f916 	bl	8002640 <ist8310_delay_ms>
    ist8310_RST_H();
 8002414:	f000 f968 	bl	80026e8 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8002418:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <ist8310_init+0xdc>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f90f 	bl	8002640 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8002422:	2000      	movs	r0, #0
 8002424:	f000 f8b8 	bl	8002598 <ist8310_IIC_read_single_reg>
 8002428:	4603      	mov	r3, r0
 800242a:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 800242c:	79bb      	ldrb	r3, [r7, #6]
 800242e:	2b10      	cmp	r3, #16
 8002430:	d001      	beq.n	8002436 <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 8002432:	2340      	movs	r3, #64	@ 0x40
 8002434:	e045      	b.n	80024c2 <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	e03e      	b.n	80024ba <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	4924      	ldr	r1, [pc, #144]	@ (80024d0 <ist8310_init+0xe0>)
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	440b      	add	r3, r1
 8002448:	7818      	ldrb	r0, [r3, #0]
 800244a:	79fa      	ldrb	r2, [r7, #7]
 800244c:	4920      	ldr	r1, [pc, #128]	@ (80024d0 <ist8310_init+0xe0>)
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	440b      	add	r3, r1
 8002456:	3301      	adds	r3, #1
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	f000 f8b8 	bl	80025d0 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8002460:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <ist8310_init+0xe4>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f8f9 	bl	800265c <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 800246a:	79fa      	ldrb	r2, [r7, #7]
 800246c:	4918      	ldr	r1, [pc, #96]	@ (80024d0 <ist8310_init+0xe0>)
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	440b      	add	r3, r1
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f88d 	bl	8002598 <ist8310_IIC_read_single_reg>
 800247e:	4603      	mov	r3, r0
 8002480:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <ist8310_init+0xe4>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f8e8 	bl	800265c <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	4910      	ldr	r1, [pc, #64]	@ (80024d0 <ist8310_init+0xe0>)
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	440b      	add	r3, r1
 8002498:	3301      	adds	r3, #1
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	79ba      	ldrb	r2, [r7, #6]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d008      	beq.n	80024b4 <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 80024a2:	79fa      	ldrb	r2, [r7, #7]
 80024a4:	490a      	ldr	r1, [pc, #40]	@ (80024d0 <ist8310_init+0xe0>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	440b      	add	r3, r1
 80024ae:	3302      	adds	r3, #2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	e006      	b.n	80024c2 <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	3301      	adds	r3, #1
 80024b8:	71fb      	strb	r3, [r7, #7]
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d9bd      	bls.n	800243c <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	08011f4c 	.word	0x08011f4c
 80024d0:	08011f40 	.word	0x08011f40
 80024d4:	08011f4d 	.word	0x08011f4d

080024d8 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	2206      	movs	r2, #6
 80024ea:	4619      	mov	r1, r3
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 f88b 	bl	8002608 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80024f2:	7a7b      	ldrb	r3, [r7, #9]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	b21a      	sxth	r2, r3
 80024f8:	7a3b      	ldrb	r3, [r7, #8]
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8002500:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002578 <ist8310_read_mag+0xa0>
 8002510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 800251a:	7afb      	ldrb	r3, [r7, #11]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	b21a      	sxth	r2, r3
 8002520:	7abb      	ldrb	r3, [r7, #10]
 8002522:	b21b      	sxth	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8002528:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002578 <ist8310_read_mag+0xa0>
 800253c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002540:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8002544:	7b7b      	ldrb	r3, [r7, #13]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21a      	sxth	r2, r3
 800254a:	7b3b      	ldrb	r3, [r7, #12]
 800254c:	b21b      	sxth	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8002552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3308      	adds	r3, #8
 8002562:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002578 <ist8310_read_mag+0xa0>
 8002566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256a:	edc3 7a00 	vstr	s15, [r3]
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	3e99999a 	.word	0x3e99999a

0800257c <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af04      	add	r7, sp, #16
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	230a      	movs	r3, #10
 80025ac:	9302      	str	r3, [sp, #8]
 80025ae:	2301      	movs	r3, #1
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	f107 030f 	add.w	r3, r7, #15
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2301      	movs	r3, #1
 80025ba:	211c      	movs	r1, #28
 80025bc:	4803      	ldr	r0, [pc, #12]	@ (80025cc <ist8310_IIC_read_single_reg+0x34>)
 80025be:	f005 f9ef 	bl	80079a0 <HAL_I2C_Mem_Read>
    return res;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	200006c0 	.word	0x200006c0

080025d0 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af04      	add	r7, sp, #16
 80025d6:	4603      	mov	r3, r0
 80025d8:	460a      	mov	r2, r1
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	4613      	mov	r3, r2
 80025de:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	230a      	movs	r3, #10
 80025e6:	9302      	str	r3, [sp, #8]
 80025e8:	2301      	movs	r3, #1
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	1dbb      	adds	r3, r7, #6
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2301      	movs	r3, #1
 80025f2:	211c      	movs	r1, #28
 80025f4:	4803      	ldr	r0, [pc, #12]	@ (8002604 <ist8310_IIC_write_single_reg+0x34>)
 80025f6:	f005 f8d9 	bl	80077ac <HAL_I2C_Mem_Write>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200006c0 	.word	0x200006c0

08002608 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af04      	add	r7, sp, #16
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
 8002614:	4613      	mov	r3, r2
 8002616:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	b29a      	uxth	r2, r3
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	b29b      	uxth	r3, r3
 8002620:	210a      	movs	r1, #10
 8002622:	9102      	str	r1, [sp, #8]
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2301      	movs	r3, #1
 800262c:	211c      	movs	r1, #28
 800262e:	4803      	ldr	r0, [pc, #12]	@ (800263c <ist8310_IIC_read_muli_reg+0x34>)
 8002630:	f005 f9b6 	bl	80079a0 <HAL_I2C_Mem_Read>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200006c0 	.word	0x200006c0

08002640 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fa01 	bl	8005a54 <HAL_Delay>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	@ 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800267a:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <ist8310_delay_us+0x88>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 800268c:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <ist8310_delay_us+0x88>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8002692:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <ist8310_delay_us+0x88>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	429a      	cmp	r2, r3
 800269e:	d0f8      	beq.n	8002692 <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d206      	bcs.n	80026b6 <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4413      	add	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e007      	b.n	80026c6 <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad2      	subs	r2, r2, r3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d200      	bcs.n	80026d4 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 80026d2:	e7de      	b.n	8002692 <ist8310_delay_us+0x36>
            {
                break;
 80026d4:	bf00      	nop
            }
        }
    }
}
 80026d6:	bf00      	nop
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80026ec:	2201      	movs	r2, #1
 80026ee:	2140      	movs	r1, #64	@ 0x40
 80026f0:	4802      	ldr	r0, [pc, #8]	@ (80026fc <ist8310_RST_H+0x14>)
 80026f2:	f004 fee5 	bl	80074c0 <HAL_GPIO_WritePin>
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021800 	.word	0x40021800

08002700 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	2140      	movs	r1, #64	@ 0x40
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <ist8310_RST_L+0x14>)
 800270a:	f004 fed9 	bl	80074c0 <HAL_GPIO_WritePin>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021800 	.word	0x40021800

08002718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800271c:	f003 f928 	bl	8005970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002720:	f000 f866 	bl	80027f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002724:	f000 fc76 	bl	8003014 <MX_GPIO_Init>
  MX_DMA_Init();
 8002728:	f000 fc26 	bl	8002f78 <MX_DMA_Init>
  MX_CAN1_Init();
 800272c:	f000 f8cc 	bl	80028c8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002730:	f000 f900 	bl	8002934 <MX_CAN2_Init>
  MX_SPI1_Init();
 8002734:	f000 f962 	bl	80029fc <MX_SPI1_Init>
  MX_TIM4_Init();
 8002738:	f000 fa3e 	bl	8002bb8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800273c:	f000 fb9c 	bl	8002e78 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002740:	f000 fbf0 	bl	8002f24 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002744:	f000 f990 	bl	8002a68 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002748:	f000 faac 	bl	8002ca4 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 800274c:	f000 fbbe 	bl	8002ecc <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8002750:	f000 fb44 	bl	8002ddc <MX_TIM10_Init>
  MX_I2C3_Init();
 8002754:	f000 f924 	bl	80029a0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8002758:	f7ff fd06 	bl	8002168 <can_filter_init>
  remote_control_init();
 800275c:	f002 f89c 	bl	8004898 <remote_control_init>
  usart_Init();
 8002760:	f7ff fb06 	bl	8001d70 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8002764:	f002 f8a6 	bl	80048b4 <get_remote_control_point>
 8002768:	4603      	mov	r3, r0
 800276a:	4a14      	ldr	r2, [pc, #80]	@ (80027bc <main+0xa4>)
 800276c:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800276e:	f008 fead 	bl	800b4cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8002772:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <main+0xa8>)
 8002774:	2100      	movs	r1, #0
 8002776:	4813      	ldr	r0, [pc, #76]	@ (80027c4 <main+0xac>)
 8002778:	f008 fef2 	bl	800b560 <osThreadNew>
 800277c:	4603      	mov	r3, r0
 800277e:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <main+0xb0>)
 8002780:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8002782:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <main+0xb4>)
 8002784:	2100      	movs	r1, #0
 8002786:	4812      	ldr	r0, [pc, #72]	@ (80027d0 <main+0xb8>)
 8002788:	f008 feea 	bl	800b560 <osThreadNew>
 800278c:	4603      	mov	r3, r0
 800278e:	4a11      	ldr	r2, [pc, #68]	@ (80027d4 <main+0xbc>)
 8002790:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8002792:	4a11      	ldr	r2, [pc, #68]	@ (80027d8 <main+0xc0>)
 8002794:	2100      	movs	r1, #0
 8002796:	4811      	ldr	r0, [pc, #68]	@ (80027dc <main+0xc4>)
 8002798:	f008 fee2 	bl	800b560 <osThreadNew>
 800279c:	4603      	mov	r3, r0
 800279e:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <main+0xc8>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 80027a2:	4a10      	ldr	r2, [pc, #64]	@ (80027e4 <main+0xcc>)
 80027a4:	2100      	movs	r1, #0
 80027a6:	4810      	ldr	r0, [pc, #64]	@ (80027e8 <main+0xd0>)
 80027a8:	f008 feda 	bl	800b560 <osThreadNew>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4a0f      	ldr	r2, [pc, #60]	@ (80027ec <main+0xd4>)
 80027b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027b2:	f008 feaf 	bl	800b514 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027b6:	bf00      	nop
 80027b8:	e7fd      	b.n	80027b6 <main+0x9e>
 80027ba:	bf00      	nop
 80027bc:	20000b48 	.word	0x20000b48
 80027c0:	08011f50 	.word	0x08011f50
 80027c4:	08003351 	.word	0x08003351
 80027c8:	20000b38 	.word	0x20000b38
 80027cc:	08011f74 	.word	0x08011f74
 80027d0:	080033a1 	.word	0x080033a1
 80027d4:	20000b3c 	.word	0x20000b3c
 80027d8:	08011f98 	.word	0x08011f98
 80027dc:	080022b5 	.word	0x080022b5
 80027e0:	20000b40 	.word	0x20000b40
 80027e4:	08011fbc 	.word	0x08011fbc
 80027e8:	0800453d 	.word	0x0800453d
 80027ec:	20000b44 	.word	0x20000b44

080027f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b094      	sub	sp, #80	@ 0x50
 80027f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f6:	f107 0320 	add.w	r3, r7, #32
 80027fa:	2230      	movs	r2, #48	@ 0x30
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f00c fb0c 	bl	800ee1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <SystemClock_Config+0xd0>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	4a28      	ldr	r2, [pc, #160]	@ (80028c0 <SystemClock_Config+0xd0>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002822:	6413      	str	r3, [r2, #64]	@ 0x40
 8002824:	4b26      	ldr	r3, [pc, #152]	@ (80028c0 <SystemClock_Config+0xd0>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <SystemClock_Config+0xd4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a22      	ldr	r2, [pc, #136]	@ (80028c4 <SystemClock_Config+0xd4>)
 800283a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b20      	ldr	r3, [pc, #128]	@ (80028c4 <SystemClock_Config+0xd4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800284c:	2301      	movs	r3, #1
 800284e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002850:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002856:	2302      	movs	r3, #2
 8002858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800285a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800285e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002860:	2306      	movs	r3, #6
 8002862:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002864:	23a8      	movs	r3, #168	@ 0xa8
 8002866:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002868:	2302      	movs	r3, #2
 800286a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800286c:	2304      	movs	r3, #4
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002870:	f107 0320 	add.w	r3, r7, #32
 8002874:	4618      	mov	r0, r3
 8002876:	f005 fe15 	bl	80084a4 <HAL_RCC_OscConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002880:	f001 fe64 	bl	800454c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002884:	230f      	movs	r3, #15
 8002886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002888:	2302      	movs	r3, #2
 800288a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002890:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800289a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2105      	movs	r1, #5
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 f876 	bl	8008994 <HAL_RCC_ClockConfig>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80028ae:	f001 fe4d 	bl	800454c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80028b2:	f006 f955 	bl	8008b60 <HAL_RCC_EnableCSS>
}
 80028b6:	bf00      	nop
 80028b8:	3750      	adds	r7, #80	@ 0x50
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000

080028c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80028cc:	4b17      	ldr	r3, [pc, #92]	@ (800292c <MX_CAN1_Init+0x64>)
 80028ce:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <MX_CAN1_Init+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80028d2:	4b16      	ldr	r3, [pc, #88]	@ (800292c <MX_CAN1_Init+0x64>)
 80028d4:	2203      	movs	r2, #3
 80028d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80028d8:	4b14      	ldr	r3, [pc, #80]	@ (800292c <MX_CAN1_Init+0x64>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <MX_CAN1_Init+0x64>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <MX_CAN1_Init+0x64>)
 80028e6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80028ea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <MX_CAN1_Init+0x64>)
 80028ee:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80028f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80028f4:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <MX_CAN1_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80028fa:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <MX_CAN1_Init+0x64>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002900:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <MX_CAN1_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <MX_CAN1_Init+0x64>)
 8002908:	2200      	movs	r2, #0
 800290a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <MX_CAN1_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <MX_CAN1_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002918:	4804      	ldr	r0, [pc, #16]	@ (800292c <MX_CAN1_Init+0x64>)
 800291a:	f003 f8bf 	bl	8005a9c <HAL_CAN_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002924:	f001 fe12 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000670 	.word	0x20000670
 8002930:	40006400 	.word	0x40006400

08002934 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002938:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <MX_CAN2_Init+0x64>)
 800293a:	4a18      	ldr	r2, [pc, #96]	@ (800299c <MX_CAN2_Init+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800293e:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <MX_CAN2_Init+0x64>)
 8002940:	2203      	movs	r2, #3
 8002942:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002944:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <MX_CAN2_Init+0x64>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800294a:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <MX_CAN2_Init+0x64>)
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <MX_CAN2_Init+0x64>)
 8002952:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002956:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <MX_CAN2_Init+0x64>)
 800295a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800295e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002960:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <MX_CAN2_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002966:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <MX_CAN2_Init+0x64>)
 8002968:	2200      	movs	r2, #0
 800296a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800296c:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <MX_CAN2_Init+0x64>)
 800296e:	2200      	movs	r2, #0
 8002970:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <MX_CAN2_Init+0x64>)
 8002974:	2200      	movs	r2, #0
 8002976:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <MX_CAN2_Init+0x64>)
 800297a:	2200      	movs	r2, #0
 800297c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <MX_CAN2_Init+0x64>)
 8002980:	2200      	movs	r2, #0
 8002982:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002984:	4804      	ldr	r0, [pc, #16]	@ (8002998 <MX_CAN2_Init+0x64>)
 8002986:	f003 f889 	bl	8005a9c <HAL_CAN_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002990:	f001 fddc 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000698 	.word	0x20000698
 800299c:	40006800 	.word	0x40006800

080029a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029a6:	4a13      	ldr	r2, [pc, #76]	@ (80029f4 <MX_I2C3_Init+0x54>)
 80029a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80029aa:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029ac:	4a12      	ldr	r2, [pc, #72]	@ (80029f8 <MX_I2C3_Init+0x58>)
 80029ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d0:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029d8:	2200      	movs	r2, #0
 80029da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029dc:	4804      	ldr	r0, [pc, #16]	@ (80029f0 <MX_I2C3_Init+0x50>)
 80029de:	f004 fda1 	bl	8007524 <HAL_I2C_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80029e8:	f001 fdb0 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200006c0 	.word	0x200006c0
 80029f4:	40005c00 	.word	0x40005c00
 80029f8:	00061a80 	.word	0x00061a80

080029fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a00:	4b17      	ldr	r3, [pc, #92]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <MX_SPI1_Init+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a06:	4b16      	ldr	r3, [pc, #88]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a0e:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a30:	2238      	movs	r2, #56	@ 0x38
 8002a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a3a:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a48:	220a      	movs	r2, #10
 8002a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a4c:	4804      	ldr	r0, [pc, #16]	@ (8002a60 <MX_SPI1_Init+0x64>)
 8002a4e:	f006 f9a8 	bl	8008da2 <HAL_SPI_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a58:	f001 fd78 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000714 	.word	0x20000714
 8002a64:	40013000 	.word	0x40013000

08002a68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b092      	sub	sp, #72	@ 0x48
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	615a      	str	r2, [r3, #20]
 8002a8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2220      	movs	r2, #32
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00c f9c2 	bl	800ee1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a98:	4b45      	ldr	r3, [pc, #276]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002a9a:	4a46      	ldr	r2, [pc, #280]	@ (8002bb4 <MX_TIM1_Init+0x14c>)
 8002a9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8002a9e:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002aa0:	f240 124f 	movw	r2, #335	@ 0x14f
 8002aa4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa6:	4b42      	ldr	r3, [pc, #264]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002aac:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002aae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ab2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002aba:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ac6:	483a      	ldr	r0, [pc, #232]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002ac8:	f006 fd18 	bl	80094fc <HAL_TIM_PWM_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002ad2:	f001 fd3b 	bl	800454c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ade:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4832      	ldr	r0, [pc, #200]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002ae6:	f007 fabb 	bl	800a060 <HAL_TIMEx_MasterConfigSynchronization>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002af0:	f001 fd2c 	bl	800454c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af4:	2360      	movs	r3, #96	@ 0x60
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b14:	2200      	movs	r2, #0
 8002b16:	4619      	mov	r1, r3
 8002b18:	4825      	ldr	r0, [pc, #148]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002b1a:	f006 fe07 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002b24:	f001 fd12 	bl	800454c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	481f      	ldr	r0, [pc, #124]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002b32:	f006 fdfb 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002b3c:	f001 fd06 	bl	800454c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b44:	2208      	movs	r2, #8
 8002b46:	4619      	mov	r1, r3
 8002b48:	4819      	ldr	r0, [pc, #100]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002b4a:	f006 fdef 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002b54:	f001 fcfa 	bl	800454c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b5c:	220c      	movs	r2, #12
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4813      	ldr	r0, [pc, #76]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002b62:	f006 fde3 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002b6c:	f001 fcee 	bl	800454c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4807      	ldr	r0, [pc, #28]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002b94:	f007 fae0 	bl	800a158 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002b9e:	f001 fcd5 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ba2:	4803      	ldr	r0, [pc, #12]	@ (8002bb0 <MX_TIM1_Init+0x148>)
 8002ba4:	f002 fa82 	bl	80050ac <HAL_TIM_MspPostInit>

}
 8002ba8:	bf00      	nop
 8002baa:	3748      	adds	r7, #72	@ 0x48
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2000076c 	.word	0x2000076c
 8002bb4:	40010000 	.word	0x40010000

08002bb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08e      	sub	sp, #56	@ 0x38
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bcc:	f107 0320 	add.w	r3, r7, #32
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	615a      	str	r2, [r3, #20]
 8002be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002be8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002bea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca0 <MX_TIM4_Init+0xe8>)
 8002bec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002bee:	4b2b      	ldr	r3, [pc, #172]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002bf0:	2253      	movs	r2, #83	@ 0x53
 8002bf2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8002bfa:	4b28      	ldr	r3, [pc, #160]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002bfc:	22f9      	movs	r2, #249	@ 0xf9
 8002bfe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c00:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c06:	4b25      	ldr	r3, [pc, #148]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002c08:	2280      	movs	r2, #128	@ 0x80
 8002c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c0c:	4823      	ldr	r0, [pc, #140]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002c0e:	f006 fbbd 	bl	800938c <HAL_TIM_Base_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002c18:	f001 fc98 	bl	800454c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c26:	4619      	mov	r1, r3
 8002c28:	481c      	ldr	r0, [pc, #112]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002c2a:	f006 fe41 	bl	80098b0 <HAL_TIM_ConfigClockSource>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002c34:	f001 fc8a 	bl	800454c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c38:	4818      	ldr	r0, [pc, #96]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002c3a:	f006 fc5f 	bl	80094fc <HAL_TIM_PWM_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002c44:	f001 fc82 	bl	800454c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c50:	f107 0320 	add.w	r3, r7, #32
 8002c54:	4619      	mov	r1, r3
 8002c56:	4811      	ldr	r0, [pc, #68]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002c58:	f007 fa02 	bl	800a060 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002c62:	f001 fc73 	bl	800454c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c66:	2360      	movs	r3, #96	@ 0x60
 8002c68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002c6a:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4807      	ldr	r0, [pc, #28]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002c80:	f006 fd54 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002c8a:	f001 fc5f 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c8e:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <MX_TIM4_Init+0xe4>)
 8002c90:	f002 fa0c 	bl	80050ac <HAL_TIM_MspPostInit>

}
 8002c94:	bf00      	nop
 8002c96:	3738      	adds	r7, #56	@ 0x38
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200007b4 	.word	0x200007b4
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b092      	sub	sp, #72	@ 0x48
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002caa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
 8002cc4:	615a      	str	r2, [r3, #20]
 8002cc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	2220      	movs	r2, #32
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f00c f8a4 	bl	800ee1c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002cd6:	4a40      	ldr	r2, [pc, #256]	@ (8002dd8 <MX_TIM8_Init+0x134>)
 8002cd8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002cda:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002cdc:	2253      	movs	r2, #83	@ 0x53
 8002cde:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002ce8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002cec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cee:	4b39      	ldr	r3, [pc, #228]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002cf4:	4b37      	ldr	r3, [pc, #220]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cfa:	4b36      	ldr	r3, [pc, #216]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002cfc:	2280      	movs	r2, #128	@ 0x80
 8002cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002d00:	4834      	ldr	r0, [pc, #208]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002d02:	f006 fbfb 	bl	80094fc <HAL_TIM_PWM_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002d0c:	f001 fc1e 	bl	800454c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002d18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	482d      	ldr	r0, [pc, #180]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002d20:	f007 f99e 	bl	800a060 <HAL_TIMEx_MasterConfigSynchronization>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002d2a:	f001 fc0f 	bl	800454c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d2e:	2360      	movs	r3, #96	@ 0x60
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d36:	2300      	movs	r3, #0
 8002d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d4e:	2200      	movs	r2, #0
 8002d50:	4619      	mov	r1, r3
 8002d52:	4820      	ldr	r0, [pc, #128]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002d54:	f006 fcea 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002d5e:	f001 fbf5 	bl	800454c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d66:	2204      	movs	r2, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	481a      	ldr	r0, [pc, #104]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002d6c:	f006 fcde 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002d76:	f001 fbe9 	bl	800454c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d7e:	2208      	movs	r2, #8
 8002d80:	4619      	mov	r1, r3
 8002d82:	4814      	ldr	r0, [pc, #80]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002d84:	f006 fcd2 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002d8e:	f001 fbdd 	bl	800454c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002da6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002daa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	4619      	mov	r1, r3
 8002db4:	4807      	ldr	r0, [pc, #28]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002db6:	f007 f9cf 	bl	800a158 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002dc0:	f001 fbc4 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002dc4:	4803      	ldr	r0, [pc, #12]	@ (8002dd4 <MX_TIM8_Init+0x130>)
 8002dc6:	f002 f971 	bl	80050ac <HAL_TIM_MspPostInit>

}
 8002dca:	bf00      	nop
 8002dcc:	3748      	adds	r7, #72	@ 0x48
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200007fc 	.word	0x200007fc
 8002dd8:	40010400 	.word	0x40010400

08002ddc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
 8002df0:	615a      	str	r2, [r3, #20]
 8002df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002df4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002df6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e74 <MX_TIM10_Init+0x98>)
 8002df8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002e08:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002e0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0e:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e14:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002e1a:	4815      	ldr	r0, [pc, #84]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002e1c:	f006 fab6 	bl	800938c <HAL_TIM_Base_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002e26:	f001 fb91 	bl	800454c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002e2a:	4811      	ldr	r0, [pc, #68]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002e2c:	f006 fb66 	bl	80094fc <HAL_TIM_PWM_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002e36:	f001 fb89 	bl	800454c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3a:	2360      	movs	r3, #96	@ 0x60
 8002e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4807      	ldr	r0, [pc, #28]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002e52:	f006 fc6b 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002e5c:	f001 fb76 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002e60:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <MX_TIM10_Init+0x94>)
 8002e62:	f002 f923 	bl	80050ac <HAL_TIM_MspPostInit>

}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000844 	.word	0x20000844
 8002e74:	40014400 	.word	0x40014400

08002e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e7e:	4a12      	ldr	r2, [pc, #72]	@ (8002ec8 <MX_USART1_UART_Init+0x50>)
 8002e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e82:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eae:	4805      	ldr	r0, [pc, #20]	@ (8002ec4 <MX_USART1_UART_Init+0x4c>)
 8002eb0:	f007 f9a4 	bl	800a1fc <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002eba:	f001 fb47 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2000088c 	.word	0x2000088c
 8002ec8:	40011000 	.word	0x40011000

08002ecc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <MX_USART3_UART_Init+0x50>)
 8002ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ed8:	4a11      	ldr	r2, [pc, #68]	@ (8002f20 <MX_USART3_UART_Init+0x54>)
 8002eda:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002edc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002eea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ef0:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f02:	4805      	ldr	r0, [pc, #20]	@ (8002f18 <MX_USART3_UART_Init+0x4c>)
 8002f04:	f007 f97a 	bl	800a1fc <HAL_UART_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f0e:	f001 fb1d 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200008d0 	.word	0x200008d0
 8002f1c:	40004800 	.word	0x40004800
 8002f20:	000186a0 	.word	0x000186a0

08002f24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f28:	4b11      	ldr	r3, [pc, #68]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <MX_USART6_UART_Init+0x50>)
 8002f2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002f42:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002f48:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4e:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002f5a:	4805      	ldr	r0, [pc, #20]	@ (8002f70 <MX_USART6_UART_Init+0x4c>)
 8002f5c:	f007 f94e 	bl	800a1fc <HAL_UART_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002f66:	f001 faf1 	bl	800454c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000914 	.word	0x20000914
 8002f74:	40011400 	.word	0x40011400

08002f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	4b23      	ldr	r3, [pc, #140]	@ (8003010 <MX_DMA_Init+0x98>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <MX_DMA_Init+0x98>)
 8002f88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8e:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <MX_DMA_Init+0x98>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003010 <MX_DMA_Init+0x98>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003010 <MX_DMA_Init+0x98>)
 8002fa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002faa:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <MX_DMA_Init+0x98>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2105      	movs	r1, #5
 8002fba:	200c      	movs	r0, #12
 8002fbc:	f003 fcab 	bl	8006916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002fc0:	200c      	movs	r0, #12
 8002fc2:	f003 fcc4 	bl	800694e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2105      	movs	r1, #5
 8002fca:	2039      	movs	r0, #57	@ 0x39
 8002fcc:	f003 fca3 	bl	8006916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002fd0:	2039      	movs	r0, #57	@ 0x39
 8002fd2:	f003 fcbc 	bl	800694e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2105      	movs	r1, #5
 8002fda:	203a      	movs	r0, #58	@ 0x3a
 8002fdc:	f003 fc9b 	bl	8006916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002fe0:	203a      	movs	r0, #58	@ 0x3a
 8002fe2:	f003 fcb4 	bl	800694e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2105      	movs	r1, #5
 8002fea:	2045      	movs	r0, #69	@ 0x45
 8002fec:	f003 fc93 	bl	8006916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002ff0:	2045      	movs	r0, #69	@ 0x45
 8002ff2:	f003 fcac 	bl	800694e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	2046      	movs	r0, #70	@ 0x46
 8002ffc:	f003 fc8b 	bl	8006916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003000:	2046      	movs	r0, #70	@ 0x46
 8003002:	f003 fca4 	bl	800694e <HAL_NVIC_EnableIRQ>

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08e      	sub	sp, #56	@ 0x38
 8003018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
 800302e:	4b7c      	ldr	r3, [pc, #496]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	4a7b      	ldr	r2, [pc, #492]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6313      	str	r3, [r2, #48]	@ 0x30
 800303a:	4b79      	ldr	r3, [pc, #484]	@ (8003220 <MX_GPIO_Init+0x20c>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	4b75      	ldr	r3, [pc, #468]	@ (8003220 <MX_GPIO_Init+0x20c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	4a74      	ldr	r2, [pc, #464]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003054:	6313      	str	r3, [r2, #48]	@ 0x30
 8003056:	4b72      	ldr	r3, [pc, #456]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	4b6e      	ldr	r3, [pc, #440]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a6d      	ldr	r2, [pc, #436]	@ (8003220 <MX_GPIO_Init+0x20c>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b6b      	ldr	r3, [pc, #428]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	4b67      	ldr	r3, [pc, #412]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	4a66      	ldr	r2, [pc, #408]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	6313      	str	r3, [r2, #48]	@ 0x30
 800308e:	4b64      	ldr	r3, [pc, #400]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	4b60      	ldr	r3, [pc, #384]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b59      	ldr	r3, [pc, #356]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	4a58      	ldr	r2, [pc, #352]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c6:	4b56      	ldr	r3, [pc, #344]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	4b52      	ldr	r3, [pc, #328]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4a51      	ldr	r2, [pc, #324]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003220 <MX_GPIO_Init+0x20c>)
 80030f8:	f043 0320 	orr.w	r3, r3, #32
 80030fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fe:	4b48      	ldr	r3, [pc, #288]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4b44      	ldr	r3, [pc, #272]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a43      	ldr	r2, [pc, #268]	@ (8003220 <MX_GPIO_Init+0x20c>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <MX_GPIO_Init+0x20c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	2140      	movs	r1, #64	@ 0x40
 800312a:	483e      	ldr	r0, [pc, #248]	@ (8003224 <MX_GPIO_Init+0x210>)
 800312c:	f004 f9c8 	bl	80074c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 8003130:	2200      	movs	r2, #0
 8003132:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8003136:	483c      	ldr	r0, [pc, #240]	@ (8003228 <MX_GPIO_Init+0x214>)
 8003138:	f004 f9c2 	bl	80074c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800313c:	2200      	movs	r2, #0
 800313e:	2110      	movs	r1, #16
 8003140:	483a      	ldr	r0, [pc, #232]	@ (800322c <MX_GPIO_Init+0x218>)
 8003142:	f004 f9bd 	bl	80074c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003146:	2200      	movs	r2, #0
 8003148:	2101      	movs	r1, #1
 800314a:	4839      	ldr	r0, [pc, #228]	@ (8003230 <MX_GPIO_Init+0x21c>)
 800314c:	f004 f9b8 	bl	80074c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003150:	2340      	movs	r3, #64	@ 0x40
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003154:	2301      	movs	r3, #1
 8003156:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003164:	4619      	mov	r1, r3
 8003166:	482f      	ldr	r0, [pc, #188]	@ (8003224 <MX_GPIO_Init+0x210>)
 8003168:	f004 f80e 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800316c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003172:	2301      	movs	r3, #1
 8003174:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800317e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003182:	4619      	mov	r1, r3
 8003184:	4828      	ldr	r0, [pc, #160]	@ (8003228 <MX_GPIO_Init+0x214>)
 8003186:	f003 ffff 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800318a:	2308      	movs	r3, #8
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800318e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003192:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319c:	4619      	mov	r1, r3
 800319e:	4821      	ldr	r0, [pc, #132]	@ (8003224 <MX_GPIO_Init+0x210>)
 80031a0:	f003 fff2 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031a4:	2310      	movs	r3, #16
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a8:	2301      	movs	r3, #1
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031b8:	4619      	mov	r1, r3
 80031ba:	481c      	ldr	r0, [pc, #112]	@ (800322c <MX_GPIO_Init+0x218>)
 80031bc:	f003 ffe4 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80031c0:	2330      	movs	r3, #48	@ 0x30
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031d2:	4619      	mov	r1, r3
 80031d4:	4817      	ldr	r0, [pc, #92]	@ (8003234 <MX_GPIO_Init+0x220>)
 80031d6:	f003 ffd7 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031da:	2301      	movs	r3, #1
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031de:	2301      	movs	r3, #1
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e6:	2300      	movs	r3, #0
 80031e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ee:	4619      	mov	r1, r3
 80031f0:	480f      	ldr	r0, [pc, #60]	@ (8003230 <MX_GPIO_Init+0x21c>)
 80031f2:	f003 ffc9 	bl	8007188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2105      	movs	r1, #5
 80031fa:	2009      	movs	r0, #9
 80031fc:	f003 fb8b 	bl	8006916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003200:	2009      	movs	r0, #9
 8003202:	f003 fba4 	bl	800694e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2105      	movs	r1, #5
 800320a:	200a      	movs	r0, #10
 800320c:	f003 fb83 	bl	8006916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003210:	200a      	movs	r0, #10
 8003212:	f003 fb9c 	bl	800694e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003216:	bf00      	nop
 8003218:	3738      	adds	r7, #56	@ 0x38
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40021800 	.word	0x40021800
 8003228:	40021c00 	.word	0x40021c00
 800322c:	40020000 	.word	0x40020000
 8003230:	40020400 	.word	0x40020400
 8003234:	40020800 	.word	0x40020800

08003238 <positionPIDByMe>:

/* USER CODE BEGIN 4 */
int16_t positionPIDByMe(int16_t *prevDiff, int8_t *isNegativeRegion1, int8_t *previousRegion1, int16_t DifferenceBetweenCurrentAndWannabePosition, int16_t *sumI1, float kPu, float kIu, float kDu) {
 8003238:	b480      	push	{r7}
 800323a:	b08b      	sub	sp, #44	@ 0x2c
 800323c:	af00      	add	r7, sp, #0
 800323e:	61f8      	str	r0, [r7, #28]
 8003240:	61b9      	str	r1, [r7, #24]
 8003242:	617a      	str	r2, [r7, #20]
 8003244:	ed87 0a03 	vstr	s0, [r7, #12]
 8003248:	edc7 0a02 	vstr	s1, [r7, #8]
 800324c:	ed87 1a01 	vstr	s2, [r7, #4]
 8003250:	827b      	strh	r3, [r7, #18]
	if (DifferenceBetweenCurrentAndWannabePosition >= 0) {
 8003252:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db03      	blt.n	8003262 <positionPIDByMe+0x2a>
		*isNegativeRegion1 = -1;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	22ff      	movs	r2, #255	@ 0xff
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e002      	b.n	8003268 <positionPIDByMe+0x30>
	} else {
		*isNegativeRegion1 = 1;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
	}
	if (*isNegativeRegion1 != *previousRegion1) {
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f993 2000 	ldrsb.w	r2, [r3]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f993 3000 	ldrsb.w	r3, [r3]
 8003274:	429a      	cmp	r2, r3
 8003276:	d002      	beq.n	800327e <positionPIDByMe+0x46>
		*sumI1 = 0;
 8003278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327a:	2200      	movs	r2, #0
 800327c:	801a      	strh	r2, [r3, #0]
	}
	*previousRegion1 = *isNegativeRegion1;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f993 2000 	ldrsb.w	r2, [r3]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	701a      	strb	r2, [r3, #0]
	*sumI1 += (int)((float)(DifferenceBetweenCurrentAndWannabePosition)*0.005f);
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328e:	b29a      	uxth	r2, r3
 8003290:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003348 <positionPIDByMe+0x110>
 80032a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a8:	ee17 3a90 	vmov	r3, s15
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	801a      	strh	r2, [r3, #0]
	int16_t PositionToGo = (int)(kPu*(float)(DifferenceBetweenCurrentAndWannabePosition));
 80032b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032d0:	ee17 3a90 	vmov	r3, s15
 80032d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t IntegralToGo = (int)(kIu*((float)(*sumI1)));
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032f0:	ee17 3a90 	vmov	r3, s15
 80032f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t DerivativeToGo = (int)((kDu)*((float)(DifferenceBetweenCurrentAndWannabePosition - *prevDiff))*(float)200);
 80032f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330a:	edd7 7a01 	vldr	s15, [r7, #4]
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800334c <positionPIDByMe+0x114>
 8003316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800331e:	ee17 3a90 	vmov	r3, s15
 8003322:	847b      	strh	r3, [r7, #34]	@ 0x22
	*prevDiff = DifferenceBetweenCurrentAndWannabePosition;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	8a7a      	ldrh	r2, [r7, #18]
 8003328:	801a      	strh	r2, [r3, #0]
	return PositionToGo+IntegralToGo+DerivativeToGo;
 800332a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800332c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800332e:	4413      	add	r3, r2
 8003330:	b29a      	uxth	r2, r3
 8003332:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003334:	4413      	add	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	b21b      	sxth	r3, r3
}
 800333a:	4618      	mov	r0, r3
 800333c:	372c      	adds	r7, #44	@ 0x2c
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	3ba3d70a 	.word	0x3ba3d70a
 800334c:	43480000 	.word	0x43480000

08003350 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8003358:	2201      	movs	r2, #1
 800335a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800335e:	480f      	ldr	r0, [pc, #60]	@ (800339c <TaskMain+0x4c>)
 8003360:	f004 f8ae 	bl	80074c0 <HAL_GPIO_WritePin>
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8003364:	f7fd fe46 	bl	8000ff4 <BMI088_accel_init>
		// usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8003368:	f7fd fefc 	bl	8001164 <BMI088_gyro_init>
		// usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
	}
	if (ist8310_init()) {
 800336c:	f7ff f840 	bl	80023f0 <ist8310_init>
	// __HAL_TIM_PRESCALER(&htim4, 0);
	// osDelay(150);
	// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);

	for(;;) {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8003370:	2200      	movs	r2, #0
 8003372:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003376:	4809      	ldr	r0, [pc, #36]	@ (800339c <TaskMain+0x4c>)
 8003378:	f004 f8a2 	bl	80074c0 <HAL_GPIO_WritePin>
		//set_motor_voltage(5, 4000);
		osDelay(500);
 800337c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003380:	f008 f980 	bl	800b684 <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8003384:	2201      	movs	r2, #1
 8003386:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800338a:	4804      	ldr	r0, [pc, #16]	@ (800339c <TaskMain+0x4c>)
 800338c:	f004 f898 	bl	80074c0 <HAL_GPIO_WritePin>
		//set_motor_voltage(5, -4000);
		osDelay(500);
 8003390:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003394:	f008 f976 	bl	800b684 <osDelay>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8003398:	bf00      	nop
 800339a:	e7e9      	b.n	8003370 <TaskMain+0x20>
 800339c:	40021c00 	.word	0x40021c00

080033a0 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80033a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033a4:	b0ca      	sub	sp, #296	@ 0x128
 80033a6:	af02      	add	r7, sp, #8
 80033a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80033ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033b0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN TaskChassis */
	/* USER CODE BEGIN TaskChassis */
	int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 80033b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
	int16_t rcPitch = 0;                                   // range: 3376 ~ 2132
 80033bc:	2300      	movs	r3, #0
 80033be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
	//int16_t targetRPM[4] = {0,0,0,0};
  /* Infinite loop */

	// Test Code
	HAL_TIM_Base_Start(&htim1);
 80033c2:	48d8      	ldr	r0, [pc, #864]	@ (8003724 <TaskChassis+0x384>)
 80033c4:	f006 f832 	bl	800942c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 80033c8:	48d7      	ldr	r0, [pc, #860]	@ (8003728 <TaskChassis+0x388>)
 80033ca:	f006 f82f 	bl	800942c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80033ce:	2100      	movs	r1, #0
 80033d0:	48d4      	ldr	r0, [pc, #848]	@ (8003724 <TaskChassis+0x384>)
 80033d2:	f006 f8e3 	bl	800959c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80033d6:	2104      	movs	r1, #4
 80033d8:	48d2      	ldr	r0, [pc, #840]	@ (8003724 <TaskChassis+0x384>)
 80033da:	f006 f8df 	bl	800959c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80033de:	2108      	movs	r1, #8
 80033e0:	48d1      	ldr	r0, [pc, #836]	@ (8003728 <TaskChassis+0x388>)
 80033e2:	f006 f8db 	bl	800959c <HAL_TIM_PWM_Start>
	htim4.Instance->CCR3=0;
 80033e6:	4bd0      	ldr	r3, [pc, #832]	@ (8003728 <TaskChassis+0x388>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	int8_t motorOn = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	int8_t switched = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
	int8_t shot1Round = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
	//int8_t RNC = 0;
	int16_t sumI1 =0;
 8003400:	2300      	movs	r3, #0
 8003402:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	int16_t sumI2 =0;
 8003406:	2300      	movs	r3, #0
 8003408:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	int16_t sumI3 =0;
 800340c:	2300      	movs	r3, #0
 800340e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
	int16_t sumI4 =0;
 8003412:	2300      	movs	r3, #0
 8003414:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
	int8_t isNegativeRegion1 = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int8_t isNegativeRegion2 = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	int8_t isNegativeRegion3 = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
	int8_t isNegativeRegion4 = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
	int8_t previousRegion1 = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	int8_t previousRegion2 = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	int8_t previousRegion3 = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
	int8_t previousRegion4 = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 3118 	strb.w	r3, [r7, #280]	@ 0x118
	int16_t prevDiff1 = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	int16_t prevDiff2 = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	int16_t prevDiff3 = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
	int16_t prevDiff4 = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6

	int16_t shooterMotor = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
	// int16_t pR = 0;
	//int8_t counter = 0;
	uint16_t testmotor = 6161;
 8003466:	f641 0311 	movw	r3, #6161	@ 0x1811
 800346a:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
	uint16_t pivoter = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
	double angle = 0;
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
	int16_t xJoystickDirection = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	int16_t yJoystickDirection = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
	int16_t rotationOfChassis = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
	// Total Rotation is 1.25 times for 90degrees therefore motor has to rotate
	// PID onto this (This is the hypothetical orientation)
	int16_t chassisOrientation = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
	int16_t chassisPID = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
	int16_t rcVal2 = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

	int16_t randomOrientations[24] = {-380, -202, 462, -114, 240, -210, 150, 170, 248, 106, 118, 538, -260, -288, -120, 86, -264, 452, -592, 390, -410, 414, 54, -542};
 80034a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034ac:	4a9f      	ldr	r2, [pc, #636]	@ (800372c <TaskChassis+0x38c>)
 80034ae:	461c      	mov	r4, r3
 80034b0:	4615      	mov	r5, r2
 80034b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t startingVal = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
	int8_t started = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
	uint8_t increment = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
	int16_t instancesCounter = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int16_t previousVal = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
	int32_t rotationalVal = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	int16_t revolutions = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
	int8_t resetPerStart = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
	int32_t rotationTarget = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	int32_t posForGunMotor = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	int8_t burst = 3;
 80034fe:	2303      	movs	r3, #3
 8003500:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7

	int8_t customFiringModeSwitcher = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
	int8_t startedChecking = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
	int8_t switchedDown = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
	int8_t finalTHing = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
	int16_t counterForSwitching = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0

	int16_t buzzLengthCounter = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
	int8_t beepingInProgress = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
	int8_t beeped = 1;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd

	int16_t rotationCompStab = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
		averageY[i] = 0;
	}
	*/

	for(;;) {
		for (int i = 0; i < 4; i++) {
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003540:	e020      	b.n	8003584 <TaskChassis+0x1e4>
			rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 8003542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003546:	b25b      	sxtb	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	f001 fb69 	bl	8004c20 <getRCchannel>
 800354e:	4603      	mov	r3, r0
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003558:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8003730 <TaskChassis+0x390>
 800355c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003564:	ee17 3a90 	vmov	r3, s15
 8003568:	b21a      	sxth	r2, r3
 800356a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003574:	443b      	add	r3, r7
 8003576:	f823 2cc8 	strh.w	r2, [r3, #-200]
		for (int i = 0; i < 4; i++) {
 800357a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800357e:	3301      	adds	r3, #1
 8003580:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003588:	2b03      	cmp	r3, #3
 800358a:	ddda      	ble.n	8003542 <TaskChassis+0x1a2>
		}
		rcPitch = getRCchannel(1) * 0.94f + 2754;
 800358c:	2001      	movs	r0, #1
 800358e:	f001 fb47 	bl	8004c20 <getRCchannel>
 8003592:	4603      	mov	r3, r0
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003734 <TaskChassis+0x394>
 80035a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a4:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003738 <TaskChassis+0x398>
 80035a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b0:	ee17 3a90 	vmov	r3, s15
 80035b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
		int16_t leftDial = getRCchannel(4);
 80035b8:	2004      	movs	r0, #4
 80035ba:	f001 fb31 	bl	8004c20 <getRCchannel>
 80035be:	4603      	mov	r3, r0
 80035c0:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8

		int8_t chassisTurning = getRCswitch(1);
 80035c4:	2001      	movs	r0, #1
 80035c6:	f001 fb3f 	bl	8004c48 <getRCswitch>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

		float funnyKP = 0.022;
 80035d0:	4b5a      	ldr	r3, [pc, #360]	@ (800373c <TaskChassis+0x39c>)
 80035d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		float funnyKI = -0.02;
 80035d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003740 <TaskChassis+0x3a0>)
 80035d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		float funnyKD = 0.00005;
 80035dc:	4b59      	ldr	r3, [pc, #356]	@ (8003744 <TaskChassis+0x3a4>)
 80035de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		float rotationScalar = -540; //-540
 80035e2:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <TaskChassis+0x3a8>)
 80035e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if (counterForSwitching > 200) {
 80035e8:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 80035ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80035ee:	dd0b      	ble.n	8003608 <TaskChassis+0x268>
			startedChecking = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
			switchedDown = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
			finalTHing = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
			counterForSwitching = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
		}

		if (startedChecking == 1) {
 8003608:	f997 30e5 	ldrsb.w	r3, [r7, #229]	@ 0xe5
 800360c:	2b01      	cmp	r3, #1
 800360e:	d106      	bne.n	800361e <TaskChassis+0x27e>
			counterForSwitching++;
 8003610:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 8003614:	b29b      	uxth	r3, r3
 8003616:	3301      	adds	r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
		}

		int8_t movementUpOrDown = 5;
 800361e:	2305      	movs	r3, #5
 8003620:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
		if (increment == 18) {
 8003624:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8003628:	2b12      	cmp	r3, #18
 800362a:	d102      	bne.n	8003632 <TaskChassis+0x292>
			increment = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
		}

		if (instancesCounter > 100) {
 8003632:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 8003636:	2b64      	cmp	r3, #100	@ 0x64
 8003638:	dd07      	ble.n	800364a <TaskChassis+0x2aa>
			increment++;
 800363a:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 800363e:	3301      	adds	r3, #1
 8003640:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
			instancesCounter = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		}

		if (chassisTurning == 1 && startedChecking == 0) {
 800364a:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 800364e:	2b01      	cmp	r3, #1
 8003650:	d109      	bne.n	8003666 <TaskChassis+0x2c6>
 8003652:	f997 30e5 	ldrsb.w	r3, [r7, #229]	@ 0xe5
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <TaskChassis+0x2c6>
			counterForSwitching = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
			startedChecking = 1;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5

		}
		if (chassisTurning == 3 && startedChecking == 1) {
 8003666:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 800366a:	2b03      	cmp	r3, #3
 800366c:	d106      	bne.n	800367c <TaskChassis+0x2dc>
 800366e:	f997 30e5 	ldrsb.w	r3, [r7, #229]	@ 0xe5
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <TaskChassis+0x2dc>
			switchedDown = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
		}
		if (chassisTurning == 1 && startedChecking == 1 && switchedDown == 1) {
 800367c:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10a      	bne.n	800369a <TaskChassis+0x2fa>
 8003684:	f997 30e5 	ldrsb.w	r3, [r7, #229]	@ 0xe5
 8003688:	2b01      	cmp	r3, #1
 800368a:	d106      	bne.n	800369a <TaskChassis+0x2fa>
 800368c:	f997 30e4 	ldrsb.w	r3, [r7, #228]	@ 0xe4
 8003690:	2b01      	cmp	r3, #1
 8003692:	d102      	bne.n	800369a <TaskChassis+0x2fa>
			finalTHing = 1;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
		}

		if (chassisTurning == 3 && startedChecking == 1 && switchedDown == 1 && finalTHing == 1 && counterForSwitching < 200) {
 800369a:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d128      	bne.n	80036f4 <TaskChassis+0x354>
 80036a2:	f997 30e5 	ldrsb.w	r3, [r7, #229]	@ 0xe5
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d124      	bne.n	80036f4 <TaskChassis+0x354>
 80036aa:	f997 30e4 	ldrsb.w	r3, [r7, #228]	@ 0xe4
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d120      	bne.n	80036f4 <TaskChassis+0x354>
 80036b2:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d11c      	bne.n	80036f4 <TaskChassis+0x354>
 80036ba:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 80036be:	2bc7      	cmp	r3, #199	@ 0xc7
 80036c0:	dc18      	bgt.n	80036f4 <TaskChassis+0x354>
			switchedDown = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
			startedChecking = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
			counterForSwitching = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
			finalTHing = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
			customFiringModeSwitcher++;
 80036da:	f997 30e6 	ldrsb.w	r3, [r7, #230]	@ 0xe6
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
			beeped = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
			buzzLengthCounter = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde

		}
		if (customFiringModeSwitcher > 2) {
 80036f4:	f997 30e6 	ldrsb.w	r3, [r7, #230]	@ 0xe6
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	dd02      	ble.n	8003702 <TaskChassis+0x362>
			customFiringModeSwitcher = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
		}


		// usart_printf("$%d %d %d %d\r\n;",customFiringModeSwitcher, startedChecking, switchedDown, counterForSwitching);

		if (beeped == 0) {
 8003702:	f997 30dd 	ldrsb.w	r3, [r7, #221]	@ 0xdd
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 80b3 	bne.w	8003872 <TaskChassis+0x4d2>
			switch (customFiringModeSwitcher) {
 800370c:	f997 30e6 	ldrsb.w	r3, [r7, #230]	@ 0xe6
 8003710:	2b02      	cmp	r3, #2
 8003712:	d06b      	beq.n	80037ec <TaskChassis+0x44c>
 8003714:	2b02      	cmp	r3, #2
 8003716:	f300 80ac 	bgt.w	8003872 <TaskChassis+0x4d2>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <TaskChassis+0x3ac>
 800371e:	2b01      	cmp	r3, #1
 8003720:	d03c      	beq.n	800379c <TaskChassis+0x3fc>
 8003722:	e0a6      	b.n	8003872 <TaskChassis+0x4d2>
 8003724:	2000076c 	.word	0x2000076c
 8003728:	200007b4 	.word	0x200007b4
 800372c:	08011eec 	.word	0x08011eec
 8003730:	415a51ec 	.word	0x415a51ec
 8003734:	3f70a3d7 	.word	0x3f70a3d7
 8003738:	452c2000 	.word	0x452c2000
 800373c:	3cb43958 	.word	0x3cb43958
 8003740:	bca3d70a 	.word	0xbca3d70a
 8003744:	3851b717 	.word	0x3851b717
 8003748:	c4070000 	.word	0xc4070000
			case 0:
				if ((buzzLengthCounter == 0)) {
 800374c:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <TaskChassis+0x3ca>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					htim4.Instance->CCR3=150;
 8003754:	4bab      	ldr	r3, [pc, #684]	@ (8003a04 <TaskChassis+0x664>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2296      	movs	r2, #150	@ 0x96
 800375a:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 800375c:	2201      	movs	r2, #1
 800375e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003762:	48a9      	ldr	r0, [pc, #676]	@ (8003a08 <TaskChassis+0x668>)
 8003764:	f003 feac 	bl	80074c0 <HAL_GPIO_WritePin>
 8003768:	e010      	b.n	800378c <TaskChassis+0x3ec>
				}
				else if (buzzLengthCounter >=60) {
 800376a:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 800376e:	2b3b      	cmp	r3, #59	@ 0x3b
 8003770:	dd0c      	ble.n	800378c <TaskChassis+0x3ec>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
					htim4.Instance->CCR3=0;
 8003778:	4ba2      	ldr	r3, [pc, #648]	@ (8003a04 <TaskChassis+0x664>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 8003780:	2200      	movs	r2, #0
 8003782:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003786:	48a0      	ldr	r0, [pc, #640]	@ (8003a08 <TaskChassis+0x668>)
 8003788:	f003 fe9a 	bl	80074c0 <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 800378c:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 8003790:	b29b      	uxth	r3, r3
 8003792:	3301      	adds	r3, #1
 8003794:	b29b      	uxth	r3, r3
 8003796:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
				break;
 800379a:	e06a      	b.n	8003872 <TaskChassis+0x4d2>
			case 1:
				if (buzzLengthCounter == 0) {
 800379c:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <TaskChassis+0x41a>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					htim4.Instance->CCR3=150;
 80037a4:	4b97      	ldr	r3, [pc, #604]	@ (8003a04 <TaskChassis+0x664>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2296      	movs	r2, #150	@ 0x96
 80037aa:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 80037ac:	2201      	movs	r2, #1
 80037ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037b2:	4895      	ldr	r0, [pc, #596]	@ (8003a08 <TaskChassis+0x668>)
 80037b4:	f003 fe84 	bl	80074c0 <HAL_GPIO_WritePin>
 80037b8:	e010      	b.n	80037dc <TaskChassis+0x43c>
				} else if (buzzLengthCounter >=12) {
 80037ba:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 80037be:	2b0b      	cmp	r3, #11
 80037c0:	dd0c      	ble.n	80037dc <TaskChassis+0x43c>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
					htim4.Instance->CCR3=0;
 80037c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a04 <TaskChassis+0x664>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2200      	movs	r2, #0
 80037ce:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 80037d0:	2200      	movs	r2, #0
 80037d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037d6:	488c      	ldr	r0, [pc, #560]	@ (8003a08 <TaskChassis+0x668>)
 80037d8:	f003 fe72 	bl	80074c0 <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 80037dc:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
				break;
 80037ea:	e042      	b.n	8003872 <TaskChassis+0x4d2>
			case 2:
				if ((buzzLengthCounter == 0) || (buzzLengthCounter == 30) || (buzzLengthCounter == 60)) {
 80037ec:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <TaskChassis+0x464>
 80037f4:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 80037f8:	2b1e      	cmp	r3, #30
 80037fa:	d003      	beq.n	8003804 <TaskChassis+0x464>
 80037fc:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 8003800:	2b3c      	cmp	r3, #60	@ 0x3c
 8003802:	d10a      	bne.n	800381a <TaskChassis+0x47a>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					htim4.Instance->CCR3=150;
 8003804:	4b7f      	ldr	r3, [pc, #508]	@ (8003a04 <TaskChassis+0x664>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2296      	movs	r2, #150	@ 0x96
 800380a:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 800380c:	2201      	movs	r2, #1
 800380e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003812:	487d      	ldr	r0, [pc, #500]	@ (8003a08 <TaskChassis+0x668>)
 8003814:	f003 fe54 	bl	80074c0 <HAL_GPIO_WritePin>
 8003818:	e023      	b.n	8003862 <TaskChassis+0x4c2>
				} else if ((buzzLengthCounter == 15) || (buzzLengthCounter == 45)) {
 800381a:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 800381e:	2b0f      	cmp	r3, #15
 8003820:	d003      	beq.n	800382a <TaskChassis+0x48a>
 8003822:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 8003826:	2b2d      	cmp	r3, #45	@ 0x2d
 8003828:	d10a      	bne.n	8003840 <TaskChassis+0x4a0>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					htim4.Instance->CCR3=0;
 800382a:	4b76      	ldr	r3, [pc, #472]	@ (8003a04 <TaskChassis+0x664>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 8003832:	2200      	movs	r2, #0
 8003834:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003838:	4873      	ldr	r0, [pc, #460]	@ (8003a08 <TaskChassis+0x668>)
 800383a:	f003 fe41 	bl	80074c0 <HAL_GPIO_WritePin>
 800383e:	e010      	b.n	8003862 <TaskChassis+0x4c2>
				} else if (buzzLengthCounter >=75) {
 8003840:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 8003844:	2b4a      	cmp	r3, #74	@ 0x4a
 8003846:	dd0c      	ble.n	8003862 <TaskChassis+0x4c2>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
					htim4.Instance->CCR3=0;
 800384e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a04 <TaskChassis+0x664>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800385c:	486a      	ldr	r0, [pc, #424]	@ (8003a08 <TaskChassis+0x668>)
 800385e:	f003 fe2f 	bl	80074c0 <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 8003862:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	@ 0xde
 8003866:	b29b      	uxth	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
				break;
 8003870:	bf00      	nop
			}
		}



		switch (chassisTurning) {
 8003872:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 8003876:	2b01      	cmp	r3, #1
 8003878:	d002      	beq.n	8003880 <TaskChassis+0x4e0>
 800387a:	2b02      	cmp	r3, #2
 800387c:	d072      	beq.n	8003964 <TaskChassis+0x5c4>
 800387e:	e1cc      	b.n	8003c1a <TaskChassis+0x87a>
		case 1:
			xJoystickDirection = rcRPM[2]*cos(angle) - rcRPM[3]*sin(angle);
 8003880:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe4d 	bl	8000524 <__aeabi_i2d>
 800388a:	4604      	mov	r4, r0
 800388c:	460d      	mov	r5, r1
 800388e:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 8003892:	f00d fa7d 	bl	8010d90 <cos>
 8003896:	ec53 2b10 	vmov	r2, r3, d0
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f7fc feab 	bl	80005f8 <__aeabi_dmul>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4690      	mov	r8, r2
 80038a8:	4699      	mov	r9, r3
 80038aa:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fc fe38 	bl	8000524 <__aeabi_i2d>
 80038b4:	4604      	mov	r4, r0
 80038b6:	460d      	mov	r5, r1
 80038b8:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 80038bc:	f00d fabc 	bl	8010e38 <sin>
 80038c0:	ec53 2b10 	vmov	r2, r3, d0
 80038c4:	4620      	mov	r0, r4
 80038c6:	4629      	mov	r1, r5
 80038c8:	f7fc fe96 	bl	80005f8 <__aeabi_dmul>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4640      	mov	r0, r8
 80038d2:	4649      	mov	r1, r9
 80038d4:	f7fc fcd8 	bl	8000288 <__aeabi_dsub>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f7fd f93a 	bl	8000b58 <__aeabi_d2iz>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
			yJoystickDirection = rcRPM[2]*sin(angle) + rcRPM[3]*cos(angle);
 80038ea:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fe18 	bl	8000524 <__aeabi_i2d>
 80038f4:	4604      	mov	r4, r0
 80038f6:	460d      	mov	r5, r1
 80038f8:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 80038fc:	f00d fa9c 	bl	8010e38 <sin>
 8003900:	ec53 2b10 	vmov	r2, r3, d0
 8003904:	4620      	mov	r0, r4
 8003906:	4629      	mov	r1, r5
 8003908:	f7fc fe76 	bl	80005f8 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4690      	mov	r8, r2
 8003912:	4699      	mov	r9, r3
 8003914:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fe03 	bl	8000524 <__aeabi_i2d>
 800391e:	4604      	mov	r4, r0
 8003920:	460d      	mov	r5, r1
 8003922:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 8003926:	f00d fa33 	bl	8010d90 <cos>
 800392a:	ec53 2b10 	vmov	r2, r3, d0
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	f7fc fe61 	bl	80005f8 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4640      	mov	r0, r8
 800393c:	4649      	mov	r1, r9
 800393e:	f7fc fca5 	bl	800028c <__adddf3>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	f7fd f905 	bl	8000b58 <__aeabi_d2iz>
 800394e:	4603      	mov	r3, r0
 8003950:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
			rotationOfChassis = rcRPM[0];
 8003954:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003958:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102


			started = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb



			break;
 8003962:	e169      	b.n	8003c38 <TaskChassis+0x898>
		case 2:
			int8_t delta = 5;
 8003964:	2305      	movs	r3, #5
 8003966:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
			if (started == 0) {
 800396a:	f997 30fb 	ldrsb.w	r3, [r7, #251]	@ 0xfb
 800396e:	2b00      	cmp	r3, #0
 8003970:	d105      	bne.n	800397e <TaskChassis+0x5de>
				startingVal = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
				started = 1;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
			}
			if (startingVal >= randomOrientations[increment]-delta && startingVal <= randomOrientations[increment]+delta) {
 800397e:	f9b7 20fc 	ldrsh.w	r2, [r7, #252]	@ 0xfc
 8003982:	f897 10fa 	ldrb.w	r1, [r7, #250]	@ 0xfa
 8003986:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800398a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800398e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8003992:	4619      	mov	r1, r3
 8003994:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 8003998:	1acb      	subs	r3, r1, r3
 800399a:	429a      	cmp	r2, r3
 800399c:	db17      	blt.n	80039ce <TaskChassis+0x62e>
 800399e:	f9b7 20fc 	ldrsh.w	r2, [r7, #252]	@ 0xfc
 80039a2:	f897 10fa 	ldrb.w	r1, [r7, #250]	@ 0xfa
 80039a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80039aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039ae:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80039b2:	4619      	mov	r1, r3
 80039b4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80039b8:	440b      	add	r3, r1
 80039ba:	429a      	cmp	r2, r3
 80039bc:	dc07      	bgt.n	80039ce <TaskChassis+0x62e>
				instancesCounter++;
 80039be:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
 80039cc:	e027      	b.n	8003a1e <TaskChassis+0x67e>
			} else if (startingVal > randomOrientations[increment]-delta) {
 80039ce:	f9b7 20fc 	ldrsh.w	r2, [r7, #252]	@ 0xfc
 80039d2:	f897 10fa 	ldrb.w	r1, [r7, #250]	@ 0xfa
 80039d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80039da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039de:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80039e2:	4619      	mov	r1, r3
 80039e4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 80039e8:	1acb      	subs	r3, r1, r3
 80039ea:	429a      	cmp	r2, r3
 80039ec:	dd0e      	ble.n	8003a0c <TaskChassis+0x66c>
				startingVal -= movementUpOrDown;
 80039ee:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	@ 0xfc
 80039f2:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
 8003a00:	e00d      	b.n	8003a1e <TaskChassis+0x67e>
 8003a02:	bf00      	nop
 8003a04:	200007b4 	.word	0x200007b4
 8003a08:	40021c00 	.word	0x40021c00
			} else {
				startingVal += movementUpOrDown;
 8003a0c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8003a16:	4413      	add	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
			}


			xJoystickDirection = rcRPM[2]*cos(angle) - rcRPM[3]*sin(angle);
 8003a1e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fc fd7e 	bl	8000524 <__aeabi_i2d>
 8003a28:	4604      	mov	r4, r0
 8003a2a:	460d      	mov	r5, r1
 8003a2c:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 8003a30:	f00d f9ae 	bl	8010d90 <cos>
 8003a34:	ec53 2b10 	vmov	r2, r3, d0
 8003a38:	4620      	mov	r0, r4
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	f7fc fddc 	bl	80005f8 <__aeabi_dmul>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4690      	mov	r8, r2
 8003a46:	4699      	mov	r9, r3
 8003a48:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fd69 	bl	8000524 <__aeabi_i2d>
 8003a52:	4604      	mov	r4, r0
 8003a54:	460d      	mov	r5, r1
 8003a56:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 8003a5a:	f00d f9ed 	bl	8010e38 <sin>
 8003a5e:	ec53 2b10 	vmov	r2, r3, d0
 8003a62:	4620      	mov	r0, r4
 8003a64:	4629      	mov	r1, r5
 8003a66:	f7fc fdc7 	bl	80005f8 <__aeabi_dmul>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4640      	mov	r0, r8
 8003a70:	4649      	mov	r1, r9
 8003a72:	f7fc fc09 	bl	8000288 <__aeabi_dsub>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f7fd f86b 	bl	8000b58 <__aeabi_d2iz>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
			yJoystickDirection = rcRPM[2]*sin(angle) + rcRPM[3]*cos(angle);
 8003a88:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fd49 	bl	8000524 <__aeabi_i2d>
 8003a92:	4604      	mov	r4, r0
 8003a94:	460d      	mov	r5, r1
 8003a96:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 8003a9a:	f00d f9cd 	bl	8010e38 <sin>
 8003a9e:	ec53 2b10 	vmov	r2, r3, d0
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	f7fc fda7 	bl	80005f8 <__aeabi_dmul>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4690      	mov	r8, r2
 8003ab0:	4699      	mov	r9, r3
 8003ab2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fc fd34 	bl	8000524 <__aeabi_i2d>
 8003abc:	4604      	mov	r4, r0
 8003abe:	460d      	mov	r5, r1
 8003ac0:	ed97 0b42 	vldr	d0, [r7, #264]	@ 0x108
 8003ac4:	f00d f964 	bl	8010d90 <cos>
 8003ac8:	ec53 2b10 	vmov	r2, r3, d0
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7fc fd92 	bl	80005f8 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4640      	mov	r0, r8
 8003ada:	4649      	mov	r1, r9
 8003adc:	f7fc fbd6 	bl	800028c <__adddf3>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fd f836 	bl	8000b58 <__aeabi_d2iz>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
			int16_t hypotheticalP = funnyKP*(startingVal - chassisOrientation);
 8003af2:	f9b7 20fc 	ldrsh.w	r2, [r7, #252]	@ 0xfc
 8003af6:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b04:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b10:	ee17 3a90 	vmov	r3, s15
 8003b14:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
			if (hypotheticalP >= 0) {
 8003b18:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	@ 0xa0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	db03      	blt.n	8003b28 <TaskChassis+0x788>
				isNegativeRegion3 = -1;
 8003b20:	23ff      	movs	r3, #255	@ 0xff
 8003b22:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8003b26:	e002      	b.n	8003b2e <TaskChassis+0x78e>
			} else {
				isNegativeRegion3 = 1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
			}
			if (hypotheticalP != previousRegion3) {
 8003b2e:	f997 3119 	ldrsb.w	r3, [r7, #281]	@ 0x119
 8003b32:	b21b      	sxth	r3, r3
 8003b34:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	@ 0xa0
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d002      	beq.n	8003b42 <TaskChassis+0x7a2>
				sumI3 = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
			}
			previousRegion3 = hypotheticalP;
 8003b42:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8003b46:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
			sumI3 += (startingVal - chassisOrientation)*0.005;
 8003b4a:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	@ 0x11c
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc fce8 	bl	8000524 <__aeabi_i2d>
 8003b54:	4604      	mov	r4, r0
 8003b56:	460d      	mov	r5, r1
 8003b58:	f9b7 20fc 	ldrsh.w	r2, [r7, #252]	@ 0xfc
 8003b5c:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fcde 	bl	8000524 <__aeabi_i2d>
 8003b68:	a3c9      	add	r3, pc, #804	@ (adr r3, 8003e90 <TaskChassis+0xaf0>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f7fc fd43 	bl	80005f8 <__aeabi_dmul>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4620      	mov	r0, r4
 8003b78:	4629      	mov	r1, r5
 8003b7a:	f7fc fb87 	bl	800028c <__adddf3>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	f7fc ffe7 	bl	8000b58 <__aeabi_d2iz>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
			int16_t hypotheticalI = funnyKI*(sumI3);
 8003b90:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	@ 0x11c
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b9c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba8:	ee17 3a90 	vmov	r3, s15
 8003bac:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
			int16_t hypotheticalD = funnyKD*(startingVal - chassisOrientation)*200;
 8003bb0:	f9b7 20fc 	ldrsh.w	r2, [r7, #252]	@ 0xfc
 8003bb4:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc2:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8003e98 <TaskChassis+0xaf8>
 8003bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd6:	ee17 3a90 	vmov	r3, s15
 8003bda:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
			chassisPID = hypotheticalP + hypotheticalI + hypotheticalD;
 8003bde:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 8003be2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003be6:	4413      	add	r3, r2
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8003bee:	4413      	add	r3, r2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
			chassisOrientation += chassisPID;
 8003bf6:	f8b7 2100 	ldrh.w	r2, [r7, #256]	@ 0x100
 8003bfa:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8003bfe:	4413      	add	r3, r2
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
			//rotationOfChassis = rcRPM[0]+rotationScalar*chassisPID;

			rotationOfChassis = rcRPM[0] + rotationCompStab;
 8003c06:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8003c10:	4413      	add	r3, r2
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
			chassisPID = hypotheticalP + hypotheticalI + hypotheticalD;
			chassisOrientation += chassisPID;
			rotationOfChassis = rcRPM[0]+rotationScalar*chassisPID;
			*/

			break;
 8003c18:	e00e      	b.n	8003c38 <TaskChassis+0x898>
		default:
			started = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
			xJoystickDirection = rcRPM[2];
 8003c20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003c24:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
			yJoystickDirection = rcRPM[3];
 8003c28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003c2c:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
			rotationOfChassis = rcRPM[0];
 8003c30:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003c34:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
		}
		// int16_t chassisConvert = ((-1*(chassisOrientation))*3.32f)+4755;


		chassisTargetRPM.motorRPM[0] = yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003c38:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8003c3c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8003c40:	4413      	add	r3, r2
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8003c48:	4413      	add	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	b21a      	sxth	r2, r3
 8003c4e:	4b93      	ldr	r3, [pc, #588]	@ (8003e9c <TaskChassis+0xafc>)
 8003c50:	801a      	strh	r2, [r3, #0]
		chassisTargetRPM.motorRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003c52:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8003c56:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b21a      	sxth	r2, r3
 8003c68:	4b8c      	ldr	r3, [pc, #560]	@ (8003e9c <TaskChassis+0xafc>)
 8003c6a:	805a      	strh	r2, [r3, #2]
		chassisTargetRPM.motorRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003c6c:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 8003c70:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b21a      	sxth	r2, r3
 8003c82:	4b86      	ldr	r3, [pc, #536]	@ (8003e9c <TaskChassis+0xafc>)
 8003c84:	809a      	strh	r2, [r3, #4]
		chassisTargetRPM.motorRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003c86:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 8003c8a:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8003c96:	4413      	add	r3, r2
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b21a      	sxth	r2, r3
 8003c9c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e9c <TaskChassis+0xafc>)
 8003c9e:	80da      	strh	r2, [r3, #6]
		//if (calcChassisPower >= 30) {
		//chassisTargetCurrent = applyPowerlimit(chassis, chassisTargetRPM, calcChassisPower);

		//CAN1_cmd_b2b(CAN_b2b_A_ID, 1, 1, 1, 1);

		float kPg = 0.1;
 8003ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea0 <TaskChassis+0xb00>)
 8003ca2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		float kIg = 0;
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		float kDg = 0;
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		if (customFiringModeSwitcher == 1) {
 8003cb6:	f997 30e6 	ldrsb.w	r3, [r7, #230]	@ 0xe6
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d103      	bne.n	8003cc6 <TaskChassis+0x926>
			burst = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8003cc4:	e006      	b.n	8003cd4 <TaskChassis+0x934>
		} else if (customFiringModeSwitcher == 2) {
 8003cc6:	f997 30e6 	ldrsb.w	r3, [r7, #230]	@ 0xe6
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d102      	bne.n	8003cd4 <TaskChassis+0x934>
			burst = 3;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7





		setM3508RPM(1, chassisTargetRPM.motorRPM[0], chassisPreset);
 8003cd4:	4b71      	ldr	r3, [pc, #452]	@ (8003e9c <TaskChassis+0xafc>)
 8003cd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003cda:	4b72      	ldr	r3, [pc, #456]	@ (8003ea4 <TaskChassis+0xb04>)
 8003cdc:	edd3 6a00 	vldr	s13, [r3]
 8003ce0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ce4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ce8:	eeb0 0a66 	vmov.f32	s0, s13
 8003cec:	eef0 0a47 	vmov.f32	s1, s14
 8003cf0:	eeb0 1a67 	vmov.f32	s2, s15
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7fd ffba 	bl	8001c70 <setM3508RPM>
		setM3508RPM(2, chassisTargetRPM.motorRPM[1], chassisPreset);
 8003cfc:	4b67      	ldr	r3, [pc, #412]	@ (8003e9c <TaskChassis+0xafc>)
 8003cfe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003d02:	4b68      	ldr	r3, [pc, #416]	@ (8003ea4 <TaskChassis+0xb04>)
 8003d04:	edd3 6a00 	vldr	s13, [r3]
 8003d08:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d10:	eeb0 0a66 	vmov.f32	s0, s13
 8003d14:	eef0 0a47 	vmov.f32	s1, s14
 8003d18:	eeb0 1a67 	vmov.f32	s2, s15
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	2002      	movs	r0, #2
 8003d20:	f7fd ffa6 	bl	8001c70 <setM3508RPM>
		setM3508RPM(3, chassisTargetRPM.motorRPM[2], chassisPreset);
 8003d24:	4b5d      	ldr	r3, [pc, #372]	@ (8003e9c <TaskChassis+0xafc>)
 8003d26:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ea4 <TaskChassis+0xb04>)
 8003d2c:	edd3 6a00 	vldr	s13, [r3]
 8003d30:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d38:	eeb0 0a66 	vmov.f32	s0, s13
 8003d3c:	eef0 0a47 	vmov.f32	s1, s14
 8003d40:	eeb0 1a67 	vmov.f32	s2, s15
 8003d44:	4611      	mov	r1, r2
 8003d46:	2003      	movs	r0, #3
 8003d48:	f7fd ff92 	bl	8001c70 <setM3508RPM>
		setM3508RPM(4, chassisTargetRPM.motorRPM[3], chassisPreset);
 8003d4c:	4b53      	ldr	r3, [pc, #332]	@ (8003e9c <TaskChassis+0xafc>)
 8003d4e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003d52:	4b54      	ldr	r3, [pc, #336]	@ (8003ea4 <TaskChassis+0xb04>)
 8003d54:	edd3 6a00 	vldr	s13, [r3]
 8003d58:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d60:	eeb0 0a66 	vmov.f32	s0, s13
 8003d64:	eef0 0a47 	vmov.f32	s1, s14
 8003d68:	eeb0 1a67 	vmov.f32	s2, s15
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	2004      	movs	r0, #4
 8003d70:	f7fd ff7e 	bl	8001c70 <setM3508RPM>

		int16_t roundsPerSecond = 20;
 8003d74:	2314      	movs	r3, #20
 8003d76:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		// Constant SHOULD BE 1.3636, 0.08
		int8_t rcSwitchToShoot = getRCswitch(0);
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	f000 ff64 	bl	8004c48 <getRCswitch>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
		if (rcSwitchToShoot == 1) {
 8003d86:	f997 308d 	ldrsb.w	r3, [r7, #141]	@ 0x8d
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 8124 	bne.w	8003fd8 <TaskChassis+0xc38>
			if (customFiringModeSwitcher == 0) {
 8003d90:	f997 30e6 	ldrsb.w	r3, [r7, #230]	@ 0xe6
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d11c      	bne.n	8003dd2 <TaskChassis+0xa32>
				setM3508RPM(5, roundsPerSecond * 270, chassisPreset);
 8003d98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	00d2      	lsls	r2, r2, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	461a      	mov	r2, r3
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	b21a      	sxth	r2, r3
 8003dae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea4 <TaskChassis+0xb04>)
 8003db0:	edd3 6a00 	vldr	s13, [r3]
 8003db4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003db8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003dbc:	eeb0 0a66 	vmov.f32	s0, s13
 8003dc0:	eef0 0a47 	vmov.f32	s1, s14
 8003dc4:	eeb0 1a67 	vmov.f32	s2, s15
 8003dc8:	4611      	mov	r1, r2
 8003dca:	2005      	movs	r0, #5
 8003dcc:	f7fd ff50 	bl	8001c70 <setM3508RPM>
 8003dd0:	e0fe      	b.n	8003fd0 <TaskChassis+0xc30>
			} else {
				shooterMotor = getMotorPosition(5);
 8003dd2:	2005      	movs	r0, #5
 8003dd4:	f7fd ffb4 	bl	8001d40 <getMotorPosition>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
				// Resets the total rotationValue to avoid going too high
				if (resetPerStart == 0) {
 8003dde:	f997 30ed 	ldrsb.w	r3, [r7, #237]	@ 0xed
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d119      	bne.n	8003e1a <TaskChassis+0xa7a>
					int32_t rotationTarget1 = (36860 * burst);// + shooterMotor
 8003de6:	f997 30e7 	ldrsb.w	r3, [r7, #231]	@ 0xe7
 8003dea:	f648 72fc 	movw	r2, #36860	@ 0x8ffc
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
					rotationTarget = rotationTarget1 + shooterMotor;
 8003df6:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003dfa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003dfe:	4413      	add	r3, r2
 8003e00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

					revolutions = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
					rotationalVal = shooterMotor;
 8003e0a:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8003e0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
					previousVal = shooterMotor;
 8003e12:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8003e16:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
				}
				resetPerStart = 1;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
				posForGunMotor = kPg*(rotationTarget - rotationalVal);
 8003e20:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003e24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e32:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e3e:	ee17 3a90 	vmov	r3, s15
 8003e42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

				// counts the amount of rotations
				if ((shooterMotor - previousVal) < -1000) {
 8003e46:	f9b7 20c4 	ldrsh.w	r2, [r7, #196]	@ 0xc4
 8003e4a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003e54:	da06      	bge.n	8003e64 <TaskChassis+0xac4>
					 revolutions++;
 8003e56:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	@ 0xee
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
				} /* else if ((shooterMotor - previousVal) > 4500) {
				revolutions --
				}
				*/
				previousVal = shooterMotor;
 8003e64:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	@ 0xc4
 8003e68:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
				rotationalVal = shooterMotor + (revolutions*8191);
 8003e6c:	f9b7 10c4 	ldrsh.w	r1, [r7, #196]	@ 0xc4
 8003e70:	f9b7 20ee 	ldrsh.w	r2, [r7, #238]	@ 0xee
 8003e74:	4613      	mov	r3, r2
 8003e76:	035b      	lsls	r3, r3, #13
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0




				// int16_t PositionToGo = kPu*(rcVal-testmotor);
				if (posForGunMotor >= 0) {
 8003e80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db0f      	blt.n	8003ea8 <TaskChassis+0xb08>
					isNegativeRegion4 = -1;
 8003e88:	23ff      	movs	r3, #255	@ 0xff
 8003e8a:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
 8003e8e:	e00e      	b.n	8003eae <TaskChassis+0xb0e>
 8003e90:	47ae147b 	.word	0x47ae147b
 8003e94:	3f747ae1 	.word	0x3f747ae1
 8003e98:	43480000 	.word	0x43480000
 8003e9c:	20000b4c 	.word	0x20000b4c
 8003ea0:	3dcccccd 	.word	0x3dcccccd
 8003ea4:	20000040 	.word	0x20000040
				} else {
					isNegativeRegion4 = 1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
				}
				if (posForGunMotor != previousRegion4) {
 8003eae:	f997 3118 	ldrsb.w	r3, [r7, #280]	@ 0x118
 8003eb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d002      	beq.n	8003ec0 <TaskChassis+0xb20>
					sumI4 = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
				}
				previousRegion4 = posForGunMotor;
 8003ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ec4:	f887 3118 	strb.w	r3, [r7, #280]	@ 0x118
				sumI4 += (rotationTarget-testmotor)*0.005;
 8003ec8:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	@ 0x11a
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fb29 	bl	8000524 <__aeabi_i2d>
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	460d      	mov	r5, r1
 8003ed6:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8003eda:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc fb1f 	bl	8000524 <__aeabi_i2d>
 8003ee6:	a39e      	add	r3, pc, #632	@ (adr r3, 8004160 <TaskChassis+0xdc0>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f7fc fb84 	bl	80005f8 <__aeabi_dmul>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7fc f9c8 	bl	800028c <__adddf3>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	f7fc fe28 	bl	8000b58 <__aeabi_d2iz>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
				int32_t IntegralToGo4 = kIg*(sumI4);
 8003f0e:	f9b7 311a 	ldrsh.w	r3, [r7, #282]	@ 0x11a
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f1a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f26:	ee17 3a90 	vmov	r3, s15
 8003f2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				int32_t DerivativeToGo4 = kDg*(rotationTarget-testmotor)*200;
 8003f2e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8003f32:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f40:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f48:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8004140 <TaskChassis+0xda0>
 8003f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f54:	ee17 3a90 	vmov	r3, s15
 8003f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

				int32_t finalRPM = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				if ((posForGunMotor+IntegralToGo4+DerivativeToGo4) > (roundsPerSecond * 270)) {
 8003f62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003f66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f6a:	441a      	add	r2, r3
 8003f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f70:	441a      	add	r2, r3
 8003f72:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8003f76:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	dd08      	ble.n	8003f94 <TaskChassis+0xbf4>
					finalRPM =roundsPerSecond * 270;
 8003f82:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8003f86:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f92:	e009      	b.n	8003fa8 <TaskChassis+0xc08>
				} else {
					finalRPM = posForGunMotor+IntegralToGo4+DerivativeToGo4;
 8003f94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
				}
				setM3508RPM(5, finalRPM, chassisPreset);
 8003fa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003fac:	b21a      	sxth	r2, r3
 8003fae:	4b65      	ldr	r3, [pc, #404]	@ (8004144 <TaskChassis+0xda4>)
 8003fb0:	edd3 6a00 	vldr	s13, [r3]
 8003fb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fbc:	eeb0 0a66 	vmov.f32	s0, s13
 8003fc0:	eef0 0a47 	vmov.f32	s1, s14
 8003fc4:	eeb0 1a67 	vmov.f32	s2, s15
 8003fc8:	4611      	mov	r1, r2
 8003fca:	2005      	movs	r0, #5
 8003fcc:	f7fd fe50 	bl	8001c70 <setM3508RPM>
			}
			switched = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003fd6:	e013      	b.n	8004000 <TaskChassis+0xc60>
			setM3508RPM(5, roundsPerSecond * 270, chassisPreset);
			*/
			// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, rcVal + 252);
			// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, rcVal + 252);
		} else {
			resetPerStart = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
			setM3508RPM(5, 0, chassisPreset);
 8003fde:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <TaskChassis+0xda4>)
 8003fe0:	edd3 6a00 	vldr	s13, [r3]
 8003fe4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fe8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fec:	eeb0 0a66 	vmov.f32	s0, s13
 8003ff0:	eef0 0a47 	vmov.f32	s1, s14
 8003ff4:	eeb0 1a67 	vmov.f32	s2, s15
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	2005      	movs	r0, #5
 8003ffc:	f7fd fe38 	bl	8001c70 <setM3508RPM>
		}
		if (rcSwitchToShoot == 2 && switched == 0 && motorOn == 0) {
 8004000:	f997 308d 	ldrsb.w	r3, [r7, #141]	@ 0x8d
 8004004:	2b02      	cmp	r3, #2
 8004006:	d10e      	bne.n	8004026 <TaskChassis+0xc86>
 8004008:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <TaskChassis+0xc86>
 8004010:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <TaskChassis+0xc86>
			motorOn = 1;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
			switched = 1;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004024:	e011      	b.n	800404a <TaskChassis+0xcaa>
		} else if (rcSwitchToShoot == 2 && switched == 0 && motorOn == 1) {
 8004026:	f997 308d 	ldrsb.w	r3, [r7, #141]	@ 0x8d
 800402a:	2b02      	cmp	r3, #2
 800402c:	d10d      	bne.n	800404a <TaskChassis+0xcaa>
 800402e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <TaskChassis+0xcaa>
 8004036:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <TaskChassis+0xcaa>
			motorOn = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
			switched = 1;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
		}
		if (rcSwitchToShoot == 3) {
 800404a:	f997 308d 	ldrsb.w	r3, [r7, #141]	@ 0x8d
 800404e:	2b03      	cmp	r3, #3
 8004050:	d102      	bne.n	8004058 <TaskChassis+0xcb8>
			switched = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
		}


		// int16_t testingMax = getRCchannel(1)*1.15f;
		// MAX SPEED = 759
		htim1.Instance->CCR1=200+(350*motorOn);
 8004058:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 800405c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004060:	fb02 f303 	mul.w	r3, r2, r3
 8004064:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8004068:	4b37      	ldr	r3, [pc, #220]	@ (8004148 <TaskChassis+0xda8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2=200+(350*motorOn);
 800406e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004072:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 800407e:	4b32      	ldr	r3, [pc, #200]	@ (8004148 <TaskChassis+0xda8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38

		// int32_t dividedRotation = rotationalVal * 0.01f;
		// usart_printf("$%d %d %d\r\n;",rotationalVal, shooterMotor, rotationTarget);
		testmotor = getMotorPosition(6);
 8004084:	2006      	movs	r0, #6
 8004086:	f7fd fe5b 	bl	8001d40 <getMotorPosition>
 800408a:	4603      	mov	r3, r0
 800408c:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
		// min = 5600
		// max = 6700
		//(These are ABSOLUTE MAXES)
		// Difference = 0, 589, 1178

		float kPu =0.7; // 0.005
 8004090:	4b2e      	ldr	r3, [pc, #184]	@ (800414c <TaskChassis+0xdac>)
 8004092:	67fb      	str	r3, [r7, #124]	@ 0x7c
		float kIu =0; // 0.0001
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	67bb      	str	r3, [r7, #120]	@ 0x78
		float kDu =0.0001; // 0.0005
 800409a:	4b2d      	ldr	r3, [pc, #180]	@ (8004150 <TaskChassis+0xdb0>)
 800409c:	677b      	str	r3, [r7, #116]	@ 0x74



		int16_t rcVal = (getRCchannel(1)*0.88f)+6161;
 800409e:	2001      	movs	r0, #1
 80040a0:	f000 fdbe 	bl	8004c20 <getRCchannel>
 80040a4:	4603      	mov	r3, r0
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ae:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8004154 <TaskChassis+0xdb4>
 80040b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004158 <TaskChassis+0xdb8>
 80040ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040c2:	ee17 3a90 	vmov	r3, s15
 80040c6:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

		int16_t DifferenceBetweenCurrentAndWannabePosition = rcVal-testmotor;
 80040ca:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 80040ce:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70

		if (testmotor < 5500) {
 80040da:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80040de:	f241 527b 	movw	r2, #5499	@ 0x157b
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d811      	bhi.n	800410a <TaskChassis+0xd6a>
			setGM6020voltageRPM(6, 5, DONUTMOTOR);
 80040e6:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <TaskChassis+0xdbc>)
 80040e8:	edd3 6a00 	vldr	s13, [r3]
 80040ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80040f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80040f4:	eeb0 0a66 	vmov.f32	s0, s13
 80040f8:	eef0 0a47 	vmov.f32	s1, s14
 80040fc:	eeb0 1a67 	vmov.f32	s2, s15
 8004100:	2105      	movs	r1, #5
 8004102:	2006      	movs	r0, #6
 8004104:	f7fd fde8 	bl	8001cd8 <setGM6020voltageRPM>
 8004108:	e055      	b.n	80041b6 <TaskChassis+0xe16>
		} else if (testmotor > 6800) {
 800410a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800410e:	f641 2290 	movw	r2, #6800	@ 0x1a90
 8004112:	4293      	cmp	r3, r2
 8004114:	d928      	bls.n	8004168 <TaskChassis+0xdc8>
			setGM6020voltageRPM(6, -5, DONUTMOTOR);
 8004116:	4b11      	ldr	r3, [pc, #68]	@ (800415c <TaskChassis+0xdbc>)
 8004118:	edd3 6a00 	vldr	s13, [r3]
 800411c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004120:	edd3 7a02 	vldr	s15, [r3, #8]
 8004124:	eeb0 0a66 	vmov.f32	s0, s13
 8004128:	eef0 0a47 	vmov.f32	s1, s14
 800412c:	eeb0 1a67 	vmov.f32	s2, s15
 8004130:	f06f 0104 	mvn.w	r1, #4
 8004134:	2006      	movs	r0, #6
 8004136:	f7fd fdcf 	bl	8001cd8 <setGM6020voltageRPM>
 800413a:	e03c      	b.n	80041b6 <TaskChassis+0xe16>
 800413c:	f3af 8000 	nop.w
 8004140:	43480000 	.word	0x43480000
 8004144:	20000040 	.word	0x20000040
 8004148:	2000076c 	.word	0x2000076c
 800414c:	3f333333 	.word	0x3f333333
 8004150:	38d1b717 	.word	0x38d1b717
 8004154:	3f6147ae 	.word	0x3f6147ae
 8004158:	45c08800 	.word	0x45c08800
 800415c:	2000004c 	.word	0x2000004c
 8004160:	47ae147b 	.word	0x47ae147b
 8004164:	3f747ae1 	.word	0x3f747ae1
			int16_t PositionToGo = kPu*(DifferenceBetweenCurrentAndWannabePosition);
			int16_t IntegralToGo = kIu*(sumI1);
			int16_t DerivativeToGo = kDu*(DifferenceBetweenCurrentAndWannabePosition)*200;
			*/

			setGM6020voltageRPM(6, positionPIDByMe(&prevDiff1, &isNegativeRegion1, &previousRegion1, DifferenceBetweenCurrentAndWannabePosition, &sumI1, kPu, kIu, kDu), DONUTMOTOR);
 8004168:	f9b7 4070 	ldrsh.w	r4, [r7, #112]	@ 0x70
 800416c:	f107 0251 	add.w	r2, r7, #81	@ 0x51
 8004170:	f107 0153 	add.w	r1, r7, #83	@ 0x53
 8004174:	f107 004e 	add.w	r0, r7, #78	@ 0x4e
 8004178:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	ed97 1a1d 	vldr	s2, [r7, #116]	@ 0x74
 8004182:	edd7 0a1e 	vldr	s1, [r7, #120]	@ 0x78
 8004186:	ed97 0a1f 	vldr	s0, [r7, #124]	@ 0x7c
 800418a:	4623      	mov	r3, r4
 800418c:	f7ff f854 	bl	8003238 <positionPIDByMe>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	4be0      	ldr	r3, [pc, #896]	@ (8004518 <TaskChassis+0x1178>)
 8004196:	edd3 6a00 	vldr	s13, [r3]
 800419a:	ed93 7a01 	vldr	s14, [r3, #4]
 800419e:	edd3 7a02 	vldr	s15, [r3, #8]
 80041a2:	eeb0 0a66 	vmov.f32	s0, s13
 80041a6:	eef0 0a47 	vmov.f32	s1, s14
 80041aa:	eeb0 1a67 	vmov.f32	s2, s15
 80041ae:	4611      	mov	r1, r2
 80041b0:	2006      	movs	r0, #6
 80041b2:	f7fd fd91 	bl	8001cd8 <setGM6020voltageRPM>
		}


		// 2524-6986
		// 90 degree = 2691, 6799
		pivoter = getMotorPosition(7);
 80041b6:	2007      	movs	r0, #7
 80041b8:	f7fd fdc2 	bl	8001d40 <getMotorPosition>
 80041bc:	4603      	mov	r3, r0
 80041be:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
		angle = ((pivoter-4755)*0.00024343f)*3.14159265f;
 80041c2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80041c6:	f5a3 5394 	sub.w	r3, r3, #4736	@ 0x1280
 80041ca:	3b13      	subs	r3, #19
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d4:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 800451c <TaskChassis+0x117c>
 80041d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041dc:	ed9f 7ad0 	vldr	s14, [pc, #832]	@ 8004520 <TaskChassis+0x1180>
 80041e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e4:	ee17 0a90 	vmov	r0, s15
 80041e8:	f7fc f9ae 	bl	8000548 <__aeabi_f2d>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108

		float kPr =0.08; // 0.022
 80041f4:	4bcb      	ldr	r3, [pc, #812]	@ (8004524 <TaskChassis+0x1184>)
 80041f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		float kIr =0.000; // -0.02
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	66bb      	str	r3, [r7, #104]	@ 0x68
		float kDr =0.009; // 0.00005
 80041fe:	4bca      	ldr	r3, [pc, #808]	@ (8004528 <TaskChassis+0x1188>)
 8004200:	667b      	str	r3, [r7, #100]	@ 0x64

		float gyroPosition[3] = {IMU_get_gyro(x), IMU_get_gyro(y), IMU_get_gyro(z)};
 8004202:	2000      	movs	r0, #0
 8004204:	f7fd f846 	bl	8001294 <IMU_get_gyro>
 8004208:	eef0 7a40 	vmov.f32	s15, s0
 800420c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004210:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004214:	edc3 7a00 	vstr	s15, [r3]
 8004218:	2001      	movs	r0, #1
 800421a:	f7fd f83b 	bl	8001294 <IMU_get_gyro>
 800421e:	eef0 7a40 	vmov.f32	s15, s0
 8004222:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004226:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800422a:	edc3 7a01 	vstr	s15, [r3, #4]
 800422e:	2002      	movs	r0, #2
 8004230:	f7fd f830 	bl	8001294 <IMU_get_gyro>
 8004234:	eef0 7a40 	vmov.f32	s15, s0
 8004238:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800423c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004240:	edc3 7a02 	vstr	s15, [r3, #8]
		int16_t convert[3] = { (int)(gyroPosition[0]*9.549), (int)(gyroPosition[1]*(9.549)), (int)((gyroPosition[2]+((float)leftDial*(-0.008)))*(-230))};
 8004244:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004248:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc f97a 	bl	8000548 <__aeabi_f2d>
 8004254:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004508 <TaskChassis+0x1168>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f7fc f9cd 	bl	80005f8 <__aeabi_dmul>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f7fc fc77 	bl	8000b58 <__aeabi_d2iz>
 800426a:	4603      	mov	r3, r0
 800426c:	b21a      	sxth	r2, r3
 800426e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004272:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004276:	801a      	strh	r2, [r3, #0]
 8004278:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800427c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc f960 	bl	8000548 <__aeabi_f2d>
 8004288:	a39f      	add	r3, pc, #636	@ (adr r3, 8004508 <TaskChassis+0x1168>)
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f7fc f9b3 	bl	80005f8 <__aeabi_dmul>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	f7fc fc5d 	bl	8000b58 <__aeabi_d2iz>
 800429e:	4603      	mov	r3, r0
 80042a0:	b21a      	sxth	r2, r3
 80042a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80042a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80042aa:	805a      	strh	r2, [r3, #2]
 80042ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80042b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fc f946 	bl	8000548 <__aeabi_f2d>
 80042bc:	4604      	mov	r4, r0
 80042be:	460d      	mov	r5, r1
 80042c0:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042cc:	ee17 0a90 	vmov	r0, s15
 80042d0:	f7fc f93a 	bl	8000548 <__aeabi_f2d>
 80042d4:	a38e      	add	r3, pc, #568	@ (adr r3, 8004510 <TaskChassis+0x1170>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fc f98d 	bl	80005f8 <__aeabi_dmul>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4620      	mov	r0, r4
 80042e4:	4629      	mov	r1, r5
 80042e6:	f7fb ffd1 	bl	800028c <__adddf3>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	4b8d      	ldr	r3, [pc, #564]	@ (800452c <TaskChassis+0x118c>)
 80042f8:	f7fc f97e 	bl	80005f8 <__aeabi_dmul>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f7fc fc28 	bl	8000b58 <__aeabi_d2iz>
 8004308:	4603      	mov	r3, r0
 800430a:	b21a      	sxth	r2, r3
 800430c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004310:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004314:	809a      	strh	r2, [r3, #4]
		rotationPositionY += gyroPosition[0]*0.2864788976;
		int16_t convertY = (int)rotationPositionY;
		int16_t convertZ = (int)rotationPositionZ;
		*/

		if (chassisTurning == 2) {
 8004316:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 800431a:	2b02      	cmp	r3, #2
 800431c:	d114      	bne.n	8004348 <TaskChassis+0xfa8>
			// rcVal2 = ((-1*(leftDial))*3.32f)+4755;
			rcVal2 = (leftDial*3.32f)+4755;
 800431e:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8004530 <TaskChassis+0x1190>
 800432e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004332:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004534 <TaskChassis+0x1194>
 8004336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800433a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800433e:	ee17 3a90 	vmov	r3, s15
 8004342:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8004346:	e013      	b.n	8004370 <TaskChassis+0xfd0>
		} else {
			rcVal2 = (leftDial*3.32f)+4755;
 8004348:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004354:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8004530 <TaskChassis+0x1190>
 8004358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800435c:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8004534 <TaskChassis+0x1194>
 8004360:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004368:	ee17 3a90 	vmov	r3, s15
 800436c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
		}

		if (pivoter <= 6799 && pivoter >= 2691) {
 8004370:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8004374:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 8004378:	4293      	cmp	r3, r2
 800437a:	d80f      	bhi.n	800439c <TaskChassis+0xffc>
 800437c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8004380:	f640 2282 	movw	r2, #2690	@ 0xa82
 8004384:	4293      	cmp	r3, r2
 8004386:	d909      	bls.n	800439c <TaskChassis+0xffc>
			HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 0);
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800438e:	486a      	ldr	r0, [pc, #424]	@ (8004538 <TaskChassis+0x1198>)
 8004390:	f003 f896 	bl	80074c0 <HAL_GPIO_WritePin>
			rotationCompStab = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
 800439a:	e031      	b.n	8004400 <TaskChassis+0x1060>
		} else if (pivoter > 6799) {
 800439c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80043a0:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d916      	bls.n	80043d6 <TaskChassis+0x1036>
			HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
 80043a8:	2201      	movs	r2, #1
 80043aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043ae:	4862      	ldr	r0, [pc, #392]	@ (8004538 <TaskChassis+0x1198>)
 80043b0:	f003 f886 	bl	80074c0 <HAL_GPIO_WritePin>
			rotationCompStab = -25*(pivoter-6799);
 80043b4:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80043b8:	f5a3 53d4 	sub.w	r3, r3, #6784	@ 0x1a80
 80043bc:	3b0f      	subs	r3, #15
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	02d2      	lsls	r2, r2, #11
 80043c4:	1ad2      	subs	r2, r2, r3
 80043c6:	0092      	lsls	r2, r2, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	00d2      	lsls	r2, r2, #3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
 80043d4:	e014      	b.n	8004400 <TaskChassis+0x1060>
		} else {
			HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
 80043d6:	2201      	movs	r2, #1
 80043d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043dc:	4856      	ldr	r0, [pc, #344]	@ (8004538 <TaskChassis+0x1198>)
 80043de:	f003 f86f 	bl	80074c0 <HAL_GPIO_WritePin>
			rotationCompStab = -25*(pivoter-2691);
 80043e2:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80043e6:	f6a3 2383 	subw	r3, r3, #2691	@ 0xa83
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	02d2      	lsls	r2, r2, #11
 80043f0:	1ad2      	subs	r2, r2, r3
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	00d2      	lsls	r2, r2, #3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
		for (int i = 0; i < average; i++) {
			fullAve += averageY[i];
		}
		fullAve = fullAve*0.2f;
		*/
		int16_t DiffOfTurret = rcVal2-pivoter;
 8004400:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8004404:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		// usart_printf("$%d %d\r\n;", convert[2], fullAve);
		if (pivoter < 2300) {
 8004410:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8004414:	f640 02fb 	movw	r2, #2299	@ 0x8fb
 8004418:	4293      	cmp	r3, r2
 800441a:	d811      	bhi.n	8004440 <TaskChassis+0x10a0>
			setGM6020voltageRPM(7, 5, DONUTMOTOR);
 800441c:	4b3e      	ldr	r3, [pc, #248]	@ (8004518 <TaskChassis+0x1178>)
 800441e:	edd3 6a00 	vldr	s13, [r3]
 8004422:	ed93 7a01 	vldr	s14, [r3, #4]
 8004426:	edd3 7a02 	vldr	s15, [r3, #8]
 800442a:	eeb0 0a66 	vmov.f32	s0, s13
 800442e:	eef0 0a47 	vmov.f32	s1, s14
 8004432:	eeb0 1a67 	vmov.f32	s2, s15
 8004436:	2105      	movs	r1, #5
 8004438:	2007      	movs	r0, #7
 800443a:	f7fd fc4d 	bl	8001cd8 <setGM6020voltageRPM>
 800443e:	e05b      	b.n	80044f8 <TaskChassis+0x1158>
		} else if (pivoter > 6900) {
 8004440:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8004444:	f641 22f4 	movw	r2, #6900	@ 0x1af4
 8004448:	4293      	cmp	r3, r2
 800444a:	d912      	bls.n	8004472 <TaskChassis+0x10d2>
			setGM6020voltageRPM(7, -5, DONUTMOTOR);
 800444c:	4b32      	ldr	r3, [pc, #200]	@ (8004518 <TaskChassis+0x1178>)
 800444e:	edd3 6a00 	vldr	s13, [r3]
 8004452:	ed93 7a01 	vldr	s14, [r3, #4]
 8004456:	edd3 7a02 	vldr	s15, [r3, #8]
 800445a:	eeb0 0a66 	vmov.f32	s0, s13
 800445e:	eef0 0a47 	vmov.f32	s1, s14
 8004462:	eeb0 1a67 	vmov.f32	s2, s15
 8004466:	f06f 0104 	mvn.w	r1, #4
 800446a:	2007      	movs	r0, #7
 800446c:	f7fd fc34 	bl	8001cd8 <setGM6020voltageRPM>
 8004470:	e042      	b.n	80044f8 <TaskChassis+0x1158>
			sumI2 += (DiffOfTurret)*0.005;
			int16_t PositionToGo2 = kPr*(DiffOfTurret);
			int16_t IntegralToGo2 = kIr*(sumI2);
			int16_t DerivativeToGo2 = kDr*(DiffOfTurret)*200;
			*/
			if (chassisTurning == 2) {
 8004472:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 8004476:	2b02      	cmp	r3, #2
 8004478:	d117      	bne.n	80044aa <TaskChassis+0x110a>
				setGM6020voltageRPM(7, convert[2], DONUTMOTOR);
 800447a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800447e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004482:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004486:	4b24      	ldr	r3, [pc, #144]	@ (8004518 <TaskChassis+0x1178>)
 8004488:	edd3 6a00 	vldr	s13, [r3]
 800448c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004490:	edd3 7a02 	vldr	s15, [r3, #8]
 8004494:	eeb0 0a66 	vmov.f32	s0, s13
 8004498:	eef0 0a47 	vmov.f32	s1, s14
 800449c:	eeb0 1a67 	vmov.f32	s2, s15
 80044a0:	4611      	mov	r1, r2
 80044a2:	2007      	movs	r0, #7
 80044a4:	f7fd fc18 	bl	8001cd8 <setGM6020voltageRPM>
 80044a8:	e026      	b.n	80044f8 <TaskChassis+0x1158>
			} else {
				setGM6020voltageRPM(7, positionPIDByMe(&prevDiff2, &isNegativeRegion2, &previousRegion2, DiffOfTurret, &sumI2, kPr, kIr, kDr), DONUTMOTOR);
 80044aa:	f9b7 4062 	ldrsh.w	r4, [r7, #98]	@ 0x62
 80044ae:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80044b2:	f107 0152 	add.w	r1, r7, #82	@ 0x52
 80044b6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80044ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	ed97 1a19 	vldr	s2, [r7, #100]	@ 0x64
 80044c4:	edd7 0a1a 	vldr	s1, [r7, #104]	@ 0x68
 80044c8:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 80044cc:	4623      	mov	r3, r4
 80044ce:	f7fe feb3 	bl	8003238 <positionPIDByMe>
 80044d2:	4603      	mov	r3, r0
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <TaskChassis+0x1178>)
 80044d8:	edd3 6a00 	vldr	s13, [r3]
 80044dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80044e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80044e4:	eeb0 0a66 	vmov.f32	s0, s13
 80044e8:	eef0 0a47 	vmov.f32	s1, s14
 80044ec:	eeb0 1a67 	vmov.f32	s2, s15
 80044f0:	4611      	mov	r1, r2
 80044f2:	2007      	movs	r0, #7
 80044f4:	f7fd fbf0 	bl	8001cd8 <setGM6020voltageRPM>
		//sprintf((char*)txbuf, "%f \r\n", power_heat_data.chassis_power);
		//HAL_UART_Transmit(&huart1, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
		//txbuf = *((float*)&power_heat_data.chassis_power);
		//usart_printf("%f %d\r\n", calcChassisPower, 30);

		osDelay(5);
 80044f8:	2005      	movs	r0, #5
 80044fa:	f007 f8c3 	bl	800b684 <osDelay>
	for(;;) {
 80044fe:	f7ff b81c 	b.w	800353a <TaskChassis+0x19a>
 8004502:	bf00      	nop
 8004504:	f3af 8000 	nop.w
 8004508:	872b020c 	.word	0x872b020c
 800450c:	40231916 	.word	0x40231916
 8004510:	d2f1a9fc 	.word	0xd2f1a9fc
 8004514:	bf80624d 	.word	0xbf80624d
 8004518:	2000004c 	.word	0x2000004c
 800451c:	397f413e 	.word	0x397f413e
 8004520:	40490fdb 	.word	0x40490fdb
 8004524:	3da3d70a 	.word	0x3da3d70a
 8004528:	3c1374bc 	.word	0x3c1374bc
 800452c:	c06cc000 	.word	0xc06cc000
 8004530:	40547ae1 	.word	0x40547ae1
 8004534:	45949800 	.word	0x45949800
 8004538:	40021c00 	.word	0x40021c00

0800453c <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004544:	2001      	movs	r0, #1
 8004546:	f007 f89d 	bl	800b684 <osDelay>
 800454a:	e7fb      	b.n	8004544 <TaskTurret+0x8>

0800454c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004550:	b672      	cpsid	i
}
 8004552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <Error_Handler+0x8>

08004558 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6178      	str	r0, [r7, #20]
 8004560:	460b      	mov	r3, r1
 8004562:	60fa      	str	r2, [r7, #12]
 8004564:	ed87 0a02 	vstr	s0, [r7, #8]
 8004568:	edc7 0a01 	vstr	s1, [r7, #4]
 800456c:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d042      	beq.n	80045fa <PID_init+0xa2>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d03f      	beq.n	80045fa <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	7cfa      	ldrb	r2, [r7, #19]
 800457e:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3304      	adds	r3, #4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3308      	adds	r3, #8
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	621a      	str	r2, [r3, #32]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	625a      	str	r2, [r3, #36]	@ 0x24
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80045f8:	e000      	b.n	80045fc <PID_init+0xa4>
        return;
 80045fa:	bf00      	nop
}
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004612:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <PID_calc+0x1c>
    {
        return 0.0f;
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e130      	b.n	8004884 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800463e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004642:	edd7 7a02 	vldr	s15, [r7, #8]
 8004646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 8095 	bne.w	8004784 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	edd3 6a02 	vldr	s13, [r3, #8]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80046ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80046d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e0:	dd04      	ble.n	80046ec <PID_calc+0xe6>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80046ea:	e014      	b.n	8004716 <PID_calc+0x110>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80046f8:	eef1 7a67 	vneg.f32	s15, s15
 80046fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004704:	d507      	bpl.n	8004716 <PID_calc+0x110>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	edd3 7a05 	vldr	s15, [r3, #20]
 800470c:	eef1 7a67 	vneg.f32	s15, s15
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800472c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	ed93 7a08 	vldr	s14, [r3, #32]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	dd04      	ble.n	8004756 <PID_calc+0x150>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	621a      	str	r2, [r3, #32]
 8004754:	e094      	b.n	8004880 <PID_calc+0x27a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	ed93 7a08 	vldr	s14, [r3, #32]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004762:	eef1 7a67 	vneg.f32	s15, s15
 8004766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476e:	f140 8087 	bpl.w	8004880 <PID_calc+0x27a>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	edd3 7a04 	vldr	s15, [r3, #16]
 8004778:	eef1 7a67 	vneg.f32	s15, s15
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	edc3 7a08 	vstr	s15, [r3, #32]
 8004782:	e07d      	b.n	8004880 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d179      	bne.n	8004880 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800479e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80047b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80047de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80047ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800481e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	ed93 7a08 	vldr	s14, [r3, #32]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	dd04      	ble.n	8004856 <PID_calc+0x250>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	621a      	str	r2, [r3, #32]
 8004854:	e014      	b.n	8004880 <PID_calc+0x27a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	ed93 7a08 	vldr	s14, [r3, #32]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004862:	eef1 7a67 	vneg.f32	s15, s15
 8004866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800486a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486e:	d507      	bpl.n	8004880 <PID_calc+0x27a>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	edd3 7a04 	vldr	s15, [r3, #16]
 8004876:	eef1 7a67 	vneg.f32	s15, s15
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
}
 8004884:	ee07 3a90 	vmov	s15, r3
 8004888:	eeb0 0a67 	vmov.f32	s0, s15
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 800489c:	2224      	movs	r2, #36	@ 0x24
 800489e:	4903      	ldr	r1, [pc, #12]	@ (80048ac <remote_control_init+0x14>)
 80048a0:	4803      	ldr	r0, [pc, #12]	@ (80048b0 <remote_control_init+0x18>)
 80048a2:	f7fd fcab 	bl	80021fc <RC_init>
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000b98 	.word	0x20000b98
 80048b0:	20000b74 	.word	0x20000b74

080048b4 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80048b8:	4b02      	ldr	r3, [pc, #8]	@ (80048c4 <get_remote_control_point+0x10>)
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20000b5c 	.word	0x20000b5c

080048c8 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 80048ce:	4b44      	ldr	r3, [pc, #272]	@ (80049e0 <USART3_IRQHandler+0x118>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00b      	beq.n	80048f4 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80048dc:	2300      	movs	r3, #0
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	4b3f      	ldr	r3, [pc, #252]	@ (80049e0 <USART3_IRQHandler+0x118>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	4b3d      	ldr	r3, [pc, #244]	@ (80049e0 <USART3_IRQHandler+0x118>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 80048f2:	e070      	b.n	80049d6 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 80048f4:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <USART3_IRQHandler+0x11c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d06a      	beq.n	80049d6 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8004900:	2300      	movs	r3, #0
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4b36      	ldr	r3, [pc, #216]	@ (80049e0 <USART3_IRQHandler+0x118>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4b34      	ldr	r3, [pc, #208]	@ (80049e0 <USART3_IRQHandler+0x118>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8004916:	4b34      	ldr	r3, [pc, #208]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d12d      	bne.n	8004980 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8004924:	4b30      	ldr	r3, [pc, #192]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b2f      	ldr	r3, [pc, #188]	@ (80049e8 <USART3_IRQHandler+0x120>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8004934:	4b2c      	ldr	r3, [pc, #176]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8004940:	b29a      	uxth	r2, r3
 8004942:	4b2a      	ldr	r3, [pc, #168]	@ (80049ec <USART3_IRQHandler+0x124>)
 8004944:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8004946:	4b28      	ldr	r3, [pc, #160]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2224      	movs	r2, #36	@ 0x24
 800494c:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800494e:	4b26      	ldr	r3, [pc, #152]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b24      	ldr	r3, [pc, #144]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800495c:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800495e:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 800496e:	4b1f      	ldr	r3, [pc, #124]	@ (80049ec <USART3_IRQHandler+0x124>)
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	2b12      	cmp	r3, #18
 8004974:	d12f      	bne.n	80049d6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8004976:	491e      	ldr	r1, [pc, #120]	@ (80049f0 <USART3_IRQHandler+0x128>)
 8004978:	481e      	ldr	r0, [pc, #120]	@ (80049f4 <USART3_IRQHandler+0x12c>)
 800497a:	f000 f841 	bl	8004a00 <sbus_to_rc>
}
 800497e:	e02a      	b.n	80049d6 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b18      	ldr	r3, [pc, #96]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8004990:	4b15      	ldr	r3, [pc, #84]	@ (80049e8 <USART3_IRQHandler+0x120>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800499c:	b29a      	uxth	r2, r3
 800499e:	4b13      	ldr	r3, [pc, #76]	@ (80049ec <USART3_IRQHandler+0x124>)
 80049a0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80049a2:	4b11      	ldr	r3, [pc, #68]	@ (80049e8 <USART3_IRQHandler+0x120>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2224      	movs	r2, #36	@ 0x24
 80049a8:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80049aa:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <USART3_IRQHandler+0x130>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a12      	ldr	r2, [pc, #72]	@ (80049f8 <USART3_IRQHandler+0x130>)
 80049b0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80049b4:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80049b6:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <USART3_IRQHandler+0x120>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <USART3_IRQHandler+0x120>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80049c6:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <USART3_IRQHandler+0x124>)
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	2b12      	cmp	r3, #18
 80049cc:	d103      	bne.n	80049d6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80049ce:	4908      	ldr	r1, [pc, #32]	@ (80049f0 <USART3_IRQHandler+0x128>)
 80049d0:	480a      	ldr	r0, [pc, #40]	@ (80049fc <USART3_IRQHandler+0x134>)
 80049d2:	f000 f815 	bl	8004a00 <sbus_to_rc>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	200008d0 	.word	0x200008d0
 80049e4:	40004800 	.word	0x40004800
 80049e8:	20000a18 	.word	0x20000a18
 80049ec:	20000bbc 	.word	0x20000bbc
 80049f0:	20000b5c 	.word	0x20000b5c
 80049f4:	20000b74 	.word	0x20000b74
 80049f8:	40026028 	.word	0x40026028
 80049fc:	20000b98 	.word	0x20000b98

08004a00 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8101 	beq.w	8004c14 <sbus_to_rc+0x214>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80fd 	beq.w	8004c14 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	b21a      	sxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3301      	adds	r3, #1
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	b21b      	sxth	r3, r3
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	b21b      	sxth	r3, r3
 8004a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a36:	b21a      	sxth	r2, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	08db      	lsrs	r3, r3, #3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	b21a      	sxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	015b      	lsls	r3, r3, #5
 8004a54:	b21b      	sxth	r3, r3
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a5e:	b21a      	sxth	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3302      	adds	r3, #2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	099b      	lsrs	r3, r3, #6
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	b21a      	sxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3303      	adds	r3, #3
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	b21b      	sxth	r3, r3
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8004a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a96:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	b21a      	sxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3305      	adds	r3, #5
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	01db      	lsls	r3, r3, #7
 8004ab4:	b21b      	sxth	r3, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004abe:	b21a      	sxth	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3305      	adds	r3, #5
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3305      	adds	r3, #5
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	109b      	asrs	r3, r3, #2
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3306      	adds	r3, #6
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	b21a      	sxth	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3307      	adds	r3, #7
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	b21b      	sxth	r3, r3
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	b21a      	sxth	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3308      	adds	r3, #8
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	b21a      	sxth	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3309      	adds	r3, #9
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b21a      	sxth	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	330a      	adds	r3, #10
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	b21a      	sxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	330b      	adds	r3, #11
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	b21b      	sxth	r3, r3
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b21a      	sxth	r2, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	330c      	adds	r3, #12
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	330d      	adds	r3, #13
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	330e      	adds	r3, #14
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	b21a      	sxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	330f      	adds	r3, #15
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	b21b      	sxth	r3, r3
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3310      	adds	r3, #16
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	b21a      	sxth	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3311      	adds	r3, #17
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	b21b      	sxth	r3, r3
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004baa:	b21b      	sxth	r3, r3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	b21a      	sxth	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bc0:	b21b      	sxth	r3, r3
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	b21a      	sxth	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bd6:	b21b      	sxth	r3, r3
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	b21a      	sxth	r2, r3
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004bec:	b21b      	sxth	r3, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	b21a      	sxth	r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c02:	b21b      	sxth	r3, r3
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	b21a      	sxth	r2, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	811a      	strh	r2, [r3, #8]
 8004c12:	e000      	b.n	8004c16 <sbus_to_rc+0x216>
        return;
 8004c14:	bf00      	nop
}
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8004c2a:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <getRCchannel+0x24>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004c32:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004c36:	b21b      	sxth	r3, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	2000005c 	.word	0x2000005c

08004c48 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <getRCswitch+0x24>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	7a9b      	ldrb	r3, [r3, #10]
 8004c5e:	b25b      	sxtb	r3, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	2000005c 	.word	0x2000005c

08004c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	4b12      	ldr	r3, [pc, #72]	@ (8004cc4 <HAL_MspInit+0x54>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	4a11      	ldr	r2, [pc, #68]	@ (8004cc4 <HAL_MspInit+0x54>)
 8004c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c86:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <HAL_MspInit+0x54>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <HAL_MspInit+0x54>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <HAL_MspInit+0x54>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca2:	4b08      	ldr	r3, [pc, #32]	@ (8004cc4 <HAL_MspInit+0x54>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	210f      	movs	r1, #15
 8004cb2:	f06f 0001 	mvn.w	r0, #1
 8004cb6:	f001 fe2e 	bl	8006916 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800

08004cc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	@ 0x30
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd0:	f107 031c 	add.w	r3, r7, #28
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8004e10 <HAL_CAN_MspInit+0x148>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d13d      	bne.n	8004d66 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004cea:	4b4a      	ldr	r3, [pc, #296]	@ (8004e14 <HAL_CAN_MspInit+0x14c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	4a48      	ldr	r2, [pc, #288]	@ (8004e14 <HAL_CAN_MspInit+0x14c>)
 8004cf2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004cf4:	4b47      	ldr	r3, [pc, #284]	@ (8004e14 <HAL_CAN_MspInit+0x14c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10d      	bne.n	8004d18 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	4b45      	ldr	r3, [pc, #276]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	4a44      	ldr	r2, [pc, #272]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0c:	4b42      	ldr	r3, [pc, #264]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d20:	4a3d      	ldr	r2, [pc, #244]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d22:	f043 0308 	orr.w	r3, r3, #8
 8004d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d28:	4b3b      	ldr	r3, [pc, #236]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d34:	2303      	movs	r3, #3
 8004d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d40:	2303      	movs	r3, #3
 8004d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004d44:	2309      	movs	r3, #9
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d48:	f107 031c 	add.w	r3, r7, #28
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4833      	ldr	r0, [pc, #204]	@ (8004e1c <HAL_CAN_MspInit+0x154>)
 8004d50:	f002 fa1a 	bl	8007188 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004d54:	2200      	movs	r2, #0
 8004d56:	2105      	movs	r1, #5
 8004d58:	2014      	movs	r0, #20
 8004d5a:	f001 fddc 	bl	8006916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004d5e:	2014      	movs	r0, #20
 8004d60:	f001 fdf5 	bl	800694e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004d64:	e04f      	b.n	8004e06 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e20 <HAL_CAN_MspInit+0x158>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d14a      	bne.n	8004e06 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	4b28      	ldr	r3, [pc, #160]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	4a27      	ldr	r2, [pc, #156]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d80:	4b25      	ldr	r3, [pc, #148]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004d8c:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <HAL_CAN_MspInit+0x14c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	4a20      	ldr	r2, [pc, #128]	@ (8004e14 <HAL_CAN_MspInit+0x14c>)
 8004d94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004d96:	4b1f      	ldr	r3, [pc, #124]	@ (8004e14 <HAL_CAN_MspInit+0x14c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d10d      	bne.n	8004dba <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004da8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dae:	4b1a      	ldr	r3, [pc, #104]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	4b16      	ldr	r3, [pc, #88]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	4a15      	ldr	r2, [pc, #84]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004dc4:	f043 0302 	orr.w	r3, r3, #2
 8004dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dca:	4b13      	ldr	r3, [pc, #76]	@ (8004e18 <HAL_CAN_MspInit+0x150>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004dd6:	2360      	movs	r3, #96	@ 0x60
 8004dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de2:	2303      	movs	r3, #3
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004de6:	2309      	movs	r3, #9
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dea:	f107 031c 	add.w	r3, r7, #28
 8004dee:	4619      	mov	r1, r3
 8004df0:	480c      	ldr	r0, [pc, #48]	@ (8004e24 <HAL_CAN_MspInit+0x15c>)
 8004df2:	f002 f9c9 	bl	8007188 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004df6:	2200      	movs	r2, #0
 8004df8:	2105      	movs	r1, #5
 8004dfa:	2040      	movs	r0, #64	@ 0x40
 8004dfc:	f001 fd8b 	bl	8006916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004e00:	2040      	movs	r0, #64	@ 0x40
 8004e02:	f001 fda4 	bl	800694e <HAL_NVIC_EnableIRQ>
}
 8004e06:	bf00      	nop
 8004e08:	3730      	adds	r7, #48	@ 0x30
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40006400 	.word	0x40006400
 8004e14:	20000bc0 	.word	0x20000bc0
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40020c00 	.word	0x40020c00
 8004e20:	40006800 	.word	0x40006800
 8004e24:	40020400 	.word	0x40020400

08004e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	@ 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a29      	ldr	r2, [pc, #164]	@ (8004eec <HAL_I2C_MspInit+0xc4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d14b      	bne.n	8004ee2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	4b28      	ldr	r3, [pc, #160]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	4a27      	ldr	r2, [pc, #156]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004e54:	f043 0304 	orr.w	r3, r3, #4
 8004e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e5a:	4b25      	ldr	r3, [pc, #148]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	4b21      	ldr	r3, [pc, #132]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6e:	4a20      	ldr	r2, [pc, #128]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e76:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e88:	2312      	movs	r3, #18
 8004e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e90:	2303      	movs	r3, #3
 8004e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e94:	2304      	movs	r3, #4
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4815      	ldr	r0, [pc, #84]	@ (8004ef4 <HAL_I2C_MspInit+0xcc>)
 8004ea0:	f002 f972 	bl	8007188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eaa:	2312      	movs	r3, #18
 8004eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eba:	f107 0314 	add.w	r3, r7, #20
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	480d      	ldr	r0, [pc, #52]	@ (8004ef8 <HAL_I2C_MspInit+0xd0>)
 8004ec2:	f002 f961 	bl	8007188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	4a08      	ldr	r2, [pc, #32]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004ed0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ed6:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <HAL_I2C_MspInit+0xc8>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004ee2:	bf00      	nop
 8004ee4:	3728      	adds	r7, #40	@ 0x28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40005c00 	.word	0x40005c00
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	40020800 	.word	0x40020800
 8004ef8:	40020000 	.word	0x40020000

08004efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	@ 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 0314 	add.w	r3, r7, #20
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a28      	ldr	r2, [pc, #160]	@ (8004fbc <HAL_SPI_MspInit+0xc0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d149      	bne.n	8004fb2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	4b27      	ldr	r3, [pc, #156]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	4a26      	ldr	r2, [pc, #152]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f2e:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	4b20      	ldr	r3, [pc, #128]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f42:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f44:	f043 0302 	orr.w	r3, r3, #2
 8004f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	4b19      	ldr	r3, [pc, #100]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5e:	4a18      	ldr	r2, [pc, #96]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f66:	4b16      	ldr	r3, [pc, #88]	@ (8004fc0 <HAL_SPI_MspInit+0xc4>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8004f72:	2318      	movs	r3, #24
 8004f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f76:	2302      	movs	r3, #2
 8004f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f82:	2305      	movs	r3, #5
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	480d      	ldr	r0, [pc, #52]	@ (8004fc4 <HAL_SPI_MspInit+0xc8>)
 8004f8e:	f002 f8fb 	bl	8007188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f92:	2380      	movs	r3, #128	@ 0x80
 8004f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f96:	2302      	movs	r3, #2
 8004f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	4619      	mov	r1, r3
 8004fac:	4806      	ldr	r0, [pc, #24]	@ (8004fc8 <HAL_SPI_MspInit+0xcc>)
 8004fae:	f002 f8eb 	bl	8007188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004fb2:	bf00      	nop
 8004fb4:	3728      	adds	r7, #40	@ 0x28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40013000 	.word	0x40013000
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40020400 	.word	0x40020400
 8004fc8:	40020000 	.word	0x40020000

08004fcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	@ (8005030 <HAL_TIM_PWM_MspInit+0x64>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10e      	bne.n	8004ffc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <HAL_TIM_PWM_MspInit+0x68>)
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	4a13      	ldr	r2, [pc, #76]	@ (8005034 <HAL_TIM_PWM_MspInit+0x68>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fee:	4b11      	ldr	r3, [pc, #68]	@ (8005034 <HAL_TIM_PWM_MspInit+0x68>)
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004ffa:	e012      	b.n	8005022 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0d      	ldr	r2, [pc, #52]	@ (8005038 <HAL_TIM_PWM_MspInit+0x6c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d10d      	bne.n	8005022 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	4b0a      	ldr	r3, [pc, #40]	@ (8005034 <HAL_TIM_PWM_MspInit+0x68>)
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	4a09      	ldr	r2, [pc, #36]	@ (8005034 <HAL_TIM_PWM_MspInit+0x68>)
 8005010:	f043 0302 	orr.w	r3, r3, #2
 8005014:	6453      	str	r3, [r2, #68]	@ 0x44
 8005016:	4b07      	ldr	r3, [pc, #28]	@ (8005034 <HAL_TIM_PWM_MspInit+0x68>)
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]
}
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	40023800 	.word	0x40023800
 8005038:	40010400 	.word	0x40010400

0800503c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a15      	ldr	r2, [pc, #84]	@ (80050a0 <HAL_TIM_Base_MspInit+0x64>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10e      	bne.n	800506c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	4b14      	ldr	r3, [pc, #80]	@ (80050a4 <HAL_TIM_Base_MspInit+0x68>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	4a13      	ldr	r2, [pc, #76]	@ (80050a4 <HAL_TIM_Base_MspInit+0x68>)
 8005058:	f043 0304 	orr.w	r3, r3, #4
 800505c:	6413      	str	r3, [r2, #64]	@ 0x40
 800505e:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <HAL_TIM_Base_MspInit+0x68>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800506a:	e012      	b.n	8005092 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0d      	ldr	r2, [pc, #52]	@ (80050a8 <HAL_TIM_Base_MspInit+0x6c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d10d      	bne.n	8005092 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <HAL_TIM_Base_MspInit+0x68>)
 800507c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507e:	4a09      	ldr	r2, [pc, #36]	@ (80050a4 <HAL_TIM_Base_MspInit+0x68>)
 8005080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005084:	6453      	str	r3, [r2, #68]	@ 0x44
 8005086:	4b07      	ldr	r3, [pc, #28]	@ (80050a4 <HAL_TIM_Base_MspInit+0x68>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40014400 	.word	0x40014400

080050ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	@ 0x30
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b4:	f107 031c 	add.w	r3, r7, #28
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	609a      	str	r2, [r3, #8]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a58      	ldr	r2, [pc, #352]	@ (800522c <HAL_TIM_MspPostInit+0x180>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d11f      	bne.n	800510e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	4b57      	ldr	r3, [pc, #348]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	4a56      	ldr	r2, [pc, #344]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 80050d8:	f043 0310 	orr.w	r3, r3, #16
 80050dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050de:	4b54      	ldr	r3, [pc, #336]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	69bb      	ldr	r3, [r7, #24]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80050ea:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80050ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f0:	2302      	movs	r3, #2
 80050f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050fc:	2301      	movs	r3, #1
 80050fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005100:	f107 031c 	add.w	r3, r7, #28
 8005104:	4619      	mov	r1, r3
 8005106:	484b      	ldr	r0, [pc, #300]	@ (8005234 <HAL_TIM_MspPostInit+0x188>)
 8005108:	f002 f83e 	bl	8007188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800510c:	e089      	b.n	8005222 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a49      	ldr	r2, [pc, #292]	@ (8005238 <HAL_TIM_MspPostInit+0x18c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d11f      	bne.n	8005158 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	4b44      	ldr	r3, [pc, #272]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 800511e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005120:	4a43      	ldr	r2, [pc, #268]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 8005122:	f043 0308 	orr.w	r3, r3, #8
 8005126:	6313      	str	r3, [r2, #48]	@ 0x30
 8005128:	4b41      	ldr	r3, [pc, #260]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 800512a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005134:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513a:	2302      	movs	r3, #2
 800513c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005142:	2300      	movs	r3, #0
 8005144:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005146:	2302      	movs	r3, #2
 8005148:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800514a:	f107 031c 	add.w	r3, r7, #28
 800514e:	4619      	mov	r1, r3
 8005150:	483a      	ldr	r0, [pc, #232]	@ (800523c <HAL_TIM_MspPostInit+0x190>)
 8005152:	f002 f819 	bl	8007188 <HAL_GPIO_Init>
}
 8005156:	e064      	b.n	8005222 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM8)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a38      	ldr	r2, [pc, #224]	@ (8005240 <HAL_TIM_MspPostInit+0x194>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d13c      	bne.n	80051dc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	4b32      	ldr	r3, [pc, #200]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	4a31      	ldr	r2, [pc, #196]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 800516c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005170:	6313      	str	r3, [r2, #48]	@ 0x30
 8005172:	4b2f      	ldr	r3, [pc, #188]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 8005174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	4a2a      	ldr	r2, [pc, #168]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6313      	str	r3, [r2, #48]	@ 0x30
 800518e:	4b28      	ldr	r3, [pc, #160]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800519a:	23c0      	movs	r3, #192	@ 0xc0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	2302      	movs	r3, #2
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a6:	2300      	movs	r3, #0
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80051aa:	2303      	movs	r3, #3
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80051ae:	f107 031c 	add.w	r3, r7, #28
 80051b2:	4619      	mov	r1, r3
 80051b4:	4823      	ldr	r0, [pc, #140]	@ (8005244 <HAL_TIM_MspPostInit+0x198>)
 80051b6:	f001 ffe7 	bl	8007188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80051ba:	2340      	movs	r3, #64	@ 0x40
 80051bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051be:	2302      	movs	r3, #2
 80051c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c6:	2300      	movs	r3, #0
 80051c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80051ca:	2303      	movs	r3, #3
 80051cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ce:	f107 031c 	add.w	r3, r7, #28
 80051d2:	4619      	mov	r1, r3
 80051d4:	481c      	ldr	r0, [pc, #112]	@ (8005248 <HAL_TIM_MspPostInit+0x19c>)
 80051d6:	f001 ffd7 	bl	8007188 <HAL_GPIO_Init>
}
 80051da:	e022      	b.n	8005222 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1a      	ldr	r2, [pc, #104]	@ (800524c <HAL_TIM_MspPostInit+0x1a0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d11d      	bne.n	8005222 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	4a10      	ldr	r2, [pc, #64]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 80051f0:	f043 0320 	orr.w	r3, r3, #32
 80051f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80051f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005230 <HAL_TIM_MspPostInit+0x184>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	60bb      	str	r3, [r7, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005202:	2340      	movs	r3, #64	@ 0x40
 8005204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005206:	2302      	movs	r3, #2
 8005208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800520a:	2301      	movs	r3, #1
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800520e:	2302      	movs	r3, #2
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005212:	2303      	movs	r3, #3
 8005214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005216:	f107 031c 	add.w	r3, r7, #28
 800521a:	4619      	mov	r1, r3
 800521c:	480c      	ldr	r0, [pc, #48]	@ (8005250 <HAL_TIM_MspPostInit+0x1a4>)
 800521e:	f001 ffb3 	bl	8007188 <HAL_GPIO_Init>
}
 8005222:	bf00      	nop
 8005224:	3730      	adds	r7, #48	@ 0x30
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000
 8005230:	40023800 	.word	0x40023800
 8005234:	40021000 	.word	0x40021000
 8005238:	40000800 	.word	0x40000800
 800523c:	40020c00 	.word	0x40020c00
 8005240:	40010400 	.word	0x40010400
 8005244:	40022000 	.word	0x40022000
 8005248:	40020800 	.word	0x40020800
 800524c:	40014400 	.word	0x40014400
 8005250:	40021400 	.word	0x40021400

08005254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08e      	sub	sp, #56	@ 0x38
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a90      	ldr	r2, [pc, #576]	@ (80054b4 <HAL_UART_MspInit+0x260>)
 8005272:	4293      	cmp	r3, r2
 8005274:	f040 80b2 	bne.w	80053dc <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005278:	2300      	movs	r3, #0
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	4b8e      	ldr	r3, [pc, #568]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 800527e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005280:	4a8d      	ldr	r2, [pc, #564]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 8005282:	f043 0310 	orr.w	r3, r3, #16
 8005286:	6453      	str	r3, [r2, #68]	@ 0x44
 8005288:	4b8b      	ldr	r3, [pc, #556]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 800528a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	4b87      	ldr	r3, [pc, #540]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 800529a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529c:	4a86      	ldr	r2, [pc, #536]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 800529e:	f043 0302 	orr.w	r3, r3, #2
 80052a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80052a4:	4b84      	ldr	r3, [pc, #528]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	4b80      	ldr	r3, [pc, #512]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b8:	4a7f      	ldr	r2, [pc, #508]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6313      	str	r3, [r2, #48]	@ 0x30
 80052c0:	4b7d      	ldr	r3, [pc, #500]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d0:	2302      	movs	r3, #2
 80052d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d8:	2303      	movs	r3, #3
 80052da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052dc:	2307      	movs	r3, #7
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052e4:	4619      	mov	r1, r3
 80052e6:	4875      	ldr	r0, [pc, #468]	@ (80054bc <HAL_UART_MspInit+0x268>)
 80052e8:	f001 ff4e 	bl	8007188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f2:	2302      	movs	r3, #2
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fa:	2303      	movs	r3, #3
 80052fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052fe:	2307      	movs	r3, #7
 8005300:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005306:	4619      	mov	r1, r3
 8005308:	486d      	ldr	r0, [pc, #436]	@ (80054c0 <HAL_UART_MspInit+0x26c>)
 800530a:	f001 ff3d 	bl	8007188 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800530e:	4b6d      	ldr	r3, [pc, #436]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005310:	4a6d      	ldr	r2, [pc, #436]	@ (80054c8 <HAL_UART_MspInit+0x274>)
 8005312:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005314:	4b6b      	ldr	r3, [pc, #428]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005316:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800531a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800531c:	4b69      	ldr	r3, [pc, #420]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 800531e:	2240      	movs	r2, #64	@ 0x40
 8005320:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005322:	4b68      	ldr	r3, [pc, #416]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005324:	2200      	movs	r2, #0
 8005326:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005328:	4b66      	ldr	r3, [pc, #408]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 800532a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800532e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005330:	4b64      	ldr	r3, [pc, #400]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005332:	2200      	movs	r2, #0
 8005334:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005336:	4b63      	ldr	r3, [pc, #396]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005338:	2200      	movs	r2, #0
 800533a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800533c:	4b61      	ldr	r3, [pc, #388]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 800533e:	2200      	movs	r2, #0
 8005340:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005342:	4b60      	ldr	r3, [pc, #384]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005344:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005348:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800534a:	4b5e      	ldr	r3, [pc, #376]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 800534c:	2200      	movs	r2, #0
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005350:	485c      	ldr	r0, [pc, #368]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005352:	f001 fb17 	bl	8006984 <HAL_DMA_Init>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800535c:	f7ff f8f6 	bl	800454c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a58      	ldr	r2, [pc, #352]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005364:	635a      	str	r2, [r3, #52]	@ 0x34
 8005366:	4a57      	ldr	r2, [pc, #348]	@ (80054c4 <HAL_UART_MspInit+0x270>)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800536c:	4b57      	ldr	r3, [pc, #348]	@ (80054cc <HAL_UART_MspInit+0x278>)
 800536e:	4a58      	ldr	r2, [pc, #352]	@ (80054d0 <HAL_UART_MspInit+0x27c>)
 8005370:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005372:	4b56      	ldr	r3, [pc, #344]	@ (80054cc <HAL_UART_MspInit+0x278>)
 8005374:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005378:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800537a:	4b54      	ldr	r3, [pc, #336]	@ (80054cc <HAL_UART_MspInit+0x278>)
 800537c:	2200      	movs	r2, #0
 800537e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005380:	4b52      	ldr	r3, [pc, #328]	@ (80054cc <HAL_UART_MspInit+0x278>)
 8005382:	2200      	movs	r2, #0
 8005384:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005386:	4b51      	ldr	r3, [pc, #324]	@ (80054cc <HAL_UART_MspInit+0x278>)
 8005388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800538c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800538e:	4b4f      	ldr	r3, [pc, #316]	@ (80054cc <HAL_UART_MspInit+0x278>)
 8005390:	2200      	movs	r2, #0
 8005392:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005394:	4b4d      	ldr	r3, [pc, #308]	@ (80054cc <HAL_UART_MspInit+0x278>)
 8005396:	2200      	movs	r2, #0
 8005398:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800539a:	4b4c      	ldr	r3, [pc, #304]	@ (80054cc <HAL_UART_MspInit+0x278>)
 800539c:	2200      	movs	r2, #0
 800539e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80053a0:	4b4a      	ldr	r3, [pc, #296]	@ (80054cc <HAL_UART_MspInit+0x278>)
 80053a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80053a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053a8:	4b48      	ldr	r3, [pc, #288]	@ (80054cc <HAL_UART_MspInit+0x278>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80053ae:	4847      	ldr	r0, [pc, #284]	@ (80054cc <HAL_UART_MspInit+0x278>)
 80053b0:	f001 fae8 	bl	8006984 <HAL_DMA_Init>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80053ba:	f7ff f8c7 	bl	800454c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a42      	ldr	r2, [pc, #264]	@ (80054cc <HAL_UART_MspInit+0x278>)
 80053c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80053c4:	4a41      	ldr	r2, [pc, #260]	@ (80054cc <HAL_UART_MspInit+0x278>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2105      	movs	r1, #5
 80053ce:	2025      	movs	r0, #37	@ 0x25
 80053d0:	f001 faa1 	bl	8006916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053d4:	2025      	movs	r0, #37	@ 0x25
 80053d6:	f001 faba 	bl	800694e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80053da:	e11c      	b.n	8005616 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a3c      	ldr	r2, [pc, #240]	@ (80054d4 <HAL_UART_MspInit+0x280>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d17e      	bne.n	80054e4 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	4b33      	ldr	r3, [pc, #204]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	4a32      	ldr	r2, [pc, #200]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 80053f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80053f6:	4b30      	ldr	r3, [pc, #192]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	4b2c      	ldr	r3, [pc, #176]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540a:	4a2b      	ldr	r2, [pc, #172]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	6313      	str	r3, [r2, #48]	@ 0x30
 8005412:	4b29      	ldr	r3, [pc, #164]	@ (80054b8 <HAL_UART_MspInit+0x264>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800541e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005424:	2302      	movs	r3, #2
 8005426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005428:	2300      	movs	r3, #0
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800542c:	2303      	movs	r3, #3
 800542e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005430:	2307      	movs	r3, #7
 8005432:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005438:	4619      	mov	r1, r3
 800543a:	4827      	ldr	r0, [pc, #156]	@ (80054d8 <HAL_UART_MspInit+0x284>)
 800543c:	f001 fea4 	bl	8007188 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005440:	4b26      	ldr	r3, [pc, #152]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005442:	4a27      	ldr	r2, [pc, #156]	@ (80054e0 <HAL_UART_MspInit+0x28c>)
 8005444:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005446:	4b25      	ldr	r3, [pc, #148]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005448:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800544c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800544e:	4b23      	ldr	r3, [pc, #140]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005454:	4b21      	ldr	r3, [pc, #132]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005456:	2200      	movs	r2, #0
 8005458:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800545a:	4b20      	ldr	r3, [pc, #128]	@ (80054dc <HAL_UART_MspInit+0x288>)
 800545c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005460:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005462:	4b1e      	ldr	r3, [pc, #120]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005464:	2200      	movs	r2, #0
 8005466:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005468:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <HAL_UART_MspInit+0x288>)
 800546a:	2200      	movs	r2, #0
 800546c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800546e:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005470:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005474:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005476:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005478:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800547c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800547e:	4b17      	ldr	r3, [pc, #92]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005480:	2200      	movs	r2, #0
 8005482:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005484:	4815      	ldr	r0, [pc, #84]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005486:	f001 fa7d 	bl	8006984 <HAL_DMA_Init>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8005490:	f7ff f85c 	bl	800454c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a11      	ldr	r2, [pc, #68]	@ (80054dc <HAL_UART_MspInit+0x288>)
 8005498:	639a      	str	r2, [r3, #56]	@ 0x38
 800549a:	4a10      	ldr	r2, [pc, #64]	@ (80054dc <HAL_UART_MspInit+0x288>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80054a0:	2200      	movs	r2, #0
 80054a2:	2105      	movs	r1, #5
 80054a4:	2027      	movs	r0, #39	@ 0x27
 80054a6:	f001 fa36 	bl	8006916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054aa:	2027      	movs	r0, #39	@ 0x27
 80054ac:	f001 fa4f 	bl	800694e <HAL_NVIC_EnableIRQ>
}
 80054b0:	e0b1      	b.n	8005616 <HAL_UART_MspInit+0x3c2>
 80054b2:	bf00      	nop
 80054b4:	40011000 	.word	0x40011000
 80054b8:	40023800 	.word	0x40023800
 80054bc:	40020400 	.word	0x40020400
 80054c0:	40020000 	.word	0x40020000
 80054c4:	20000958 	.word	0x20000958
 80054c8:	400264b8 	.word	0x400264b8
 80054cc:	200009b8 	.word	0x200009b8
 80054d0:	40026440 	.word	0x40026440
 80054d4:	40004800 	.word	0x40004800
 80054d8:	40020800 	.word	0x40020800
 80054dc:	20000a18 	.word	0x20000a18
 80054e0:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005620 <HAL_UART_MspInit+0x3cc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	f040 8093 	bne.w	8005616 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005624 <HAL_UART_MspInit+0x3d0>)
 80054f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005624 <HAL_UART_MspInit+0x3d0>)
 80054fa:	f043 0320 	orr.w	r3, r3, #32
 80054fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8005500:	4b48      	ldr	r3, [pc, #288]	@ (8005624 <HAL_UART_MspInit+0x3d0>)
 8005502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800550c:	2300      	movs	r3, #0
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	4b44      	ldr	r3, [pc, #272]	@ (8005624 <HAL_UART_MspInit+0x3d0>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	4a43      	ldr	r2, [pc, #268]	@ (8005624 <HAL_UART_MspInit+0x3d0>)
 8005516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800551a:	6313      	str	r3, [r2, #48]	@ 0x30
 800551c:	4b41      	ldr	r3, [pc, #260]	@ (8005624 <HAL_UART_MspInit+0x3d0>)
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8005528:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552e:	2302      	movs	r3, #2
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005536:	2303      	movs	r3, #3
 8005538:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800553a:	2308      	movs	r3, #8
 800553c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800553e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005542:	4619      	mov	r1, r3
 8005544:	4838      	ldr	r0, [pc, #224]	@ (8005628 <HAL_UART_MspInit+0x3d4>)
 8005546:	f001 fe1f 	bl	8007188 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800554a:	4b38      	ldr	r3, [pc, #224]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 800554c:	4a38      	ldr	r2, [pc, #224]	@ (8005630 <HAL_UART_MspInit+0x3dc>)
 800554e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005550:	4b36      	ldr	r3, [pc, #216]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 8005552:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005556:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005558:	4b34      	ldr	r3, [pc, #208]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 800555a:	2200      	movs	r2, #0
 800555c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800555e:	4b33      	ldr	r3, [pc, #204]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 8005560:	2200      	movs	r2, #0
 8005562:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005564:	4b31      	ldr	r3, [pc, #196]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 8005566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800556a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800556c:	4b2f      	ldr	r3, [pc, #188]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 800556e:	2200      	movs	r2, #0
 8005570:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005572:	4b2e      	ldr	r3, [pc, #184]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 8005574:	2200      	movs	r2, #0
 8005576:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8005578:	4b2c      	ldr	r3, [pc, #176]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 800557a:	2200      	movs	r2, #0
 800557c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800557e:	4b2b      	ldr	r3, [pc, #172]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 8005580:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005584:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005586:	4b29      	ldr	r3, [pc, #164]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 8005588:	2200      	movs	r2, #0
 800558a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800558c:	4827      	ldr	r0, [pc, #156]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 800558e:	f001 f9f9 	bl	8006984 <HAL_DMA_Init>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_UART_MspInit+0x348>
      Error_Handler();
 8005598:	f7fe ffd8 	bl	800454c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a23      	ldr	r2, [pc, #140]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 80055a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80055a2:	4a22      	ldr	r2, [pc, #136]	@ (800562c <HAL_UART_MspInit+0x3d8>)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80055a8:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055aa:	4a23      	ldr	r2, [pc, #140]	@ (8005638 <HAL_UART_MspInit+0x3e4>)
 80055ac:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80055ae:	4b21      	ldr	r3, [pc, #132]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055b0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80055b4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055b8:	2240      	movs	r2, #64	@ 0x40
 80055ba:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055be:	2200      	movs	r2, #0
 80055c0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055c8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055d0:	4b18      	ldr	r3, [pc, #96]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80055d6:	4b17      	ldr	r3, [pc, #92]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055d8:	2200      	movs	r2, #0
 80055da:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80055dc:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055de:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80055e2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055e4:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80055ea:	4812      	ldr	r0, [pc, #72]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055ec:	f001 f9ca 	bl	8006984 <HAL_DMA_Init>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 80055f6:	f7fe ffa9 	bl	800454c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 80055fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8005600:	4a0c      	ldr	r2, [pc, #48]	@ (8005634 <HAL_UART_MspInit+0x3e0>)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005606:	2200      	movs	r2, #0
 8005608:	2105      	movs	r1, #5
 800560a:	2047      	movs	r0, #71	@ 0x47
 800560c:	f001 f983 	bl	8006916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005610:	2047      	movs	r0, #71	@ 0x47
 8005612:	f001 f99c 	bl	800694e <HAL_NVIC_EnableIRQ>
}
 8005616:	bf00      	nop
 8005618:	3738      	adds	r7, #56	@ 0x38
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40011400 	.word	0x40011400
 8005624:	40023800 	.word	0x40023800
 8005628:	40021800 	.word	0x40021800
 800562c:	20000a78 	.word	0x20000a78
 8005630:	40026428 	.word	0x40026428
 8005634:	20000ad8 	.word	0x20000ad8
 8005638:	400264a0 	.word	0x400264a0

0800563c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005640:	f003 fb94 	bl	8008d6c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <NMI_Handler+0x8>

08005648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800564c:	bf00      	nop
 800564e:	e7fd      	b.n	800564c <HardFault_Handler+0x4>

08005650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <MemManage_Handler+0x4>

08005658 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <BusFault_Handler+0x4>

08005660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <UsageFault_Handler+0x4>

08005668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800567a:	f000 f9cb 	bl	8005a14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800567e:	f007 fd51 	bl	800d124 <xTaskGetSchedulerState>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d001      	beq.n	800568c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005688:	f008 fc2e 	bl	800dee8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800568c:	bf00      	nop
 800568e:	bd80      	pop	{r7, pc}

08005690 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005694:	2008      	movs	r0, #8
 8005696:	f001 ff2d 	bl	80074f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 800569a:	4802      	ldr	r0, [pc, #8]	@ (80056a4 <EXTI3_IRQHandler+0x14>)
 800569c:	f7fc ff1c 	bl	80024d8 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80056a0:	bf00      	nop
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000664 	.word	0x20000664

080056a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80056ac:	2010      	movs	r0, #16
 80056ae:	f001 ff21 	bl	80074f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80056bc:	4802      	ldr	r0, [pc, #8]	@ (80056c8 <DMA1_Stream1_IRQHandler+0x10>)
 80056be:	f001 faf9 	bl	8006cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000a18 	.word	0x20000a18

080056cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80056d0:	4802      	ldr	r0, [pc, #8]	@ (80056dc <CAN1_RX0_IRQHandler+0x10>)
 80056d2:	f000 fe16 	bl	8006302 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000670 	.word	0x20000670

080056e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056e4:	4802      	ldr	r0, [pc, #8]	@ (80056f0 <USART1_IRQHandler+0x10>)
 80056e6:	f004 fe3b 	bl	800a360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	2000088c 	.word	0x2000088c

080056f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80056f8:	4802      	ldr	r0, [pc, #8]	@ (8005704 <DMA2_Stream1_IRQHandler+0x10>)
 80056fa:	f001 fadb 	bl	8006cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000a78 	.word	0x20000a78

08005708 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800570c:	4802      	ldr	r0, [pc, #8]	@ (8005718 <DMA2_Stream2_IRQHandler+0x10>)
 800570e:	f001 fad1 	bl	8006cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005712:	bf00      	nop
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	200009b8 	.word	0x200009b8

0800571c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005720:	4802      	ldr	r0, [pc, #8]	@ (800572c <CAN2_RX0_IRQHandler+0x10>)
 8005722:	f000 fdee 	bl	8006302 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8005726:	bf00      	nop
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000698 	.word	0x20000698

08005730 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005734:	4802      	ldr	r0, [pc, #8]	@ (8005740 <DMA2_Stream6_IRQHandler+0x10>)
 8005736:	f001 fabd 	bl	8006cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800573a:	bf00      	nop
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000ad8 	.word	0x20000ad8

08005744 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005748:	4802      	ldr	r0, [pc, #8]	@ (8005754 <DMA2_Stream7_IRQHandler+0x10>)
 800574a:	f001 fab3 	bl	8006cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000958 	.word	0x20000958

08005758 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800575c:	4802      	ldr	r0, [pc, #8]	@ (8005768 <USART6_IRQHandler+0x10>)
 800575e:	f004 fdff 	bl	800a360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000914 	.word	0x20000914

0800576c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  return 1;
 8005770:	2301      	movs	r3, #1
}
 8005772:	4618      	mov	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <_kill>:

int _kill(int pid, int sig)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005786:	f009 fbab 	bl	800eee0 <__errno>
 800578a:	4603      	mov	r3, r0
 800578c:	2216      	movs	r2, #22
 800578e:	601a      	str	r2, [r3, #0]
  return -1;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <_exit>:

void _exit (int status)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80057a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7ff ffe7 	bl	800577c <_kill>
  while (1) {}    /* Make sure we hang here */
 80057ae:	bf00      	nop
 80057b0:	e7fd      	b.n	80057ae <_exit+0x12>

080057b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	e00a      	b.n	80057da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80057c4:	f3af 8000 	nop.w
 80057c8:	4601      	mov	r1, r0
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	60ba      	str	r2, [r7, #8]
 80057d0:	b2ca      	uxtb	r2, r1
 80057d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3301      	adds	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	429a      	cmp	r2, r3
 80057e0:	dbf0      	blt.n	80057c4 <_read+0x12>
  }

  return len;
 80057e2:	687b      	ldr	r3, [r7, #4]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e009      	b.n	8005812 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	60ba      	str	r2, [r7, #8]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	3301      	adds	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	dbf1      	blt.n	80057fe <_write+0x12>
  }
  return len;
 800581a:	687b      	ldr	r3, [r7, #4]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <_close>:

int _close(int file)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800582c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800584c:	605a      	str	r2, [r3, #4]
  return 0;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <_isatty>:

int _isatty(int file)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005864:	2301      	movs	r3, #1
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005894:	4a14      	ldr	r2, [pc, #80]	@ (80058e8 <_sbrk+0x5c>)
 8005896:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <_sbrk+0x60>)
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058a0:	4b13      	ldr	r3, [pc, #76]	@ (80058f0 <_sbrk+0x64>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d102      	bne.n	80058ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058a8:	4b11      	ldr	r3, [pc, #68]	@ (80058f0 <_sbrk+0x64>)
 80058aa:	4a12      	ldr	r2, [pc, #72]	@ (80058f4 <_sbrk+0x68>)
 80058ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058ae:	4b10      	ldr	r3, [pc, #64]	@ (80058f0 <_sbrk+0x64>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d207      	bcs.n	80058cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058bc:	f009 fb10 	bl	800eee0 <__errno>
 80058c0:	4603      	mov	r3, r0
 80058c2:	220c      	movs	r2, #12
 80058c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058ca:	e009      	b.n	80058e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058cc:	4b08      	ldr	r3, [pc, #32]	@ (80058f0 <_sbrk+0x64>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058d2:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <_sbrk+0x64>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	4a05      	ldr	r2, [pc, #20]	@ (80058f0 <_sbrk+0x64>)
 80058dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20020000 	.word	0x20020000
 80058ec:	00000400 	.word	0x00000400
 80058f0:	20000bc4 	.word	0x20000bc4
 80058f4:	20005700 	.word	0x20005700

080058f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058fc:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <SystemInit+0x20>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	4a05      	ldr	r2, [pc, #20]	@ (8005918 <SystemInit+0x20>)
 8005904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	e000ed00 	.word	0xe000ed00

0800591c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800591c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005920:	480d      	ldr	r0, [pc, #52]	@ (8005958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005922:	490e      	ldr	r1, [pc, #56]	@ (800595c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005924:	4a0e      	ldr	r2, [pc, #56]	@ (8005960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005928:	e002      	b.n	8005930 <LoopCopyDataInit>

0800592a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800592a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800592c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800592e:	3304      	adds	r3, #4

08005930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005934:	d3f9      	bcc.n	800592a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005936:	4a0b      	ldr	r2, [pc, #44]	@ (8005964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005938:	4c0b      	ldr	r4, [pc, #44]	@ (8005968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800593a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800593c:	e001      	b.n	8005942 <LoopFillZerobss>

0800593e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800593e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005940:	3204      	adds	r2, #4

08005942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005944:	d3fb      	bcc.n	800593e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005946:	f7ff ffd7 	bl	80058f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800594a:	f009 facf 	bl	800eeec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800594e:	f7fc fee3 	bl	8002718 <main>
  bx  lr    
 8005952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800595c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8005960:	08012558 	.word	0x08012558
  ldr r2, =_sbss
 8005964:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8005968:	20005700 	.word	0x20005700

0800596c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800596c:	e7fe      	b.n	800596c <ADC_IRQHandler>
	...

08005970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005974:	4b0e      	ldr	r3, [pc, #56]	@ (80059b0 <HAL_Init+0x40>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a0d      	ldr	r2, [pc, #52]	@ (80059b0 <HAL_Init+0x40>)
 800597a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800597e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005980:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <HAL_Init+0x40>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0a      	ldr	r2, [pc, #40]	@ (80059b0 <HAL_Init+0x40>)
 8005986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800598a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800598c:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <HAL_Init+0x40>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a07      	ldr	r2, [pc, #28]	@ (80059b0 <HAL_Init+0x40>)
 8005992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005998:	2003      	movs	r0, #3
 800599a:	f000 ffb1 	bl	8006900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800599e:	200f      	movs	r0, #15
 80059a0:	f000 f808 	bl	80059b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059a4:	f7ff f964 	bl	8004c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40023c00 	.word	0x40023c00

080059b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80059bc:	4b12      	ldr	r3, [pc, #72]	@ (8005a08 <HAL_InitTick+0x54>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	4b12      	ldr	r3, [pc, #72]	@ (8005a0c <HAL_InitTick+0x58>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	4619      	mov	r1, r3
 80059c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80059ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ffc9 	bl	800696a <HAL_SYSTICK_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e00e      	b.n	8005a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b0f      	cmp	r3, #15
 80059e6:	d80a      	bhi.n	80059fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059e8:	2200      	movs	r2, #0
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059f0:	f000 ff91 	bl	8006916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059f4:	4a06      	ldr	r2, [pc, #24]	@ (8005a10 <HAL_InitTick+0x5c>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000060 	.word	0x20000060
 8005a0c:	20000068 	.word	0x20000068
 8005a10:	20000064 	.word	0x20000064

08005a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a18:	4b06      	ldr	r3, [pc, #24]	@ (8005a34 <HAL_IncTick+0x20>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <HAL_IncTick+0x24>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4413      	add	r3, r2
 8005a24:	4a04      	ldr	r2, [pc, #16]	@ (8005a38 <HAL_IncTick+0x24>)
 8005a26:	6013      	str	r3, [r2, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000068 	.word	0x20000068
 8005a38:	20000bc8 	.word	0x20000bc8

08005a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a40:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <HAL_GetTick+0x14>)
 8005a42:	681b      	ldr	r3, [r3, #0]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000bc8 	.word	0x20000bc8

08005a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a5c:	f7ff ffee 	bl	8005a3c <HAL_GetTick>
 8005a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a6c:	d005      	beq.n	8005a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <HAL_Delay+0x44>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a7a:	bf00      	nop
 8005a7c:	f7ff ffde 	bl	8005a3c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d8f7      	bhi.n	8005a7c <HAL_Delay+0x28>
  {
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000068 	.word	0x20000068

08005a9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e0ed      	b.n	8005c8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff f904 	bl	8004cc8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ad0:	f7ff ffb4 	bl	8005a3c <HAL_GetTick>
 8005ad4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005ad6:	e012      	b.n	8005afe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005ad8:	f7ff ffb0 	bl	8005a3c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b0a      	cmp	r3, #10
 8005ae4:	d90b      	bls.n	8005afe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2205      	movs	r2, #5
 8005af6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0c5      	b.n	8005c8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0e5      	beq.n	8005ad8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0202 	bic.w	r2, r2, #2
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b1c:	f7ff ff8e 	bl	8005a3c <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005b22:	e012      	b.n	8005b4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005b24:	f7ff ff8a 	bl	8005a3c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b0a      	cmp	r3, #10
 8005b30:	d90b      	bls.n	8005b4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2205      	movs	r2, #5
 8005b42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e09f      	b.n	8005c8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e5      	bne.n	8005b24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7e1b      	ldrb	r3, [r3, #24]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d108      	bne.n	8005b72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e007      	b.n	8005b82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	7e5b      	ldrb	r3, [r3, #25]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d108      	bne.n	8005b9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	e007      	b.n	8005bac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7e9b      	ldrb	r3, [r3, #26]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d108      	bne.n	8005bc6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0220 	orr.w	r2, r2, #32
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e007      	b.n	8005bd6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0220 	bic.w	r2, r2, #32
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7edb      	ldrb	r3, [r3, #27]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d108      	bne.n	8005bf0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0210 	bic.w	r2, r2, #16
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e007      	b.n	8005c00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0210 	orr.w	r2, r2, #16
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	7f1b      	ldrb	r3, [r3, #28]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d108      	bne.n	8005c1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e007      	b.n	8005c2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0208 	bic.w	r2, r2, #8
 8005c28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	7f5b      	ldrb	r3, [r3, #29]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d108      	bne.n	8005c44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0204 	orr.w	r2, r2, #4
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e007      	b.n	8005c54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0204 	bic.w	r2, r2, #4
 8005c52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	ea42 0103 	orr.w	r1, r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	1e5a      	subs	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005caa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005cac:	7cfb      	ldrb	r3, [r7, #19]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d003      	beq.n	8005cba <HAL_CAN_ConfigFilter+0x26>
 8005cb2:	7cfb      	ldrb	r3, [r7, #19]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	f040 80be 	bne.w	8005e36 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005cba:	4b65      	ldr	r3, [pc, #404]	@ (8005e50 <HAL_CAN_ConfigFilter+0x1bc>)
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005cd4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	431a      	orrs	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	401a      	ands	r2, r3
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d123      	bne.n	8005d64 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	43db      	mvns	r3, r3
 8005d26:	401a      	ands	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005d3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	3248      	adds	r2, #72	@ 0x48
 8005d44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d5a:	6979      	ldr	r1, [r7, #20]
 8005d5c:	3348      	adds	r3, #72	@ 0x48
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	440b      	add	r3, r1
 8005d62:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d122      	bne.n	8005db2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	3248      	adds	r2, #72	@ 0x48
 8005d92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005da6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005da8:	6979      	ldr	r1, [r7, #20]
 8005daa:	3348      	adds	r3, #72	@ 0x48
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	440b      	add	r3, r1
 8005db0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	401a      	ands	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005dcc:	e007      	b.n	8005dde <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	43db      	mvns	r3, r3
 8005df0:	401a      	ands	r2, r3
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005df8:	e007      	b.n	8005e0a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d107      	bne.n	8005e22 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005e28:	f023 0201 	bic.w	r2, r3, #1
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e006      	b.n	8005e44 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40006400 	.word	0x40006400

08005e54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d12e      	bne.n	8005ec6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e80:	f7ff fddc 	bl	8005a3c <HAL_GetTick>
 8005e84:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005e86:	e012      	b.n	8005eae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e88:	f7ff fdd8 	bl	8005a3c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b0a      	cmp	r3, #10
 8005e94:	d90b      	bls.n	8005eae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2205      	movs	r2, #5
 8005ea6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e012      	b.n	8005ed4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e5      	bne.n	8005e88 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e006      	b.n	8005ed4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	@ 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ef0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005efa:	7ffb      	ldrb	r3, [r7, #31]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d003      	beq.n	8005f08 <HAL_CAN_AddTxMessage+0x2c>
 8005f00:	7ffb      	ldrb	r3, [r7, #31]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	f040 80b8 	bne.w	8006078 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80a0 	beq.w	8006068 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	0e1b      	lsrs	r3, r3, #24
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d907      	bls.n	8005f48 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e09e      	b.n	8006086 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005f48:	2201      	movs	r2, #1
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10d      	bne.n	8005f76 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005f64:	68f9      	ldr	r1, [r7, #12]
 8005f66:	6809      	ldr	r1, [r1, #0]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	3318      	adds	r3, #24
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	440b      	add	r3, r1
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e00f      	b.n	8005f96 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005f8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3318      	adds	r3, #24
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	440b      	add	r3, r1
 8005f94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6819      	ldr	r1, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	440b      	add	r3, r1
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	7d1b      	ldrb	r3, [r3, #20]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d111      	bne.n	8005fd6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	3318      	adds	r3, #24
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	3318      	adds	r3, #24
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	440b      	add	r3, r1
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3307      	adds	r3, #7
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	061a      	lsls	r2, r3, #24
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3306      	adds	r3, #6
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	041b      	lsls	r3, r3, #16
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3305      	adds	r3, #5
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	3204      	adds	r2, #4
 8005ff6:	7812      	ldrb	r2, [r2, #0]
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	ea43 0200 	orr.w	r2, r3, r0
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	440b      	add	r3, r1
 8006008:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800600c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3303      	adds	r3, #3
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	061a      	lsls	r2, r3, #24
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3302      	adds	r3, #2
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3301      	adds	r3, #1
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	4313      	orrs	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	4610      	mov	r0, r2
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	6811      	ldr	r1, [r2, #0]
 8006034:	ea43 0200 	orr.w	r2, r3, r0
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	440b      	add	r3, r1
 800603e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006042:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	3318      	adds	r3, #24
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	4413      	add	r3, r2
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	6811      	ldr	r1, [r2, #0]
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	3318      	adds	r3, #24
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	440b      	add	r3, r1
 8006062:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e00e      	b.n	8006086 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e006      	b.n	8006086 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3724      	adds	r7, #36	@ 0x24
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006092:	b480      	push	{r7}
 8006094:	b087      	sub	sp, #28
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d003      	beq.n	80060b6 <HAL_CAN_GetRxMessage+0x24>
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	f040 80f3 	bne.w	800629c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10e      	bne.n	80060da <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d116      	bne.n	80060f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e0e7      	b.n	80062aa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d107      	bne.n	80060f8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0d8      	b.n	80062aa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	331b      	adds	r3, #27
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	4413      	add	r3, r2
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0204 	and.w	r2, r3, #4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10c      	bne.n	8006130 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	331b      	adds	r3, #27
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4413      	add	r3, r2
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	0d5b      	lsrs	r3, r3, #21
 8006126:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e00b      	b.n	8006148 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	331b      	adds	r3, #27
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4413      	add	r3, r2
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	08db      	lsrs	r3, r3, #3
 8006140:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	331b      	adds	r3, #27
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	4413      	add	r3, r2
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0202 	and.w	r2, r3, #2
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	331b      	adds	r3, #27
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	4413      	add	r3, r2
 800616a:	3304      	adds	r3, #4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 020f 	and.w	r2, r3, #15
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	331b      	adds	r3, #27
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	4413      	add	r3, r2
 8006182:	3304      	adds	r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	0a1b      	lsrs	r3, r3, #8
 8006188:	b2da      	uxtb	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	331b      	adds	r3, #27
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	4413      	add	r3, r2
 800619a:	3304      	adds	r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	0c1b      	lsrs	r3, r3, #16
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	0a1a      	lsrs	r2, r3, #8
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	4413      	add	r3, r2
 80061e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	0c1a      	lsrs	r2, r3, #16
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	3302      	adds	r3, #2
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0e1a      	lsrs	r2, r3, #24
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	3303      	adds	r3, #3
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	4413      	add	r3, r2
 8006214:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	3304      	adds	r3, #4
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	4413      	add	r3, r2
 800622c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	0a1a      	lsrs	r2, r3, #8
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	3305      	adds	r3, #5
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	4413      	add	r3, r2
 8006246:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0c1a      	lsrs	r2, r3, #16
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	3306      	adds	r3, #6
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	4413      	add	r3, r2
 8006260:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	0e1a      	lsrs	r2, r3, #24
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	3307      	adds	r3, #7
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d108      	bne.n	8006288 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0220 	orr.w	r2, r2, #32
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	e007      	b.n	8006298 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0220 	orr.w	r2, r2, #32
 8006296:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e006      	b.n	80062aa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
  }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062c6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d002      	beq.n	80062d4 <HAL_CAN_ActivateNotification+0x1e>
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d109      	bne.n	80062e8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6959      	ldr	r1, [r3, #20]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e006      	b.n	80062f6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b08a      	sub	sp, #40	@ 0x28
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800630a:	2300      	movs	r3, #0
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d07c      	beq.n	8006442 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d023      	beq.n	800639a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2201      	movs	r2, #1
 8006358:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f983 	bl	8006670 <HAL_CAN_TxMailbox0CompleteCallback>
 800636a:	e016      	b.n	800639a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
 800637e:	e00c      	b.n	800639a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d004      	beq.n	8006394 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006390:	627b      	str	r3, [r7, #36]	@ 0x24
 8006392:	e002      	b.n	800639a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f989 	bl	80066ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d024      	beq.n	80063ee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f963 	bl	8006684 <HAL_CAN_TxMailbox1CompleteCallback>
 80063be:	e016      	b.n	80063ee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80063d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063d2:	e00c      	b.n	80063ee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e6:	e002      	b.n	80063ee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f969 	bl	80066c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d024      	beq.n	8006442 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006400:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f943 	bl	8006698 <HAL_CAN_TxMailbox2CompleteCallback>
 8006412:	e016      	b.n	8006442 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006424:	627b      	str	r3, [r7, #36]	@ 0x24
 8006426:	e00c      	b.n	8006442 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
 800643a:	e002      	b.n	8006442 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f949 	bl	80066d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00c      	beq.n	8006466 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2210      	movs	r2, #16
 8006464:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d006      	beq.n	8006488 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2208      	movs	r2, #8
 8006480:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f930 	bl	80066e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7fb f877 	bl	8001594 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2210      	movs	r2, #16
 80064c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2208      	movs	r2, #8
 80064e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f912 	bl	8006710 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f8f9 	bl	80066fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	d006      	beq.n	800652c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2210      	movs	r2, #16
 8006524:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8fc 	bl	8006724 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2208      	movs	r2, #8
 8006546:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f8f5 	bl	8006738 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d07b      	beq.n	8006650 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b00      	cmp	r3, #0
 8006560:	d072      	beq.n	8006648 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	f043 0301 	orr.w	r3, r3, #1
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	f043 0304 	orr.w	r3, r3, #4
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d043      	beq.n	8006648 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d03e      	beq.n	8006648 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065d0:	2b60      	cmp	r3, #96	@ 0x60
 80065d2:	d02b      	beq.n	800662c <HAL_CAN_IRQHandler+0x32a>
 80065d4:	2b60      	cmp	r3, #96	@ 0x60
 80065d6:	d82e      	bhi.n	8006636 <HAL_CAN_IRQHandler+0x334>
 80065d8:	2b50      	cmp	r3, #80	@ 0x50
 80065da:	d022      	beq.n	8006622 <HAL_CAN_IRQHandler+0x320>
 80065dc:	2b50      	cmp	r3, #80	@ 0x50
 80065de:	d82a      	bhi.n	8006636 <HAL_CAN_IRQHandler+0x334>
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	d019      	beq.n	8006618 <HAL_CAN_IRQHandler+0x316>
 80065e4:	2b40      	cmp	r3, #64	@ 0x40
 80065e6:	d826      	bhi.n	8006636 <HAL_CAN_IRQHandler+0x334>
 80065e8:	2b30      	cmp	r3, #48	@ 0x30
 80065ea:	d010      	beq.n	800660e <HAL_CAN_IRQHandler+0x30c>
 80065ec:	2b30      	cmp	r3, #48	@ 0x30
 80065ee:	d822      	bhi.n	8006636 <HAL_CAN_IRQHandler+0x334>
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d002      	beq.n	80065fa <HAL_CAN_IRQHandler+0x2f8>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d005      	beq.n	8006604 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80065f8:	e01d      	b.n	8006636 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	f043 0308 	orr.w	r3, r3, #8
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006602:	e019      	b.n	8006638 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	f043 0310 	orr.w	r3, r3, #16
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800660c:	e014      	b.n	8006638 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	f043 0320 	orr.w	r3, r3, #32
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006616:	e00f      	b.n	8006638 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006620:	e00a      	b.n	8006638 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006628:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800662a:	e005      	b.n	8006638 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006634:	e000      	b.n	8006638 <HAL_CAN_IRQHandler+0x336>
            break;
 8006636:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006646:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2204      	movs	r2, #4
 800664e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	2b00      	cmp	r3, #0
 8006654:	d008      	beq.n	8006668 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f872 	bl	800674c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006668:	bf00      	nop
 800666a:	3728      	adds	r7, #40	@ 0x28
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006770:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800677c:	4013      	ands	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800678c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006792:	4a04      	ldr	r2, [pc, #16]	@ (80067a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	60d3      	str	r3, [r2, #12]
}
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	e000ed00 	.word	0xe000ed00

080067a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067ac:	4b04      	ldr	r3, [pc, #16]	@ (80067c0 <__NVIC_GetPriorityGrouping+0x18>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	f003 0307 	and.w	r3, r3, #7
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	e000ed00 	.word	0xe000ed00

080067c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	db0b      	blt.n	80067ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	f003 021f 	and.w	r2, r3, #31
 80067dc:	4907      	ldr	r1, [pc, #28]	@ (80067fc <__NVIC_EnableIRQ+0x38>)
 80067de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2001      	movs	r0, #1
 80067e6:	fa00 f202 	lsl.w	r2, r0, r2
 80067ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	e000e100 	.word	0xe000e100

08006800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	4603      	mov	r3, r0
 8006808:	6039      	str	r1, [r7, #0]
 800680a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800680c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006810:	2b00      	cmp	r3, #0
 8006812:	db0a      	blt.n	800682a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	490c      	ldr	r1, [pc, #48]	@ (800684c <__NVIC_SetPriority+0x4c>)
 800681a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681e:	0112      	lsls	r2, r2, #4
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	440b      	add	r3, r1
 8006824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006828:	e00a      	b.n	8006840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	4908      	ldr	r1, [pc, #32]	@ (8006850 <__NVIC_SetPriority+0x50>)
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	3b04      	subs	r3, #4
 8006838:	0112      	lsls	r2, r2, #4
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	440b      	add	r3, r1
 800683e:	761a      	strb	r2, [r3, #24]
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	e000e100 	.word	0xe000e100
 8006850:	e000ed00 	.word	0xe000ed00

08006854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006854:	b480      	push	{r7}
 8006856:	b089      	sub	sp, #36	@ 0x24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f1c3 0307 	rsb	r3, r3, #7
 800686e:	2b04      	cmp	r3, #4
 8006870:	bf28      	it	cs
 8006872:	2304      	movcs	r3, #4
 8006874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	3304      	adds	r3, #4
 800687a:	2b06      	cmp	r3, #6
 800687c:	d902      	bls.n	8006884 <NVIC_EncodePriority+0x30>
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	3b03      	subs	r3, #3
 8006882:	e000      	b.n	8006886 <NVIC_EncodePriority+0x32>
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	43da      	mvns	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	401a      	ands	r2, r3
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800689c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	fa01 f303 	lsl.w	r3, r1, r3
 80068a6:	43d9      	mvns	r1, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068ac:	4313      	orrs	r3, r2
         );
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3724      	adds	r7, #36	@ 0x24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068cc:	d301      	bcc.n	80068d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068ce:	2301      	movs	r3, #1
 80068d0:	e00f      	b.n	80068f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068d2:	4a0a      	ldr	r2, [pc, #40]	@ (80068fc <SysTick_Config+0x40>)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068da:	210f      	movs	r1, #15
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068e0:	f7ff ff8e 	bl	8006800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068e4:	4b05      	ldr	r3, [pc, #20]	@ (80068fc <SysTick_Config+0x40>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068ea:	4b04      	ldr	r3, [pc, #16]	@ (80068fc <SysTick_Config+0x40>)
 80068ec:	2207      	movs	r2, #7
 80068ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	e000e010 	.word	0xe000e010

08006900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ff29 	bl	8006760 <__NVIC_SetPriorityGrouping>
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006916:	b580      	push	{r7, lr}
 8006918:	b086      	sub	sp, #24
 800691a:	af00      	add	r7, sp, #0
 800691c:	4603      	mov	r3, r0
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006928:	f7ff ff3e 	bl	80067a8 <__NVIC_GetPriorityGrouping>
 800692c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	6978      	ldr	r0, [r7, #20]
 8006934:	f7ff ff8e 	bl	8006854 <NVIC_EncodePriority>
 8006938:	4602      	mov	r2, r0
 800693a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800693e:	4611      	mov	r1, r2
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff ff5d 	bl	8006800 <__NVIC_SetPriority>
}
 8006946:	bf00      	nop
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	4603      	mov	r3, r0
 8006956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff ff31 	bl	80067c4 <__NVIC_EnableIRQ>
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff ffa2 	bl	80068bc <SysTick_Config>
 8006978:	4603      	mov	r3, r0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006990:	f7ff f854 	bl	8005a3c <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e099      	b.n	8006ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069c0:	e00f      	b.n	80069e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069c2:	f7ff f83b 	bl	8005a3c <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	d908      	bls.n	80069e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2203      	movs	r2, #3
 80069da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e078      	b.n	8006ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e8      	bne.n	80069c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4b38      	ldr	r3, [pc, #224]	@ (8006adc <HAL_DMA_Init+0x158>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d107      	bne.n	8006a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a44:	4313      	orrs	r3, r2
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f023 0307 	bic.w	r3, r3, #7
 8006a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d117      	bne.n	8006aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fb01 	bl	8007090 <DMA_CheckFifoParam>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2240      	movs	r2, #64	@ 0x40
 8006a98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e016      	b.n	8006ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fab8 	bl	8007024 <DMA_CalcBaseAndBitshift>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abc:	223f      	movs	r2, #63	@ 0x3f
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	f010803f 	.word	0xf010803f

08006ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_DMA_Start_IT+0x26>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e040      	b.n	8006b88 <HAL_DMA_Start_IT+0xa8>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d12f      	bne.n	8006b7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fa4a 	bl	8006fc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b38:	223f      	movs	r2, #63	@ 0x3f
 8006b3a:	409a      	lsls	r2, r3
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0216 	orr.w	r2, r2, #22
 8006b4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d007      	beq.n	8006b68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0208 	orr.w	r2, r2, #8
 8006b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e005      	b.n	8006b86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
 8006b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b9e:	f7fe ff4d 	bl	8005a3c <HAL_GetTick>
 8006ba2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d008      	beq.n	8006bc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2280      	movs	r2, #128	@ 0x80
 8006bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e052      	b.n	8006c68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0216 	bic.w	r2, r2, #22
 8006bd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	695a      	ldr	r2, [r3, #20]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006be0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d103      	bne.n	8006bf2 <HAL_DMA_Abort+0x62>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0208 	bic.w	r2, r2, #8
 8006c00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0201 	bic.w	r2, r2, #1
 8006c10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c12:	e013      	b.n	8006c3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c14:	f7fe ff12 	bl	8005a3c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	d90c      	bls.n	8006c3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e015      	b.n	8006c68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e4      	bne.n	8006c14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c4e:	223f      	movs	r2, #63	@ 0x3f
 8006c50:	409a      	lsls	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d004      	beq.n	8006c8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2280      	movs	r2, #128	@ 0x80
 8006c88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e00c      	b.n	8006ca8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2205      	movs	r2, #5
 8006c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8006efc <HAL_DMA_IRQHandler+0x248>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a8e      	ldr	r2, [pc, #568]	@ (8006f00 <HAL_DMA_IRQHandler+0x24c>)
 8006cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cca:	0a9b      	lsrs	r3, r3, #10
 8006ccc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cde:	2208      	movs	r2, #8
 8006ce0:	409a      	lsls	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01a      	beq.n	8006d20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d013      	beq.n	8006d20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0204 	bic.w	r2, r2, #4
 8006d06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d18:	f043 0201 	orr.w	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d24:	2201      	movs	r2, #1
 8006d26:	409a      	lsls	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d42:	2201      	movs	r2, #1
 8006d44:	409a      	lsls	r2, r3
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4e:	f043 0202 	orr.w	r2, r3, #2
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	409a      	lsls	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d012      	beq.n	8006d8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d78:	2204      	movs	r2, #4
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d84:	f043 0204 	orr.w	r2, r3, #4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d90:	2210      	movs	r2, #16
 8006d92:	409a      	lsls	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4013      	ands	r3, r2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d043      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d03c      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dae:	2210      	movs	r2, #16
 8006db0:	409a      	lsls	r2, r3
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d018      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d108      	bne.n	8006de4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d024      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
 8006de2:	e01f      	b.n	8006e24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01b      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
 8006df4:	e016      	b.n	8006e24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d107      	bne.n	8006e14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0208 	bic.w	r2, r2, #8
 8006e12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e28:	2220      	movs	r2, #32
 8006e2a:	409a      	lsls	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 808f 	beq.w	8006f54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8087 	beq.w	8006f54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b05      	cmp	r3, #5
 8006e5c:	d136      	bne.n	8006ecc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0216 	bic.w	r2, r2, #22
 8006e6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	695a      	ldr	r2, [r3, #20]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <HAL_DMA_IRQHandler+0x1da>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0208 	bic.w	r2, r2, #8
 8006e9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ea2:	223f      	movs	r2, #63	@ 0x3f
 8006ea4:	409a      	lsls	r2, r3
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d07e      	beq.n	8006fc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	4798      	blx	r3
        }
        return;
 8006eca:	e079      	b.n	8006fc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01d      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10d      	bne.n	8006f04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d031      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	4798      	blx	r3
 8006ef8:	e02c      	b.n	8006f54 <HAL_DMA_IRQHandler+0x2a0>
 8006efa:	bf00      	nop
 8006efc:	20000060 	.word	0x20000060
 8006f00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d023      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	e01e      	b.n	8006f54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10f      	bne.n	8006f44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0210 	bic.w	r2, r2, #16
 8006f32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d032      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d022      	beq.n	8006fae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2205      	movs	r2, #5
 8006f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3301      	adds	r3, #1
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d307      	bcc.n	8006f9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f2      	bne.n	8006f80 <HAL_DMA_IRQHandler+0x2cc>
 8006f9a:	e000      	b.n	8006f9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006f9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d005      	beq.n	8006fc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
 8006fbe:	e000      	b.n	8006fc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006fc0:	bf00      	nop
    }
  }
}
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b40      	cmp	r3, #64	@ 0x40
 8006ff4:	d108      	bne.n	8007008 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007006:	e007      	b.n	8007018 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	60da      	str	r2, [r3, #12]
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	3b10      	subs	r3, #16
 8007034:	4a14      	ldr	r2, [pc, #80]	@ (8007088 <DMA_CalcBaseAndBitshift+0x64>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	091b      	lsrs	r3, r3, #4
 800703c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800703e:	4a13      	ldr	r2, [pc, #76]	@ (800708c <DMA_CalcBaseAndBitshift+0x68>)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d909      	bls.n	8007066 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800705a:	f023 0303 	bic.w	r3, r3, #3
 800705e:	1d1a      	adds	r2, r3, #4
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	659a      	str	r2, [r3, #88]	@ 0x58
 8007064:	e007      	b.n	8007076 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800706e:	f023 0303 	bic.w	r3, r3, #3
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	aaaaaaab 	.word	0xaaaaaaab
 800708c:	08011ff8 	.word	0x08011ff8

08007090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d11f      	bne.n	80070ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d856      	bhi.n	800715e <DMA_CheckFifoParam+0xce>
 80070b0:	a201      	add	r2, pc, #4	@ (adr r2, 80070b8 <DMA_CheckFifoParam+0x28>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070c9 	.word	0x080070c9
 80070bc:	080070db 	.word	0x080070db
 80070c0:	080070c9 	.word	0x080070c9
 80070c4:	0800715f 	.word	0x0800715f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d046      	beq.n	8007162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070d8:	e043      	b.n	8007162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80070e2:	d140      	bne.n	8007166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070e8:	e03d      	b.n	8007166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070f2:	d121      	bne.n	8007138 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d837      	bhi.n	800716a <DMA_CheckFifoParam+0xda>
 80070fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <DMA_CheckFifoParam+0x70>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007111 	.word	0x08007111
 8007104:	08007117 	.word	0x08007117
 8007108:	08007111 	.word	0x08007111
 800710c:	08007129 	.word	0x08007129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
      break;
 8007114:	e030      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d025      	beq.n	800716e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007126:	e022      	b.n	800716e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007130:	d11f      	bne.n	8007172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007136:	e01c      	b.n	8007172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d903      	bls.n	8007146 <DMA_CheckFifoParam+0xb6>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b03      	cmp	r3, #3
 8007142:	d003      	beq.n	800714c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007144:	e018      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]
      break;
 800714a:	e015      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00e      	beq.n	8007176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
      break;
 800715c:	e00b      	b.n	8007176 <DMA_CheckFifoParam+0xe6>
      break;
 800715e:	bf00      	nop
 8007160:	e00a      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
      break;
 8007162:	bf00      	nop
 8007164:	e008      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
      break;
 8007166:	bf00      	nop
 8007168:	e006      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
      break;
 800716a:	bf00      	nop
 800716c:	e004      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
      break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
      break;   
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <DMA_CheckFifoParam+0xe8>
      break;
 8007176:	bf00      	nop
    }
  } 
  
  return status; 
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop

08007188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007188:	b480      	push	{r7}
 800718a:	b089      	sub	sp, #36	@ 0x24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007196:	2300      	movs	r3, #0
 8007198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800719a:	2300      	movs	r3, #0
 800719c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800719e:	2300      	movs	r3, #0
 80071a0:	61fb      	str	r3, [r7, #28]
 80071a2:	e16b      	b.n	800747c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80071a4:	2201      	movs	r2, #1
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4013      	ands	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	429a      	cmp	r2, r3
 80071be:	f040 815a 	bne.w	8007476 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d005      	beq.n	80071da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d130      	bne.n	800723c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	2203      	movs	r2, #3
 80071e6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ea:	43db      	mvns	r3, r3
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	4013      	ands	r3, r2
 80071f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	fa02 f303 	lsl.w	r3, r2, r3
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	4313      	orrs	r3, r2
 8007202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007210:	2201      	movs	r2, #1
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	fa02 f303 	lsl.w	r3, r2, r3
 8007218:	43db      	mvns	r3, r3
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	4013      	ands	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 0201 	and.w	r2, r3, #1
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	fa02 f303 	lsl.w	r3, r2, r3
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	4313      	orrs	r3, r2
 8007234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f003 0303 	and.w	r3, r3, #3
 8007244:	2b03      	cmp	r3, #3
 8007246:	d017      	beq.n	8007278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	2203      	movs	r2, #3
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	43db      	mvns	r3, r3
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	4013      	ands	r3, r2
 800725e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	4313      	orrs	r3, r2
 8007270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d123      	bne.n	80072cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	08da      	lsrs	r2, r3, #3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3208      	adds	r2, #8
 800728c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	220f      	movs	r2, #15
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	43db      	mvns	r3, r3
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	4013      	ands	r3, r2
 80072a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	08da      	lsrs	r2, r3, #3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3208      	adds	r2, #8
 80072c6:	69b9      	ldr	r1, [r7, #24]
 80072c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	2203      	movs	r2, #3
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	43db      	mvns	r3, r3
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	4013      	ands	r3, r2
 80072e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f003 0203 	and.w	r2, r3, #3
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	fa02 f303 	lsl.w	r3, r2, r3
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80b4 	beq.w	8007476 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	4b60      	ldr	r3, [pc, #384]	@ (8007494 <HAL_GPIO_Init+0x30c>)
 8007314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007316:	4a5f      	ldr	r2, [pc, #380]	@ (8007494 <HAL_GPIO_Init+0x30c>)
 8007318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800731c:	6453      	str	r3, [r2, #68]	@ 0x44
 800731e:	4b5d      	ldr	r3, [pc, #372]	@ (8007494 <HAL_GPIO_Init+0x30c>)
 8007320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800732a:	4a5b      	ldr	r2, [pc, #364]	@ (8007498 <HAL_GPIO_Init+0x310>)
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	089b      	lsrs	r3, r3, #2
 8007330:	3302      	adds	r3, #2
 8007332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	220f      	movs	r2, #15
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	43db      	mvns	r3, r3
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	4013      	ands	r3, r2
 800734c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a52      	ldr	r2, [pc, #328]	@ (800749c <HAL_GPIO_Init+0x314>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d02b      	beq.n	80073ae <HAL_GPIO_Init+0x226>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a51      	ldr	r2, [pc, #324]	@ (80074a0 <HAL_GPIO_Init+0x318>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d025      	beq.n	80073aa <HAL_GPIO_Init+0x222>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a50      	ldr	r2, [pc, #320]	@ (80074a4 <HAL_GPIO_Init+0x31c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01f      	beq.n	80073a6 <HAL_GPIO_Init+0x21e>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a4f      	ldr	r2, [pc, #316]	@ (80074a8 <HAL_GPIO_Init+0x320>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d019      	beq.n	80073a2 <HAL_GPIO_Init+0x21a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a4e      	ldr	r2, [pc, #312]	@ (80074ac <HAL_GPIO_Init+0x324>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <HAL_GPIO_Init+0x216>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a4d      	ldr	r2, [pc, #308]	@ (80074b0 <HAL_GPIO_Init+0x328>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00d      	beq.n	800739a <HAL_GPIO_Init+0x212>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a4c      	ldr	r2, [pc, #304]	@ (80074b4 <HAL_GPIO_Init+0x32c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d007      	beq.n	8007396 <HAL_GPIO_Init+0x20e>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a4b      	ldr	r2, [pc, #300]	@ (80074b8 <HAL_GPIO_Init+0x330>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d101      	bne.n	8007392 <HAL_GPIO_Init+0x20a>
 800738e:	2307      	movs	r3, #7
 8007390:	e00e      	b.n	80073b0 <HAL_GPIO_Init+0x228>
 8007392:	2308      	movs	r3, #8
 8007394:	e00c      	b.n	80073b0 <HAL_GPIO_Init+0x228>
 8007396:	2306      	movs	r3, #6
 8007398:	e00a      	b.n	80073b0 <HAL_GPIO_Init+0x228>
 800739a:	2305      	movs	r3, #5
 800739c:	e008      	b.n	80073b0 <HAL_GPIO_Init+0x228>
 800739e:	2304      	movs	r3, #4
 80073a0:	e006      	b.n	80073b0 <HAL_GPIO_Init+0x228>
 80073a2:	2303      	movs	r3, #3
 80073a4:	e004      	b.n	80073b0 <HAL_GPIO_Init+0x228>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e002      	b.n	80073b0 <HAL_GPIO_Init+0x228>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <HAL_GPIO_Init+0x228>
 80073ae:	2300      	movs	r3, #0
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	f002 0203 	and.w	r2, r2, #3
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	4093      	lsls	r3, r2
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073c0:	4935      	ldr	r1, [pc, #212]	@ (8007498 <HAL_GPIO_Init+0x310>)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	089b      	lsrs	r3, r3, #2
 80073c6:	3302      	adds	r3, #2
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073ce:	4b3b      	ldr	r3, [pc, #236]	@ (80074bc <HAL_GPIO_Init+0x334>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	43db      	mvns	r3, r3
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	4013      	ands	r3, r2
 80073dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073f2:	4a32      	ldr	r2, [pc, #200]	@ (80074bc <HAL_GPIO_Init+0x334>)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073f8:	4b30      	ldr	r3, [pc, #192]	@ (80074bc <HAL_GPIO_Init+0x334>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	43db      	mvns	r3, r3
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	4013      	ands	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800741c:	4a27      	ldr	r2, [pc, #156]	@ (80074bc <HAL_GPIO_Init+0x334>)
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007422:	4b26      	ldr	r3, [pc, #152]	@ (80074bc <HAL_GPIO_Init+0x334>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	43db      	mvns	r3, r3
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4013      	ands	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007446:	4a1d      	ldr	r2, [pc, #116]	@ (80074bc <HAL_GPIO_Init+0x334>)
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800744c:	4b1b      	ldr	r3, [pc, #108]	@ (80074bc <HAL_GPIO_Init+0x334>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	43db      	mvns	r3, r3
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	4013      	ands	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007470:	4a12      	ldr	r2, [pc, #72]	@ (80074bc <HAL_GPIO_Init+0x334>)
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	3301      	adds	r3, #1
 800747a:	61fb      	str	r3, [r7, #28]
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	2b0f      	cmp	r3, #15
 8007480:	f67f ae90 	bls.w	80071a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	3724      	adds	r7, #36	@ 0x24
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40023800 	.word	0x40023800
 8007498:	40013800 	.word	0x40013800
 800749c:	40020000 	.word	0x40020000
 80074a0:	40020400 	.word	0x40020400
 80074a4:	40020800 	.word	0x40020800
 80074a8:	40020c00 	.word	0x40020c00
 80074ac:	40021000 	.word	0x40021000
 80074b0:	40021400 	.word	0x40021400
 80074b4:	40021800 	.word	0x40021800
 80074b8:	40021c00 	.word	0x40021c00
 80074bc:	40013c00 	.word	0x40013c00

080074c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	807b      	strh	r3, [r7, #2]
 80074cc:	4613      	mov	r3, r2
 80074ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074d0:	787b      	ldrb	r3, [r7, #1]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074d6:	887a      	ldrh	r2, [r7, #2]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074dc:	e003      	b.n	80074e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074de:	887b      	ldrh	r3, [r7, #2]
 80074e0:	041a      	lsls	r2, r3, #16
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	619a      	str	r2, [r3, #24]
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
	...

080074f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80074fe:	4b08      	ldr	r3, [pc, #32]	@ (8007520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	4013      	ands	r3, r2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d006      	beq.n	8007518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800750a:	4a05      	ldr	r2, [pc, #20]	@ (8007520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	4618      	mov	r0, r3
 8007514:	f7fa ff38 	bl	8002388 <HAL_GPIO_EXTI_Callback>
  }
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40013c00 	.word	0x40013c00

08007524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e12b      	b.n	800778e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d106      	bne.n	8007550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7fd fc6c 	bl	8004e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2224      	movs	r2, #36	@ 0x24
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0201 	bic.w	r2, r2, #1
 8007566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007588:	f001 fbc8 	bl	8008d1c <HAL_RCC_GetPCLK1Freq>
 800758c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4a81      	ldr	r2, [pc, #516]	@ (8007798 <HAL_I2C_Init+0x274>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d807      	bhi.n	80075a8 <HAL_I2C_Init+0x84>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a80      	ldr	r2, [pc, #512]	@ (800779c <HAL_I2C_Init+0x278>)
 800759c:	4293      	cmp	r3, r2
 800759e:	bf94      	ite	ls
 80075a0:	2301      	movls	r3, #1
 80075a2:	2300      	movhi	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e006      	b.n	80075b6 <HAL_I2C_Init+0x92>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4a7d      	ldr	r2, [pc, #500]	@ (80077a0 <HAL_I2C_Init+0x27c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bf94      	ite	ls
 80075b0:	2301      	movls	r3, #1
 80075b2:	2300      	movhi	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e0e7      	b.n	800778e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a78      	ldr	r2, [pc, #480]	@ (80077a4 <HAL_I2C_Init+0x280>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	0c9b      	lsrs	r3, r3, #18
 80075c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	430a      	orrs	r2, r1
 80075dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	4a6a      	ldr	r2, [pc, #424]	@ (8007798 <HAL_I2C_Init+0x274>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d802      	bhi.n	80075f8 <HAL_I2C_Init+0xd4>
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	3301      	adds	r3, #1
 80075f6:	e009      	b.n	800760c <HAL_I2C_Init+0xe8>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	4a69      	ldr	r2, [pc, #420]	@ (80077a8 <HAL_I2C_Init+0x284>)
 8007604:	fba2 2303 	umull	r2, r3, r2, r3
 8007608:	099b      	lsrs	r3, r3, #6
 800760a:	3301      	adds	r3, #1
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6812      	ldr	r2, [r2, #0]
 8007610:	430b      	orrs	r3, r1
 8007612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800761e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	495c      	ldr	r1, [pc, #368]	@ (8007798 <HAL_I2C_Init+0x274>)
 8007628:	428b      	cmp	r3, r1
 800762a:	d819      	bhi.n	8007660 <HAL_I2C_Init+0x13c>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	1e59      	subs	r1, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	fbb1 f3f3 	udiv	r3, r1, r3
 800763a:	1c59      	adds	r1, r3, #1
 800763c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007640:	400b      	ands	r3, r1
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <HAL_I2C_Init+0x138>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	1e59      	subs	r1, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	fbb1 f3f3 	udiv	r3, r1, r3
 8007654:	3301      	adds	r3, #1
 8007656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800765a:	e051      	b.n	8007700 <HAL_I2C_Init+0x1dc>
 800765c:	2304      	movs	r3, #4
 800765e:	e04f      	b.n	8007700 <HAL_I2C_Init+0x1dc>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d111      	bne.n	800768c <HAL_I2C_Init+0x168>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	1e58      	subs	r0, r3, #1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6859      	ldr	r1, [r3, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	440b      	add	r3, r1
 8007676:	fbb0 f3f3 	udiv	r3, r0, r3
 800767a:	3301      	adds	r3, #1
 800767c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007680:	2b00      	cmp	r3, #0
 8007682:	bf0c      	ite	eq
 8007684:	2301      	moveq	r3, #1
 8007686:	2300      	movne	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e012      	b.n	80076b2 <HAL_I2C_Init+0x18e>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	1e58      	subs	r0, r3, #1
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6859      	ldr	r1, [r3, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	0099      	lsls	r1, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	fbb0 f3f3 	udiv	r3, r0, r3
 80076a2:	3301      	adds	r3, #1
 80076a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bf0c      	ite	eq
 80076ac:	2301      	moveq	r3, #1
 80076ae:	2300      	movne	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_I2C_Init+0x196>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e022      	b.n	8007700 <HAL_I2C_Init+0x1dc>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10e      	bne.n	80076e0 <HAL_I2C_Init+0x1bc>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1e58      	subs	r0, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6859      	ldr	r1, [r3, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	440b      	add	r3, r1
 80076d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80076d4:	3301      	adds	r3, #1
 80076d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076de:	e00f      	b.n	8007700 <HAL_I2C_Init+0x1dc>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	1e58      	subs	r0, r3, #1
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6859      	ldr	r1, [r3, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	0099      	lsls	r1, r3, #2
 80076f0:	440b      	add	r3, r1
 80076f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80076f6:	3301      	adds	r3, #1
 80076f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	6809      	ldr	r1, [r1, #0]
 8007704:	4313      	orrs	r3, r2
 8007706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69da      	ldr	r2, [r3, #28]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800772e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6911      	ldr	r1, [r2, #16]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	68d2      	ldr	r2, [r2, #12]
 800773a:	4311      	orrs	r1, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6812      	ldr	r2, [r2, #0]
 8007740:	430b      	orrs	r3, r1
 8007742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695a      	ldr	r2, [r3, #20]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0201 	orr.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	000186a0 	.word	0x000186a0
 800779c:	001e847f 	.word	0x001e847f
 80077a0:	003d08ff 	.word	0x003d08ff
 80077a4:	431bde83 	.word	0x431bde83
 80077a8:	10624dd3 	.word	0x10624dd3

080077ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	461a      	mov	r2, r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	817b      	strh	r3, [r7, #10]
 80077be:	460b      	mov	r3, r1
 80077c0:	813b      	strh	r3, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077c6:	f7fe f939 	bl	8005a3c <HAL_GetTick>
 80077ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	f040 80d9 	bne.w	800798c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	2319      	movs	r3, #25
 80077e0:	2201      	movs	r2, #1
 80077e2:	496d      	ldr	r1, [pc, #436]	@ (8007998 <HAL_I2C_Mem_Write+0x1ec>)
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fc7f 	bl	80080e8 <I2C_WaitOnFlagUntilTimeout>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80077f0:	2302      	movs	r3, #2
 80077f2:	e0cc      	b.n	800798e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <HAL_I2C_Mem_Write+0x56>
 80077fe:	2302      	movs	r3, #2
 8007800:	e0c5      	b.n	800798e <HAL_I2C_Mem_Write+0x1e2>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b01      	cmp	r3, #1
 8007816:	d007      	beq.n	8007828 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007836:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2221      	movs	r2, #33	@ 0x21
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2240      	movs	r2, #64	@ 0x40
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a3a      	ldr	r2, [r7, #32]
 8007852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007858:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4a4d      	ldr	r2, [pc, #308]	@ (800799c <HAL_I2C_Mem_Write+0x1f0>)
 8007868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800786a:	88f8      	ldrh	r0, [r7, #6]
 800786c:	893a      	ldrh	r2, [r7, #8]
 800786e:	8979      	ldrh	r1, [r7, #10]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	4603      	mov	r3, r0
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fab6 	bl	8007dec <I2C_RequestMemoryWrite>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d052      	beq.n	800792c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e081      	b.n	800798e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fd00 	bl	8008294 <I2C_WaitOnTXEFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d107      	bne.n	80078b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e06b      	b.n	800798e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ba:	781a      	ldrb	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0304 	and.w	r3, r3, #4
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d11b      	bne.n	800792c <HAL_I2C_Mem_Write+0x180>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d017      	beq.n	800792c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007916:	3b01      	subs	r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007922:	b29b      	uxth	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1aa      	bne.n	800788a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 fcec 	bl	8008316 <I2C_WaitOnBTFFlagUntilTimeout>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00d      	beq.n	8007960 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007948:	2b04      	cmp	r3, #4
 800794a:	d107      	bne.n	800795c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800795a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e016      	b.n	800798e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800796e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	e000      	b.n	800798e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800798c:	2302      	movs	r3, #2
  }
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	00100002 	.word	0x00100002
 800799c:	ffff0000 	.word	0xffff0000

080079a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08c      	sub	sp, #48	@ 0x30
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	4608      	mov	r0, r1
 80079aa:	4611      	mov	r1, r2
 80079ac:	461a      	mov	r2, r3
 80079ae:	4603      	mov	r3, r0
 80079b0:	817b      	strh	r3, [r7, #10]
 80079b2:	460b      	mov	r3, r1
 80079b4:	813b      	strh	r3, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079ba:	f7fe f83f 	bl	8005a3c <HAL_GetTick>
 80079be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	f040 8208 	bne.w	8007dde <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	2319      	movs	r3, #25
 80079d4:	2201      	movs	r2, #1
 80079d6:	497b      	ldr	r1, [pc, #492]	@ (8007bc4 <HAL_I2C_Mem_Read+0x224>)
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 fb85 	bl	80080e8 <I2C_WaitOnFlagUntilTimeout>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80079e4:	2302      	movs	r3, #2
 80079e6:	e1fb      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_I2C_Mem_Read+0x56>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e1f4      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d007      	beq.n	8007a1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0201 	orr.w	r2, r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2222      	movs	r2, #34	@ 0x22
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2240      	movs	r2, #64	@ 0x40
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8007bc8 <HAL_I2C_Mem_Read+0x228>)
 8007a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a5e:	88f8      	ldrh	r0, [r7, #6]
 8007a60:	893a      	ldrh	r2, [r7, #8]
 8007a62:	8979      	ldrh	r1, [r7, #10]
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a66:	9301      	str	r3, [sp, #4]
 8007a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fa52 	bl	8007f18 <I2C_RequestMemoryRead>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e1b0      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d113      	bne.n	8007aae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a86:	2300      	movs	r3, #0
 8007a88:	623b      	str	r3, [r7, #32]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	623b      	str	r3, [r7, #32]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	623b      	str	r3, [r7, #32]
 8007a9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	e184      	b.n	8007db8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d11b      	bne.n	8007aee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ac4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	61fb      	str	r3, [r7, #28]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	61fb      	str	r3, [r7, #28]
 8007ada:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e164      	b.n	8007db8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d11b      	bne.n	8007b2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b16:	2300      	movs	r3, #0
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	e144      	b.n	8007db8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b44:	e138      	b.n	8007db8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	f200 80f1 	bhi.w	8007d32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d123      	bne.n	8007ba0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fc1b 	bl	8008398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e139      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691a      	ldr	r2, [r3, #16]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b9e:	e10b      	b.n	8007db8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d14e      	bne.n	8007c46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4906      	ldr	r1, [pc, #24]	@ (8007bcc <HAL_I2C_Mem_Read+0x22c>)
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fa98 	bl	80080e8 <I2C_WaitOnFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e10e      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
 8007bc2:	bf00      	nop
 8007bc4:	00100002 	.word	0x00100002
 8007bc8:	ffff0000 	.word	0xffff0000
 8007bcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007c44:	e0b8      	b.n	8007db8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4966      	ldr	r1, [pc, #408]	@ (8007de8 <HAL_I2C_Mem_Read+0x448>)
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fa49 	bl	80080e8 <I2C_WaitOnFlagUntilTimeout>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e0bf      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca8:	2200      	movs	r2, #0
 8007caa:	494f      	ldr	r1, [pc, #316]	@ (8007de8 <HAL_I2C_Mem_Read+0x448>)
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fa1b 	bl	80080e8 <I2C_WaitOnFlagUntilTimeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e091      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691a      	ldr	r2, [r3, #16]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	691a      	ldr	r2, [r3, #16]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d08:	b2d2      	uxtb	r2, r2
 8007d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d30:	e042      	b.n	8007db8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fb2e 	bl	8008398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e04c      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d118      	bne.n	8007db8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3b01      	subs	r3, #1
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f47f aec2 	bne.w	8007b46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e000      	b.n	8007de0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007dde:	2302      	movs	r3, #2
  }
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3728      	adds	r7, #40	@ 0x28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	00010004 	.word	0x00010004

08007dec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	461a      	mov	r2, r3
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	817b      	strh	r3, [r7, #10]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	813b      	strh	r3, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f960 	bl	80080e8 <I2C_WaitOnFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00d      	beq.n	8007e4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e3c:	d103      	bne.n	8007e46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e05f      	b.n	8007f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e4a:	897b      	ldrh	r3, [r7, #10]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	6a3a      	ldr	r2, [r7, #32]
 8007e5e:	492d      	ldr	r1, [pc, #180]	@ (8007f14 <I2C_RequestMemoryWrite+0x128>)
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f998 	bl	8008196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e04c      	b.n	8007f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e88:	6a39      	ldr	r1, [r7, #32]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fa02 	bl	8008294 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00d      	beq.n	8007eb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d107      	bne.n	8007eae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e02b      	b.n	8007f0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d105      	bne.n	8007ec4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eb8:	893b      	ldrh	r3, [r7, #8]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	611a      	str	r2, [r3, #16]
 8007ec2:	e021      	b.n	8007f08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ec4:	893b      	ldrh	r3, [r7, #8]
 8007ec6:	0a1b      	lsrs	r3, r3, #8
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed4:	6a39      	ldr	r1, [r7, #32]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f9dc 	bl	8008294 <I2C_WaitOnTXEFlagUntilTimeout>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00d      	beq.n	8007efe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d107      	bne.n	8007efa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e005      	b.n	8007f0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007efe:	893b      	ldrh	r3, [r7, #8]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	00010002 	.word	0x00010002

08007f18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	4608      	mov	r0, r1
 8007f22:	4611      	mov	r1, r2
 8007f24:	461a      	mov	r2, r3
 8007f26:	4603      	mov	r3, r0
 8007f28:	817b      	strh	r3, [r7, #10]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	813b      	strh	r3, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 f8c2 	bl	80080e8 <I2C_WaitOnFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00d      	beq.n	8007f86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f78:	d103      	bne.n	8007f82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e0aa      	b.n	80080dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f86:	897b      	ldrh	r3, [r7, #10]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007f94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	6a3a      	ldr	r2, [r7, #32]
 8007f9a:	4952      	ldr	r1, [pc, #328]	@ (80080e4 <I2C_RequestMemoryRead+0x1cc>)
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f8fa 	bl	8008196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e097      	b.n	80080dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc4:	6a39      	ldr	r1, [r7, #32]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 f964 	bl	8008294 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00d      	beq.n	8007fee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d107      	bne.n	8007fea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e076      	b.n	80080dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d105      	bne.n	8008000 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ff4:	893b      	ldrh	r3, [r7, #8]
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	611a      	str	r2, [r3, #16]
 8007ffe:	e021      	b.n	8008044 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008000:	893b      	ldrh	r3, [r7, #8]
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	b29b      	uxth	r3, r3
 8008006:	b2da      	uxtb	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800800e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008010:	6a39      	ldr	r1, [r7, #32]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f93e 	bl	8008294 <I2C_WaitOnTXEFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00d      	beq.n	800803a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008022:	2b04      	cmp	r3, #4
 8008024:	d107      	bne.n	8008036 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008034:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e050      	b.n	80080dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800803a:	893b      	ldrh	r3, [r7, #8]
 800803c:	b2da      	uxtb	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008046:	6a39      	ldr	r1, [r7, #32]
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 f923 	bl	8008294 <I2C_WaitOnTXEFlagUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00d      	beq.n	8008070 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008058:	2b04      	cmp	r3, #4
 800805a:	d107      	bne.n	800806c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800806a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e035      	b.n	80080dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800807e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	2200      	movs	r2, #0
 8008088:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 f82b 	bl	80080e8 <I2C_WaitOnFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00d      	beq.n	80080b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a6:	d103      	bne.n	80080b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e013      	b.n	80080dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080b4:	897b      	ldrh	r3, [r7, #10]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f043 0301 	orr.w	r3, r3, #1
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	6a3a      	ldr	r2, [r7, #32]
 80080c8:	4906      	ldr	r1, [pc, #24]	@ (80080e4 <I2C_RequestMemoryRead+0x1cc>)
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f863 	bl	8008196 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	00010002 	.word	0x00010002

080080e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	4613      	mov	r3, r2
 80080f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080f8:	e025      	b.n	8008146 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008100:	d021      	beq.n	8008146 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008102:	f7fd fc9b 	bl	8005a3c <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d302      	bcc.n	8008118 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d116      	bne.n	8008146 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008132:	f043 0220 	orr.w	r2, r3, #32
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e023      	b.n	800818e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	0c1b      	lsrs	r3, r3, #16
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	d10d      	bne.n	800816c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	43da      	mvns	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4013      	ands	r3, r2
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	e00c      	b.n	8008186 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	43da      	mvns	r2, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	4013      	ands	r3, r2
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	bf0c      	ite	eq
 800817e:	2301      	moveq	r3, #1
 8008180:	2300      	movne	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	461a      	mov	r2, r3
 8008186:	79fb      	ldrb	r3, [r7, #7]
 8008188:	429a      	cmp	r2, r3
 800818a:	d0b6      	beq.n	80080fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	607a      	str	r2, [r7, #4]
 80081a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081a4:	e051      	b.n	800824a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081b4:	d123      	bne.n	80081fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80081ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2220      	movs	r2, #32
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ea:	f043 0204 	orr.w	r2, r3, #4
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e046      	b.n	800828c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008204:	d021      	beq.n	800824a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008206:	f7fd fc19 	bl	8005a3c <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	d302      	bcc.n	800821c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d116      	bne.n	800824a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e020      	b.n	800828c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	0c1b      	lsrs	r3, r3, #16
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	d10c      	bne.n	800826e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	43da      	mvns	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4013      	ands	r3, r2
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	bf14      	ite	ne
 8008266:	2301      	movne	r3, #1
 8008268:	2300      	moveq	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	e00b      	b.n	8008286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	43da      	mvns	r2, r3
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4013      	ands	r3, r2
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	bf14      	ite	ne
 8008280:	2301      	movne	r3, #1
 8008282:	2300      	moveq	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d18d      	bne.n	80081a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082a0:	e02d      	b.n	80082fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f8ce 	bl	8008444 <I2C_IsAcknowledgeFailed>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e02d      	b.n	800830e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082b8:	d021      	beq.n	80082fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ba:	f7fd fbbf 	bl	8005a3c <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d302      	bcc.n	80082d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d116      	bne.n	80082fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ea:	f043 0220 	orr.w	r2, r3, #32
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e007      	b.n	800830e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008308:	2b80      	cmp	r3, #128	@ 0x80
 800830a:	d1ca      	bne.n	80082a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008322:	e02d      	b.n	8008380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f88d 	bl	8008444 <I2C_IsAcknowledgeFailed>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e02d      	b.n	8008390 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800833a:	d021      	beq.n	8008380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800833c:	f7fd fb7e 	bl	8005a3c <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	429a      	cmp	r2, r3
 800834a:	d302      	bcc.n	8008352 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d116      	bne.n	8008380 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836c:	f043 0220 	orr.w	r2, r3, #32
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e007      	b.n	8008390 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	2b04      	cmp	r3, #4
 800838c:	d1ca      	bne.n	8008324 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083a4:	e042      	b.n	800842c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b10      	cmp	r3, #16
 80083b2:	d119      	bne.n	80083e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0210 	mvn.w	r2, #16
 80083bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e029      	b.n	800843c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e8:	f7fd fb28 	bl	8005a3c <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d302      	bcc.n	80083fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d116      	bne.n	800842c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008418:	f043 0220 	orr.w	r2, r3, #32
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e007      	b.n	800843c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008436:	2b40      	cmp	r3, #64	@ 0x40
 8008438:	d1b5      	bne.n	80083a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845a:	d11b      	bne.n	8008494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008480:	f043 0204 	orr.w	r2, r3, #4
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e000      	b.n	8008496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
	...

080084a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e267      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d075      	beq.n	80085ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084c2:	4b88      	ldr	r3, [pc, #544]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 030c 	and.w	r3, r3, #12
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d00c      	beq.n	80084e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084ce:	4b85      	ldr	r3, [pc, #532]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084d6:	2b08      	cmp	r3, #8
 80084d8:	d112      	bne.n	8008500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084da:	4b82      	ldr	r3, [pc, #520]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084e6:	d10b      	bne.n	8008500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e8:	4b7e      	ldr	r3, [pc, #504]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d05b      	beq.n	80085ac <HAL_RCC_OscConfig+0x108>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d157      	bne.n	80085ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e242      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008508:	d106      	bne.n	8008518 <HAL_RCC_OscConfig+0x74>
 800850a:	4b76      	ldr	r3, [pc, #472]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a75      	ldr	r2, [pc, #468]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	e01d      	b.n	8008554 <HAL_RCC_OscConfig+0xb0>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008520:	d10c      	bne.n	800853c <HAL_RCC_OscConfig+0x98>
 8008522:	4b70      	ldr	r3, [pc, #448]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a6f      	ldr	r2, [pc, #444]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	4b6d      	ldr	r3, [pc, #436]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a6c      	ldr	r2, [pc, #432]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	e00b      	b.n	8008554 <HAL_RCC_OscConfig+0xb0>
 800853c:	4b69      	ldr	r3, [pc, #420]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a68      	ldr	r2, [pc, #416]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	4b66      	ldr	r3, [pc, #408]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a65      	ldr	r2, [pc, #404]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 800854e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d013      	beq.n	8008584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800855c:	f7fd fa6e 	bl	8005a3c <HAL_GetTick>
 8008560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008564:	f7fd fa6a 	bl	8005a3c <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b64      	cmp	r3, #100	@ 0x64
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e207      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008576:	4b5b      	ldr	r3, [pc, #364]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f0      	beq.n	8008564 <HAL_RCC_OscConfig+0xc0>
 8008582:	e014      	b.n	80085ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008584:	f7fd fa5a 	bl	8005a3c <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800858c:	f7fd fa56 	bl	8005a3c <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b64      	cmp	r3, #100	@ 0x64
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e1f3      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800859e:	4b51      	ldr	r3, [pc, #324]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1f0      	bne.n	800858c <HAL_RCC_OscConfig+0xe8>
 80085aa:	e000      	b.n	80085ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d063      	beq.n	8008682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ba:	4b4a      	ldr	r3, [pc, #296]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 030c 	and.w	r3, r3, #12
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00b      	beq.n	80085de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085c6:	4b47      	ldr	r3, [pc, #284]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ce:	2b08      	cmp	r3, #8
 80085d0:	d11c      	bne.n	800860c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085d2:	4b44      	ldr	r3, [pc, #272]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d116      	bne.n	800860c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085de:	4b41      	ldr	r3, [pc, #260]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <HAL_RCC_OscConfig+0x152>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d001      	beq.n	80085f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e1c7      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085f6:	4b3b      	ldr	r3, [pc, #236]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4937      	ldr	r1, [pc, #220]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008606:	4313      	orrs	r3, r2
 8008608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800860a:	e03a      	b.n	8008682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d020      	beq.n	8008656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008614:	4b34      	ldr	r3, [pc, #208]	@ (80086e8 <HAL_RCC_OscConfig+0x244>)
 8008616:	2201      	movs	r2, #1
 8008618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861a:	f7fd fa0f 	bl	8005a3c <HAL_GetTick>
 800861e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008620:	e008      	b.n	8008634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008622:	f7fd fa0b 	bl	8005a3c <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	2b02      	cmp	r3, #2
 800862e:	d901      	bls.n	8008634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e1a8      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008634:	4b2b      	ldr	r3, [pc, #172]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0f0      	beq.n	8008622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008640:	4b28      	ldr	r3, [pc, #160]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	4925      	ldr	r1, [pc, #148]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008650:	4313      	orrs	r3, r2
 8008652:	600b      	str	r3, [r1, #0]
 8008654:	e015      	b.n	8008682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008656:	4b24      	ldr	r3, [pc, #144]	@ (80086e8 <HAL_RCC_OscConfig+0x244>)
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865c:	f7fd f9ee 	bl	8005a3c <HAL_GetTick>
 8008660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008662:	e008      	b.n	8008676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008664:	f7fd f9ea 	bl	8005a3c <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e187      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008676:	4b1b      	ldr	r3, [pc, #108]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1f0      	bne.n	8008664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0308 	and.w	r3, r3, #8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d036      	beq.n	80086fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d016      	beq.n	80086c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008696:	4b15      	ldr	r3, [pc, #84]	@ (80086ec <HAL_RCC_OscConfig+0x248>)
 8008698:	2201      	movs	r2, #1
 800869a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800869c:	f7fd f9ce 	bl	8005a3c <HAL_GetTick>
 80086a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086a4:	f7fd f9ca 	bl	8005a3c <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e167      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086b6:	4b0b      	ldr	r3, [pc, #44]	@ (80086e4 <HAL_RCC_OscConfig+0x240>)
 80086b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d0f0      	beq.n	80086a4 <HAL_RCC_OscConfig+0x200>
 80086c2:	e01b      	b.n	80086fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086c4:	4b09      	ldr	r3, [pc, #36]	@ (80086ec <HAL_RCC_OscConfig+0x248>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ca:	f7fd f9b7 	bl	8005a3c <HAL_GetTick>
 80086ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086d0:	e00e      	b.n	80086f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086d2:	f7fd f9b3 	bl	8005a3c <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d907      	bls.n	80086f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e150      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
 80086e4:	40023800 	.word	0x40023800
 80086e8:	42470000 	.word	0x42470000
 80086ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086f0:	4b88      	ldr	r3, [pc, #544]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80086f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1ea      	bne.n	80086d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 8097 	beq.w	8008838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800870a:	2300      	movs	r3, #0
 800870c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800870e:	4b81      	ldr	r3, [pc, #516]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10f      	bne.n	800873a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800871a:	2300      	movs	r3, #0
 800871c:	60bb      	str	r3, [r7, #8]
 800871e:	4b7d      	ldr	r3, [pc, #500]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008722:	4a7c      	ldr	r2, [pc, #496]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008728:	6413      	str	r3, [r2, #64]	@ 0x40
 800872a:	4b7a      	ldr	r3, [pc, #488]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 800872c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008732:	60bb      	str	r3, [r7, #8]
 8008734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008736:	2301      	movs	r3, #1
 8008738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800873a:	4b77      	ldr	r3, [pc, #476]	@ (8008918 <HAL_RCC_OscConfig+0x474>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008742:	2b00      	cmp	r3, #0
 8008744:	d118      	bne.n	8008778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008746:	4b74      	ldr	r3, [pc, #464]	@ (8008918 <HAL_RCC_OscConfig+0x474>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a73      	ldr	r2, [pc, #460]	@ (8008918 <HAL_RCC_OscConfig+0x474>)
 800874c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008752:	f7fd f973 	bl	8005a3c <HAL_GetTick>
 8008756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800875a:	f7fd f96f 	bl	8005a3c <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e10c      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800876c:	4b6a      	ldr	r3, [pc, #424]	@ (8008918 <HAL_RCC_OscConfig+0x474>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008774:	2b00      	cmp	r3, #0
 8008776:	d0f0      	beq.n	800875a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d106      	bne.n	800878e <HAL_RCC_OscConfig+0x2ea>
 8008780:	4b64      	ldr	r3, [pc, #400]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008784:	4a63      	ldr	r2, [pc, #396]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	6713      	str	r3, [r2, #112]	@ 0x70
 800878c:	e01c      	b.n	80087c8 <HAL_RCC_OscConfig+0x324>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	2b05      	cmp	r3, #5
 8008794:	d10c      	bne.n	80087b0 <HAL_RCC_OscConfig+0x30c>
 8008796:	4b5f      	ldr	r3, [pc, #380]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800879a:	4a5e      	ldr	r2, [pc, #376]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 800879c:	f043 0304 	orr.w	r3, r3, #4
 80087a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80087a2:	4b5c      	ldr	r3, [pc, #368]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80087a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a6:	4a5b      	ldr	r2, [pc, #364]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80087ae:	e00b      	b.n	80087c8 <HAL_RCC_OscConfig+0x324>
 80087b0:	4b58      	ldr	r3, [pc, #352]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80087b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b4:	4a57      	ldr	r2, [pc, #348]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80087b6:	f023 0301 	bic.w	r3, r3, #1
 80087ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80087bc:	4b55      	ldr	r3, [pc, #340]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80087be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087c0:	4a54      	ldr	r2, [pc, #336]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80087c2:	f023 0304 	bic.w	r3, r3, #4
 80087c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d015      	beq.n	80087fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d0:	f7fd f934 	bl	8005a3c <HAL_GetTick>
 80087d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087d6:	e00a      	b.n	80087ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087d8:	f7fd f930 	bl	8005a3c <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e0cb      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ee:	4b49      	ldr	r3, [pc, #292]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0ee      	beq.n	80087d8 <HAL_RCC_OscConfig+0x334>
 80087fa:	e014      	b.n	8008826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087fc:	f7fd f91e 	bl	8005a3c <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008802:	e00a      	b.n	800881a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008804:	f7fd f91a 	bl	8005a3c <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008812:	4293      	cmp	r3, r2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e0b5      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800881a:	4b3e      	ldr	r3, [pc, #248]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 800881c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1ee      	bne.n	8008804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d105      	bne.n	8008838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800882c:	4b39      	ldr	r3, [pc, #228]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	4a38      	ldr	r2, [pc, #224]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008836:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 80a1 	beq.w	8008984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008842:	4b34      	ldr	r3, [pc, #208]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f003 030c 	and.w	r3, r3, #12
 800884a:	2b08      	cmp	r3, #8
 800884c:	d05c      	beq.n	8008908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d141      	bne.n	80088da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008856:	4b31      	ldr	r3, [pc, #196]	@ (800891c <HAL_RCC_OscConfig+0x478>)
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800885c:	f7fd f8ee 	bl	8005a3c <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008864:	f7fd f8ea 	bl	8005a3c <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e087      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008876:	4b27      	ldr	r3, [pc, #156]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f0      	bne.n	8008864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69da      	ldr	r2, [r3, #28]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008890:	019b      	lsls	r3, r3, #6
 8008892:	431a      	orrs	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	3b01      	subs	r3, #1
 800889c:	041b      	lsls	r3, r3, #16
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a4:	061b      	lsls	r3, r3, #24
 80088a6:	491b      	ldr	r1, [pc, #108]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088ac:	4b1b      	ldr	r3, [pc, #108]	@ (800891c <HAL_RCC_OscConfig+0x478>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b2:	f7fd f8c3 	bl	8005a3c <HAL_GetTick>
 80088b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088b8:	e008      	b.n	80088cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088ba:	f7fd f8bf 	bl	8005a3c <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e05c      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088cc:	4b11      	ldr	r3, [pc, #68]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0f0      	beq.n	80088ba <HAL_RCC_OscConfig+0x416>
 80088d8:	e054      	b.n	8008984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088da:	4b10      	ldr	r3, [pc, #64]	@ (800891c <HAL_RCC_OscConfig+0x478>)
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e0:	f7fd f8ac 	bl	8005a3c <HAL_GetTick>
 80088e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088e6:	e008      	b.n	80088fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088e8:	f7fd f8a8 	bl	8005a3c <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e045      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088fa:	4b06      	ldr	r3, [pc, #24]	@ (8008914 <HAL_RCC_OscConfig+0x470>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1f0      	bne.n	80088e8 <HAL_RCC_OscConfig+0x444>
 8008906:	e03d      	b.n	8008984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d107      	bne.n	8008920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e038      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
 8008914:	40023800 	.word	0x40023800
 8008918:	40007000 	.word	0x40007000
 800891c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008920:	4b1b      	ldr	r3, [pc, #108]	@ (8008990 <HAL_RCC_OscConfig+0x4ec>)
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d028      	beq.n	8008980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008938:	429a      	cmp	r2, r3
 800893a:	d121      	bne.n	8008980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008946:	429a      	cmp	r2, r3
 8008948:	d11a      	bne.n	8008980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008950:	4013      	ands	r3, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008958:	4293      	cmp	r3, r2
 800895a:	d111      	bne.n	8008980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008966:	085b      	lsrs	r3, r3, #1
 8008968:	3b01      	subs	r3, #1
 800896a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800896c:	429a      	cmp	r2, r3
 800896e:	d107      	bne.n	8008980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800897c:	429a      	cmp	r2, r3
 800897e:	d001      	beq.n	8008984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	40023800 	.word	0x40023800

08008994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e0cc      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089a8:	4b68      	ldr	r3, [pc, #416]	@ (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0307 	and.w	r3, r3, #7
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d90c      	bls.n	80089d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089b6:	4b65      	ldr	r3, [pc, #404]	@ (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089be:	4b63      	ldr	r3, [pc, #396]	@ (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d001      	beq.n	80089d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0b8      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d020      	beq.n	8008a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089e8:	4b59      	ldr	r3, [pc, #356]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	4a58      	ldr	r2, [pc, #352]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 80089ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80089f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0308 	and.w	r3, r3, #8
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a00:	4b53      	ldr	r3, [pc, #332]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	4a52      	ldr	r2, [pc, #328]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a0c:	4b50      	ldr	r3, [pc, #320]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	494d      	ldr	r1, [pc, #308]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d044      	beq.n	8008ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d107      	bne.n	8008a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a32:	4b47      	ldr	r3, [pc, #284]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d119      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e07f      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d003      	beq.n	8008a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d107      	bne.n	8008a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a52:	4b3f      	ldr	r3, [pc, #252]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d109      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e06f      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a62:	4b3b      	ldr	r3, [pc, #236]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e067      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a72:	4b37      	ldr	r3, [pc, #220]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f023 0203 	bic.w	r2, r3, #3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4934      	ldr	r1, [pc, #208]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a84:	f7fc ffda 	bl	8005a3c <HAL_GetTick>
 8008a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a8a:	e00a      	b.n	8008aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a8c:	f7fc ffd6 	bl	8005a3c <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e04f      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 020c 	and.w	r2, r3, #12
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d1eb      	bne.n	8008a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ab4:	4b25      	ldr	r3, [pc, #148]	@ (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d20c      	bcs.n	8008adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac2:	4b22      	ldr	r3, [pc, #136]	@ (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aca:	4b20      	ldr	r3, [pc, #128]	@ (8008b4c <HAL_RCC_ClockConfig+0x1b8>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d001      	beq.n	8008adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e032      	b.n	8008b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d008      	beq.n	8008afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ae8:	4b19      	ldr	r3, [pc, #100]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	4916      	ldr	r1, [pc, #88]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b06:	4b12      	ldr	r3, [pc, #72]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	490e      	ldr	r1, [pc, #56]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b1a:	f000 f82d 	bl	8008b78 <HAL_RCC_GetSysClockFreq>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	4b0b      	ldr	r3, [pc, #44]	@ (8008b50 <HAL_RCC_ClockConfig+0x1bc>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	091b      	lsrs	r3, r3, #4
 8008b26:	f003 030f 	and.w	r3, r3, #15
 8008b2a:	490a      	ldr	r1, [pc, #40]	@ (8008b54 <HAL_RCC_ClockConfig+0x1c0>)
 8008b2c:	5ccb      	ldrb	r3, [r1, r3]
 8008b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b32:	4a09      	ldr	r2, [pc, #36]	@ (8008b58 <HAL_RCC_ClockConfig+0x1c4>)
 8008b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b36:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <HAL_RCC_ClockConfig+0x1c8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fc ff3a 	bl	80059b4 <HAL_InitTick>

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40023c00 	.word	0x40023c00
 8008b50:	40023800 	.word	0x40023800
 8008b54:	08011fe0 	.word	0x08011fe0
 8008b58:	20000060 	.word	0x20000060
 8008b5c:	20000064 	.word	0x20000064

08008b60 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008b64:	4b03      	ldr	r3, [pc, #12]	@ (8008b74 <HAL_RCC_EnableCSS+0x14>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	601a      	str	r2, [r3, #0]
}
 8008b6a:	bf00      	nop
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	4247004c 	.word	0x4247004c

08008b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b7c:	b090      	sub	sp, #64	@ 0x40
 8008b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b84:	2300      	movs	r3, #0
 8008b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b88:	2300      	movs	r3, #0
 8008b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b90:	4b59      	ldr	r3, [pc, #356]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f003 030c 	and.w	r3, r3, #12
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d00d      	beq.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	f200 80a1 	bhi.w	8008ce4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <HAL_RCC_GetSysClockFreq+0x34>
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d003      	beq.n	8008bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008baa:	e09b      	b.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bac:	4b53      	ldr	r3, [pc, #332]	@ (8008cfc <HAL_RCC_GetSysClockFreq+0x184>)
 8008bae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008bb0:	e09b      	b.n	8008cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bb2:	4b53      	ldr	r3, [pc, #332]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8008bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bb6:	e098      	b.n	8008cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d028      	beq.n	8008c20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bce:	4b4a      	ldr	r3, [pc, #296]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	099b      	lsrs	r3, r3, #6
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	623b      	str	r3, [r7, #32]
 8008bd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008be0:	2100      	movs	r1, #0
 8008be2:	4b47      	ldr	r3, [pc, #284]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8008be4:	fb03 f201 	mul.w	r2, r3, r1
 8008be8:	2300      	movs	r3, #0
 8008bea:	fb00 f303 	mul.w	r3, r0, r3
 8008bee:	4413      	add	r3, r2
 8008bf0:	4a43      	ldr	r2, [pc, #268]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x188>)
 8008bf2:	fba0 1202 	umull	r1, r2, r0, r2
 8008bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bfe:	4413      	add	r3, r2
 8008c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c04:	2200      	movs	r2, #0
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	61fa      	str	r2, [r7, #28]
 8008c0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008c12:	f7f7 ffc9 	bl	8000ba8 <__aeabi_uldivmod>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c1e:	e053      	b.n	8008cc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c20:	4b35      	ldr	r3, [pc, #212]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	099b      	lsrs	r3, r3, #6
 8008c26:	2200      	movs	r2, #0
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	617a      	str	r2, [r7, #20]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008c32:	f04f 0b00 	mov.w	fp, #0
 8008c36:	4652      	mov	r2, sl
 8008c38:	465b      	mov	r3, fp
 8008c3a:	f04f 0000 	mov.w	r0, #0
 8008c3e:	f04f 0100 	mov.w	r1, #0
 8008c42:	0159      	lsls	r1, r3, #5
 8008c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c48:	0150      	lsls	r0, r2, #5
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	ebb2 080a 	subs.w	r8, r2, sl
 8008c52:	eb63 090b 	sbc.w	r9, r3, fp
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	f04f 0300 	mov.w	r3, #0
 8008c5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008c62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008c66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008c6a:	ebb2 0408 	subs.w	r4, r2, r8
 8008c6e:	eb63 0509 	sbc.w	r5, r3, r9
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	f04f 0300 	mov.w	r3, #0
 8008c7a:	00eb      	lsls	r3, r5, #3
 8008c7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c80:	00e2      	lsls	r2, r4, #3
 8008c82:	4614      	mov	r4, r2
 8008c84:	461d      	mov	r5, r3
 8008c86:	eb14 030a 	adds.w	r3, r4, sl
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	eb45 030b 	adc.w	r3, r5, fp
 8008c90:	607b      	str	r3, [r7, #4]
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	f04f 0300 	mov.w	r3, #0
 8008c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	028b      	lsls	r3, r1, #10
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ca8:	4621      	mov	r1, r4
 8008caa:	028a      	lsls	r2, r1, #10
 8008cac:	4610      	mov	r0, r2
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	60bb      	str	r3, [r7, #8]
 8008cb6:	60fa      	str	r2, [r7, #12]
 8008cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cbc:	f7f7 ff74 	bl	8000ba8 <__aeabi_uldivmod>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	0c1b      	lsrs	r3, r3, #16
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008cd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ce2:	e002      	b.n	8008cea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ce4:	4b05      	ldr	r3, [pc, #20]	@ (8008cfc <HAL_RCC_GetSysClockFreq+0x184>)
 8008ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3740      	adds	r7, #64	@ 0x40
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cf6:	bf00      	nop
 8008cf8:	40023800 	.word	0x40023800
 8008cfc:	00f42400 	.word	0x00f42400
 8008d00:	00b71b00 	.word	0x00b71b00

08008d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d08:	4b03      	ldr	r3, [pc, #12]	@ (8008d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	20000060 	.word	0x20000060

08008d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d20:	f7ff fff0 	bl	8008d04 <HAL_RCC_GetHCLKFreq>
 8008d24:	4602      	mov	r2, r0
 8008d26:	4b05      	ldr	r3, [pc, #20]	@ (8008d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	0a9b      	lsrs	r3, r3, #10
 8008d2c:	f003 0307 	and.w	r3, r3, #7
 8008d30:	4903      	ldr	r1, [pc, #12]	@ (8008d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d32:	5ccb      	ldrb	r3, [r1, r3]
 8008d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	40023800 	.word	0x40023800
 8008d40:	08011ff0 	.word	0x08011ff0

08008d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d48:	f7ff ffdc 	bl	8008d04 <HAL_RCC_GetHCLKFreq>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	4b05      	ldr	r3, [pc, #20]	@ (8008d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	0b5b      	lsrs	r3, r3, #13
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	4903      	ldr	r1, [pc, #12]	@ (8008d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d5a:	5ccb      	ldrb	r3, [r1, r3]
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	40023800 	.word	0x40023800
 8008d68:	08011ff0 	.word	0x08011ff0

08008d6c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008d70:	4b06      	ldr	r3, [pc, #24]	@ (8008d8c <HAL_RCC_NMI_IRQHandler+0x20>)
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d78:	2b80      	cmp	r3, #128	@ 0x80
 8008d7a:	d104      	bne.n	8008d86 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008d7c:	f000 f80a 	bl	8008d94 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008d80:	4b03      	ldr	r3, [pc, #12]	@ (8008d90 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008d82:	2280      	movs	r2, #128	@ 0x80
 8008d84:	701a      	strb	r2, [r3, #0]
  }
}
 8008d86:	bf00      	nop
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	4002380e 	.word	0x4002380e

08008d94 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e07b      	b.n	8008eac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d108      	bne.n	8008dce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dc4:	d009      	beq.n	8008dda <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	61da      	str	r2, [r3, #28]
 8008dcc:	e005      	b.n	8008dda <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d106      	bne.n	8008dfa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7fc f881 	bl	8004efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008e22:	431a      	orrs	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e2c:	431a      	orrs	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	431a      	orrs	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	431a      	orrs	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e54:	431a      	orrs	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e5e:	ea42 0103 	orr.w	r1, r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	0c1b      	lsrs	r3, r3, #16
 8008e78:	f003 0104 	and.w	r1, r3, #4
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e80:	f003 0210 	and.w	r2, r3, #16
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	69da      	ldr	r2, [r3, #28]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08c      	sub	sp, #48	@ 0x30
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d101      	bne.n	8008eda <HAL_SPI_TransmitReceive+0x26>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	e18a      	b.n	80091f0 <HAL_SPI_TransmitReceive+0x33c>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ee2:	f7fc fdab 	bl	8005a3c <HAL_GetTick>
 8008ee6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008ef8:	887b      	ldrh	r3, [r7, #2]
 8008efa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008efc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d00f      	beq.n	8008f24 <HAL_SPI_TransmitReceive+0x70>
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f0a:	d107      	bne.n	8008f1c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d103      	bne.n	8008f1c <HAL_SPI_TransmitReceive+0x68>
 8008f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d003      	beq.n	8008f24 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008f22:	e15b      	b.n	80091dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <HAL_SPI_TransmitReceive+0x82>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <HAL_SPI_TransmitReceive+0x82>
 8008f30:	887b      	ldrh	r3, [r7, #2]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d103      	bne.n	8008f3e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008f3c:	e14e      	b.n	80091dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d003      	beq.n	8008f52 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2205      	movs	r2, #5
 8008f4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	887a      	ldrh	r2, [r7, #2]
 8008f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	887a      	ldrh	r2, [r7, #2]
 8008f68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	887a      	ldrh	r2, [r7, #2]
 8008f74:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	887a      	ldrh	r2, [r7, #2]
 8008f7a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f92:	2b40      	cmp	r3, #64	@ 0x40
 8008f94:	d007      	beq.n	8008fa6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fae:	d178      	bne.n	80090a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <HAL_SPI_TransmitReceive+0x10a>
 8008fb8:	8b7b      	ldrh	r3, [r7, #26]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d166      	bne.n	800908c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc2:	881a      	ldrh	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fce:	1c9a      	adds	r2, r3, #2
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fe2:	e053      	b.n	800908c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 0302 	and.w	r3, r3, #2
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d11b      	bne.n	800902a <HAL_SPI_TransmitReceive+0x176>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d016      	beq.n	800902a <HAL_SPI_TransmitReceive+0x176>
 8008ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d113      	bne.n	800902a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009006:	881a      	ldrh	r2, [r3, #0]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009012:	1c9a      	adds	r2, r3, #2
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800901c:	b29b      	uxth	r3, r3
 800901e:	3b01      	subs	r3, #1
 8009020:	b29a      	uxth	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b01      	cmp	r3, #1
 8009036:	d119      	bne.n	800906c <HAL_SPI_TransmitReceive+0x1b8>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800903c:	b29b      	uxth	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d014      	beq.n	800906c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904c:	b292      	uxth	r2, r2
 800904e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009054:	1c9a      	adds	r2, r3, #2
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800905e:	b29b      	uxth	r3, r3
 8009060:	3b01      	subs	r3, #1
 8009062:	b29a      	uxth	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009068:	2301      	movs	r3, #1
 800906a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800906c:	f7fc fce6 	bl	8005a3c <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009078:	429a      	cmp	r2, r3
 800907a:	d807      	bhi.n	800908c <HAL_SPI_TransmitReceive+0x1d8>
 800907c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009082:	d003      	beq.n	800908c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800908a:	e0a7      	b.n	80091dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1a6      	bne.n	8008fe4 <HAL_SPI_TransmitReceive+0x130>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800909a:	b29b      	uxth	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1a1      	bne.n	8008fe4 <HAL_SPI_TransmitReceive+0x130>
 80090a0:	e07c      	b.n	800919c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <HAL_SPI_TransmitReceive+0x1fc>
 80090aa:	8b7b      	ldrh	r3, [r7, #26]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d16b      	bne.n	8009188 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	330c      	adds	r3, #12
 80090ba:	7812      	ldrb	r2, [r2, #0]
 80090bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090d6:	e057      	b.n	8009188 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d11c      	bne.n	8009120 <HAL_SPI_TransmitReceive+0x26c>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d017      	beq.n	8009120 <HAL_SPI_TransmitReceive+0x26c>
 80090f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d114      	bne.n	8009120 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	330c      	adds	r3, #12
 8009100:	7812      	ldrb	r2, [r2, #0]
 8009102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009112:	b29b      	uxth	r3, r3
 8009114:	3b01      	subs	r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b01      	cmp	r3, #1
 800912c:	d119      	bne.n	8009162 <HAL_SPI_TransmitReceive+0x2ae>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009132:	b29b      	uxth	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d014      	beq.n	8009162 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800915e:	2301      	movs	r3, #1
 8009160:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009162:	f7fc fc6b 	bl	8005a3c <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800916e:	429a      	cmp	r2, r3
 8009170:	d803      	bhi.n	800917a <HAL_SPI_TransmitReceive+0x2c6>
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009178:	d102      	bne.n	8009180 <HAL_SPI_TransmitReceive+0x2cc>
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	2b00      	cmp	r3, #0
 800917e:	d103      	bne.n	8009188 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8009186:	e029      	b.n	80091dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800918c:	b29b      	uxth	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1a2      	bne.n	80090d8 <HAL_SPI_TransmitReceive+0x224>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009196:	b29b      	uxth	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d19d      	bne.n	80090d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800919c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800919e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 f8b1 	bl	8009308 <SPI_EndRxTxTransaction>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2220      	movs	r2, #32
 80091b6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80091b8:	e010      	b.n	80091dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10b      	bne.n	80091da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091c2:	2300      	movs	r3, #0
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	617b      	str	r3, [r7, #20]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	e000      	b.n	80091dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80091da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80091ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3730      	adds	r7, #48	@ 0x30
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	4613      	mov	r3, r2
 8009206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009208:	f7fc fc18 	bl	8005a3c <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009210:	1a9b      	subs	r3, r3, r2
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	4413      	add	r3, r2
 8009216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009218:	f7fc fc10 	bl	8005a3c <HAL_GetTick>
 800921c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800921e:	4b39      	ldr	r3, [pc, #228]	@ (8009304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	015b      	lsls	r3, r3, #5
 8009224:	0d1b      	lsrs	r3, r3, #20
 8009226:	69fa      	ldr	r2, [r7, #28]
 8009228:	fb02 f303 	mul.w	r3, r2, r3
 800922c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800922e:	e054      	b.n	80092da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009236:	d050      	beq.n	80092da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009238:	f7fc fc00 	bl	8005a3c <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	429a      	cmp	r2, r3
 8009246:	d902      	bls.n	800924e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d13d      	bne.n	80092ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800925c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009266:	d111      	bne.n	800928c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009270:	d004      	beq.n	800927c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800927a:	d107      	bne.n	800928c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800928a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009294:	d10f      	bne.n	80092b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e017      	b.n	80092fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689a      	ldr	r2, [r3, #8]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4013      	ands	r3, r2
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	bf0c      	ite	eq
 80092ea:	2301      	moveq	r3, #1
 80092ec:	2300      	movne	r3, #0
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	461a      	mov	r2, r3
 80092f2:	79fb      	ldrb	r3, [r7, #7]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d19b      	bne.n	8009230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000060 	.word	0x20000060

08009308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af02      	add	r7, sp, #8
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009314:	4b1b      	ldr	r3, [pc, #108]	@ (8009384 <SPI_EndRxTxTransaction+0x7c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a1b      	ldr	r2, [pc, #108]	@ (8009388 <SPI_EndRxTxTransaction+0x80>)
 800931a:	fba2 2303 	umull	r2, r3, r2, r3
 800931e:	0d5b      	lsrs	r3, r3, #21
 8009320:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009324:	fb02 f303 	mul.w	r3, r2, r3
 8009328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009332:	d112      	bne.n	800935a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2200      	movs	r2, #0
 800933c:	2180      	movs	r1, #128	@ 0x80
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff ff5a 	bl	80091f8 <SPI_WaitFlagStateUntilTimeout>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d016      	beq.n	8009378 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800934e:	f043 0220 	orr.w	r2, r3, #32
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e00f      	b.n	800937a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00a      	beq.n	8009376 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	3b01      	subs	r3, #1
 8009364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009370:	2b80      	cmp	r3, #128	@ 0x80
 8009372:	d0f2      	beq.n	800935a <SPI_EndRxTxTransaction+0x52>
 8009374:	e000      	b.n	8009378 <SPI_EndRxTxTransaction+0x70>
        break;
 8009376:	bf00      	nop
  }

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000060 	.word	0x20000060
 8009388:	165e9f81 	.word	0x165e9f81

0800938c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e041      	b.n	8009422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7fb fe42 	bl	800503c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f000 fb38 	bl	8009a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b01      	cmp	r3, #1
 800943e:	d001      	beq.n	8009444 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e046      	b.n	80094d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a23      	ldr	r2, [pc, #140]	@ (80094e0 <HAL_TIM_Base_Start+0xb4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d022      	beq.n	800949c <HAL_TIM_Base_Start+0x70>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945e:	d01d      	beq.n	800949c <HAL_TIM_Base_Start+0x70>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a1f      	ldr	r2, [pc, #124]	@ (80094e4 <HAL_TIM_Base_Start+0xb8>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d018      	beq.n	800949c <HAL_TIM_Base_Start+0x70>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a1e      	ldr	r2, [pc, #120]	@ (80094e8 <HAL_TIM_Base_Start+0xbc>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d013      	beq.n	800949c <HAL_TIM_Base_Start+0x70>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a1c      	ldr	r2, [pc, #112]	@ (80094ec <HAL_TIM_Base_Start+0xc0>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00e      	beq.n	800949c <HAL_TIM_Base_Start+0x70>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a1b      	ldr	r2, [pc, #108]	@ (80094f0 <HAL_TIM_Base_Start+0xc4>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d009      	beq.n	800949c <HAL_TIM_Base_Start+0x70>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a19      	ldr	r2, [pc, #100]	@ (80094f4 <HAL_TIM_Base_Start+0xc8>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d004      	beq.n	800949c <HAL_TIM_Base_Start+0x70>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a18      	ldr	r2, [pc, #96]	@ (80094f8 <HAL_TIM_Base_Start+0xcc>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d111      	bne.n	80094c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b06      	cmp	r3, #6
 80094ac:	d010      	beq.n	80094d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f042 0201 	orr.w	r2, r2, #1
 80094bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094be:	e007      	b.n	80094d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0201 	orr.w	r2, r2, #1
 80094ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40010000 	.word	0x40010000
 80094e4:	40000400 	.word	0x40000400
 80094e8:	40000800 	.word	0x40000800
 80094ec:	40000c00 	.word	0x40000c00
 80094f0:	40010400 	.word	0x40010400
 80094f4:	40014000 	.word	0x40014000
 80094f8:	40001800 	.word	0x40001800

080094fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e041      	b.n	8009592 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d106      	bne.n	8009528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7fb fd52 	bl	8004fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3304      	adds	r3, #4
 8009538:	4619      	mov	r1, r3
 800953a:	4610      	mov	r0, r2
 800953c:	f000 fa80 	bl	8009a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d109      	bne.n	80095c0 <HAL_TIM_PWM_Start+0x24>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	bf14      	ite	ne
 80095b8:	2301      	movne	r3, #1
 80095ba:	2300      	moveq	r3, #0
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	e022      	b.n	8009606 <HAL_TIM_PWM_Start+0x6a>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b04      	cmp	r3, #4
 80095c4:	d109      	bne.n	80095da <HAL_TIM_PWM_Start+0x3e>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	bf14      	ite	ne
 80095d2:	2301      	movne	r3, #1
 80095d4:	2300      	moveq	r3, #0
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	e015      	b.n	8009606 <HAL_TIM_PWM_Start+0x6a>
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d109      	bne.n	80095f4 <HAL_TIM_PWM_Start+0x58>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	bf14      	ite	ne
 80095ec:	2301      	movne	r3, #1
 80095ee:	2300      	moveq	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	e008      	b.n	8009606 <HAL_TIM_PWM_Start+0x6a>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	bf14      	ite	ne
 8009600:	2301      	movne	r3, #1
 8009602:	2300      	moveq	r3, #0
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e07c      	b.n	8009708 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <HAL_TIM_PWM_Start+0x82>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800961c:	e013      	b.n	8009646 <HAL_TIM_PWM_Start+0xaa>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b04      	cmp	r3, #4
 8009622:	d104      	bne.n	800962e <HAL_TIM_PWM_Start+0x92>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800962c:	e00b      	b.n	8009646 <HAL_TIM_PWM_Start+0xaa>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b08      	cmp	r3, #8
 8009632:	d104      	bne.n	800963e <HAL_TIM_PWM_Start+0xa2>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800963c:	e003      	b.n	8009646 <HAL_TIM_PWM_Start+0xaa>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2202      	movs	r2, #2
 8009642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2201      	movs	r2, #1
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fce0 	bl	800a014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a2d      	ldr	r2, [pc, #180]	@ (8009710 <HAL_TIM_PWM_Start+0x174>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d004      	beq.n	8009668 <HAL_TIM_PWM_Start+0xcc>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a2c      	ldr	r2, [pc, #176]	@ (8009714 <HAL_TIM_PWM_Start+0x178>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d101      	bne.n	800966c <HAL_TIM_PWM_Start+0xd0>
 8009668:	2301      	movs	r3, #1
 800966a:	e000      	b.n	800966e <HAL_TIM_PWM_Start+0xd2>
 800966c:	2300      	movs	r3, #0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d007      	beq.n	8009682 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009680:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a22      	ldr	r2, [pc, #136]	@ (8009710 <HAL_TIM_PWM_Start+0x174>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d022      	beq.n	80096d2 <HAL_TIM_PWM_Start+0x136>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009694:	d01d      	beq.n	80096d2 <HAL_TIM_PWM_Start+0x136>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a1f      	ldr	r2, [pc, #124]	@ (8009718 <HAL_TIM_PWM_Start+0x17c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d018      	beq.n	80096d2 <HAL_TIM_PWM_Start+0x136>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a1d      	ldr	r2, [pc, #116]	@ (800971c <HAL_TIM_PWM_Start+0x180>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d013      	beq.n	80096d2 <HAL_TIM_PWM_Start+0x136>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009720 <HAL_TIM_PWM_Start+0x184>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00e      	beq.n	80096d2 <HAL_TIM_PWM_Start+0x136>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a16      	ldr	r2, [pc, #88]	@ (8009714 <HAL_TIM_PWM_Start+0x178>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d009      	beq.n	80096d2 <HAL_TIM_PWM_Start+0x136>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a18      	ldr	r2, [pc, #96]	@ (8009724 <HAL_TIM_PWM_Start+0x188>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d004      	beq.n	80096d2 <HAL_TIM_PWM_Start+0x136>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a16      	ldr	r2, [pc, #88]	@ (8009728 <HAL_TIM_PWM_Start+0x18c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d111      	bne.n	80096f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f003 0307 	and.w	r3, r3, #7
 80096dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b06      	cmp	r3, #6
 80096e2:	d010      	beq.n	8009706 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0201 	orr.w	r2, r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096f4:	e007      	b.n	8009706 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f042 0201 	orr.w	r2, r2, #1
 8009704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	40010000 	.word	0x40010000
 8009714:	40010400 	.word	0x40010400
 8009718:	40000400 	.word	0x40000400
 800971c:	40000800 	.word	0x40000800
 8009720:	40000c00 	.word	0x40000c00
 8009724:	40014000 	.word	0x40014000
 8009728:	40001800 	.word	0x40001800

0800972c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009746:	2302      	movs	r3, #2
 8009748:	e0ae      	b.n	80098a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b0c      	cmp	r3, #12
 8009756:	f200 809f 	bhi.w	8009898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800975a:	a201      	add	r2, pc, #4	@ (adr r2, 8009760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	08009795 	.word	0x08009795
 8009764:	08009899 	.word	0x08009899
 8009768:	08009899 	.word	0x08009899
 800976c:	08009899 	.word	0x08009899
 8009770:	080097d5 	.word	0x080097d5
 8009774:	08009899 	.word	0x08009899
 8009778:	08009899 	.word	0x08009899
 800977c:	08009899 	.word	0x08009899
 8009780:	08009817 	.word	0x08009817
 8009784:	08009899 	.word	0x08009899
 8009788:	08009899 	.word	0x08009899
 800978c:	08009899 	.word	0x08009899
 8009790:	08009857 	.word	0x08009857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f9f0 	bl	8009b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	699a      	ldr	r2, [r3, #24]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 0208 	orr.w	r2, r2, #8
 80097ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0204 	bic.w	r2, r2, #4
 80097be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6999      	ldr	r1, [r3, #24]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	691a      	ldr	r2, [r3, #16]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	619a      	str	r2, [r3, #24]
      break;
 80097d2:	e064      	b.n	800989e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68b9      	ldr	r1, [r7, #8]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fa40 	bl	8009c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	699a      	ldr	r2, [r3, #24]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699a      	ldr	r2, [r3, #24]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6999      	ldr	r1, [r3, #24]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	021a      	lsls	r2, r3, #8
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	619a      	str	r2, [r3, #24]
      break;
 8009814:	e043      	b.n	800989e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68b9      	ldr	r1, [r7, #8]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fa95 	bl	8009d4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	69da      	ldr	r2, [r3, #28]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f042 0208 	orr.w	r2, r2, #8
 8009830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69da      	ldr	r2, [r3, #28]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 0204 	bic.w	r2, r2, #4
 8009840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69d9      	ldr	r1, [r3, #28]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	691a      	ldr	r2, [r3, #16]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	430a      	orrs	r2, r1
 8009852:	61da      	str	r2, [r3, #28]
      break;
 8009854:	e023      	b.n	800989e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fae9 	bl	8009e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69da      	ldr	r2, [r3, #28]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	69da      	ldr	r2, [r3, #28]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69d9      	ldr	r1, [r3, #28]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	021a      	lsls	r2, r3, #8
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	430a      	orrs	r2, r1
 8009894:	61da      	str	r2, [r3, #28]
      break;
 8009896:	e002      	b.n	800989e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	75fb      	strb	r3, [r7, #23]
      break;
 800989c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d101      	bne.n	80098cc <HAL_TIM_ConfigClockSource+0x1c>
 80098c8:	2302      	movs	r3, #2
 80098ca:	e0b4      	b.n	8009a36 <HAL_TIM_ConfigClockSource+0x186>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80098ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009904:	d03e      	beq.n	8009984 <HAL_TIM_ConfigClockSource+0xd4>
 8009906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800990a:	f200 8087 	bhi.w	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800990e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009912:	f000 8086 	beq.w	8009a22 <HAL_TIM_ConfigClockSource+0x172>
 8009916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800991a:	d87f      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800991c:	2b70      	cmp	r3, #112	@ 0x70
 800991e:	d01a      	beq.n	8009956 <HAL_TIM_ConfigClockSource+0xa6>
 8009920:	2b70      	cmp	r3, #112	@ 0x70
 8009922:	d87b      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 8009924:	2b60      	cmp	r3, #96	@ 0x60
 8009926:	d050      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0x11a>
 8009928:	2b60      	cmp	r3, #96	@ 0x60
 800992a:	d877      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800992c:	2b50      	cmp	r3, #80	@ 0x50
 800992e:	d03c      	beq.n	80099aa <HAL_TIM_ConfigClockSource+0xfa>
 8009930:	2b50      	cmp	r3, #80	@ 0x50
 8009932:	d873      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 8009934:	2b40      	cmp	r3, #64	@ 0x40
 8009936:	d058      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x13a>
 8009938:	2b40      	cmp	r3, #64	@ 0x40
 800993a:	d86f      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800993c:	2b30      	cmp	r3, #48	@ 0x30
 800993e:	d064      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15a>
 8009940:	2b30      	cmp	r3, #48	@ 0x30
 8009942:	d86b      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 8009944:	2b20      	cmp	r3, #32
 8009946:	d060      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15a>
 8009948:	2b20      	cmp	r3, #32
 800994a:	d867      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05c      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15a>
 8009950:	2b10      	cmp	r3, #16
 8009952:	d05a      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15a>
 8009954:	e062      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	6899      	ldr	r1, [r3, #8]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f000 fb35 	bl	8009fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	609a      	str	r2, [r3, #8]
      break;
 8009982:	e04f      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	6899      	ldr	r1, [r3, #8]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f000 fb1e 	bl	8009fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689a      	ldr	r2, [r3, #8]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80099a6:	609a      	str	r2, [r3, #8]
      break;
 80099a8:	e03c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	6859      	ldr	r1, [r3, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f000 fa92 	bl	8009ee0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2150      	movs	r1, #80	@ 0x50
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 faeb 	bl	8009f9e <TIM_ITRx_SetConfig>
      break;
 80099c8:	e02c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6859      	ldr	r1, [r3, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f000 fab1 	bl	8009f3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2160      	movs	r1, #96	@ 0x60
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fadb 	bl	8009f9e <TIM_ITRx_SetConfig>
      break;
 80099e8:	e01c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	6859      	ldr	r1, [r3, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f000 fa72 	bl	8009ee0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2140      	movs	r1, #64	@ 0x40
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 facb 	bl	8009f9e <TIM_ITRx_SetConfig>
      break;
 8009a08:	e00c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f000 fac2 	bl	8009f9e <TIM_ITRx_SetConfig>
      break;
 8009a1a:	e003      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a20:	e000      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a40      	ldr	r2, [pc, #256]	@ (8009b54 <TIM_Base_SetConfig+0x114>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d013      	beq.n	8009a80 <TIM_Base_SetConfig+0x40>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5e:	d00f      	beq.n	8009a80 <TIM_Base_SetConfig+0x40>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a3d      	ldr	r2, [pc, #244]	@ (8009b58 <TIM_Base_SetConfig+0x118>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00b      	beq.n	8009a80 <TIM_Base_SetConfig+0x40>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a3c      	ldr	r2, [pc, #240]	@ (8009b5c <TIM_Base_SetConfig+0x11c>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d007      	beq.n	8009a80 <TIM_Base_SetConfig+0x40>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a3b      	ldr	r2, [pc, #236]	@ (8009b60 <TIM_Base_SetConfig+0x120>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d003      	beq.n	8009a80 <TIM_Base_SetConfig+0x40>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8009b64 <TIM_Base_SetConfig+0x124>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d108      	bne.n	8009a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a2f      	ldr	r2, [pc, #188]	@ (8009b54 <TIM_Base_SetConfig+0x114>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d02b      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aa0:	d027      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8009b58 <TIM_Base_SetConfig+0x118>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d023      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a2b      	ldr	r2, [pc, #172]	@ (8009b5c <TIM_Base_SetConfig+0x11c>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d01f      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8009b60 <TIM_Base_SetConfig+0x120>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d01b      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a29      	ldr	r2, [pc, #164]	@ (8009b64 <TIM_Base_SetConfig+0x124>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d017      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a28      	ldr	r2, [pc, #160]	@ (8009b68 <TIM_Base_SetConfig+0x128>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d013      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a27      	ldr	r2, [pc, #156]	@ (8009b6c <TIM_Base_SetConfig+0x12c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00f      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a26      	ldr	r2, [pc, #152]	@ (8009b70 <TIM_Base_SetConfig+0x130>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d00b      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a25      	ldr	r2, [pc, #148]	@ (8009b74 <TIM_Base_SetConfig+0x134>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d007      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a24      	ldr	r2, [pc, #144]	@ (8009b78 <TIM_Base_SetConfig+0x138>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d003      	beq.n	8009af2 <TIM_Base_SetConfig+0xb2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a23      	ldr	r2, [pc, #140]	@ (8009b7c <TIM_Base_SetConfig+0x13c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d108      	bne.n	8009b04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8009b54 <TIM_Base_SetConfig+0x114>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d003      	beq.n	8009b38 <TIM_Base_SetConfig+0xf8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a0c      	ldr	r2, [pc, #48]	@ (8009b64 <TIM_Base_SetConfig+0x124>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d103      	bne.n	8009b40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	691a      	ldr	r2, [r3, #16]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	615a      	str	r2, [r3, #20]
}
 8009b46:	bf00      	nop
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	40010000 	.word	0x40010000
 8009b58:	40000400 	.word	0x40000400
 8009b5c:	40000800 	.word	0x40000800
 8009b60:	40000c00 	.word	0x40000c00
 8009b64:	40010400 	.word	0x40010400
 8009b68:	40014000 	.word	0x40014000
 8009b6c:	40014400 	.word	0x40014400
 8009b70:	40014800 	.word	0x40014800
 8009b74:	40001800 	.word	0x40001800
 8009b78:	40001c00 	.word	0x40001c00
 8009b7c:	40002000 	.word	0x40002000

08009b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	f023 0201 	bic.w	r2, r3, #1
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f023 0303 	bic.w	r3, r3, #3
 8009bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f023 0302 	bic.w	r3, r3, #2
 8009bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a20      	ldr	r2, [pc, #128]	@ (8009c58 <TIM_OC1_SetConfig+0xd8>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d003      	beq.n	8009be4 <TIM_OC1_SetConfig+0x64>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a1f      	ldr	r2, [pc, #124]	@ (8009c5c <TIM_OC1_SetConfig+0xdc>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d10c      	bne.n	8009bfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f023 0308 	bic.w	r3, r3, #8
 8009bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f023 0304 	bic.w	r3, r3, #4
 8009bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a15      	ldr	r2, [pc, #84]	@ (8009c58 <TIM_OC1_SetConfig+0xd8>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d003      	beq.n	8009c0e <TIM_OC1_SetConfig+0x8e>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a14      	ldr	r2, [pc, #80]	@ (8009c5c <TIM_OC1_SetConfig+0xdc>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d111      	bne.n	8009c32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	621a      	str	r2, [r3, #32]
}
 8009c4c:	bf00      	nop
 8009c4e:	371c      	adds	r7, #28
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	40010000 	.word	0x40010000
 8009c5c:	40010400 	.word	0x40010400

08009c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	f023 0210 	bic.w	r2, r3, #16
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f023 0320 	bic.w	r3, r3, #32
 8009caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a22      	ldr	r2, [pc, #136]	@ (8009d44 <TIM_OC2_SetConfig+0xe4>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d003      	beq.n	8009cc8 <TIM_OC2_SetConfig+0x68>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a21      	ldr	r2, [pc, #132]	@ (8009d48 <TIM_OC2_SetConfig+0xe8>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d10d      	bne.n	8009ce4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ce2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a17      	ldr	r2, [pc, #92]	@ (8009d44 <TIM_OC2_SetConfig+0xe4>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d003      	beq.n	8009cf4 <TIM_OC2_SetConfig+0x94>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a16      	ldr	r2, [pc, #88]	@ (8009d48 <TIM_OC2_SetConfig+0xe8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d113      	bne.n	8009d1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	621a      	str	r2, [r3, #32]
}
 8009d36:	bf00      	nop
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	40010000 	.word	0x40010000
 8009d48:	40010400 	.word	0x40010400

08009d4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 0303 	bic.w	r3, r3, #3
 8009d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	021b      	lsls	r3, r3, #8
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a21      	ldr	r2, [pc, #132]	@ (8009e2c <TIM_OC3_SetConfig+0xe0>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d003      	beq.n	8009db2 <TIM_OC3_SetConfig+0x66>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a20      	ldr	r2, [pc, #128]	@ (8009e30 <TIM_OC3_SetConfig+0xe4>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d10d      	bne.n	8009dce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	021b      	lsls	r3, r3, #8
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a16      	ldr	r2, [pc, #88]	@ (8009e2c <TIM_OC3_SetConfig+0xe0>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d003      	beq.n	8009dde <TIM_OC3_SetConfig+0x92>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a15      	ldr	r2, [pc, #84]	@ (8009e30 <TIM_OC3_SetConfig+0xe4>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d113      	bne.n	8009e06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	011b      	lsls	r3, r3, #4
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	621a      	str	r2, [r3, #32]
}
 8009e20:	bf00      	nop
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	40010000 	.word	0x40010000
 8009e30:	40010400 	.word	0x40010400

08009e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	031b      	lsls	r3, r3, #12
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a12      	ldr	r2, [pc, #72]	@ (8009ed8 <TIM_OC4_SetConfig+0xa4>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d003      	beq.n	8009e9c <TIM_OC4_SetConfig+0x68>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a11      	ldr	r2, [pc, #68]	@ (8009edc <TIM_OC4_SetConfig+0xa8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d109      	bne.n	8009eb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	695b      	ldr	r3, [r3, #20]
 8009ea8:	019b      	lsls	r3, r3, #6
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	621a      	str	r2, [r3, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40010400 	.word	0x40010400

08009ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	f023 0201 	bic.w	r2, r3, #1
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	011b      	lsls	r3, r3, #4
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f023 030a 	bic.w	r3, r3, #10
 8009f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	621a      	str	r2, [r3, #32]
}
 8009f32:	bf00      	nop
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b087      	sub	sp, #28
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	f023 0210 	bic.w	r2, r3, #16
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a1b      	ldr	r3, [r3, #32]
 8009f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	031b      	lsls	r3, r3, #12
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	621a      	str	r2, [r3, #32]
}
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b085      	sub	sp, #20
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	f043 0307 	orr.w	r3, r3, #7
 8009fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	609a      	str	r2, [r3, #8]
}
 8009fc8:	bf00      	nop
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	021a      	lsls	r2, r3, #8
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	609a      	str	r2, [r3, #8]
}
 800a008:	bf00      	nop
 800a00a:	371c      	adds	r7, #28
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	f003 031f 	and.w	r3, r3, #31
 800a026:	2201      	movs	r2, #1
 800a028:	fa02 f303 	lsl.w	r3, r2, r3
 800a02c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a1a      	ldr	r2, [r3, #32]
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	43db      	mvns	r3, r3
 800a036:	401a      	ands	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a1a      	ldr	r2, [r3, #32]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f003 031f 	and.w	r3, r3, #31
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	fa01 f303 	lsl.w	r3, r1, r3
 800a04c:	431a      	orrs	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	621a      	str	r2, [r3, #32]
}
 800a052:	bf00      	nop
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
	...

0800a060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a070:	2b01      	cmp	r3, #1
 800a072:	d101      	bne.n	800a078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a074:	2302      	movs	r3, #2
 800a076:	e05a      	b.n	800a12e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2202      	movs	r2, #2
 800a084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a09e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a21      	ldr	r2, [pc, #132]	@ (800a13c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d022      	beq.n	800a102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c4:	d01d      	beq.n	800a102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a1d      	ldr	r2, [pc, #116]	@ (800a140 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d018      	beq.n	800a102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a1b      	ldr	r2, [pc, #108]	@ (800a144 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d013      	beq.n	800a102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a1a      	ldr	r2, [pc, #104]	@ (800a148 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d00e      	beq.n	800a102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a18      	ldr	r2, [pc, #96]	@ (800a14c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d009      	beq.n	800a102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a17      	ldr	r2, [pc, #92]	@ (800a150 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d004      	beq.n	800a102 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a15      	ldr	r2, [pc, #84]	@ (800a154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d10c      	bne.n	800a11c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	4313      	orrs	r3, r2
 800a112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	40010000 	.word	0x40010000
 800a140:	40000400 	.word	0x40000400
 800a144:	40000800 	.word	0x40000800
 800a148:	40000c00 	.word	0x40000c00
 800a14c:	40010400 	.word	0x40010400
 800a150:	40014000 	.word	0x40014000
 800a154:	40001800 	.word	0x40001800

0800a158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d101      	bne.n	800a174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a170:	2302      	movs	r3, #2
 800a172:	e03d      	b.n	800a1f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	4313      	orrs	r3, r2
 800a188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	4313      	orrs	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	69db      	ldr	r3, [r3, #28]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e03f      	b.n	800a28e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d106      	bne.n	800a228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7fb f816 	bl	8005254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2224      	movs	r2, #36	@ 0x24
 800a22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a23e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fe9b 	bl	800af7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	695a      	ldr	r2, [r3, #20]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68da      	ldr	r2, [r3, #12]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2220      	movs	r2, #32
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b08c      	sub	sp, #48	@ 0x30
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	d152      	bne.n	800a356 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a2b6:	88fb      	ldrh	r3, [r7, #6]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e04b      	b.n	800a358 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d101      	bne.n	800a2ce <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	e044      	b.n	800a358 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a2dc:	88fb      	ldrh	r3, [r7, #6]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fbea 	bl	800aabc <UART_Start_Receive_DMA>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a2ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d12c      	bne.n	800a350 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d125      	bne.n	800a34a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2fe:	2300      	movs	r3, #0
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	613b      	str	r3, [r7, #16]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	613b      	str	r3, [r7, #16]
 800a312:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	330c      	adds	r3, #12
 800a31a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	617b      	str	r3, [r7, #20]
   return(result);
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f043 0310 	orr.w	r3, r3, #16
 800a32a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	330c      	adds	r3, #12
 800a332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a334:	627a      	str	r2, [r7, #36]	@ 0x24
 800a336:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6a39      	ldr	r1, [r7, #32]
 800a33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	61fb      	str	r3, [r7, #28]
   return(result);
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e5      	bne.n	800a314 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a348:	e002      	b.n	800a350 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a350:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a354:	e000      	b.n	800a358 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a356:	2302      	movs	r3, #2
  }
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3730      	adds	r7, #48	@ 0x30
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b0ba      	sub	sp, #232	@ 0xe8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a386:	2300      	movs	r3, #0
 800a388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a396:	f003 030f 	and.w	r3, r3, #15
 800a39a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a39e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10f      	bne.n	800a3c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3aa:	f003 0320 	and.w	r3, r3, #32
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d009      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x66>
 800a3b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3b6:	f003 0320 	and.w	r3, r3, #32
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fd21 	bl	800ae06 <UART_Receive_IT>
      return;
 800a3c4:	e256      	b.n	800a874 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a3c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 80de 	beq.w	800a58c <HAL_UART_IRQHandler+0x22c>
 800a3d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d106      	bne.n	800a3ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 80d1 	beq.w	800a58c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00b      	beq.n	800a40e <HAL_UART_IRQHandler+0xae>
 800a3f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d005      	beq.n	800a40e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a406:	f043 0201 	orr.w	r2, r3, #1
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a412:	f003 0304 	and.w	r3, r3, #4
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <HAL_UART_IRQHandler+0xd2>
 800a41a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d005      	beq.n	800a432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42a:	f043 0202 	orr.w	r2, r3, #2
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <HAL_UART_IRQHandler+0xf6>
 800a43e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	2b00      	cmp	r3, #0
 800a448:	d005      	beq.n	800a456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a44e:	f043 0204 	orr.w	r2, r3, #4
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a45a:	f003 0308 	and.w	r3, r3, #8
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d011      	beq.n	800a486 <HAL_UART_IRQHandler+0x126>
 800a462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d105      	bne.n	800a47a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a46e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47e:	f043 0208 	orr.w	r2, r3, #8
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 81ed 	beq.w	800a86a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a494:	f003 0320 	and.w	r3, r3, #32
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d008      	beq.n	800a4ae <HAL_UART_IRQHandler+0x14e>
 800a49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fcac 	bl	800ae06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b8:	2b40      	cmp	r3, #64	@ 0x40
 800a4ba:	bf0c      	ite	eq
 800a4bc:	2301      	moveq	r3, #1
 800a4be:	2300      	movne	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ca:	f003 0308 	and.w	r3, r3, #8
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d103      	bne.n	800a4da <HAL_UART_IRQHandler+0x17a>
 800a4d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d04f      	beq.n	800a57a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fbb4 	bl	800ac48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ea:	2b40      	cmp	r3, #64	@ 0x40
 800a4ec:	d141      	bne.n	800a572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3314      	adds	r3, #20
 800a4f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a50c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3314      	adds	r3, #20
 800a516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a51a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a51e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1d9      	bne.n	800a4ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d013      	beq.n	800a56a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a546:	4a7d      	ldr	r2, [pc, #500]	@ (800a73c <HAL_UART_IRQHandler+0x3dc>)
 800a548:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fc fb8e 	bl	8006c70 <HAL_DMA_Abort_IT>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d016      	beq.n	800a588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a564:	4610      	mov	r0, r2
 800a566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a568:	e00e      	b.n	800a588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f9a4 	bl	800a8b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a570:	e00a      	b.n	800a588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f9a0 	bl	800a8b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a578:	e006      	b.n	800a588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f99c 	bl	800a8b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800a586:	e170      	b.n	800a86a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a588:	bf00      	nop
    return;
 800a58a:	e16e      	b.n	800a86a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a590:	2b01      	cmp	r3, #1
 800a592:	f040 814a 	bne.w	800a82a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a59a:	f003 0310 	and.w	r3, r3, #16
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8143 	beq.w	800a82a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 813c 	beq.w	800a82a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60bb      	str	r3, [r7, #8]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	60bb      	str	r3, [r7, #8]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	60bb      	str	r3, [r7, #8]
 800a5c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d2:	2b40      	cmp	r3, #64	@ 0x40
 800a5d4:	f040 80b4 	bne.w	800a740 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a5e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 8140 	beq.w	800a86e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a5f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	f080 8139 	bcs.w	800a86e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a602:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a60e:	f000 8088 	beq.w	800a722 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	330c      	adds	r3, #12
 800a618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a620:	e853 3f00 	ldrex	r3, [r3]
 800a624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a62c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	330c      	adds	r3, #12
 800a63a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a63e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a646:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a64a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a64e:	e841 2300 	strex	r3, r2, [r1]
 800a652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1d9      	bne.n	800a612 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3314      	adds	r3, #20
 800a664:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a668:	e853 3f00 	ldrex	r3, [r3]
 800a66c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a66e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a670:	f023 0301 	bic.w	r3, r3, #1
 800a674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3314      	adds	r3, #20
 800a67e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a682:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a686:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a688:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a68a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e1      	bne.n	800a65e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3314      	adds	r3, #20
 800a6a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a6aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3314      	adds	r3, #20
 800a6ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a6be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a6c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a6c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a6c6:	e841 2300 	strex	r3, r2, [r1]
 800a6ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a6cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1e3      	bne.n	800a69a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2220      	movs	r2, #32
 800a6d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	330c      	adds	r3, #12
 800a6e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6ea:	e853 3f00 	ldrex	r3, [r3]
 800a6ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a6f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6f2:	f023 0310 	bic.w	r3, r3, #16
 800a6f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	330c      	adds	r3, #12
 800a700:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a704:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a706:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a70a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a70c:	e841 2300 	strex	r3, r2, [r1]
 800a710:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1e3      	bne.n	800a6e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fc fa37 	bl	8006b90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	b29b      	uxth	r3, r3
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7f7 fb34 	bl	8001da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a738:	e099      	b.n	800a86e <HAL_UART_IRQHandler+0x50e>
 800a73a:	bf00      	nop
 800a73c:	0800ad0f 	.word	0x0800ad0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a748:	b29b      	uxth	r3, r3
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a754:	b29b      	uxth	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 808b 	beq.w	800a872 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a75c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 8086 	beq.w	800a872 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	330c      	adds	r3, #12
 800a76c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a770:	e853 3f00 	ldrex	r3, [r3]
 800a774:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a77c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	330c      	adds	r3, #12
 800a786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a78a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a78c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e3      	bne.n	800a766 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3314      	adds	r3, #20
 800a7a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	f023 0301 	bic.w	r3, r3, #1
 800a7b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3314      	adds	r3, #20
 800a7be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a7c2:	633a      	str	r2, [r7, #48]	@ 0x30
 800a7c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e3      	bne.n	800a79e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	330c      	adds	r3, #12
 800a7ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0310 	bic.w	r3, r3, #16
 800a7fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	330c      	adds	r3, #12
 800a804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a808:	61fa      	str	r2, [r7, #28]
 800a80a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	69b9      	ldr	r1, [r7, #24]
 800a80e:	69fa      	ldr	r2, [r7, #28]
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	617b      	str	r3, [r7, #20]
   return(result);
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e3      	bne.n	800a7e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a81c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7f7 fabc 	bl	8001da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a828:	e023      	b.n	800a872 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a82e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a832:	2b00      	cmp	r3, #0
 800a834:	d009      	beq.n	800a84a <HAL_UART_IRQHandler+0x4ea>
 800a836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa77 	bl	800ad36 <UART_Transmit_IT>
    return;
 800a848:	e014      	b.n	800a874 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a84e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00e      	beq.n	800a874 <HAL_UART_IRQHandler+0x514>
 800a856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a85a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d008      	beq.n	800a874 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fab7 	bl	800add6 <UART_EndTransmit_IT>
    return;
 800a868:	e004      	b.n	800a874 <HAL_UART_IRQHandler+0x514>
    return;
 800a86a:	bf00      	nop
 800a86c:	e002      	b.n	800a874 <HAL_UART_IRQHandler+0x514>
      return;
 800a86e:	bf00      	nop
 800a870:	e000      	b.n	800a874 <HAL_UART_IRQHandler+0x514>
      return;
 800a872:	bf00      	nop
  }
}
 800a874:	37e8      	adds	r7, #232	@ 0xe8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop

0800a87c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b09c      	sub	sp, #112	@ 0x70
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d172      	bne.n	800a9ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a8e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	330c      	adds	r3, #12
 800a8f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f8:	e853 3f00 	ldrex	r3, [r3]
 800a8fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a904:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	330c      	adds	r3, #12
 800a90c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a90e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a910:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a912:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a914:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a916:	e841 2300 	strex	r3, r2, [r1]
 800a91a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a91c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1e5      	bne.n	800a8ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3314      	adds	r3, #20
 800a928:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a934:	f023 0301 	bic.w	r3, r3, #1
 800a938:	667b      	str	r3, [r7, #100]	@ 0x64
 800a93a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3314      	adds	r3, #20
 800a940:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a942:	647a      	str	r2, [r7, #68]	@ 0x44
 800a944:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a946:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a948:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a94a:	e841 2300 	strex	r3, r2, [r1]
 800a94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1e5      	bne.n	800a922 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3314      	adds	r3, #20
 800a95c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	623b      	str	r3, [r7, #32]
   return(result);
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a96c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a96e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3314      	adds	r3, #20
 800a974:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a976:	633a      	str	r2, [r7, #48]	@ 0x30
 800a978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a97c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e5      	bne.n	800a956 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a98a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a98c:	2220      	movs	r2, #32
 800a98e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a996:	2b01      	cmp	r3, #1
 800a998:	d119      	bne.n	800a9ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a99a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	330c      	adds	r3, #12
 800a9a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	e853 3f00 	ldrex	r3, [r3]
 800a9a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f023 0310 	bic.w	r3, r3, #16
 800a9b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	330c      	adds	r3, #12
 800a9b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a9ba:	61fa      	str	r2, [r7, #28]
 800a9bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9be:	69b9      	ldr	r1, [r7, #24]
 800a9c0:	69fa      	ldr	r2, [r7, #28]
 800a9c2:	e841 2300 	strex	r3, r2, [r1]
 800a9c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1e5      	bne.n	800a99a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d106      	bne.n	800a9e4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a9de:	f7f7 f9df 	bl	8001da0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9e2:	e002      	b.n	800a9ea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a9e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a9e6:	f7ff ff53 	bl	800a890 <HAL_UART_RxCpltCallback>
}
 800a9ea:	bf00      	nop
 800a9ec:	3770      	adds	r7, #112	@ 0x70
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d108      	bne.n	800aa1a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	4619      	mov	r1, r3
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7f7 f9c4 	bl	8001da0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa18:	e002      	b.n	800aa20 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7ff ff42 	bl	800a8a4 <HAL_UART_RxHalfCpltCallback>
}
 800aa20:	bf00      	nop
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa38:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	695b      	ldr	r3, [r3, #20]
 800aa40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa44:	2b80      	cmp	r3, #128	@ 0x80
 800aa46:	bf0c      	ite	eq
 800aa48:	2301      	moveq	r3, #1
 800aa4a:	2300      	movne	r3, #0
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b21      	cmp	r3, #33	@ 0x21
 800aa5a:	d108      	bne.n	800aa6e <UART_DMAError+0x46>
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d005      	beq.n	800aa6e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2200      	movs	r2, #0
 800aa66:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800aa68:	68b8      	ldr	r0, [r7, #8]
 800aa6a:	f000 f8c5 	bl	800abf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	695b      	ldr	r3, [r3, #20]
 800aa74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa78:	2b40      	cmp	r3, #64	@ 0x40
 800aa7a:	bf0c      	ite	eq
 800aa7c:	2301      	moveq	r3, #1
 800aa7e:	2300      	movne	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b22      	cmp	r3, #34	@ 0x22
 800aa8e:	d108      	bne.n	800aaa2 <UART_DMAError+0x7a>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d005      	beq.n	800aaa2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800aa9c:	68b8      	ldr	r0, [r7, #8]
 800aa9e:	f000 f8d3 	bl	800ac48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa6:	f043 0210 	orr.w	r2, r3, #16
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaae:	68b8      	ldr	r0, [r7, #8]
 800aab0:	f7ff ff02 	bl	800a8b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aab4:	bf00      	nop
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b098      	sub	sp, #96	@ 0x60
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	88fa      	ldrh	r2, [r7, #6]
 800aad4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2222      	movs	r2, #34	@ 0x22
 800aae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae8:	4a40      	ldr	r2, [pc, #256]	@ (800abec <UART_Start_Receive_DMA+0x130>)
 800aaea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf0:	4a3f      	ldr	r2, [pc, #252]	@ (800abf0 <UART_Start_Receive_DMA+0x134>)
 800aaf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf8:	4a3e      	ldr	r2, [pc, #248]	@ (800abf4 <UART_Start_Receive_DMA+0x138>)
 800aafa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab00:	2200      	movs	r2, #0
 800ab02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ab04:	f107 0308 	add.w	r3, r7, #8
 800ab08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4619      	mov	r1, r3
 800ab16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	88fb      	ldrh	r3, [r7, #6]
 800ab1c:	f7fb ffe0 	bl	8006ae0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ab20:	2300      	movs	r3, #0
 800ab22:	613b      	str	r3, [r7, #16]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	613b      	str	r3, [r7, #16]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	613b      	str	r3, [r7, #16]
 800ab34:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d019      	beq.n	800ab7a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	330c      	adds	r3, #12
 800ab4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	330c      	adds	r3, #12
 800ab64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab66:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ab68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ab6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e5      	bne.n	800ab46 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3314      	adds	r3, #20
 800ab80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab84:	e853 3f00 	ldrex	r3, [r3]
 800ab88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8c:	f043 0301 	orr.w	r3, r3, #1
 800ab90:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3314      	adds	r3, #20
 800ab98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab9a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ab9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800aba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aba2:	e841 2300 	strex	r3, r2, [r1]
 800aba6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1e5      	bne.n	800ab7a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3314      	adds	r3, #20
 800abb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	e853 3f00 	ldrex	r3, [r3]
 800abbc:	617b      	str	r3, [r7, #20]
   return(result);
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc4:	653b      	str	r3, [r7, #80]	@ 0x50
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3314      	adds	r3, #20
 800abcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800abce:	627a      	str	r2, [r7, #36]	@ 0x24
 800abd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd2:	6a39      	ldr	r1, [r7, #32]
 800abd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abd6:	e841 2300 	strex	r3, r2, [r1]
 800abda:	61fb      	str	r3, [r7, #28]
   return(result);
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1e5      	bne.n	800abae <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3760      	adds	r7, #96	@ 0x60
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	0800a8cd 	.word	0x0800a8cd
 800abf0:	0800a9f3 	.word	0x0800a9f3
 800abf4:	0800aa29 	.word	0x0800aa29

0800abf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b089      	sub	sp, #36	@ 0x24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	330c      	adds	r3, #12
 800ac06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	e853 3f00 	ldrex	r3, [r3]
 800ac0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ac16:	61fb      	str	r3, [r7, #28]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	69fa      	ldr	r2, [r7, #28]
 800ac20:	61ba      	str	r2, [r7, #24]
 800ac22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac24:	6979      	ldr	r1, [r7, #20]
 800ac26:	69ba      	ldr	r2, [r7, #24]
 800ac28:	e841 2300 	strex	r3, r2, [r1]
 800ac2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1e5      	bne.n	800ac00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2220      	movs	r2, #32
 800ac38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800ac3c:	bf00      	nop
 800ac3e:	3724      	adds	r7, #36	@ 0x24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b095      	sub	sp, #84	@ 0x54
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	330c      	adds	r3, #12
 800ac56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac5a:	e853 3f00 	ldrex	r3, [r3]
 800ac5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	330c      	adds	r3, #12
 800ac6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac70:	643a      	str	r2, [r7, #64]	@ 0x40
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac78:	e841 2300 	strex	r3, r2, [r1]
 800ac7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d1e5      	bne.n	800ac50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3314      	adds	r3, #20
 800ac8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	e853 3f00 	ldrex	r3, [r3]
 800ac92:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	f023 0301 	bic.w	r3, r3, #1
 800ac9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3314      	adds	r3, #20
 800aca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aca4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acac:	e841 2300 	strex	r3, r2, [r1]
 800acb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e5      	bne.n	800ac84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d119      	bne.n	800acf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	330c      	adds	r3, #12
 800acc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	60bb      	str	r3, [r7, #8]
   return(result);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f023 0310 	bic.w	r3, r3, #16
 800acd6:	647b      	str	r3, [r7, #68]	@ 0x44
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	330c      	adds	r3, #12
 800acde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ace0:	61ba      	str	r2, [r7, #24]
 800ace2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace4:	6979      	ldr	r1, [r7, #20]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	e841 2300 	strex	r3, r2, [r1]
 800acec:	613b      	str	r3, [r7, #16]
   return(result);
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e5      	bne.n	800acc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2220      	movs	r2, #32
 800acf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ad02:	bf00      	nop
 800ad04:	3754      	adds	r7, #84	@ 0x54
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff fdc5 	bl	800a8b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b085      	sub	sp, #20
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b21      	cmp	r3, #33	@ 0x21
 800ad48:	d13e      	bne.n	800adc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad52:	d114      	bne.n	800ad7e <UART_Transmit_IT+0x48>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d110      	bne.n	800ad7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	1c9a      	adds	r2, r3, #2
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	621a      	str	r2, [r3, #32]
 800ad7c:	e008      	b.n	800ad90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	1c59      	adds	r1, r3, #1
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6211      	str	r1, [r2, #32]
 800ad88:	781a      	ldrb	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	3b01      	subs	r3, #1
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10f      	bne.n	800adc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800adb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68da      	ldr	r2, [r3, #12]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	e000      	b.n	800adca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800adc8:	2302      	movs	r3, #2
  }
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800adec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff fd40 	bl	800a87c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b08c      	sub	sp, #48	@ 0x30
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b22      	cmp	r3, #34	@ 0x22
 800ae18:	f040 80ab 	bne.w	800af72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae24:	d117      	bne.n	800ae56 <UART_Receive_IT+0x50>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d113      	bne.n	800ae56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4e:	1c9a      	adds	r2, r3, #2
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae54:	e026      	b.n	800aea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae68:	d007      	beq.n	800ae7a <UART_Receive_IT+0x74>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10a      	bne.n	800ae88 <UART_Receive_IT+0x82>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	e008      	b.n	800ae9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d15a      	bne.n	800af6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f022 0220 	bic.w	r2, r2, #32
 800aec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68da      	ldr	r2, [r3, #12]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	695a      	ldr	r2, [r3, #20]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f022 0201 	bic.w	r2, r2, #1
 800aee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2220      	movs	r2, #32
 800aeec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d135      	bne.n	800af64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	330c      	adds	r3, #12
 800af04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	613b      	str	r3, [r7, #16]
   return(result);
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f023 0310 	bic.w	r3, r3, #16
 800af14:	627b      	str	r3, [r7, #36]	@ 0x24
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	330c      	adds	r3, #12
 800af1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af1e:	623a      	str	r2, [r7, #32]
 800af20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af22:	69f9      	ldr	r1, [r7, #28]
 800af24:	6a3a      	ldr	r2, [r7, #32]
 800af26:	e841 2300 	strex	r3, r2, [r1]
 800af2a:	61bb      	str	r3, [r7, #24]
   return(result);
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1e5      	bne.n	800aefe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0310 	and.w	r3, r3, #16
 800af3c:	2b10      	cmp	r3, #16
 800af3e:	d10a      	bne.n	800af56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7f6 ff1f 	bl	8001da0 <HAL_UARTEx_RxEventCallback>
 800af62:	e002      	b.n	800af6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fc93 	bl	800a890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	e002      	b.n	800af74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	e000      	b.n	800af74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800af72:	2302      	movs	r3, #2
  }
}
 800af74:	4618      	mov	r0, r3
 800af76:	3730      	adds	r7, #48	@ 0x30
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af80:	b0c0      	sub	sp, #256	@ 0x100
 800af82:	af00      	add	r7, sp, #0
 800af84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800af94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af98:	68d9      	ldr	r1, [r3, #12]
 800af9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	ea40 0301 	orr.w	r3, r0, r1
 800afa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afaa:	689a      	ldr	r2, [r3, #8]
 800afac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	431a      	orrs	r2, r3
 800afb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	431a      	orrs	r2, r3
 800afbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800afc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800afd4:	f021 010c 	bic.w	r1, r1, #12
 800afd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800afe2:	430b      	orrs	r3, r1
 800afe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aff6:	6999      	ldr	r1, [r3, #24]
 800aff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	ea40 0301 	orr.w	r3, r0, r1
 800b002:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	4b8f      	ldr	r3, [pc, #572]	@ (800b248 <UART_SetConfig+0x2cc>)
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d005      	beq.n	800b01c <UART_SetConfig+0xa0>
 800b010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	4b8d      	ldr	r3, [pc, #564]	@ (800b24c <UART_SetConfig+0x2d0>)
 800b018:	429a      	cmp	r2, r3
 800b01a:	d104      	bne.n	800b026 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b01c:	f7fd fe92 	bl	8008d44 <HAL_RCC_GetPCLK2Freq>
 800b020:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b024:	e003      	b.n	800b02e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b026:	f7fd fe79 	bl	8008d1c <HAL_RCC_GetPCLK1Freq>
 800b02a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b038:	f040 810c 	bne.w	800b254 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b03c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b040:	2200      	movs	r2, #0
 800b042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b046:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b04a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b04e:	4622      	mov	r2, r4
 800b050:	462b      	mov	r3, r5
 800b052:	1891      	adds	r1, r2, r2
 800b054:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b056:	415b      	adcs	r3, r3
 800b058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b05a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b05e:	4621      	mov	r1, r4
 800b060:	eb12 0801 	adds.w	r8, r2, r1
 800b064:	4629      	mov	r1, r5
 800b066:	eb43 0901 	adc.w	r9, r3, r1
 800b06a:	f04f 0200 	mov.w	r2, #0
 800b06e:	f04f 0300 	mov.w	r3, #0
 800b072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b07a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b07e:	4690      	mov	r8, r2
 800b080:	4699      	mov	r9, r3
 800b082:	4623      	mov	r3, r4
 800b084:	eb18 0303 	adds.w	r3, r8, r3
 800b088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b08c:	462b      	mov	r3, r5
 800b08e:	eb49 0303 	adc.w	r3, r9, r3
 800b092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b0a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b0a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	18db      	adds	r3, r3, r3
 800b0ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	eb42 0303 	adc.w	r3, r2, r3
 800b0b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b0b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b0bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b0c0:	f7f5 fd72 	bl	8000ba8 <__aeabi_uldivmod>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4b61      	ldr	r3, [pc, #388]	@ (800b250 <UART_SetConfig+0x2d4>)
 800b0ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b0ce:	095b      	lsrs	r3, r3, #5
 800b0d0:	011c      	lsls	r4, r3, #4
 800b0d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b0e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b0e4:	4642      	mov	r2, r8
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	1891      	adds	r1, r2, r2
 800b0ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b0ec:	415b      	adcs	r3, r3
 800b0ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b0f4:	4641      	mov	r1, r8
 800b0f6:	eb12 0a01 	adds.w	sl, r2, r1
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	eb43 0b01 	adc.w	fp, r3, r1
 800b100:	f04f 0200 	mov.w	r2, #0
 800b104:	f04f 0300 	mov.w	r3, #0
 800b108:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b10c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b114:	4692      	mov	sl, r2
 800b116:	469b      	mov	fp, r3
 800b118:	4643      	mov	r3, r8
 800b11a:	eb1a 0303 	adds.w	r3, sl, r3
 800b11e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b122:	464b      	mov	r3, r9
 800b124:	eb4b 0303 	adc.w	r3, fp, r3
 800b128:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b138:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b13c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b140:	460b      	mov	r3, r1
 800b142:	18db      	adds	r3, r3, r3
 800b144:	643b      	str	r3, [r7, #64]	@ 0x40
 800b146:	4613      	mov	r3, r2
 800b148:	eb42 0303 	adc.w	r3, r2, r3
 800b14c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b14e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b152:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b156:	f7f5 fd27 	bl	8000ba8 <__aeabi_uldivmod>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	4611      	mov	r1, r2
 800b160:	4b3b      	ldr	r3, [pc, #236]	@ (800b250 <UART_SetConfig+0x2d4>)
 800b162:	fba3 2301 	umull	r2, r3, r3, r1
 800b166:	095b      	lsrs	r3, r3, #5
 800b168:	2264      	movs	r2, #100	@ 0x64
 800b16a:	fb02 f303 	mul.w	r3, r2, r3
 800b16e:	1acb      	subs	r3, r1, r3
 800b170:	00db      	lsls	r3, r3, #3
 800b172:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b176:	4b36      	ldr	r3, [pc, #216]	@ (800b250 <UART_SetConfig+0x2d4>)
 800b178:	fba3 2302 	umull	r2, r3, r3, r2
 800b17c:	095b      	lsrs	r3, r3, #5
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b184:	441c      	add	r4, r3
 800b186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b190:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b194:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b198:	4642      	mov	r2, r8
 800b19a:	464b      	mov	r3, r9
 800b19c:	1891      	adds	r1, r2, r2
 800b19e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b1a0:	415b      	adcs	r3, r3
 800b1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b1a8:	4641      	mov	r1, r8
 800b1aa:	1851      	adds	r1, r2, r1
 800b1ac:	6339      	str	r1, [r7, #48]	@ 0x30
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	414b      	adcs	r3, r1
 800b1b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b1c0:	4659      	mov	r1, fp
 800b1c2:	00cb      	lsls	r3, r1, #3
 800b1c4:	4651      	mov	r1, sl
 800b1c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ca:	4651      	mov	r1, sl
 800b1cc:	00ca      	lsls	r2, r1, #3
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	4642      	mov	r2, r8
 800b1d6:	189b      	adds	r3, r3, r2
 800b1d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1dc:	464b      	mov	r3, r9
 800b1de:	460a      	mov	r2, r1
 800b1e0:	eb42 0303 	adc.w	r3, r2, r3
 800b1e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b1f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b1f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	18db      	adds	r3, r3, r3
 800b200:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b202:	4613      	mov	r3, r2
 800b204:	eb42 0303 	adc.w	r3, r2, r3
 800b208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b20a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b20e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b212:	f7f5 fcc9 	bl	8000ba8 <__aeabi_uldivmod>
 800b216:	4602      	mov	r2, r0
 800b218:	460b      	mov	r3, r1
 800b21a:	4b0d      	ldr	r3, [pc, #52]	@ (800b250 <UART_SetConfig+0x2d4>)
 800b21c:	fba3 1302 	umull	r1, r3, r3, r2
 800b220:	095b      	lsrs	r3, r3, #5
 800b222:	2164      	movs	r1, #100	@ 0x64
 800b224:	fb01 f303 	mul.w	r3, r1, r3
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	3332      	adds	r3, #50	@ 0x32
 800b22e:	4a08      	ldr	r2, [pc, #32]	@ (800b250 <UART_SetConfig+0x2d4>)
 800b230:	fba2 2303 	umull	r2, r3, r2, r3
 800b234:	095b      	lsrs	r3, r3, #5
 800b236:	f003 0207 	and.w	r2, r3, #7
 800b23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4422      	add	r2, r4
 800b242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b244:	e106      	b.n	800b454 <UART_SetConfig+0x4d8>
 800b246:	bf00      	nop
 800b248:	40011000 	.word	0x40011000
 800b24c:	40011400 	.word	0x40011400
 800b250:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b25e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b262:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b266:	4642      	mov	r2, r8
 800b268:	464b      	mov	r3, r9
 800b26a:	1891      	adds	r1, r2, r2
 800b26c:	6239      	str	r1, [r7, #32]
 800b26e:	415b      	adcs	r3, r3
 800b270:	627b      	str	r3, [r7, #36]	@ 0x24
 800b272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b276:	4641      	mov	r1, r8
 800b278:	1854      	adds	r4, r2, r1
 800b27a:	4649      	mov	r1, r9
 800b27c:	eb43 0501 	adc.w	r5, r3, r1
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	00eb      	lsls	r3, r5, #3
 800b28a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b28e:	00e2      	lsls	r2, r4, #3
 800b290:	4614      	mov	r4, r2
 800b292:	461d      	mov	r5, r3
 800b294:	4643      	mov	r3, r8
 800b296:	18e3      	adds	r3, r4, r3
 800b298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b29c:	464b      	mov	r3, r9
 800b29e:	eb45 0303 	adc.w	r3, r5, r3
 800b2a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b2a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b2b6:	f04f 0200 	mov.w	r2, #0
 800b2ba:	f04f 0300 	mov.w	r3, #0
 800b2be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	008b      	lsls	r3, r1, #2
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	008a      	lsls	r2, r1, #2
 800b2d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b2d4:	f7f5 fc68 	bl	8000ba8 <__aeabi_uldivmod>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4b60      	ldr	r3, [pc, #384]	@ (800b460 <UART_SetConfig+0x4e4>)
 800b2de:	fba3 2302 	umull	r2, r3, r3, r2
 800b2e2:	095b      	lsrs	r3, r3, #5
 800b2e4:	011c      	lsls	r4, r3, #4
 800b2e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b2f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b2f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	464b      	mov	r3, r9
 800b2fc:	1891      	adds	r1, r2, r2
 800b2fe:	61b9      	str	r1, [r7, #24]
 800b300:	415b      	adcs	r3, r3
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b308:	4641      	mov	r1, r8
 800b30a:	1851      	adds	r1, r2, r1
 800b30c:	6139      	str	r1, [r7, #16]
 800b30e:	4649      	mov	r1, r9
 800b310:	414b      	adcs	r3, r1
 800b312:	617b      	str	r3, [r7, #20]
 800b314:	f04f 0200 	mov.w	r2, #0
 800b318:	f04f 0300 	mov.w	r3, #0
 800b31c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b320:	4659      	mov	r1, fp
 800b322:	00cb      	lsls	r3, r1, #3
 800b324:	4651      	mov	r1, sl
 800b326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b32a:	4651      	mov	r1, sl
 800b32c:	00ca      	lsls	r2, r1, #3
 800b32e:	4610      	mov	r0, r2
 800b330:	4619      	mov	r1, r3
 800b332:	4603      	mov	r3, r0
 800b334:	4642      	mov	r2, r8
 800b336:	189b      	adds	r3, r3, r2
 800b338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b33c:	464b      	mov	r3, r9
 800b33e:	460a      	mov	r2, r1
 800b340:	eb42 0303 	adc.w	r3, r2, r3
 800b344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b352:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b354:	f04f 0200 	mov.w	r2, #0
 800b358:	f04f 0300 	mov.w	r3, #0
 800b35c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b360:	4649      	mov	r1, r9
 800b362:	008b      	lsls	r3, r1, #2
 800b364:	4641      	mov	r1, r8
 800b366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b36a:	4641      	mov	r1, r8
 800b36c:	008a      	lsls	r2, r1, #2
 800b36e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b372:	f7f5 fc19 	bl	8000ba8 <__aeabi_uldivmod>
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
 800b37a:	4611      	mov	r1, r2
 800b37c:	4b38      	ldr	r3, [pc, #224]	@ (800b460 <UART_SetConfig+0x4e4>)
 800b37e:	fba3 2301 	umull	r2, r3, r3, r1
 800b382:	095b      	lsrs	r3, r3, #5
 800b384:	2264      	movs	r2, #100	@ 0x64
 800b386:	fb02 f303 	mul.w	r3, r2, r3
 800b38a:	1acb      	subs	r3, r1, r3
 800b38c:	011b      	lsls	r3, r3, #4
 800b38e:	3332      	adds	r3, #50	@ 0x32
 800b390:	4a33      	ldr	r2, [pc, #204]	@ (800b460 <UART_SetConfig+0x4e4>)
 800b392:	fba2 2303 	umull	r2, r3, r2, r3
 800b396:	095b      	lsrs	r3, r3, #5
 800b398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b39c:	441c      	add	r4, r3
 800b39e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b3a6:	677a      	str	r2, [r7, #116]	@ 0x74
 800b3a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b3ac:	4642      	mov	r2, r8
 800b3ae:	464b      	mov	r3, r9
 800b3b0:	1891      	adds	r1, r2, r2
 800b3b2:	60b9      	str	r1, [r7, #8]
 800b3b4:	415b      	adcs	r3, r3
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3bc:	4641      	mov	r1, r8
 800b3be:	1851      	adds	r1, r2, r1
 800b3c0:	6039      	str	r1, [r7, #0]
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	414b      	adcs	r3, r1
 800b3c6:	607b      	str	r3, [r7, #4]
 800b3c8:	f04f 0200 	mov.w	r2, #0
 800b3cc:	f04f 0300 	mov.w	r3, #0
 800b3d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b3d4:	4659      	mov	r1, fp
 800b3d6:	00cb      	lsls	r3, r1, #3
 800b3d8:	4651      	mov	r1, sl
 800b3da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3de:	4651      	mov	r1, sl
 800b3e0:	00ca      	lsls	r2, r1, #3
 800b3e2:	4610      	mov	r0, r2
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	189b      	adds	r3, r3, r2
 800b3ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b3ee:	464b      	mov	r3, r9
 800b3f0:	460a      	mov	r2, r1
 800b3f2:	eb42 0303 	adc.w	r3, r2, r3
 800b3f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	663b      	str	r3, [r7, #96]	@ 0x60
 800b402:	667a      	str	r2, [r7, #100]	@ 0x64
 800b404:	f04f 0200 	mov.w	r2, #0
 800b408:	f04f 0300 	mov.w	r3, #0
 800b40c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b410:	4649      	mov	r1, r9
 800b412:	008b      	lsls	r3, r1, #2
 800b414:	4641      	mov	r1, r8
 800b416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b41a:	4641      	mov	r1, r8
 800b41c:	008a      	lsls	r2, r1, #2
 800b41e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b422:	f7f5 fbc1 	bl	8000ba8 <__aeabi_uldivmod>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	4b0d      	ldr	r3, [pc, #52]	@ (800b460 <UART_SetConfig+0x4e4>)
 800b42c:	fba3 1302 	umull	r1, r3, r3, r2
 800b430:	095b      	lsrs	r3, r3, #5
 800b432:	2164      	movs	r1, #100	@ 0x64
 800b434:	fb01 f303 	mul.w	r3, r1, r3
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	011b      	lsls	r3, r3, #4
 800b43c:	3332      	adds	r3, #50	@ 0x32
 800b43e:	4a08      	ldr	r2, [pc, #32]	@ (800b460 <UART_SetConfig+0x4e4>)
 800b440:	fba2 2303 	umull	r2, r3, r2, r3
 800b444:	095b      	lsrs	r3, r3, #5
 800b446:	f003 020f 	and.w	r2, r3, #15
 800b44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4422      	add	r2, r4
 800b452:	609a      	str	r2, [r3, #8]
}
 800b454:	bf00      	nop
 800b456:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b45a:	46bd      	mov	sp, r7
 800b45c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b460:	51eb851f 	.word	0x51eb851f

0800b464 <__NVIC_SetPriority>:
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b474:	2b00      	cmp	r3, #0
 800b476:	db0a      	blt.n	800b48e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	490c      	ldr	r1, [pc, #48]	@ (800b4b0 <__NVIC_SetPriority+0x4c>)
 800b47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b482:	0112      	lsls	r2, r2, #4
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	440b      	add	r3, r1
 800b488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b48c:	e00a      	b.n	800b4a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4908      	ldr	r1, [pc, #32]	@ (800b4b4 <__NVIC_SetPriority+0x50>)
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	f003 030f 	and.w	r3, r3, #15
 800b49a:	3b04      	subs	r3, #4
 800b49c:	0112      	lsls	r2, r2, #4
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	440b      	add	r3, r1
 800b4a2:	761a      	strb	r2, [r3, #24]
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	e000e100 	.word	0xe000e100
 800b4b4:	e000ed00 	.word	0xe000ed00

0800b4b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b4bc:	2100      	movs	r1, #0
 800b4be:	f06f 0004 	mvn.w	r0, #4
 800b4c2:	f7ff ffcf 	bl	800b464 <__NVIC_SetPriority>
#endif
}
 800b4c6:	bf00      	nop
 800b4c8:	bd80      	pop	{r7, pc}
	...

0800b4cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4d2:	f3ef 8305 	mrs	r3, IPSR
 800b4d6:	603b      	str	r3, [r7, #0]
  return(result);
 800b4d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b4de:	f06f 0305 	mvn.w	r3, #5
 800b4e2:	607b      	str	r3, [r7, #4]
 800b4e4:	e00c      	b.n	800b500 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b510 <osKernelInitialize+0x44>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d105      	bne.n	800b4fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b4ee:	4b08      	ldr	r3, [pc, #32]	@ (800b510 <osKernelInitialize+0x44>)
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	607b      	str	r3, [r7, #4]
 800b4f8:	e002      	b.n	800b500 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b500:	687b      	ldr	r3, [r7, #4]
}
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	20000bcc 	.word	0x20000bcc

0800b514 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b51a:	f3ef 8305 	mrs	r3, IPSR
 800b51e:	603b      	str	r3, [r7, #0]
  return(result);
 800b520:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b522:	2b00      	cmp	r3, #0
 800b524:	d003      	beq.n	800b52e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b526:	f06f 0305 	mvn.w	r3, #5
 800b52a:	607b      	str	r3, [r7, #4]
 800b52c:	e010      	b.n	800b550 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b52e:	4b0b      	ldr	r3, [pc, #44]	@ (800b55c <osKernelStart+0x48>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d109      	bne.n	800b54a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b536:	f7ff ffbf 	bl	800b4b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b53a:	4b08      	ldr	r3, [pc, #32]	@ (800b55c <osKernelStart+0x48>)
 800b53c:	2202      	movs	r2, #2
 800b53e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b540:	f001 f892 	bl	800c668 <vTaskStartScheduler>
      stat = osOK;
 800b544:	2300      	movs	r3, #0
 800b546:	607b      	str	r3, [r7, #4]
 800b548:	e002      	b.n	800b550 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b54e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b550:	687b      	ldr	r3, [r7, #4]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	20000bcc 	.word	0x20000bcc

0800b560 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b560:	b580      	push	{r7, lr}
 800b562:	b08e      	sub	sp, #56	@ 0x38
 800b564:	af04      	add	r7, sp, #16
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b56c:	2300      	movs	r3, #0
 800b56e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b570:	f3ef 8305 	mrs	r3, IPSR
 800b574:	617b      	str	r3, [r7, #20]
  return(result);
 800b576:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d17e      	bne.n	800b67a <osThreadNew+0x11a>
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d07b      	beq.n	800b67a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b582:	2380      	movs	r3, #128	@ 0x80
 800b584:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b586:	2318      	movs	r3, #24
 800b588:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b58a:	2300      	movs	r3, #0
 800b58c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b58e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b592:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d045      	beq.n	800b626 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <osThreadNew+0x48>
        name = attr->name;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	699b      	ldr	r3, [r3, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d008      	beq.n	800b5ce <osThreadNew+0x6e>
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	2b38      	cmp	r3, #56	@ 0x38
 800b5c0:	d805      	bhi.n	800b5ce <osThreadNew+0x6e>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <osThreadNew+0x72>
        return (NULL);
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	e054      	b.n	800b67c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	089b      	lsrs	r3, r3, #2
 800b5e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00e      	beq.n	800b608 <osThreadNew+0xa8>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	2ba7      	cmp	r3, #167	@ 0xa7
 800b5f0:	d90a      	bls.n	800b608 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d006      	beq.n	800b608 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d002      	beq.n	800b608 <osThreadNew+0xa8>
        mem = 1;
 800b602:	2301      	movs	r3, #1
 800b604:	61bb      	str	r3, [r7, #24]
 800b606:	e010      	b.n	800b62a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10c      	bne.n	800b62a <osThreadNew+0xca>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d108      	bne.n	800b62a <osThreadNew+0xca>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d104      	bne.n	800b62a <osThreadNew+0xca>
          mem = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	61bb      	str	r3, [r7, #24]
 800b624:	e001      	b.n	800b62a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d110      	bne.n	800b652 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b638:	9202      	str	r2, [sp, #8]
 800b63a:	9301      	str	r3, [sp, #4]
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	6a3a      	ldr	r2, [r7, #32]
 800b644:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 fe1a 	bl	800c280 <xTaskCreateStatic>
 800b64c:	4603      	mov	r3, r0
 800b64e:	613b      	str	r3, [r7, #16]
 800b650:	e013      	b.n	800b67a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d110      	bne.n	800b67a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	f107 0310 	add.w	r3, r7, #16
 800b660:	9301      	str	r3, [sp, #4]
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 fe68 	bl	800c340 <xTaskCreate>
 800b670:	4603      	mov	r3, r0
 800b672:	2b01      	cmp	r3, #1
 800b674:	d001      	beq.n	800b67a <osThreadNew+0x11a>
            hTask = NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b67a:	693b      	ldr	r3, [r7, #16]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3728      	adds	r7, #40	@ 0x28
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b68c:	f3ef 8305 	mrs	r3, IPSR
 800b690:	60bb      	str	r3, [r7, #8]
  return(result);
 800b692:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b694:	2b00      	cmp	r3, #0
 800b696:	d003      	beq.n	800b6a0 <osDelay+0x1c>
    stat = osErrorISR;
 800b698:	f06f 0305 	mvn.w	r3, #5
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	e007      	b.n	800b6b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 ffa6 	bl	800c5fc <vTaskDelay>
    }
  }

  return (stat);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	4a07      	ldr	r2, [pc, #28]	@ (800b6e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b6cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	4a06      	ldr	r2, [pc, #24]	@ (800b6ec <vApplicationGetIdleTaskMemory+0x30>)
 800b6d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2280      	movs	r2, #128	@ 0x80
 800b6d8:	601a      	str	r2, [r3, #0]
}
 800b6da:	bf00      	nop
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	20000bd0 	.word	0x20000bd0
 800b6ec:	20000c78 	.word	0x20000c78

0800b6f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4a07      	ldr	r2, [pc, #28]	@ (800b71c <vApplicationGetTimerTaskMemory+0x2c>)
 800b700:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	4a06      	ldr	r2, [pc, #24]	@ (800b720 <vApplicationGetTimerTaskMemory+0x30>)
 800b706:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b70e:	601a      	str	r2, [r3, #0]
}
 800b710:	bf00      	nop
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	20000e78 	.word	0x20000e78
 800b720:	20000f20 	.word	0x20000f20

0800b724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f103 0208 	add.w	r2, r3, #8
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b73c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f103 0208 	add.w	r2, r3, #8
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f103 0208 	add.w	r2, r3, #8
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b772:	bf00      	nop
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b77e:	b480      	push	{r7}
 800b780:	b085      	sub	sp, #20
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	689a      	ldr	r2, [r3, #8]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	683a      	ldr	r2, [r7, #0]
 800b7a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	601a      	str	r2, [r3, #0]
}
 800b7ba:	bf00      	nop
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b085      	sub	sp, #20
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7dc:	d103      	bne.n	800b7e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	e00c      	b.n	800b800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3308      	adds	r3, #8
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	e002      	b.n	800b7f4 <vListInsert+0x2e>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	60fb      	str	r3, [r7, #12]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d2f6      	bcs.n	800b7ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	683a      	ldr	r2, [r7, #0]
 800b80e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	683a      	ldr	r2, [r7, #0]
 800b81a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	601a      	str	r2, [r3, #0]
}
 800b82c:	bf00      	nop
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	6892      	ldr	r2, [r2, #8]
 800b84e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	6852      	ldr	r2, [r2, #4]
 800b858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	429a      	cmp	r2, r3
 800b862:	d103      	bne.n	800b86c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	1e5a      	subs	r2, r3, #1
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10b      	bne.n	800b8b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8b2:	bf00      	nop
 800b8b4:	bf00      	nop
 800b8b6:	e7fd      	b.n	800b8b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b8b8:	f002 fa86 	bl	800ddc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c4:	68f9      	ldr	r1, [r7, #12]
 800b8c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b8c8:	fb01 f303 	mul.w	r3, r1, r3
 800b8cc:	441a      	add	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	68f9      	ldr	r1, [r7, #12]
 800b8ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b8ee:	fb01 f303 	mul.w	r3, r1, r3
 800b8f2:	441a      	add	r2, r3
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	22ff      	movs	r2, #255	@ 0xff
 800b8fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	22ff      	movs	r2, #255	@ 0xff
 800b904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d114      	bne.n	800b938 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d01a      	beq.n	800b94c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3310      	adds	r3, #16
 800b91a:	4618      	mov	r0, r3
 800b91c:	f001 fa3c 	bl	800cd98 <xTaskRemoveFromEventList>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d012      	beq.n	800b94c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b926:	4b0d      	ldr	r3, [pc, #52]	@ (800b95c <xQueueGenericReset+0xd0>)
 800b928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b92c:	601a      	str	r2, [r3, #0]
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	e009      	b.n	800b94c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3310      	adds	r3, #16
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff fef1 	bl	800b724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3324      	adds	r3, #36	@ 0x24
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff feec 	bl	800b724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b94c:	f002 fa6e 	bl	800de2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b950:	2301      	movs	r3, #1
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08e      	sub	sp, #56	@ 0x38
 800b964:	af02      	add	r7, sp, #8
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10b      	bne.n	800b98c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b986:	bf00      	nop
 800b988:	bf00      	nop
 800b98a:	e7fd      	b.n	800b988 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10b      	bne.n	800b9aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop
 800b9a8:	e7fd      	b.n	800b9a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <xQueueGenericCreateStatic+0x56>
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <xQueueGenericCreateStatic+0x5a>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e000      	b.n	800b9bc <xQueueGenericCreateStatic+0x5c>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10b      	bne.n	800b9d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	623b      	str	r3, [r7, #32]
}
 800b9d2:	bf00      	nop
 800b9d4:	bf00      	nop
 800b9d6:	e7fd      	b.n	800b9d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d102      	bne.n	800b9e4 <xQueueGenericCreateStatic+0x84>
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <xQueueGenericCreateStatic+0x88>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e000      	b.n	800b9ea <xQueueGenericCreateStatic+0x8a>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10b      	bne.n	800ba06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	61fb      	str	r3, [r7, #28]
}
 800ba00:	bf00      	nop
 800ba02:	bf00      	nop
 800ba04:	e7fd      	b.n	800ba02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba06:	2350      	movs	r3, #80	@ 0x50
 800ba08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b50      	cmp	r3, #80	@ 0x50
 800ba0e:	d00b      	beq.n	800ba28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	61bb      	str	r3, [r7, #24]
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	e7fd      	b.n	800ba24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ba2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00d      	beq.n	800ba50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ba40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	4613      	mov	r3, r2
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	68b9      	ldr	r1, [r7, #8]
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 f805 	bl	800ba5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3730      	adds	r7, #48	@ 0x30
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	60b9      	str	r1, [r7, #8]
 800ba64:	607a      	str	r2, [r7, #4]
 800ba66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d103      	bne.n	800ba76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	69ba      	ldr	r2, [r7, #24]
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	e002      	b.n	800ba7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba88:	2101      	movs	r1, #1
 800ba8a:	69b8      	ldr	r0, [r7, #24]
 800ba8c:	f7ff fefe 	bl	800b88c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	78fa      	ldrb	r2, [r7, #3]
 800ba94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba98:	bf00      	nop
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b08e      	sub	sp, #56	@ 0x38
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	607a      	str	r2, [r7, #4]
 800baac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800baae:	2300      	movs	r3, #0
 800bab0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10b      	bne.n	800bad4 <xQueueGenericSend+0x34>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bace:	bf00      	nop
 800bad0:	bf00      	nop
 800bad2:	e7fd      	b.n	800bad0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d103      	bne.n	800bae2 <xQueueGenericSend+0x42>
 800bada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800badc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <xQueueGenericSend+0x46>
 800bae2:	2301      	movs	r3, #1
 800bae4:	e000      	b.n	800bae8 <xQueueGenericSend+0x48>
 800bae6:	2300      	movs	r3, #0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10b      	bne.n	800bb04 <xQueueGenericSend+0x64>
	__asm volatile
 800baec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf0:	f383 8811 	msr	BASEPRI, r3
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bafe:	bf00      	nop
 800bb00:	bf00      	nop
 800bb02:	e7fd      	b.n	800bb00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d103      	bne.n	800bb12 <xQueueGenericSend+0x72>
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d101      	bne.n	800bb16 <xQueueGenericSend+0x76>
 800bb12:	2301      	movs	r3, #1
 800bb14:	e000      	b.n	800bb18 <xQueueGenericSend+0x78>
 800bb16:	2300      	movs	r3, #0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10b      	bne.n	800bb34 <xQueueGenericSend+0x94>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	623b      	str	r3, [r7, #32]
}
 800bb2e:	bf00      	nop
 800bb30:	bf00      	nop
 800bb32:	e7fd      	b.n	800bb30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb34:	f001 faf6 	bl	800d124 <xTaskGetSchedulerState>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d102      	bne.n	800bb44 <xQueueGenericSend+0xa4>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <xQueueGenericSend+0xa8>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e000      	b.n	800bb4a <xQueueGenericSend+0xaa>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10b      	bne.n	800bb66 <xQueueGenericSend+0xc6>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	61fb      	str	r3, [r7, #28]
}
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
 800bb64:	e7fd      	b.n	800bb62 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb66:	f002 f92f 	bl	800ddc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d302      	bcc.n	800bb7c <xQueueGenericSend+0xdc>
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d129      	bne.n	800bbd0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb82:	f000 fa0f 	bl	800bfa4 <prvCopyDataToQueue>
 800bb86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d010      	beq.n	800bbb2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb92:	3324      	adds	r3, #36	@ 0x24
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 f8ff 	bl	800cd98 <xTaskRemoveFromEventList>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d013      	beq.n	800bbc8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bba0:	4b3f      	ldr	r3, [pc, #252]	@ (800bca0 <xQueueGenericSend+0x200>)
 800bba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	e00a      	b.n	800bbc8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d007      	beq.n	800bbc8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bbb8:	4b39      	ldr	r3, [pc, #228]	@ (800bca0 <xQueueGenericSend+0x200>)
 800bbba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bbc8:	f002 f930 	bl	800de2c <vPortExitCritical>
				return pdPASS;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e063      	b.n	800bc98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d103      	bne.n	800bbde <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbd6:	f002 f929 	bl	800de2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e05c      	b.n	800bc98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d106      	bne.n	800bbf2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbe4:	f107 0314 	add.w	r3, r7, #20
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f001 f939 	bl	800ce60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbf2:	f002 f91b 	bl	800de2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbf6:	f000 fda7 	bl	800c748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbfa:	f002 f8e5 	bl	800ddc8 <vPortEnterCritical>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc04:	b25b      	sxtb	r3, r3
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc0a:	d103      	bne.n	800bc14 <xQueueGenericSend+0x174>
 800bc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc1a:	b25b      	sxtb	r3, r3
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc20:	d103      	bne.n	800bc2a <xQueueGenericSend+0x18a>
 800bc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc2a:	f002 f8ff 	bl	800de2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc2e:	1d3a      	adds	r2, r7, #4
 800bc30:	f107 0314 	add.w	r3, r7, #20
 800bc34:	4611      	mov	r1, r2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 f928 	bl	800ce8c <xTaskCheckForTimeOut>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d124      	bne.n	800bc8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc44:	f000 faa6 	bl	800c194 <prvIsQueueFull>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d018      	beq.n	800bc80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc50:	3310      	adds	r3, #16
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	4611      	mov	r1, r2
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 f84c 	bl	800ccf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc5e:	f000 fa31 	bl	800c0c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc62:	f000 fd7f 	bl	800c764 <xTaskResumeAll>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f47f af7c 	bne.w	800bb66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bc6e:	4b0c      	ldr	r3, [pc, #48]	@ (800bca0 <xQueueGenericSend+0x200>)
 800bc70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc74:	601a      	str	r2, [r3, #0]
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	e772      	b.n	800bb66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc82:	f000 fa1f 	bl	800c0c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc86:	f000 fd6d 	bl	800c764 <xTaskResumeAll>
 800bc8a:	e76c      	b.n	800bb66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc8e:	f000 fa19 	bl	800c0c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc92:	f000 fd67 	bl	800c764 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3738      	adds	r7, #56	@ 0x38
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	e000ed04 	.word	0xe000ed04

0800bca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b090      	sub	sp, #64	@ 0x40
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10b      	bne.n	800bcd4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bcce:	bf00      	nop
 800bcd0:	bf00      	nop
 800bcd2:	e7fd      	b.n	800bcd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d103      	bne.n	800bce2 <xQueueGenericSendFromISR+0x3e>
 800bcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <xQueueGenericSendFromISR+0x42>
 800bce2:	2301      	movs	r3, #1
 800bce4:	e000      	b.n	800bce8 <xQueueGenericSendFromISR+0x44>
 800bce6:	2300      	movs	r3, #0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10b      	bne.n	800bd04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bcfe:	bf00      	nop
 800bd00:	bf00      	nop
 800bd02:	e7fd      	b.n	800bd00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d103      	bne.n	800bd12 <xQueueGenericSendFromISR+0x6e>
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d101      	bne.n	800bd16 <xQueueGenericSendFromISR+0x72>
 800bd12:	2301      	movs	r3, #1
 800bd14:	e000      	b.n	800bd18 <xQueueGenericSendFromISR+0x74>
 800bd16:	2300      	movs	r3, #0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10b      	bne.n	800bd34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	623b      	str	r3, [r7, #32]
}
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
 800bd32:	e7fd      	b.n	800bd30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd34:	f002 f928 	bl	800df88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd38:	f3ef 8211 	mrs	r2, BASEPRI
 800bd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	61fa      	str	r2, [r7, #28]
 800bd4e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d302      	bcc.n	800bd66 <xQueueGenericSendFromISR+0xc2>
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d12f      	bne.n	800bdc6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	68b9      	ldr	r1, [r7, #8]
 800bd7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd7c:	f000 f912 	bl	800bfa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd88:	d112      	bne.n	800bdb0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d016      	beq.n	800bdc0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd94:	3324      	adds	r3, #36	@ 0x24
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 fffe 	bl	800cd98 <xTaskRemoveFromEventList>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00e      	beq.n	800bdc0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	e007      	b.n	800bdc0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bdb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	b25a      	sxtb	r2, r3
 800bdba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bdc4:	e001      	b.n	800bdca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdcc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bdd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3740      	adds	r7, #64	@ 0x40
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08c      	sub	sp, #48	@ 0x30
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdec:	2300      	movs	r3, #0
 800bdee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bdf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10b      	bne.n	800be12 <xQueueReceive+0x32>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	623b      	str	r3, [r7, #32]
}
 800be0c:	bf00      	nop
 800be0e:	bf00      	nop
 800be10:	e7fd      	b.n	800be0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d103      	bne.n	800be20 <xQueueReceive+0x40>
 800be18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <xQueueReceive+0x44>
 800be20:	2301      	movs	r3, #1
 800be22:	e000      	b.n	800be26 <xQueueReceive+0x46>
 800be24:	2300      	movs	r3, #0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10b      	bne.n	800be42 <xQueueReceive+0x62>
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	61fb      	str	r3, [r7, #28]
}
 800be3c:	bf00      	nop
 800be3e:	bf00      	nop
 800be40:	e7fd      	b.n	800be3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be42:	f001 f96f 	bl	800d124 <xTaskGetSchedulerState>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d102      	bne.n	800be52 <xQueueReceive+0x72>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <xQueueReceive+0x76>
 800be52:	2301      	movs	r3, #1
 800be54:	e000      	b.n	800be58 <xQueueReceive+0x78>
 800be56:	2300      	movs	r3, #0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d10b      	bne.n	800be74 <xQueueReceive+0x94>
	__asm volatile
 800be5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be60:	f383 8811 	msr	BASEPRI, r3
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	61bb      	str	r3, [r7, #24]
}
 800be6e:	bf00      	nop
 800be70:	bf00      	nop
 800be72:	e7fd      	b.n	800be70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be74:	f001 ffa8 	bl	800ddc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	d01f      	beq.n	800bec4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be88:	f000 f8f6 	bl	800c078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8e:	1e5a      	subs	r2, r3, #1
 800be90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00f      	beq.n	800bebc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be9e:	3310      	adds	r3, #16
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 ff79 	bl	800cd98 <xTaskRemoveFromEventList>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d007      	beq.n	800bebc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800beac:	4b3c      	ldr	r3, [pc, #240]	@ (800bfa0 <xQueueReceive+0x1c0>)
 800beae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bebc:	f001 ffb6 	bl	800de2c <vPortExitCritical>
				return pdPASS;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e069      	b.n	800bf98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d103      	bne.n	800bed2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800beca:	f001 ffaf 	bl	800de2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bece:	2300      	movs	r3, #0
 800bed0:	e062      	b.n	800bf98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d106      	bne.n	800bee6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bed8:	f107 0310 	add.w	r3, r7, #16
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 ffbf 	bl	800ce60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bee2:	2301      	movs	r3, #1
 800bee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bee6:	f001 ffa1 	bl	800de2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800beea:	f000 fc2d 	bl	800c748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800beee:	f001 ff6b 	bl	800ddc8 <vPortEnterCritical>
 800bef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bef8:	b25b      	sxtb	r3, r3
 800befa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800befe:	d103      	bne.n	800bf08 <xQueueReceive+0x128>
 800bf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf0e:	b25b      	sxtb	r3, r3
 800bf10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf14:	d103      	bne.n	800bf1e <xQueueReceive+0x13e>
 800bf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf1e:	f001 ff85 	bl	800de2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf22:	1d3a      	adds	r2, r7, #4
 800bf24:	f107 0310 	add.w	r3, r7, #16
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 ffae 	bl	800ce8c <xTaskCheckForTimeOut>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d123      	bne.n	800bf7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf38:	f000 f916 	bl	800c168 <prvIsQueueEmpty>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d017      	beq.n	800bf72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf44:	3324      	adds	r3, #36	@ 0x24
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 fed2 	bl	800ccf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf52:	f000 f8b7 	bl	800c0c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf56:	f000 fc05 	bl	800c764 <xTaskResumeAll>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d189      	bne.n	800be74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bf60:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa0 <xQueueReceive+0x1c0>)
 800bf62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	e780      	b.n	800be74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf74:	f000 f8a6 	bl	800c0c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf78:	f000 fbf4 	bl	800c764 <xTaskResumeAll>
 800bf7c:	e77a      	b.n	800be74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf80:	f000 f8a0 	bl	800c0c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf84:	f000 fbee 	bl	800c764 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf8a:	f000 f8ed 	bl	800c168 <prvIsQueueEmpty>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f43f af6f 	beq.w	800be74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3730      	adds	r7, #48	@ 0x30
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	e000ed04 	.word	0xe000ed04

0800bfa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10d      	bne.n	800bfde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d14d      	bne.n	800c066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 f8c6 	bl	800d160 <xTaskPriorityDisinherit>
 800bfd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	609a      	str	r2, [r3, #8]
 800bfdc:	e043      	b.n	800c066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d119      	bne.n	800c018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6858      	ldr	r0, [r3, #4]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfec:	461a      	mov	r2, r3
 800bfee:	68b9      	ldr	r1, [r7, #8]
 800bff0:	f002 ffa3 	bl	800ef3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bffc:	441a      	add	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d32b      	bcc.n	800c066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	605a      	str	r2, [r3, #4]
 800c016:	e026      	b.n	800c066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	68d8      	ldr	r0, [r3, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c020:	461a      	mov	r2, r3
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	f002 ff89 	bl	800ef3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	68da      	ldr	r2, [r3, #12]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c030:	425b      	negs	r3, r3
 800c032:	441a      	add	r2, r3
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	68da      	ldr	r2, [r3, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d207      	bcs.n	800c054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04c:	425b      	negs	r3, r3
 800c04e:	441a      	add	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b02      	cmp	r3, #2
 800c058:	d105      	bne.n	800c066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	3b01      	subs	r3, #1
 800c064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c06e:	697b      	ldr	r3, [r7, #20]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c086:	2b00      	cmp	r3, #0
 800c088:	d018      	beq.n	800c0bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	68da      	ldr	r2, [r3, #12]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c092:	441a      	add	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68da      	ldr	r2, [r3, #12]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d303      	bcc.n	800c0ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68d9      	ldr	r1, [r3, #12]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	6838      	ldr	r0, [r7, #0]
 800c0b8:	f002 ff3f 	bl	800ef3a <memcpy>
	}
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c0cc:	f001 fe7c 	bl	800ddc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0d8:	e011      	b.n	800c0fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d012      	beq.n	800c108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	3324      	adds	r3, #36	@ 0x24
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fe56 	bl	800cd98 <xTaskRemoveFromEventList>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d001      	beq.n	800c0f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c0f2:	f000 ff2f 	bl	800cf54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dce9      	bgt.n	800c0da <prvUnlockQueue+0x16>
 800c106:	e000      	b.n	800c10a <prvUnlockQueue+0x46>
					break;
 800c108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	22ff      	movs	r2, #255	@ 0xff
 800c10e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c112:	f001 fe8b 	bl	800de2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c116:	f001 fe57 	bl	800ddc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c122:	e011      	b.n	800c148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d012      	beq.n	800c152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	3310      	adds	r3, #16
 800c130:	4618      	mov	r0, r3
 800c132:	f000 fe31 	bl	800cd98 <xTaskRemoveFromEventList>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c13c:	f000 ff0a 	bl	800cf54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	3b01      	subs	r3, #1
 800c144:	b2db      	uxtb	r3, r3
 800c146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	dce9      	bgt.n	800c124 <prvUnlockQueue+0x60>
 800c150:	e000      	b.n	800c154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	22ff      	movs	r2, #255	@ 0xff
 800c158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c15c:	f001 fe66 	bl	800de2c <vPortExitCritical>
}
 800c160:	bf00      	nop
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c170:	f001 fe2a 	bl	800ddc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d102      	bne.n	800c182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c17c:	2301      	movs	r3, #1
 800c17e:	60fb      	str	r3, [r7, #12]
 800c180:	e001      	b.n	800c186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c182:	2300      	movs	r3, #0
 800c184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c186:	f001 fe51 	bl	800de2c <vPortExitCritical>

	return xReturn;
 800c18a:	68fb      	ldr	r3, [r7, #12]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c19c:	f001 fe14 	bl	800ddc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d102      	bne.n	800c1b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	60fb      	str	r3, [r7, #12]
 800c1b0:	e001      	b.n	800c1b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1b6:	f001 fe39 	bl	800de2c <vPortExitCritical>

	return xReturn;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	60fb      	str	r3, [r7, #12]
 800c1d2:	e014      	b.n	800c1fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c1d4:	4a0f      	ldr	r2, [pc, #60]	@ (800c214 <vQueueAddToRegistry+0x50>)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10b      	bne.n	800c1f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c1e0:	490c      	ldr	r1, [pc, #48]	@ (800c214 <vQueueAddToRegistry+0x50>)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c1ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c214 <vQueueAddToRegistry+0x50>)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	4413      	add	r3, r2
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c1f6:	e006      	b.n	800c206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b07      	cmp	r3, #7
 800c202:	d9e7      	bls.n	800c1d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c204:	bf00      	nop
 800c206:	bf00      	nop
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	20001320 	.word	0x20001320

0800c218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c228:	f001 fdce 	bl	800ddc8 <vPortEnterCritical>
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c232:	b25b      	sxtb	r3, r3
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c238:	d103      	bne.n	800c242 <vQueueWaitForMessageRestricted+0x2a>
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c24e:	d103      	bne.n	800c258 <vQueueWaitForMessageRestricted+0x40>
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c258:	f001 fde8 	bl	800de2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c260:	2b00      	cmp	r3, #0
 800c262:	d106      	bne.n	800c272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	3324      	adds	r3, #36	@ 0x24
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 fd67 	bl	800cd40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c272:	6978      	ldr	r0, [r7, #20]
 800c274:	f7ff ff26 	bl	800c0c4 <prvUnlockQueue>
	}
 800c278:	bf00      	nop
 800c27a:	3718      	adds	r7, #24
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c280:	b580      	push	{r7, lr}
 800c282:	b08e      	sub	sp, #56	@ 0x38
 800c284:	af04      	add	r7, sp, #16
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10b      	bne.n	800c2ac <xTaskCreateStatic+0x2c>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	623b      	str	r3, [r7, #32]
}
 800c2a6:	bf00      	nop
 800c2a8:	bf00      	nop
 800c2aa:	e7fd      	b.n	800c2a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10b      	bne.n	800c2ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	61fb      	str	r3, [r7, #28]
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop
 800c2c8:	e7fd      	b.n	800c2c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c2ca:	23a8      	movs	r3, #168	@ 0xa8
 800c2cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2ba8      	cmp	r3, #168	@ 0xa8
 800c2d2:	d00b      	beq.n	800c2ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	61bb      	str	r3, [r7, #24]
}
 800c2e6:	bf00      	nop
 800c2e8:	bf00      	nop
 800c2ea:	e7fd      	b.n	800c2e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c2ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d01e      	beq.n	800c332 <xTaskCreateStatic+0xb2>
 800c2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d01b      	beq.n	800c332 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c300:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c302:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c306:	2202      	movs	r2, #2
 800c308:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c30c:	2300      	movs	r3, #0
 800c30e:	9303      	str	r3, [sp, #12]
 800c310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c312:	9302      	str	r3, [sp, #8]
 800c314:	f107 0314 	add.w	r3, r7, #20
 800c318:	9301      	str	r3, [sp, #4]
 800c31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	68b9      	ldr	r1, [r7, #8]
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 f851 	bl	800c3cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c32a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c32c:	f000 f8f6 	bl	800c51c <prvAddNewTaskToReadyList>
 800c330:	e001      	b.n	800c336 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c336:	697b      	ldr	r3, [r7, #20]
	}
 800c338:	4618      	mov	r0, r3
 800c33a:	3728      	adds	r7, #40	@ 0x28
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c340:	b580      	push	{r7, lr}
 800c342:	b08c      	sub	sp, #48	@ 0x30
 800c344:	af04      	add	r7, sp, #16
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	603b      	str	r3, [r7, #0]
 800c34c:	4613      	mov	r3, r2
 800c34e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c350:	88fb      	ldrh	r3, [r7, #6]
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4618      	mov	r0, r3
 800c356:	f001 fe59 	bl	800e00c <pvPortMalloc>
 800c35a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00e      	beq.n	800c380 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c362:	20a8      	movs	r0, #168	@ 0xa8
 800c364:	f001 fe52 	bl	800e00c <pvPortMalloc>
 800c368:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d003      	beq.n	800c378 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	631a      	str	r2, [r3, #48]	@ 0x30
 800c376:	e005      	b.n	800c384 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c378:	6978      	ldr	r0, [r7, #20]
 800c37a:	f001 ff15 	bl	800e1a8 <vPortFree>
 800c37e:	e001      	b.n	800c384 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c380:	2300      	movs	r3, #0
 800c382:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d017      	beq.n	800c3ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c392:	88fa      	ldrh	r2, [r7, #6]
 800c394:	2300      	movs	r3, #0
 800c396:	9303      	str	r3, [sp, #12]
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	9302      	str	r3, [sp, #8]
 800c39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	68b9      	ldr	r1, [r7, #8]
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f000 f80f 	bl	800c3cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3ae:	69f8      	ldr	r0, [r7, #28]
 800c3b0:	f000 f8b4 	bl	800c51c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	61bb      	str	r3, [r7, #24]
 800c3b8:	e002      	b.n	800c3c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c3ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c3c0:	69bb      	ldr	r3, [r7, #24]
	}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3720      	adds	r7, #32
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
	...

0800c3cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	21a5      	movs	r1, #165	@ 0xa5
 800c3e6:	f002 fd19 	bl	800ee1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	4413      	add	r3, r2
 800c3fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00b      	beq.n	800c426 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	617b      	str	r3, [r7, #20]
}
 800c420:	bf00      	nop
 800c422:	bf00      	nop
 800c424:	e7fd      	b.n	800c422 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01f      	beq.n	800c46c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c42c:	2300      	movs	r3, #0
 800c42e:	61fb      	str	r3, [r7, #28]
 800c430:	e012      	b.n	800c458 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	4413      	add	r3, r2
 800c438:	7819      	ldrb	r1, [r3, #0]
 800c43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	4413      	add	r3, r2
 800c440:	3334      	adds	r3, #52	@ 0x34
 800c442:	460a      	mov	r2, r1
 800c444:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	4413      	add	r3, r2
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d006      	beq.n	800c460 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	3301      	adds	r3, #1
 800c456:	61fb      	str	r3, [r7, #28]
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	2b0f      	cmp	r3, #15
 800c45c:	d9e9      	bls.n	800c432 <prvInitialiseNewTask+0x66>
 800c45e:	e000      	b.n	800c462 <prvInitialiseNewTask+0x96>
			{
				break;
 800c460:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c46a:	e003      	b.n	800c474 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c476:	2b37      	cmp	r3, #55	@ 0x37
 800c478:	d901      	bls.n	800c47e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c47a:	2337      	movs	r3, #55	@ 0x37
 800c47c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c482:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c488:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48c:	2200      	movs	r2, #0
 800c48e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c492:	3304      	adds	r3, #4
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff f965 	bl	800b764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49c:	3318      	adds	r3, #24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff f960 	bl	800b764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4cc:	3354      	adds	r3, #84	@ 0x54
 800c4ce:	224c      	movs	r2, #76	@ 0x4c
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f002 fca2 	bl	800ee1c <memset>
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4da:	4a0d      	ldr	r2, [pc, #52]	@ (800c510 <prvInitialiseNewTask+0x144>)
 800c4dc:	659a      	str	r2, [r3, #88]	@ 0x58
 800c4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e0:	4a0c      	ldr	r2, [pc, #48]	@ (800c514 <prvInitialiseNewTask+0x148>)
 800c4e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e6:	4a0c      	ldr	r2, [pc, #48]	@ (800c518 <prvInitialiseNewTask+0x14c>)
 800c4e8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	68f9      	ldr	r1, [r7, #12]
 800c4ee:	69b8      	ldr	r0, [r7, #24]
 800c4f0:	f001 fb36 	bl	800db60 <pxPortInitialiseStack>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c506:	bf00      	nop
 800c508:	3720      	adds	r7, #32
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	200055b4 	.word	0x200055b4
 800c514:	2000561c 	.word	0x2000561c
 800c518:	20005684 	.word	0x20005684

0800c51c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c524:	f001 fc50 	bl	800ddc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c528:	4b2d      	ldr	r3, [pc, #180]	@ (800c5e0 <prvAddNewTaskToReadyList+0xc4>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	3301      	adds	r3, #1
 800c52e:	4a2c      	ldr	r2, [pc, #176]	@ (800c5e0 <prvAddNewTaskToReadyList+0xc4>)
 800c530:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c532:	4b2c      	ldr	r3, [pc, #176]	@ (800c5e4 <prvAddNewTaskToReadyList+0xc8>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d109      	bne.n	800c54e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c53a:	4a2a      	ldr	r2, [pc, #168]	@ (800c5e4 <prvAddNewTaskToReadyList+0xc8>)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c540:	4b27      	ldr	r3, [pc, #156]	@ (800c5e0 <prvAddNewTaskToReadyList+0xc4>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d110      	bne.n	800c56a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c548:	f000 fd28 	bl	800cf9c <prvInitialiseTaskLists>
 800c54c:	e00d      	b.n	800c56a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c54e:	4b26      	ldr	r3, [pc, #152]	@ (800c5e8 <prvAddNewTaskToReadyList+0xcc>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d109      	bne.n	800c56a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c556:	4b23      	ldr	r3, [pc, #140]	@ (800c5e4 <prvAddNewTaskToReadyList+0xc8>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c560:	429a      	cmp	r2, r3
 800c562:	d802      	bhi.n	800c56a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c564:	4a1f      	ldr	r2, [pc, #124]	@ (800c5e4 <prvAddNewTaskToReadyList+0xc8>)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c56a:	4b20      	ldr	r3, [pc, #128]	@ (800c5ec <prvAddNewTaskToReadyList+0xd0>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3301      	adds	r3, #1
 800c570:	4a1e      	ldr	r2, [pc, #120]	@ (800c5ec <prvAddNewTaskToReadyList+0xd0>)
 800c572:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c574:	4b1d      	ldr	r3, [pc, #116]	@ (800c5ec <prvAddNewTaskToReadyList+0xd0>)
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c580:	4b1b      	ldr	r3, [pc, #108]	@ (800c5f0 <prvAddNewTaskToReadyList+0xd4>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	429a      	cmp	r2, r3
 800c586:	d903      	bls.n	800c590 <prvAddNewTaskToReadyList+0x74>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58c:	4a18      	ldr	r2, [pc, #96]	@ (800c5f0 <prvAddNewTaskToReadyList+0xd4>)
 800c58e:	6013      	str	r3, [r2, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c594:	4613      	mov	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4a15      	ldr	r2, [pc, #84]	@ (800c5f4 <prvAddNewTaskToReadyList+0xd8>)
 800c59e:	441a      	add	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	f7ff f8e9 	bl	800b77e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c5ac:	f001 fc3e 	bl	800de2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c5b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e8 <prvAddNewTaskToReadyList+0xcc>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00e      	beq.n	800c5d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e4 <prvAddNewTaskToReadyList+0xc8>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d207      	bcs.n	800c5d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c5c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c5f8 <prvAddNewTaskToReadyList+0xdc>)
 800c5c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5d6:	bf00      	nop
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	20001834 	.word	0x20001834
 800c5e4:	20001360 	.word	0x20001360
 800c5e8:	20001840 	.word	0x20001840
 800c5ec:	20001850 	.word	0x20001850
 800c5f0:	2000183c 	.word	0x2000183c
 800c5f4:	20001364 	.word	0x20001364
 800c5f8:	e000ed04 	.word	0xe000ed04

0800c5fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c604:	2300      	movs	r3, #0
 800c606:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d018      	beq.n	800c640 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c60e:	4b14      	ldr	r3, [pc, #80]	@ (800c660 <vTaskDelay+0x64>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00b      	beq.n	800c62e <vTaskDelay+0x32>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	60bb      	str	r3, [r7, #8]
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	e7fd      	b.n	800c62a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c62e:	f000 f88b 	bl	800c748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c632:	2100      	movs	r1, #0
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fee5 	bl	800d404 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c63a:	f000 f893 	bl	800c764 <xTaskResumeAll>
 800c63e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d107      	bne.n	800c656 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c646:	4b07      	ldr	r3, [pc, #28]	@ (800c664 <vTaskDelay+0x68>)
 800c648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	2000185c 	.word	0x2000185c
 800c664:	e000ed04 	.word	0xe000ed04

0800c668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08a      	sub	sp, #40	@ 0x28
 800c66c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c66e:	2300      	movs	r3, #0
 800c670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c672:	2300      	movs	r3, #0
 800c674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c676:	463a      	mov	r2, r7
 800c678:	1d39      	adds	r1, r7, #4
 800c67a:	f107 0308 	add.w	r3, r7, #8
 800c67e:	4618      	mov	r0, r3
 800c680:	f7ff f81c 	bl	800b6bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	9202      	str	r2, [sp, #8]
 800c68c:	9301      	str	r3, [sp, #4]
 800c68e:	2300      	movs	r3, #0
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	2300      	movs	r3, #0
 800c694:	460a      	mov	r2, r1
 800c696:	4924      	ldr	r1, [pc, #144]	@ (800c728 <vTaskStartScheduler+0xc0>)
 800c698:	4824      	ldr	r0, [pc, #144]	@ (800c72c <vTaskStartScheduler+0xc4>)
 800c69a:	f7ff fdf1 	bl	800c280 <xTaskCreateStatic>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	4a23      	ldr	r2, [pc, #140]	@ (800c730 <vTaskStartScheduler+0xc8>)
 800c6a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6a4:	4b22      	ldr	r3, [pc, #136]	@ (800c730 <vTaskStartScheduler+0xc8>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	617b      	str	r3, [r7, #20]
 800c6b0:	e001      	b.n	800c6b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d102      	bne.n	800c6c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c6bc:	f000 fef6 	bl	800d4ac <xTimerCreateTimerTask>
 800c6c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d11b      	bne.n	800c700 <vTaskStartScheduler+0x98>
	__asm volatile
 800c6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	613b      	str	r3, [r7, #16]
}
 800c6da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6dc:	4b15      	ldr	r3, [pc, #84]	@ (800c734 <vTaskStartScheduler+0xcc>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3354      	adds	r3, #84	@ 0x54
 800c6e2:	4a15      	ldr	r2, [pc, #84]	@ (800c738 <vTaskStartScheduler+0xd0>)
 800c6e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6e6:	4b15      	ldr	r3, [pc, #84]	@ (800c73c <vTaskStartScheduler+0xd4>)
 800c6e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c6ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6ee:	4b14      	ldr	r3, [pc, #80]	@ (800c740 <vTaskStartScheduler+0xd8>)
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6f4:	4b13      	ldr	r3, [pc, #76]	@ (800c744 <vTaskStartScheduler+0xdc>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6fa:	f001 fac1 	bl	800dc80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6fe:	e00f      	b.n	800c720 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c706:	d10b      	bne.n	800c720 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	60fb      	str	r3, [r7, #12]
}
 800c71a:	bf00      	nop
 800c71c:	bf00      	nop
 800c71e:	e7fd      	b.n	800c71c <vTaskStartScheduler+0xb4>
}
 800c720:	bf00      	nop
 800c722:	3718      	adds	r7, #24
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	08011f1c 	.word	0x08011f1c
 800c72c:	0800cf6d 	.word	0x0800cf6d
 800c730:	20001858 	.word	0x20001858
 800c734:	20001360 	.word	0x20001360
 800c738:	2000007c 	.word	0x2000007c
 800c73c:	20001854 	.word	0x20001854
 800c740:	20001840 	.word	0x20001840
 800c744:	20001838 	.word	0x20001838

0800c748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c748:	b480      	push	{r7}
 800c74a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c74c:	4b04      	ldr	r3, [pc, #16]	@ (800c760 <vTaskSuspendAll+0x18>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3301      	adds	r3, #1
 800c752:	4a03      	ldr	r2, [pc, #12]	@ (800c760 <vTaskSuspendAll+0x18>)
 800c754:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c756:	bf00      	nop
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	2000185c 	.word	0x2000185c

0800c764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c76e:	2300      	movs	r3, #0
 800c770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c772:	4b42      	ldr	r3, [pc, #264]	@ (800c87c <xTaskResumeAll+0x118>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10b      	bne.n	800c792 <xTaskResumeAll+0x2e>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	603b      	str	r3, [r7, #0]
}
 800c78c:	bf00      	nop
 800c78e:	bf00      	nop
 800c790:	e7fd      	b.n	800c78e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c792:	f001 fb19 	bl	800ddc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c796:	4b39      	ldr	r3, [pc, #228]	@ (800c87c <xTaskResumeAll+0x118>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	4a37      	ldr	r2, [pc, #220]	@ (800c87c <xTaskResumeAll+0x118>)
 800c79e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7a0:	4b36      	ldr	r3, [pc, #216]	@ (800c87c <xTaskResumeAll+0x118>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d162      	bne.n	800c86e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c7a8:	4b35      	ldr	r3, [pc, #212]	@ (800c880 <xTaskResumeAll+0x11c>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d05e      	beq.n	800c86e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7b0:	e02f      	b.n	800c812 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b2:	4b34      	ldr	r3, [pc, #208]	@ (800c884 <xTaskResumeAll+0x120>)
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3318      	adds	r3, #24
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff f83a 	bl	800b838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7ff f835 	bl	800b838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d2:	4b2d      	ldr	r3, [pc, #180]	@ (800c888 <xTaskResumeAll+0x124>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d903      	bls.n	800c7e2 <xTaskResumeAll+0x7e>
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7de:	4a2a      	ldr	r2, [pc, #168]	@ (800c888 <xTaskResumeAll+0x124>)
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4a27      	ldr	r2, [pc, #156]	@ (800c88c <xTaskResumeAll+0x128>)
 800c7f0:	441a      	add	r2, r3
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3304      	adds	r3, #4
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	f7fe ffc0 	bl	800b77e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c802:	4b23      	ldr	r3, [pc, #140]	@ (800c890 <xTaskResumeAll+0x12c>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c808:	429a      	cmp	r2, r3
 800c80a:	d302      	bcc.n	800c812 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c80c:	4b21      	ldr	r3, [pc, #132]	@ (800c894 <xTaskResumeAll+0x130>)
 800c80e:	2201      	movs	r2, #1
 800c810:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c812:	4b1c      	ldr	r3, [pc, #112]	@ (800c884 <xTaskResumeAll+0x120>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1cb      	bne.n	800c7b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c820:	f000 fc60 	bl	800d0e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c824:	4b1c      	ldr	r3, [pc, #112]	@ (800c898 <xTaskResumeAll+0x134>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d010      	beq.n	800c852 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c830:	f000 f940 	bl	800cab4 <xTaskIncrementTick>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c83a:	4b16      	ldr	r3, [pc, #88]	@ (800c894 <xTaskResumeAll+0x130>)
 800c83c:	2201      	movs	r2, #1
 800c83e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3b01      	subs	r3, #1
 800c844:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1f1      	bne.n	800c830 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c84c:	4b12      	ldr	r3, [pc, #72]	@ (800c898 <xTaskResumeAll+0x134>)
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c852:	4b10      	ldr	r3, [pc, #64]	@ (800c894 <xTaskResumeAll+0x130>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d009      	beq.n	800c86e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c85a:	2301      	movs	r3, #1
 800c85c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c85e:	4b0f      	ldr	r3, [pc, #60]	@ (800c89c <xTaskResumeAll+0x138>)
 800c860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c86e:	f001 fadd 	bl	800de2c <vPortExitCritical>

	return xAlreadyYielded;
 800c872:	68bb      	ldr	r3, [r7, #8]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	2000185c 	.word	0x2000185c
 800c880:	20001834 	.word	0x20001834
 800c884:	200017f4 	.word	0x200017f4
 800c888:	2000183c 	.word	0x2000183c
 800c88c:	20001364 	.word	0x20001364
 800c890:	20001360 	.word	0x20001360
 800c894:	20001848 	.word	0x20001848
 800c898:	20001844 	.word	0x20001844
 800c89c:	e000ed04 	.word	0xe000ed04

0800c8a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8a6:	4b05      	ldr	r3, [pc, #20]	@ (800c8bc <xTaskGetTickCount+0x1c>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c8ac:	687b      	ldr	r3, [r7, #4]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	370c      	adds	r7, #12
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	20001838 	.word	0x20001838

0800c8c0 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <pcTaskGetName+0x14>
 800c8ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c908 <pcTaskGetName+0x48>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	e000      	b.n	800c8d6 <pcTaskGetName+0x16>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10b      	bne.n	800c8f6 <pcTaskGetName+0x36>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	60bb      	str	r3, [r7, #8]
}
 800c8f0:	bf00      	nop
 800c8f2:	bf00      	nop
 800c8f4:	e7fd      	b.n	800c8f2 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	3334      	adds	r3, #52	@ 0x34
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	20001360 	.word	0x20001360

0800c90c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800c90c:	b480      	push	{r7}
 800c90e:	b08b      	sub	sp, #44	@ 0x2c
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800c916:	2300      	movs	r3, #0
 800c918:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d05b      	beq.n	800c9da <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	61bb      	str	r3, [r7, #24]
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	605a      	str	r2, [r3, #4]
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	3308      	adds	r3, #8
 800c938:	429a      	cmp	r2, r3
 800c93a:	d104      	bne.n	800c946 <prvSearchForNameWithinSingleList+0x3a>
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	685a      	ldr	r2, [r3, #4]
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	605a      	str	r2, [r3, #4]
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	613b      	str	r3, [r7, #16]
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	605a      	str	r2, [r3, #4]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	3308      	adds	r3, #8
 800c964:	429a      	cmp	r2, r3
 800c966:	d104      	bne.n	800c972 <prvSearchForNameWithinSingleList+0x66>
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	605a      	str	r2, [r3, #4]
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800c97a:	2300      	movs	r3, #0
 800c97c:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c97e:	2300      	movs	r3, #0
 800c980:	623b      	str	r3, [r7, #32]
 800c982:	e01c      	b.n	800c9be <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	4413      	add	r3, r2
 800c98a:	3334      	adds	r3, #52	@ 0x34
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800c990:	683a      	ldr	r2, [r7, #0]
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	4413      	add	r3, r2
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	7afa      	ldrb	r2, [r7, #11]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d002      	beq.n	800c9a4 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	e006      	b.n	800c9b2 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800c9a4:	7afb      	ldrb	r3, [r7, #11]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d103      	bne.n	800c9b2 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9b8:	6a3b      	ldr	r3, [r7, #32]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	623b      	str	r3, [r7, #32]
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	2b0f      	cmp	r3, #15
 800c9c2:	d9df      	bls.n	800c984 <prvSearchForNameWithinSingleList+0x78>
 800c9c4:	e000      	b.n	800c9c8 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800c9c6:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d104      	bne.n	800c9d8 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d1bb      	bne.n	800c94e <prvSearchForNameWithinSingleList+0x42>
 800c9d6:	e000      	b.n	800c9da <prvSearchForNameWithinSingleList+0xce>
					break;
 800c9d8:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800c9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	372c      	adds	r7, #44	@ 0x2c
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800c9f0:	2338      	movs	r3, #56	@ 0x38
 800c9f2:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7f3 fc3b 	bl	8000270 <strlen>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b0f      	cmp	r3, #15
 800c9fe:	d90b      	bls.n	800ca18 <xTaskGetHandle+0x30>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	60fb      	str	r3, [r7, #12]
}
 800ca12:	bf00      	nop
 800ca14:	bf00      	nop
 800ca16:	e7fd      	b.n	800ca14 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800ca18:	f7ff fe96 	bl	800c748 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	4613      	mov	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4a1c      	ldr	r2, [pc, #112]	@ (800caa0 <xTaskGetHandle+0xb8>)
 800ca2e:	4413      	add	r3, r2
 800ca30:	6879      	ldr	r1, [r7, #4]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff ff6a 	bl	800c90c <prvSearchForNameWithinSingleList>
 800ca38:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d103      	bne.n	800ca48 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1ea      	bne.n	800ca1c <xTaskGetHandle+0x34>
 800ca46:	e000      	b.n	800ca4a <xTaskGetHandle+0x62>
					break;
 800ca48:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d106      	bne.n	800ca5e <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800ca50:	4b14      	ldr	r3, [pc, #80]	@ (800caa4 <xTaskGetHandle+0xbc>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff ff58 	bl	800c90c <prvSearchForNameWithinSingleList>
 800ca5c:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d106      	bne.n	800ca72 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800ca64:	4b10      	ldr	r3, [pc, #64]	@ (800caa8 <xTaskGetHandle+0xc0>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff ff4e 	bl	800c90c <prvSearchForNameWithinSingleList>
 800ca70:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d104      	bne.n	800ca82 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800ca78:	6879      	ldr	r1, [r7, #4]
 800ca7a:	480c      	ldr	r0, [pc, #48]	@ (800caac <xTaskGetHandle+0xc4>)
 800ca7c:	f7ff ff46 	bl	800c90c <prvSearchForNameWithinSingleList>
 800ca80:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d104      	bne.n	800ca92 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	4809      	ldr	r0, [pc, #36]	@ (800cab0 <xTaskGetHandle+0xc8>)
 800ca8c:	f7ff ff3e 	bl	800c90c <prvSearchForNameWithinSingleList>
 800ca90:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800ca92:	f7ff fe67 	bl	800c764 <xTaskResumeAll>

		return pxTCB;
 800ca96:	693b      	ldr	r3, [r7, #16]
	}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	20001364 	.word	0x20001364
 800caa4:	200017ec 	.word	0x200017ec
 800caa8:	200017f0 	.word	0x200017f0
 800caac:	20001820 	.word	0x20001820
 800cab0:	20001808 	.word	0x20001808

0800cab4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800caba:	2300      	movs	r3, #0
 800cabc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cabe:	4b4f      	ldr	r3, [pc, #316]	@ (800cbfc <xTaskIncrementTick+0x148>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f040 8090 	bne.w	800cbe8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cac8:	4b4d      	ldr	r3, [pc, #308]	@ (800cc00 <xTaskIncrementTick+0x14c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	3301      	adds	r3, #1
 800cace:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cad0:	4a4b      	ldr	r2, [pc, #300]	@ (800cc00 <xTaskIncrementTick+0x14c>)
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d121      	bne.n	800cb20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cadc:	4b49      	ldr	r3, [pc, #292]	@ (800cc04 <xTaskIncrementTick+0x150>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00b      	beq.n	800cafe <xTaskIncrementTick+0x4a>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	603b      	str	r3, [r7, #0]
}
 800caf8:	bf00      	nop
 800cafa:	bf00      	nop
 800cafc:	e7fd      	b.n	800cafa <xTaskIncrementTick+0x46>
 800cafe:	4b41      	ldr	r3, [pc, #260]	@ (800cc04 <xTaskIncrementTick+0x150>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	4b40      	ldr	r3, [pc, #256]	@ (800cc08 <xTaskIncrementTick+0x154>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a3e      	ldr	r2, [pc, #248]	@ (800cc04 <xTaskIncrementTick+0x150>)
 800cb0a:	6013      	str	r3, [r2, #0]
 800cb0c:	4a3e      	ldr	r2, [pc, #248]	@ (800cc08 <xTaskIncrementTick+0x154>)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	4b3e      	ldr	r3, [pc, #248]	@ (800cc0c <xTaskIncrementTick+0x158>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	4a3c      	ldr	r2, [pc, #240]	@ (800cc0c <xTaskIncrementTick+0x158>)
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	f000 fae2 	bl	800d0e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb20:	4b3b      	ldr	r3, [pc, #236]	@ (800cc10 <xTaskIncrementTick+0x15c>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d349      	bcc.n	800cbbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb2a:	4b36      	ldr	r3, [pc, #216]	@ (800cc04 <xTaskIncrementTick+0x150>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d104      	bne.n	800cb3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb34:	4b36      	ldr	r3, [pc, #216]	@ (800cc10 <xTaskIncrementTick+0x15c>)
 800cb36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb3a:	601a      	str	r2, [r3, #0]
					break;
 800cb3c:	e03f      	b.n	800cbbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb3e:	4b31      	ldr	r3, [pc, #196]	@ (800cc04 <xTaskIncrementTick+0x150>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb4e:	693a      	ldr	r2, [r7, #16]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d203      	bcs.n	800cb5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb56:	4a2e      	ldr	r2, [pc, #184]	@ (800cc10 <xTaskIncrementTick+0x15c>)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb5c:	e02f      	b.n	800cbbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	3304      	adds	r3, #4
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe fe68 	bl	800b838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d004      	beq.n	800cb7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	3318      	adds	r3, #24
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fe fe5f 	bl	800b838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb7e:	4b25      	ldr	r3, [pc, #148]	@ (800cc14 <xTaskIncrementTick+0x160>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d903      	bls.n	800cb8e <xTaskIncrementTick+0xda>
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb8a:	4a22      	ldr	r2, [pc, #136]	@ (800cc14 <xTaskIncrementTick+0x160>)
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb92:	4613      	mov	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4a1f      	ldr	r2, [pc, #124]	@ (800cc18 <xTaskIncrementTick+0x164>)
 800cb9c:	441a      	add	r2, r3
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	3304      	adds	r3, #4
 800cba2:	4619      	mov	r1, r3
 800cba4:	4610      	mov	r0, r2
 800cba6:	f7fe fdea 	bl	800b77e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbae:	4b1b      	ldr	r3, [pc, #108]	@ (800cc1c <xTaskIncrementTick+0x168>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d3b8      	bcc.n	800cb2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbbc:	e7b5      	b.n	800cb2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbbe:	4b17      	ldr	r3, [pc, #92]	@ (800cc1c <xTaskIncrementTick+0x168>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbc4:	4914      	ldr	r1, [pc, #80]	@ (800cc18 <xTaskIncrementTick+0x164>)
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	440b      	add	r3, r1
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d901      	bls.n	800cbda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cbda:	4b11      	ldr	r3, [pc, #68]	@ (800cc20 <xTaskIncrementTick+0x16c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d007      	beq.n	800cbf2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	617b      	str	r3, [r7, #20]
 800cbe6:	e004      	b.n	800cbf2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	@ (800cc24 <xTaskIncrementTick+0x170>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3301      	adds	r3, #1
 800cbee:	4a0d      	ldr	r2, [pc, #52]	@ (800cc24 <xTaskIncrementTick+0x170>)
 800cbf0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cbf2:	697b      	ldr	r3, [r7, #20]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3718      	adds	r7, #24
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	2000185c 	.word	0x2000185c
 800cc00:	20001838 	.word	0x20001838
 800cc04:	200017ec 	.word	0x200017ec
 800cc08:	200017f0 	.word	0x200017f0
 800cc0c:	2000184c 	.word	0x2000184c
 800cc10:	20001854 	.word	0x20001854
 800cc14:	2000183c 	.word	0x2000183c
 800cc18:	20001364 	.word	0x20001364
 800cc1c:	20001360 	.word	0x20001360
 800cc20:	20001848 	.word	0x20001848
 800cc24:	20001844 	.word	0x20001844

0800cc28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc2e:	4b2b      	ldr	r3, [pc, #172]	@ (800ccdc <vTaskSwitchContext+0xb4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc36:	4b2a      	ldr	r3, [pc, #168]	@ (800cce0 <vTaskSwitchContext+0xb8>)
 800cc38:	2201      	movs	r2, #1
 800cc3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc3c:	e047      	b.n	800ccce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cc3e:	4b28      	ldr	r3, [pc, #160]	@ (800cce0 <vTaskSwitchContext+0xb8>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc44:	4b27      	ldr	r3, [pc, #156]	@ (800cce4 <vTaskSwitchContext+0xbc>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	60fb      	str	r3, [r7, #12]
 800cc4a:	e011      	b.n	800cc70 <vTaskSwitchContext+0x48>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10b      	bne.n	800cc6a <vTaskSwitchContext+0x42>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	607b      	str	r3, [r7, #4]
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop
 800cc68:	e7fd      	b.n	800cc66 <vTaskSwitchContext+0x3e>
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	491d      	ldr	r1, [pc, #116]	@ (800cce8 <vTaskSwitchContext+0xc0>)
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	440b      	add	r3, r1
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0e3      	beq.n	800cc4c <vTaskSwitchContext+0x24>
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	4613      	mov	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4a16      	ldr	r2, [pc, #88]	@ (800cce8 <vTaskSwitchContext+0xc0>)
 800cc90:	4413      	add	r3, r2
 800cc92:	60bb      	str	r3, [r7, #8]
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	605a      	str	r2, [r3, #4]
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	3308      	adds	r3, #8
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d104      	bne.n	800ccb4 <vTaskSwitchContext+0x8c>
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	685a      	ldr	r2, [r3, #4]
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	605a      	str	r2, [r3, #4]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	4a0c      	ldr	r2, [pc, #48]	@ (800ccec <vTaskSwitchContext+0xc4>)
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	4a09      	ldr	r2, [pc, #36]	@ (800cce4 <vTaskSwitchContext+0xbc>)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccc4:	4b09      	ldr	r3, [pc, #36]	@ (800ccec <vTaskSwitchContext+0xc4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3354      	adds	r3, #84	@ 0x54
 800ccca:	4a09      	ldr	r2, [pc, #36]	@ (800ccf0 <vTaskSwitchContext+0xc8>)
 800cccc:	6013      	str	r3, [r2, #0]
}
 800ccce:	bf00      	nop
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	2000185c 	.word	0x2000185c
 800cce0:	20001848 	.word	0x20001848
 800cce4:	2000183c 	.word	0x2000183c
 800cce8:	20001364 	.word	0x20001364
 800ccec:	20001360 	.word	0x20001360
 800ccf0:	2000007c 	.word	0x2000007c

0800ccf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d10b      	bne.n	800cd1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd08:	f383 8811 	msr	BASEPRI, r3
 800cd0c:	f3bf 8f6f 	isb	sy
 800cd10:	f3bf 8f4f 	dsb	sy
 800cd14:	60fb      	str	r3, [r7, #12]
}
 800cd16:	bf00      	nop
 800cd18:	bf00      	nop
 800cd1a:	e7fd      	b.n	800cd18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd1c:	4b07      	ldr	r3, [pc, #28]	@ (800cd3c <vTaskPlaceOnEventList+0x48>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	3318      	adds	r3, #24
 800cd22:	4619      	mov	r1, r3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7fe fd4e 	bl	800b7c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd2a:	2101      	movs	r1, #1
 800cd2c:	6838      	ldr	r0, [r7, #0]
 800cd2e:	f000 fb69 	bl	800d404 <prvAddCurrentTaskToDelayedList>
}
 800cd32:	bf00      	nop
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20001360 	.word	0x20001360

0800cd40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10b      	bne.n	800cd6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	617b      	str	r3, [r7, #20]
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop
 800cd68:	e7fd      	b.n	800cd66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd6a:	4b0a      	ldr	r3, [pc, #40]	@ (800cd94 <vTaskPlaceOnEventListRestricted+0x54>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3318      	adds	r3, #24
 800cd70:	4619      	mov	r1, r3
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f7fe fd03 	bl	800b77e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d002      	beq.n	800cd84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cd7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd84:	6879      	ldr	r1, [r7, #4]
 800cd86:	68b8      	ldr	r0, [r7, #8]
 800cd88:	f000 fb3c 	bl	800d404 <prvAddCurrentTaskToDelayedList>
	}
 800cd8c:	bf00      	nop
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	20001360 	.word	0x20001360

0800cd98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10b      	bne.n	800cdc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	60fb      	str	r3, [r7, #12]
}
 800cdc0:	bf00      	nop
 800cdc2:	bf00      	nop
 800cdc4:	e7fd      	b.n	800cdc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	3318      	adds	r3, #24
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fe fd34 	bl	800b838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdd0:	4b1d      	ldr	r3, [pc, #116]	@ (800ce48 <xTaskRemoveFromEventList+0xb0>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d11d      	bne.n	800ce14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	3304      	adds	r3, #4
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe fd2b 	bl	800b838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cde6:	4b19      	ldr	r3, [pc, #100]	@ (800ce4c <xTaskRemoveFromEventList+0xb4>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d903      	bls.n	800cdf6 <xTaskRemoveFromEventList+0x5e>
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf2:	4a16      	ldr	r2, [pc, #88]	@ (800ce4c <xTaskRemoveFromEventList+0xb4>)
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4a13      	ldr	r2, [pc, #76]	@ (800ce50 <xTaskRemoveFromEventList+0xb8>)
 800ce04:	441a      	add	r2, r3
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	f7fe fcb6 	bl	800b77e <vListInsertEnd>
 800ce12:	e005      	b.n	800ce20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	3318      	adds	r3, #24
 800ce18:	4619      	mov	r1, r3
 800ce1a:	480e      	ldr	r0, [pc, #56]	@ (800ce54 <xTaskRemoveFromEventList+0xbc>)
 800ce1c:	f7fe fcaf 	bl	800b77e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce24:	4b0c      	ldr	r3, [pc, #48]	@ (800ce58 <xTaskRemoveFromEventList+0xc0>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d905      	bls.n	800ce3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce32:	4b0a      	ldr	r3, [pc, #40]	@ (800ce5c <xTaskRemoveFromEventList+0xc4>)
 800ce34:	2201      	movs	r2, #1
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	e001      	b.n	800ce3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce3e:	697b      	ldr	r3, [r7, #20]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	2000185c 	.word	0x2000185c
 800ce4c:	2000183c 	.word	0x2000183c
 800ce50:	20001364 	.word	0x20001364
 800ce54:	200017f4 	.word	0x200017f4
 800ce58:	20001360 	.word	0x20001360
 800ce5c:	20001848 	.word	0x20001848

0800ce60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce68:	4b06      	ldr	r3, [pc, #24]	@ (800ce84 <vTaskInternalSetTimeOutState+0x24>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce70:	4b05      	ldr	r3, [pc, #20]	@ (800ce88 <vTaskInternalSetTimeOutState+0x28>)
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	605a      	str	r2, [r3, #4]
}
 800ce78:	bf00      	nop
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	2000184c 	.word	0x2000184c
 800ce88:	20001838 	.word	0x20001838

0800ce8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b088      	sub	sp, #32
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10b      	bne.n	800ceb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	613b      	str	r3, [r7, #16]
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	e7fd      	b.n	800ceb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10b      	bne.n	800ced2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	60fb      	str	r3, [r7, #12]
}
 800cecc:	bf00      	nop
 800cece:	bf00      	nop
 800ced0:	e7fd      	b.n	800cece <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ced2:	f000 ff79 	bl	800ddc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ced6:	4b1d      	ldr	r3, [pc, #116]	@ (800cf4c <xTaskCheckForTimeOut+0xc0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	69ba      	ldr	r2, [r7, #24]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ceee:	d102      	bne.n	800cef6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cef0:	2300      	movs	r3, #0
 800cef2:	61fb      	str	r3, [r7, #28]
 800cef4:	e023      	b.n	800cf3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	4b15      	ldr	r3, [pc, #84]	@ (800cf50 <xTaskCheckForTimeOut+0xc4>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d007      	beq.n	800cf12 <xTaskCheckForTimeOut+0x86>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	69ba      	ldr	r2, [r7, #24]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d302      	bcc.n	800cf12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	61fb      	str	r3, [r7, #28]
 800cf10:	e015      	b.n	800cf3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d20b      	bcs.n	800cf34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	1ad2      	subs	r2, r2, r3
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7ff ff99 	bl	800ce60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	61fb      	str	r3, [r7, #28]
 800cf32:	e004      	b.n	800cf3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	2200      	movs	r2, #0
 800cf38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf3e:	f000 ff75 	bl	800de2c <vPortExitCritical>

	return xReturn;
 800cf42:	69fb      	ldr	r3, [r7, #28]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3720      	adds	r7, #32
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	20001838 	.word	0x20001838
 800cf50:	2000184c 	.word	0x2000184c

0800cf54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf54:	b480      	push	{r7}
 800cf56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf58:	4b03      	ldr	r3, [pc, #12]	@ (800cf68 <vTaskMissedYield+0x14>)
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	601a      	str	r2, [r3, #0]
}
 800cf5e:	bf00      	nop
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr
 800cf68:	20001848 	.word	0x20001848

0800cf6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf74:	f000 f852 	bl	800d01c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf78:	4b06      	ldr	r3, [pc, #24]	@ (800cf94 <prvIdleTask+0x28>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d9f9      	bls.n	800cf74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf80:	4b05      	ldr	r3, [pc, #20]	@ (800cf98 <prvIdleTask+0x2c>)
 800cf82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf86:	601a      	str	r2, [r3, #0]
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf90:	e7f0      	b.n	800cf74 <prvIdleTask+0x8>
 800cf92:	bf00      	nop
 800cf94:	20001364 	.word	0x20001364
 800cf98:	e000ed04 	.word	0xe000ed04

0800cf9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	607b      	str	r3, [r7, #4]
 800cfa6:	e00c      	b.n	800cfc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	4613      	mov	r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4a12      	ldr	r2, [pc, #72]	@ (800cffc <prvInitialiseTaskLists+0x60>)
 800cfb4:	4413      	add	r3, r2
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fe fbb4 	bl	800b724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	607b      	str	r3, [r7, #4]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b37      	cmp	r3, #55	@ 0x37
 800cfc6:	d9ef      	bls.n	800cfa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cfc8:	480d      	ldr	r0, [pc, #52]	@ (800d000 <prvInitialiseTaskLists+0x64>)
 800cfca:	f7fe fbab 	bl	800b724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cfce:	480d      	ldr	r0, [pc, #52]	@ (800d004 <prvInitialiseTaskLists+0x68>)
 800cfd0:	f7fe fba8 	bl	800b724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cfd4:	480c      	ldr	r0, [pc, #48]	@ (800d008 <prvInitialiseTaskLists+0x6c>)
 800cfd6:	f7fe fba5 	bl	800b724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cfda:	480c      	ldr	r0, [pc, #48]	@ (800d00c <prvInitialiseTaskLists+0x70>)
 800cfdc:	f7fe fba2 	bl	800b724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cfe0:	480b      	ldr	r0, [pc, #44]	@ (800d010 <prvInitialiseTaskLists+0x74>)
 800cfe2:	f7fe fb9f 	bl	800b724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cfe6:	4b0b      	ldr	r3, [pc, #44]	@ (800d014 <prvInitialiseTaskLists+0x78>)
 800cfe8:	4a05      	ldr	r2, [pc, #20]	@ (800d000 <prvInitialiseTaskLists+0x64>)
 800cfea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cfec:	4b0a      	ldr	r3, [pc, #40]	@ (800d018 <prvInitialiseTaskLists+0x7c>)
 800cfee:	4a05      	ldr	r2, [pc, #20]	@ (800d004 <prvInitialiseTaskLists+0x68>)
 800cff0:	601a      	str	r2, [r3, #0]
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	20001364 	.word	0x20001364
 800d000:	200017c4 	.word	0x200017c4
 800d004:	200017d8 	.word	0x200017d8
 800d008:	200017f4 	.word	0x200017f4
 800d00c:	20001808 	.word	0x20001808
 800d010:	20001820 	.word	0x20001820
 800d014:	200017ec 	.word	0x200017ec
 800d018:	200017f0 	.word	0x200017f0

0800d01c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d022:	e019      	b.n	800d058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d024:	f000 fed0 	bl	800ddc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d028:	4b10      	ldr	r3, [pc, #64]	@ (800d06c <prvCheckTasksWaitingTermination+0x50>)
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	3304      	adds	r3, #4
 800d034:	4618      	mov	r0, r3
 800d036:	f7fe fbff 	bl	800b838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d03a:	4b0d      	ldr	r3, [pc, #52]	@ (800d070 <prvCheckTasksWaitingTermination+0x54>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	3b01      	subs	r3, #1
 800d040:	4a0b      	ldr	r2, [pc, #44]	@ (800d070 <prvCheckTasksWaitingTermination+0x54>)
 800d042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d044:	4b0b      	ldr	r3, [pc, #44]	@ (800d074 <prvCheckTasksWaitingTermination+0x58>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	3b01      	subs	r3, #1
 800d04a:	4a0a      	ldr	r2, [pc, #40]	@ (800d074 <prvCheckTasksWaitingTermination+0x58>)
 800d04c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d04e:	f000 feed 	bl	800de2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 f810 	bl	800d078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d058:	4b06      	ldr	r3, [pc, #24]	@ (800d074 <prvCheckTasksWaitingTermination+0x58>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d1e1      	bne.n	800d024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d060:	bf00      	nop
 800d062:	bf00      	nop
 800d064:	3708      	adds	r7, #8
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	20001808 	.word	0x20001808
 800d070:	20001834 	.word	0x20001834
 800d074:	2000181c 	.word	0x2000181c

0800d078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3354      	adds	r3, #84	@ 0x54
 800d084:	4618      	mov	r0, r3
 800d086:	f001 fed5 	bl	800ee34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d090:	2b00      	cmp	r3, #0
 800d092:	d108      	bne.n	800d0a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d098:	4618      	mov	r0, r3
 800d09a:	f001 f885 	bl	800e1a8 <vPortFree>
				vPortFree( pxTCB );
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f001 f882 	bl	800e1a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0a4:	e019      	b.n	800d0da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d103      	bne.n	800d0b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f001 f879 	bl	800e1a8 <vPortFree>
	}
 800d0b6:	e010      	b.n	800d0da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d00b      	beq.n	800d0da <prvDeleteTCB+0x62>
	__asm volatile
 800d0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c6:	f383 8811 	msr	BASEPRI, r3
 800d0ca:	f3bf 8f6f 	isb	sy
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	60fb      	str	r3, [r7, #12]
}
 800d0d4:	bf00      	nop
 800d0d6:	bf00      	nop
 800d0d8:	e7fd      	b.n	800d0d6 <prvDeleteTCB+0x5e>
	}
 800d0da:	bf00      	nop
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
	...

0800d0e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0ea:	4b0c      	ldr	r3, [pc, #48]	@ (800d11c <prvResetNextTaskUnblockTime+0x38>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d104      	bne.n	800d0fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d120 <prvResetNextTaskUnblockTime+0x3c>)
 800d0f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0fc:	e008      	b.n	800d110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0fe:	4b07      	ldr	r3, [pc, #28]	@ (800d11c <prvResetNextTaskUnblockTime+0x38>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	4a04      	ldr	r2, [pc, #16]	@ (800d120 <prvResetNextTaskUnblockTime+0x3c>)
 800d10e:	6013      	str	r3, [r2, #0]
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	200017ec 	.word	0x200017ec
 800d120:	20001854 	.word	0x20001854

0800d124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d12a:	4b0b      	ldr	r3, [pc, #44]	@ (800d158 <xTaskGetSchedulerState+0x34>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d102      	bne.n	800d138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d132:	2301      	movs	r3, #1
 800d134:	607b      	str	r3, [r7, #4]
 800d136:	e008      	b.n	800d14a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d138:	4b08      	ldr	r3, [pc, #32]	@ (800d15c <xTaskGetSchedulerState+0x38>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d102      	bne.n	800d146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d140:	2302      	movs	r3, #2
 800d142:	607b      	str	r3, [r7, #4]
 800d144:	e001      	b.n	800d14a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d146:	2300      	movs	r3, #0
 800d148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d14a:	687b      	ldr	r3, [r7, #4]
	}
 800d14c:	4618      	mov	r0, r3
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	20001840 	.word	0x20001840
 800d15c:	2000185c 	.word	0x2000185c

0800d160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d16c:	2300      	movs	r3, #0
 800d16e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d058      	beq.n	800d228 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d176:	4b2f      	ldr	r3, [pc, #188]	@ (800d234 <xTaskPriorityDisinherit+0xd4>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d00b      	beq.n	800d198 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	60fb      	str	r3, [r7, #12]
}
 800d192:	bf00      	nop
 800d194:	bf00      	nop
 800d196:	e7fd      	b.n	800d194 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10b      	bne.n	800d1b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	60bb      	str	r3, [r7, #8]
}
 800d1b2:	bf00      	nop
 800d1b4:	bf00      	nop
 800d1b6:	e7fd      	b.n	800d1b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1bc:	1e5a      	subs	r2, r3, #1
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d02c      	beq.n	800d228 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d128      	bne.n	800d228 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	3304      	adds	r3, #4
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fb2c 	bl	800b838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d238 <xTaskPriorityDisinherit+0xd8>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d903      	bls.n	800d208 <xTaskPriorityDisinherit+0xa8>
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d204:	4a0c      	ldr	r2, [pc, #48]	@ (800d238 <xTaskPriorityDisinherit+0xd8>)
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d20c:	4613      	mov	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4a09      	ldr	r2, [pc, #36]	@ (800d23c <xTaskPriorityDisinherit+0xdc>)
 800d216:	441a      	add	r2, r3
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	3304      	adds	r3, #4
 800d21c:	4619      	mov	r1, r3
 800d21e:	4610      	mov	r0, r2
 800d220:	f7fe faad 	bl	800b77e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d224:	2301      	movs	r3, #1
 800d226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d228:	697b      	ldr	r3, [r7, #20]
	}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3718      	adds	r7, #24
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	20001360 	.word	0x20001360
 800d238:	2000183c 	.word	0x2000183c
 800d23c:	20001364 	.word	0x20001364

0800d240 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d24a:	f000 fdbd 	bl	800ddc8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d24e:	4b20      	ldr	r3, [pc, #128]	@ (800d2d0 <ulTaskNotifyTake+0x90>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d113      	bne.n	800d282 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d25a:	4b1d      	ldr	r3, [pc, #116]	@ (800d2d0 <ulTaskNotifyTake+0x90>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2201      	movs	r2, #1
 800d260:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00b      	beq.n	800d282 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d26a:	2101      	movs	r1, #1
 800d26c:	6838      	ldr	r0, [r7, #0]
 800d26e:	f000 f8c9 	bl	800d404 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d272:	4b18      	ldr	r3, [pc, #96]	@ (800d2d4 <ulTaskNotifyTake+0x94>)
 800d274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d278:	601a      	str	r2, [r3, #0]
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d282:	f000 fdd3 	bl	800de2c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d286:	f000 fd9f 	bl	800ddc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d28a:	4b11      	ldr	r3, [pc, #68]	@ (800d2d0 <ulTaskNotifyTake+0x90>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d292:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00e      	beq.n	800d2b8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d005      	beq.n	800d2ac <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d2d0 <ulTaskNotifyTake+0x90>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800d2aa:	e005      	b.n	800d2b8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d2ac:	4b08      	ldr	r3, [pc, #32]	@ (800d2d0 <ulTaskNotifyTake+0x90>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	3a01      	subs	r2, #1
 800d2b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d2b8:	4b05      	ldr	r3, [pc, #20]	@ (800d2d0 <ulTaskNotifyTake+0x90>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800d2c2:	f000 fdb3 	bl	800de2c <vPortExitCritical>

		return ulReturn;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
	}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	20001360 	.word	0x20001360
 800d2d4:	e000ed04 	.word	0xe000ed04

0800d2d8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b08a      	sub	sp, #40	@ 0x28
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10b      	bne.n	800d300 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	61bb      	str	r3, [r7, #24]
}
 800d2fa:	bf00      	nop
 800d2fc:	bf00      	nop
 800d2fe:	e7fd      	b.n	800d2fc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d300:	f000 fe42 	bl	800df88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800d308:	f3ef 8211 	mrs	r2, BASEPRI
 800d30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	617a      	str	r2, [r7, #20]
 800d31e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d320:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d322:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d326:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d32a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32e:	2202      	movs	r2, #2
 800d330:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d336:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d342:	7ffb      	ldrb	r3, [r7, #31]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d147      	bne.n	800d3d8 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00b      	beq.n	800d368 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	60fb      	str	r3, [r7, #12]
}
 800d362:	bf00      	nop
 800d364:	bf00      	nop
 800d366:	e7fd      	b.n	800d364 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d368:	4b20      	ldr	r3, [pc, #128]	@ (800d3ec <vTaskNotifyGiveFromISR+0x114>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d11d      	bne.n	800d3ac <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d372:	3304      	adds	r3, #4
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fa5f 	bl	800b838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d37e:	4b1c      	ldr	r3, [pc, #112]	@ (800d3f0 <vTaskNotifyGiveFromISR+0x118>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	429a      	cmp	r2, r3
 800d384:	d903      	bls.n	800d38e <vTaskNotifyGiveFromISR+0xb6>
 800d386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d38a:	4a19      	ldr	r2, [pc, #100]	@ (800d3f0 <vTaskNotifyGiveFromISR+0x118>)
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d392:	4613      	mov	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4a16      	ldr	r2, [pc, #88]	@ (800d3f4 <vTaskNotifyGiveFromISR+0x11c>)
 800d39c:	441a      	add	r2, r3
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	f7fe f9ea 	bl	800b77e <vListInsertEnd>
 800d3aa:	e005      	b.n	800d3b8 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ae:	3318      	adds	r3, #24
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	4811      	ldr	r0, [pc, #68]	@ (800d3f8 <vTaskNotifyGiveFromISR+0x120>)
 800d3b4:	f7fe f9e3 	bl	800b77e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3bc:	4b0f      	ldr	r3, [pc, #60]	@ (800d3fc <vTaskNotifyGiveFromISR+0x124>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d908      	bls.n	800d3d8 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d400 <vTaskNotifyGiveFromISR+0x128>)
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
 800d3da:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	f383 8811 	msr	BASEPRI, r3
}
 800d3e2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d3e4:	bf00      	nop
 800d3e6:	3728      	adds	r7, #40	@ 0x28
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	2000185c 	.word	0x2000185c
 800d3f0:	2000183c 	.word	0x2000183c
 800d3f4:	20001364 	.word	0x20001364
 800d3f8:	200017f4 	.word	0x200017f4
 800d3fc:	20001360 	.word	0x20001360
 800d400:	20001848 	.word	0x20001848

0800d404 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d40e:	4b21      	ldr	r3, [pc, #132]	@ (800d494 <prvAddCurrentTaskToDelayedList+0x90>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d414:	4b20      	ldr	r3, [pc, #128]	@ (800d498 <prvAddCurrentTaskToDelayedList+0x94>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3304      	adds	r3, #4
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fe fa0c 	bl	800b838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d426:	d10a      	bne.n	800d43e <prvAddCurrentTaskToDelayedList+0x3a>
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d007      	beq.n	800d43e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d42e:	4b1a      	ldr	r3, [pc, #104]	@ (800d498 <prvAddCurrentTaskToDelayedList+0x94>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3304      	adds	r3, #4
 800d434:	4619      	mov	r1, r3
 800d436:	4819      	ldr	r0, [pc, #100]	@ (800d49c <prvAddCurrentTaskToDelayedList+0x98>)
 800d438:	f7fe f9a1 	bl	800b77e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d43c:	e026      	b.n	800d48c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4413      	add	r3, r2
 800d444:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d446:	4b14      	ldr	r3, [pc, #80]	@ (800d498 <prvAddCurrentTaskToDelayedList+0x94>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	429a      	cmp	r2, r3
 800d454:	d209      	bcs.n	800d46a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d456:	4b12      	ldr	r3, [pc, #72]	@ (800d4a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	4b0f      	ldr	r3, [pc, #60]	@ (800d498 <prvAddCurrentTaskToDelayedList+0x94>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3304      	adds	r3, #4
 800d460:	4619      	mov	r1, r3
 800d462:	4610      	mov	r0, r2
 800d464:	f7fe f9af 	bl	800b7c6 <vListInsert>
}
 800d468:	e010      	b.n	800d48c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d46a:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	4b0a      	ldr	r3, [pc, #40]	@ (800d498 <prvAddCurrentTaskToDelayedList+0x94>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3304      	adds	r3, #4
 800d474:	4619      	mov	r1, r3
 800d476:	4610      	mov	r0, r2
 800d478:	f7fe f9a5 	bl	800b7c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d47c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	429a      	cmp	r2, r3
 800d484:	d202      	bcs.n	800d48c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d486:	4a08      	ldr	r2, [pc, #32]	@ (800d4a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	6013      	str	r3, [r2, #0]
}
 800d48c:	bf00      	nop
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	20001838 	.word	0x20001838
 800d498:	20001360 	.word	0x20001360
 800d49c:	20001820 	.word	0x20001820
 800d4a0:	200017f0 	.word	0x200017f0
 800d4a4:	200017ec 	.word	0x200017ec
 800d4a8:	20001854 	.word	0x20001854

0800d4ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	@ 0x28
 800d4b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d4b6:	f000 fb13 	bl	800dae0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d4ba:	4b1d      	ldr	r3, [pc, #116]	@ (800d530 <xTimerCreateTimerTask+0x84>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d021      	beq.n	800d506 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d4ca:	1d3a      	adds	r2, r7, #4
 800d4cc:	f107 0108 	add.w	r1, r7, #8
 800d4d0:	f107 030c 	add.w	r3, r7, #12
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fe f90b 	bl	800b6f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d4da:	6879      	ldr	r1, [r7, #4]
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	68fa      	ldr	r2, [r7, #12]
 800d4e0:	9202      	str	r2, [sp, #8]
 800d4e2:	9301      	str	r3, [sp, #4]
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	9300      	str	r3, [sp, #0]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	460a      	mov	r2, r1
 800d4ec:	4911      	ldr	r1, [pc, #68]	@ (800d534 <xTimerCreateTimerTask+0x88>)
 800d4ee:	4812      	ldr	r0, [pc, #72]	@ (800d538 <xTimerCreateTimerTask+0x8c>)
 800d4f0:	f7fe fec6 	bl	800c280 <xTaskCreateStatic>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	4a11      	ldr	r2, [pc, #68]	@ (800d53c <xTimerCreateTimerTask+0x90>)
 800d4f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d4fa:	4b10      	ldr	r3, [pc, #64]	@ (800d53c <xTimerCreateTimerTask+0x90>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d502:	2301      	movs	r3, #1
 800d504:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d10b      	bne.n	800d524 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d510:	f383 8811 	msr	BASEPRI, r3
 800d514:	f3bf 8f6f 	isb	sy
 800d518:	f3bf 8f4f 	dsb	sy
 800d51c:	613b      	str	r3, [r7, #16]
}
 800d51e:	bf00      	nop
 800d520:	bf00      	nop
 800d522:	e7fd      	b.n	800d520 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d524:	697b      	ldr	r3, [r7, #20]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3718      	adds	r7, #24
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	20001890 	.word	0x20001890
 800d534:	08011f24 	.word	0x08011f24
 800d538:	0800d679 	.word	0x0800d679
 800d53c:	20001894 	.word	0x20001894

0800d540 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08a      	sub	sp, #40	@ 0x28
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d54e:	2300      	movs	r3, #0
 800d550:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10b      	bne.n	800d570 <xTimerGenericCommand+0x30>
	__asm volatile
 800d558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	623b      	str	r3, [r7, #32]
}
 800d56a:	bf00      	nop
 800d56c:	bf00      	nop
 800d56e:	e7fd      	b.n	800d56c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d570:	4b19      	ldr	r3, [pc, #100]	@ (800d5d8 <xTimerGenericCommand+0x98>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d02a      	beq.n	800d5ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	2b05      	cmp	r3, #5
 800d588:	dc18      	bgt.n	800d5bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d58a:	f7ff fdcb 	bl	800d124 <xTaskGetSchedulerState>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b02      	cmp	r3, #2
 800d592:	d109      	bne.n	800d5a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d594:	4b10      	ldr	r3, [pc, #64]	@ (800d5d8 <xTimerGenericCommand+0x98>)
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	f107 0110 	add.w	r1, r7, #16
 800d59c:	2300      	movs	r3, #0
 800d59e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5a0:	f7fe fa7e 	bl	800baa0 <xQueueGenericSend>
 800d5a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d5a6:	e012      	b.n	800d5ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d8 <xTimerGenericCommand+0x98>)
 800d5aa:	6818      	ldr	r0, [r3, #0]
 800d5ac:	f107 0110 	add.w	r1, r7, #16
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f7fe fa74 	bl	800baa0 <xQueueGenericSend>
 800d5b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d5ba:	e008      	b.n	800d5ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d5bc:	4b06      	ldr	r3, [pc, #24]	@ (800d5d8 <xTimerGenericCommand+0x98>)
 800d5be:	6818      	ldr	r0, [r3, #0]
 800d5c0:	f107 0110 	add.w	r1, r7, #16
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	f7fe fb6c 	bl	800bca4 <xQueueGenericSendFromISR>
 800d5cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3728      	adds	r7, #40	@ 0x28
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	20001890 	.word	0x20001890

0800d5dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af02      	add	r7, sp, #8
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e6:	4b23      	ldr	r3, [pc, #140]	@ (800d674 <prvProcessExpiredTimer+0x98>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fe f91f 	bl	800b838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d600:	f003 0304 	and.w	r3, r3, #4
 800d604:	2b00      	cmp	r3, #0
 800d606:	d023      	beq.n	800d650 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	699a      	ldr	r2, [r3, #24]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	18d1      	adds	r1, r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	683a      	ldr	r2, [r7, #0]
 800d614:	6978      	ldr	r0, [r7, #20]
 800d616:	f000 f8d5 	bl	800d7c4 <prvInsertTimerInActiveList>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d020      	beq.n	800d662 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d620:	2300      	movs	r3, #0
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	2300      	movs	r3, #0
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	2100      	movs	r1, #0
 800d62a:	6978      	ldr	r0, [r7, #20]
 800d62c:	f7ff ff88 	bl	800d540 <xTimerGenericCommand>
 800d630:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d114      	bne.n	800d662 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	60fb      	str	r3, [r7, #12]
}
 800d64a:	bf00      	nop
 800d64c:	bf00      	nop
 800d64e:	e7fd      	b.n	800d64c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d656:	f023 0301 	bic.w	r3, r3, #1
 800d65a:	b2da      	uxtb	r2, r3
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	6a1b      	ldr	r3, [r3, #32]
 800d666:	6978      	ldr	r0, [r7, #20]
 800d668:	4798      	blx	r3
}
 800d66a:	bf00      	nop
 800d66c:	3718      	adds	r7, #24
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20001888 	.word	0x20001888

0800d678 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d680:	f107 0308 	add.w	r3, r7, #8
 800d684:	4618      	mov	r0, r3
 800d686:	f000 f859 	bl	800d73c <prvGetNextExpireTime>
 800d68a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	4619      	mov	r1, r3
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f000 f805 	bl	800d6a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d696:	f000 f8d7 	bl	800d848 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d69a:	bf00      	nop
 800d69c:	e7f0      	b.n	800d680 <prvTimerTask+0x8>
	...

0800d6a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d6aa:	f7ff f84d 	bl	800c748 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6ae:	f107 0308 	add.w	r3, r7, #8
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f000 f866 	bl	800d784 <prvSampleTimeNow>
 800d6b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d130      	bne.n	800d722 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10a      	bne.n	800d6dc <prvProcessTimerOrBlockTask+0x3c>
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d806      	bhi.n	800d6dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d6ce:	f7ff f849 	bl	800c764 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d6d2:	68f9      	ldr	r1, [r7, #12]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff ff81 	bl	800d5dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d6da:	e024      	b.n	800d726 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d008      	beq.n	800d6f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d6e2:	4b13      	ldr	r3, [pc, #76]	@ (800d730 <prvProcessTimerOrBlockTask+0x90>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d101      	bne.n	800d6f0 <prvProcessTimerOrBlockTask+0x50>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e000      	b.n	800d6f2 <prvProcessTimerOrBlockTask+0x52>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d6f4:	4b0f      	ldr	r3, [pc, #60]	@ (800d734 <prvProcessTimerOrBlockTask+0x94>)
 800d6f6:	6818      	ldr	r0, [r3, #0]
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	4619      	mov	r1, r3
 800d702:	f7fe fd89 	bl	800c218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d706:	f7ff f82d 	bl	800c764 <xTaskResumeAll>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10a      	bne.n	800d726 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d710:	4b09      	ldr	r3, [pc, #36]	@ (800d738 <prvProcessTimerOrBlockTask+0x98>)
 800d712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	f3bf 8f6f 	isb	sy
}
 800d720:	e001      	b.n	800d726 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d722:	f7ff f81f 	bl	800c764 <xTaskResumeAll>
}
 800d726:	bf00      	nop
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	2000188c 	.word	0x2000188c
 800d734:	20001890 	.word	0x20001890
 800d738:	e000ed04 	.word	0xe000ed04

0800d73c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d744:	4b0e      	ldr	r3, [pc, #56]	@ (800d780 <prvGetNextExpireTime+0x44>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d101      	bne.n	800d752 <prvGetNextExpireTime+0x16>
 800d74e:	2201      	movs	r2, #1
 800d750:	e000      	b.n	800d754 <prvGetNextExpireTime+0x18>
 800d752:	2200      	movs	r2, #0
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d105      	bne.n	800d76c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d760:	4b07      	ldr	r3, [pc, #28]	@ (800d780 <prvGetNextExpireTime+0x44>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	60fb      	str	r3, [r7, #12]
 800d76a:	e001      	b.n	800d770 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d76c:	2300      	movs	r3, #0
 800d76e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d770:	68fb      	ldr	r3, [r7, #12]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3714      	adds	r7, #20
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr
 800d77e:	bf00      	nop
 800d780:	20001888 	.word	0x20001888

0800d784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d78c:	f7ff f888 	bl	800c8a0 <xTaskGetTickCount>
 800d790:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d792:	4b0b      	ldr	r3, [pc, #44]	@ (800d7c0 <prvSampleTimeNow+0x3c>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d205      	bcs.n	800d7a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d79c:	f000 f93a 	bl	800da14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	601a      	str	r2, [r3, #0]
 800d7a6:	e002      	b.n	800d7ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d7ae:	4a04      	ldr	r2, [pc, #16]	@ (800d7c0 <prvSampleTimeNow+0x3c>)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	20001898 	.word	0x20001898

0800d7c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
 800d7d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	68fa      	ldr	r2, [r7, #12]
 800d7e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d812      	bhi.n	800d810 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d302      	bcc.n	800d7fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	617b      	str	r3, [r7, #20]
 800d7fc:	e01b      	b.n	800d836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d7fe:	4b10      	ldr	r3, [pc, #64]	@ (800d840 <prvInsertTimerInActiveList+0x7c>)
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	3304      	adds	r3, #4
 800d806:	4619      	mov	r1, r3
 800d808:	4610      	mov	r0, r2
 800d80a:	f7fd ffdc 	bl	800b7c6 <vListInsert>
 800d80e:	e012      	b.n	800d836 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	429a      	cmp	r2, r3
 800d816:	d206      	bcs.n	800d826 <prvInsertTimerInActiveList+0x62>
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d302      	bcc.n	800d826 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d820:	2301      	movs	r3, #1
 800d822:	617b      	str	r3, [r7, #20]
 800d824:	e007      	b.n	800d836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d826:	4b07      	ldr	r3, [pc, #28]	@ (800d844 <prvInsertTimerInActiveList+0x80>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3304      	adds	r3, #4
 800d82e:	4619      	mov	r1, r3
 800d830:	4610      	mov	r0, r2
 800d832:	f7fd ffc8 	bl	800b7c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d836:	697b      	ldr	r3, [r7, #20]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	2000188c 	.word	0x2000188c
 800d844:	20001888 	.word	0x20001888

0800d848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08e      	sub	sp, #56	@ 0x38
 800d84c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d84e:	e0ce      	b.n	800d9ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	da19      	bge.n	800d88a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d856:	1d3b      	adds	r3, r7, #4
 800d858:	3304      	adds	r3, #4
 800d85a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d10b      	bne.n	800d87a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	61fb      	str	r3, [r7, #28]
}
 800d874:	bf00      	nop
 800d876:	bf00      	nop
 800d878:	e7fd      	b.n	800d876 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d880:	6850      	ldr	r0, [r2, #4]
 800d882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d884:	6892      	ldr	r2, [r2, #8]
 800d886:	4611      	mov	r1, r2
 800d888:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f2c0 80ae 	blt.w	800d9ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fd ffc8 	bl	800b838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8a8:	463b      	mov	r3, r7
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7ff ff6a 	bl	800d784 <prvSampleTimeNow>
 800d8b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b09      	cmp	r3, #9
 800d8b6:	f200 8097 	bhi.w	800d9e8 <prvProcessReceivedCommands+0x1a0>
 800d8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d8c0 <prvProcessReceivedCommands+0x78>)
 800d8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8c0:	0800d8e9 	.word	0x0800d8e9
 800d8c4:	0800d8e9 	.word	0x0800d8e9
 800d8c8:	0800d8e9 	.word	0x0800d8e9
 800d8cc:	0800d95f 	.word	0x0800d95f
 800d8d0:	0800d973 	.word	0x0800d973
 800d8d4:	0800d9bf 	.word	0x0800d9bf
 800d8d8:	0800d8e9 	.word	0x0800d8e9
 800d8dc:	0800d8e9 	.word	0x0800d8e9
 800d8e0:	0800d95f 	.word	0x0800d95f
 800d8e4:	0800d973 	.word	0x0800d973
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8ee:	f043 0301 	orr.w	r3, r3, #1
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	18d1      	adds	r1, r2, r3
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d908:	f7ff ff5c 	bl	800d7c4 <prvInsertTimerInActiveList>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d06c      	beq.n	800d9ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d918:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d920:	f003 0304 	and.w	r3, r3, #4
 800d924:	2b00      	cmp	r3, #0
 800d926:	d061      	beq.n	800d9ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	441a      	add	r2, r3
 800d930:	2300      	movs	r3, #0
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	2300      	movs	r3, #0
 800d936:	2100      	movs	r1, #0
 800d938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d93a:	f7ff fe01 	bl	800d540 <xTimerGenericCommand>
 800d93e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d940:	6a3b      	ldr	r3, [r7, #32]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d152      	bne.n	800d9ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	61bb      	str	r3, [r7, #24]
}
 800d958:	bf00      	nop
 800d95a:	bf00      	nop
 800d95c:	e7fd      	b.n	800d95a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d964:	f023 0301 	bic.w	r3, r3, #1
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d970:	e03d      	b.n	800d9ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d974:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d978:	f043 0301 	orr.w	r3, r3, #1
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d980:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d988:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d10b      	bne.n	800d9aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	617b      	str	r3, [r7, #20]
}
 800d9a4:	bf00      	nop
 800d9a6:	bf00      	nop
 800d9a8:	e7fd      	b.n	800d9a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ac:	699a      	ldr	r2, [r3, #24]
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b0:	18d1      	adds	r1, r2, r3
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9b8:	f7ff ff04 	bl	800d7c4 <prvInsertTimerInActiveList>
					break;
 800d9bc:	e017      	b.n	800d9ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9c4:	f003 0302 	and.w	r3, r3, #2
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d103      	bne.n	800d9d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d9cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9ce:	f000 fbeb 	bl	800e1a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d9d2:	e00c      	b.n	800d9ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9da:	f023 0301 	bic.w	r3, r3, #1
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d9e6:	e002      	b.n	800d9ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d9e8:	bf00      	nop
 800d9ea:	e000      	b.n	800d9ee <prvProcessReceivedCommands+0x1a6>
					break;
 800d9ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9ee:	4b08      	ldr	r3, [pc, #32]	@ (800da10 <prvProcessReceivedCommands+0x1c8>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	1d39      	adds	r1, r7, #4
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fe f9f2 	bl	800bde0 <xQueueReceive>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f47f af26 	bne.w	800d850 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop
 800da08:	3730      	adds	r7, #48	@ 0x30
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	20001890 	.word	0x20001890

0800da14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da1a:	e049      	b.n	800dab0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da1c:	4b2e      	ldr	r3, [pc, #184]	@ (800dad8 <prvSwitchTimerLists+0xc4>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	68db      	ldr	r3, [r3, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da26:	4b2c      	ldr	r3, [pc, #176]	@ (800dad8 <prvSwitchTimerLists+0xc4>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	3304      	adds	r3, #4
 800da34:	4618      	mov	r0, r3
 800da36:	f7fd feff 	bl	800b838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	6a1b      	ldr	r3, [r3, #32]
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da48:	f003 0304 	and.w	r3, r3, #4
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d02f      	beq.n	800dab0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	4413      	add	r3, r2
 800da58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da5a:	68ba      	ldr	r2, [r7, #8]
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d90e      	bls.n	800da80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da6e:	4b1a      	ldr	r3, [pc, #104]	@ (800dad8 <prvSwitchTimerLists+0xc4>)
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	3304      	adds	r3, #4
 800da76:	4619      	mov	r1, r3
 800da78:	4610      	mov	r0, r2
 800da7a:	f7fd fea4 	bl	800b7c6 <vListInsert>
 800da7e:	e017      	b.n	800dab0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da80:	2300      	movs	r3, #0
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	2300      	movs	r3, #0
 800da86:	693a      	ldr	r2, [r7, #16]
 800da88:	2100      	movs	r1, #0
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f7ff fd58 	bl	800d540 <xTimerGenericCommand>
 800da90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10b      	bne.n	800dab0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800da98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da9c:	f383 8811 	msr	BASEPRI, r3
 800daa0:	f3bf 8f6f 	isb	sy
 800daa4:	f3bf 8f4f 	dsb	sy
 800daa8:	603b      	str	r3, [r7, #0]
}
 800daaa:	bf00      	nop
 800daac:	bf00      	nop
 800daae:	e7fd      	b.n	800daac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dab0:	4b09      	ldr	r3, [pc, #36]	@ (800dad8 <prvSwitchTimerLists+0xc4>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1b0      	bne.n	800da1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800daba:	4b07      	ldr	r3, [pc, #28]	@ (800dad8 <prvSwitchTimerLists+0xc4>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dac0:	4b06      	ldr	r3, [pc, #24]	@ (800dadc <prvSwitchTimerLists+0xc8>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a04      	ldr	r2, [pc, #16]	@ (800dad8 <prvSwitchTimerLists+0xc4>)
 800dac6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dac8:	4a04      	ldr	r2, [pc, #16]	@ (800dadc <prvSwitchTimerLists+0xc8>)
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	6013      	str	r3, [r2, #0]
}
 800dace:	bf00      	nop
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	20001888 	.word	0x20001888
 800dadc:	2000188c 	.word	0x2000188c

0800dae0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dae6:	f000 f96f 	bl	800ddc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800daea:	4b15      	ldr	r3, [pc, #84]	@ (800db40 <prvCheckForValidListAndQueue+0x60>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d120      	bne.n	800db34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800daf2:	4814      	ldr	r0, [pc, #80]	@ (800db44 <prvCheckForValidListAndQueue+0x64>)
 800daf4:	f7fd fe16 	bl	800b724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800daf8:	4813      	ldr	r0, [pc, #76]	@ (800db48 <prvCheckForValidListAndQueue+0x68>)
 800dafa:	f7fd fe13 	bl	800b724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dafe:	4b13      	ldr	r3, [pc, #76]	@ (800db4c <prvCheckForValidListAndQueue+0x6c>)
 800db00:	4a10      	ldr	r2, [pc, #64]	@ (800db44 <prvCheckForValidListAndQueue+0x64>)
 800db02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db04:	4b12      	ldr	r3, [pc, #72]	@ (800db50 <prvCheckForValidListAndQueue+0x70>)
 800db06:	4a10      	ldr	r2, [pc, #64]	@ (800db48 <prvCheckForValidListAndQueue+0x68>)
 800db08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800db0a:	2300      	movs	r3, #0
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	4b11      	ldr	r3, [pc, #68]	@ (800db54 <prvCheckForValidListAndQueue+0x74>)
 800db10:	4a11      	ldr	r2, [pc, #68]	@ (800db58 <prvCheckForValidListAndQueue+0x78>)
 800db12:	2110      	movs	r1, #16
 800db14:	200a      	movs	r0, #10
 800db16:	f7fd ff23 	bl	800b960 <xQueueGenericCreateStatic>
 800db1a:	4603      	mov	r3, r0
 800db1c:	4a08      	ldr	r2, [pc, #32]	@ (800db40 <prvCheckForValidListAndQueue+0x60>)
 800db1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800db20:	4b07      	ldr	r3, [pc, #28]	@ (800db40 <prvCheckForValidListAndQueue+0x60>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d005      	beq.n	800db34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800db28:	4b05      	ldr	r3, [pc, #20]	@ (800db40 <prvCheckForValidListAndQueue+0x60>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	490b      	ldr	r1, [pc, #44]	@ (800db5c <prvCheckForValidListAndQueue+0x7c>)
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe fb48 	bl	800c1c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db34:	f000 f97a 	bl	800de2c <vPortExitCritical>
}
 800db38:	bf00      	nop
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	20001890 	.word	0x20001890
 800db44:	20001860 	.word	0x20001860
 800db48:	20001874 	.word	0x20001874
 800db4c:	20001888 	.word	0x20001888
 800db50:	2000188c 	.word	0x2000188c
 800db54:	2000193c 	.word	0x2000193c
 800db58:	2000189c 	.word	0x2000189c
 800db5c:	08011f2c 	.word	0x08011f2c

0800db60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db60:	b480      	push	{r7}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	3b04      	subs	r3, #4
 800db70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800db78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	3b04      	subs	r3, #4
 800db7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	f023 0201 	bic.w	r2, r3, #1
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	3b04      	subs	r3, #4
 800db8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db90:	4a0c      	ldr	r2, [pc, #48]	@ (800dbc4 <pxPortInitialiseStack+0x64>)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3b14      	subs	r3, #20
 800db9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3b04      	subs	r3, #4
 800dba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f06f 0202 	mvn.w	r2, #2
 800dbae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3b20      	subs	r3, #32
 800dbb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	0800dbc9 	.word	0x0800dbc9

0800dbc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dbd2:	4b13      	ldr	r3, [pc, #76]	@ (800dc20 <prvTaskExitError+0x58>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbda:	d00b      	beq.n	800dbf4 <prvTaskExitError+0x2c>
	__asm volatile
 800dbdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe0:	f383 8811 	msr	BASEPRI, r3
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	60fb      	str	r3, [r7, #12]
}
 800dbee:	bf00      	nop
 800dbf0:	bf00      	nop
 800dbf2:	e7fd      	b.n	800dbf0 <prvTaskExitError+0x28>
	__asm volatile
 800dbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf8:	f383 8811 	msr	BASEPRI, r3
 800dbfc:	f3bf 8f6f 	isb	sy
 800dc00:	f3bf 8f4f 	dsb	sy
 800dc04:	60bb      	str	r3, [r7, #8]
}
 800dc06:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc08:	bf00      	nop
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d0fc      	beq.n	800dc0a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc10:	bf00      	nop
 800dc12:	bf00      	nop
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	2000006c 	.word	0x2000006c
	...

0800dc30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc30:	4b07      	ldr	r3, [pc, #28]	@ (800dc50 <pxCurrentTCBConst2>)
 800dc32:	6819      	ldr	r1, [r3, #0]
 800dc34:	6808      	ldr	r0, [r1, #0]
 800dc36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3a:	f380 8809 	msr	PSP, r0
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f04f 0000 	mov.w	r0, #0
 800dc46:	f380 8811 	msr	BASEPRI, r0
 800dc4a:	4770      	bx	lr
 800dc4c:	f3af 8000 	nop.w

0800dc50 <pxCurrentTCBConst2>:
 800dc50:	20001360 	.word	0x20001360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc54:	bf00      	nop
 800dc56:	bf00      	nop

0800dc58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc58:	4808      	ldr	r0, [pc, #32]	@ (800dc7c <prvPortStartFirstTask+0x24>)
 800dc5a:	6800      	ldr	r0, [r0, #0]
 800dc5c:	6800      	ldr	r0, [r0, #0]
 800dc5e:	f380 8808 	msr	MSP, r0
 800dc62:	f04f 0000 	mov.w	r0, #0
 800dc66:	f380 8814 	msr	CONTROL, r0
 800dc6a:	b662      	cpsie	i
 800dc6c:	b661      	cpsie	f
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	f3bf 8f6f 	isb	sy
 800dc76:	df00      	svc	0
 800dc78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc7a:	bf00      	nop
 800dc7c:	e000ed08 	.word	0xe000ed08

0800dc80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dc86:	4b47      	ldr	r3, [pc, #284]	@ (800dda4 <xPortStartScheduler+0x124>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a47      	ldr	r2, [pc, #284]	@ (800dda8 <xPortStartScheduler+0x128>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d10b      	bne.n	800dca8 <xPortStartScheduler+0x28>
	__asm volatile
 800dc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc94:	f383 8811 	msr	BASEPRI, r3
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	613b      	str	r3, [r7, #16]
}
 800dca2:	bf00      	nop
 800dca4:	bf00      	nop
 800dca6:	e7fd      	b.n	800dca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dca8:	4b3e      	ldr	r3, [pc, #248]	@ (800dda4 <xPortStartScheduler+0x124>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a3f      	ldr	r2, [pc, #252]	@ (800ddac <xPortStartScheduler+0x12c>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d10b      	bne.n	800dcca <xPortStartScheduler+0x4a>
	__asm volatile
 800dcb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	60fb      	str	r3, [r7, #12]
}
 800dcc4:	bf00      	nop
 800dcc6:	bf00      	nop
 800dcc8:	e7fd      	b.n	800dcc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dcca:	4b39      	ldr	r3, [pc, #228]	@ (800ddb0 <xPortStartScheduler+0x130>)
 800dccc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	22ff      	movs	r2, #255	@ 0xff
 800dcda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dce4:	78fb      	ldrb	r3, [r7, #3]
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dcec:	b2da      	uxtb	r2, r3
 800dcee:	4b31      	ldr	r3, [pc, #196]	@ (800ddb4 <xPortStartScheduler+0x134>)
 800dcf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dcf2:	4b31      	ldr	r3, [pc, #196]	@ (800ddb8 <xPortStartScheduler+0x138>)
 800dcf4:	2207      	movs	r2, #7
 800dcf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcf8:	e009      	b.n	800dd0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dcfa:	4b2f      	ldr	r3, [pc, #188]	@ (800ddb8 <xPortStartScheduler+0x138>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	4a2d      	ldr	r2, [pc, #180]	@ (800ddb8 <xPortStartScheduler+0x138>)
 800dd02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd04:	78fb      	ldrb	r3, [r7, #3]
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	005b      	lsls	r3, r3, #1
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd0e:	78fb      	ldrb	r3, [r7, #3]
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd16:	2b80      	cmp	r3, #128	@ 0x80
 800dd18:	d0ef      	beq.n	800dcfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd1a:	4b27      	ldr	r3, [pc, #156]	@ (800ddb8 <xPortStartScheduler+0x138>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f1c3 0307 	rsb	r3, r3, #7
 800dd22:	2b04      	cmp	r3, #4
 800dd24:	d00b      	beq.n	800dd3e <xPortStartScheduler+0xbe>
	__asm volatile
 800dd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	60bb      	str	r3, [r7, #8]
}
 800dd38:	bf00      	nop
 800dd3a:	bf00      	nop
 800dd3c:	e7fd      	b.n	800dd3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd3e:	4b1e      	ldr	r3, [pc, #120]	@ (800ddb8 <xPortStartScheduler+0x138>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	021b      	lsls	r3, r3, #8
 800dd44:	4a1c      	ldr	r2, [pc, #112]	@ (800ddb8 <xPortStartScheduler+0x138>)
 800dd46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd48:	4b1b      	ldr	r3, [pc, #108]	@ (800ddb8 <xPortStartScheduler+0x138>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dd50:	4a19      	ldr	r2, [pc, #100]	@ (800ddb8 <xPortStartScheduler+0x138>)
 800dd52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd5c:	4b17      	ldr	r3, [pc, #92]	@ (800ddbc <xPortStartScheduler+0x13c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a16      	ldr	r2, [pc, #88]	@ (800ddbc <xPortStartScheduler+0x13c>)
 800dd62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dd66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd68:	4b14      	ldr	r3, [pc, #80]	@ (800ddbc <xPortStartScheduler+0x13c>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a13      	ldr	r2, [pc, #76]	@ (800ddbc <xPortStartScheduler+0x13c>)
 800dd6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dd72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd74:	f000 f8da 	bl	800df2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd78:	4b11      	ldr	r3, [pc, #68]	@ (800ddc0 <xPortStartScheduler+0x140>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd7e:	f000 f8f9 	bl	800df74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd82:	4b10      	ldr	r3, [pc, #64]	@ (800ddc4 <xPortStartScheduler+0x144>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a0f      	ldr	r2, [pc, #60]	@ (800ddc4 <xPortStartScheduler+0x144>)
 800dd88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dd8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd8e:	f7ff ff63 	bl	800dc58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd92:	f7fe ff49 	bl	800cc28 <vTaskSwitchContext>
	prvTaskExitError();
 800dd96:	f7ff ff17 	bl	800dbc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	e000ed00 	.word	0xe000ed00
 800dda8:	410fc271 	.word	0x410fc271
 800ddac:	410fc270 	.word	0x410fc270
 800ddb0:	e000e400 	.word	0xe000e400
 800ddb4:	2000198c 	.word	0x2000198c
 800ddb8:	20001990 	.word	0x20001990
 800ddbc:	e000ed20 	.word	0xe000ed20
 800ddc0:	2000006c 	.word	0x2000006c
 800ddc4:	e000ef34 	.word	0xe000ef34

0800ddc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	607b      	str	r3, [r7, #4]
}
 800dde0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dde2:	4b10      	ldr	r3, [pc, #64]	@ (800de24 <vPortEnterCritical+0x5c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3301      	adds	r3, #1
 800dde8:	4a0e      	ldr	r2, [pc, #56]	@ (800de24 <vPortEnterCritical+0x5c>)
 800ddea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ddec:	4b0d      	ldr	r3, [pc, #52]	@ (800de24 <vPortEnterCritical+0x5c>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d110      	bne.n	800de16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ddf4:	4b0c      	ldr	r3, [pc, #48]	@ (800de28 <vPortEnterCritical+0x60>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00b      	beq.n	800de16 <vPortEnterCritical+0x4e>
	__asm volatile
 800ddfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de02:	f383 8811 	msr	BASEPRI, r3
 800de06:	f3bf 8f6f 	isb	sy
 800de0a:	f3bf 8f4f 	dsb	sy
 800de0e:	603b      	str	r3, [r7, #0]
}
 800de10:	bf00      	nop
 800de12:	bf00      	nop
 800de14:	e7fd      	b.n	800de12 <vPortEnterCritical+0x4a>
	}
}
 800de16:	bf00      	nop
 800de18:	370c      	adds	r7, #12
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	2000006c 	.word	0x2000006c
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de32:	4b12      	ldr	r3, [pc, #72]	@ (800de7c <vPortExitCritical+0x50>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d10b      	bne.n	800de52 <vPortExitCritical+0x26>
	__asm volatile
 800de3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3e:	f383 8811 	msr	BASEPRI, r3
 800de42:	f3bf 8f6f 	isb	sy
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	607b      	str	r3, [r7, #4]
}
 800de4c:	bf00      	nop
 800de4e:	bf00      	nop
 800de50:	e7fd      	b.n	800de4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de52:	4b0a      	ldr	r3, [pc, #40]	@ (800de7c <vPortExitCritical+0x50>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	3b01      	subs	r3, #1
 800de58:	4a08      	ldr	r2, [pc, #32]	@ (800de7c <vPortExitCritical+0x50>)
 800de5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de5c:	4b07      	ldr	r3, [pc, #28]	@ (800de7c <vPortExitCritical+0x50>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d105      	bne.n	800de70 <vPortExitCritical+0x44>
 800de64:	2300      	movs	r3, #0
 800de66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	f383 8811 	msr	BASEPRI, r3
}
 800de6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de70:	bf00      	nop
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	2000006c 	.word	0x2000006c

0800de80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de80:	f3ef 8009 	mrs	r0, PSP
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	4b15      	ldr	r3, [pc, #84]	@ (800dee0 <pxCurrentTCBConst>)
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	f01e 0f10 	tst.w	lr, #16
 800de90:	bf08      	it	eq
 800de92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9a:	6010      	str	r0, [r2, #0]
 800de9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dea0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dea4:	f380 8811 	msr	BASEPRI, r0
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f7fe feba 	bl	800cc28 <vTaskSwitchContext>
 800deb4:	f04f 0000 	mov.w	r0, #0
 800deb8:	f380 8811 	msr	BASEPRI, r0
 800debc:	bc09      	pop	{r0, r3}
 800debe:	6819      	ldr	r1, [r3, #0]
 800dec0:	6808      	ldr	r0, [r1, #0]
 800dec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec6:	f01e 0f10 	tst.w	lr, #16
 800deca:	bf08      	it	eq
 800decc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ded0:	f380 8809 	msr	PSP, r0
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	f3af 8000 	nop.w

0800dee0 <pxCurrentTCBConst>:
 800dee0:	20001360 	.word	0x20001360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop

0800dee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	607b      	str	r3, [r7, #4]
}
 800df00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df02:	f7fe fdd7 	bl	800cab4 <xTaskIncrementTick>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d003      	beq.n	800df14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df0c:	4b06      	ldr	r3, [pc, #24]	@ (800df28 <xPortSysTickHandler+0x40>)
 800df0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df12:	601a      	str	r2, [r3, #0]
 800df14:	2300      	movs	r3, #0
 800df16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	f383 8811 	msr	BASEPRI, r3
}
 800df1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	e000ed04 	.word	0xe000ed04

0800df2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df2c:	b480      	push	{r7}
 800df2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df30:	4b0b      	ldr	r3, [pc, #44]	@ (800df60 <vPortSetupTimerInterrupt+0x34>)
 800df32:	2200      	movs	r2, #0
 800df34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df36:	4b0b      	ldr	r3, [pc, #44]	@ (800df64 <vPortSetupTimerInterrupt+0x38>)
 800df38:	2200      	movs	r2, #0
 800df3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df3c:	4b0a      	ldr	r3, [pc, #40]	@ (800df68 <vPortSetupTimerInterrupt+0x3c>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a0a      	ldr	r2, [pc, #40]	@ (800df6c <vPortSetupTimerInterrupt+0x40>)
 800df42:	fba2 2303 	umull	r2, r3, r2, r3
 800df46:	099b      	lsrs	r3, r3, #6
 800df48:	4a09      	ldr	r2, [pc, #36]	@ (800df70 <vPortSetupTimerInterrupt+0x44>)
 800df4a:	3b01      	subs	r3, #1
 800df4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df4e:	4b04      	ldr	r3, [pc, #16]	@ (800df60 <vPortSetupTimerInterrupt+0x34>)
 800df50:	2207      	movs	r2, #7
 800df52:	601a      	str	r2, [r3, #0]
}
 800df54:	bf00      	nop
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr
 800df5e:	bf00      	nop
 800df60:	e000e010 	.word	0xe000e010
 800df64:	e000e018 	.word	0xe000e018
 800df68:	20000060 	.word	0x20000060
 800df6c:	10624dd3 	.word	0x10624dd3
 800df70:	e000e014 	.word	0xe000e014

0800df74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800df84 <vPortEnableVFP+0x10>
 800df78:	6801      	ldr	r1, [r0, #0]
 800df7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800df7e:	6001      	str	r1, [r0, #0]
 800df80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df82:	bf00      	nop
 800df84:	e000ed88 	.word	0xe000ed88

0800df88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df8e:	f3ef 8305 	mrs	r3, IPSR
 800df92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2b0f      	cmp	r3, #15
 800df98:	d915      	bls.n	800dfc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df9a:	4a18      	ldr	r2, [pc, #96]	@ (800dffc <vPortValidateInterruptPriority+0x74>)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	4413      	add	r3, r2
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dfa4:	4b16      	ldr	r3, [pc, #88]	@ (800e000 <vPortValidateInterruptPriority+0x78>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	7afa      	ldrb	r2, [r7, #11]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d20b      	bcs.n	800dfc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb2:	f383 8811 	msr	BASEPRI, r3
 800dfb6:	f3bf 8f6f 	isb	sy
 800dfba:	f3bf 8f4f 	dsb	sy
 800dfbe:	607b      	str	r3, [r7, #4]
}
 800dfc0:	bf00      	nop
 800dfc2:	bf00      	nop
 800dfc4:	e7fd      	b.n	800dfc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800e004 <vPortValidateInterruptPriority+0x7c>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dfce:	4b0e      	ldr	r3, [pc, #56]	@ (800e008 <vPortValidateInterruptPriority+0x80>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d90b      	bls.n	800dfee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	603b      	str	r3, [r7, #0]
}
 800dfe8:	bf00      	nop
 800dfea:	bf00      	nop
 800dfec:	e7fd      	b.n	800dfea <vPortValidateInterruptPriority+0x62>
	}
 800dfee:	bf00      	nop
 800dff0:	3714      	adds	r7, #20
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop
 800dffc:	e000e3f0 	.word	0xe000e3f0
 800e000:	2000198c 	.word	0x2000198c
 800e004:	e000ed0c 	.word	0xe000ed0c
 800e008:	20001990 	.word	0x20001990

0800e00c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08a      	sub	sp, #40	@ 0x28
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e014:	2300      	movs	r3, #0
 800e016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e018:	f7fe fb96 	bl	800c748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e01c:	4b5c      	ldr	r3, [pc, #368]	@ (800e190 <pvPortMalloc+0x184>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d101      	bne.n	800e028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e024:	f000 f924 	bl	800e270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e028:	4b5a      	ldr	r3, [pc, #360]	@ (800e194 <pvPortMalloc+0x188>)
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4013      	ands	r3, r2
 800e030:	2b00      	cmp	r3, #0
 800e032:	f040 8095 	bne.w	800e160 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01e      	beq.n	800e07a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e03c:	2208      	movs	r2, #8
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4413      	add	r3, r2
 800e042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f003 0307 	and.w	r3, r3, #7
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d015      	beq.n	800e07a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f023 0307 	bic.w	r3, r3, #7
 800e054:	3308      	adds	r3, #8
 800e056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f003 0307 	and.w	r3, r3, #7
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00b      	beq.n	800e07a <pvPortMalloc+0x6e>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	617b      	str	r3, [r7, #20]
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop
 800e078:	e7fd      	b.n	800e076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d06f      	beq.n	800e160 <pvPortMalloc+0x154>
 800e080:	4b45      	ldr	r3, [pc, #276]	@ (800e198 <pvPortMalloc+0x18c>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	429a      	cmp	r2, r3
 800e088:	d86a      	bhi.n	800e160 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e08a:	4b44      	ldr	r3, [pc, #272]	@ (800e19c <pvPortMalloc+0x190>)
 800e08c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e08e:	4b43      	ldr	r3, [pc, #268]	@ (800e19c <pvPortMalloc+0x190>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e094:	e004      	b.n	800e0a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d903      	bls.n	800e0b2 <pvPortMalloc+0xa6>
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d1f1      	bne.n	800e096 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0b2:	4b37      	ldr	r3, [pc, #220]	@ (800e190 <pvPortMalloc+0x184>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d051      	beq.n	800e160 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0bc:	6a3b      	ldr	r3, [r7, #32]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2208      	movs	r2, #8
 800e0c2:	4413      	add	r3, r2
 800e0c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	6a3b      	ldr	r3, [r7, #32]
 800e0cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	1ad2      	subs	r2, r2, r3
 800e0d6:	2308      	movs	r3, #8
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d920      	bls.n	800e120 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	f003 0307 	and.w	r3, r3, #7
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00b      	beq.n	800e108 <pvPortMalloc+0xfc>
	__asm volatile
 800e0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	613b      	str	r3, [r7, #16]
}
 800e102:	bf00      	nop
 800e104:	bf00      	nop
 800e106:	e7fd      	b.n	800e104 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10a:	685a      	ldr	r2, [r3, #4]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	1ad2      	subs	r2, r2, r3
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e11a:	69b8      	ldr	r0, [r7, #24]
 800e11c:	f000 f90a 	bl	800e334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e120:	4b1d      	ldr	r3, [pc, #116]	@ (800e198 <pvPortMalloc+0x18c>)
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	1ad3      	subs	r3, r2, r3
 800e12a:	4a1b      	ldr	r2, [pc, #108]	@ (800e198 <pvPortMalloc+0x18c>)
 800e12c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e12e:	4b1a      	ldr	r3, [pc, #104]	@ (800e198 <pvPortMalloc+0x18c>)
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	4b1b      	ldr	r3, [pc, #108]	@ (800e1a0 <pvPortMalloc+0x194>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	429a      	cmp	r2, r3
 800e138:	d203      	bcs.n	800e142 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e13a:	4b17      	ldr	r3, [pc, #92]	@ (800e198 <pvPortMalloc+0x18c>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4a18      	ldr	r2, [pc, #96]	@ (800e1a0 <pvPortMalloc+0x194>)
 800e140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	4b13      	ldr	r3, [pc, #76]	@ (800e194 <pvPortMalloc+0x188>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	431a      	orrs	r2, r3
 800e14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e152:	2200      	movs	r2, #0
 800e154:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e156:	4b13      	ldr	r3, [pc, #76]	@ (800e1a4 <pvPortMalloc+0x198>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	3301      	adds	r3, #1
 800e15c:	4a11      	ldr	r2, [pc, #68]	@ (800e1a4 <pvPortMalloc+0x198>)
 800e15e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e160:	f7fe fb00 	bl	800c764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	f003 0307 	and.w	r3, r3, #7
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00b      	beq.n	800e186 <pvPortMalloc+0x17a>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	60fb      	str	r3, [r7, #12]
}
 800e180:	bf00      	nop
 800e182:	bf00      	nop
 800e184:	e7fd      	b.n	800e182 <pvPortMalloc+0x176>
	return pvReturn;
 800e186:	69fb      	ldr	r3, [r7, #28]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3728      	adds	r7, #40	@ 0x28
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	2000559c 	.word	0x2000559c
 800e194:	200055b0 	.word	0x200055b0
 800e198:	200055a0 	.word	0x200055a0
 800e19c:	20005594 	.word	0x20005594
 800e1a0:	200055a4 	.word	0x200055a4
 800e1a4:	200055a8 	.word	0x200055a8

0800e1a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d04f      	beq.n	800e25a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1ba:	2308      	movs	r3, #8
 800e1bc:	425b      	negs	r3, r3
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	4b25      	ldr	r3, [pc, #148]	@ (800e264 <vPortFree+0xbc>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10b      	bne.n	800e1ee <vPortFree+0x46>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	60fb      	str	r3, [r7, #12]
}
 800e1e8:	bf00      	nop
 800e1ea:	bf00      	nop
 800e1ec:	e7fd      	b.n	800e1ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00b      	beq.n	800e20e <vPortFree+0x66>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	60bb      	str	r3, [r7, #8]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	4b14      	ldr	r3, [pc, #80]	@ (800e264 <vPortFree+0xbc>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4013      	ands	r3, r2
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d01e      	beq.n	800e25a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d11a      	bne.n	800e25a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	4b0e      	ldr	r3, [pc, #56]	@ (800e264 <vPortFree+0xbc>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	43db      	mvns	r3, r3
 800e22e:	401a      	ands	r2, r3
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e234:	f7fe fa88 	bl	800c748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	4b0a      	ldr	r3, [pc, #40]	@ (800e268 <vPortFree+0xc0>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4413      	add	r3, r2
 800e242:	4a09      	ldr	r2, [pc, #36]	@ (800e268 <vPortFree+0xc0>)
 800e244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e246:	6938      	ldr	r0, [r7, #16]
 800e248:	f000 f874 	bl	800e334 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e24c:	4b07      	ldr	r3, [pc, #28]	@ (800e26c <vPortFree+0xc4>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	3301      	adds	r3, #1
 800e252:	4a06      	ldr	r2, [pc, #24]	@ (800e26c <vPortFree+0xc4>)
 800e254:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e256:	f7fe fa85 	bl	800c764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e25a:	bf00      	nop
 800e25c:	3718      	adds	r7, #24
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	200055b0 	.word	0x200055b0
 800e268:	200055a0 	.word	0x200055a0
 800e26c:	200055ac 	.word	0x200055ac

0800e270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e270:	b480      	push	{r7}
 800e272:	b085      	sub	sp, #20
 800e274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e276:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e27a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e27c:	4b27      	ldr	r3, [pc, #156]	@ (800e31c <prvHeapInit+0xac>)
 800e27e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f003 0307 	and.w	r3, r3, #7
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00c      	beq.n	800e2a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	3307      	adds	r3, #7
 800e28e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f023 0307 	bic.w	r3, r3, #7
 800e296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	4a1f      	ldr	r2, [pc, #124]	@ (800e31c <prvHeapInit+0xac>)
 800e2a0:	4413      	add	r3, r2
 800e2a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e320 <prvHeapInit+0xb0>)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2ae:	4b1c      	ldr	r3, [pc, #112]	@ (800e320 <prvHeapInit+0xb0>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	68ba      	ldr	r2, [r7, #8]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2bc:	2208      	movs	r2, #8
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	1a9b      	subs	r3, r3, r2
 800e2c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f023 0307 	bic.w	r3, r3, #7
 800e2ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	4a15      	ldr	r2, [pc, #84]	@ (800e324 <prvHeapInit+0xb4>)
 800e2d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2d2:	4b14      	ldr	r3, [pc, #80]	@ (800e324 <prvHeapInit+0xb4>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2da:	4b12      	ldr	r3, [pc, #72]	@ (800e324 <prvHeapInit+0xb4>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	1ad2      	subs	r2, r2, r3
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e324 <prvHeapInit+0xb4>)
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	4a0a      	ldr	r2, [pc, #40]	@ (800e328 <prvHeapInit+0xb8>)
 800e2fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	4a09      	ldr	r2, [pc, #36]	@ (800e32c <prvHeapInit+0xbc>)
 800e306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e308:	4b09      	ldr	r3, [pc, #36]	@ (800e330 <prvHeapInit+0xc0>)
 800e30a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e30e:	601a      	str	r2, [r3, #0]
}
 800e310:	bf00      	nop
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr
 800e31c:	20001994 	.word	0x20001994
 800e320:	20005594 	.word	0x20005594
 800e324:	2000559c 	.word	0x2000559c
 800e328:	200055a4 	.word	0x200055a4
 800e32c:	200055a0 	.word	0x200055a0
 800e330:	200055b0 	.word	0x200055b0

0800e334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e33c:	4b28      	ldr	r3, [pc, #160]	@ (800e3e0 <prvInsertBlockIntoFreeList+0xac>)
 800e33e:	60fb      	str	r3, [r7, #12]
 800e340:	e002      	b.n	800e348 <prvInsertBlockIntoFreeList+0x14>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d8f7      	bhi.n	800e342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	4413      	add	r3, r2
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	429a      	cmp	r2, r3
 800e362:	d108      	bne.n	800e376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	685a      	ldr	r2, [r3, #4]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	441a      	add	r2, r3
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	441a      	add	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	429a      	cmp	r2, r3
 800e388:	d118      	bne.n	800e3bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	4b15      	ldr	r3, [pc, #84]	@ (800e3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	429a      	cmp	r2, r3
 800e394:	d00d      	beq.n	800e3b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	441a      	add	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	601a      	str	r2, [r3, #0]
 800e3b0:	e008      	b.n	800e3c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e3e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	e003      	b.n	800e3c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d002      	beq.n	800e3d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3d2:	bf00      	nop
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	20005594 	.word	0x20005594
 800e3e4:	2000559c 	.word	0x2000559c

0800e3e8 <__cvt>:
 800e3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ec:	ec57 6b10 	vmov	r6, r7, d0
 800e3f0:	2f00      	cmp	r7, #0
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	463b      	mov	r3, r7
 800e3f8:	bfbb      	ittet	lt
 800e3fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e3fe:	461f      	movlt	r7, r3
 800e400:	2300      	movge	r3, #0
 800e402:	232d      	movlt	r3, #45	@ 0x2d
 800e404:	700b      	strb	r3, [r1, #0]
 800e406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e408:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e40c:	4691      	mov	r9, r2
 800e40e:	f023 0820 	bic.w	r8, r3, #32
 800e412:	bfbc      	itt	lt
 800e414:	4632      	movlt	r2, r6
 800e416:	4616      	movlt	r6, r2
 800e418:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e41c:	d005      	beq.n	800e42a <__cvt+0x42>
 800e41e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e422:	d100      	bne.n	800e426 <__cvt+0x3e>
 800e424:	3401      	adds	r4, #1
 800e426:	2102      	movs	r1, #2
 800e428:	e000      	b.n	800e42c <__cvt+0x44>
 800e42a:	2103      	movs	r1, #3
 800e42c:	ab03      	add	r3, sp, #12
 800e42e:	9301      	str	r3, [sp, #4]
 800e430:	ab02      	add	r3, sp, #8
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	ec47 6b10 	vmov	d0, r6, r7
 800e438:	4653      	mov	r3, sl
 800e43a:	4622      	mov	r2, r4
 800e43c:	f000 fe14 	bl	800f068 <_dtoa_r>
 800e440:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e444:	4605      	mov	r5, r0
 800e446:	d119      	bne.n	800e47c <__cvt+0x94>
 800e448:	f019 0f01 	tst.w	r9, #1
 800e44c:	d00e      	beq.n	800e46c <__cvt+0x84>
 800e44e:	eb00 0904 	add.w	r9, r0, r4
 800e452:	2200      	movs	r2, #0
 800e454:	2300      	movs	r3, #0
 800e456:	4630      	mov	r0, r6
 800e458:	4639      	mov	r1, r7
 800e45a:	f7f2 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800e45e:	b108      	cbz	r0, 800e464 <__cvt+0x7c>
 800e460:	f8cd 900c 	str.w	r9, [sp, #12]
 800e464:	2230      	movs	r2, #48	@ 0x30
 800e466:	9b03      	ldr	r3, [sp, #12]
 800e468:	454b      	cmp	r3, r9
 800e46a:	d31e      	bcc.n	800e4aa <__cvt+0xc2>
 800e46c:	9b03      	ldr	r3, [sp, #12]
 800e46e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e470:	1b5b      	subs	r3, r3, r5
 800e472:	4628      	mov	r0, r5
 800e474:	6013      	str	r3, [r2, #0]
 800e476:	b004      	add	sp, #16
 800e478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e480:	eb00 0904 	add.w	r9, r0, r4
 800e484:	d1e5      	bne.n	800e452 <__cvt+0x6a>
 800e486:	7803      	ldrb	r3, [r0, #0]
 800e488:	2b30      	cmp	r3, #48	@ 0x30
 800e48a:	d10a      	bne.n	800e4a2 <__cvt+0xba>
 800e48c:	2200      	movs	r2, #0
 800e48e:	2300      	movs	r3, #0
 800e490:	4630      	mov	r0, r6
 800e492:	4639      	mov	r1, r7
 800e494:	f7f2 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 800e498:	b918      	cbnz	r0, 800e4a2 <__cvt+0xba>
 800e49a:	f1c4 0401 	rsb	r4, r4, #1
 800e49e:	f8ca 4000 	str.w	r4, [sl]
 800e4a2:	f8da 3000 	ldr.w	r3, [sl]
 800e4a6:	4499      	add	r9, r3
 800e4a8:	e7d3      	b.n	800e452 <__cvt+0x6a>
 800e4aa:	1c59      	adds	r1, r3, #1
 800e4ac:	9103      	str	r1, [sp, #12]
 800e4ae:	701a      	strb	r2, [r3, #0]
 800e4b0:	e7d9      	b.n	800e466 <__cvt+0x7e>

0800e4b2 <__exponent>:
 800e4b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4b4:	2900      	cmp	r1, #0
 800e4b6:	bfba      	itte	lt
 800e4b8:	4249      	neglt	r1, r1
 800e4ba:	232d      	movlt	r3, #45	@ 0x2d
 800e4bc:	232b      	movge	r3, #43	@ 0x2b
 800e4be:	2909      	cmp	r1, #9
 800e4c0:	7002      	strb	r2, [r0, #0]
 800e4c2:	7043      	strb	r3, [r0, #1]
 800e4c4:	dd29      	ble.n	800e51a <__exponent+0x68>
 800e4c6:	f10d 0307 	add.w	r3, sp, #7
 800e4ca:	461d      	mov	r5, r3
 800e4cc:	270a      	movs	r7, #10
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800e4d4:	fb07 1416 	mls	r4, r7, r6, r1
 800e4d8:	3430      	adds	r4, #48	@ 0x30
 800e4da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e4de:	460c      	mov	r4, r1
 800e4e0:	2c63      	cmp	r4, #99	@ 0x63
 800e4e2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e4e6:	4631      	mov	r1, r6
 800e4e8:	dcf1      	bgt.n	800e4ce <__exponent+0x1c>
 800e4ea:	3130      	adds	r1, #48	@ 0x30
 800e4ec:	1e94      	subs	r4, r2, #2
 800e4ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e4f2:	1c41      	adds	r1, r0, #1
 800e4f4:	4623      	mov	r3, r4
 800e4f6:	42ab      	cmp	r3, r5
 800e4f8:	d30a      	bcc.n	800e510 <__exponent+0x5e>
 800e4fa:	f10d 0309 	add.w	r3, sp, #9
 800e4fe:	1a9b      	subs	r3, r3, r2
 800e500:	42ac      	cmp	r4, r5
 800e502:	bf88      	it	hi
 800e504:	2300      	movhi	r3, #0
 800e506:	3302      	adds	r3, #2
 800e508:	4403      	add	r3, r0
 800e50a:	1a18      	subs	r0, r3, r0
 800e50c:	b003      	add	sp, #12
 800e50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e510:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e514:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e518:	e7ed      	b.n	800e4f6 <__exponent+0x44>
 800e51a:	2330      	movs	r3, #48	@ 0x30
 800e51c:	3130      	adds	r1, #48	@ 0x30
 800e51e:	7083      	strb	r3, [r0, #2]
 800e520:	70c1      	strb	r1, [r0, #3]
 800e522:	1d03      	adds	r3, r0, #4
 800e524:	e7f1      	b.n	800e50a <__exponent+0x58>
	...

0800e528 <_printf_float>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	b08d      	sub	sp, #52	@ 0x34
 800e52e:	460c      	mov	r4, r1
 800e530:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e534:	4616      	mov	r6, r2
 800e536:	461f      	mov	r7, r3
 800e538:	4605      	mov	r5, r0
 800e53a:	f000 fc77 	bl	800ee2c <_localeconv_r>
 800e53e:	6803      	ldr	r3, [r0, #0]
 800e540:	9304      	str	r3, [sp, #16]
 800e542:	4618      	mov	r0, r3
 800e544:	f7f1 fe94 	bl	8000270 <strlen>
 800e548:	2300      	movs	r3, #0
 800e54a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e54c:	f8d8 3000 	ldr.w	r3, [r8]
 800e550:	9005      	str	r0, [sp, #20]
 800e552:	3307      	adds	r3, #7
 800e554:	f023 0307 	bic.w	r3, r3, #7
 800e558:	f103 0208 	add.w	r2, r3, #8
 800e55c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e560:	f8d4 b000 	ldr.w	fp, [r4]
 800e564:	f8c8 2000 	str.w	r2, [r8]
 800e568:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e56c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e570:	9307      	str	r3, [sp, #28]
 800e572:	f8cd 8018 	str.w	r8, [sp, #24]
 800e576:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e57a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e57e:	4b9c      	ldr	r3, [pc, #624]	@ (800e7f0 <_printf_float+0x2c8>)
 800e580:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e584:	f7f2 fad2 	bl	8000b2c <__aeabi_dcmpun>
 800e588:	bb70      	cbnz	r0, 800e5e8 <_printf_float+0xc0>
 800e58a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e58e:	4b98      	ldr	r3, [pc, #608]	@ (800e7f0 <_printf_float+0x2c8>)
 800e590:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e594:	f7f2 faac 	bl	8000af0 <__aeabi_dcmple>
 800e598:	bb30      	cbnz	r0, 800e5e8 <_printf_float+0xc0>
 800e59a:	2200      	movs	r2, #0
 800e59c:	2300      	movs	r3, #0
 800e59e:	4640      	mov	r0, r8
 800e5a0:	4649      	mov	r1, r9
 800e5a2:	f7f2 fa9b 	bl	8000adc <__aeabi_dcmplt>
 800e5a6:	b110      	cbz	r0, 800e5ae <_printf_float+0x86>
 800e5a8:	232d      	movs	r3, #45	@ 0x2d
 800e5aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5ae:	4a91      	ldr	r2, [pc, #580]	@ (800e7f4 <_printf_float+0x2cc>)
 800e5b0:	4b91      	ldr	r3, [pc, #580]	@ (800e7f8 <_printf_float+0x2d0>)
 800e5b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e5b6:	bf94      	ite	ls
 800e5b8:	4690      	movls	r8, r2
 800e5ba:	4698      	movhi	r8, r3
 800e5bc:	2303      	movs	r3, #3
 800e5be:	6123      	str	r3, [r4, #16]
 800e5c0:	f02b 0304 	bic.w	r3, fp, #4
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	f04f 0900 	mov.w	r9, #0
 800e5ca:	9700      	str	r7, [sp, #0]
 800e5cc:	4633      	mov	r3, r6
 800e5ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e5d0:	4621      	mov	r1, r4
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	f000 f9d2 	bl	800e97c <_printf_common>
 800e5d8:	3001      	adds	r0, #1
 800e5da:	f040 808d 	bne.w	800e6f8 <_printf_float+0x1d0>
 800e5de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5e2:	b00d      	add	sp, #52	@ 0x34
 800e5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e8:	4642      	mov	r2, r8
 800e5ea:	464b      	mov	r3, r9
 800e5ec:	4640      	mov	r0, r8
 800e5ee:	4649      	mov	r1, r9
 800e5f0:	f7f2 fa9c 	bl	8000b2c <__aeabi_dcmpun>
 800e5f4:	b140      	cbz	r0, 800e608 <_printf_float+0xe0>
 800e5f6:	464b      	mov	r3, r9
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	bfbc      	itt	lt
 800e5fc:	232d      	movlt	r3, #45	@ 0x2d
 800e5fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e602:	4a7e      	ldr	r2, [pc, #504]	@ (800e7fc <_printf_float+0x2d4>)
 800e604:	4b7e      	ldr	r3, [pc, #504]	@ (800e800 <_printf_float+0x2d8>)
 800e606:	e7d4      	b.n	800e5b2 <_printf_float+0x8a>
 800e608:	6863      	ldr	r3, [r4, #4]
 800e60a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e60e:	9206      	str	r2, [sp, #24]
 800e610:	1c5a      	adds	r2, r3, #1
 800e612:	d13b      	bne.n	800e68c <_printf_float+0x164>
 800e614:	2306      	movs	r3, #6
 800e616:	6063      	str	r3, [r4, #4]
 800e618:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e61c:	2300      	movs	r3, #0
 800e61e:	6022      	str	r2, [r4, #0]
 800e620:	9303      	str	r3, [sp, #12]
 800e622:	ab0a      	add	r3, sp, #40	@ 0x28
 800e624:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e628:	ab09      	add	r3, sp, #36	@ 0x24
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	6861      	ldr	r1, [r4, #4]
 800e62e:	ec49 8b10 	vmov	d0, r8, r9
 800e632:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e636:	4628      	mov	r0, r5
 800e638:	f7ff fed6 	bl	800e3e8 <__cvt>
 800e63c:	9b06      	ldr	r3, [sp, #24]
 800e63e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e640:	2b47      	cmp	r3, #71	@ 0x47
 800e642:	4680      	mov	r8, r0
 800e644:	d129      	bne.n	800e69a <_printf_float+0x172>
 800e646:	1cc8      	adds	r0, r1, #3
 800e648:	db02      	blt.n	800e650 <_printf_float+0x128>
 800e64a:	6863      	ldr	r3, [r4, #4]
 800e64c:	4299      	cmp	r1, r3
 800e64e:	dd41      	ble.n	800e6d4 <_printf_float+0x1ac>
 800e650:	f1aa 0a02 	sub.w	sl, sl, #2
 800e654:	fa5f fa8a 	uxtb.w	sl, sl
 800e658:	3901      	subs	r1, #1
 800e65a:	4652      	mov	r2, sl
 800e65c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e660:	9109      	str	r1, [sp, #36]	@ 0x24
 800e662:	f7ff ff26 	bl	800e4b2 <__exponent>
 800e666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e668:	1813      	adds	r3, r2, r0
 800e66a:	2a01      	cmp	r2, #1
 800e66c:	4681      	mov	r9, r0
 800e66e:	6123      	str	r3, [r4, #16]
 800e670:	dc02      	bgt.n	800e678 <_printf_float+0x150>
 800e672:	6822      	ldr	r2, [r4, #0]
 800e674:	07d2      	lsls	r2, r2, #31
 800e676:	d501      	bpl.n	800e67c <_printf_float+0x154>
 800e678:	3301      	adds	r3, #1
 800e67a:	6123      	str	r3, [r4, #16]
 800e67c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e680:	2b00      	cmp	r3, #0
 800e682:	d0a2      	beq.n	800e5ca <_printf_float+0xa2>
 800e684:	232d      	movs	r3, #45	@ 0x2d
 800e686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e68a:	e79e      	b.n	800e5ca <_printf_float+0xa2>
 800e68c:	9a06      	ldr	r2, [sp, #24]
 800e68e:	2a47      	cmp	r2, #71	@ 0x47
 800e690:	d1c2      	bne.n	800e618 <_printf_float+0xf0>
 800e692:	2b00      	cmp	r3, #0
 800e694:	d1c0      	bne.n	800e618 <_printf_float+0xf0>
 800e696:	2301      	movs	r3, #1
 800e698:	e7bd      	b.n	800e616 <_printf_float+0xee>
 800e69a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e69e:	d9db      	bls.n	800e658 <_printf_float+0x130>
 800e6a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e6a4:	d118      	bne.n	800e6d8 <_printf_float+0x1b0>
 800e6a6:	2900      	cmp	r1, #0
 800e6a8:	6863      	ldr	r3, [r4, #4]
 800e6aa:	dd0b      	ble.n	800e6c4 <_printf_float+0x19c>
 800e6ac:	6121      	str	r1, [r4, #16]
 800e6ae:	b913      	cbnz	r3, 800e6b6 <_printf_float+0x18e>
 800e6b0:	6822      	ldr	r2, [r4, #0]
 800e6b2:	07d0      	lsls	r0, r2, #31
 800e6b4:	d502      	bpl.n	800e6bc <_printf_float+0x194>
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	440b      	add	r3, r1
 800e6ba:	6123      	str	r3, [r4, #16]
 800e6bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e6be:	f04f 0900 	mov.w	r9, #0
 800e6c2:	e7db      	b.n	800e67c <_printf_float+0x154>
 800e6c4:	b913      	cbnz	r3, 800e6cc <_printf_float+0x1a4>
 800e6c6:	6822      	ldr	r2, [r4, #0]
 800e6c8:	07d2      	lsls	r2, r2, #31
 800e6ca:	d501      	bpl.n	800e6d0 <_printf_float+0x1a8>
 800e6cc:	3302      	adds	r3, #2
 800e6ce:	e7f4      	b.n	800e6ba <_printf_float+0x192>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e7f2      	b.n	800e6ba <_printf_float+0x192>
 800e6d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e6d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6da:	4299      	cmp	r1, r3
 800e6dc:	db05      	blt.n	800e6ea <_printf_float+0x1c2>
 800e6de:	6823      	ldr	r3, [r4, #0]
 800e6e0:	6121      	str	r1, [r4, #16]
 800e6e2:	07d8      	lsls	r0, r3, #31
 800e6e4:	d5ea      	bpl.n	800e6bc <_printf_float+0x194>
 800e6e6:	1c4b      	adds	r3, r1, #1
 800e6e8:	e7e7      	b.n	800e6ba <_printf_float+0x192>
 800e6ea:	2900      	cmp	r1, #0
 800e6ec:	bfd4      	ite	le
 800e6ee:	f1c1 0202 	rsble	r2, r1, #2
 800e6f2:	2201      	movgt	r2, #1
 800e6f4:	4413      	add	r3, r2
 800e6f6:	e7e0      	b.n	800e6ba <_printf_float+0x192>
 800e6f8:	6823      	ldr	r3, [r4, #0]
 800e6fa:	055a      	lsls	r2, r3, #21
 800e6fc:	d407      	bmi.n	800e70e <_printf_float+0x1e6>
 800e6fe:	6923      	ldr	r3, [r4, #16]
 800e700:	4642      	mov	r2, r8
 800e702:	4631      	mov	r1, r6
 800e704:	4628      	mov	r0, r5
 800e706:	47b8      	blx	r7
 800e708:	3001      	adds	r0, #1
 800e70a:	d12b      	bne.n	800e764 <_printf_float+0x23c>
 800e70c:	e767      	b.n	800e5de <_printf_float+0xb6>
 800e70e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e712:	f240 80dd 	bls.w	800e8d0 <_printf_float+0x3a8>
 800e716:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e71a:	2200      	movs	r2, #0
 800e71c:	2300      	movs	r3, #0
 800e71e:	f7f2 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e722:	2800      	cmp	r0, #0
 800e724:	d033      	beq.n	800e78e <_printf_float+0x266>
 800e726:	4a37      	ldr	r2, [pc, #220]	@ (800e804 <_printf_float+0x2dc>)
 800e728:	2301      	movs	r3, #1
 800e72a:	4631      	mov	r1, r6
 800e72c:	4628      	mov	r0, r5
 800e72e:	47b8      	blx	r7
 800e730:	3001      	adds	r0, #1
 800e732:	f43f af54 	beq.w	800e5de <_printf_float+0xb6>
 800e736:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e73a:	4543      	cmp	r3, r8
 800e73c:	db02      	blt.n	800e744 <_printf_float+0x21c>
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	07d8      	lsls	r0, r3, #31
 800e742:	d50f      	bpl.n	800e764 <_printf_float+0x23c>
 800e744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e748:	4631      	mov	r1, r6
 800e74a:	4628      	mov	r0, r5
 800e74c:	47b8      	blx	r7
 800e74e:	3001      	adds	r0, #1
 800e750:	f43f af45 	beq.w	800e5de <_printf_float+0xb6>
 800e754:	f04f 0900 	mov.w	r9, #0
 800e758:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e75c:	f104 0a1a 	add.w	sl, r4, #26
 800e760:	45c8      	cmp	r8, r9
 800e762:	dc09      	bgt.n	800e778 <_printf_float+0x250>
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	079b      	lsls	r3, r3, #30
 800e768:	f100 8103 	bmi.w	800e972 <_printf_float+0x44a>
 800e76c:	68e0      	ldr	r0, [r4, #12]
 800e76e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e770:	4298      	cmp	r0, r3
 800e772:	bfb8      	it	lt
 800e774:	4618      	movlt	r0, r3
 800e776:	e734      	b.n	800e5e2 <_printf_float+0xba>
 800e778:	2301      	movs	r3, #1
 800e77a:	4652      	mov	r2, sl
 800e77c:	4631      	mov	r1, r6
 800e77e:	4628      	mov	r0, r5
 800e780:	47b8      	blx	r7
 800e782:	3001      	adds	r0, #1
 800e784:	f43f af2b 	beq.w	800e5de <_printf_float+0xb6>
 800e788:	f109 0901 	add.w	r9, r9, #1
 800e78c:	e7e8      	b.n	800e760 <_printf_float+0x238>
 800e78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e790:	2b00      	cmp	r3, #0
 800e792:	dc39      	bgt.n	800e808 <_printf_float+0x2e0>
 800e794:	4a1b      	ldr	r2, [pc, #108]	@ (800e804 <_printf_float+0x2dc>)
 800e796:	2301      	movs	r3, #1
 800e798:	4631      	mov	r1, r6
 800e79a:	4628      	mov	r0, r5
 800e79c:	47b8      	blx	r7
 800e79e:	3001      	adds	r0, #1
 800e7a0:	f43f af1d 	beq.w	800e5de <_printf_float+0xb6>
 800e7a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e7a8:	ea59 0303 	orrs.w	r3, r9, r3
 800e7ac:	d102      	bne.n	800e7b4 <_printf_float+0x28c>
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	07d9      	lsls	r1, r3, #31
 800e7b2:	d5d7      	bpl.n	800e764 <_printf_float+0x23c>
 800e7b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7b8:	4631      	mov	r1, r6
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	47b8      	blx	r7
 800e7be:	3001      	adds	r0, #1
 800e7c0:	f43f af0d 	beq.w	800e5de <_printf_float+0xb6>
 800e7c4:	f04f 0a00 	mov.w	sl, #0
 800e7c8:	f104 0b1a 	add.w	fp, r4, #26
 800e7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7ce:	425b      	negs	r3, r3
 800e7d0:	4553      	cmp	r3, sl
 800e7d2:	dc01      	bgt.n	800e7d8 <_printf_float+0x2b0>
 800e7d4:	464b      	mov	r3, r9
 800e7d6:	e793      	b.n	800e700 <_printf_float+0x1d8>
 800e7d8:	2301      	movs	r3, #1
 800e7da:	465a      	mov	r2, fp
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4628      	mov	r0, r5
 800e7e0:	47b8      	blx	r7
 800e7e2:	3001      	adds	r0, #1
 800e7e4:	f43f aefb 	beq.w	800e5de <_printf_float+0xb6>
 800e7e8:	f10a 0a01 	add.w	sl, sl, #1
 800e7ec:	e7ee      	b.n	800e7cc <_printf_float+0x2a4>
 800e7ee:	bf00      	nop
 800e7f0:	7fefffff 	.word	0x7fefffff
 800e7f4:	08012000 	.word	0x08012000
 800e7f8:	08012004 	.word	0x08012004
 800e7fc:	08012008 	.word	0x08012008
 800e800:	0801200c 	.word	0x0801200c
 800e804:	08012010 	.word	0x08012010
 800e808:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e80a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e80e:	4553      	cmp	r3, sl
 800e810:	bfa8      	it	ge
 800e812:	4653      	movge	r3, sl
 800e814:	2b00      	cmp	r3, #0
 800e816:	4699      	mov	r9, r3
 800e818:	dc36      	bgt.n	800e888 <_printf_float+0x360>
 800e81a:	f04f 0b00 	mov.w	fp, #0
 800e81e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e822:	f104 021a 	add.w	r2, r4, #26
 800e826:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e828:	9306      	str	r3, [sp, #24]
 800e82a:	eba3 0309 	sub.w	r3, r3, r9
 800e82e:	455b      	cmp	r3, fp
 800e830:	dc31      	bgt.n	800e896 <_printf_float+0x36e>
 800e832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e834:	459a      	cmp	sl, r3
 800e836:	dc3a      	bgt.n	800e8ae <_printf_float+0x386>
 800e838:	6823      	ldr	r3, [r4, #0]
 800e83a:	07da      	lsls	r2, r3, #31
 800e83c:	d437      	bmi.n	800e8ae <_printf_float+0x386>
 800e83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e840:	ebaa 0903 	sub.w	r9, sl, r3
 800e844:	9b06      	ldr	r3, [sp, #24]
 800e846:	ebaa 0303 	sub.w	r3, sl, r3
 800e84a:	4599      	cmp	r9, r3
 800e84c:	bfa8      	it	ge
 800e84e:	4699      	movge	r9, r3
 800e850:	f1b9 0f00 	cmp.w	r9, #0
 800e854:	dc33      	bgt.n	800e8be <_printf_float+0x396>
 800e856:	f04f 0800 	mov.w	r8, #0
 800e85a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e85e:	f104 0b1a 	add.w	fp, r4, #26
 800e862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e864:	ebaa 0303 	sub.w	r3, sl, r3
 800e868:	eba3 0309 	sub.w	r3, r3, r9
 800e86c:	4543      	cmp	r3, r8
 800e86e:	f77f af79 	ble.w	800e764 <_printf_float+0x23c>
 800e872:	2301      	movs	r3, #1
 800e874:	465a      	mov	r2, fp
 800e876:	4631      	mov	r1, r6
 800e878:	4628      	mov	r0, r5
 800e87a:	47b8      	blx	r7
 800e87c:	3001      	adds	r0, #1
 800e87e:	f43f aeae 	beq.w	800e5de <_printf_float+0xb6>
 800e882:	f108 0801 	add.w	r8, r8, #1
 800e886:	e7ec      	b.n	800e862 <_printf_float+0x33a>
 800e888:	4642      	mov	r2, r8
 800e88a:	4631      	mov	r1, r6
 800e88c:	4628      	mov	r0, r5
 800e88e:	47b8      	blx	r7
 800e890:	3001      	adds	r0, #1
 800e892:	d1c2      	bne.n	800e81a <_printf_float+0x2f2>
 800e894:	e6a3      	b.n	800e5de <_printf_float+0xb6>
 800e896:	2301      	movs	r3, #1
 800e898:	4631      	mov	r1, r6
 800e89a:	4628      	mov	r0, r5
 800e89c:	9206      	str	r2, [sp, #24]
 800e89e:	47b8      	blx	r7
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	f43f ae9c 	beq.w	800e5de <_printf_float+0xb6>
 800e8a6:	9a06      	ldr	r2, [sp, #24]
 800e8a8:	f10b 0b01 	add.w	fp, fp, #1
 800e8ac:	e7bb      	b.n	800e826 <_printf_float+0x2fe>
 800e8ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8b2:	4631      	mov	r1, r6
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	47b8      	blx	r7
 800e8b8:	3001      	adds	r0, #1
 800e8ba:	d1c0      	bne.n	800e83e <_printf_float+0x316>
 800e8bc:	e68f      	b.n	800e5de <_printf_float+0xb6>
 800e8be:	9a06      	ldr	r2, [sp, #24]
 800e8c0:	464b      	mov	r3, r9
 800e8c2:	4442      	add	r2, r8
 800e8c4:	4631      	mov	r1, r6
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	47b8      	blx	r7
 800e8ca:	3001      	adds	r0, #1
 800e8cc:	d1c3      	bne.n	800e856 <_printf_float+0x32e>
 800e8ce:	e686      	b.n	800e5de <_printf_float+0xb6>
 800e8d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e8d4:	f1ba 0f01 	cmp.w	sl, #1
 800e8d8:	dc01      	bgt.n	800e8de <_printf_float+0x3b6>
 800e8da:	07db      	lsls	r3, r3, #31
 800e8dc:	d536      	bpl.n	800e94c <_printf_float+0x424>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	4642      	mov	r2, r8
 800e8e2:	4631      	mov	r1, r6
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	47b8      	blx	r7
 800e8e8:	3001      	adds	r0, #1
 800e8ea:	f43f ae78 	beq.w	800e5de <_printf_float+0xb6>
 800e8ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8f2:	4631      	mov	r1, r6
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	47b8      	blx	r7
 800e8f8:	3001      	adds	r0, #1
 800e8fa:	f43f ae70 	beq.w	800e5de <_printf_float+0xb6>
 800e8fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e902:	2200      	movs	r2, #0
 800e904:	2300      	movs	r3, #0
 800e906:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e90a:	f7f2 f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800e90e:	b9c0      	cbnz	r0, 800e942 <_printf_float+0x41a>
 800e910:	4653      	mov	r3, sl
 800e912:	f108 0201 	add.w	r2, r8, #1
 800e916:	4631      	mov	r1, r6
 800e918:	4628      	mov	r0, r5
 800e91a:	47b8      	blx	r7
 800e91c:	3001      	adds	r0, #1
 800e91e:	d10c      	bne.n	800e93a <_printf_float+0x412>
 800e920:	e65d      	b.n	800e5de <_printf_float+0xb6>
 800e922:	2301      	movs	r3, #1
 800e924:	465a      	mov	r2, fp
 800e926:	4631      	mov	r1, r6
 800e928:	4628      	mov	r0, r5
 800e92a:	47b8      	blx	r7
 800e92c:	3001      	adds	r0, #1
 800e92e:	f43f ae56 	beq.w	800e5de <_printf_float+0xb6>
 800e932:	f108 0801 	add.w	r8, r8, #1
 800e936:	45d0      	cmp	r8, sl
 800e938:	dbf3      	blt.n	800e922 <_printf_float+0x3fa>
 800e93a:	464b      	mov	r3, r9
 800e93c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e940:	e6df      	b.n	800e702 <_printf_float+0x1da>
 800e942:	f04f 0800 	mov.w	r8, #0
 800e946:	f104 0b1a 	add.w	fp, r4, #26
 800e94a:	e7f4      	b.n	800e936 <_printf_float+0x40e>
 800e94c:	2301      	movs	r3, #1
 800e94e:	4642      	mov	r2, r8
 800e950:	e7e1      	b.n	800e916 <_printf_float+0x3ee>
 800e952:	2301      	movs	r3, #1
 800e954:	464a      	mov	r2, r9
 800e956:	4631      	mov	r1, r6
 800e958:	4628      	mov	r0, r5
 800e95a:	47b8      	blx	r7
 800e95c:	3001      	adds	r0, #1
 800e95e:	f43f ae3e 	beq.w	800e5de <_printf_float+0xb6>
 800e962:	f108 0801 	add.w	r8, r8, #1
 800e966:	68e3      	ldr	r3, [r4, #12]
 800e968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e96a:	1a5b      	subs	r3, r3, r1
 800e96c:	4543      	cmp	r3, r8
 800e96e:	dcf0      	bgt.n	800e952 <_printf_float+0x42a>
 800e970:	e6fc      	b.n	800e76c <_printf_float+0x244>
 800e972:	f04f 0800 	mov.w	r8, #0
 800e976:	f104 0919 	add.w	r9, r4, #25
 800e97a:	e7f4      	b.n	800e966 <_printf_float+0x43e>

0800e97c <_printf_common>:
 800e97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e980:	4616      	mov	r6, r2
 800e982:	4698      	mov	r8, r3
 800e984:	688a      	ldr	r2, [r1, #8]
 800e986:	690b      	ldr	r3, [r1, #16]
 800e988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e98c:	4293      	cmp	r3, r2
 800e98e:	bfb8      	it	lt
 800e990:	4613      	movlt	r3, r2
 800e992:	6033      	str	r3, [r6, #0]
 800e994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e998:	4607      	mov	r7, r0
 800e99a:	460c      	mov	r4, r1
 800e99c:	b10a      	cbz	r2, 800e9a2 <_printf_common+0x26>
 800e99e:	3301      	adds	r3, #1
 800e9a0:	6033      	str	r3, [r6, #0]
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	0699      	lsls	r1, r3, #26
 800e9a6:	bf42      	ittt	mi
 800e9a8:	6833      	ldrmi	r3, [r6, #0]
 800e9aa:	3302      	addmi	r3, #2
 800e9ac:	6033      	strmi	r3, [r6, #0]
 800e9ae:	6825      	ldr	r5, [r4, #0]
 800e9b0:	f015 0506 	ands.w	r5, r5, #6
 800e9b4:	d106      	bne.n	800e9c4 <_printf_common+0x48>
 800e9b6:	f104 0a19 	add.w	sl, r4, #25
 800e9ba:	68e3      	ldr	r3, [r4, #12]
 800e9bc:	6832      	ldr	r2, [r6, #0]
 800e9be:	1a9b      	subs	r3, r3, r2
 800e9c0:	42ab      	cmp	r3, r5
 800e9c2:	dc26      	bgt.n	800ea12 <_printf_common+0x96>
 800e9c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e9c8:	6822      	ldr	r2, [r4, #0]
 800e9ca:	3b00      	subs	r3, #0
 800e9cc:	bf18      	it	ne
 800e9ce:	2301      	movne	r3, #1
 800e9d0:	0692      	lsls	r2, r2, #26
 800e9d2:	d42b      	bmi.n	800ea2c <_printf_common+0xb0>
 800e9d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e9d8:	4641      	mov	r1, r8
 800e9da:	4638      	mov	r0, r7
 800e9dc:	47c8      	blx	r9
 800e9de:	3001      	adds	r0, #1
 800e9e0:	d01e      	beq.n	800ea20 <_printf_common+0xa4>
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	6922      	ldr	r2, [r4, #16]
 800e9e6:	f003 0306 	and.w	r3, r3, #6
 800e9ea:	2b04      	cmp	r3, #4
 800e9ec:	bf02      	ittt	eq
 800e9ee:	68e5      	ldreq	r5, [r4, #12]
 800e9f0:	6833      	ldreq	r3, [r6, #0]
 800e9f2:	1aed      	subeq	r5, r5, r3
 800e9f4:	68a3      	ldr	r3, [r4, #8]
 800e9f6:	bf0c      	ite	eq
 800e9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9fc:	2500      	movne	r5, #0
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	bfc4      	itt	gt
 800ea02:	1a9b      	subgt	r3, r3, r2
 800ea04:	18ed      	addgt	r5, r5, r3
 800ea06:	2600      	movs	r6, #0
 800ea08:	341a      	adds	r4, #26
 800ea0a:	42b5      	cmp	r5, r6
 800ea0c:	d11a      	bne.n	800ea44 <_printf_common+0xc8>
 800ea0e:	2000      	movs	r0, #0
 800ea10:	e008      	b.n	800ea24 <_printf_common+0xa8>
 800ea12:	2301      	movs	r3, #1
 800ea14:	4652      	mov	r2, sl
 800ea16:	4641      	mov	r1, r8
 800ea18:	4638      	mov	r0, r7
 800ea1a:	47c8      	blx	r9
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	d103      	bne.n	800ea28 <_printf_common+0xac>
 800ea20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea28:	3501      	adds	r5, #1
 800ea2a:	e7c6      	b.n	800e9ba <_printf_common+0x3e>
 800ea2c:	18e1      	adds	r1, r4, r3
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	2030      	movs	r0, #48	@ 0x30
 800ea32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea36:	4422      	add	r2, r4
 800ea38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea40:	3302      	adds	r3, #2
 800ea42:	e7c7      	b.n	800e9d4 <_printf_common+0x58>
 800ea44:	2301      	movs	r3, #1
 800ea46:	4622      	mov	r2, r4
 800ea48:	4641      	mov	r1, r8
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	47c8      	blx	r9
 800ea4e:	3001      	adds	r0, #1
 800ea50:	d0e6      	beq.n	800ea20 <_printf_common+0xa4>
 800ea52:	3601      	adds	r6, #1
 800ea54:	e7d9      	b.n	800ea0a <_printf_common+0x8e>
	...

0800ea58 <_printf_i>:
 800ea58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea5c:	7e0f      	ldrb	r7, [r1, #24]
 800ea5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea60:	2f78      	cmp	r7, #120	@ 0x78
 800ea62:	4691      	mov	r9, r2
 800ea64:	4680      	mov	r8, r0
 800ea66:	460c      	mov	r4, r1
 800ea68:	469a      	mov	sl, r3
 800ea6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ea6e:	d807      	bhi.n	800ea80 <_printf_i+0x28>
 800ea70:	2f62      	cmp	r7, #98	@ 0x62
 800ea72:	d80a      	bhi.n	800ea8a <_printf_i+0x32>
 800ea74:	2f00      	cmp	r7, #0
 800ea76:	f000 80d2 	beq.w	800ec1e <_printf_i+0x1c6>
 800ea7a:	2f58      	cmp	r7, #88	@ 0x58
 800ea7c:	f000 80b9 	beq.w	800ebf2 <_printf_i+0x19a>
 800ea80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ea88:	e03a      	b.n	800eb00 <_printf_i+0xa8>
 800ea8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ea8e:	2b15      	cmp	r3, #21
 800ea90:	d8f6      	bhi.n	800ea80 <_printf_i+0x28>
 800ea92:	a101      	add	r1, pc, #4	@ (adr r1, 800ea98 <_printf_i+0x40>)
 800ea94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea98:	0800eaf1 	.word	0x0800eaf1
 800ea9c:	0800eb05 	.word	0x0800eb05
 800eaa0:	0800ea81 	.word	0x0800ea81
 800eaa4:	0800ea81 	.word	0x0800ea81
 800eaa8:	0800ea81 	.word	0x0800ea81
 800eaac:	0800ea81 	.word	0x0800ea81
 800eab0:	0800eb05 	.word	0x0800eb05
 800eab4:	0800ea81 	.word	0x0800ea81
 800eab8:	0800ea81 	.word	0x0800ea81
 800eabc:	0800ea81 	.word	0x0800ea81
 800eac0:	0800ea81 	.word	0x0800ea81
 800eac4:	0800ec05 	.word	0x0800ec05
 800eac8:	0800eb2f 	.word	0x0800eb2f
 800eacc:	0800ebbf 	.word	0x0800ebbf
 800ead0:	0800ea81 	.word	0x0800ea81
 800ead4:	0800ea81 	.word	0x0800ea81
 800ead8:	0800ec27 	.word	0x0800ec27
 800eadc:	0800ea81 	.word	0x0800ea81
 800eae0:	0800eb2f 	.word	0x0800eb2f
 800eae4:	0800ea81 	.word	0x0800ea81
 800eae8:	0800ea81 	.word	0x0800ea81
 800eaec:	0800ebc7 	.word	0x0800ebc7
 800eaf0:	6833      	ldr	r3, [r6, #0]
 800eaf2:	1d1a      	adds	r2, r3, #4
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6032      	str	r2, [r6, #0]
 800eaf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eafc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb00:	2301      	movs	r3, #1
 800eb02:	e09d      	b.n	800ec40 <_printf_i+0x1e8>
 800eb04:	6833      	ldr	r3, [r6, #0]
 800eb06:	6820      	ldr	r0, [r4, #0]
 800eb08:	1d19      	adds	r1, r3, #4
 800eb0a:	6031      	str	r1, [r6, #0]
 800eb0c:	0606      	lsls	r6, r0, #24
 800eb0e:	d501      	bpl.n	800eb14 <_printf_i+0xbc>
 800eb10:	681d      	ldr	r5, [r3, #0]
 800eb12:	e003      	b.n	800eb1c <_printf_i+0xc4>
 800eb14:	0645      	lsls	r5, r0, #25
 800eb16:	d5fb      	bpl.n	800eb10 <_printf_i+0xb8>
 800eb18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb1c:	2d00      	cmp	r5, #0
 800eb1e:	da03      	bge.n	800eb28 <_printf_i+0xd0>
 800eb20:	232d      	movs	r3, #45	@ 0x2d
 800eb22:	426d      	negs	r5, r5
 800eb24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb28:	4859      	ldr	r0, [pc, #356]	@ (800ec90 <_printf_i+0x238>)
 800eb2a:	230a      	movs	r3, #10
 800eb2c:	e011      	b.n	800eb52 <_printf_i+0xfa>
 800eb2e:	6821      	ldr	r1, [r4, #0]
 800eb30:	6833      	ldr	r3, [r6, #0]
 800eb32:	0608      	lsls	r0, r1, #24
 800eb34:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb38:	d402      	bmi.n	800eb40 <_printf_i+0xe8>
 800eb3a:	0649      	lsls	r1, r1, #25
 800eb3c:	bf48      	it	mi
 800eb3e:	b2ad      	uxthmi	r5, r5
 800eb40:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb42:	4853      	ldr	r0, [pc, #332]	@ (800ec90 <_printf_i+0x238>)
 800eb44:	6033      	str	r3, [r6, #0]
 800eb46:	bf14      	ite	ne
 800eb48:	230a      	movne	r3, #10
 800eb4a:	2308      	moveq	r3, #8
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eb52:	6866      	ldr	r6, [r4, #4]
 800eb54:	60a6      	str	r6, [r4, #8]
 800eb56:	2e00      	cmp	r6, #0
 800eb58:	bfa2      	ittt	ge
 800eb5a:	6821      	ldrge	r1, [r4, #0]
 800eb5c:	f021 0104 	bicge.w	r1, r1, #4
 800eb60:	6021      	strge	r1, [r4, #0]
 800eb62:	b90d      	cbnz	r5, 800eb68 <_printf_i+0x110>
 800eb64:	2e00      	cmp	r6, #0
 800eb66:	d04b      	beq.n	800ec00 <_printf_i+0x1a8>
 800eb68:	4616      	mov	r6, r2
 800eb6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb6e:	fb03 5711 	mls	r7, r3, r1, r5
 800eb72:	5dc7      	ldrb	r7, [r0, r7]
 800eb74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb78:	462f      	mov	r7, r5
 800eb7a:	42bb      	cmp	r3, r7
 800eb7c:	460d      	mov	r5, r1
 800eb7e:	d9f4      	bls.n	800eb6a <_printf_i+0x112>
 800eb80:	2b08      	cmp	r3, #8
 800eb82:	d10b      	bne.n	800eb9c <_printf_i+0x144>
 800eb84:	6823      	ldr	r3, [r4, #0]
 800eb86:	07df      	lsls	r7, r3, #31
 800eb88:	d508      	bpl.n	800eb9c <_printf_i+0x144>
 800eb8a:	6923      	ldr	r3, [r4, #16]
 800eb8c:	6861      	ldr	r1, [r4, #4]
 800eb8e:	4299      	cmp	r1, r3
 800eb90:	bfde      	ittt	le
 800eb92:	2330      	movle	r3, #48	@ 0x30
 800eb94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb98:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800eb9c:	1b92      	subs	r2, r2, r6
 800eb9e:	6122      	str	r2, [r4, #16]
 800eba0:	f8cd a000 	str.w	sl, [sp]
 800eba4:	464b      	mov	r3, r9
 800eba6:	aa03      	add	r2, sp, #12
 800eba8:	4621      	mov	r1, r4
 800ebaa:	4640      	mov	r0, r8
 800ebac:	f7ff fee6 	bl	800e97c <_printf_common>
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	d14a      	bne.n	800ec4a <_printf_i+0x1f2>
 800ebb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebb8:	b004      	add	sp, #16
 800ebba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebbe:	6823      	ldr	r3, [r4, #0]
 800ebc0:	f043 0320 	orr.w	r3, r3, #32
 800ebc4:	6023      	str	r3, [r4, #0]
 800ebc6:	4833      	ldr	r0, [pc, #204]	@ (800ec94 <_printf_i+0x23c>)
 800ebc8:	2778      	movs	r7, #120	@ 0x78
 800ebca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	6831      	ldr	r1, [r6, #0]
 800ebd2:	061f      	lsls	r7, r3, #24
 800ebd4:	f851 5b04 	ldr.w	r5, [r1], #4
 800ebd8:	d402      	bmi.n	800ebe0 <_printf_i+0x188>
 800ebda:	065f      	lsls	r7, r3, #25
 800ebdc:	bf48      	it	mi
 800ebde:	b2ad      	uxthmi	r5, r5
 800ebe0:	6031      	str	r1, [r6, #0]
 800ebe2:	07d9      	lsls	r1, r3, #31
 800ebe4:	bf44      	itt	mi
 800ebe6:	f043 0320 	orrmi.w	r3, r3, #32
 800ebea:	6023      	strmi	r3, [r4, #0]
 800ebec:	b11d      	cbz	r5, 800ebf6 <_printf_i+0x19e>
 800ebee:	2310      	movs	r3, #16
 800ebf0:	e7ac      	b.n	800eb4c <_printf_i+0xf4>
 800ebf2:	4827      	ldr	r0, [pc, #156]	@ (800ec90 <_printf_i+0x238>)
 800ebf4:	e7e9      	b.n	800ebca <_printf_i+0x172>
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	f023 0320 	bic.w	r3, r3, #32
 800ebfc:	6023      	str	r3, [r4, #0]
 800ebfe:	e7f6      	b.n	800ebee <_printf_i+0x196>
 800ec00:	4616      	mov	r6, r2
 800ec02:	e7bd      	b.n	800eb80 <_printf_i+0x128>
 800ec04:	6833      	ldr	r3, [r6, #0]
 800ec06:	6825      	ldr	r5, [r4, #0]
 800ec08:	6961      	ldr	r1, [r4, #20]
 800ec0a:	1d18      	adds	r0, r3, #4
 800ec0c:	6030      	str	r0, [r6, #0]
 800ec0e:	062e      	lsls	r6, r5, #24
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	d501      	bpl.n	800ec18 <_printf_i+0x1c0>
 800ec14:	6019      	str	r1, [r3, #0]
 800ec16:	e002      	b.n	800ec1e <_printf_i+0x1c6>
 800ec18:	0668      	lsls	r0, r5, #25
 800ec1a:	d5fb      	bpl.n	800ec14 <_printf_i+0x1bc>
 800ec1c:	8019      	strh	r1, [r3, #0]
 800ec1e:	2300      	movs	r3, #0
 800ec20:	6123      	str	r3, [r4, #16]
 800ec22:	4616      	mov	r6, r2
 800ec24:	e7bc      	b.n	800eba0 <_printf_i+0x148>
 800ec26:	6833      	ldr	r3, [r6, #0]
 800ec28:	1d1a      	adds	r2, r3, #4
 800ec2a:	6032      	str	r2, [r6, #0]
 800ec2c:	681e      	ldr	r6, [r3, #0]
 800ec2e:	6862      	ldr	r2, [r4, #4]
 800ec30:	2100      	movs	r1, #0
 800ec32:	4630      	mov	r0, r6
 800ec34:	f7f1 facc 	bl	80001d0 <memchr>
 800ec38:	b108      	cbz	r0, 800ec3e <_printf_i+0x1e6>
 800ec3a:	1b80      	subs	r0, r0, r6
 800ec3c:	6060      	str	r0, [r4, #4]
 800ec3e:	6863      	ldr	r3, [r4, #4]
 800ec40:	6123      	str	r3, [r4, #16]
 800ec42:	2300      	movs	r3, #0
 800ec44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec48:	e7aa      	b.n	800eba0 <_printf_i+0x148>
 800ec4a:	6923      	ldr	r3, [r4, #16]
 800ec4c:	4632      	mov	r2, r6
 800ec4e:	4649      	mov	r1, r9
 800ec50:	4640      	mov	r0, r8
 800ec52:	47d0      	blx	sl
 800ec54:	3001      	adds	r0, #1
 800ec56:	d0ad      	beq.n	800ebb4 <_printf_i+0x15c>
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	079b      	lsls	r3, r3, #30
 800ec5c:	d413      	bmi.n	800ec86 <_printf_i+0x22e>
 800ec5e:	68e0      	ldr	r0, [r4, #12]
 800ec60:	9b03      	ldr	r3, [sp, #12]
 800ec62:	4298      	cmp	r0, r3
 800ec64:	bfb8      	it	lt
 800ec66:	4618      	movlt	r0, r3
 800ec68:	e7a6      	b.n	800ebb8 <_printf_i+0x160>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	4632      	mov	r2, r6
 800ec6e:	4649      	mov	r1, r9
 800ec70:	4640      	mov	r0, r8
 800ec72:	47d0      	blx	sl
 800ec74:	3001      	adds	r0, #1
 800ec76:	d09d      	beq.n	800ebb4 <_printf_i+0x15c>
 800ec78:	3501      	adds	r5, #1
 800ec7a:	68e3      	ldr	r3, [r4, #12]
 800ec7c:	9903      	ldr	r1, [sp, #12]
 800ec7e:	1a5b      	subs	r3, r3, r1
 800ec80:	42ab      	cmp	r3, r5
 800ec82:	dcf2      	bgt.n	800ec6a <_printf_i+0x212>
 800ec84:	e7eb      	b.n	800ec5e <_printf_i+0x206>
 800ec86:	2500      	movs	r5, #0
 800ec88:	f104 0619 	add.w	r6, r4, #25
 800ec8c:	e7f5      	b.n	800ec7a <_printf_i+0x222>
 800ec8e:	bf00      	nop
 800ec90:	08012012 	.word	0x08012012
 800ec94:	08012023 	.word	0x08012023

0800ec98 <std>:
 800ec98:	2300      	movs	r3, #0
 800ec9a:	b510      	push	{r4, lr}
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	e9c0 3300 	strd	r3, r3, [r0]
 800eca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eca6:	6083      	str	r3, [r0, #8]
 800eca8:	8181      	strh	r1, [r0, #12]
 800ecaa:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecac:	81c2      	strh	r2, [r0, #14]
 800ecae:	6183      	str	r3, [r0, #24]
 800ecb0:	4619      	mov	r1, r3
 800ecb2:	2208      	movs	r2, #8
 800ecb4:	305c      	adds	r0, #92	@ 0x5c
 800ecb6:	f000 f8b1 	bl	800ee1c <memset>
 800ecba:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf0 <std+0x58>)
 800ecbc:	6263      	str	r3, [r4, #36]	@ 0x24
 800ecbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf4 <std+0x5c>)
 800ecc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecc2:	4b0d      	ldr	r3, [pc, #52]	@ (800ecf8 <std+0x60>)
 800ecc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ecfc <std+0x64>)
 800ecc8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecca:	4b0d      	ldr	r3, [pc, #52]	@ (800ed00 <std+0x68>)
 800eccc:	6224      	str	r4, [r4, #32]
 800ecce:	429c      	cmp	r4, r3
 800ecd0:	d006      	beq.n	800ece0 <std+0x48>
 800ecd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecd6:	4294      	cmp	r4, r2
 800ecd8:	d002      	beq.n	800ece0 <std+0x48>
 800ecda:	33d0      	adds	r3, #208	@ 0xd0
 800ecdc:	429c      	cmp	r4, r3
 800ecde:	d105      	bne.n	800ecec <std+0x54>
 800ece0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ece4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ece8:	f000 b924 	b.w	800ef34 <__retarget_lock_init_recursive>
 800ecec:	bd10      	pop	{r4, pc}
 800ecee:	bf00      	nop
 800ecf0:	0801064d 	.word	0x0801064d
 800ecf4:	0801066f 	.word	0x0801066f
 800ecf8:	080106a7 	.word	0x080106a7
 800ecfc:	080106cb 	.word	0x080106cb
 800ed00:	200055b4 	.word	0x200055b4

0800ed04 <stdio_exit_handler>:
 800ed04:	4a02      	ldr	r2, [pc, #8]	@ (800ed10 <stdio_exit_handler+0xc>)
 800ed06:	4903      	ldr	r1, [pc, #12]	@ (800ed14 <stdio_exit_handler+0x10>)
 800ed08:	4803      	ldr	r0, [pc, #12]	@ (800ed18 <stdio_exit_handler+0x14>)
 800ed0a:	f000 b869 	b.w	800ede0 <_fwalk_sglue>
 800ed0e:	bf00      	nop
 800ed10:	20000070 	.word	0x20000070
 800ed14:	0800fee1 	.word	0x0800fee1
 800ed18:	20000080 	.word	0x20000080

0800ed1c <cleanup_stdio>:
 800ed1c:	6841      	ldr	r1, [r0, #4]
 800ed1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ed50 <cleanup_stdio+0x34>)
 800ed20:	4299      	cmp	r1, r3
 800ed22:	b510      	push	{r4, lr}
 800ed24:	4604      	mov	r4, r0
 800ed26:	d001      	beq.n	800ed2c <cleanup_stdio+0x10>
 800ed28:	f001 f8da 	bl	800fee0 <_fflush_r>
 800ed2c:	68a1      	ldr	r1, [r4, #8]
 800ed2e:	4b09      	ldr	r3, [pc, #36]	@ (800ed54 <cleanup_stdio+0x38>)
 800ed30:	4299      	cmp	r1, r3
 800ed32:	d002      	beq.n	800ed3a <cleanup_stdio+0x1e>
 800ed34:	4620      	mov	r0, r4
 800ed36:	f001 f8d3 	bl	800fee0 <_fflush_r>
 800ed3a:	68e1      	ldr	r1, [r4, #12]
 800ed3c:	4b06      	ldr	r3, [pc, #24]	@ (800ed58 <cleanup_stdio+0x3c>)
 800ed3e:	4299      	cmp	r1, r3
 800ed40:	d004      	beq.n	800ed4c <cleanup_stdio+0x30>
 800ed42:	4620      	mov	r0, r4
 800ed44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed48:	f001 b8ca 	b.w	800fee0 <_fflush_r>
 800ed4c:	bd10      	pop	{r4, pc}
 800ed4e:	bf00      	nop
 800ed50:	200055b4 	.word	0x200055b4
 800ed54:	2000561c 	.word	0x2000561c
 800ed58:	20005684 	.word	0x20005684

0800ed5c <global_stdio_init.part.0>:
 800ed5c:	b510      	push	{r4, lr}
 800ed5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ed8c <global_stdio_init.part.0+0x30>)
 800ed60:	4c0b      	ldr	r4, [pc, #44]	@ (800ed90 <global_stdio_init.part.0+0x34>)
 800ed62:	4a0c      	ldr	r2, [pc, #48]	@ (800ed94 <global_stdio_init.part.0+0x38>)
 800ed64:	601a      	str	r2, [r3, #0]
 800ed66:	4620      	mov	r0, r4
 800ed68:	2200      	movs	r2, #0
 800ed6a:	2104      	movs	r1, #4
 800ed6c:	f7ff ff94 	bl	800ec98 <std>
 800ed70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed74:	2201      	movs	r2, #1
 800ed76:	2109      	movs	r1, #9
 800ed78:	f7ff ff8e 	bl	800ec98 <std>
 800ed7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed80:	2202      	movs	r2, #2
 800ed82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed86:	2112      	movs	r1, #18
 800ed88:	f7ff bf86 	b.w	800ec98 <std>
 800ed8c:	200056ec 	.word	0x200056ec
 800ed90:	200055b4 	.word	0x200055b4
 800ed94:	0800ed05 	.word	0x0800ed05

0800ed98 <__sfp_lock_acquire>:
 800ed98:	4801      	ldr	r0, [pc, #4]	@ (800eda0 <__sfp_lock_acquire+0x8>)
 800ed9a:	f000 b8cc 	b.w	800ef36 <__retarget_lock_acquire_recursive>
 800ed9e:	bf00      	nop
 800eda0:	200056f5 	.word	0x200056f5

0800eda4 <__sfp_lock_release>:
 800eda4:	4801      	ldr	r0, [pc, #4]	@ (800edac <__sfp_lock_release+0x8>)
 800eda6:	f000 b8c7 	b.w	800ef38 <__retarget_lock_release_recursive>
 800edaa:	bf00      	nop
 800edac:	200056f5 	.word	0x200056f5

0800edb0 <__sinit>:
 800edb0:	b510      	push	{r4, lr}
 800edb2:	4604      	mov	r4, r0
 800edb4:	f7ff fff0 	bl	800ed98 <__sfp_lock_acquire>
 800edb8:	6a23      	ldr	r3, [r4, #32]
 800edba:	b11b      	cbz	r3, 800edc4 <__sinit+0x14>
 800edbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edc0:	f7ff bff0 	b.w	800eda4 <__sfp_lock_release>
 800edc4:	4b04      	ldr	r3, [pc, #16]	@ (800edd8 <__sinit+0x28>)
 800edc6:	6223      	str	r3, [r4, #32]
 800edc8:	4b04      	ldr	r3, [pc, #16]	@ (800eddc <__sinit+0x2c>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1f5      	bne.n	800edbc <__sinit+0xc>
 800edd0:	f7ff ffc4 	bl	800ed5c <global_stdio_init.part.0>
 800edd4:	e7f2      	b.n	800edbc <__sinit+0xc>
 800edd6:	bf00      	nop
 800edd8:	0800ed1d 	.word	0x0800ed1d
 800eddc:	200056ec 	.word	0x200056ec

0800ede0 <_fwalk_sglue>:
 800ede0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ede4:	4607      	mov	r7, r0
 800ede6:	4688      	mov	r8, r1
 800ede8:	4614      	mov	r4, r2
 800edea:	2600      	movs	r6, #0
 800edec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edf0:	f1b9 0901 	subs.w	r9, r9, #1
 800edf4:	d505      	bpl.n	800ee02 <_fwalk_sglue+0x22>
 800edf6:	6824      	ldr	r4, [r4, #0]
 800edf8:	2c00      	cmp	r4, #0
 800edfa:	d1f7      	bne.n	800edec <_fwalk_sglue+0xc>
 800edfc:	4630      	mov	r0, r6
 800edfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee02:	89ab      	ldrh	r3, [r5, #12]
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d907      	bls.n	800ee18 <_fwalk_sglue+0x38>
 800ee08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	d003      	beq.n	800ee18 <_fwalk_sglue+0x38>
 800ee10:	4629      	mov	r1, r5
 800ee12:	4638      	mov	r0, r7
 800ee14:	47c0      	blx	r8
 800ee16:	4306      	orrs	r6, r0
 800ee18:	3568      	adds	r5, #104	@ 0x68
 800ee1a:	e7e9      	b.n	800edf0 <_fwalk_sglue+0x10>

0800ee1c <memset>:
 800ee1c:	4402      	add	r2, r0
 800ee1e:	4603      	mov	r3, r0
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d100      	bne.n	800ee26 <memset+0xa>
 800ee24:	4770      	bx	lr
 800ee26:	f803 1b01 	strb.w	r1, [r3], #1
 800ee2a:	e7f9      	b.n	800ee20 <memset+0x4>

0800ee2c <_localeconv_r>:
 800ee2c:	4800      	ldr	r0, [pc, #0]	@ (800ee30 <_localeconv_r+0x4>)
 800ee2e:	4770      	bx	lr
 800ee30:	200001bc 	.word	0x200001bc

0800ee34 <_reclaim_reent>:
 800ee34:	4b29      	ldr	r3, [pc, #164]	@ (800eedc <_reclaim_reent+0xa8>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4283      	cmp	r3, r0
 800ee3a:	b570      	push	{r4, r5, r6, lr}
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	d04b      	beq.n	800eed8 <_reclaim_reent+0xa4>
 800ee40:	69c3      	ldr	r3, [r0, #28]
 800ee42:	b1ab      	cbz	r3, 800ee70 <_reclaim_reent+0x3c>
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	b16b      	cbz	r3, 800ee64 <_reclaim_reent+0x30>
 800ee48:	2500      	movs	r5, #0
 800ee4a:	69e3      	ldr	r3, [r4, #28]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	5959      	ldr	r1, [r3, r5]
 800ee50:	2900      	cmp	r1, #0
 800ee52:	d13b      	bne.n	800eecc <_reclaim_reent+0x98>
 800ee54:	3504      	adds	r5, #4
 800ee56:	2d80      	cmp	r5, #128	@ 0x80
 800ee58:	d1f7      	bne.n	800ee4a <_reclaim_reent+0x16>
 800ee5a:	69e3      	ldr	r3, [r4, #28]
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	68d9      	ldr	r1, [r3, #12]
 800ee60:	f000 fec6 	bl	800fbf0 <_free_r>
 800ee64:	69e3      	ldr	r3, [r4, #28]
 800ee66:	6819      	ldr	r1, [r3, #0]
 800ee68:	b111      	cbz	r1, 800ee70 <_reclaim_reent+0x3c>
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f000 fec0 	bl	800fbf0 <_free_r>
 800ee70:	6961      	ldr	r1, [r4, #20]
 800ee72:	b111      	cbz	r1, 800ee7a <_reclaim_reent+0x46>
 800ee74:	4620      	mov	r0, r4
 800ee76:	f000 febb 	bl	800fbf0 <_free_r>
 800ee7a:	69e1      	ldr	r1, [r4, #28]
 800ee7c:	b111      	cbz	r1, 800ee84 <_reclaim_reent+0x50>
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f000 feb6 	bl	800fbf0 <_free_r>
 800ee84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ee86:	b111      	cbz	r1, 800ee8e <_reclaim_reent+0x5a>
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f000 feb1 	bl	800fbf0 <_free_r>
 800ee8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee90:	b111      	cbz	r1, 800ee98 <_reclaim_reent+0x64>
 800ee92:	4620      	mov	r0, r4
 800ee94:	f000 feac 	bl	800fbf0 <_free_r>
 800ee98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ee9a:	b111      	cbz	r1, 800eea2 <_reclaim_reent+0x6e>
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f000 fea7 	bl	800fbf0 <_free_r>
 800eea2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800eea4:	b111      	cbz	r1, 800eeac <_reclaim_reent+0x78>
 800eea6:	4620      	mov	r0, r4
 800eea8:	f000 fea2 	bl	800fbf0 <_free_r>
 800eeac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800eeae:	b111      	cbz	r1, 800eeb6 <_reclaim_reent+0x82>
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f000 fe9d 	bl	800fbf0 <_free_r>
 800eeb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eeb8:	b111      	cbz	r1, 800eec0 <_reclaim_reent+0x8c>
 800eeba:	4620      	mov	r0, r4
 800eebc:	f000 fe98 	bl	800fbf0 <_free_r>
 800eec0:	6a23      	ldr	r3, [r4, #32]
 800eec2:	b14b      	cbz	r3, 800eed8 <_reclaim_reent+0xa4>
 800eec4:	4620      	mov	r0, r4
 800eec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eeca:	4718      	bx	r3
 800eecc:	680e      	ldr	r6, [r1, #0]
 800eece:	4620      	mov	r0, r4
 800eed0:	f000 fe8e 	bl	800fbf0 <_free_r>
 800eed4:	4631      	mov	r1, r6
 800eed6:	e7bb      	b.n	800ee50 <_reclaim_reent+0x1c>
 800eed8:	bd70      	pop	{r4, r5, r6, pc}
 800eeda:	bf00      	nop
 800eedc:	2000007c 	.word	0x2000007c

0800eee0 <__errno>:
 800eee0:	4b01      	ldr	r3, [pc, #4]	@ (800eee8 <__errno+0x8>)
 800eee2:	6818      	ldr	r0, [r3, #0]
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	2000007c 	.word	0x2000007c

0800eeec <__libc_init_array>:
 800eeec:	b570      	push	{r4, r5, r6, lr}
 800eeee:	4d0d      	ldr	r5, [pc, #52]	@ (800ef24 <__libc_init_array+0x38>)
 800eef0:	4c0d      	ldr	r4, [pc, #52]	@ (800ef28 <__libc_init_array+0x3c>)
 800eef2:	1b64      	subs	r4, r4, r5
 800eef4:	10a4      	asrs	r4, r4, #2
 800eef6:	2600      	movs	r6, #0
 800eef8:	42a6      	cmp	r6, r4
 800eefa:	d109      	bne.n	800ef10 <__libc_init_array+0x24>
 800eefc:	4d0b      	ldr	r5, [pc, #44]	@ (800ef2c <__libc_init_array+0x40>)
 800eefe:	4c0c      	ldr	r4, [pc, #48]	@ (800ef30 <__libc_init_array+0x44>)
 800ef00:	f002 ffca 	bl	8011e98 <_init>
 800ef04:	1b64      	subs	r4, r4, r5
 800ef06:	10a4      	asrs	r4, r4, #2
 800ef08:	2600      	movs	r6, #0
 800ef0a:	42a6      	cmp	r6, r4
 800ef0c:	d105      	bne.n	800ef1a <__libc_init_array+0x2e>
 800ef0e:	bd70      	pop	{r4, r5, r6, pc}
 800ef10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef14:	4798      	blx	r3
 800ef16:	3601      	adds	r6, #1
 800ef18:	e7ee      	b.n	800eef8 <__libc_init_array+0xc>
 800ef1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef1e:	4798      	blx	r3
 800ef20:	3601      	adds	r6, #1
 800ef22:	e7f2      	b.n	800ef0a <__libc_init_array+0x1e>
 800ef24:	08012550 	.word	0x08012550
 800ef28:	08012550 	.word	0x08012550
 800ef2c:	08012550 	.word	0x08012550
 800ef30:	08012554 	.word	0x08012554

0800ef34 <__retarget_lock_init_recursive>:
 800ef34:	4770      	bx	lr

0800ef36 <__retarget_lock_acquire_recursive>:
 800ef36:	4770      	bx	lr

0800ef38 <__retarget_lock_release_recursive>:
 800ef38:	4770      	bx	lr

0800ef3a <memcpy>:
 800ef3a:	440a      	add	r2, r1
 800ef3c:	4291      	cmp	r1, r2
 800ef3e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ef42:	d100      	bne.n	800ef46 <memcpy+0xc>
 800ef44:	4770      	bx	lr
 800ef46:	b510      	push	{r4, lr}
 800ef48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef50:	4291      	cmp	r1, r2
 800ef52:	d1f9      	bne.n	800ef48 <memcpy+0xe>
 800ef54:	bd10      	pop	{r4, pc}

0800ef56 <quorem>:
 800ef56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5a:	6903      	ldr	r3, [r0, #16]
 800ef5c:	690c      	ldr	r4, [r1, #16]
 800ef5e:	42a3      	cmp	r3, r4
 800ef60:	4607      	mov	r7, r0
 800ef62:	db7e      	blt.n	800f062 <quorem+0x10c>
 800ef64:	3c01      	subs	r4, #1
 800ef66:	f101 0814 	add.w	r8, r1, #20
 800ef6a:	00a3      	lsls	r3, r4, #2
 800ef6c:	f100 0514 	add.w	r5, r0, #20
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef76:	9301      	str	r3, [sp, #4]
 800ef78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef80:	3301      	adds	r3, #1
 800ef82:	429a      	cmp	r2, r3
 800ef84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef88:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef8c:	d32e      	bcc.n	800efec <quorem+0x96>
 800ef8e:	f04f 0a00 	mov.w	sl, #0
 800ef92:	46c4      	mov	ip, r8
 800ef94:	46ae      	mov	lr, r5
 800ef96:	46d3      	mov	fp, sl
 800ef98:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef9c:	b298      	uxth	r0, r3
 800ef9e:	fb06 a000 	mla	r0, r6, r0, sl
 800efa2:	0c02      	lsrs	r2, r0, #16
 800efa4:	0c1b      	lsrs	r3, r3, #16
 800efa6:	fb06 2303 	mla	r3, r6, r3, r2
 800efaa:	f8de 2000 	ldr.w	r2, [lr]
 800efae:	b280      	uxth	r0, r0
 800efb0:	b292      	uxth	r2, r2
 800efb2:	1a12      	subs	r2, r2, r0
 800efb4:	445a      	add	r2, fp
 800efb6:	f8de 0000 	ldr.w	r0, [lr]
 800efba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800efc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800efc8:	b292      	uxth	r2, r2
 800efca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800efce:	45e1      	cmp	r9, ip
 800efd0:	f84e 2b04 	str.w	r2, [lr], #4
 800efd4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800efd8:	d2de      	bcs.n	800ef98 <quorem+0x42>
 800efda:	9b00      	ldr	r3, [sp, #0]
 800efdc:	58eb      	ldr	r3, [r5, r3]
 800efde:	b92b      	cbnz	r3, 800efec <quorem+0x96>
 800efe0:	9b01      	ldr	r3, [sp, #4]
 800efe2:	3b04      	subs	r3, #4
 800efe4:	429d      	cmp	r5, r3
 800efe6:	461a      	mov	r2, r3
 800efe8:	d32f      	bcc.n	800f04a <quorem+0xf4>
 800efea:	613c      	str	r4, [r7, #16]
 800efec:	4638      	mov	r0, r7
 800efee:	f001 fa25 	bl	801043c <__mcmp>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	db25      	blt.n	800f042 <quorem+0xec>
 800eff6:	4629      	mov	r1, r5
 800eff8:	2000      	movs	r0, #0
 800effa:	f858 2b04 	ldr.w	r2, [r8], #4
 800effe:	f8d1 c000 	ldr.w	ip, [r1]
 800f002:	fa1f fe82 	uxth.w	lr, r2
 800f006:	fa1f f38c 	uxth.w	r3, ip
 800f00a:	eba3 030e 	sub.w	r3, r3, lr
 800f00e:	4403      	add	r3, r0
 800f010:	0c12      	lsrs	r2, r2, #16
 800f012:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f016:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f020:	45c1      	cmp	r9, r8
 800f022:	f841 3b04 	str.w	r3, [r1], #4
 800f026:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f02a:	d2e6      	bcs.n	800effa <quorem+0xa4>
 800f02c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f030:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f034:	b922      	cbnz	r2, 800f040 <quorem+0xea>
 800f036:	3b04      	subs	r3, #4
 800f038:	429d      	cmp	r5, r3
 800f03a:	461a      	mov	r2, r3
 800f03c:	d30b      	bcc.n	800f056 <quorem+0x100>
 800f03e:	613c      	str	r4, [r7, #16]
 800f040:	3601      	adds	r6, #1
 800f042:	4630      	mov	r0, r6
 800f044:	b003      	add	sp, #12
 800f046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04a:	6812      	ldr	r2, [r2, #0]
 800f04c:	3b04      	subs	r3, #4
 800f04e:	2a00      	cmp	r2, #0
 800f050:	d1cb      	bne.n	800efea <quorem+0x94>
 800f052:	3c01      	subs	r4, #1
 800f054:	e7c6      	b.n	800efe4 <quorem+0x8e>
 800f056:	6812      	ldr	r2, [r2, #0]
 800f058:	3b04      	subs	r3, #4
 800f05a:	2a00      	cmp	r2, #0
 800f05c:	d1ef      	bne.n	800f03e <quorem+0xe8>
 800f05e:	3c01      	subs	r4, #1
 800f060:	e7ea      	b.n	800f038 <quorem+0xe2>
 800f062:	2000      	movs	r0, #0
 800f064:	e7ee      	b.n	800f044 <quorem+0xee>
	...

0800f068 <_dtoa_r>:
 800f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06c:	69c7      	ldr	r7, [r0, #28]
 800f06e:	b099      	sub	sp, #100	@ 0x64
 800f070:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f074:	ec55 4b10 	vmov	r4, r5, d0
 800f078:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f07a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f07c:	4683      	mov	fp, r0
 800f07e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f080:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f082:	b97f      	cbnz	r7, 800f0a4 <_dtoa_r+0x3c>
 800f084:	2010      	movs	r0, #16
 800f086:	f000 fdfd 	bl	800fc84 <malloc>
 800f08a:	4602      	mov	r2, r0
 800f08c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f090:	b920      	cbnz	r0, 800f09c <_dtoa_r+0x34>
 800f092:	4ba7      	ldr	r3, [pc, #668]	@ (800f330 <_dtoa_r+0x2c8>)
 800f094:	21ef      	movs	r1, #239	@ 0xef
 800f096:	48a7      	ldr	r0, [pc, #668]	@ (800f334 <_dtoa_r+0x2cc>)
 800f098:	f001 fb72 	bl	8010780 <__assert_func>
 800f09c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f0a0:	6007      	str	r7, [r0, #0]
 800f0a2:	60c7      	str	r7, [r0, #12]
 800f0a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0a8:	6819      	ldr	r1, [r3, #0]
 800f0aa:	b159      	cbz	r1, 800f0c4 <_dtoa_r+0x5c>
 800f0ac:	685a      	ldr	r2, [r3, #4]
 800f0ae:	604a      	str	r2, [r1, #4]
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	4093      	lsls	r3, r2
 800f0b4:	608b      	str	r3, [r1, #8]
 800f0b6:	4658      	mov	r0, fp
 800f0b8:	f000 ff86 	bl	800ffc8 <_Bfree>
 800f0bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	601a      	str	r2, [r3, #0]
 800f0c4:	1e2b      	subs	r3, r5, #0
 800f0c6:	bfb9      	ittee	lt
 800f0c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f0cc:	9303      	strlt	r3, [sp, #12]
 800f0ce:	2300      	movge	r3, #0
 800f0d0:	6033      	strge	r3, [r6, #0]
 800f0d2:	9f03      	ldr	r7, [sp, #12]
 800f0d4:	4b98      	ldr	r3, [pc, #608]	@ (800f338 <_dtoa_r+0x2d0>)
 800f0d6:	bfbc      	itt	lt
 800f0d8:	2201      	movlt	r2, #1
 800f0da:	6032      	strlt	r2, [r6, #0]
 800f0dc:	43bb      	bics	r3, r7
 800f0de:	d112      	bne.n	800f106 <_dtoa_r+0x9e>
 800f0e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f0e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f0e6:	6013      	str	r3, [r2, #0]
 800f0e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0ec:	4323      	orrs	r3, r4
 800f0ee:	f000 854d 	beq.w	800fb8c <_dtoa_r+0xb24>
 800f0f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f34c <_dtoa_r+0x2e4>
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f000 854f 	beq.w	800fb9c <_dtoa_r+0xb34>
 800f0fe:	f10a 0303 	add.w	r3, sl, #3
 800f102:	f000 bd49 	b.w	800fb98 <_dtoa_r+0xb30>
 800f106:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f10a:	2200      	movs	r2, #0
 800f10c:	ec51 0b17 	vmov	r0, r1, d7
 800f110:	2300      	movs	r3, #0
 800f112:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f116:	f7f1 fcd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f11a:	4680      	mov	r8, r0
 800f11c:	b158      	cbz	r0, 800f136 <_dtoa_r+0xce>
 800f11e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f120:	2301      	movs	r3, #1
 800f122:	6013      	str	r3, [r2, #0]
 800f124:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f126:	b113      	cbz	r3, 800f12e <_dtoa_r+0xc6>
 800f128:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f12a:	4b84      	ldr	r3, [pc, #528]	@ (800f33c <_dtoa_r+0x2d4>)
 800f12c:	6013      	str	r3, [r2, #0]
 800f12e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f350 <_dtoa_r+0x2e8>
 800f132:	f000 bd33 	b.w	800fb9c <_dtoa_r+0xb34>
 800f136:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f13a:	aa16      	add	r2, sp, #88	@ 0x58
 800f13c:	a917      	add	r1, sp, #92	@ 0x5c
 800f13e:	4658      	mov	r0, fp
 800f140:	f001 fa2c 	bl	801059c <__d2b>
 800f144:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f148:	4681      	mov	r9, r0
 800f14a:	2e00      	cmp	r6, #0
 800f14c:	d077      	beq.n	800f23e <_dtoa_r+0x1d6>
 800f14e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f150:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f15c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f160:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f164:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f168:	4619      	mov	r1, r3
 800f16a:	2200      	movs	r2, #0
 800f16c:	4b74      	ldr	r3, [pc, #464]	@ (800f340 <_dtoa_r+0x2d8>)
 800f16e:	f7f1 f88b 	bl	8000288 <__aeabi_dsub>
 800f172:	a369      	add	r3, pc, #420	@ (adr r3, 800f318 <_dtoa_r+0x2b0>)
 800f174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f178:	f7f1 fa3e 	bl	80005f8 <__aeabi_dmul>
 800f17c:	a368      	add	r3, pc, #416	@ (adr r3, 800f320 <_dtoa_r+0x2b8>)
 800f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f182:	f7f1 f883 	bl	800028c <__adddf3>
 800f186:	4604      	mov	r4, r0
 800f188:	4630      	mov	r0, r6
 800f18a:	460d      	mov	r5, r1
 800f18c:	f7f1 f9ca 	bl	8000524 <__aeabi_i2d>
 800f190:	a365      	add	r3, pc, #404	@ (adr r3, 800f328 <_dtoa_r+0x2c0>)
 800f192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f196:	f7f1 fa2f 	bl	80005f8 <__aeabi_dmul>
 800f19a:	4602      	mov	r2, r0
 800f19c:	460b      	mov	r3, r1
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	f7f1 f873 	bl	800028c <__adddf3>
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	460d      	mov	r5, r1
 800f1aa:	f7f1 fcd5 	bl	8000b58 <__aeabi_d2iz>
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	4607      	mov	r7, r0
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f7f1 fc90 	bl	8000adc <__aeabi_dcmplt>
 800f1bc:	b140      	cbz	r0, 800f1d0 <_dtoa_r+0x168>
 800f1be:	4638      	mov	r0, r7
 800f1c0:	f7f1 f9b0 	bl	8000524 <__aeabi_i2d>
 800f1c4:	4622      	mov	r2, r4
 800f1c6:	462b      	mov	r3, r5
 800f1c8:	f7f1 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1cc:	b900      	cbnz	r0, 800f1d0 <_dtoa_r+0x168>
 800f1ce:	3f01      	subs	r7, #1
 800f1d0:	2f16      	cmp	r7, #22
 800f1d2:	d851      	bhi.n	800f278 <_dtoa_r+0x210>
 800f1d4:	4b5b      	ldr	r3, [pc, #364]	@ (800f344 <_dtoa_r+0x2dc>)
 800f1d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1e2:	f7f1 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d048      	beq.n	800f27c <_dtoa_r+0x214>
 800f1ea:	3f01      	subs	r7, #1
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800f1f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f1f2:	1b9b      	subs	r3, r3, r6
 800f1f4:	1e5a      	subs	r2, r3, #1
 800f1f6:	bf44      	itt	mi
 800f1f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f1fc:	2300      	movmi	r3, #0
 800f1fe:	9208      	str	r2, [sp, #32]
 800f200:	bf54      	ite	pl
 800f202:	f04f 0800 	movpl.w	r8, #0
 800f206:	9308      	strmi	r3, [sp, #32]
 800f208:	2f00      	cmp	r7, #0
 800f20a:	db39      	blt.n	800f280 <_dtoa_r+0x218>
 800f20c:	9b08      	ldr	r3, [sp, #32]
 800f20e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f210:	443b      	add	r3, r7
 800f212:	9308      	str	r3, [sp, #32]
 800f214:	2300      	movs	r3, #0
 800f216:	930a      	str	r3, [sp, #40]	@ 0x28
 800f218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f21a:	2b09      	cmp	r3, #9
 800f21c:	d864      	bhi.n	800f2e8 <_dtoa_r+0x280>
 800f21e:	2b05      	cmp	r3, #5
 800f220:	bfc4      	itt	gt
 800f222:	3b04      	subgt	r3, #4
 800f224:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f228:	f1a3 0302 	sub.w	r3, r3, #2
 800f22c:	bfcc      	ite	gt
 800f22e:	2400      	movgt	r4, #0
 800f230:	2401      	movle	r4, #1
 800f232:	2b03      	cmp	r3, #3
 800f234:	d863      	bhi.n	800f2fe <_dtoa_r+0x296>
 800f236:	e8df f003 	tbb	[pc, r3]
 800f23a:	372a      	.short	0x372a
 800f23c:	5535      	.short	0x5535
 800f23e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f242:	441e      	add	r6, r3
 800f244:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f248:	2b20      	cmp	r3, #32
 800f24a:	bfc1      	itttt	gt
 800f24c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f250:	409f      	lslgt	r7, r3
 800f252:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f256:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f25a:	bfd6      	itet	le
 800f25c:	f1c3 0320 	rsble	r3, r3, #32
 800f260:	ea47 0003 	orrgt.w	r0, r7, r3
 800f264:	fa04 f003 	lslle.w	r0, r4, r3
 800f268:	f7f1 f94c 	bl	8000504 <__aeabi_ui2d>
 800f26c:	2201      	movs	r2, #1
 800f26e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f272:	3e01      	subs	r6, #1
 800f274:	9214      	str	r2, [sp, #80]	@ 0x50
 800f276:	e777      	b.n	800f168 <_dtoa_r+0x100>
 800f278:	2301      	movs	r3, #1
 800f27a:	e7b8      	b.n	800f1ee <_dtoa_r+0x186>
 800f27c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f27e:	e7b7      	b.n	800f1f0 <_dtoa_r+0x188>
 800f280:	427b      	negs	r3, r7
 800f282:	930a      	str	r3, [sp, #40]	@ 0x28
 800f284:	2300      	movs	r3, #0
 800f286:	eba8 0807 	sub.w	r8, r8, r7
 800f28a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f28c:	e7c4      	b.n	800f218 <_dtoa_r+0x1b0>
 800f28e:	2300      	movs	r3, #0
 800f290:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f294:	2b00      	cmp	r3, #0
 800f296:	dc35      	bgt.n	800f304 <_dtoa_r+0x29c>
 800f298:	2301      	movs	r3, #1
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	9307      	str	r3, [sp, #28]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f2a2:	e00b      	b.n	800f2bc <_dtoa_r+0x254>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e7f3      	b.n	800f290 <_dtoa_r+0x228>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2ae:	18fb      	adds	r3, r7, r3
 800f2b0:	9300      	str	r3, [sp, #0]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	9307      	str	r3, [sp, #28]
 800f2b8:	bfb8      	it	lt
 800f2ba:	2301      	movlt	r3, #1
 800f2bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	2204      	movs	r2, #4
 800f2c4:	f102 0514 	add.w	r5, r2, #20
 800f2c8:	429d      	cmp	r5, r3
 800f2ca:	d91f      	bls.n	800f30c <_dtoa_r+0x2a4>
 800f2cc:	6041      	str	r1, [r0, #4]
 800f2ce:	4658      	mov	r0, fp
 800f2d0:	f000 fe3a 	bl	800ff48 <_Balloc>
 800f2d4:	4682      	mov	sl, r0
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d13c      	bne.n	800f354 <_dtoa_r+0x2ec>
 800f2da:	4b1b      	ldr	r3, [pc, #108]	@ (800f348 <_dtoa_r+0x2e0>)
 800f2dc:	4602      	mov	r2, r0
 800f2de:	f240 11af 	movw	r1, #431	@ 0x1af
 800f2e2:	e6d8      	b.n	800f096 <_dtoa_r+0x2e>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e7e0      	b.n	800f2aa <_dtoa_r+0x242>
 800f2e8:	2401      	movs	r4, #1
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f2f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	9307      	str	r3, [sp, #28]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	2312      	movs	r3, #18
 800f2fc:	e7d0      	b.n	800f2a0 <_dtoa_r+0x238>
 800f2fe:	2301      	movs	r3, #1
 800f300:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f302:	e7f5      	b.n	800f2f0 <_dtoa_r+0x288>
 800f304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	9307      	str	r3, [sp, #28]
 800f30a:	e7d7      	b.n	800f2bc <_dtoa_r+0x254>
 800f30c:	3101      	adds	r1, #1
 800f30e:	0052      	lsls	r2, r2, #1
 800f310:	e7d8      	b.n	800f2c4 <_dtoa_r+0x25c>
 800f312:	bf00      	nop
 800f314:	f3af 8000 	nop.w
 800f318:	636f4361 	.word	0x636f4361
 800f31c:	3fd287a7 	.word	0x3fd287a7
 800f320:	8b60c8b3 	.word	0x8b60c8b3
 800f324:	3fc68a28 	.word	0x3fc68a28
 800f328:	509f79fb 	.word	0x509f79fb
 800f32c:	3fd34413 	.word	0x3fd34413
 800f330:	08012041 	.word	0x08012041
 800f334:	08012058 	.word	0x08012058
 800f338:	7ff00000 	.word	0x7ff00000
 800f33c:	08012011 	.word	0x08012011
 800f340:	3ff80000 	.word	0x3ff80000
 800f344:	08012150 	.word	0x08012150
 800f348:	080120b0 	.word	0x080120b0
 800f34c:	0801203d 	.word	0x0801203d
 800f350:	08012010 	.word	0x08012010
 800f354:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f358:	6018      	str	r0, [r3, #0]
 800f35a:	9b07      	ldr	r3, [sp, #28]
 800f35c:	2b0e      	cmp	r3, #14
 800f35e:	f200 80a4 	bhi.w	800f4aa <_dtoa_r+0x442>
 800f362:	2c00      	cmp	r4, #0
 800f364:	f000 80a1 	beq.w	800f4aa <_dtoa_r+0x442>
 800f368:	2f00      	cmp	r7, #0
 800f36a:	dd33      	ble.n	800f3d4 <_dtoa_r+0x36c>
 800f36c:	4bad      	ldr	r3, [pc, #692]	@ (800f624 <_dtoa_r+0x5bc>)
 800f36e:	f007 020f 	and.w	r2, r7, #15
 800f372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f376:	ed93 7b00 	vldr	d7, [r3]
 800f37a:	05f8      	lsls	r0, r7, #23
 800f37c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f380:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f384:	d516      	bpl.n	800f3b4 <_dtoa_r+0x34c>
 800f386:	4ba8      	ldr	r3, [pc, #672]	@ (800f628 <_dtoa_r+0x5c0>)
 800f388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f38c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f390:	f7f1 fa5c 	bl	800084c <__aeabi_ddiv>
 800f394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f398:	f004 040f 	and.w	r4, r4, #15
 800f39c:	2603      	movs	r6, #3
 800f39e:	4da2      	ldr	r5, [pc, #648]	@ (800f628 <_dtoa_r+0x5c0>)
 800f3a0:	b954      	cbnz	r4, 800f3b8 <_dtoa_r+0x350>
 800f3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3aa:	f7f1 fa4f 	bl	800084c <__aeabi_ddiv>
 800f3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3b2:	e028      	b.n	800f406 <_dtoa_r+0x39e>
 800f3b4:	2602      	movs	r6, #2
 800f3b6:	e7f2      	b.n	800f39e <_dtoa_r+0x336>
 800f3b8:	07e1      	lsls	r1, r4, #31
 800f3ba:	d508      	bpl.n	800f3ce <_dtoa_r+0x366>
 800f3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3c4:	f7f1 f918 	bl	80005f8 <__aeabi_dmul>
 800f3c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3cc:	3601      	adds	r6, #1
 800f3ce:	1064      	asrs	r4, r4, #1
 800f3d0:	3508      	adds	r5, #8
 800f3d2:	e7e5      	b.n	800f3a0 <_dtoa_r+0x338>
 800f3d4:	f000 80d2 	beq.w	800f57c <_dtoa_r+0x514>
 800f3d8:	427c      	negs	r4, r7
 800f3da:	4b92      	ldr	r3, [pc, #584]	@ (800f624 <_dtoa_r+0x5bc>)
 800f3dc:	4d92      	ldr	r5, [pc, #584]	@ (800f628 <_dtoa_r+0x5c0>)
 800f3de:	f004 020f 	and.w	r2, r4, #15
 800f3e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3ee:	f7f1 f903 	bl	80005f8 <__aeabi_dmul>
 800f3f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3f6:	1124      	asrs	r4, r4, #4
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	2602      	movs	r6, #2
 800f3fc:	2c00      	cmp	r4, #0
 800f3fe:	f040 80b2 	bne.w	800f566 <_dtoa_r+0x4fe>
 800f402:	2b00      	cmp	r3, #0
 800f404:	d1d3      	bne.n	800f3ae <_dtoa_r+0x346>
 800f406:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f408:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f000 80b7 	beq.w	800f580 <_dtoa_r+0x518>
 800f412:	4b86      	ldr	r3, [pc, #536]	@ (800f62c <_dtoa_r+0x5c4>)
 800f414:	2200      	movs	r2, #0
 800f416:	4620      	mov	r0, r4
 800f418:	4629      	mov	r1, r5
 800f41a:	f7f1 fb5f 	bl	8000adc <__aeabi_dcmplt>
 800f41e:	2800      	cmp	r0, #0
 800f420:	f000 80ae 	beq.w	800f580 <_dtoa_r+0x518>
 800f424:	9b07      	ldr	r3, [sp, #28]
 800f426:	2b00      	cmp	r3, #0
 800f428:	f000 80aa 	beq.w	800f580 <_dtoa_r+0x518>
 800f42c:	9b00      	ldr	r3, [sp, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	dd37      	ble.n	800f4a2 <_dtoa_r+0x43a>
 800f432:	1e7b      	subs	r3, r7, #1
 800f434:	9304      	str	r3, [sp, #16]
 800f436:	4620      	mov	r0, r4
 800f438:	4b7d      	ldr	r3, [pc, #500]	@ (800f630 <_dtoa_r+0x5c8>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	4629      	mov	r1, r5
 800f43e:	f7f1 f8db 	bl	80005f8 <__aeabi_dmul>
 800f442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f446:	9c00      	ldr	r4, [sp, #0]
 800f448:	3601      	adds	r6, #1
 800f44a:	4630      	mov	r0, r6
 800f44c:	f7f1 f86a 	bl	8000524 <__aeabi_i2d>
 800f450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f454:	f7f1 f8d0 	bl	80005f8 <__aeabi_dmul>
 800f458:	4b76      	ldr	r3, [pc, #472]	@ (800f634 <_dtoa_r+0x5cc>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	f7f0 ff16 	bl	800028c <__adddf3>
 800f460:	4605      	mov	r5, r0
 800f462:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f466:	2c00      	cmp	r4, #0
 800f468:	f040 808d 	bne.w	800f586 <_dtoa_r+0x51e>
 800f46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f470:	4b71      	ldr	r3, [pc, #452]	@ (800f638 <_dtoa_r+0x5d0>)
 800f472:	2200      	movs	r2, #0
 800f474:	f7f0 ff08 	bl	8000288 <__aeabi_dsub>
 800f478:	4602      	mov	r2, r0
 800f47a:	460b      	mov	r3, r1
 800f47c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f480:	462a      	mov	r2, r5
 800f482:	4633      	mov	r3, r6
 800f484:	f7f1 fb48 	bl	8000b18 <__aeabi_dcmpgt>
 800f488:	2800      	cmp	r0, #0
 800f48a:	f040 828b 	bne.w	800f9a4 <_dtoa_r+0x93c>
 800f48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f492:	462a      	mov	r2, r5
 800f494:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f498:	f7f1 fb20 	bl	8000adc <__aeabi_dcmplt>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	f040 8128 	bne.w	800f6f2 <_dtoa_r+0x68a>
 800f4a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f4a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f4aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f2c0 815a 	blt.w	800f766 <_dtoa_r+0x6fe>
 800f4b2:	2f0e      	cmp	r7, #14
 800f4b4:	f300 8157 	bgt.w	800f766 <_dtoa_r+0x6fe>
 800f4b8:	4b5a      	ldr	r3, [pc, #360]	@ (800f624 <_dtoa_r+0x5bc>)
 800f4ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f4be:	ed93 7b00 	vldr	d7, [r3]
 800f4c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	ed8d 7b00 	vstr	d7, [sp]
 800f4ca:	da03      	bge.n	800f4d4 <_dtoa_r+0x46c>
 800f4cc:	9b07      	ldr	r3, [sp, #28]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f340 8101 	ble.w	800f6d6 <_dtoa_r+0x66e>
 800f4d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f4d8:	4656      	mov	r6, sl
 800f4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4de:	4620      	mov	r0, r4
 800f4e0:	4629      	mov	r1, r5
 800f4e2:	f7f1 f9b3 	bl	800084c <__aeabi_ddiv>
 800f4e6:	f7f1 fb37 	bl	8000b58 <__aeabi_d2iz>
 800f4ea:	4680      	mov	r8, r0
 800f4ec:	f7f1 f81a 	bl	8000524 <__aeabi_i2d>
 800f4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4f4:	f7f1 f880 	bl	80005f8 <__aeabi_dmul>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	4629      	mov	r1, r5
 800f500:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f504:	f7f0 fec0 	bl	8000288 <__aeabi_dsub>
 800f508:	f806 4b01 	strb.w	r4, [r6], #1
 800f50c:	9d07      	ldr	r5, [sp, #28]
 800f50e:	eba6 040a 	sub.w	r4, r6, sl
 800f512:	42a5      	cmp	r5, r4
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	f040 8117 	bne.w	800f74a <_dtoa_r+0x6e2>
 800f51c:	f7f0 feb6 	bl	800028c <__adddf3>
 800f520:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f524:	4604      	mov	r4, r0
 800f526:	460d      	mov	r5, r1
 800f528:	f7f1 faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	f040 80f9 	bne.w	800f724 <_dtoa_r+0x6bc>
 800f532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f536:	4620      	mov	r0, r4
 800f538:	4629      	mov	r1, r5
 800f53a:	f7f1 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f53e:	b118      	cbz	r0, 800f548 <_dtoa_r+0x4e0>
 800f540:	f018 0f01 	tst.w	r8, #1
 800f544:	f040 80ee 	bne.w	800f724 <_dtoa_r+0x6bc>
 800f548:	4649      	mov	r1, r9
 800f54a:	4658      	mov	r0, fp
 800f54c:	f000 fd3c 	bl	800ffc8 <_Bfree>
 800f550:	2300      	movs	r3, #0
 800f552:	7033      	strb	r3, [r6, #0]
 800f554:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f556:	3701      	adds	r7, #1
 800f558:	601f      	str	r7, [r3, #0]
 800f55a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f000 831d 	beq.w	800fb9c <_dtoa_r+0xb34>
 800f562:	601e      	str	r6, [r3, #0]
 800f564:	e31a      	b.n	800fb9c <_dtoa_r+0xb34>
 800f566:	07e2      	lsls	r2, r4, #31
 800f568:	d505      	bpl.n	800f576 <_dtoa_r+0x50e>
 800f56a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f56e:	f7f1 f843 	bl	80005f8 <__aeabi_dmul>
 800f572:	3601      	adds	r6, #1
 800f574:	2301      	movs	r3, #1
 800f576:	1064      	asrs	r4, r4, #1
 800f578:	3508      	adds	r5, #8
 800f57a:	e73f      	b.n	800f3fc <_dtoa_r+0x394>
 800f57c:	2602      	movs	r6, #2
 800f57e:	e742      	b.n	800f406 <_dtoa_r+0x39e>
 800f580:	9c07      	ldr	r4, [sp, #28]
 800f582:	9704      	str	r7, [sp, #16]
 800f584:	e761      	b.n	800f44a <_dtoa_r+0x3e2>
 800f586:	4b27      	ldr	r3, [pc, #156]	@ (800f624 <_dtoa_r+0x5bc>)
 800f588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f58a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f58e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f592:	4454      	add	r4, sl
 800f594:	2900      	cmp	r1, #0
 800f596:	d053      	beq.n	800f640 <_dtoa_r+0x5d8>
 800f598:	4928      	ldr	r1, [pc, #160]	@ (800f63c <_dtoa_r+0x5d4>)
 800f59a:	2000      	movs	r0, #0
 800f59c:	f7f1 f956 	bl	800084c <__aeabi_ddiv>
 800f5a0:	4633      	mov	r3, r6
 800f5a2:	462a      	mov	r2, r5
 800f5a4:	f7f0 fe70 	bl	8000288 <__aeabi_dsub>
 800f5a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5ac:	4656      	mov	r6, sl
 800f5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5b2:	f7f1 fad1 	bl	8000b58 <__aeabi_d2iz>
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	f7f0 ffb4 	bl	8000524 <__aeabi_i2d>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5c4:	f7f0 fe60 	bl	8000288 <__aeabi_dsub>
 800f5c8:	3530      	adds	r5, #48	@ 0x30
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5d2:	f806 5b01 	strb.w	r5, [r6], #1
 800f5d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5da:	f7f1 fa7f 	bl	8000adc <__aeabi_dcmplt>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d171      	bne.n	800f6c6 <_dtoa_r+0x65e>
 800f5e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5e6:	4911      	ldr	r1, [pc, #68]	@ (800f62c <_dtoa_r+0x5c4>)
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	f7f0 fe4d 	bl	8000288 <__aeabi_dsub>
 800f5ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f5f2:	f7f1 fa73 	bl	8000adc <__aeabi_dcmplt>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f040 8095 	bne.w	800f726 <_dtoa_r+0x6be>
 800f5fc:	42a6      	cmp	r6, r4
 800f5fe:	f43f af50 	beq.w	800f4a2 <_dtoa_r+0x43a>
 800f602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f606:	4b0a      	ldr	r3, [pc, #40]	@ (800f630 <_dtoa_r+0x5c8>)
 800f608:	2200      	movs	r2, #0
 800f60a:	f7f0 fff5 	bl	80005f8 <__aeabi_dmul>
 800f60e:	4b08      	ldr	r3, [pc, #32]	@ (800f630 <_dtoa_r+0x5c8>)
 800f610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f614:	2200      	movs	r2, #0
 800f616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f61a:	f7f0 ffed 	bl	80005f8 <__aeabi_dmul>
 800f61e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f622:	e7c4      	b.n	800f5ae <_dtoa_r+0x546>
 800f624:	08012150 	.word	0x08012150
 800f628:	08012128 	.word	0x08012128
 800f62c:	3ff00000 	.word	0x3ff00000
 800f630:	40240000 	.word	0x40240000
 800f634:	401c0000 	.word	0x401c0000
 800f638:	40140000 	.word	0x40140000
 800f63c:	3fe00000 	.word	0x3fe00000
 800f640:	4631      	mov	r1, r6
 800f642:	4628      	mov	r0, r5
 800f644:	f7f0 ffd8 	bl	80005f8 <__aeabi_dmul>
 800f648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f64c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f64e:	4656      	mov	r6, sl
 800f650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f654:	f7f1 fa80 	bl	8000b58 <__aeabi_d2iz>
 800f658:	4605      	mov	r5, r0
 800f65a:	f7f0 ff63 	bl	8000524 <__aeabi_i2d>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f666:	f7f0 fe0f 	bl	8000288 <__aeabi_dsub>
 800f66a:	3530      	adds	r5, #48	@ 0x30
 800f66c:	f806 5b01 	strb.w	r5, [r6], #1
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	42a6      	cmp	r6, r4
 800f676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f67a:	f04f 0200 	mov.w	r2, #0
 800f67e:	d124      	bne.n	800f6ca <_dtoa_r+0x662>
 800f680:	4bac      	ldr	r3, [pc, #688]	@ (800f934 <_dtoa_r+0x8cc>)
 800f682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f686:	f7f0 fe01 	bl	800028c <__adddf3>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f692:	f7f1 fa41 	bl	8000b18 <__aeabi_dcmpgt>
 800f696:	2800      	cmp	r0, #0
 800f698:	d145      	bne.n	800f726 <_dtoa_r+0x6be>
 800f69a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f69e:	49a5      	ldr	r1, [pc, #660]	@ (800f934 <_dtoa_r+0x8cc>)
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	f7f0 fdf1 	bl	8000288 <__aeabi_dsub>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ae:	f7f1 fa15 	bl	8000adc <__aeabi_dcmplt>
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	f43f aef5 	beq.w	800f4a2 <_dtoa_r+0x43a>
 800f6b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f6ba:	1e73      	subs	r3, r6, #1
 800f6bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800f6be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f6c2:	2b30      	cmp	r3, #48	@ 0x30
 800f6c4:	d0f8      	beq.n	800f6b8 <_dtoa_r+0x650>
 800f6c6:	9f04      	ldr	r7, [sp, #16]
 800f6c8:	e73e      	b.n	800f548 <_dtoa_r+0x4e0>
 800f6ca:	4b9b      	ldr	r3, [pc, #620]	@ (800f938 <_dtoa_r+0x8d0>)
 800f6cc:	f7f0 ff94 	bl	80005f8 <__aeabi_dmul>
 800f6d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6d4:	e7bc      	b.n	800f650 <_dtoa_r+0x5e8>
 800f6d6:	d10c      	bne.n	800f6f2 <_dtoa_r+0x68a>
 800f6d8:	4b98      	ldr	r3, [pc, #608]	@ (800f93c <_dtoa_r+0x8d4>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6e0:	f7f0 ff8a 	bl	80005f8 <__aeabi_dmul>
 800f6e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6e8:	f7f1 fa0c 	bl	8000b04 <__aeabi_dcmpge>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	f000 8157 	beq.w	800f9a0 <_dtoa_r+0x938>
 800f6f2:	2400      	movs	r4, #0
 800f6f4:	4625      	mov	r5, r4
 800f6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6f8:	43db      	mvns	r3, r3
 800f6fa:	9304      	str	r3, [sp, #16]
 800f6fc:	4656      	mov	r6, sl
 800f6fe:	2700      	movs	r7, #0
 800f700:	4621      	mov	r1, r4
 800f702:	4658      	mov	r0, fp
 800f704:	f000 fc60 	bl	800ffc8 <_Bfree>
 800f708:	2d00      	cmp	r5, #0
 800f70a:	d0dc      	beq.n	800f6c6 <_dtoa_r+0x65e>
 800f70c:	b12f      	cbz	r7, 800f71a <_dtoa_r+0x6b2>
 800f70e:	42af      	cmp	r7, r5
 800f710:	d003      	beq.n	800f71a <_dtoa_r+0x6b2>
 800f712:	4639      	mov	r1, r7
 800f714:	4658      	mov	r0, fp
 800f716:	f000 fc57 	bl	800ffc8 <_Bfree>
 800f71a:	4629      	mov	r1, r5
 800f71c:	4658      	mov	r0, fp
 800f71e:	f000 fc53 	bl	800ffc8 <_Bfree>
 800f722:	e7d0      	b.n	800f6c6 <_dtoa_r+0x65e>
 800f724:	9704      	str	r7, [sp, #16]
 800f726:	4633      	mov	r3, r6
 800f728:	461e      	mov	r6, r3
 800f72a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f72e:	2a39      	cmp	r2, #57	@ 0x39
 800f730:	d107      	bne.n	800f742 <_dtoa_r+0x6da>
 800f732:	459a      	cmp	sl, r3
 800f734:	d1f8      	bne.n	800f728 <_dtoa_r+0x6c0>
 800f736:	9a04      	ldr	r2, [sp, #16]
 800f738:	3201      	adds	r2, #1
 800f73a:	9204      	str	r2, [sp, #16]
 800f73c:	2230      	movs	r2, #48	@ 0x30
 800f73e:	f88a 2000 	strb.w	r2, [sl]
 800f742:	781a      	ldrb	r2, [r3, #0]
 800f744:	3201      	adds	r2, #1
 800f746:	701a      	strb	r2, [r3, #0]
 800f748:	e7bd      	b.n	800f6c6 <_dtoa_r+0x65e>
 800f74a:	4b7b      	ldr	r3, [pc, #492]	@ (800f938 <_dtoa_r+0x8d0>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	f7f0 ff53 	bl	80005f8 <__aeabi_dmul>
 800f752:	2200      	movs	r2, #0
 800f754:	2300      	movs	r3, #0
 800f756:	4604      	mov	r4, r0
 800f758:	460d      	mov	r5, r1
 800f75a:	f7f1 f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f75e:	2800      	cmp	r0, #0
 800f760:	f43f aebb 	beq.w	800f4da <_dtoa_r+0x472>
 800f764:	e6f0      	b.n	800f548 <_dtoa_r+0x4e0>
 800f766:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f768:	2a00      	cmp	r2, #0
 800f76a:	f000 80db 	beq.w	800f924 <_dtoa_r+0x8bc>
 800f76e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f770:	2a01      	cmp	r2, #1
 800f772:	f300 80bf 	bgt.w	800f8f4 <_dtoa_r+0x88c>
 800f776:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f778:	2a00      	cmp	r2, #0
 800f77a:	f000 80b7 	beq.w	800f8ec <_dtoa_r+0x884>
 800f77e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f782:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f784:	4646      	mov	r6, r8
 800f786:	9a08      	ldr	r2, [sp, #32]
 800f788:	2101      	movs	r1, #1
 800f78a:	441a      	add	r2, r3
 800f78c:	4658      	mov	r0, fp
 800f78e:	4498      	add	r8, r3
 800f790:	9208      	str	r2, [sp, #32]
 800f792:	f000 fccd 	bl	8010130 <__i2b>
 800f796:	4605      	mov	r5, r0
 800f798:	b15e      	cbz	r6, 800f7b2 <_dtoa_r+0x74a>
 800f79a:	9b08      	ldr	r3, [sp, #32]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	dd08      	ble.n	800f7b2 <_dtoa_r+0x74a>
 800f7a0:	42b3      	cmp	r3, r6
 800f7a2:	9a08      	ldr	r2, [sp, #32]
 800f7a4:	bfa8      	it	ge
 800f7a6:	4633      	movge	r3, r6
 800f7a8:	eba8 0803 	sub.w	r8, r8, r3
 800f7ac:	1af6      	subs	r6, r6, r3
 800f7ae:	1ad3      	subs	r3, r2, r3
 800f7b0:	9308      	str	r3, [sp, #32]
 800f7b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7b4:	b1f3      	cbz	r3, 800f7f4 <_dtoa_r+0x78c>
 800f7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 80b7 	beq.w	800f92c <_dtoa_r+0x8c4>
 800f7be:	b18c      	cbz	r4, 800f7e4 <_dtoa_r+0x77c>
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	4622      	mov	r2, r4
 800f7c4:	4658      	mov	r0, fp
 800f7c6:	f000 fd73 	bl	80102b0 <__pow5mult>
 800f7ca:	464a      	mov	r2, r9
 800f7cc:	4601      	mov	r1, r0
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	4658      	mov	r0, fp
 800f7d2:	f000 fcc3 	bl	801015c <__multiply>
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	9004      	str	r0, [sp, #16]
 800f7da:	4658      	mov	r0, fp
 800f7dc:	f000 fbf4 	bl	800ffc8 <_Bfree>
 800f7e0:	9b04      	ldr	r3, [sp, #16]
 800f7e2:	4699      	mov	r9, r3
 800f7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7e6:	1b1a      	subs	r2, r3, r4
 800f7e8:	d004      	beq.n	800f7f4 <_dtoa_r+0x78c>
 800f7ea:	4649      	mov	r1, r9
 800f7ec:	4658      	mov	r0, fp
 800f7ee:	f000 fd5f 	bl	80102b0 <__pow5mult>
 800f7f2:	4681      	mov	r9, r0
 800f7f4:	2101      	movs	r1, #1
 800f7f6:	4658      	mov	r0, fp
 800f7f8:	f000 fc9a 	bl	8010130 <__i2b>
 800f7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7fe:	4604      	mov	r4, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	f000 81cf 	beq.w	800fba4 <_dtoa_r+0xb3c>
 800f806:	461a      	mov	r2, r3
 800f808:	4601      	mov	r1, r0
 800f80a:	4658      	mov	r0, fp
 800f80c:	f000 fd50 	bl	80102b0 <__pow5mult>
 800f810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f812:	2b01      	cmp	r3, #1
 800f814:	4604      	mov	r4, r0
 800f816:	f300 8095 	bgt.w	800f944 <_dtoa_r+0x8dc>
 800f81a:	9b02      	ldr	r3, [sp, #8]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f040 8087 	bne.w	800f930 <_dtoa_r+0x8c8>
 800f822:	9b03      	ldr	r3, [sp, #12]
 800f824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f040 8089 	bne.w	800f940 <_dtoa_r+0x8d8>
 800f82e:	9b03      	ldr	r3, [sp, #12]
 800f830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f834:	0d1b      	lsrs	r3, r3, #20
 800f836:	051b      	lsls	r3, r3, #20
 800f838:	b12b      	cbz	r3, 800f846 <_dtoa_r+0x7de>
 800f83a:	9b08      	ldr	r3, [sp, #32]
 800f83c:	3301      	adds	r3, #1
 800f83e:	9308      	str	r3, [sp, #32]
 800f840:	f108 0801 	add.w	r8, r8, #1
 800f844:	2301      	movs	r3, #1
 800f846:	930a      	str	r3, [sp, #40]	@ 0x28
 800f848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f000 81b0 	beq.w	800fbb0 <_dtoa_r+0xb48>
 800f850:	6923      	ldr	r3, [r4, #16]
 800f852:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f856:	6918      	ldr	r0, [r3, #16]
 800f858:	f000 fc1e 	bl	8010098 <__hi0bits>
 800f85c:	f1c0 0020 	rsb	r0, r0, #32
 800f860:	9b08      	ldr	r3, [sp, #32]
 800f862:	4418      	add	r0, r3
 800f864:	f010 001f 	ands.w	r0, r0, #31
 800f868:	d077      	beq.n	800f95a <_dtoa_r+0x8f2>
 800f86a:	f1c0 0320 	rsb	r3, r0, #32
 800f86e:	2b04      	cmp	r3, #4
 800f870:	dd6b      	ble.n	800f94a <_dtoa_r+0x8e2>
 800f872:	9b08      	ldr	r3, [sp, #32]
 800f874:	f1c0 001c 	rsb	r0, r0, #28
 800f878:	4403      	add	r3, r0
 800f87a:	4480      	add	r8, r0
 800f87c:	4406      	add	r6, r0
 800f87e:	9308      	str	r3, [sp, #32]
 800f880:	f1b8 0f00 	cmp.w	r8, #0
 800f884:	dd05      	ble.n	800f892 <_dtoa_r+0x82a>
 800f886:	4649      	mov	r1, r9
 800f888:	4642      	mov	r2, r8
 800f88a:	4658      	mov	r0, fp
 800f88c:	f000 fd6a 	bl	8010364 <__lshift>
 800f890:	4681      	mov	r9, r0
 800f892:	9b08      	ldr	r3, [sp, #32]
 800f894:	2b00      	cmp	r3, #0
 800f896:	dd05      	ble.n	800f8a4 <_dtoa_r+0x83c>
 800f898:	4621      	mov	r1, r4
 800f89a:	461a      	mov	r2, r3
 800f89c:	4658      	mov	r0, fp
 800f89e:	f000 fd61 	bl	8010364 <__lshift>
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d059      	beq.n	800f95e <_dtoa_r+0x8f6>
 800f8aa:	4621      	mov	r1, r4
 800f8ac:	4648      	mov	r0, r9
 800f8ae:	f000 fdc5 	bl	801043c <__mcmp>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	da53      	bge.n	800f95e <_dtoa_r+0x8f6>
 800f8b6:	1e7b      	subs	r3, r7, #1
 800f8b8:	9304      	str	r3, [sp, #16]
 800f8ba:	4649      	mov	r1, r9
 800f8bc:	2300      	movs	r3, #0
 800f8be:	220a      	movs	r2, #10
 800f8c0:	4658      	mov	r0, fp
 800f8c2:	f000 fba3 	bl	801000c <__multadd>
 800f8c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8c8:	4681      	mov	r9, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f000 8172 	beq.w	800fbb4 <_dtoa_r+0xb4c>
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	4629      	mov	r1, r5
 800f8d4:	220a      	movs	r2, #10
 800f8d6:	4658      	mov	r0, fp
 800f8d8:	f000 fb98 	bl	801000c <__multadd>
 800f8dc:	9b00      	ldr	r3, [sp, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	4605      	mov	r5, r0
 800f8e2:	dc67      	bgt.n	800f9b4 <_dtoa_r+0x94c>
 800f8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8e6:	2b02      	cmp	r3, #2
 800f8e8:	dc41      	bgt.n	800f96e <_dtoa_r+0x906>
 800f8ea:	e063      	b.n	800f9b4 <_dtoa_r+0x94c>
 800f8ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f8ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f8f2:	e746      	b.n	800f782 <_dtoa_r+0x71a>
 800f8f4:	9b07      	ldr	r3, [sp, #28]
 800f8f6:	1e5c      	subs	r4, r3, #1
 800f8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8fa:	42a3      	cmp	r3, r4
 800f8fc:	bfbf      	itttt	lt
 800f8fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f900:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f902:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f904:	1ae3      	sublt	r3, r4, r3
 800f906:	bfb4      	ite	lt
 800f908:	18d2      	addlt	r2, r2, r3
 800f90a:	1b1c      	subge	r4, r3, r4
 800f90c:	9b07      	ldr	r3, [sp, #28]
 800f90e:	bfbc      	itt	lt
 800f910:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f912:	2400      	movlt	r4, #0
 800f914:	2b00      	cmp	r3, #0
 800f916:	bfb5      	itete	lt
 800f918:	eba8 0603 	sublt.w	r6, r8, r3
 800f91c:	9b07      	ldrge	r3, [sp, #28]
 800f91e:	2300      	movlt	r3, #0
 800f920:	4646      	movge	r6, r8
 800f922:	e730      	b.n	800f786 <_dtoa_r+0x71e>
 800f924:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f926:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f928:	4646      	mov	r6, r8
 800f92a:	e735      	b.n	800f798 <_dtoa_r+0x730>
 800f92c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f92e:	e75c      	b.n	800f7ea <_dtoa_r+0x782>
 800f930:	2300      	movs	r3, #0
 800f932:	e788      	b.n	800f846 <_dtoa_r+0x7de>
 800f934:	3fe00000 	.word	0x3fe00000
 800f938:	40240000 	.word	0x40240000
 800f93c:	40140000 	.word	0x40140000
 800f940:	9b02      	ldr	r3, [sp, #8]
 800f942:	e780      	b.n	800f846 <_dtoa_r+0x7de>
 800f944:	2300      	movs	r3, #0
 800f946:	930a      	str	r3, [sp, #40]	@ 0x28
 800f948:	e782      	b.n	800f850 <_dtoa_r+0x7e8>
 800f94a:	d099      	beq.n	800f880 <_dtoa_r+0x818>
 800f94c:	9a08      	ldr	r2, [sp, #32]
 800f94e:	331c      	adds	r3, #28
 800f950:	441a      	add	r2, r3
 800f952:	4498      	add	r8, r3
 800f954:	441e      	add	r6, r3
 800f956:	9208      	str	r2, [sp, #32]
 800f958:	e792      	b.n	800f880 <_dtoa_r+0x818>
 800f95a:	4603      	mov	r3, r0
 800f95c:	e7f6      	b.n	800f94c <_dtoa_r+0x8e4>
 800f95e:	9b07      	ldr	r3, [sp, #28]
 800f960:	9704      	str	r7, [sp, #16]
 800f962:	2b00      	cmp	r3, #0
 800f964:	dc20      	bgt.n	800f9a8 <_dtoa_r+0x940>
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	dd1e      	ble.n	800f9ac <_dtoa_r+0x944>
 800f96e:	9b00      	ldr	r3, [sp, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	f47f aec0 	bne.w	800f6f6 <_dtoa_r+0x68e>
 800f976:	4621      	mov	r1, r4
 800f978:	2205      	movs	r2, #5
 800f97a:	4658      	mov	r0, fp
 800f97c:	f000 fb46 	bl	801000c <__multadd>
 800f980:	4601      	mov	r1, r0
 800f982:	4604      	mov	r4, r0
 800f984:	4648      	mov	r0, r9
 800f986:	f000 fd59 	bl	801043c <__mcmp>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	f77f aeb3 	ble.w	800f6f6 <_dtoa_r+0x68e>
 800f990:	4656      	mov	r6, sl
 800f992:	2331      	movs	r3, #49	@ 0x31
 800f994:	f806 3b01 	strb.w	r3, [r6], #1
 800f998:	9b04      	ldr	r3, [sp, #16]
 800f99a:	3301      	adds	r3, #1
 800f99c:	9304      	str	r3, [sp, #16]
 800f99e:	e6ae      	b.n	800f6fe <_dtoa_r+0x696>
 800f9a0:	9c07      	ldr	r4, [sp, #28]
 800f9a2:	9704      	str	r7, [sp, #16]
 800f9a4:	4625      	mov	r5, r4
 800f9a6:	e7f3      	b.n	800f990 <_dtoa_r+0x928>
 800f9a8:	9b07      	ldr	r3, [sp, #28]
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f000 8104 	beq.w	800fbbc <_dtoa_r+0xb54>
 800f9b4:	2e00      	cmp	r6, #0
 800f9b6:	dd05      	ble.n	800f9c4 <_dtoa_r+0x95c>
 800f9b8:	4629      	mov	r1, r5
 800f9ba:	4632      	mov	r2, r6
 800f9bc:	4658      	mov	r0, fp
 800f9be:	f000 fcd1 	bl	8010364 <__lshift>
 800f9c2:	4605      	mov	r5, r0
 800f9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d05a      	beq.n	800fa80 <_dtoa_r+0xa18>
 800f9ca:	6869      	ldr	r1, [r5, #4]
 800f9cc:	4658      	mov	r0, fp
 800f9ce:	f000 fabb 	bl	800ff48 <_Balloc>
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	b928      	cbnz	r0, 800f9e2 <_dtoa_r+0x97a>
 800f9d6:	4b84      	ldr	r3, [pc, #528]	@ (800fbe8 <_dtoa_r+0xb80>)
 800f9d8:	4602      	mov	r2, r0
 800f9da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f9de:	f7ff bb5a 	b.w	800f096 <_dtoa_r+0x2e>
 800f9e2:	692a      	ldr	r2, [r5, #16]
 800f9e4:	3202      	adds	r2, #2
 800f9e6:	0092      	lsls	r2, r2, #2
 800f9e8:	f105 010c 	add.w	r1, r5, #12
 800f9ec:	300c      	adds	r0, #12
 800f9ee:	f7ff faa4 	bl	800ef3a <memcpy>
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	4631      	mov	r1, r6
 800f9f6:	4658      	mov	r0, fp
 800f9f8:	f000 fcb4 	bl	8010364 <__lshift>
 800f9fc:	f10a 0301 	add.w	r3, sl, #1
 800fa00:	9307      	str	r3, [sp, #28]
 800fa02:	9b00      	ldr	r3, [sp, #0]
 800fa04:	4453      	add	r3, sl
 800fa06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa08:	9b02      	ldr	r3, [sp, #8]
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	462f      	mov	r7, r5
 800fa10:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa12:	4605      	mov	r5, r0
 800fa14:	9b07      	ldr	r3, [sp, #28]
 800fa16:	4621      	mov	r1, r4
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	4648      	mov	r0, r9
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	f7ff fa9a 	bl	800ef56 <quorem>
 800fa22:	4639      	mov	r1, r7
 800fa24:	9002      	str	r0, [sp, #8]
 800fa26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fa2a:	4648      	mov	r0, r9
 800fa2c:	f000 fd06 	bl	801043c <__mcmp>
 800fa30:	462a      	mov	r2, r5
 800fa32:	9008      	str	r0, [sp, #32]
 800fa34:	4621      	mov	r1, r4
 800fa36:	4658      	mov	r0, fp
 800fa38:	f000 fd1c 	bl	8010474 <__mdiff>
 800fa3c:	68c2      	ldr	r2, [r0, #12]
 800fa3e:	4606      	mov	r6, r0
 800fa40:	bb02      	cbnz	r2, 800fa84 <_dtoa_r+0xa1c>
 800fa42:	4601      	mov	r1, r0
 800fa44:	4648      	mov	r0, r9
 800fa46:	f000 fcf9 	bl	801043c <__mcmp>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	4631      	mov	r1, r6
 800fa4e:	4658      	mov	r0, fp
 800fa50:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa52:	f000 fab9 	bl	800ffc8 <_Bfree>
 800fa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa5a:	9e07      	ldr	r6, [sp, #28]
 800fa5c:	ea43 0102 	orr.w	r1, r3, r2
 800fa60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa62:	4319      	orrs	r1, r3
 800fa64:	d110      	bne.n	800fa88 <_dtoa_r+0xa20>
 800fa66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa6a:	d029      	beq.n	800fac0 <_dtoa_r+0xa58>
 800fa6c:	9b08      	ldr	r3, [sp, #32]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	dd02      	ble.n	800fa78 <_dtoa_r+0xa10>
 800fa72:	9b02      	ldr	r3, [sp, #8]
 800fa74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fa78:	9b00      	ldr	r3, [sp, #0]
 800fa7a:	f883 8000 	strb.w	r8, [r3]
 800fa7e:	e63f      	b.n	800f700 <_dtoa_r+0x698>
 800fa80:	4628      	mov	r0, r5
 800fa82:	e7bb      	b.n	800f9fc <_dtoa_r+0x994>
 800fa84:	2201      	movs	r2, #1
 800fa86:	e7e1      	b.n	800fa4c <_dtoa_r+0x9e4>
 800fa88:	9b08      	ldr	r3, [sp, #32]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	db04      	blt.n	800fa98 <_dtoa_r+0xa30>
 800fa8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa90:	430b      	orrs	r3, r1
 800fa92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa94:	430b      	orrs	r3, r1
 800fa96:	d120      	bne.n	800fada <_dtoa_r+0xa72>
 800fa98:	2a00      	cmp	r2, #0
 800fa9a:	dded      	ble.n	800fa78 <_dtoa_r+0xa10>
 800fa9c:	4649      	mov	r1, r9
 800fa9e:	2201      	movs	r2, #1
 800faa0:	4658      	mov	r0, fp
 800faa2:	f000 fc5f 	bl	8010364 <__lshift>
 800faa6:	4621      	mov	r1, r4
 800faa8:	4681      	mov	r9, r0
 800faaa:	f000 fcc7 	bl	801043c <__mcmp>
 800faae:	2800      	cmp	r0, #0
 800fab0:	dc03      	bgt.n	800faba <_dtoa_r+0xa52>
 800fab2:	d1e1      	bne.n	800fa78 <_dtoa_r+0xa10>
 800fab4:	f018 0f01 	tst.w	r8, #1
 800fab8:	d0de      	beq.n	800fa78 <_dtoa_r+0xa10>
 800faba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fabe:	d1d8      	bne.n	800fa72 <_dtoa_r+0xa0a>
 800fac0:	9a00      	ldr	r2, [sp, #0]
 800fac2:	2339      	movs	r3, #57	@ 0x39
 800fac4:	7013      	strb	r3, [r2, #0]
 800fac6:	4633      	mov	r3, r6
 800fac8:	461e      	mov	r6, r3
 800faca:	3b01      	subs	r3, #1
 800facc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fad0:	2a39      	cmp	r2, #57	@ 0x39
 800fad2:	d052      	beq.n	800fb7a <_dtoa_r+0xb12>
 800fad4:	3201      	adds	r2, #1
 800fad6:	701a      	strb	r2, [r3, #0]
 800fad8:	e612      	b.n	800f700 <_dtoa_r+0x698>
 800fada:	2a00      	cmp	r2, #0
 800fadc:	dd07      	ble.n	800faee <_dtoa_r+0xa86>
 800fade:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fae2:	d0ed      	beq.n	800fac0 <_dtoa_r+0xa58>
 800fae4:	9a00      	ldr	r2, [sp, #0]
 800fae6:	f108 0301 	add.w	r3, r8, #1
 800faea:	7013      	strb	r3, [r2, #0]
 800faec:	e608      	b.n	800f700 <_dtoa_r+0x698>
 800faee:	9b07      	ldr	r3, [sp, #28]
 800faf0:	9a07      	ldr	r2, [sp, #28]
 800faf2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800faf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d028      	beq.n	800fb4e <_dtoa_r+0xae6>
 800fafc:	4649      	mov	r1, r9
 800fafe:	2300      	movs	r3, #0
 800fb00:	220a      	movs	r2, #10
 800fb02:	4658      	mov	r0, fp
 800fb04:	f000 fa82 	bl	801000c <__multadd>
 800fb08:	42af      	cmp	r7, r5
 800fb0a:	4681      	mov	r9, r0
 800fb0c:	f04f 0300 	mov.w	r3, #0
 800fb10:	f04f 020a 	mov.w	r2, #10
 800fb14:	4639      	mov	r1, r7
 800fb16:	4658      	mov	r0, fp
 800fb18:	d107      	bne.n	800fb2a <_dtoa_r+0xac2>
 800fb1a:	f000 fa77 	bl	801000c <__multadd>
 800fb1e:	4607      	mov	r7, r0
 800fb20:	4605      	mov	r5, r0
 800fb22:	9b07      	ldr	r3, [sp, #28]
 800fb24:	3301      	adds	r3, #1
 800fb26:	9307      	str	r3, [sp, #28]
 800fb28:	e774      	b.n	800fa14 <_dtoa_r+0x9ac>
 800fb2a:	f000 fa6f 	bl	801000c <__multadd>
 800fb2e:	4629      	mov	r1, r5
 800fb30:	4607      	mov	r7, r0
 800fb32:	2300      	movs	r3, #0
 800fb34:	220a      	movs	r2, #10
 800fb36:	4658      	mov	r0, fp
 800fb38:	f000 fa68 	bl	801000c <__multadd>
 800fb3c:	4605      	mov	r5, r0
 800fb3e:	e7f0      	b.n	800fb22 <_dtoa_r+0xaba>
 800fb40:	9b00      	ldr	r3, [sp, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	bfcc      	ite	gt
 800fb46:	461e      	movgt	r6, r3
 800fb48:	2601      	movle	r6, #1
 800fb4a:	4456      	add	r6, sl
 800fb4c:	2700      	movs	r7, #0
 800fb4e:	4649      	mov	r1, r9
 800fb50:	2201      	movs	r2, #1
 800fb52:	4658      	mov	r0, fp
 800fb54:	f000 fc06 	bl	8010364 <__lshift>
 800fb58:	4621      	mov	r1, r4
 800fb5a:	4681      	mov	r9, r0
 800fb5c:	f000 fc6e 	bl	801043c <__mcmp>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	dcb0      	bgt.n	800fac6 <_dtoa_r+0xa5e>
 800fb64:	d102      	bne.n	800fb6c <_dtoa_r+0xb04>
 800fb66:	f018 0f01 	tst.w	r8, #1
 800fb6a:	d1ac      	bne.n	800fac6 <_dtoa_r+0xa5e>
 800fb6c:	4633      	mov	r3, r6
 800fb6e:	461e      	mov	r6, r3
 800fb70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb74:	2a30      	cmp	r2, #48	@ 0x30
 800fb76:	d0fa      	beq.n	800fb6e <_dtoa_r+0xb06>
 800fb78:	e5c2      	b.n	800f700 <_dtoa_r+0x698>
 800fb7a:	459a      	cmp	sl, r3
 800fb7c:	d1a4      	bne.n	800fac8 <_dtoa_r+0xa60>
 800fb7e:	9b04      	ldr	r3, [sp, #16]
 800fb80:	3301      	adds	r3, #1
 800fb82:	9304      	str	r3, [sp, #16]
 800fb84:	2331      	movs	r3, #49	@ 0x31
 800fb86:	f88a 3000 	strb.w	r3, [sl]
 800fb8a:	e5b9      	b.n	800f700 <_dtoa_r+0x698>
 800fb8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fbec <_dtoa_r+0xb84>
 800fb92:	b11b      	cbz	r3, 800fb9c <_dtoa_r+0xb34>
 800fb94:	f10a 0308 	add.w	r3, sl, #8
 800fb98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb9a:	6013      	str	r3, [r2, #0]
 800fb9c:	4650      	mov	r0, sl
 800fb9e:	b019      	add	sp, #100	@ 0x64
 800fba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	f77f ae37 	ble.w	800f81a <_dtoa_r+0x7b2>
 800fbac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbae:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbb0:	2001      	movs	r0, #1
 800fbb2:	e655      	b.n	800f860 <_dtoa_r+0x7f8>
 800fbb4:	9b00      	ldr	r3, [sp, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	f77f aed6 	ble.w	800f968 <_dtoa_r+0x900>
 800fbbc:	4656      	mov	r6, sl
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4648      	mov	r0, r9
 800fbc2:	f7ff f9c8 	bl	800ef56 <quorem>
 800fbc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fbca:	f806 8b01 	strb.w	r8, [r6], #1
 800fbce:	9b00      	ldr	r3, [sp, #0]
 800fbd0:	eba6 020a 	sub.w	r2, r6, sl
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	ddb3      	ble.n	800fb40 <_dtoa_r+0xad8>
 800fbd8:	4649      	mov	r1, r9
 800fbda:	2300      	movs	r3, #0
 800fbdc:	220a      	movs	r2, #10
 800fbde:	4658      	mov	r0, fp
 800fbe0:	f000 fa14 	bl	801000c <__multadd>
 800fbe4:	4681      	mov	r9, r0
 800fbe6:	e7ea      	b.n	800fbbe <_dtoa_r+0xb56>
 800fbe8:	080120b0 	.word	0x080120b0
 800fbec:	08012034 	.word	0x08012034

0800fbf0 <_free_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	2900      	cmp	r1, #0
 800fbf6:	d041      	beq.n	800fc7c <_free_r+0x8c>
 800fbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbfc:	1f0c      	subs	r4, r1, #4
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	bfb8      	it	lt
 800fc02:	18e4      	addlt	r4, r4, r3
 800fc04:	f000 f994 	bl	800ff30 <__malloc_lock>
 800fc08:	4a1d      	ldr	r2, [pc, #116]	@ (800fc80 <_free_r+0x90>)
 800fc0a:	6813      	ldr	r3, [r2, #0]
 800fc0c:	b933      	cbnz	r3, 800fc1c <_free_r+0x2c>
 800fc0e:	6063      	str	r3, [r4, #4]
 800fc10:	6014      	str	r4, [r2, #0]
 800fc12:	4628      	mov	r0, r5
 800fc14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc18:	f000 b990 	b.w	800ff3c <__malloc_unlock>
 800fc1c:	42a3      	cmp	r3, r4
 800fc1e:	d908      	bls.n	800fc32 <_free_r+0x42>
 800fc20:	6820      	ldr	r0, [r4, #0]
 800fc22:	1821      	adds	r1, r4, r0
 800fc24:	428b      	cmp	r3, r1
 800fc26:	bf01      	itttt	eq
 800fc28:	6819      	ldreq	r1, [r3, #0]
 800fc2a:	685b      	ldreq	r3, [r3, #4]
 800fc2c:	1809      	addeq	r1, r1, r0
 800fc2e:	6021      	streq	r1, [r4, #0]
 800fc30:	e7ed      	b.n	800fc0e <_free_r+0x1e>
 800fc32:	461a      	mov	r2, r3
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	b10b      	cbz	r3, 800fc3c <_free_r+0x4c>
 800fc38:	42a3      	cmp	r3, r4
 800fc3a:	d9fa      	bls.n	800fc32 <_free_r+0x42>
 800fc3c:	6811      	ldr	r1, [r2, #0]
 800fc3e:	1850      	adds	r0, r2, r1
 800fc40:	42a0      	cmp	r0, r4
 800fc42:	d10b      	bne.n	800fc5c <_free_r+0x6c>
 800fc44:	6820      	ldr	r0, [r4, #0]
 800fc46:	4401      	add	r1, r0
 800fc48:	1850      	adds	r0, r2, r1
 800fc4a:	4283      	cmp	r3, r0
 800fc4c:	6011      	str	r1, [r2, #0]
 800fc4e:	d1e0      	bne.n	800fc12 <_free_r+0x22>
 800fc50:	6818      	ldr	r0, [r3, #0]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	6053      	str	r3, [r2, #4]
 800fc56:	4408      	add	r0, r1
 800fc58:	6010      	str	r0, [r2, #0]
 800fc5a:	e7da      	b.n	800fc12 <_free_r+0x22>
 800fc5c:	d902      	bls.n	800fc64 <_free_r+0x74>
 800fc5e:	230c      	movs	r3, #12
 800fc60:	602b      	str	r3, [r5, #0]
 800fc62:	e7d6      	b.n	800fc12 <_free_r+0x22>
 800fc64:	6820      	ldr	r0, [r4, #0]
 800fc66:	1821      	adds	r1, r4, r0
 800fc68:	428b      	cmp	r3, r1
 800fc6a:	bf04      	itt	eq
 800fc6c:	6819      	ldreq	r1, [r3, #0]
 800fc6e:	685b      	ldreq	r3, [r3, #4]
 800fc70:	6063      	str	r3, [r4, #4]
 800fc72:	bf04      	itt	eq
 800fc74:	1809      	addeq	r1, r1, r0
 800fc76:	6021      	streq	r1, [r4, #0]
 800fc78:	6054      	str	r4, [r2, #4]
 800fc7a:	e7ca      	b.n	800fc12 <_free_r+0x22>
 800fc7c:	bd38      	pop	{r3, r4, r5, pc}
 800fc7e:	bf00      	nop
 800fc80:	200056fc 	.word	0x200056fc

0800fc84 <malloc>:
 800fc84:	4b02      	ldr	r3, [pc, #8]	@ (800fc90 <malloc+0xc>)
 800fc86:	4601      	mov	r1, r0
 800fc88:	6818      	ldr	r0, [r3, #0]
 800fc8a:	f000 b825 	b.w	800fcd8 <_malloc_r>
 800fc8e:	bf00      	nop
 800fc90:	2000007c 	.word	0x2000007c

0800fc94 <sbrk_aligned>:
 800fc94:	b570      	push	{r4, r5, r6, lr}
 800fc96:	4e0f      	ldr	r6, [pc, #60]	@ (800fcd4 <sbrk_aligned+0x40>)
 800fc98:	460c      	mov	r4, r1
 800fc9a:	6831      	ldr	r1, [r6, #0]
 800fc9c:	4605      	mov	r5, r0
 800fc9e:	b911      	cbnz	r1, 800fca6 <sbrk_aligned+0x12>
 800fca0:	f000 fd4c 	bl	801073c <_sbrk_r>
 800fca4:	6030      	str	r0, [r6, #0]
 800fca6:	4621      	mov	r1, r4
 800fca8:	4628      	mov	r0, r5
 800fcaa:	f000 fd47 	bl	801073c <_sbrk_r>
 800fcae:	1c43      	adds	r3, r0, #1
 800fcb0:	d103      	bne.n	800fcba <sbrk_aligned+0x26>
 800fcb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	bd70      	pop	{r4, r5, r6, pc}
 800fcba:	1cc4      	adds	r4, r0, #3
 800fcbc:	f024 0403 	bic.w	r4, r4, #3
 800fcc0:	42a0      	cmp	r0, r4
 800fcc2:	d0f8      	beq.n	800fcb6 <sbrk_aligned+0x22>
 800fcc4:	1a21      	subs	r1, r4, r0
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f000 fd38 	bl	801073c <_sbrk_r>
 800fccc:	3001      	adds	r0, #1
 800fcce:	d1f2      	bne.n	800fcb6 <sbrk_aligned+0x22>
 800fcd0:	e7ef      	b.n	800fcb2 <sbrk_aligned+0x1e>
 800fcd2:	bf00      	nop
 800fcd4:	200056f8 	.word	0x200056f8

0800fcd8 <_malloc_r>:
 800fcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcdc:	1ccd      	adds	r5, r1, #3
 800fcde:	f025 0503 	bic.w	r5, r5, #3
 800fce2:	3508      	adds	r5, #8
 800fce4:	2d0c      	cmp	r5, #12
 800fce6:	bf38      	it	cc
 800fce8:	250c      	movcc	r5, #12
 800fcea:	2d00      	cmp	r5, #0
 800fcec:	4606      	mov	r6, r0
 800fcee:	db01      	blt.n	800fcf4 <_malloc_r+0x1c>
 800fcf0:	42a9      	cmp	r1, r5
 800fcf2:	d904      	bls.n	800fcfe <_malloc_r+0x26>
 800fcf4:	230c      	movs	r3, #12
 800fcf6:	6033      	str	r3, [r6, #0]
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fdd4 <_malloc_r+0xfc>
 800fd02:	f000 f915 	bl	800ff30 <__malloc_lock>
 800fd06:	f8d8 3000 	ldr.w	r3, [r8]
 800fd0a:	461c      	mov	r4, r3
 800fd0c:	bb44      	cbnz	r4, 800fd60 <_malloc_r+0x88>
 800fd0e:	4629      	mov	r1, r5
 800fd10:	4630      	mov	r0, r6
 800fd12:	f7ff ffbf 	bl	800fc94 <sbrk_aligned>
 800fd16:	1c43      	adds	r3, r0, #1
 800fd18:	4604      	mov	r4, r0
 800fd1a:	d158      	bne.n	800fdce <_malloc_r+0xf6>
 800fd1c:	f8d8 4000 	ldr.w	r4, [r8]
 800fd20:	4627      	mov	r7, r4
 800fd22:	2f00      	cmp	r7, #0
 800fd24:	d143      	bne.n	800fdae <_malloc_r+0xd6>
 800fd26:	2c00      	cmp	r4, #0
 800fd28:	d04b      	beq.n	800fdc2 <_malloc_r+0xea>
 800fd2a:	6823      	ldr	r3, [r4, #0]
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	4630      	mov	r0, r6
 800fd30:	eb04 0903 	add.w	r9, r4, r3
 800fd34:	f000 fd02 	bl	801073c <_sbrk_r>
 800fd38:	4581      	cmp	r9, r0
 800fd3a:	d142      	bne.n	800fdc2 <_malloc_r+0xea>
 800fd3c:	6821      	ldr	r1, [r4, #0]
 800fd3e:	1a6d      	subs	r5, r5, r1
 800fd40:	4629      	mov	r1, r5
 800fd42:	4630      	mov	r0, r6
 800fd44:	f7ff ffa6 	bl	800fc94 <sbrk_aligned>
 800fd48:	3001      	adds	r0, #1
 800fd4a:	d03a      	beq.n	800fdc2 <_malloc_r+0xea>
 800fd4c:	6823      	ldr	r3, [r4, #0]
 800fd4e:	442b      	add	r3, r5
 800fd50:	6023      	str	r3, [r4, #0]
 800fd52:	f8d8 3000 	ldr.w	r3, [r8]
 800fd56:	685a      	ldr	r2, [r3, #4]
 800fd58:	bb62      	cbnz	r2, 800fdb4 <_malloc_r+0xdc>
 800fd5a:	f8c8 7000 	str.w	r7, [r8]
 800fd5e:	e00f      	b.n	800fd80 <_malloc_r+0xa8>
 800fd60:	6822      	ldr	r2, [r4, #0]
 800fd62:	1b52      	subs	r2, r2, r5
 800fd64:	d420      	bmi.n	800fda8 <_malloc_r+0xd0>
 800fd66:	2a0b      	cmp	r2, #11
 800fd68:	d917      	bls.n	800fd9a <_malloc_r+0xc2>
 800fd6a:	1961      	adds	r1, r4, r5
 800fd6c:	42a3      	cmp	r3, r4
 800fd6e:	6025      	str	r5, [r4, #0]
 800fd70:	bf18      	it	ne
 800fd72:	6059      	strne	r1, [r3, #4]
 800fd74:	6863      	ldr	r3, [r4, #4]
 800fd76:	bf08      	it	eq
 800fd78:	f8c8 1000 	streq.w	r1, [r8]
 800fd7c:	5162      	str	r2, [r4, r5]
 800fd7e:	604b      	str	r3, [r1, #4]
 800fd80:	4630      	mov	r0, r6
 800fd82:	f000 f8db 	bl	800ff3c <__malloc_unlock>
 800fd86:	f104 000b 	add.w	r0, r4, #11
 800fd8a:	1d23      	adds	r3, r4, #4
 800fd8c:	f020 0007 	bic.w	r0, r0, #7
 800fd90:	1ac2      	subs	r2, r0, r3
 800fd92:	bf1c      	itt	ne
 800fd94:	1a1b      	subne	r3, r3, r0
 800fd96:	50a3      	strne	r3, [r4, r2]
 800fd98:	e7af      	b.n	800fcfa <_malloc_r+0x22>
 800fd9a:	6862      	ldr	r2, [r4, #4]
 800fd9c:	42a3      	cmp	r3, r4
 800fd9e:	bf0c      	ite	eq
 800fda0:	f8c8 2000 	streq.w	r2, [r8]
 800fda4:	605a      	strne	r2, [r3, #4]
 800fda6:	e7eb      	b.n	800fd80 <_malloc_r+0xa8>
 800fda8:	4623      	mov	r3, r4
 800fdaa:	6864      	ldr	r4, [r4, #4]
 800fdac:	e7ae      	b.n	800fd0c <_malloc_r+0x34>
 800fdae:	463c      	mov	r4, r7
 800fdb0:	687f      	ldr	r7, [r7, #4]
 800fdb2:	e7b6      	b.n	800fd22 <_malloc_r+0x4a>
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	42a3      	cmp	r3, r4
 800fdba:	d1fb      	bne.n	800fdb4 <_malloc_r+0xdc>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	6053      	str	r3, [r2, #4]
 800fdc0:	e7de      	b.n	800fd80 <_malloc_r+0xa8>
 800fdc2:	230c      	movs	r3, #12
 800fdc4:	6033      	str	r3, [r6, #0]
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	f000 f8b8 	bl	800ff3c <__malloc_unlock>
 800fdcc:	e794      	b.n	800fcf8 <_malloc_r+0x20>
 800fdce:	6005      	str	r5, [r0, #0]
 800fdd0:	e7d6      	b.n	800fd80 <_malloc_r+0xa8>
 800fdd2:	bf00      	nop
 800fdd4:	200056fc 	.word	0x200056fc

0800fdd8 <__sflush_r>:
 800fdd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde0:	0716      	lsls	r6, r2, #28
 800fde2:	4605      	mov	r5, r0
 800fde4:	460c      	mov	r4, r1
 800fde6:	d454      	bmi.n	800fe92 <__sflush_r+0xba>
 800fde8:	684b      	ldr	r3, [r1, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	dc02      	bgt.n	800fdf4 <__sflush_r+0x1c>
 800fdee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	dd48      	ble.n	800fe86 <__sflush_r+0xae>
 800fdf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fdf6:	2e00      	cmp	r6, #0
 800fdf8:	d045      	beq.n	800fe86 <__sflush_r+0xae>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fe00:	682f      	ldr	r7, [r5, #0]
 800fe02:	6a21      	ldr	r1, [r4, #32]
 800fe04:	602b      	str	r3, [r5, #0]
 800fe06:	d030      	beq.n	800fe6a <__sflush_r+0x92>
 800fe08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fe0a:	89a3      	ldrh	r3, [r4, #12]
 800fe0c:	0759      	lsls	r1, r3, #29
 800fe0e:	d505      	bpl.n	800fe1c <__sflush_r+0x44>
 800fe10:	6863      	ldr	r3, [r4, #4]
 800fe12:	1ad2      	subs	r2, r2, r3
 800fe14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fe16:	b10b      	cbz	r3, 800fe1c <__sflush_r+0x44>
 800fe18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fe1a:	1ad2      	subs	r2, r2, r3
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe20:	6a21      	ldr	r1, [r4, #32]
 800fe22:	4628      	mov	r0, r5
 800fe24:	47b0      	blx	r6
 800fe26:	1c43      	adds	r3, r0, #1
 800fe28:	89a3      	ldrh	r3, [r4, #12]
 800fe2a:	d106      	bne.n	800fe3a <__sflush_r+0x62>
 800fe2c:	6829      	ldr	r1, [r5, #0]
 800fe2e:	291d      	cmp	r1, #29
 800fe30:	d82b      	bhi.n	800fe8a <__sflush_r+0xb2>
 800fe32:	4a2a      	ldr	r2, [pc, #168]	@ (800fedc <__sflush_r+0x104>)
 800fe34:	410a      	asrs	r2, r1
 800fe36:	07d6      	lsls	r6, r2, #31
 800fe38:	d427      	bmi.n	800fe8a <__sflush_r+0xb2>
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	6062      	str	r2, [r4, #4]
 800fe3e:	04d9      	lsls	r1, r3, #19
 800fe40:	6922      	ldr	r2, [r4, #16]
 800fe42:	6022      	str	r2, [r4, #0]
 800fe44:	d504      	bpl.n	800fe50 <__sflush_r+0x78>
 800fe46:	1c42      	adds	r2, r0, #1
 800fe48:	d101      	bne.n	800fe4e <__sflush_r+0x76>
 800fe4a:	682b      	ldr	r3, [r5, #0]
 800fe4c:	b903      	cbnz	r3, 800fe50 <__sflush_r+0x78>
 800fe4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe52:	602f      	str	r7, [r5, #0]
 800fe54:	b1b9      	cbz	r1, 800fe86 <__sflush_r+0xae>
 800fe56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe5a:	4299      	cmp	r1, r3
 800fe5c:	d002      	beq.n	800fe64 <__sflush_r+0x8c>
 800fe5e:	4628      	mov	r0, r5
 800fe60:	f7ff fec6 	bl	800fbf0 <_free_r>
 800fe64:	2300      	movs	r3, #0
 800fe66:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe68:	e00d      	b.n	800fe86 <__sflush_r+0xae>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	47b0      	blx	r6
 800fe70:	4602      	mov	r2, r0
 800fe72:	1c50      	adds	r0, r2, #1
 800fe74:	d1c9      	bne.n	800fe0a <__sflush_r+0x32>
 800fe76:	682b      	ldr	r3, [r5, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d0c6      	beq.n	800fe0a <__sflush_r+0x32>
 800fe7c:	2b1d      	cmp	r3, #29
 800fe7e:	d001      	beq.n	800fe84 <__sflush_r+0xac>
 800fe80:	2b16      	cmp	r3, #22
 800fe82:	d11e      	bne.n	800fec2 <__sflush_r+0xea>
 800fe84:	602f      	str	r7, [r5, #0]
 800fe86:	2000      	movs	r0, #0
 800fe88:	e022      	b.n	800fed0 <__sflush_r+0xf8>
 800fe8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe8e:	b21b      	sxth	r3, r3
 800fe90:	e01b      	b.n	800feca <__sflush_r+0xf2>
 800fe92:	690f      	ldr	r7, [r1, #16]
 800fe94:	2f00      	cmp	r7, #0
 800fe96:	d0f6      	beq.n	800fe86 <__sflush_r+0xae>
 800fe98:	0793      	lsls	r3, r2, #30
 800fe9a:	680e      	ldr	r6, [r1, #0]
 800fe9c:	bf08      	it	eq
 800fe9e:	694b      	ldreq	r3, [r1, #20]
 800fea0:	600f      	str	r7, [r1, #0]
 800fea2:	bf18      	it	ne
 800fea4:	2300      	movne	r3, #0
 800fea6:	eba6 0807 	sub.w	r8, r6, r7
 800feaa:	608b      	str	r3, [r1, #8]
 800feac:	f1b8 0f00 	cmp.w	r8, #0
 800feb0:	dde9      	ble.n	800fe86 <__sflush_r+0xae>
 800feb2:	6a21      	ldr	r1, [r4, #32]
 800feb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800feb6:	4643      	mov	r3, r8
 800feb8:	463a      	mov	r2, r7
 800feba:	4628      	mov	r0, r5
 800febc:	47b0      	blx	r6
 800febe:	2800      	cmp	r0, #0
 800fec0:	dc08      	bgt.n	800fed4 <__sflush_r+0xfc>
 800fec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800feca:	81a3      	strh	r3, [r4, #12]
 800fecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fed4:	4407      	add	r7, r0
 800fed6:	eba8 0800 	sub.w	r8, r8, r0
 800feda:	e7e7      	b.n	800feac <__sflush_r+0xd4>
 800fedc:	dfbffffe 	.word	0xdfbffffe

0800fee0 <_fflush_r>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	690b      	ldr	r3, [r1, #16]
 800fee4:	4605      	mov	r5, r0
 800fee6:	460c      	mov	r4, r1
 800fee8:	b913      	cbnz	r3, 800fef0 <_fflush_r+0x10>
 800feea:	2500      	movs	r5, #0
 800feec:	4628      	mov	r0, r5
 800feee:	bd38      	pop	{r3, r4, r5, pc}
 800fef0:	b118      	cbz	r0, 800fefa <_fflush_r+0x1a>
 800fef2:	6a03      	ldr	r3, [r0, #32]
 800fef4:	b90b      	cbnz	r3, 800fefa <_fflush_r+0x1a>
 800fef6:	f7fe ff5b 	bl	800edb0 <__sinit>
 800fefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d0f3      	beq.n	800feea <_fflush_r+0xa>
 800ff02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ff04:	07d0      	lsls	r0, r2, #31
 800ff06:	d404      	bmi.n	800ff12 <_fflush_r+0x32>
 800ff08:	0599      	lsls	r1, r3, #22
 800ff0a:	d402      	bmi.n	800ff12 <_fflush_r+0x32>
 800ff0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff0e:	f7ff f812 	bl	800ef36 <__retarget_lock_acquire_recursive>
 800ff12:	4628      	mov	r0, r5
 800ff14:	4621      	mov	r1, r4
 800ff16:	f7ff ff5f 	bl	800fdd8 <__sflush_r>
 800ff1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff1c:	07da      	lsls	r2, r3, #31
 800ff1e:	4605      	mov	r5, r0
 800ff20:	d4e4      	bmi.n	800feec <_fflush_r+0xc>
 800ff22:	89a3      	ldrh	r3, [r4, #12]
 800ff24:	059b      	lsls	r3, r3, #22
 800ff26:	d4e1      	bmi.n	800feec <_fflush_r+0xc>
 800ff28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff2a:	f7ff f805 	bl	800ef38 <__retarget_lock_release_recursive>
 800ff2e:	e7dd      	b.n	800feec <_fflush_r+0xc>

0800ff30 <__malloc_lock>:
 800ff30:	4801      	ldr	r0, [pc, #4]	@ (800ff38 <__malloc_lock+0x8>)
 800ff32:	f7ff b800 	b.w	800ef36 <__retarget_lock_acquire_recursive>
 800ff36:	bf00      	nop
 800ff38:	200056f4 	.word	0x200056f4

0800ff3c <__malloc_unlock>:
 800ff3c:	4801      	ldr	r0, [pc, #4]	@ (800ff44 <__malloc_unlock+0x8>)
 800ff3e:	f7fe bffb 	b.w	800ef38 <__retarget_lock_release_recursive>
 800ff42:	bf00      	nop
 800ff44:	200056f4 	.word	0x200056f4

0800ff48 <_Balloc>:
 800ff48:	b570      	push	{r4, r5, r6, lr}
 800ff4a:	69c6      	ldr	r6, [r0, #28]
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	460d      	mov	r5, r1
 800ff50:	b976      	cbnz	r6, 800ff70 <_Balloc+0x28>
 800ff52:	2010      	movs	r0, #16
 800ff54:	f7ff fe96 	bl	800fc84 <malloc>
 800ff58:	4602      	mov	r2, r0
 800ff5a:	61e0      	str	r0, [r4, #28]
 800ff5c:	b920      	cbnz	r0, 800ff68 <_Balloc+0x20>
 800ff5e:	4b18      	ldr	r3, [pc, #96]	@ (800ffc0 <_Balloc+0x78>)
 800ff60:	4818      	ldr	r0, [pc, #96]	@ (800ffc4 <_Balloc+0x7c>)
 800ff62:	216b      	movs	r1, #107	@ 0x6b
 800ff64:	f000 fc0c 	bl	8010780 <__assert_func>
 800ff68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff6c:	6006      	str	r6, [r0, #0]
 800ff6e:	60c6      	str	r6, [r0, #12]
 800ff70:	69e6      	ldr	r6, [r4, #28]
 800ff72:	68f3      	ldr	r3, [r6, #12]
 800ff74:	b183      	cbz	r3, 800ff98 <_Balloc+0x50>
 800ff76:	69e3      	ldr	r3, [r4, #28]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff7e:	b9b8      	cbnz	r0, 800ffb0 <_Balloc+0x68>
 800ff80:	2101      	movs	r1, #1
 800ff82:	fa01 f605 	lsl.w	r6, r1, r5
 800ff86:	1d72      	adds	r2, r6, #5
 800ff88:	0092      	lsls	r2, r2, #2
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f000 fc16 	bl	80107bc <_calloc_r>
 800ff90:	b160      	cbz	r0, 800ffac <_Balloc+0x64>
 800ff92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff96:	e00e      	b.n	800ffb6 <_Balloc+0x6e>
 800ff98:	2221      	movs	r2, #33	@ 0x21
 800ff9a:	2104      	movs	r1, #4
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	f000 fc0d 	bl	80107bc <_calloc_r>
 800ffa2:	69e3      	ldr	r3, [r4, #28]
 800ffa4:	60f0      	str	r0, [r6, #12]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1e4      	bne.n	800ff76 <_Balloc+0x2e>
 800ffac:	2000      	movs	r0, #0
 800ffae:	bd70      	pop	{r4, r5, r6, pc}
 800ffb0:	6802      	ldr	r2, [r0, #0]
 800ffb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ffbc:	e7f7      	b.n	800ffae <_Balloc+0x66>
 800ffbe:	bf00      	nop
 800ffc0:	08012041 	.word	0x08012041
 800ffc4:	080120c1 	.word	0x080120c1

0800ffc8 <_Bfree>:
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	69c6      	ldr	r6, [r0, #28]
 800ffcc:	4605      	mov	r5, r0
 800ffce:	460c      	mov	r4, r1
 800ffd0:	b976      	cbnz	r6, 800fff0 <_Bfree+0x28>
 800ffd2:	2010      	movs	r0, #16
 800ffd4:	f7ff fe56 	bl	800fc84 <malloc>
 800ffd8:	4602      	mov	r2, r0
 800ffda:	61e8      	str	r0, [r5, #28]
 800ffdc:	b920      	cbnz	r0, 800ffe8 <_Bfree+0x20>
 800ffde:	4b09      	ldr	r3, [pc, #36]	@ (8010004 <_Bfree+0x3c>)
 800ffe0:	4809      	ldr	r0, [pc, #36]	@ (8010008 <_Bfree+0x40>)
 800ffe2:	218f      	movs	r1, #143	@ 0x8f
 800ffe4:	f000 fbcc 	bl	8010780 <__assert_func>
 800ffe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffec:	6006      	str	r6, [r0, #0]
 800ffee:	60c6      	str	r6, [r0, #12]
 800fff0:	b13c      	cbz	r4, 8010002 <_Bfree+0x3a>
 800fff2:	69eb      	ldr	r3, [r5, #28]
 800fff4:	6862      	ldr	r2, [r4, #4]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fffc:	6021      	str	r1, [r4, #0]
 800fffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010002:	bd70      	pop	{r4, r5, r6, pc}
 8010004:	08012041 	.word	0x08012041
 8010008:	080120c1 	.word	0x080120c1

0801000c <__multadd>:
 801000c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010010:	690d      	ldr	r5, [r1, #16]
 8010012:	4607      	mov	r7, r0
 8010014:	460c      	mov	r4, r1
 8010016:	461e      	mov	r6, r3
 8010018:	f101 0c14 	add.w	ip, r1, #20
 801001c:	2000      	movs	r0, #0
 801001e:	f8dc 3000 	ldr.w	r3, [ip]
 8010022:	b299      	uxth	r1, r3
 8010024:	fb02 6101 	mla	r1, r2, r1, r6
 8010028:	0c1e      	lsrs	r6, r3, #16
 801002a:	0c0b      	lsrs	r3, r1, #16
 801002c:	fb02 3306 	mla	r3, r2, r6, r3
 8010030:	b289      	uxth	r1, r1
 8010032:	3001      	adds	r0, #1
 8010034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010038:	4285      	cmp	r5, r0
 801003a:	f84c 1b04 	str.w	r1, [ip], #4
 801003e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010042:	dcec      	bgt.n	801001e <__multadd+0x12>
 8010044:	b30e      	cbz	r6, 801008a <__multadd+0x7e>
 8010046:	68a3      	ldr	r3, [r4, #8]
 8010048:	42ab      	cmp	r3, r5
 801004a:	dc19      	bgt.n	8010080 <__multadd+0x74>
 801004c:	6861      	ldr	r1, [r4, #4]
 801004e:	4638      	mov	r0, r7
 8010050:	3101      	adds	r1, #1
 8010052:	f7ff ff79 	bl	800ff48 <_Balloc>
 8010056:	4680      	mov	r8, r0
 8010058:	b928      	cbnz	r0, 8010066 <__multadd+0x5a>
 801005a:	4602      	mov	r2, r0
 801005c:	4b0c      	ldr	r3, [pc, #48]	@ (8010090 <__multadd+0x84>)
 801005e:	480d      	ldr	r0, [pc, #52]	@ (8010094 <__multadd+0x88>)
 8010060:	21ba      	movs	r1, #186	@ 0xba
 8010062:	f000 fb8d 	bl	8010780 <__assert_func>
 8010066:	6922      	ldr	r2, [r4, #16]
 8010068:	3202      	adds	r2, #2
 801006a:	f104 010c 	add.w	r1, r4, #12
 801006e:	0092      	lsls	r2, r2, #2
 8010070:	300c      	adds	r0, #12
 8010072:	f7fe ff62 	bl	800ef3a <memcpy>
 8010076:	4621      	mov	r1, r4
 8010078:	4638      	mov	r0, r7
 801007a:	f7ff ffa5 	bl	800ffc8 <_Bfree>
 801007e:	4644      	mov	r4, r8
 8010080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010084:	3501      	adds	r5, #1
 8010086:	615e      	str	r6, [r3, #20]
 8010088:	6125      	str	r5, [r4, #16]
 801008a:	4620      	mov	r0, r4
 801008c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010090:	080120b0 	.word	0x080120b0
 8010094:	080120c1 	.word	0x080120c1

08010098 <__hi0bits>:
 8010098:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801009c:	4603      	mov	r3, r0
 801009e:	bf36      	itet	cc
 80100a0:	0403      	lslcc	r3, r0, #16
 80100a2:	2000      	movcs	r0, #0
 80100a4:	2010      	movcc	r0, #16
 80100a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80100aa:	bf3c      	itt	cc
 80100ac:	021b      	lslcc	r3, r3, #8
 80100ae:	3008      	addcc	r0, #8
 80100b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80100b4:	bf3c      	itt	cc
 80100b6:	011b      	lslcc	r3, r3, #4
 80100b8:	3004      	addcc	r0, #4
 80100ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100be:	bf3c      	itt	cc
 80100c0:	009b      	lslcc	r3, r3, #2
 80100c2:	3002      	addcc	r0, #2
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	db05      	blt.n	80100d4 <__hi0bits+0x3c>
 80100c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80100cc:	f100 0001 	add.w	r0, r0, #1
 80100d0:	bf08      	it	eq
 80100d2:	2020      	moveq	r0, #32
 80100d4:	4770      	bx	lr

080100d6 <__lo0bits>:
 80100d6:	6803      	ldr	r3, [r0, #0]
 80100d8:	4602      	mov	r2, r0
 80100da:	f013 0007 	ands.w	r0, r3, #7
 80100de:	d00b      	beq.n	80100f8 <__lo0bits+0x22>
 80100e0:	07d9      	lsls	r1, r3, #31
 80100e2:	d421      	bmi.n	8010128 <__lo0bits+0x52>
 80100e4:	0798      	lsls	r0, r3, #30
 80100e6:	bf49      	itett	mi
 80100e8:	085b      	lsrmi	r3, r3, #1
 80100ea:	089b      	lsrpl	r3, r3, #2
 80100ec:	2001      	movmi	r0, #1
 80100ee:	6013      	strmi	r3, [r2, #0]
 80100f0:	bf5c      	itt	pl
 80100f2:	6013      	strpl	r3, [r2, #0]
 80100f4:	2002      	movpl	r0, #2
 80100f6:	4770      	bx	lr
 80100f8:	b299      	uxth	r1, r3
 80100fa:	b909      	cbnz	r1, 8010100 <__lo0bits+0x2a>
 80100fc:	0c1b      	lsrs	r3, r3, #16
 80100fe:	2010      	movs	r0, #16
 8010100:	b2d9      	uxtb	r1, r3
 8010102:	b909      	cbnz	r1, 8010108 <__lo0bits+0x32>
 8010104:	3008      	adds	r0, #8
 8010106:	0a1b      	lsrs	r3, r3, #8
 8010108:	0719      	lsls	r1, r3, #28
 801010a:	bf04      	itt	eq
 801010c:	091b      	lsreq	r3, r3, #4
 801010e:	3004      	addeq	r0, #4
 8010110:	0799      	lsls	r1, r3, #30
 8010112:	bf04      	itt	eq
 8010114:	089b      	lsreq	r3, r3, #2
 8010116:	3002      	addeq	r0, #2
 8010118:	07d9      	lsls	r1, r3, #31
 801011a:	d403      	bmi.n	8010124 <__lo0bits+0x4e>
 801011c:	085b      	lsrs	r3, r3, #1
 801011e:	f100 0001 	add.w	r0, r0, #1
 8010122:	d003      	beq.n	801012c <__lo0bits+0x56>
 8010124:	6013      	str	r3, [r2, #0]
 8010126:	4770      	bx	lr
 8010128:	2000      	movs	r0, #0
 801012a:	4770      	bx	lr
 801012c:	2020      	movs	r0, #32
 801012e:	4770      	bx	lr

08010130 <__i2b>:
 8010130:	b510      	push	{r4, lr}
 8010132:	460c      	mov	r4, r1
 8010134:	2101      	movs	r1, #1
 8010136:	f7ff ff07 	bl	800ff48 <_Balloc>
 801013a:	4602      	mov	r2, r0
 801013c:	b928      	cbnz	r0, 801014a <__i2b+0x1a>
 801013e:	4b05      	ldr	r3, [pc, #20]	@ (8010154 <__i2b+0x24>)
 8010140:	4805      	ldr	r0, [pc, #20]	@ (8010158 <__i2b+0x28>)
 8010142:	f240 1145 	movw	r1, #325	@ 0x145
 8010146:	f000 fb1b 	bl	8010780 <__assert_func>
 801014a:	2301      	movs	r3, #1
 801014c:	6144      	str	r4, [r0, #20]
 801014e:	6103      	str	r3, [r0, #16]
 8010150:	bd10      	pop	{r4, pc}
 8010152:	bf00      	nop
 8010154:	080120b0 	.word	0x080120b0
 8010158:	080120c1 	.word	0x080120c1

0801015c <__multiply>:
 801015c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010160:	4614      	mov	r4, r2
 8010162:	690a      	ldr	r2, [r1, #16]
 8010164:	6923      	ldr	r3, [r4, #16]
 8010166:	429a      	cmp	r2, r3
 8010168:	bfa8      	it	ge
 801016a:	4623      	movge	r3, r4
 801016c:	460f      	mov	r7, r1
 801016e:	bfa4      	itt	ge
 8010170:	460c      	movge	r4, r1
 8010172:	461f      	movge	r7, r3
 8010174:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010178:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801017c:	68a3      	ldr	r3, [r4, #8]
 801017e:	6861      	ldr	r1, [r4, #4]
 8010180:	eb0a 0609 	add.w	r6, sl, r9
 8010184:	42b3      	cmp	r3, r6
 8010186:	b085      	sub	sp, #20
 8010188:	bfb8      	it	lt
 801018a:	3101      	addlt	r1, #1
 801018c:	f7ff fedc 	bl	800ff48 <_Balloc>
 8010190:	b930      	cbnz	r0, 80101a0 <__multiply+0x44>
 8010192:	4602      	mov	r2, r0
 8010194:	4b44      	ldr	r3, [pc, #272]	@ (80102a8 <__multiply+0x14c>)
 8010196:	4845      	ldr	r0, [pc, #276]	@ (80102ac <__multiply+0x150>)
 8010198:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801019c:	f000 faf0 	bl	8010780 <__assert_func>
 80101a0:	f100 0514 	add.w	r5, r0, #20
 80101a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80101a8:	462b      	mov	r3, r5
 80101aa:	2200      	movs	r2, #0
 80101ac:	4543      	cmp	r3, r8
 80101ae:	d321      	bcc.n	80101f4 <__multiply+0x98>
 80101b0:	f107 0114 	add.w	r1, r7, #20
 80101b4:	f104 0214 	add.w	r2, r4, #20
 80101b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80101bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80101c0:	9302      	str	r3, [sp, #8]
 80101c2:	1b13      	subs	r3, r2, r4
 80101c4:	3b15      	subs	r3, #21
 80101c6:	f023 0303 	bic.w	r3, r3, #3
 80101ca:	3304      	adds	r3, #4
 80101cc:	f104 0715 	add.w	r7, r4, #21
 80101d0:	42ba      	cmp	r2, r7
 80101d2:	bf38      	it	cc
 80101d4:	2304      	movcc	r3, #4
 80101d6:	9301      	str	r3, [sp, #4]
 80101d8:	9b02      	ldr	r3, [sp, #8]
 80101da:	9103      	str	r1, [sp, #12]
 80101dc:	428b      	cmp	r3, r1
 80101de:	d80c      	bhi.n	80101fa <__multiply+0x9e>
 80101e0:	2e00      	cmp	r6, #0
 80101e2:	dd03      	ble.n	80101ec <__multiply+0x90>
 80101e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d05b      	beq.n	80102a4 <__multiply+0x148>
 80101ec:	6106      	str	r6, [r0, #16]
 80101ee:	b005      	add	sp, #20
 80101f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f4:	f843 2b04 	str.w	r2, [r3], #4
 80101f8:	e7d8      	b.n	80101ac <__multiply+0x50>
 80101fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80101fe:	f1ba 0f00 	cmp.w	sl, #0
 8010202:	d024      	beq.n	801024e <__multiply+0xf2>
 8010204:	f104 0e14 	add.w	lr, r4, #20
 8010208:	46a9      	mov	r9, r5
 801020a:	f04f 0c00 	mov.w	ip, #0
 801020e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010212:	f8d9 3000 	ldr.w	r3, [r9]
 8010216:	fa1f fb87 	uxth.w	fp, r7
 801021a:	b29b      	uxth	r3, r3
 801021c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010220:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010224:	f8d9 7000 	ldr.w	r7, [r9]
 8010228:	4463      	add	r3, ip
 801022a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801022e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010232:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010236:	b29b      	uxth	r3, r3
 8010238:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801023c:	4572      	cmp	r2, lr
 801023e:	f849 3b04 	str.w	r3, [r9], #4
 8010242:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010246:	d8e2      	bhi.n	801020e <__multiply+0xb2>
 8010248:	9b01      	ldr	r3, [sp, #4]
 801024a:	f845 c003 	str.w	ip, [r5, r3]
 801024e:	9b03      	ldr	r3, [sp, #12]
 8010250:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010254:	3104      	adds	r1, #4
 8010256:	f1b9 0f00 	cmp.w	r9, #0
 801025a:	d021      	beq.n	80102a0 <__multiply+0x144>
 801025c:	682b      	ldr	r3, [r5, #0]
 801025e:	f104 0c14 	add.w	ip, r4, #20
 8010262:	46ae      	mov	lr, r5
 8010264:	f04f 0a00 	mov.w	sl, #0
 8010268:	f8bc b000 	ldrh.w	fp, [ip]
 801026c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010270:	fb09 770b 	mla	r7, r9, fp, r7
 8010274:	4457      	add	r7, sl
 8010276:	b29b      	uxth	r3, r3
 8010278:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801027c:	f84e 3b04 	str.w	r3, [lr], #4
 8010280:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010288:	f8be 3000 	ldrh.w	r3, [lr]
 801028c:	fb09 330a 	mla	r3, r9, sl, r3
 8010290:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010294:	4562      	cmp	r2, ip
 8010296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801029a:	d8e5      	bhi.n	8010268 <__multiply+0x10c>
 801029c:	9f01      	ldr	r7, [sp, #4]
 801029e:	51eb      	str	r3, [r5, r7]
 80102a0:	3504      	adds	r5, #4
 80102a2:	e799      	b.n	80101d8 <__multiply+0x7c>
 80102a4:	3e01      	subs	r6, #1
 80102a6:	e79b      	b.n	80101e0 <__multiply+0x84>
 80102a8:	080120b0 	.word	0x080120b0
 80102ac:	080120c1 	.word	0x080120c1

080102b0 <__pow5mult>:
 80102b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102b4:	4615      	mov	r5, r2
 80102b6:	f012 0203 	ands.w	r2, r2, #3
 80102ba:	4607      	mov	r7, r0
 80102bc:	460e      	mov	r6, r1
 80102be:	d007      	beq.n	80102d0 <__pow5mult+0x20>
 80102c0:	4c25      	ldr	r4, [pc, #148]	@ (8010358 <__pow5mult+0xa8>)
 80102c2:	3a01      	subs	r2, #1
 80102c4:	2300      	movs	r3, #0
 80102c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80102ca:	f7ff fe9f 	bl	801000c <__multadd>
 80102ce:	4606      	mov	r6, r0
 80102d0:	10ad      	asrs	r5, r5, #2
 80102d2:	d03d      	beq.n	8010350 <__pow5mult+0xa0>
 80102d4:	69fc      	ldr	r4, [r7, #28]
 80102d6:	b97c      	cbnz	r4, 80102f8 <__pow5mult+0x48>
 80102d8:	2010      	movs	r0, #16
 80102da:	f7ff fcd3 	bl	800fc84 <malloc>
 80102de:	4602      	mov	r2, r0
 80102e0:	61f8      	str	r0, [r7, #28]
 80102e2:	b928      	cbnz	r0, 80102f0 <__pow5mult+0x40>
 80102e4:	4b1d      	ldr	r3, [pc, #116]	@ (801035c <__pow5mult+0xac>)
 80102e6:	481e      	ldr	r0, [pc, #120]	@ (8010360 <__pow5mult+0xb0>)
 80102e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80102ec:	f000 fa48 	bl	8010780 <__assert_func>
 80102f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80102f4:	6004      	str	r4, [r0, #0]
 80102f6:	60c4      	str	r4, [r0, #12]
 80102f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80102fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010300:	b94c      	cbnz	r4, 8010316 <__pow5mult+0x66>
 8010302:	f240 2171 	movw	r1, #625	@ 0x271
 8010306:	4638      	mov	r0, r7
 8010308:	f7ff ff12 	bl	8010130 <__i2b>
 801030c:	2300      	movs	r3, #0
 801030e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010312:	4604      	mov	r4, r0
 8010314:	6003      	str	r3, [r0, #0]
 8010316:	f04f 0900 	mov.w	r9, #0
 801031a:	07eb      	lsls	r3, r5, #31
 801031c:	d50a      	bpl.n	8010334 <__pow5mult+0x84>
 801031e:	4631      	mov	r1, r6
 8010320:	4622      	mov	r2, r4
 8010322:	4638      	mov	r0, r7
 8010324:	f7ff ff1a 	bl	801015c <__multiply>
 8010328:	4631      	mov	r1, r6
 801032a:	4680      	mov	r8, r0
 801032c:	4638      	mov	r0, r7
 801032e:	f7ff fe4b 	bl	800ffc8 <_Bfree>
 8010332:	4646      	mov	r6, r8
 8010334:	106d      	asrs	r5, r5, #1
 8010336:	d00b      	beq.n	8010350 <__pow5mult+0xa0>
 8010338:	6820      	ldr	r0, [r4, #0]
 801033a:	b938      	cbnz	r0, 801034c <__pow5mult+0x9c>
 801033c:	4622      	mov	r2, r4
 801033e:	4621      	mov	r1, r4
 8010340:	4638      	mov	r0, r7
 8010342:	f7ff ff0b 	bl	801015c <__multiply>
 8010346:	6020      	str	r0, [r4, #0]
 8010348:	f8c0 9000 	str.w	r9, [r0]
 801034c:	4604      	mov	r4, r0
 801034e:	e7e4      	b.n	801031a <__pow5mult+0x6a>
 8010350:	4630      	mov	r0, r6
 8010352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010356:	bf00      	nop
 8010358:	0801211c 	.word	0x0801211c
 801035c:	08012041 	.word	0x08012041
 8010360:	080120c1 	.word	0x080120c1

08010364 <__lshift>:
 8010364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010368:	460c      	mov	r4, r1
 801036a:	6849      	ldr	r1, [r1, #4]
 801036c:	6923      	ldr	r3, [r4, #16]
 801036e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010372:	68a3      	ldr	r3, [r4, #8]
 8010374:	4607      	mov	r7, r0
 8010376:	4691      	mov	r9, r2
 8010378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801037c:	f108 0601 	add.w	r6, r8, #1
 8010380:	42b3      	cmp	r3, r6
 8010382:	db0b      	blt.n	801039c <__lshift+0x38>
 8010384:	4638      	mov	r0, r7
 8010386:	f7ff fddf 	bl	800ff48 <_Balloc>
 801038a:	4605      	mov	r5, r0
 801038c:	b948      	cbnz	r0, 80103a2 <__lshift+0x3e>
 801038e:	4602      	mov	r2, r0
 8010390:	4b28      	ldr	r3, [pc, #160]	@ (8010434 <__lshift+0xd0>)
 8010392:	4829      	ldr	r0, [pc, #164]	@ (8010438 <__lshift+0xd4>)
 8010394:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010398:	f000 f9f2 	bl	8010780 <__assert_func>
 801039c:	3101      	adds	r1, #1
 801039e:	005b      	lsls	r3, r3, #1
 80103a0:	e7ee      	b.n	8010380 <__lshift+0x1c>
 80103a2:	2300      	movs	r3, #0
 80103a4:	f100 0114 	add.w	r1, r0, #20
 80103a8:	f100 0210 	add.w	r2, r0, #16
 80103ac:	4618      	mov	r0, r3
 80103ae:	4553      	cmp	r3, sl
 80103b0:	db33      	blt.n	801041a <__lshift+0xb6>
 80103b2:	6920      	ldr	r0, [r4, #16]
 80103b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80103b8:	f104 0314 	add.w	r3, r4, #20
 80103bc:	f019 091f 	ands.w	r9, r9, #31
 80103c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80103c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80103c8:	d02b      	beq.n	8010422 <__lshift+0xbe>
 80103ca:	f1c9 0e20 	rsb	lr, r9, #32
 80103ce:	468a      	mov	sl, r1
 80103d0:	2200      	movs	r2, #0
 80103d2:	6818      	ldr	r0, [r3, #0]
 80103d4:	fa00 f009 	lsl.w	r0, r0, r9
 80103d8:	4310      	orrs	r0, r2
 80103da:	f84a 0b04 	str.w	r0, [sl], #4
 80103de:	f853 2b04 	ldr.w	r2, [r3], #4
 80103e2:	459c      	cmp	ip, r3
 80103e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80103e8:	d8f3      	bhi.n	80103d2 <__lshift+0x6e>
 80103ea:	ebac 0304 	sub.w	r3, ip, r4
 80103ee:	3b15      	subs	r3, #21
 80103f0:	f023 0303 	bic.w	r3, r3, #3
 80103f4:	3304      	adds	r3, #4
 80103f6:	f104 0015 	add.w	r0, r4, #21
 80103fa:	4584      	cmp	ip, r0
 80103fc:	bf38      	it	cc
 80103fe:	2304      	movcc	r3, #4
 8010400:	50ca      	str	r2, [r1, r3]
 8010402:	b10a      	cbz	r2, 8010408 <__lshift+0xa4>
 8010404:	f108 0602 	add.w	r6, r8, #2
 8010408:	3e01      	subs	r6, #1
 801040a:	4638      	mov	r0, r7
 801040c:	612e      	str	r6, [r5, #16]
 801040e:	4621      	mov	r1, r4
 8010410:	f7ff fdda 	bl	800ffc8 <_Bfree>
 8010414:	4628      	mov	r0, r5
 8010416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801041a:	f842 0f04 	str.w	r0, [r2, #4]!
 801041e:	3301      	adds	r3, #1
 8010420:	e7c5      	b.n	80103ae <__lshift+0x4a>
 8010422:	3904      	subs	r1, #4
 8010424:	f853 2b04 	ldr.w	r2, [r3], #4
 8010428:	f841 2f04 	str.w	r2, [r1, #4]!
 801042c:	459c      	cmp	ip, r3
 801042e:	d8f9      	bhi.n	8010424 <__lshift+0xc0>
 8010430:	e7ea      	b.n	8010408 <__lshift+0xa4>
 8010432:	bf00      	nop
 8010434:	080120b0 	.word	0x080120b0
 8010438:	080120c1 	.word	0x080120c1

0801043c <__mcmp>:
 801043c:	690a      	ldr	r2, [r1, #16]
 801043e:	4603      	mov	r3, r0
 8010440:	6900      	ldr	r0, [r0, #16]
 8010442:	1a80      	subs	r0, r0, r2
 8010444:	b530      	push	{r4, r5, lr}
 8010446:	d10e      	bne.n	8010466 <__mcmp+0x2a>
 8010448:	3314      	adds	r3, #20
 801044a:	3114      	adds	r1, #20
 801044c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010450:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010454:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010458:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801045c:	4295      	cmp	r5, r2
 801045e:	d003      	beq.n	8010468 <__mcmp+0x2c>
 8010460:	d205      	bcs.n	801046e <__mcmp+0x32>
 8010462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010466:	bd30      	pop	{r4, r5, pc}
 8010468:	42a3      	cmp	r3, r4
 801046a:	d3f3      	bcc.n	8010454 <__mcmp+0x18>
 801046c:	e7fb      	b.n	8010466 <__mcmp+0x2a>
 801046e:	2001      	movs	r0, #1
 8010470:	e7f9      	b.n	8010466 <__mcmp+0x2a>
	...

08010474 <__mdiff>:
 8010474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010478:	4689      	mov	r9, r1
 801047a:	4606      	mov	r6, r0
 801047c:	4611      	mov	r1, r2
 801047e:	4648      	mov	r0, r9
 8010480:	4614      	mov	r4, r2
 8010482:	f7ff ffdb 	bl	801043c <__mcmp>
 8010486:	1e05      	subs	r5, r0, #0
 8010488:	d112      	bne.n	80104b0 <__mdiff+0x3c>
 801048a:	4629      	mov	r1, r5
 801048c:	4630      	mov	r0, r6
 801048e:	f7ff fd5b 	bl	800ff48 <_Balloc>
 8010492:	4602      	mov	r2, r0
 8010494:	b928      	cbnz	r0, 80104a2 <__mdiff+0x2e>
 8010496:	4b3f      	ldr	r3, [pc, #252]	@ (8010594 <__mdiff+0x120>)
 8010498:	f240 2137 	movw	r1, #567	@ 0x237
 801049c:	483e      	ldr	r0, [pc, #248]	@ (8010598 <__mdiff+0x124>)
 801049e:	f000 f96f 	bl	8010780 <__assert_func>
 80104a2:	2301      	movs	r3, #1
 80104a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80104a8:	4610      	mov	r0, r2
 80104aa:	b003      	add	sp, #12
 80104ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b0:	bfbc      	itt	lt
 80104b2:	464b      	movlt	r3, r9
 80104b4:	46a1      	movlt	r9, r4
 80104b6:	4630      	mov	r0, r6
 80104b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80104bc:	bfba      	itte	lt
 80104be:	461c      	movlt	r4, r3
 80104c0:	2501      	movlt	r5, #1
 80104c2:	2500      	movge	r5, #0
 80104c4:	f7ff fd40 	bl	800ff48 <_Balloc>
 80104c8:	4602      	mov	r2, r0
 80104ca:	b918      	cbnz	r0, 80104d4 <__mdiff+0x60>
 80104cc:	4b31      	ldr	r3, [pc, #196]	@ (8010594 <__mdiff+0x120>)
 80104ce:	f240 2145 	movw	r1, #581	@ 0x245
 80104d2:	e7e3      	b.n	801049c <__mdiff+0x28>
 80104d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80104d8:	6926      	ldr	r6, [r4, #16]
 80104da:	60c5      	str	r5, [r0, #12]
 80104dc:	f109 0310 	add.w	r3, r9, #16
 80104e0:	f109 0514 	add.w	r5, r9, #20
 80104e4:	f104 0e14 	add.w	lr, r4, #20
 80104e8:	f100 0b14 	add.w	fp, r0, #20
 80104ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80104f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80104f4:	9301      	str	r3, [sp, #4]
 80104f6:	46d9      	mov	r9, fp
 80104f8:	f04f 0c00 	mov.w	ip, #0
 80104fc:	9b01      	ldr	r3, [sp, #4]
 80104fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010502:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010506:	9301      	str	r3, [sp, #4]
 8010508:	fa1f f38a 	uxth.w	r3, sl
 801050c:	4619      	mov	r1, r3
 801050e:	b283      	uxth	r3, r0
 8010510:	1acb      	subs	r3, r1, r3
 8010512:	0c00      	lsrs	r0, r0, #16
 8010514:	4463      	add	r3, ip
 8010516:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801051a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801051e:	b29b      	uxth	r3, r3
 8010520:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010524:	4576      	cmp	r6, lr
 8010526:	f849 3b04 	str.w	r3, [r9], #4
 801052a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801052e:	d8e5      	bhi.n	80104fc <__mdiff+0x88>
 8010530:	1b33      	subs	r3, r6, r4
 8010532:	3b15      	subs	r3, #21
 8010534:	f023 0303 	bic.w	r3, r3, #3
 8010538:	3415      	adds	r4, #21
 801053a:	3304      	adds	r3, #4
 801053c:	42a6      	cmp	r6, r4
 801053e:	bf38      	it	cc
 8010540:	2304      	movcc	r3, #4
 8010542:	441d      	add	r5, r3
 8010544:	445b      	add	r3, fp
 8010546:	461e      	mov	r6, r3
 8010548:	462c      	mov	r4, r5
 801054a:	4544      	cmp	r4, r8
 801054c:	d30e      	bcc.n	801056c <__mdiff+0xf8>
 801054e:	f108 0103 	add.w	r1, r8, #3
 8010552:	1b49      	subs	r1, r1, r5
 8010554:	f021 0103 	bic.w	r1, r1, #3
 8010558:	3d03      	subs	r5, #3
 801055a:	45a8      	cmp	r8, r5
 801055c:	bf38      	it	cc
 801055e:	2100      	movcc	r1, #0
 8010560:	440b      	add	r3, r1
 8010562:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010566:	b191      	cbz	r1, 801058e <__mdiff+0x11a>
 8010568:	6117      	str	r7, [r2, #16]
 801056a:	e79d      	b.n	80104a8 <__mdiff+0x34>
 801056c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010570:	46e6      	mov	lr, ip
 8010572:	0c08      	lsrs	r0, r1, #16
 8010574:	fa1c fc81 	uxtah	ip, ip, r1
 8010578:	4471      	add	r1, lr
 801057a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801057e:	b289      	uxth	r1, r1
 8010580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010584:	f846 1b04 	str.w	r1, [r6], #4
 8010588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801058c:	e7dd      	b.n	801054a <__mdiff+0xd6>
 801058e:	3f01      	subs	r7, #1
 8010590:	e7e7      	b.n	8010562 <__mdiff+0xee>
 8010592:	bf00      	nop
 8010594:	080120b0 	.word	0x080120b0
 8010598:	080120c1 	.word	0x080120c1

0801059c <__d2b>:
 801059c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105a0:	460f      	mov	r7, r1
 80105a2:	2101      	movs	r1, #1
 80105a4:	ec59 8b10 	vmov	r8, r9, d0
 80105a8:	4616      	mov	r6, r2
 80105aa:	f7ff fccd 	bl	800ff48 <_Balloc>
 80105ae:	4604      	mov	r4, r0
 80105b0:	b930      	cbnz	r0, 80105c0 <__d2b+0x24>
 80105b2:	4602      	mov	r2, r0
 80105b4:	4b23      	ldr	r3, [pc, #140]	@ (8010644 <__d2b+0xa8>)
 80105b6:	4824      	ldr	r0, [pc, #144]	@ (8010648 <__d2b+0xac>)
 80105b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80105bc:	f000 f8e0 	bl	8010780 <__assert_func>
 80105c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80105c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105c8:	b10d      	cbz	r5, 80105ce <__d2b+0x32>
 80105ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80105ce:	9301      	str	r3, [sp, #4]
 80105d0:	f1b8 0300 	subs.w	r3, r8, #0
 80105d4:	d023      	beq.n	801061e <__d2b+0x82>
 80105d6:	4668      	mov	r0, sp
 80105d8:	9300      	str	r3, [sp, #0]
 80105da:	f7ff fd7c 	bl	80100d6 <__lo0bits>
 80105de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80105e2:	b1d0      	cbz	r0, 801061a <__d2b+0x7e>
 80105e4:	f1c0 0320 	rsb	r3, r0, #32
 80105e8:	fa02 f303 	lsl.w	r3, r2, r3
 80105ec:	430b      	orrs	r3, r1
 80105ee:	40c2      	lsrs	r2, r0
 80105f0:	6163      	str	r3, [r4, #20]
 80105f2:	9201      	str	r2, [sp, #4]
 80105f4:	9b01      	ldr	r3, [sp, #4]
 80105f6:	61a3      	str	r3, [r4, #24]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	bf0c      	ite	eq
 80105fc:	2201      	moveq	r2, #1
 80105fe:	2202      	movne	r2, #2
 8010600:	6122      	str	r2, [r4, #16]
 8010602:	b1a5      	cbz	r5, 801062e <__d2b+0x92>
 8010604:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010608:	4405      	add	r5, r0
 801060a:	603d      	str	r5, [r7, #0]
 801060c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010610:	6030      	str	r0, [r6, #0]
 8010612:	4620      	mov	r0, r4
 8010614:	b003      	add	sp, #12
 8010616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801061a:	6161      	str	r1, [r4, #20]
 801061c:	e7ea      	b.n	80105f4 <__d2b+0x58>
 801061e:	a801      	add	r0, sp, #4
 8010620:	f7ff fd59 	bl	80100d6 <__lo0bits>
 8010624:	9b01      	ldr	r3, [sp, #4]
 8010626:	6163      	str	r3, [r4, #20]
 8010628:	3020      	adds	r0, #32
 801062a:	2201      	movs	r2, #1
 801062c:	e7e8      	b.n	8010600 <__d2b+0x64>
 801062e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010632:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010636:	6038      	str	r0, [r7, #0]
 8010638:	6918      	ldr	r0, [r3, #16]
 801063a:	f7ff fd2d 	bl	8010098 <__hi0bits>
 801063e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010642:	e7e5      	b.n	8010610 <__d2b+0x74>
 8010644:	080120b0 	.word	0x080120b0
 8010648:	080120c1 	.word	0x080120c1

0801064c <__sread>:
 801064c:	b510      	push	{r4, lr}
 801064e:	460c      	mov	r4, r1
 8010650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010654:	f000 f860 	bl	8010718 <_read_r>
 8010658:	2800      	cmp	r0, #0
 801065a:	bfab      	itete	ge
 801065c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801065e:	89a3      	ldrhlt	r3, [r4, #12]
 8010660:	181b      	addge	r3, r3, r0
 8010662:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010666:	bfac      	ite	ge
 8010668:	6563      	strge	r3, [r4, #84]	@ 0x54
 801066a:	81a3      	strhlt	r3, [r4, #12]
 801066c:	bd10      	pop	{r4, pc}

0801066e <__swrite>:
 801066e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010672:	461f      	mov	r7, r3
 8010674:	898b      	ldrh	r3, [r1, #12]
 8010676:	05db      	lsls	r3, r3, #23
 8010678:	4605      	mov	r5, r0
 801067a:	460c      	mov	r4, r1
 801067c:	4616      	mov	r6, r2
 801067e:	d505      	bpl.n	801068c <__swrite+0x1e>
 8010680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010684:	2302      	movs	r3, #2
 8010686:	2200      	movs	r2, #0
 8010688:	f000 f834 	bl	80106f4 <_lseek_r>
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010692:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010696:	81a3      	strh	r3, [r4, #12]
 8010698:	4632      	mov	r2, r6
 801069a:	463b      	mov	r3, r7
 801069c:	4628      	mov	r0, r5
 801069e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106a2:	f000 b85b 	b.w	801075c <_write_r>

080106a6 <__sseek>:
 80106a6:	b510      	push	{r4, lr}
 80106a8:	460c      	mov	r4, r1
 80106aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ae:	f000 f821 	bl	80106f4 <_lseek_r>
 80106b2:	1c43      	adds	r3, r0, #1
 80106b4:	89a3      	ldrh	r3, [r4, #12]
 80106b6:	bf15      	itete	ne
 80106b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80106ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80106be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80106c2:	81a3      	strheq	r3, [r4, #12]
 80106c4:	bf18      	it	ne
 80106c6:	81a3      	strhne	r3, [r4, #12]
 80106c8:	bd10      	pop	{r4, pc}

080106ca <__sclose>:
 80106ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ce:	f000 b801 	b.w	80106d4 <_close_r>
	...

080106d4 <_close_r>:
 80106d4:	b538      	push	{r3, r4, r5, lr}
 80106d6:	4d06      	ldr	r5, [pc, #24]	@ (80106f0 <_close_r+0x1c>)
 80106d8:	2300      	movs	r3, #0
 80106da:	4604      	mov	r4, r0
 80106dc:	4608      	mov	r0, r1
 80106de:	602b      	str	r3, [r5, #0]
 80106e0:	f7f5 f8a0 	bl	8005824 <_close>
 80106e4:	1c43      	adds	r3, r0, #1
 80106e6:	d102      	bne.n	80106ee <_close_r+0x1a>
 80106e8:	682b      	ldr	r3, [r5, #0]
 80106ea:	b103      	cbz	r3, 80106ee <_close_r+0x1a>
 80106ec:	6023      	str	r3, [r4, #0]
 80106ee:	bd38      	pop	{r3, r4, r5, pc}
 80106f0:	200056f0 	.word	0x200056f0

080106f4 <_lseek_r>:
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	4d07      	ldr	r5, [pc, #28]	@ (8010714 <_lseek_r+0x20>)
 80106f8:	4604      	mov	r4, r0
 80106fa:	4608      	mov	r0, r1
 80106fc:	4611      	mov	r1, r2
 80106fe:	2200      	movs	r2, #0
 8010700:	602a      	str	r2, [r5, #0]
 8010702:	461a      	mov	r2, r3
 8010704:	f7f5 f8b5 	bl	8005872 <_lseek>
 8010708:	1c43      	adds	r3, r0, #1
 801070a:	d102      	bne.n	8010712 <_lseek_r+0x1e>
 801070c:	682b      	ldr	r3, [r5, #0]
 801070e:	b103      	cbz	r3, 8010712 <_lseek_r+0x1e>
 8010710:	6023      	str	r3, [r4, #0]
 8010712:	bd38      	pop	{r3, r4, r5, pc}
 8010714:	200056f0 	.word	0x200056f0

08010718 <_read_r>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	4d07      	ldr	r5, [pc, #28]	@ (8010738 <_read_r+0x20>)
 801071c:	4604      	mov	r4, r0
 801071e:	4608      	mov	r0, r1
 8010720:	4611      	mov	r1, r2
 8010722:	2200      	movs	r2, #0
 8010724:	602a      	str	r2, [r5, #0]
 8010726:	461a      	mov	r2, r3
 8010728:	f7f5 f843 	bl	80057b2 <_read>
 801072c:	1c43      	adds	r3, r0, #1
 801072e:	d102      	bne.n	8010736 <_read_r+0x1e>
 8010730:	682b      	ldr	r3, [r5, #0]
 8010732:	b103      	cbz	r3, 8010736 <_read_r+0x1e>
 8010734:	6023      	str	r3, [r4, #0]
 8010736:	bd38      	pop	{r3, r4, r5, pc}
 8010738:	200056f0 	.word	0x200056f0

0801073c <_sbrk_r>:
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	4d06      	ldr	r5, [pc, #24]	@ (8010758 <_sbrk_r+0x1c>)
 8010740:	2300      	movs	r3, #0
 8010742:	4604      	mov	r4, r0
 8010744:	4608      	mov	r0, r1
 8010746:	602b      	str	r3, [r5, #0]
 8010748:	f7f5 f8a0 	bl	800588c <_sbrk>
 801074c:	1c43      	adds	r3, r0, #1
 801074e:	d102      	bne.n	8010756 <_sbrk_r+0x1a>
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	b103      	cbz	r3, 8010756 <_sbrk_r+0x1a>
 8010754:	6023      	str	r3, [r4, #0]
 8010756:	bd38      	pop	{r3, r4, r5, pc}
 8010758:	200056f0 	.word	0x200056f0

0801075c <_write_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	4d07      	ldr	r5, [pc, #28]	@ (801077c <_write_r+0x20>)
 8010760:	4604      	mov	r4, r0
 8010762:	4608      	mov	r0, r1
 8010764:	4611      	mov	r1, r2
 8010766:	2200      	movs	r2, #0
 8010768:	602a      	str	r2, [r5, #0]
 801076a:	461a      	mov	r2, r3
 801076c:	f7f5 f83e 	bl	80057ec <_write>
 8010770:	1c43      	adds	r3, r0, #1
 8010772:	d102      	bne.n	801077a <_write_r+0x1e>
 8010774:	682b      	ldr	r3, [r5, #0]
 8010776:	b103      	cbz	r3, 801077a <_write_r+0x1e>
 8010778:	6023      	str	r3, [r4, #0]
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	200056f0 	.word	0x200056f0

08010780 <__assert_func>:
 8010780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010782:	4614      	mov	r4, r2
 8010784:	461a      	mov	r2, r3
 8010786:	4b09      	ldr	r3, [pc, #36]	@ (80107ac <__assert_func+0x2c>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4605      	mov	r5, r0
 801078c:	68d8      	ldr	r0, [r3, #12]
 801078e:	b954      	cbnz	r4, 80107a6 <__assert_func+0x26>
 8010790:	4b07      	ldr	r3, [pc, #28]	@ (80107b0 <__assert_func+0x30>)
 8010792:	461c      	mov	r4, r3
 8010794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010798:	9100      	str	r1, [sp, #0]
 801079a:	462b      	mov	r3, r5
 801079c:	4905      	ldr	r1, [pc, #20]	@ (80107b4 <__assert_func+0x34>)
 801079e:	f000 f833 	bl	8010808 <fiprintf>
 80107a2:	f000 f850 	bl	8010846 <abort>
 80107a6:	4b04      	ldr	r3, [pc, #16]	@ (80107b8 <__assert_func+0x38>)
 80107a8:	e7f4      	b.n	8010794 <__assert_func+0x14>
 80107aa:	bf00      	nop
 80107ac:	2000007c 	.word	0x2000007c
 80107b0:	0801235e 	.word	0x0801235e
 80107b4:	08012330 	.word	0x08012330
 80107b8:	08012323 	.word	0x08012323

080107bc <_calloc_r>:
 80107bc:	b570      	push	{r4, r5, r6, lr}
 80107be:	fba1 5402 	umull	r5, r4, r1, r2
 80107c2:	b93c      	cbnz	r4, 80107d4 <_calloc_r+0x18>
 80107c4:	4629      	mov	r1, r5
 80107c6:	f7ff fa87 	bl	800fcd8 <_malloc_r>
 80107ca:	4606      	mov	r6, r0
 80107cc:	b928      	cbnz	r0, 80107da <_calloc_r+0x1e>
 80107ce:	2600      	movs	r6, #0
 80107d0:	4630      	mov	r0, r6
 80107d2:	bd70      	pop	{r4, r5, r6, pc}
 80107d4:	220c      	movs	r2, #12
 80107d6:	6002      	str	r2, [r0, #0]
 80107d8:	e7f9      	b.n	80107ce <_calloc_r+0x12>
 80107da:	462a      	mov	r2, r5
 80107dc:	4621      	mov	r1, r4
 80107de:	f7fe fb1d 	bl	800ee1c <memset>
 80107e2:	e7f5      	b.n	80107d0 <_calloc_r+0x14>

080107e4 <__ascii_mbtowc>:
 80107e4:	b082      	sub	sp, #8
 80107e6:	b901      	cbnz	r1, 80107ea <__ascii_mbtowc+0x6>
 80107e8:	a901      	add	r1, sp, #4
 80107ea:	b142      	cbz	r2, 80107fe <__ascii_mbtowc+0x1a>
 80107ec:	b14b      	cbz	r3, 8010802 <__ascii_mbtowc+0x1e>
 80107ee:	7813      	ldrb	r3, [r2, #0]
 80107f0:	600b      	str	r3, [r1, #0]
 80107f2:	7812      	ldrb	r2, [r2, #0]
 80107f4:	1e10      	subs	r0, r2, #0
 80107f6:	bf18      	it	ne
 80107f8:	2001      	movne	r0, #1
 80107fa:	b002      	add	sp, #8
 80107fc:	4770      	bx	lr
 80107fe:	4610      	mov	r0, r2
 8010800:	e7fb      	b.n	80107fa <__ascii_mbtowc+0x16>
 8010802:	f06f 0001 	mvn.w	r0, #1
 8010806:	e7f8      	b.n	80107fa <__ascii_mbtowc+0x16>

08010808 <fiprintf>:
 8010808:	b40e      	push	{r1, r2, r3}
 801080a:	b503      	push	{r0, r1, lr}
 801080c:	4601      	mov	r1, r0
 801080e:	ab03      	add	r3, sp, #12
 8010810:	4805      	ldr	r0, [pc, #20]	@ (8010828 <fiprintf+0x20>)
 8010812:	f853 2b04 	ldr.w	r2, [r3], #4
 8010816:	6800      	ldr	r0, [r0, #0]
 8010818:	9301      	str	r3, [sp, #4]
 801081a:	f000 f845 	bl	80108a8 <_vfiprintf_r>
 801081e:	b002      	add	sp, #8
 8010820:	f85d eb04 	ldr.w	lr, [sp], #4
 8010824:	b003      	add	sp, #12
 8010826:	4770      	bx	lr
 8010828:	2000007c 	.word	0x2000007c

0801082c <__ascii_wctomb>:
 801082c:	4603      	mov	r3, r0
 801082e:	4608      	mov	r0, r1
 8010830:	b141      	cbz	r1, 8010844 <__ascii_wctomb+0x18>
 8010832:	2aff      	cmp	r2, #255	@ 0xff
 8010834:	d904      	bls.n	8010840 <__ascii_wctomb+0x14>
 8010836:	228a      	movs	r2, #138	@ 0x8a
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801083e:	4770      	bx	lr
 8010840:	700a      	strb	r2, [r1, #0]
 8010842:	2001      	movs	r0, #1
 8010844:	4770      	bx	lr

08010846 <abort>:
 8010846:	b508      	push	{r3, lr}
 8010848:	2006      	movs	r0, #6
 801084a:	f000 fa85 	bl	8010d58 <raise>
 801084e:	2001      	movs	r0, #1
 8010850:	f7f4 ffa4 	bl	800579c <_exit>

08010854 <__sfputc_r>:
 8010854:	6893      	ldr	r3, [r2, #8]
 8010856:	3b01      	subs	r3, #1
 8010858:	2b00      	cmp	r3, #0
 801085a:	b410      	push	{r4}
 801085c:	6093      	str	r3, [r2, #8]
 801085e:	da08      	bge.n	8010872 <__sfputc_r+0x1e>
 8010860:	6994      	ldr	r4, [r2, #24]
 8010862:	42a3      	cmp	r3, r4
 8010864:	db01      	blt.n	801086a <__sfputc_r+0x16>
 8010866:	290a      	cmp	r1, #10
 8010868:	d103      	bne.n	8010872 <__sfputc_r+0x1e>
 801086a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801086e:	f000 b933 	b.w	8010ad8 <__swbuf_r>
 8010872:	6813      	ldr	r3, [r2, #0]
 8010874:	1c58      	adds	r0, r3, #1
 8010876:	6010      	str	r0, [r2, #0]
 8010878:	7019      	strb	r1, [r3, #0]
 801087a:	4608      	mov	r0, r1
 801087c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010880:	4770      	bx	lr

08010882 <__sfputs_r>:
 8010882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010884:	4606      	mov	r6, r0
 8010886:	460f      	mov	r7, r1
 8010888:	4614      	mov	r4, r2
 801088a:	18d5      	adds	r5, r2, r3
 801088c:	42ac      	cmp	r4, r5
 801088e:	d101      	bne.n	8010894 <__sfputs_r+0x12>
 8010890:	2000      	movs	r0, #0
 8010892:	e007      	b.n	80108a4 <__sfputs_r+0x22>
 8010894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010898:	463a      	mov	r2, r7
 801089a:	4630      	mov	r0, r6
 801089c:	f7ff ffda 	bl	8010854 <__sfputc_r>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d1f3      	bne.n	801088c <__sfputs_r+0xa>
 80108a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080108a8 <_vfiprintf_r>:
 80108a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ac:	460d      	mov	r5, r1
 80108ae:	b09d      	sub	sp, #116	@ 0x74
 80108b0:	4614      	mov	r4, r2
 80108b2:	4698      	mov	r8, r3
 80108b4:	4606      	mov	r6, r0
 80108b6:	b118      	cbz	r0, 80108c0 <_vfiprintf_r+0x18>
 80108b8:	6a03      	ldr	r3, [r0, #32]
 80108ba:	b90b      	cbnz	r3, 80108c0 <_vfiprintf_r+0x18>
 80108bc:	f7fe fa78 	bl	800edb0 <__sinit>
 80108c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108c2:	07d9      	lsls	r1, r3, #31
 80108c4:	d405      	bmi.n	80108d2 <_vfiprintf_r+0x2a>
 80108c6:	89ab      	ldrh	r3, [r5, #12]
 80108c8:	059a      	lsls	r2, r3, #22
 80108ca:	d402      	bmi.n	80108d2 <_vfiprintf_r+0x2a>
 80108cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108ce:	f7fe fb32 	bl	800ef36 <__retarget_lock_acquire_recursive>
 80108d2:	89ab      	ldrh	r3, [r5, #12]
 80108d4:	071b      	lsls	r3, r3, #28
 80108d6:	d501      	bpl.n	80108dc <_vfiprintf_r+0x34>
 80108d8:	692b      	ldr	r3, [r5, #16]
 80108da:	b99b      	cbnz	r3, 8010904 <_vfiprintf_r+0x5c>
 80108dc:	4629      	mov	r1, r5
 80108de:	4630      	mov	r0, r6
 80108e0:	f000 f938 	bl	8010b54 <__swsetup_r>
 80108e4:	b170      	cbz	r0, 8010904 <_vfiprintf_r+0x5c>
 80108e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108e8:	07dc      	lsls	r4, r3, #31
 80108ea:	d504      	bpl.n	80108f6 <_vfiprintf_r+0x4e>
 80108ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108f0:	b01d      	add	sp, #116	@ 0x74
 80108f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f6:	89ab      	ldrh	r3, [r5, #12]
 80108f8:	0598      	lsls	r0, r3, #22
 80108fa:	d4f7      	bmi.n	80108ec <_vfiprintf_r+0x44>
 80108fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108fe:	f7fe fb1b 	bl	800ef38 <__retarget_lock_release_recursive>
 8010902:	e7f3      	b.n	80108ec <_vfiprintf_r+0x44>
 8010904:	2300      	movs	r3, #0
 8010906:	9309      	str	r3, [sp, #36]	@ 0x24
 8010908:	2320      	movs	r3, #32
 801090a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801090e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010912:	2330      	movs	r3, #48	@ 0x30
 8010914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ac4 <_vfiprintf_r+0x21c>
 8010918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801091c:	f04f 0901 	mov.w	r9, #1
 8010920:	4623      	mov	r3, r4
 8010922:	469a      	mov	sl, r3
 8010924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010928:	b10a      	cbz	r2, 801092e <_vfiprintf_r+0x86>
 801092a:	2a25      	cmp	r2, #37	@ 0x25
 801092c:	d1f9      	bne.n	8010922 <_vfiprintf_r+0x7a>
 801092e:	ebba 0b04 	subs.w	fp, sl, r4
 8010932:	d00b      	beq.n	801094c <_vfiprintf_r+0xa4>
 8010934:	465b      	mov	r3, fp
 8010936:	4622      	mov	r2, r4
 8010938:	4629      	mov	r1, r5
 801093a:	4630      	mov	r0, r6
 801093c:	f7ff ffa1 	bl	8010882 <__sfputs_r>
 8010940:	3001      	adds	r0, #1
 8010942:	f000 80a7 	beq.w	8010a94 <_vfiprintf_r+0x1ec>
 8010946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010948:	445a      	add	r2, fp
 801094a:	9209      	str	r2, [sp, #36]	@ 0x24
 801094c:	f89a 3000 	ldrb.w	r3, [sl]
 8010950:	2b00      	cmp	r3, #0
 8010952:	f000 809f 	beq.w	8010a94 <_vfiprintf_r+0x1ec>
 8010956:	2300      	movs	r3, #0
 8010958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801095c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010960:	f10a 0a01 	add.w	sl, sl, #1
 8010964:	9304      	str	r3, [sp, #16]
 8010966:	9307      	str	r3, [sp, #28]
 8010968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801096c:	931a      	str	r3, [sp, #104]	@ 0x68
 801096e:	4654      	mov	r4, sl
 8010970:	2205      	movs	r2, #5
 8010972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010976:	4853      	ldr	r0, [pc, #332]	@ (8010ac4 <_vfiprintf_r+0x21c>)
 8010978:	f7ef fc2a 	bl	80001d0 <memchr>
 801097c:	9a04      	ldr	r2, [sp, #16]
 801097e:	b9d8      	cbnz	r0, 80109b8 <_vfiprintf_r+0x110>
 8010980:	06d1      	lsls	r1, r2, #27
 8010982:	bf44      	itt	mi
 8010984:	2320      	movmi	r3, #32
 8010986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801098a:	0713      	lsls	r3, r2, #28
 801098c:	bf44      	itt	mi
 801098e:	232b      	movmi	r3, #43	@ 0x2b
 8010990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010994:	f89a 3000 	ldrb.w	r3, [sl]
 8010998:	2b2a      	cmp	r3, #42	@ 0x2a
 801099a:	d015      	beq.n	80109c8 <_vfiprintf_r+0x120>
 801099c:	9a07      	ldr	r2, [sp, #28]
 801099e:	4654      	mov	r4, sl
 80109a0:	2000      	movs	r0, #0
 80109a2:	f04f 0c0a 	mov.w	ip, #10
 80109a6:	4621      	mov	r1, r4
 80109a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109ac:	3b30      	subs	r3, #48	@ 0x30
 80109ae:	2b09      	cmp	r3, #9
 80109b0:	d94b      	bls.n	8010a4a <_vfiprintf_r+0x1a2>
 80109b2:	b1b0      	cbz	r0, 80109e2 <_vfiprintf_r+0x13a>
 80109b4:	9207      	str	r2, [sp, #28]
 80109b6:	e014      	b.n	80109e2 <_vfiprintf_r+0x13a>
 80109b8:	eba0 0308 	sub.w	r3, r0, r8
 80109bc:	fa09 f303 	lsl.w	r3, r9, r3
 80109c0:	4313      	orrs	r3, r2
 80109c2:	9304      	str	r3, [sp, #16]
 80109c4:	46a2      	mov	sl, r4
 80109c6:	e7d2      	b.n	801096e <_vfiprintf_r+0xc6>
 80109c8:	9b03      	ldr	r3, [sp, #12]
 80109ca:	1d19      	adds	r1, r3, #4
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	9103      	str	r1, [sp, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	bfbb      	ittet	lt
 80109d4:	425b      	neglt	r3, r3
 80109d6:	f042 0202 	orrlt.w	r2, r2, #2
 80109da:	9307      	strge	r3, [sp, #28]
 80109dc:	9307      	strlt	r3, [sp, #28]
 80109de:	bfb8      	it	lt
 80109e0:	9204      	strlt	r2, [sp, #16]
 80109e2:	7823      	ldrb	r3, [r4, #0]
 80109e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80109e6:	d10a      	bne.n	80109fe <_vfiprintf_r+0x156>
 80109e8:	7863      	ldrb	r3, [r4, #1]
 80109ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80109ec:	d132      	bne.n	8010a54 <_vfiprintf_r+0x1ac>
 80109ee:	9b03      	ldr	r3, [sp, #12]
 80109f0:	1d1a      	adds	r2, r3, #4
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	9203      	str	r2, [sp, #12]
 80109f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80109fa:	3402      	adds	r4, #2
 80109fc:	9305      	str	r3, [sp, #20]
 80109fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ad4 <_vfiprintf_r+0x22c>
 8010a02:	7821      	ldrb	r1, [r4, #0]
 8010a04:	2203      	movs	r2, #3
 8010a06:	4650      	mov	r0, sl
 8010a08:	f7ef fbe2 	bl	80001d0 <memchr>
 8010a0c:	b138      	cbz	r0, 8010a1e <_vfiprintf_r+0x176>
 8010a0e:	9b04      	ldr	r3, [sp, #16]
 8010a10:	eba0 000a 	sub.w	r0, r0, sl
 8010a14:	2240      	movs	r2, #64	@ 0x40
 8010a16:	4082      	lsls	r2, r0
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	3401      	adds	r4, #1
 8010a1c:	9304      	str	r3, [sp, #16]
 8010a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a22:	4829      	ldr	r0, [pc, #164]	@ (8010ac8 <_vfiprintf_r+0x220>)
 8010a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a28:	2206      	movs	r2, #6
 8010a2a:	f7ef fbd1 	bl	80001d0 <memchr>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d03f      	beq.n	8010ab2 <_vfiprintf_r+0x20a>
 8010a32:	4b26      	ldr	r3, [pc, #152]	@ (8010acc <_vfiprintf_r+0x224>)
 8010a34:	bb1b      	cbnz	r3, 8010a7e <_vfiprintf_r+0x1d6>
 8010a36:	9b03      	ldr	r3, [sp, #12]
 8010a38:	3307      	adds	r3, #7
 8010a3a:	f023 0307 	bic.w	r3, r3, #7
 8010a3e:	3308      	adds	r3, #8
 8010a40:	9303      	str	r3, [sp, #12]
 8010a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a44:	443b      	add	r3, r7
 8010a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a48:	e76a      	b.n	8010920 <_vfiprintf_r+0x78>
 8010a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a4e:	460c      	mov	r4, r1
 8010a50:	2001      	movs	r0, #1
 8010a52:	e7a8      	b.n	80109a6 <_vfiprintf_r+0xfe>
 8010a54:	2300      	movs	r3, #0
 8010a56:	3401      	adds	r4, #1
 8010a58:	9305      	str	r3, [sp, #20]
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	f04f 0c0a 	mov.w	ip, #10
 8010a60:	4620      	mov	r0, r4
 8010a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a66:	3a30      	subs	r2, #48	@ 0x30
 8010a68:	2a09      	cmp	r2, #9
 8010a6a:	d903      	bls.n	8010a74 <_vfiprintf_r+0x1cc>
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d0c6      	beq.n	80109fe <_vfiprintf_r+0x156>
 8010a70:	9105      	str	r1, [sp, #20]
 8010a72:	e7c4      	b.n	80109fe <_vfiprintf_r+0x156>
 8010a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a78:	4604      	mov	r4, r0
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e7f0      	b.n	8010a60 <_vfiprintf_r+0x1b8>
 8010a7e:	ab03      	add	r3, sp, #12
 8010a80:	9300      	str	r3, [sp, #0]
 8010a82:	462a      	mov	r2, r5
 8010a84:	4b12      	ldr	r3, [pc, #72]	@ (8010ad0 <_vfiprintf_r+0x228>)
 8010a86:	a904      	add	r1, sp, #16
 8010a88:	4630      	mov	r0, r6
 8010a8a:	f7fd fd4d 	bl	800e528 <_printf_float>
 8010a8e:	4607      	mov	r7, r0
 8010a90:	1c78      	adds	r0, r7, #1
 8010a92:	d1d6      	bne.n	8010a42 <_vfiprintf_r+0x19a>
 8010a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a96:	07d9      	lsls	r1, r3, #31
 8010a98:	d405      	bmi.n	8010aa6 <_vfiprintf_r+0x1fe>
 8010a9a:	89ab      	ldrh	r3, [r5, #12]
 8010a9c:	059a      	lsls	r2, r3, #22
 8010a9e:	d402      	bmi.n	8010aa6 <_vfiprintf_r+0x1fe>
 8010aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010aa2:	f7fe fa49 	bl	800ef38 <__retarget_lock_release_recursive>
 8010aa6:	89ab      	ldrh	r3, [r5, #12]
 8010aa8:	065b      	lsls	r3, r3, #25
 8010aaa:	f53f af1f 	bmi.w	80108ec <_vfiprintf_r+0x44>
 8010aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ab0:	e71e      	b.n	80108f0 <_vfiprintf_r+0x48>
 8010ab2:	ab03      	add	r3, sp, #12
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	462a      	mov	r2, r5
 8010ab8:	4b05      	ldr	r3, [pc, #20]	@ (8010ad0 <_vfiprintf_r+0x228>)
 8010aba:	a904      	add	r1, sp, #16
 8010abc:	4630      	mov	r0, r6
 8010abe:	f7fd ffcb 	bl	800ea58 <_printf_i>
 8010ac2:	e7e4      	b.n	8010a8e <_vfiprintf_r+0x1e6>
 8010ac4:	0801235f 	.word	0x0801235f
 8010ac8:	08012369 	.word	0x08012369
 8010acc:	0800e529 	.word	0x0800e529
 8010ad0:	08010883 	.word	0x08010883
 8010ad4:	08012365 	.word	0x08012365

08010ad8 <__swbuf_r>:
 8010ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ada:	460e      	mov	r6, r1
 8010adc:	4614      	mov	r4, r2
 8010ade:	4605      	mov	r5, r0
 8010ae0:	b118      	cbz	r0, 8010aea <__swbuf_r+0x12>
 8010ae2:	6a03      	ldr	r3, [r0, #32]
 8010ae4:	b90b      	cbnz	r3, 8010aea <__swbuf_r+0x12>
 8010ae6:	f7fe f963 	bl	800edb0 <__sinit>
 8010aea:	69a3      	ldr	r3, [r4, #24]
 8010aec:	60a3      	str	r3, [r4, #8]
 8010aee:	89a3      	ldrh	r3, [r4, #12]
 8010af0:	071a      	lsls	r2, r3, #28
 8010af2:	d501      	bpl.n	8010af8 <__swbuf_r+0x20>
 8010af4:	6923      	ldr	r3, [r4, #16]
 8010af6:	b943      	cbnz	r3, 8010b0a <__swbuf_r+0x32>
 8010af8:	4621      	mov	r1, r4
 8010afa:	4628      	mov	r0, r5
 8010afc:	f000 f82a 	bl	8010b54 <__swsetup_r>
 8010b00:	b118      	cbz	r0, 8010b0a <__swbuf_r+0x32>
 8010b02:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010b06:	4638      	mov	r0, r7
 8010b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b0a:	6823      	ldr	r3, [r4, #0]
 8010b0c:	6922      	ldr	r2, [r4, #16]
 8010b0e:	1a98      	subs	r0, r3, r2
 8010b10:	6963      	ldr	r3, [r4, #20]
 8010b12:	b2f6      	uxtb	r6, r6
 8010b14:	4283      	cmp	r3, r0
 8010b16:	4637      	mov	r7, r6
 8010b18:	dc05      	bgt.n	8010b26 <__swbuf_r+0x4e>
 8010b1a:	4621      	mov	r1, r4
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	f7ff f9df 	bl	800fee0 <_fflush_r>
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d1ed      	bne.n	8010b02 <__swbuf_r+0x2a>
 8010b26:	68a3      	ldr	r3, [r4, #8]
 8010b28:	3b01      	subs	r3, #1
 8010b2a:	60a3      	str	r3, [r4, #8]
 8010b2c:	6823      	ldr	r3, [r4, #0]
 8010b2e:	1c5a      	adds	r2, r3, #1
 8010b30:	6022      	str	r2, [r4, #0]
 8010b32:	701e      	strb	r6, [r3, #0]
 8010b34:	6962      	ldr	r2, [r4, #20]
 8010b36:	1c43      	adds	r3, r0, #1
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d004      	beq.n	8010b46 <__swbuf_r+0x6e>
 8010b3c:	89a3      	ldrh	r3, [r4, #12]
 8010b3e:	07db      	lsls	r3, r3, #31
 8010b40:	d5e1      	bpl.n	8010b06 <__swbuf_r+0x2e>
 8010b42:	2e0a      	cmp	r6, #10
 8010b44:	d1df      	bne.n	8010b06 <__swbuf_r+0x2e>
 8010b46:	4621      	mov	r1, r4
 8010b48:	4628      	mov	r0, r5
 8010b4a:	f7ff f9c9 	bl	800fee0 <_fflush_r>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d0d9      	beq.n	8010b06 <__swbuf_r+0x2e>
 8010b52:	e7d6      	b.n	8010b02 <__swbuf_r+0x2a>

08010b54 <__swsetup_r>:
 8010b54:	b538      	push	{r3, r4, r5, lr}
 8010b56:	4b29      	ldr	r3, [pc, #164]	@ (8010bfc <__swsetup_r+0xa8>)
 8010b58:	4605      	mov	r5, r0
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	460c      	mov	r4, r1
 8010b5e:	b118      	cbz	r0, 8010b68 <__swsetup_r+0x14>
 8010b60:	6a03      	ldr	r3, [r0, #32]
 8010b62:	b90b      	cbnz	r3, 8010b68 <__swsetup_r+0x14>
 8010b64:	f7fe f924 	bl	800edb0 <__sinit>
 8010b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b6c:	0719      	lsls	r1, r3, #28
 8010b6e:	d422      	bmi.n	8010bb6 <__swsetup_r+0x62>
 8010b70:	06da      	lsls	r2, r3, #27
 8010b72:	d407      	bmi.n	8010b84 <__swsetup_r+0x30>
 8010b74:	2209      	movs	r2, #9
 8010b76:	602a      	str	r2, [r5, #0]
 8010b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b7c:	81a3      	strh	r3, [r4, #12]
 8010b7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b82:	e033      	b.n	8010bec <__swsetup_r+0x98>
 8010b84:	0758      	lsls	r0, r3, #29
 8010b86:	d512      	bpl.n	8010bae <__swsetup_r+0x5a>
 8010b88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b8a:	b141      	cbz	r1, 8010b9e <__swsetup_r+0x4a>
 8010b8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b90:	4299      	cmp	r1, r3
 8010b92:	d002      	beq.n	8010b9a <__swsetup_r+0x46>
 8010b94:	4628      	mov	r0, r5
 8010b96:	f7ff f82b 	bl	800fbf0 <_free_r>
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b9e:	89a3      	ldrh	r3, [r4, #12]
 8010ba0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010ba4:	81a3      	strh	r3, [r4, #12]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	6063      	str	r3, [r4, #4]
 8010baa:	6923      	ldr	r3, [r4, #16]
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	89a3      	ldrh	r3, [r4, #12]
 8010bb0:	f043 0308 	orr.w	r3, r3, #8
 8010bb4:	81a3      	strh	r3, [r4, #12]
 8010bb6:	6923      	ldr	r3, [r4, #16]
 8010bb8:	b94b      	cbnz	r3, 8010bce <__swsetup_r+0x7a>
 8010bba:	89a3      	ldrh	r3, [r4, #12]
 8010bbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bc4:	d003      	beq.n	8010bce <__swsetup_r+0x7a>
 8010bc6:	4621      	mov	r1, r4
 8010bc8:	4628      	mov	r0, r5
 8010bca:	f000 f83f 	bl	8010c4c <__smakebuf_r>
 8010bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bd2:	f013 0201 	ands.w	r2, r3, #1
 8010bd6:	d00a      	beq.n	8010bee <__swsetup_r+0x9a>
 8010bd8:	2200      	movs	r2, #0
 8010bda:	60a2      	str	r2, [r4, #8]
 8010bdc:	6962      	ldr	r2, [r4, #20]
 8010bde:	4252      	negs	r2, r2
 8010be0:	61a2      	str	r2, [r4, #24]
 8010be2:	6922      	ldr	r2, [r4, #16]
 8010be4:	b942      	cbnz	r2, 8010bf8 <__swsetup_r+0xa4>
 8010be6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010bea:	d1c5      	bne.n	8010b78 <__swsetup_r+0x24>
 8010bec:	bd38      	pop	{r3, r4, r5, pc}
 8010bee:	0799      	lsls	r1, r3, #30
 8010bf0:	bf58      	it	pl
 8010bf2:	6962      	ldrpl	r2, [r4, #20]
 8010bf4:	60a2      	str	r2, [r4, #8]
 8010bf6:	e7f4      	b.n	8010be2 <__swsetup_r+0x8e>
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	e7f7      	b.n	8010bec <__swsetup_r+0x98>
 8010bfc:	2000007c 	.word	0x2000007c

08010c00 <__swhatbuf_r>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	460c      	mov	r4, r1
 8010c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c08:	2900      	cmp	r1, #0
 8010c0a:	b096      	sub	sp, #88	@ 0x58
 8010c0c:	4615      	mov	r5, r2
 8010c0e:	461e      	mov	r6, r3
 8010c10:	da0d      	bge.n	8010c2e <__swhatbuf_r+0x2e>
 8010c12:	89a3      	ldrh	r3, [r4, #12]
 8010c14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010c18:	f04f 0100 	mov.w	r1, #0
 8010c1c:	bf14      	ite	ne
 8010c1e:	2340      	movne	r3, #64	@ 0x40
 8010c20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c24:	2000      	movs	r0, #0
 8010c26:	6031      	str	r1, [r6, #0]
 8010c28:	602b      	str	r3, [r5, #0]
 8010c2a:	b016      	add	sp, #88	@ 0x58
 8010c2c:	bd70      	pop	{r4, r5, r6, pc}
 8010c2e:	466a      	mov	r2, sp
 8010c30:	f000 f848 	bl	8010cc4 <_fstat_r>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	dbec      	blt.n	8010c12 <__swhatbuf_r+0x12>
 8010c38:	9901      	ldr	r1, [sp, #4]
 8010c3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c42:	4259      	negs	r1, r3
 8010c44:	4159      	adcs	r1, r3
 8010c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c4a:	e7eb      	b.n	8010c24 <__swhatbuf_r+0x24>

08010c4c <__smakebuf_r>:
 8010c4c:	898b      	ldrh	r3, [r1, #12]
 8010c4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c50:	079d      	lsls	r5, r3, #30
 8010c52:	4606      	mov	r6, r0
 8010c54:	460c      	mov	r4, r1
 8010c56:	d507      	bpl.n	8010c68 <__smakebuf_r+0x1c>
 8010c58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c5c:	6023      	str	r3, [r4, #0]
 8010c5e:	6123      	str	r3, [r4, #16]
 8010c60:	2301      	movs	r3, #1
 8010c62:	6163      	str	r3, [r4, #20]
 8010c64:	b003      	add	sp, #12
 8010c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c68:	ab01      	add	r3, sp, #4
 8010c6a:	466a      	mov	r2, sp
 8010c6c:	f7ff ffc8 	bl	8010c00 <__swhatbuf_r>
 8010c70:	9f00      	ldr	r7, [sp, #0]
 8010c72:	4605      	mov	r5, r0
 8010c74:	4639      	mov	r1, r7
 8010c76:	4630      	mov	r0, r6
 8010c78:	f7ff f82e 	bl	800fcd8 <_malloc_r>
 8010c7c:	b948      	cbnz	r0, 8010c92 <__smakebuf_r+0x46>
 8010c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c82:	059a      	lsls	r2, r3, #22
 8010c84:	d4ee      	bmi.n	8010c64 <__smakebuf_r+0x18>
 8010c86:	f023 0303 	bic.w	r3, r3, #3
 8010c8a:	f043 0302 	orr.w	r3, r3, #2
 8010c8e:	81a3      	strh	r3, [r4, #12]
 8010c90:	e7e2      	b.n	8010c58 <__smakebuf_r+0xc>
 8010c92:	89a3      	ldrh	r3, [r4, #12]
 8010c94:	6020      	str	r0, [r4, #0]
 8010c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c9a:	81a3      	strh	r3, [r4, #12]
 8010c9c:	9b01      	ldr	r3, [sp, #4]
 8010c9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ca2:	b15b      	cbz	r3, 8010cbc <__smakebuf_r+0x70>
 8010ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f000 f81d 	bl	8010ce8 <_isatty_r>
 8010cae:	b128      	cbz	r0, 8010cbc <__smakebuf_r+0x70>
 8010cb0:	89a3      	ldrh	r3, [r4, #12]
 8010cb2:	f023 0303 	bic.w	r3, r3, #3
 8010cb6:	f043 0301 	orr.w	r3, r3, #1
 8010cba:	81a3      	strh	r3, [r4, #12]
 8010cbc:	89a3      	ldrh	r3, [r4, #12]
 8010cbe:	431d      	orrs	r5, r3
 8010cc0:	81a5      	strh	r5, [r4, #12]
 8010cc2:	e7cf      	b.n	8010c64 <__smakebuf_r+0x18>

08010cc4 <_fstat_r>:
 8010cc4:	b538      	push	{r3, r4, r5, lr}
 8010cc6:	4d07      	ldr	r5, [pc, #28]	@ (8010ce4 <_fstat_r+0x20>)
 8010cc8:	2300      	movs	r3, #0
 8010cca:	4604      	mov	r4, r0
 8010ccc:	4608      	mov	r0, r1
 8010cce:	4611      	mov	r1, r2
 8010cd0:	602b      	str	r3, [r5, #0]
 8010cd2:	f7f4 fdb3 	bl	800583c <_fstat>
 8010cd6:	1c43      	adds	r3, r0, #1
 8010cd8:	d102      	bne.n	8010ce0 <_fstat_r+0x1c>
 8010cda:	682b      	ldr	r3, [r5, #0]
 8010cdc:	b103      	cbz	r3, 8010ce0 <_fstat_r+0x1c>
 8010cde:	6023      	str	r3, [r4, #0]
 8010ce0:	bd38      	pop	{r3, r4, r5, pc}
 8010ce2:	bf00      	nop
 8010ce4:	200056f0 	.word	0x200056f0

08010ce8 <_isatty_r>:
 8010ce8:	b538      	push	{r3, r4, r5, lr}
 8010cea:	4d06      	ldr	r5, [pc, #24]	@ (8010d04 <_isatty_r+0x1c>)
 8010cec:	2300      	movs	r3, #0
 8010cee:	4604      	mov	r4, r0
 8010cf0:	4608      	mov	r0, r1
 8010cf2:	602b      	str	r3, [r5, #0]
 8010cf4:	f7f4 fdb2 	bl	800585c <_isatty>
 8010cf8:	1c43      	adds	r3, r0, #1
 8010cfa:	d102      	bne.n	8010d02 <_isatty_r+0x1a>
 8010cfc:	682b      	ldr	r3, [r5, #0]
 8010cfe:	b103      	cbz	r3, 8010d02 <_isatty_r+0x1a>
 8010d00:	6023      	str	r3, [r4, #0]
 8010d02:	bd38      	pop	{r3, r4, r5, pc}
 8010d04:	200056f0 	.word	0x200056f0

08010d08 <_raise_r>:
 8010d08:	291f      	cmp	r1, #31
 8010d0a:	b538      	push	{r3, r4, r5, lr}
 8010d0c:	4605      	mov	r5, r0
 8010d0e:	460c      	mov	r4, r1
 8010d10:	d904      	bls.n	8010d1c <_raise_r+0x14>
 8010d12:	2316      	movs	r3, #22
 8010d14:	6003      	str	r3, [r0, #0]
 8010d16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d1a:	bd38      	pop	{r3, r4, r5, pc}
 8010d1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d1e:	b112      	cbz	r2, 8010d26 <_raise_r+0x1e>
 8010d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d24:	b94b      	cbnz	r3, 8010d3a <_raise_r+0x32>
 8010d26:	4628      	mov	r0, r5
 8010d28:	f000 f830 	bl	8010d8c <_getpid_r>
 8010d2c:	4622      	mov	r2, r4
 8010d2e:	4601      	mov	r1, r0
 8010d30:	4628      	mov	r0, r5
 8010d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d36:	f000 b817 	b.w	8010d68 <_kill_r>
 8010d3a:	2b01      	cmp	r3, #1
 8010d3c:	d00a      	beq.n	8010d54 <_raise_r+0x4c>
 8010d3e:	1c59      	adds	r1, r3, #1
 8010d40:	d103      	bne.n	8010d4a <_raise_r+0x42>
 8010d42:	2316      	movs	r3, #22
 8010d44:	6003      	str	r3, [r0, #0]
 8010d46:	2001      	movs	r0, #1
 8010d48:	e7e7      	b.n	8010d1a <_raise_r+0x12>
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d50:	4620      	mov	r0, r4
 8010d52:	4798      	blx	r3
 8010d54:	2000      	movs	r0, #0
 8010d56:	e7e0      	b.n	8010d1a <_raise_r+0x12>

08010d58 <raise>:
 8010d58:	4b02      	ldr	r3, [pc, #8]	@ (8010d64 <raise+0xc>)
 8010d5a:	4601      	mov	r1, r0
 8010d5c:	6818      	ldr	r0, [r3, #0]
 8010d5e:	f7ff bfd3 	b.w	8010d08 <_raise_r>
 8010d62:	bf00      	nop
 8010d64:	2000007c 	.word	0x2000007c

08010d68 <_kill_r>:
 8010d68:	b538      	push	{r3, r4, r5, lr}
 8010d6a:	4d07      	ldr	r5, [pc, #28]	@ (8010d88 <_kill_r+0x20>)
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	4604      	mov	r4, r0
 8010d70:	4608      	mov	r0, r1
 8010d72:	4611      	mov	r1, r2
 8010d74:	602b      	str	r3, [r5, #0]
 8010d76:	f7f4 fd01 	bl	800577c <_kill>
 8010d7a:	1c43      	adds	r3, r0, #1
 8010d7c:	d102      	bne.n	8010d84 <_kill_r+0x1c>
 8010d7e:	682b      	ldr	r3, [r5, #0]
 8010d80:	b103      	cbz	r3, 8010d84 <_kill_r+0x1c>
 8010d82:	6023      	str	r3, [r4, #0]
 8010d84:	bd38      	pop	{r3, r4, r5, pc}
 8010d86:	bf00      	nop
 8010d88:	200056f0 	.word	0x200056f0

08010d8c <_getpid_r>:
 8010d8c:	f7f4 bcee 	b.w	800576c <_getpid>

08010d90 <cos>:
 8010d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d92:	ec53 2b10 	vmov	r2, r3, d0
 8010d96:	4826      	ldr	r0, [pc, #152]	@ (8010e30 <cos+0xa0>)
 8010d98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010d9c:	4281      	cmp	r1, r0
 8010d9e:	d806      	bhi.n	8010dae <cos+0x1e>
 8010da0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010e28 <cos+0x98>
 8010da4:	b005      	add	sp, #20
 8010da6:	f85d eb04 	ldr.w	lr, [sp], #4
 8010daa:	f000 bded 	b.w	8011988 <__kernel_cos>
 8010dae:	4821      	ldr	r0, [pc, #132]	@ (8010e34 <cos+0xa4>)
 8010db0:	4281      	cmp	r1, r0
 8010db2:	d908      	bls.n	8010dc6 <cos+0x36>
 8010db4:	4610      	mov	r0, r2
 8010db6:	4619      	mov	r1, r3
 8010db8:	f7ef fa66 	bl	8000288 <__aeabi_dsub>
 8010dbc:	ec41 0b10 	vmov	d0, r0, r1
 8010dc0:	b005      	add	sp, #20
 8010dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dc6:	4668      	mov	r0, sp
 8010dc8:	f000 f88a 	bl	8010ee0 <__ieee754_rem_pio2>
 8010dcc:	f000 0003 	and.w	r0, r0, #3
 8010dd0:	2801      	cmp	r0, #1
 8010dd2:	d00b      	beq.n	8010dec <cos+0x5c>
 8010dd4:	2802      	cmp	r0, #2
 8010dd6:	d015      	beq.n	8010e04 <cos+0x74>
 8010dd8:	b9d8      	cbnz	r0, 8010e12 <cos+0x82>
 8010dda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dde:	ed9d 0b00 	vldr	d0, [sp]
 8010de2:	f000 fdd1 	bl	8011988 <__kernel_cos>
 8010de6:	ec51 0b10 	vmov	r0, r1, d0
 8010dea:	e7e7      	b.n	8010dbc <cos+0x2c>
 8010dec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010df0:	ed9d 0b00 	vldr	d0, [sp]
 8010df4:	f000 fe90 	bl	8011b18 <__kernel_sin>
 8010df8:	ec53 2b10 	vmov	r2, r3, d0
 8010dfc:	4610      	mov	r0, r2
 8010dfe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010e02:	e7db      	b.n	8010dbc <cos+0x2c>
 8010e04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e08:	ed9d 0b00 	vldr	d0, [sp]
 8010e0c:	f000 fdbc 	bl	8011988 <__kernel_cos>
 8010e10:	e7f2      	b.n	8010df8 <cos+0x68>
 8010e12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e16:	ed9d 0b00 	vldr	d0, [sp]
 8010e1a:	2001      	movs	r0, #1
 8010e1c:	f000 fe7c 	bl	8011b18 <__kernel_sin>
 8010e20:	e7e1      	b.n	8010de6 <cos+0x56>
 8010e22:	bf00      	nop
 8010e24:	f3af 8000 	nop.w
	...
 8010e30:	3fe921fb 	.word	0x3fe921fb
 8010e34:	7fefffff 	.word	0x7fefffff

08010e38 <sin>:
 8010e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e3a:	ec53 2b10 	vmov	r2, r3, d0
 8010e3e:	4826      	ldr	r0, [pc, #152]	@ (8010ed8 <sin+0xa0>)
 8010e40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010e44:	4281      	cmp	r1, r0
 8010e46:	d807      	bhi.n	8010e58 <sin+0x20>
 8010e48:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010ed0 <sin+0x98>
 8010e4c:	2000      	movs	r0, #0
 8010e4e:	b005      	add	sp, #20
 8010e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e54:	f000 be60 	b.w	8011b18 <__kernel_sin>
 8010e58:	4820      	ldr	r0, [pc, #128]	@ (8010edc <sin+0xa4>)
 8010e5a:	4281      	cmp	r1, r0
 8010e5c:	d908      	bls.n	8010e70 <sin+0x38>
 8010e5e:	4610      	mov	r0, r2
 8010e60:	4619      	mov	r1, r3
 8010e62:	f7ef fa11 	bl	8000288 <__aeabi_dsub>
 8010e66:	ec41 0b10 	vmov	d0, r0, r1
 8010e6a:	b005      	add	sp, #20
 8010e6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e70:	4668      	mov	r0, sp
 8010e72:	f000 f835 	bl	8010ee0 <__ieee754_rem_pio2>
 8010e76:	f000 0003 	and.w	r0, r0, #3
 8010e7a:	2801      	cmp	r0, #1
 8010e7c:	d00c      	beq.n	8010e98 <sin+0x60>
 8010e7e:	2802      	cmp	r0, #2
 8010e80:	d011      	beq.n	8010ea6 <sin+0x6e>
 8010e82:	b9e8      	cbnz	r0, 8010ec0 <sin+0x88>
 8010e84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e88:	ed9d 0b00 	vldr	d0, [sp]
 8010e8c:	2001      	movs	r0, #1
 8010e8e:	f000 fe43 	bl	8011b18 <__kernel_sin>
 8010e92:	ec51 0b10 	vmov	r0, r1, d0
 8010e96:	e7e6      	b.n	8010e66 <sin+0x2e>
 8010e98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e9c:	ed9d 0b00 	vldr	d0, [sp]
 8010ea0:	f000 fd72 	bl	8011988 <__kernel_cos>
 8010ea4:	e7f5      	b.n	8010e92 <sin+0x5a>
 8010ea6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010eaa:	ed9d 0b00 	vldr	d0, [sp]
 8010eae:	2001      	movs	r0, #1
 8010eb0:	f000 fe32 	bl	8011b18 <__kernel_sin>
 8010eb4:	ec53 2b10 	vmov	r2, r3, d0
 8010eb8:	4610      	mov	r0, r2
 8010eba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010ebe:	e7d2      	b.n	8010e66 <sin+0x2e>
 8010ec0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ec4:	ed9d 0b00 	vldr	d0, [sp]
 8010ec8:	f000 fd5e 	bl	8011988 <__kernel_cos>
 8010ecc:	e7f2      	b.n	8010eb4 <sin+0x7c>
 8010ece:	bf00      	nop
	...
 8010ed8:	3fe921fb 	.word	0x3fe921fb
 8010edc:	7fefffff 	.word	0x7fefffff

08010ee0 <__ieee754_rem_pio2>:
 8010ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee4:	ec57 6b10 	vmov	r6, r7, d0
 8010ee8:	4bc5      	ldr	r3, [pc, #788]	@ (8011200 <__ieee754_rem_pio2+0x320>)
 8010eea:	b08d      	sub	sp, #52	@ 0x34
 8010eec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010ef0:	4598      	cmp	r8, r3
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	9704      	str	r7, [sp, #16]
 8010ef6:	d807      	bhi.n	8010f08 <__ieee754_rem_pio2+0x28>
 8010ef8:	2200      	movs	r2, #0
 8010efa:	2300      	movs	r3, #0
 8010efc:	ed80 0b00 	vstr	d0, [r0]
 8010f00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010f04:	2500      	movs	r5, #0
 8010f06:	e028      	b.n	8010f5a <__ieee754_rem_pio2+0x7a>
 8010f08:	4bbe      	ldr	r3, [pc, #760]	@ (8011204 <__ieee754_rem_pio2+0x324>)
 8010f0a:	4598      	cmp	r8, r3
 8010f0c:	d878      	bhi.n	8011000 <__ieee754_rem_pio2+0x120>
 8010f0e:	9b04      	ldr	r3, [sp, #16]
 8010f10:	4dbd      	ldr	r5, [pc, #756]	@ (8011208 <__ieee754_rem_pio2+0x328>)
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	4630      	mov	r0, r6
 8010f16:	a3ac      	add	r3, pc, #688	@ (adr r3, 80111c8 <__ieee754_rem_pio2+0x2e8>)
 8010f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1c:	4639      	mov	r1, r7
 8010f1e:	dd38      	ble.n	8010f92 <__ieee754_rem_pio2+0xb2>
 8010f20:	f7ef f9b2 	bl	8000288 <__aeabi_dsub>
 8010f24:	45a8      	cmp	r8, r5
 8010f26:	4606      	mov	r6, r0
 8010f28:	460f      	mov	r7, r1
 8010f2a:	d01a      	beq.n	8010f62 <__ieee754_rem_pio2+0x82>
 8010f2c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80111d0 <__ieee754_rem_pio2+0x2f0>)
 8010f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f32:	f7ef f9a9 	bl	8000288 <__aeabi_dsub>
 8010f36:	4602      	mov	r2, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	4680      	mov	r8, r0
 8010f3c:	4689      	mov	r9, r1
 8010f3e:	4630      	mov	r0, r6
 8010f40:	4639      	mov	r1, r7
 8010f42:	f7ef f9a1 	bl	8000288 <__aeabi_dsub>
 8010f46:	a3a2      	add	r3, pc, #648	@ (adr r3, 80111d0 <__ieee754_rem_pio2+0x2f0>)
 8010f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4c:	f7ef f99c 	bl	8000288 <__aeabi_dsub>
 8010f50:	e9c4 8900 	strd	r8, r9, [r4]
 8010f54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010f58:	2501      	movs	r5, #1
 8010f5a:	4628      	mov	r0, r5
 8010f5c:	b00d      	add	sp, #52	@ 0x34
 8010f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f62:	a39d      	add	r3, pc, #628	@ (adr r3, 80111d8 <__ieee754_rem_pio2+0x2f8>)
 8010f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f68:	f7ef f98e 	bl	8000288 <__aeabi_dsub>
 8010f6c:	a39c      	add	r3, pc, #624	@ (adr r3, 80111e0 <__ieee754_rem_pio2+0x300>)
 8010f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f72:	4606      	mov	r6, r0
 8010f74:	460f      	mov	r7, r1
 8010f76:	f7ef f987 	bl	8000288 <__aeabi_dsub>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	4680      	mov	r8, r0
 8010f80:	4689      	mov	r9, r1
 8010f82:	4630      	mov	r0, r6
 8010f84:	4639      	mov	r1, r7
 8010f86:	f7ef f97f 	bl	8000288 <__aeabi_dsub>
 8010f8a:	a395      	add	r3, pc, #596	@ (adr r3, 80111e0 <__ieee754_rem_pio2+0x300>)
 8010f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f90:	e7dc      	b.n	8010f4c <__ieee754_rem_pio2+0x6c>
 8010f92:	f7ef f97b 	bl	800028c <__adddf3>
 8010f96:	45a8      	cmp	r8, r5
 8010f98:	4606      	mov	r6, r0
 8010f9a:	460f      	mov	r7, r1
 8010f9c:	d018      	beq.n	8010fd0 <__ieee754_rem_pio2+0xf0>
 8010f9e:	a38c      	add	r3, pc, #560	@ (adr r3, 80111d0 <__ieee754_rem_pio2+0x2f0>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	f7ef f972 	bl	800028c <__adddf3>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	4680      	mov	r8, r0
 8010fae:	4689      	mov	r9, r1
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	4639      	mov	r1, r7
 8010fb4:	f7ef f968 	bl	8000288 <__aeabi_dsub>
 8010fb8:	a385      	add	r3, pc, #532	@ (adr r3, 80111d0 <__ieee754_rem_pio2+0x2f0>)
 8010fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbe:	f7ef f965 	bl	800028c <__adddf3>
 8010fc2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010fc6:	e9c4 8900 	strd	r8, r9, [r4]
 8010fca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010fce:	e7c4      	b.n	8010f5a <__ieee754_rem_pio2+0x7a>
 8010fd0:	a381      	add	r3, pc, #516	@ (adr r3, 80111d8 <__ieee754_rem_pio2+0x2f8>)
 8010fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd6:	f7ef f959 	bl	800028c <__adddf3>
 8010fda:	a381      	add	r3, pc, #516	@ (adr r3, 80111e0 <__ieee754_rem_pio2+0x300>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	460f      	mov	r7, r1
 8010fe4:	f7ef f952 	bl	800028c <__adddf3>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	460b      	mov	r3, r1
 8010fec:	4680      	mov	r8, r0
 8010fee:	4689      	mov	r9, r1
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	4639      	mov	r1, r7
 8010ff4:	f7ef f948 	bl	8000288 <__aeabi_dsub>
 8010ff8:	a379      	add	r3, pc, #484	@ (adr r3, 80111e0 <__ieee754_rem_pio2+0x300>)
 8010ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffe:	e7de      	b.n	8010fbe <__ieee754_rem_pio2+0xde>
 8011000:	4b82      	ldr	r3, [pc, #520]	@ (801120c <__ieee754_rem_pio2+0x32c>)
 8011002:	4598      	cmp	r8, r3
 8011004:	f200 80d1 	bhi.w	80111aa <__ieee754_rem_pio2+0x2ca>
 8011008:	f000 fe40 	bl	8011c8c <fabs>
 801100c:	ec57 6b10 	vmov	r6, r7, d0
 8011010:	a375      	add	r3, pc, #468	@ (adr r3, 80111e8 <__ieee754_rem_pio2+0x308>)
 8011012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011016:	4630      	mov	r0, r6
 8011018:	4639      	mov	r1, r7
 801101a:	f7ef faed 	bl	80005f8 <__aeabi_dmul>
 801101e:	4b7c      	ldr	r3, [pc, #496]	@ (8011210 <__ieee754_rem_pio2+0x330>)
 8011020:	2200      	movs	r2, #0
 8011022:	f7ef f933 	bl	800028c <__adddf3>
 8011026:	f7ef fd97 	bl	8000b58 <__aeabi_d2iz>
 801102a:	4605      	mov	r5, r0
 801102c:	f7ef fa7a 	bl	8000524 <__aeabi_i2d>
 8011030:	4602      	mov	r2, r0
 8011032:	460b      	mov	r3, r1
 8011034:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011038:	a363      	add	r3, pc, #396	@ (adr r3, 80111c8 <__ieee754_rem_pio2+0x2e8>)
 801103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103e:	f7ef fadb 	bl	80005f8 <__aeabi_dmul>
 8011042:	4602      	mov	r2, r0
 8011044:	460b      	mov	r3, r1
 8011046:	4630      	mov	r0, r6
 8011048:	4639      	mov	r1, r7
 801104a:	f7ef f91d 	bl	8000288 <__aeabi_dsub>
 801104e:	a360      	add	r3, pc, #384	@ (adr r3, 80111d0 <__ieee754_rem_pio2+0x2f0>)
 8011050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011054:	4682      	mov	sl, r0
 8011056:	468b      	mov	fp, r1
 8011058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801105c:	f7ef facc 	bl	80005f8 <__aeabi_dmul>
 8011060:	2d1f      	cmp	r5, #31
 8011062:	4606      	mov	r6, r0
 8011064:	460f      	mov	r7, r1
 8011066:	dc0c      	bgt.n	8011082 <__ieee754_rem_pio2+0x1a2>
 8011068:	4b6a      	ldr	r3, [pc, #424]	@ (8011214 <__ieee754_rem_pio2+0x334>)
 801106a:	1e6a      	subs	r2, r5, #1
 801106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011070:	4543      	cmp	r3, r8
 8011072:	d006      	beq.n	8011082 <__ieee754_rem_pio2+0x1a2>
 8011074:	4632      	mov	r2, r6
 8011076:	463b      	mov	r3, r7
 8011078:	4650      	mov	r0, sl
 801107a:	4659      	mov	r1, fp
 801107c:	f7ef f904 	bl	8000288 <__aeabi_dsub>
 8011080:	e00e      	b.n	80110a0 <__ieee754_rem_pio2+0x1c0>
 8011082:	463b      	mov	r3, r7
 8011084:	4632      	mov	r2, r6
 8011086:	4650      	mov	r0, sl
 8011088:	4659      	mov	r1, fp
 801108a:	f7ef f8fd 	bl	8000288 <__aeabi_dsub>
 801108e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011092:	9305      	str	r3, [sp, #20]
 8011094:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011098:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801109c:	2b10      	cmp	r3, #16
 801109e:	dc02      	bgt.n	80110a6 <__ieee754_rem_pio2+0x1c6>
 80110a0:	e9c4 0100 	strd	r0, r1, [r4]
 80110a4:	e039      	b.n	801111a <__ieee754_rem_pio2+0x23a>
 80110a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80111d8 <__ieee754_rem_pio2+0x2f8>)
 80110a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110b0:	f7ef faa2 	bl	80005f8 <__aeabi_dmul>
 80110b4:	4606      	mov	r6, r0
 80110b6:	460f      	mov	r7, r1
 80110b8:	4602      	mov	r2, r0
 80110ba:	460b      	mov	r3, r1
 80110bc:	4650      	mov	r0, sl
 80110be:	4659      	mov	r1, fp
 80110c0:	f7ef f8e2 	bl	8000288 <__aeabi_dsub>
 80110c4:	4602      	mov	r2, r0
 80110c6:	460b      	mov	r3, r1
 80110c8:	4680      	mov	r8, r0
 80110ca:	4689      	mov	r9, r1
 80110cc:	4650      	mov	r0, sl
 80110ce:	4659      	mov	r1, fp
 80110d0:	f7ef f8da 	bl	8000288 <__aeabi_dsub>
 80110d4:	4632      	mov	r2, r6
 80110d6:	463b      	mov	r3, r7
 80110d8:	f7ef f8d6 	bl	8000288 <__aeabi_dsub>
 80110dc:	a340      	add	r3, pc, #256	@ (adr r3, 80111e0 <__ieee754_rem_pio2+0x300>)
 80110de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e2:	4606      	mov	r6, r0
 80110e4:	460f      	mov	r7, r1
 80110e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110ea:	f7ef fa85 	bl	80005f8 <__aeabi_dmul>
 80110ee:	4632      	mov	r2, r6
 80110f0:	463b      	mov	r3, r7
 80110f2:	f7ef f8c9 	bl	8000288 <__aeabi_dsub>
 80110f6:	4602      	mov	r2, r0
 80110f8:	460b      	mov	r3, r1
 80110fa:	4606      	mov	r6, r0
 80110fc:	460f      	mov	r7, r1
 80110fe:	4640      	mov	r0, r8
 8011100:	4649      	mov	r1, r9
 8011102:	f7ef f8c1 	bl	8000288 <__aeabi_dsub>
 8011106:	9a05      	ldr	r2, [sp, #20]
 8011108:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801110c:	1ad3      	subs	r3, r2, r3
 801110e:	2b31      	cmp	r3, #49	@ 0x31
 8011110:	dc20      	bgt.n	8011154 <__ieee754_rem_pio2+0x274>
 8011112:	e9c4 0100 	strd	r0, r1, [r4]
 8011116:	46c2      	mov	sl, r8
 8011118:	46cb      	mov	fp, r9
 801111a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801111e:	4650      	mov	r0, sl
 8011120:	4642      	mov	r2, r8
 8011122:	464b      	mov	r3, r9
 8011124:	4659      	mov	r1, fp
 8011126:	f7ef f8af 	bl	8000288 <__aeabi_dsub>
 801112a:	463b      	mov	r3, r7
 801112c:	4632      	mov	r2, r6
 801112e:	f7ef f8ab 	bl	8000288 <__aeabi_dsub>
 8011132:	9b04      	ldr	r3, [sp, #16]
 8011134:	2b00      	cmp	r3, #0
 8011136:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801113a:	f6bf af0e 	bge.w	8010f5a <__ieee754_rem_pio2+0x7a>
 801113e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8011142:	6063      	str	r3, [r4, #4]
 8011144:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011148:	f8c4 8000 	str.w	r8, [r4]
 801114c:	60a0      	str	r0, [r4, #8]
 801114e:	60e3      	str	r3, [r4, #12]
 8011150:	426d      	negs	r5, r5
 8011152:	e702      	b.n	8010f5a <__ieee754_rem_pio2+0x7a>
 8011154:	a326      	add	r3, pc, #152	@ (adr r3, 80111f0 <__ieee754_rem_pio2+0x310>)
 8011156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801115e:	f7ef fa4b 	bl	80005f8 <__aeabi_dmul>
 8011162:	4606      	mov	r6, r0
 8011164:	460f      	mov	r7, r1
 8011166:	4602      	mov	r2, r0
 8011168:	460b      	mov	r3, r1
 801116a:	4640      	mov	r0, r8
 801116c:	4649      	mov	r1, r9
 801116e:	f7ef f88b 	bl	8000288 <__aeabi_dsub>
 8011172:	4602      	mov	r2, r0
 8011174:	460b      	mov	r3, r1
 8011176:	4682      	mov	sl, r0
 8011178:	468b      	mov	fp, r1
 801117a:	4640      	mov	r0, r8
 801117c:	4649      	mov	r1, r9
 801117e:	f7ef f883 	bl	8000288 <__aeabi_dsub>
 8011182:	4632      	mov	r2, r6
 8011184:	463b      	mov	r3, r7
 8011186:	f7ef f87f 	bl	8000288 <__aeabi_dsub>
 801118a:	a31b      	add	r3, pc, #108	@ (adr r3, 80111f8 <__ieee754_rem_pio2+0x318>)
 801118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011190:	4606      	mov	r6, r0
 8011192:	460f      	mov	r7, r1
 8011194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011198:	f7ef fa2e 	bl	80005f8 <__aeabi_dmul>
 801119c:	4632      	mov	r2, r6
 801119e:	463b      	mov	r3, r7
 80111a0:	f7ef f872 	bl	8000288 <__aeabi_dsub>
 80111a4:	4606      	mov	r6, r0
 80111a6:	460f      	mov	r7, r1
 80111a8:	e764      	b.n	8011074 <__ieee754_rem_pio2+0x194>
 80111aa:	4b1b      	ldr	r3, [pc, #108]	@ (8011218 <__ieee754_rem_pio2+0x338>)
 80111ac:	4598      	cmp	r8, r3
 80111ae:	d935      	bls.n	801121c <__ieee754_rem_pio2+0x33c>
 80111b0:	4632      	mov	r2, r6
 80111b2:	463b      	mov	r3, r7
 80111b4:	4630      	mov	r0, r6
 80111b6:	4639      	mov	r1, r7
 80111b8:	f7ef f866 	bl	8000288 <__aeabi_dsub>
 80111bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80111c0:	e9c4 0100 	strd	r0, r1, [r4]
 80111c4:	e69e      	b.n	8010f04 <__ieee754_rem_pio2+0x24>
 80111c6:	bf00      	nop
 80111c8:	54400000 	.word	0x54400000
 80111cc:	3ff921fb 	.word	0x3ff921fb
 80111d0:	1a626331 	.word	0x1a626331
 80111d4:	3dd0b461 	.word	0x3dd0b461
 80111d8:	1a600000 	.word	0x1a600000
 80111dc:	3dd0b461 	.word	0x3dd0b461
 80111e0:	2e037073 	.word	0x2e037073
 80111e4:	3ba3198a 	.word	0x3ba3198a
 80111e8:	6dc9c883 	.word	0x6dc9c883
 80111ec:	3fe45f30 	.word	0x3fe45f30
 80111f0:	2e000000 	.word	0x2e000000
 80111f4:	3ba3198a 	.word	0x3ba3198a
 80111f8:	252049c1 	.word	0x252049c1
 80111fc:	397b839a 	.word	0x397b839a
 8011200:	3fe921fb 	.word	0x3fe921fb
 8011204:	4002d97b 	.word	0x4002d97b
 8011208:	3ff921fb 	.word	0x3ff921fb
 801120c:	413921fb 	.word	0x413921fb
 8011210:	3fe00000 	.word	0x3fe00000
 8011214:	08012370 	.word	0x08012370
 8011218:	7fefffff 	.word	0x7fefffff
 801121c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011220:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8011224:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011228:	4630      	mov	r0, r6
 801122a:	460f      	mov	r7, r1
 801122c:	f7ef fc94 	bl	8000b58 <__aeabi_d2iz>
 8011230:	f7ef f978 	bl	8000524 <__aeabi_i2d>
 8011234:	4602      	mov	r2, r0
 8011236:	460b      	mov	r3, r1
 8011238:	4630      	mov	r0, r6
 801123a:	4639      	mov	r1, r7
 801123c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011240:	f7ef f822 	bl	8000288 <__aeabi_dsub>
 8011244:	4b22      	ldr	r3, [pc, #136]	@ (80112d0 <__ieee754_rem_pio2+0x3f0>)
 8011246:	2200      	movs	r2, #0
 8011248:	f7ef f9d6 	bl	80005f8 <__aeabi_dmul>
 801124c:	460f      	mov	r7, r1
 801124e:	4606      	mov	r6, r0
 8011250:	f7ef fc82 	bl	8000b58 <__aeabi_d2iz>
 8011254:	f7ef f966 	bl	8000524 <__aeabi_i2d>
 8011258:	4602      	mov	r2, r0
 801125a:	460b      	mov	r3, r1
 801125c:	4630      	mov	r0, r6
 801125e:	4639      	mov	r1, r7
 8011260:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011264:	f7ef f810 	bl	8000288 <__aeabi_dsub>
 8011268:	4b19      	ldr	r3, [pc, #100]	@ (80112d0 <__ieee754_rem_pio2+0x3f0>)
 801126a:	2200      	movs	r2, #0
 801126c:	f7ef f9c4 	bl	80005f8 <__aeabi_dmul>
 8011270:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8011274:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011278:	f04f 0803 	mov.w	r8, #3
 801127c:	2600      	movs	r6, #0
 801127e:	2700      	movs	r7, #0
 8011280:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011284:	4632      	mov	r2, r6
 8011286:	463b      	mov	r3, r7
 8011288:	46c2      	mov	sl, r8
 801128a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801128e:	f7ef fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011292:	2800      	cmp	r0, #0
 8011294:	d1f4      	bne.n	8011280 <__ieee754_rem_pio2+0x3a0>
 8011296:	4b0f      	ldr	r3, [pc, #60]	@ (80112d4 <__ieee754_rem_pio2+0x3f4>)
 8011298:	9301      	str	r3, [sp, #4]
 801129a:	2302      	movs	r3, #2
 801129c:	9300      	str	r3, [sp, #0]
 801129e:	462a      	mov	r2, r5
 80112a0:	4653      	mov	r3, sl
 80112a2:	4621      	mov	r1, r4
 80112a4:	a806      	add	r0, sp, #24
 80112a6:	f000 f817 	bl	80112d8 <__kernel_rem_pio2>
 80112aa:	9b04      	ldr	r3, [sp, #16]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	4605      	mov	r5, r0
 80112b0:	f6bf ae53 	bge.w	8010f5a <__ieee754_rem_pio2+0x7a>
 80112b4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80112b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112bc:	e9c4 2300 	strd	r2, r3, [r4]
 80112c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80112c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80112cc:	e740      	b.n	8011150 <__ieee754_rem_pio2+0x270>
 80112ce:	bf00      	nop
 80112d0:	41700000 	.word	0x41700000
 80112d4:	080123f0 	.word	0x080123f0

080112d8 <__kernel_rem_pio2>:
 80112d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112dc:	ed2d 8b02 	vpush	{d8}
 80112e0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80112e4:	f112 0f14 	cmn.w	r2, #20
 80112e8:	9306      	str	r3, [sp, #24]
 80112ea:	9104      	str	r1, [sp, #16]
 80112ec:	4bbe      	ldr	r3, [pc, #760]	@ (80115e8 <__kernel_rem_pio2+0x310>)
 80112ee:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80112f0:	9008      	str	r0, [sp, #32]
 80112f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80112f6:	9300      	str	r3, [sp, #0]
 80112f8:	9b06      	ldr	r3, [sp, #24]
 80112fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80112fe:	bfa8      	it	ge
 8011300:	1ed4      	subge	r4, r2, #3
 8011302:	9305      	str	r3, [sp, #20]
 8011304:	bfb2      	itee	lt
 8011306:	2400      	movlt	r4, #0
 8011308:	2318      	movge	r3, #24
 801130a:	fb94 f4f3 	sdivge	r4, r4, r3
 801130e:	f06f 0317 	mvn.w	r3, #23
 8011312:	fb04 3303 	mla	r3, r4, r3, r3
 8011316:	eb03 0b02 	add.w	fp, r3, r2
 801131a:	9b00      	ldr	r3, [sp, #0]
 801131c:	9a05      	ldr	r2, [sp, #20]
 801131e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80115d8 <__kernel_rem_pio2+0x300>
 8011322:	eb03 0802 	add.w	r8, r3, r2
 8011326:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011328:	1aa7      	subs	r7, r4, r2
 801132a:	ae20      	add	r6, sp, #128	@ 0x80
 801132c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011330:	2500      	movs	r5, #0
 8011332:	4545      	cmp	r5, r8
 8011334:	dd13      	ble.n	801135e <__kernel_rem_pio2+0x86>
 8011336:	9b06      	ldr	r3, [sp, #24]
 8011338:	aa20      	add	r2, sp, #128	@ 0x80
 801133a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801133e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011342:	f04f 0800 	mov.w	r8, #0
 8011346:	9b00      	ldr	r3, [sp, #0]
 8011348:	4598      	cmp	r8, r3
 801134a:	dc31      	bgt.n	80113b0 <__kernel_rem_pio2+0xd8>
 801134c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80115d8 <__kernel_rem_pio2+0x300>
 8011350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011354:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011358:	462f      	mov	r7, r5
 801135a:	2600      	movs	r6, #0
 801135c:	e01b      	b.n	8011396 <__kernel_rem_pio2+0xbe>
 801135e:	42ef      	cmn	r7, r5
 8011360:	d407      	bmi.n	8011372 <__kernel_rem_pio2+0x9a>
 8011362:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011366:	f7ef f8dd 	bl	8000524 <__aeabi_i2d>
 801136a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801136e:	3501      	adds	r5, #1
 8011370:	e7df      	b.n	8011332 <__kernel_rem_pio2+0x5a>
 8011372:	ec51 0b18 	vmov	r0, r1, d8
 8011376:	e7f8      	b.n	801136a <__kernel_rem_pio2+0x92>
 8011378:	e9d7 2300 	ldrd	r2, r3, [r7]
 801137c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011380:	f7ef f93a 	bl	80005f8 <__aeabi_dmul>
 8011384:	4602      	mov	r2, r0
 8011386:	460b      	mov	r3, r1
 8011388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801138c:	f7ee ff7e 	bl	800028c <__adddf3>
 8011390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011394:	3601      	adds	r6, #1
 8011396:	9b05      	ldr	r3, [sp, #20]
 8011398:	429e      	cmp	r6, r3
 801139a:	f1a7 0708 	sub.w	r7, r7, #8
 801139e:	ddeb      	ble.n	8011378 <__kernel_rem_pio2+0xa0>
 80113a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113a4:	f108 0801 	add.w	r8, r8, #1
 80113a8:	ecaa 7b02 	vstmia	sl!, {d7}
 80113ac:	3508      	adds	r5, #8
 80113ae:	e7ca      	b.n	8011346 <__kernel_rem_pio2+0x6e>
 80113b0:	9b00      	ldr	r3, [sp, #0]
 80113b2:	f8dd 8000 	ldr.w	r8, [sp]
 80113b6:	aa0c      	add	r2, sp, #48	@ 0x30
 80113b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80113bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80113be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80113c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80113c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80113c6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80113ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113cc:	ab98      	add	r3, sp, #608	@ 0x260
 80113ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80113d2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80113d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80113da:	ac0c      	add	r4, sp, #48	@ 0x30
 80113dc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80113de:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80113e2:	46a1      	mov	r9, r4
 80113e4:	46c2      	mov	sl, r8
 80113e6:	f1ba 0f00 	cmp.w	sl, #0
 80113ea:	f1a5 0508 	sub.w	r5, r5, #8
 80113ee:	dc77      	bgt.n	80114e0 <__kernel_rem_pio2+0x208>
 80113f0:	4658      	mov	r0, fp
 80113f2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80113f6:	f000 fc53 	bl	8011ca0 <scalbn>
 80113fa:	ec57 6b10 	vmov	r6, r7, d0
 80113fe:	2200      	movs	r2, #0
 8011400:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011404:	4630      	mov	r0, r6
 8011406:	4639      	mov	r1, r7
 8011408:	f7ef f8f6 	bl	80005f8 <__aeabi_dmul>
 801140c:	ec41 0b10 	vmov	d0, r0, r1
 8011410:	f000 fcc6 	bl	8011da0 <floor>
 8011414:	4b75      	ldr	r3, [pc, #468]	@ (80115ec <__kernel_rem_pio2+0x314>)
 8011416:	ec51 0b10 	vmov	r0, r1, d0
 801141a:	2200      	movs	r2, #0
 801141c:	f7ef f8ec 	bl	80005f8 <__aeabi_dmul>
 8011420:	4602      	mov	r2, r0
 8011422:	460b      	mov	r3, r1
 8011424:	4630      	mov	r0, r6
 8011426:	4639      	mov	r1, r7
 8011428:	f7ee ff2e 	bl	8000288 <__aeabi_dsub>
 801142c:	460f      	mov	r7, r1
 801142e:	4606      	mov	r6, r0
 8011430:	f7ef fb92 	bl	8000b58 <__aeabi_d2iz>
 8011434:	9002      	str	r0, [sp, #8]
 8011436:	f7ef f875 	bl	8000524 <__aeabi_i2d>
 801143a:	4602      	mov	r2, r0
 801143c:	460b      	mov	r3, r1
 801143e:	4630      	mov	r0, r6
 8011440:	4639      	mov	r1, r7
 8011442:	f7ee ff21 	bl	8000288 <__aeabi_dsub>
 8011446:	f1bb 0f00 	cmp.w	fp, #0
 801144a:	4606      	mov	r6, r0
 801144c:	460f      	mov	r7, r1
 801144e:	dd6c      	ble.n	801152a <__kernel_rem_pio2+0x252>
 8011450:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011454:	ab0c      	add	r3, sp, #48	@ 0x30
 8011456:	9d02      	ldr	r5, [sp, #8]
 8011458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801145c:	f1cb 0018 	rsb	r0, fp, #24
 8011460:	fa43 f200 	asr.w	r2, r3, r0
 8011464:	4415      	add	r5, r2
 8011466:	4082      	lsls	r2, r0
 8011468:	1a9b      	subs	r3, r3, r2
 801146a:	aa0c      	add	r2, sp, #48	@ 0x30
 801146c:	9502      	str	r5, [sp, #8]
 801146e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011472:	f1cb 0217 	rsb	r2, fp, #23
 8011476:	fa43 f902 	asr.w	r9, r3, r2
 801147a:	f1b9 0f00 	cmp.w	r9, #0
 801147e:	dd64      	ble.n	801154a <__kernel_rem_pio2+0x272>
 8011480:	9b02      	ldr	r3, [sp, #8]
 8011482:	2200      	movs	r2, #0
 8011484:	3301      	adds	r3, #1
 8011486:	9302      	str	r3, [sp, #8]
 8011488:	4615      	mov	r5, r2
 801148a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801148e:	4590      	cmp	r8, r2
 8011490:	f300 80b8 	bgt.w	8011604 <__kernel_rem_pio2+0x32c>
 8011494:	f1bb 0f00 	cmp.w	fp, #0
 8011498:	dd07      	ble.n	80114aa <__kernel_rem_pio2+0x1d2>
 801149a:	f1bb 0f01 	cmp.w	fp, #1
 801149e:	f000 80bf 	beq.w	8011620 <__kernel_rem_pio2+0x348>
 80114a2:	f1bb 0f02 	cmp.w	fp, #2
 80114a6:	f000 80c6 	beq.w	8011636 <__kernel_rem_pio2+0x35e>
 80114aa:	f1b9 0f02 	cmp.w	r9, #2
 80114ae:	d14c      	bne.n	801154a <__kernel_rem_pio2+0x272>
 80114b0:	4632      	mov	r2, r6
 80114b2:	463b      	mov	r3, r7
 80114b4:	494e      	ldr	r1, [pc, #312]	@ (80115f0 <__kernel_rem_pio2+0x318>)
 80114b6:	2000      	movs	r0, #0
 80114b8:	f7ee fee6 	bl	8000288 <__aeabi_dsub>
 80114bc:	4606      	mov	r6, r0
 80114be:	460f      	mov	r7, r1
 80114c0:	2d00      	cmp	r5, #0
 80114c2:	d042      	beq.n	801154a <__kernel_rem_pio2+0x272>
 80114c4:	4658      	mov	r0, fp
 80114c6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80115e0 <__kernel_rem_pio2+0x308>
 80114ca:	f000 fbe9 	bl	8011ca0 <scalbn>
 80114ce:	4630      	mov	r0, r6
 80114d0:	4639      	mov	r1, r7
 80114d2:	ec53 2b10 	vmov	r2, r3, d0
 80114d6:	f7ee fed7 	bl	8000288 <__aeabi_dsub>
 80114da:	4606      	mov	r6, r0
 80114dc:	460f      	mov	r7, r1
 80114de:	e034      	b.n	801154a <__kernel_rem_pio2+0x272>
 80114e0:	4b44      	ldr	r3, [pc, #272]	@ (80115f4 <__kernel_rem_pio2+0x31c>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114e8:	f7ef f886 	bl	80005f8 <__aeabi_dmul>
 80114ec:	f7ef fb34 	bl	8000b58 <__aeabi_d2iz>
 80114f0:	f7ef f818 	bl	8000524 <__aeabi_i2d>
 80114f4:	4b40      	ldr	r3, [pc, #256]	@ (80115f8 <__kernel_rem_pio2+0x320>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	4606      	mov	r6, r0
 80114fa:	460f      	mov	r7, r1
 80114fc:	f7ef f87c 	bl	80005f8 <__aeabi_dmul>
 8011500:	4602      	mov	r2, r0
 8011502:	460b      	mov	r3, r1
 8011504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011508:	f7ee febe 	bl	8000288 <__aeabi_dsub>
 801150c:	f7ef fb24 	bl	8000b58 <__aeabi_d2iz>
 8011510:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011514:	f849 0b04 	str.w	r0, [r9], #4
 8011518:	4639      	mov	r1, r7
 801151a:	4630      	mov	r0, r6
 801151c:	f7ee feb6 	bl	800028c <__adddf3>
 8011520:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011528:	e75d      	b.n	80113e6 <__kernel_rem_pio2+0x10e>
 801152a:	d107      	bne.n	801153c <__kernel_rem_pio2+0x264>
 801152c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011530:	aa0c      	add	r2, sp, #48	@ 0x30
 8011532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011536:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801153a:	e79e      	b.n	801147a <__kernel_rem_pio2+0x1a2>
 801153c:	4b2f      	ldr	r3, [pc, #188]	@ (80115fc <__kernel_rem_pio2+0x324>)
 801153e:	2200      	movs	r2, #0
 8011540:	f7ef fae0 	bl	8000b04 <__aeabi_dcmpge>
 8011544:	2800      	cmp	r0, #0
 8011546:	d143      	bne.n	80115d0 <__kernel_rem_pio2+0x2f8>
 8011548:	4681      	mov	r9, r0
 801154a:	2200      	movs	r2, #0
 801154c:	2300      	movs	r3, #0
 801154e:	4630      	mov	r0, r6
 8011550:	4639      	mov	r1, r7
 8011552:	f7ef fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011556:	2800      	cmp	r0, #0
 8011558:	f000 80bf 	beq.w	80116da <__kernel_rem_pio2+0x402>
 801155c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011560:	2200      	movs	r2, #0
 8011562:	9900      	ldr	r1, [sp, #0]
 8011564:	428b      	cmp	r3, r1
 8011566:	da6e      	bge.n	8011646 <__kernel_rem_pio2+0x36e>
 8011568:	2a00      	cmp	r2, #0
 801156a:	f000 8089 	beq.w	8011680 <__kernel_rem_pio2+0x3a8>
 801156e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011572:	ab0c      	add	r3, sp, #48	@ 0x30
 8011574:	f1ab 0b18 	sub.w	fp, fp, #24
 8011578:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d0f6      	beq.n	801156e <__kernel_rem_pio2+0x296>
 8011580:	4658      	mov	r0, fp
 8011582:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80115e0 <__kernel_rem_pio2+0x308>
 8011586:	f000 fb8b 	bl	8011ca0 <scalbn>
 801158a:	f108 0301 	add.w	r3, r8, #1
 801158e:	00da      	lsls	r2, r3, #3
 8011590:	9205      	str	r2, [sp, #20]
 8011592:	ec55 4b10 	vmov	r4, r5, d0
 8011596:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011598:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80115f4 <__kernel_rem_pio2+0x31c>
 801159c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80115a0:	4646      	mov	r6, r8
 80115a2:	f04f 0a00 	mov.w	sl, #0
 80115a6:	2e00      	cmp	r6, #0
 80115a8:	f280 80cf 	bge.w	801174a <__kernel_rem_pio2+0x472>
 80115ac:	4644      	mov	r4, r8
 80115ae:	2c00      	cmp	r4, #0
 80115b0:	f2c0 80fd 	blt.w	80117ae <__kernel_rem_pio2+0x4d6>
 80115b4:	4b12      	ldr	r3, [pc, #72]	@ (8011600 <__kernel_rem_pio2+0x328>)
 80115b6:	461f      	mov	r7, r3
 80115b8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80115ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115be:	9306      	str	r3, [sp, #24]
 80115c0:	f04f 0a00 	mov.w	sl, #0
 80115c4:	f04f 0b00 	mov.w	fp, #0
 80115c8:	2600      	movs	r6, #0
 80115ca:	eba8 0504 	sub.w	r5, r8, r4
 80115ce:	e0e2      	b.n	8011796 <__kernel_rem_pio2+0x4be>
 80115d0:	f04f 0902 	mov.w	r9, #2
 80115d4:	e754      	b.n	8011480 <__kernel_rem_pio2+0x1a8>
 80115d6:	bf00      	nop
	...
 80115e4:	3ff00000 	.word	0x3ff00000
 80115e8:	08012538 	.word	0x08012538
 80115ec:	40200000 	.word	0x40200000
 80115f0:	3ff00000 	.word	0x3ff00000
 80115f4:	3e700000 	.word	0x3e700000
 80115f8:	41700000 	.word	0x41700000
 80115fc:	3fe00000 	.word	0x3fe00000
 8011600:	080124f8 	.word	0x080124f8
 8011604:	f854 3b04 	ldr.w	r3, [r4], #4
 8011608:	b945      	cbnz	r5, 801161c <__kernel_rem_pio2+0x344>
 801160a:	b123      	cbz	r3, 8011616 <__kernel_rem_pio2+0x33e>
 801160c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011610:	f844 3c04 	str.w	r3, [r4, #-4]
 8011614:	2301      	movs	r3, #1
 8011616:	3201      	adds	r2, #1
 8011618:	461d      	mov	r5, r3
 801161a:	e738      	b.n	801148e <__kernel_rem_pio2+0x1b6>
 801161c:	1acb      	subs	r3, r1, r3
 801161e:	e7f7      	b.n	8011610 <__kernel_rem_pio2+0x338>
 8011620:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011624:	ab0c      	add	r3, sp, #48	@ 0x30
 8011626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801162a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801162e:	a90c      	add	r1, sp, #48	@ 0x30
 8011630:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011634:	e739      	b.n	80114aa <__kernel_rem_pio2+0x1d2>
 8011636:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801163a:	ab0c      	add	r3, sp, #48	@ 0x30
 801163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011640:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011644:	e7f3      	b.n	801162e <__kernel_rem_pio2+0x356>
 8011646:	a90c      	add	r1, sp, #48	@ 0x30
 8011648:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801164c:	3b01      	subs	r3, #1
 801164e:	430a      	orrs	r2, r1
 8011650:	e787      	b.n	8011562 <__kernel_rem_pio2+0x28a>
 8011652:	3401      	adds	r4, #1
 8011654:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011658:	2a00      	cmp	r2, #0
 801165a:	d0fa      	beq.n	8011652 <__kernel_rem_pio2+0x37a>
 801165c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801165e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011662:	eb0d 0503 	add.w	r5, sp, r3
 8011666:	9b06      	ldr	r3, [sp, #24]
 8011668:	aa20      	add	r2, sp, #128	@ 0x80
 801166a:	4443      	add	r3, r8
 801166c:	f108 0701 	add.w	r7, r8, #1
 8011670:	3d98      	subs	r5, #152	@ 0x98
 8011672:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011676:	4444      	add	r4, r8
 8011678:	42bc      	cmp	r4, r7
 801167a:	da04      	bge.n	8011686 <__kernel_rem_pio2+0x3ae>
 801167c:	46a0      	mov	r8, r4
 801167e:	e6a2      	b.n	80113c6 <__kernel_rem_pio2+0xee>
 8011680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011682:	2401      	movs	r4, #1
 8011684:	e7e6      	b.n	8011654 <__kernel_rem_pio2+0x37c>
 8011686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011688:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801168c:	f7ee ff4a 	bl	8000524 <__aeabi_i2d>
 8011690:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8011958 <__kernel_rem_pio2+0x680>
 8011694:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011698:	ed8d 7b02 	vstr	d7, [sp, #8]
 801169c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80116a0:	46b2      	mov	sl, r6
 80116a2:	f04f 0800 	mov.w	r8, #0
 80116a6:	9b05      	ldr	r3, [sp, #20]
 80116a8:	4598      	cmp	r8, r3
 80116aa:	dd05      	ble.n	80116b8 <__kernel_rem_pio2+0x3e0>
 80116ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80116b0:	3701      	adds	r7, #1
 80116b2:	eca5 7b02 	vstmia	r5!, {d7}
 80116b6:	e7df      	b.n	8011678 <__kernel_rem_pio2+0x3a0>
 80116b8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80116bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80116c0:	f7ee ff9a 	bl	80005f8 <__aeabi_dmul>
 80116c4:	4602      	mov	r2, r0
 80116c6:	460b      	mov	r3, r1
 80116c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116cc:	f7ee fdde 	bl	800028c <__adddf3>
 80116d0:	f108 0801 	add.w	r8, r8, #1
 80116d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116d8:	e7e5      	b.n	80116a6 <__kernel_rem_pio2+0x3ce>
 80116da:	f1cb 0000 	rsb	r0, fp, #0
 80116de:	ec47 6b10 	vmov	d0, r6, r7
 80116e2:	f000 fadd 	bl	8011ca0 <scalbn>
 80116e6:	ec55 4b10 	vmov	r4, r5, d0
 80116ea:	4b9d      	ldr	r3, [pc, #628]	@ (8011960 <__kernel_rem_pio2+0x688>)
 80116ec:	2200      	movs	r2, #0
 80116ee:	4620      	mov	r0, r4
 80116f0:	4629      	mov	r1, r5
 80116f2:	f7ef fa07 	bl	8000b04 <__aeabi_dcmpge>
 80116f6:	b300      	cbz	r0, 801173a <__kernel_rem_pio2+0x462>
 80116f8:	4b9a      	ldr	r3, [pc, #616]	@ (8011964 <__kernel_rem_pio2+0x68c>)
 80116fa:	2200      	movs	r2, #0
 80116fc:	4620      	mov	r0, r4
 80116fe:	4629      	mov	r1, r5
 8011700:	f7ee ff7a 	bl	80005f8 <__aeabi_dmul>
 8011704:	f7ef fa28 	bl	8000b58 <__aeabi_d2iz>
 8011708:	4606      	mov	r6, r0
 801170a:	f7ee ff0b 	bl	8000524 <__aeabi_i2d>
 801170e:	4b94      	ldr	r3, [pc, #592]	@ (8011960 <__kernel_rem_pio2+0x688>)
 8011710:	2200      	movs	r2, #0
 8011712:	f7ee ff71 	bl	80005f8 <__aeabi_dmul>
 8011716:	460b      	mov	r3, r1
 8011718:	4602      	mov	r2, r0
 801171a:	4629      	mov	r1, r5
 801171c:	4620      	mov	r0, r4
 801171e:	f7ee fdb3 	bl	8000288 <__aeabi_dsub>
 8011722:	f7ef fa19 	bl	8000b58 <__aeabi_d2iz>
 8011726:	ab0c      	add	r3, sp, #48	@ 0x30
 8011728:	f10b 0b18 	add.w	fp, fp, #24
 801172c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011730:	f108 0801 	add.w	r8, r8, #1
 8011734:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011738:	e722      	b.n	8011580 <__kernel_rem_pio2+0x2a8>
 801173a:	4620      	mov	r0, r4
 801173c:	4629      	mov	r1, r5
 801173e:	f7ef fa0b 	bl	8000b58 <__aeabi_d2iz>
 8011742:	ab0c      	add	r3, sp, #48	@ 0x30
 8011744:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011748:	e71a      	b.n	8011580 <__kernel_rem_pio2+0x2a8>
 801174a:	ab0c      	add	r3, sp, #48	@ 0x30
 801174c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011750:	f7ee fee8 	bl	8000524 <__aeabi_i2d>
 8011754:	4622      	mov	r2, r4
 8011756:	462b      	mov	r3, r5
 8011758:	f7ee ff4e 	bl	80005f8 <__aeabi_dmul>
 801175c:	4652      	mov	r2, sl
 801175e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011762:	465b      	mov	r3, fp
 8011764:	4620      	mov	r0, r4
 8011766:	4629      	mov	r1, r5
 8011768:	f7ee ff46 	bl	80005f8 <__aeabi_dmul>
 801176c:	3e01      	subs	r6, #1
 801176e:	4604      	mov	r4, r0
 8011770:	460d      	mov	r5, r1
 8011772:	e718      	b.n	80115a6 <__kernel_rem_pio2+0x2ce>
 8011774:	9906      	ldr	r1, [sp, #24]
 8011776:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801177a:	9106      	str	r1, [sp, #24]
 801177c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011780:	f7ee ff3a 	bl	80005f8 <__aeabi_dmul>
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	4650      	mov	r0, sl
 801178a:	4659      	mov	r1, fp
 801178c:	f7ee fd7e 	bl	800028c <__adddf3>
 8011790:	3601      	adds	r6, #1
 8011792:	4682      	mov	sl, r0
 8011794:	468b      	mov	fp, r1
 8011796:	9b00      	ldr	r3, [sp, #0]
 8011798:	429e      	cmp	r6, r3
 801179a:	dc01      	bgt.n	80117a0 <__kernel_rem_pio2+0x4c8>
 801179c:	42b5      	cmp	r5, r6
 801179e:	dae9      	bge.n	8011774 <__kernel_rem_pio2+0x49c>
 80117a0:	ab48      	add	r3, sp, #288	@ 0x120
 80117a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80117a6:	e9c5 ab00 	strd	sl, fp, [r5]
 80117aa:	3c01      	subs	r4, #1
 80117ac:	e6ff      	b.n	80115ae <__kernel_rem_pio2+0x2d6>
 80117ae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80117b0:	2b02      	cmp	r3, #2
 80117b2:	dc0b      	bgt.n	80117cc <__kernel_rem_pio2+0x4f4>
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	dc39      	bgt.n	801182c <__kernel_rem_pio2+0x554>
 80117b8:	d05d      	beq.n	8011876 <__kernel_rem_pio2+0x59e>
 80117ba:	9b02      	ldr	r3, [sp, #8]
 80117bc:	f003 0007 	and.w	r0, r3, #7
 80117c0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80117c4:	ecbd 8b02 	vpop	{d8}
 80117c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117cc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80117ce:	2b03      	cmp	r3, #3
 80117d0:	d1f3      	bne.n	80117ba <__kernel_rem_pio2+0x4e2>
 80117d2:	9b05      	ldr	r3, [sp, #20]
 80117d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80117d8:	eb0d 0403 	add.w	r4, sp, r3
 80117dc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80117e0:	4625      	mov	r5, r4
 80117e2:	46c2      	mov	sl, r8
 80117e4:	f1ba 0f00 	cmp.w	sl, #0
 80117e8:	f1a5 0508 	sub.w	r5, r5, #8
 80117ec:	dc6b      	bgt.n	80118c6 <__kernel_rem_pio2+0x5ee>
 80117ee:	4645      	mov	r5, r8
 80117f0:	2d01      	cmp	r5, #1
 80117f2:	f1a4 0408 	sub.w	r4, r4, #8
 80117f6:	f300 8087 	bgt.w	8011908 <__kernel_rem_pio2+0x630>
 80117fa:	9c05      	ldr	r4, [sp, #20]
 80117fc:	ab48      	add	r3, sp, #288	@ 0x120
 80117fe:	441c      	add	r4, r3
 8011800:	2000      	movs	r0, #0
 8011802:	2100      	movs	r1, #0
 8011804:	f1b8 0f01 	cmp.w	r8, #1
 8011808:	f300 809c 	bgt.w	8011944 <__kernel_rem_pio2+0x66c>
 801180c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011810:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8011814:	f1b9 0f00 	cmp.w	r9, #0
 8011818:	f040 80a6 	bne.w	8011968 <__kernel_rem_pio2+0x690>
 801181c:	9b04      	ldr	r3, [sp, #16]
 801181e:	e9c3 7800 	strd	r7, r8, [r3]
 8011822:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011826:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801182a:	e7c6      	b.n	80117ba <__kernel_rem_pio2+0x4e2>
 801182c:	9d05      	ldr	r5, [sp, #20]
 801182e:	ab48      	add	r3, sp, #288	@ 0x120
 8011830:	441d      	add	r5, r3
 8011832:	4644      	mov	r4, r8
 8011834:	2000      	movs	r0, #0
 8011836:	2100      	movs	r1, #0
 8011838:	2c00      	cmp	r4, #0
 801183a:	da35      	bge.n	80118a8 <__kernel_rem_pio2+0x5d0>
 801183c:	f1b9 0f00 	cmp.w	r9, #0
 8011840:	d038      	beq.n	80118b4 <__kernel_rem_pio2+0x5dc>
 8011842:	4602      	mov	r2, r0
 8011844:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011848:	9c04      	ldr	r4, [sp, #16]
 801184a:	e9c4 2300 	strd	r2, r3, [r4]
 801184e:	4602      	mov	r2, r0
 8011850:	460b      	mov	r3, r1
 8011852:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8011856:	f7ee fd17 	bl	8000288 <__aeabi_dsub>
 801185a:	ad4a      	add	r5, sp, #296	@ 0x128
 801185c:	2401      	movs	r4, #1
 801185e:	45a0      	cmp	r8, r4
 8011860:	da2b      	bge.n	80118ba <__kernel_rem_pio2+0x5e2>
 8011862:	f1b9 0f00 	cmp.w	r9, #0
 8011866:	d002      	beq.n	801186e <__kernel_rem_pio2+0x596>
 8011868:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801186c:	4619      	mov	r1, r3
 801186e:	9b04      	ldr	r3, [sp, #16]
 8011870:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011874:	e7a1      	b.n	80117ba <__kernel_rem_pio2+0x4e2>
 8011876:	9c05      	ldr	r4, [sp, #20]
 8011878:	ab48      	add	r3, sp, #288	@ 0x120
 801187a:	441c      	add	r4, r3
 801187c:	2000      	movs	r0, #0
 801187e:	2100      	movs	r1, #0
 8011880:	f1b8 0f00 	cmp.w	r8, #0
 8011884:	da09      	bge.n	801189a <__kernel_rem_pio2+0x5c2>
 8011886:	f1b9 0f00 	cmp.w	r9, #0
 801188a:	d002      	beq.n	8011892 <__kernel_rem_pio2+0x5ba>
 801188c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011890:	4619      	mov	r1, r3
 8011892:	9b04      	ldr	r3, [sp, #16]
 8011894:	e9c3 0100 	strd	r0, r1, [r3]
 8011898:	e78f      	b.n	80117ba <__kernel_rem_pio2+0x4e2>
 801189a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801189e:	f7ee fcf5 	bl	800028c <__adddf3>
 80118a2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80118a6:	e7eb      	b.n	8011880 <__kernel_rem_pio2+0x5a8>
 80118a8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80118ac:	f7ee fcee 	bl	800028c <__adddf3>
 80118b0:	3c01      	subs	r4, #1
 80118b2:	e7c1      	b.n	8011838 <__kernel_rem_pio2+0x560>
 80118b4:	4602      	mov	r2, r0
 80118b6:	460b      	mov	r3, r1
 80118b8:	e7c6      	b.n	8011848 <__kernel_rem_pio2+0x570>
 80118ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80118be:	f7ee fce5 	bl	800028c <__adddf3>
 80118c2:	3401      	adds	r4, #1
 80118c4:	e7cb      	b.n	801185e <__kernel_rem_pio2+0x586>
 80118c6:	ed95 7b00 	vldr	d7, [r5]
 80118ca:	ed8d 7b00 	vstr	d7, [sp]
 80118ce:	ed95 7b02 	vldr	d7, [r5, #8]
 80118d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118d6:	ec53 2b17 	vmov	r2, r3, d7
 80118da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118de:	f7ee fcd5 	bl	800028c <__adddf3>
 80118e2:	4602      	mov	r2, r0
 80118e4:	460b      	mov	r3, r1
 80118e6:	4606      	mov	r6, r0
 80118e8:	460f      	mov	r7, r1
 80118ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118ee:	f7ee fccb 	bl	8000288 <__aeabi_dsub>
 80118f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80118f6:	f7ee fcc9 	bl	800028c <__adddf3>
 80118fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80118fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8011902:	e9c5 6700 	strd	r6, r7, [r5]
 8011906:	e76d      	b.n	80117e4 <__kernel_rem_pio2+0x50c>
 8011908:	ed94 7b00 	vldr	d7, [r4]
 801190c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011910:	ec51 0b17 	vmov	r0, r1, d7
 8011914:	4652      	mov	r2, sl
 8011916:	465b      	mov	r3, fp
 8011918:	ed8d 7b00 	vstr	d7, [sp]
 801191c:	f7ee fcb6 	bl	800028c <__adddf3>
 8011920:	4602      	mov	r2, r0
 8011922:	460b      	mov	r3, r1
 8011924:	4606      	mov	r6, r0
 8011926:	460f      	mov	r7, r1
 8011928:	e9dd 0100 	ldrd	r0, r1, [sp]
 801192c:	f7ee fcac 	bl	8000288 <__aeabi_dsub>
 8011930:	4652      	mov	r2, sl
 8011932:	465b      	mov	r3, fp
 8011934:	f7ee fcaa 	bl	800028c <__adddf3>
 8011938:	3d01      	subs	r5, #1
 801193a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801193e:	e9c4 6700 	strd	r6, r7, [r4]
 8011942:	e755      	b.n	80117f0 <__kernel_rem_pio2+0x518>
 8011944:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011948:	f7ee fca0 	bl	800028c <__adddf3>
 801194c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011950:	e758      	b.n	8011804 <__kernel_rem_pio2+0x52c>
 8011952:	bf00      	nop
 8011954:	f3af 8000 	nop.w
	...
 8011960:	41700000 	.word	0x41700000
 8011964:	3e700000 	.word	0x3e700000
 8011968:	9b04      	ldr	r3, [sp, #16]
 801196a:	9a04      	ldr	r2, [sp, #16]
 801196c:	601f      	str	r7, [r3, #0]
 801196e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8011972:	605c      	str	r4, [r3, #4]
 8011974:	609d      	str	r5, [r3, #8]
 8011976:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801197a:	60d3      	str	r3, [r2, #12]
 801197c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011980:	6110      	str	r0, [r2, #16]
 8011982:	6153      	str	r3, [r2, #20]
 8011984:	e719      	b.n	80117ba <__kernel_rem_pio2+0x4e2>
 8011986:	bf00      	nop

08011988 <__kernel_cos>:
 8011988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801198c:	ec57 6b10 	vmov	r6, r7, d0
 8011990:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011994:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011998:	ed8d 1b00 	vstr	d1, [sp]
 801199c:	d206      	bcs.n	80119ac <__kernel_cos+0x24>
 801199e:	4630      	mov	r0, r6
 80119a0:	4639      	mov	r1, r7
 80119a2:	f7ef f8d9 	bl	8000b58 <__aeabi_d2iz>
 80119a6:	2800      	cmp	r0, #0
 80119a8:	f000 8088 	beq.w	8011abc <__kernel_cos+0x134>
 80119ac:	4632      	mov	r2, r6
 80119ae:	463b      	mov	r3, r7
 80119b0:	4630      	mov	r0, r6
 80119b2:	4639      	mov	r1, r7
 80119b4:	f7ee fe20 	bl	80005f8 <__aeabi_dmul>
 80119b8:	4b51      	ldr	r3, [pc, #324]	@ (8011b00 <__kernel_cos+0x178>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	4604      	mov	r4, r0
 80119be:	460d      	mov	r5, r1
 80119c0:	f7ee fe1a 	bl	80005f8 <__aeabi_dmul>
 80119c4:	a340      	add	r3, pc, #256	@ (adr r3, 8011ac8 <__kernel_cos+0x140>)
 80119c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ca:	4682      	mov	sl, r0
 80119cc:	468b      	mov	fp, r1
 80119ce:	4620      	mov	r0, r4
 80119d0:	4629      	mov	r1, r5
 80119d2:	f7ee fe11 	bl	80005f8 <__aeabi_dmul>
 80119d6:	a33e      	add	r3, pc, #248	@ (adr r3, 8011ad0 <__kernel_cos+0x148>)
 80119d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119dc:	f7ee fc56 	bl	800028c <__adddf3>
 80119e0:	4622      	mov	r2, r4
 80119e2:	462b      	mov	r3, r5
 80119e4:	f7ee fe08 	bl	80005f8 <__aeabi_dmul>
 80119e8:	a33b      	add	r3, pc, #236	@ (adr r3, 8011ad8 <__kernel_cos+0x150>)
 80119ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ee:	f7ee fc4b 	bl	8000288 <__aeabi_dsub>
 80119f2:	4622      	mov	r2, r4
 80119f4:	462b      	mov	r3, r5
 80119f6:	f7ee fdff 	bl	80005f8 <__aeabi_dmul>
 80119fa:	a339      	add	r3, pc, #228	@ (adr r3, 8011ae0 <__kernel_cos+0x158>)
 80119fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a00:	f7ee fc44 	bl	800028c <__adddf3>
 8011a04:	4622      	mov	r2, r4
 8011a06:	462b      	mov	r3, r5
 8011a08:	f7ee fdf6 	bl	80005f8 <__aeabi_dmul>
 8011a0c:	a336      	add	r3, pc, #216	@ (adr r3, 8011ae8 <__kernel_cos+0x160>)
 8011a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a12:	f7ee fc39 	bl	8000288 <__aeabi_dsub>
 8011a16:	4622      	mov	r2, r4
 8011a18:	462b      	mov	r3, r5
 8011a1a:	f7ee fded 	bl	80005f8 <__aeabi_dmul>
 8011a1e:	a334      	add	r3, pc, #208	@ (adr r3, 8011af0 <__kernel_cos+0x168>)
 8011a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a24:	f7ee fc32 	bl	800028c <__adddf3>
 8011a28:	4622      	mov	r2, r4
 8011a2a:	462b      	mov	r3, r5
 8011a2c:	f7ee fde4 	bl	80005f8 <__aeabi_dmul>
 8011a30:	4622      	mov	r2, r4
 8011a32:	462b      	mov	r3, r5
 8011a34:	f7ee fde0 	bl	80005f8 <__aeabi_dmul>
 8011a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	460d      	mov	r5, r1
 8011a40:	4630      	mov	r0, r6
 8011a42:	4639      	mov	r1, r7
 8011a44:	f7ee fdd8 	bl	80005f8 <__aeabi_dmul>
 8011a48:	460b      	mov	r3, r1
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	4629      	mov	r1, r5
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f7ee fc1a 	bl	8000288 <__aeabi_dsub>
 8011a54:	4b2b      	ldr	r3, [pc, #172]	@ (8011b04 <__kernel_cos+0x17c>)
 8011a56:	4598      	cmp	r8, r3
 8011a58:	4606      	mov	r6, r0
 8011a5a:	460f      	mov	r7, r1
 8011a5c:	d810      	bhi.n	8011a80 <__kernel_cos+0xf8>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	460b      	mov	r3, r1
 8011a62:	4650      	mov	r0, sl
 8011a64:	4659      	mov	r1, fp
 8011a66:	f7ee fc0f 	bl	8000288 <__aeabi_dsub>
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	4926      	ldr	r1, [pc, #152]	@ (8011b08 <__kernel_cos+0x180>)
 8011a6e:	4602      	mov	r2, r0
 8011a70:	2000      	movs	r0, #0
 8011a72:	f7ee fc09 	bl	8000288 <__aeabi_dsub>
 8011a76:	ec41 0b10 	vmov	d0, r0, r1
 8011a7a:	b003      	add	sp, #12
 8011a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a80:	4b22      	ldr	r3, [pc, #136]	@ (8011b0c <__kernel_cos+0x184>)
 8011a82:	4921      	ldr	r1, [pc, #132]	@ (8011b08 <__kernel_cos+0x180>)
 8011a84:	4598      	cmp	r8, r3
 8011a86:	bf8c      	ite	hi
 8011a88:	4d21      	ldrhi	r5, [pc, #132]	@ (8011b10 <__kernel_cos+0x188>)
 8011a8a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8011a8e:	2400      	movs	r4, #0
 8011a90:	4622      	mov	r2, r4
 8011a92:	462b      	mov	r3, r5
 8011a94:	2000      	movs	r0, #0
 8011a96:	f7ee fbf7 	bl	8000288 <__aeabi_dsub>
 8011a9a:	4622      	mov	r2, r4
 8011a9c:	4680      	mov	r8, r0
 8011a9e:	4689      	mov	r9, r1
 8011aa0:	462b      	mov	r3, r5
 8011aa2:	4650      	mov	r0, sl
 8011aa4:	4659      	mov	r1, fp
 8011aa6:	f7ee fbef 	bl	8000288 <__aeabi_dsub>
 8011aaa:	4632      	mov	r2, r6
 8011aac:	463b      	mov	r3, r7
 8011aae:	f7ee fbeb 	bl	8000288 <__aeabi_dsub>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	4640      	mov	r0, r8
 8011ab8:	4649      	mov	r1, r9
 8011aba:	e7da      	b.n	8011a72 <__kernel_cos+0xea>
 8011abc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8011af8 <__kernel_cos+0x170>
 8011ac0:	e7db      	b.n	8011a7a <__kernel_cos+0xf2>
 8011ac2:	bf00      	nop
 8011ac4:	f3af 8000 	nop.w
 8011ac8:	be8838d4 	.word	0xbe8838d4
 8011acc:	bda8fae9 	.word	0xbda8fae9
 8011ad0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011ad4:	3e21ee9e 	.word	0x3e21ee9e
 8011ad8:	809c52ad 	.word	0x809c52ad
 8011adc:	3e927e4f 	.word	0x3e927e4f
 8011ae0:	19cb1590 	.word	0x19cb1590
 8011ae4:	3efa01a0 	.word	0x3efa01a0
 8011ae8:	16c15177 	.word	0x16c15177
 8011aec:	3f56c16c 	.word	0x3f56c16c
 8011af0:	5555554c 	.word	0x5555554c
 8011af4:	3fa55555 	.word	0x3fa55555
 8011af8:	00000000 	.word	0x00000000
 8011afc:	3ff00000 	.word	0x3ff00000
 8011b00:	3fe00000 	.word	0x3fe00000
 8011b04:	3fd33332 	.word	0x3fd33332
 8011b08:	3ff00000 	.word	0x3ff00000
 8011b0c:	3fe90000 	.word	0x3fe90000
 8011b10:	3fd20000 	.word	0x3fd20000
 8011b14:	00000000 	.word	0x00000000

08011b18 <__kernel_sin>:
 8011b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1c:	ec55 4b10 	vmov	r4, r5, d0
 8011b20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011b24:	b085      	sub	sp, #20
 8011b26:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8011b2a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011b2e:	4680      	mov	r8, r0
 8011b30:	d205      	bcs.n	8011b3e <__kernel_sin+0x26>
 8011b32:	4620      	mov	r0, r4
 8011b34:	4629      	mov	r1, r5
 8011b36:	f7ef f80f 	bl	8000b58 <__aeabi_d2iz>
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	d052      	beq.n	8011be4 <__kernel_sin+0xcc>
 8011b3e:	4622      	mov	r2, r4
 8011b40:	462b      	mov	r3, r5
 8011b42:	4620      	mov	r0, r4
 8011b44:	4629      	mov	r1, r5
 8011b46:	f7ee fd57 	bl	80005f8 <__aeabi_dmul>
 8011b4a:	4682      	mov	sl, r0
 8011b4c:	468b      	mov	fp, r1
 8011b4e:	4602      	mov	r2, r0
 8011b50:	460b      	mov	r3, r1
 8011b52:	4620      	mov	r0, r4
 8011b54:	4629      	mov	r1, r5
 8011b56:	f7ee fd4f 	bl	80005f8 <__aeabi_dmul>
 8011b5a:	a342      	add	r3, pc, #264	@ (adr r3, 8011c64 <__kernel_sin+0x14c>)
 8011b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b60:	e9cd 0100 	strd	r0, r1, [sp]
 8011b64:	4650      	mov	r0, sl
 8011b66:	4659      	mov	r1, fp
 8011b68:	f7ee fd46 	bl	80005f8 <__aeabi_dmul>
 8011b6c:	a33f      	add	r3, pc, #252	@ (adr r3, 8011c6c <__kernel_sin+0x154>)
 8011b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b72:	f7ee fb89 	bl	8000288 <__aeabi_dsub>
 8011b76:	4652      	mov	r2, sl
 8011b78:	465b      	mov	r3, fp
 8011b7a:	f7ee fd3d 	bl	80005f8 <__aeabi_dmul>
 8011b7e:	a33d      	add	r3, pc, #244	@ (adr r3, 8011c74 <__kernel_sin+0x15c>)
 8011b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b84:	f7ee fb82 	bl	800028c <__adddf3>
 8011b88:	4652      	mov	r2, sl
 8011b8a:	465b      	mov	r3, fp
 8011b8c:	f7ee fd34 	bl	80005f8 <__aeabi_dmul>
 8011b90:	a33a      	add	r3, pc, #232	@ (adr r3, 8011c7c <__kernel_sin+0x164>)
 8011b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b96:	f7ee fb77 	bl	8000288 <__aeabi_dsub>
 8011b9a:	4652      	mov	r2, sl
 8011b9c:	465b      	mov	r3, fp
 8011b9e:	f7ee fd2b 	bl	80005f8 <__aeabi_dmul>
 8011ba2:	a338      	add	r3, pc, #224	@ (adr r3, 8011c84 <__kernel_sin+0x16c>)
 8011ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba8:	f7ee fb70 	bl	800028c <__adddf3>
 8011bac:	4606      	mov	r6, r0
 8011bae:	460f      	mov	r7, r1
 8011bb0:	f1b8 0f00 	cmp.w	r8, #0
 8011bb4:	d11b      	bne.n	8011bee <__kernel_sin+0xd6>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	460b      	mov	r3, r1
 8011bba:	4650      	mov	r0, sl
 8011bbc:	4659      	mov	r1, fp
 8011bbe:	f7ee fd1b 	bl	80005f8 <__aeabi_dmul>
 8011bc2:	a325      	add	r3, pc, #148	@ (adr r3, 8011c58 <__kernel_sin+0x140>)
 8011bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc8:	f7ee fb5e 	bl	8000288 <__aeabi_dsub>
 8011bcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011bd0:	f7ee fd12 	bl	80005f8 <__aeabi_dmul>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	4620      	mov	r0, r4
 8011bda:	4629      	mov	r1, r5
 8011bdc:	f7ee fb56 	bl	800028c <__adddf3>
 8011be0:	4604      	mov	r4, r0
 8011be2:	460d      	mov	r5, r1
 8011be4:	ec45 4b10 	vmov	d0, r4, r5
 8011be8:	b005      	add	sp, #20
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8011c60 <__kernel_sin+0x148>)
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	f7ee fcff 	bl	80005f8 <__aeabi_dmul>
 8011bfa:	4632      	mov	r2, r6
 8011bfc:	4680      	mov	r8, r0
 8011bfe:	4689      	mov	r9, r1
 8011c00:	463b      	mov	r3, r7
 8011c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c06:	f7ee fcf7 	bl	80005f8 <__aeabi_dmul>
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	4640      	mov	r0, r8
 8011c10:	4649      	mov	r1, r9
 8011c12:	f7ee fb39 	bl	8000288 <__aeabi_dsub>
 8011c16:	4652      	mov	r2, sl
 8011c18:	465b      	mov	r3, fp
 8011c1a:	f7ee fced 	bl	80005f8 <__aeabi_dmul>
 8011c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c22:	f7ee fb31 	bl	8000288 <__aeabi_dsub>
 8011c26:	a30c      	add	r3, pc, #48	@ (adr r3, 8011c58 <__kernel_sin+0x140>)
 8011c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	460f      	mov	r7, r1
 8011c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c34:	f7ee fce0 	bl	80005f8 <__aeabi_dmul>
 8011c38:	4602      	mov	r2, r0
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	4639      	mov	r1, r7
 8011c40:	f7ee fb24 	bl	800028c <__adddf3>
 8011c44:	4602      	mov	r2, r0
 8011c46:	460b      	mov	r3, r1
 8011c48:	4620      	mov	r0, r4
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	f7ee fb1c 	bl	8000288 <__aeabi_dsub>
 8011c50:	e7c6      	b.n	8011be0 <__kernel_sin+0xc8>
 8011c52:	bf00      	nop
 8011c54:	f3af 8000 	nop.w
 8011c58:	55555549 	.word	0x55555549
 8011c5c:	3fc55555 	.word	0x3fc55555
 8011c60:	3fe00000 	.word	0x3fe00000
 8011c64:	5acfd57c 	.word	0x5acfd57c
 8011c68:	3de5d93a 	.word	0x3de5d93a
 8011c6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011c70:	3e5ae5e6 	.word	0x3e5ae5e6
 8011c74:	57b1fe7d 	.word	0x57b1fe7d
 8011c78:	3ec71de3 	.word	0x3ec71de3
 8011c7c:	19c161d5 	.word	0x19c161d5
 8011c80:	3f2a01a0 	.word	0x3f2a01a0
 8011c84:	1110f8a6 	.word	0x1110f8a6
 8011c88:	3f811111 	.word	0x3f811111

08011c8c <fabs>:
 8011c8c:	ec51 0b10 	vmov	r0, r1, d0
 8011c90:	4602      	mov	r2, r0
 8011c92:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011c96:	ec43 2b10 	vmov	d0, r2, r3
 8011c9a:	4770      	bx	lr
 8011c9c:	0000      	movs	r0, r0
	...

08011ca0 <scalbn>:
 8011ca0:	b570      	push	{r4, r5, r6, lr}
 8011ca2:	ec55 4b10 	vmov	r4, r5, d0
 8011ca6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011caa:	4606      	mov	r6, r0
 8011cac:	462b      	mov	r3, r5
 8011cae:	b991      	cbnz	r1, 8011cd6 <scalbn+0x36>
 8011cb0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011cb4:	4323      	orrs	r3, r4
 8011cb6:	d03d      	beq.n	8011d34 <scalbn+0x94>
 8011cb8:	4b35      	ldr	r3, [pc, #212]	@ (8011d90 <scalbn+0xf0>)
 8011cba:	4620      	mov	r0, r4
 8011cbc:	4629      	mov	r1, r5
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	f7ee fc9a 	bl	80005f8 <__aeabi_dmul>
 8011cc4:	4b33      	ldr	r3, [pc, #204]	@ (8011d94 <scalbn+0xf4>)
 8011cc6:	429e      	cmp	r6, r3
 8011cc8:	4604      	mov	r4, r0
 8011cca:	460d      	mov	r5, r1
 8011ccc:	da0f      	bge.n	8011cee <scalbn+0x4e>
 8011cce:	a328      	add	r3, pc, #160	@ (adr r3, 8011d70 <scalbn+0xd0>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	e01e      	b.n	8011d14 <scalbn+0x74>
 8011cd6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011cda:	4291      	cmp	r1, r2
 8011cdc:	d10b      	bne.n	8011cf6 <scalbn+0x56>
 8011cde:	4622      	mov	r2, r4
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	4629      	mov	r1, r5
 8011ce4:	f7ee fad2 	bl	800028c <__adddf3>
 8011ce8:	4604      	mov	r4, r0
 8011cea:	460d      	mov	r5, r1
 8011cec:	e022      	b.n	8011d34 <scalbn+0x94>
 8011cee:	460b      	mov	r3, r1
 8011cf0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011cf4:	3936      	subs	r1, #54	@ 0x36
 8011cf6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011cfa:	4296      	cmp	r6, r2
 8011cfc:	dd0d      	ble.n	8011d1a <scalbn+0x7a>
 8011cfe:	2d00      	cmp	r5, #0
 8011d00:	a11d      	add	r1, pc, #116	@ (adr r1, 8011d78 <scalbn+0xd8>)
 8011d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d06:	da02      	bge.n	8011d0e <scalbn+0x6e>
 8011d08:	a11d      	add	r1, pc, #116	@ (adr r1, 8011d80 <scalbn+0xe0>)
 8011d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d0e:	a31a      	add	r3, pc, #104	@ (adr r3, 8011d78 <scalbn+0xd8>)
 8011d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d14:	f7ee fc70 	bl	80005f8 <__aeabi_dmul>
 8011d18:	e7e6      	b.n	8011ce8 <scalbn+0x48>
 8011d1a:	1872      	adds	r2, r6, r1
 8011d1c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011d20:	428a      	cmp	r2, r1
 8011d22:	dcec      	bgt.n	8011cfe <scalbn+0x5e>
 8011d24:	2a00      	cmp	r2, #0
 8011d26:	dd08      	ble.n	8011d3a <scalbn+0x9a>
 8011d28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011d2c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011d30:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d34:	ec45 4b10 	vmov	d0, r4, r5
 8011d38:	bd70      	pop	{r4, r5, r6, pc}
 8011d3a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011d3e:	da08      	bge.n	8011d52 <scalbn+0xb2>
 8011d40:	2d00      	cmp	r5, #0
 8011d42:	a10b      	add	r1, pc, #44	@ (adr r1, 8011d70 <scalbn+0xd0>)
 8011d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d48:	dac1      	bge.n	8011cce <scalbn+0x2e>
 8011d4a:	a10f      	add	r1, pc, #60	@ (adr r1, 8011d88 <scalbn+0xe8>)
 8011d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d50:	e7bd      	b.n	8011cce <scalbn+0x2e>
 8011d52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011d56:	3236      	adds	r2, #54	@ 0x36
 8011d58:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011d5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d60:	4620      	mov	r0, r4
 8011d62:	4b0d      	ldr	r3, [pc, #52]	@ (8011d98 <scalbn+0xf8>)
 8011d64:	4629      	mov	r1, r5
 8011d66:	2200      	movs	r2, #0
 8011d68:	e7d4      	b.n	8011d14 <scalbn+0x74>
 8011d6a:	bf00      	nop
 8011d6c:	f3af 8000 	nop.w
 8011d70:	c2f8f359 	.word	0xc2f8f359
 8011d74:	01a56e1f 	.word	0x01a56e1f
 8011d78:	8800759c 	.word	0x8800759c
 8011d7c:	7e37e43c 	.word	0x7e37e43c
 8011d80:	8800759c 	.word	0x8800759c
 8011d84:	fe37e43c 	.word	0xfe37e43c
 8011d88:	c2f8f359 	.word	0xc2f8f359
 8011d8c:	81a56e1f 	.word	0x81a56e1f
 8011d90:	43500000 	.word	0x43500000
 8011d94:	ffff3cb0 	.word	0xffff3cb0
 8011d98:	3c900000 	.word	0x3c900000
 8011d9c:	00000000 	.word	0x00000000

08011da0 <floor>:
 8011da0:	ec51 0b10 	vmov	r0, r1, d0
 8011da4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011db0:	2e13      	cmp	r6, #19
 8011db2:	460c      	mov	r4, r1
 8011db4:	4605      	mov	r5, r0
 8011db6:	4680      	mov	r8, r0
 8011db8:	dc34      	bgt.n	8011e24 <floor+0x84>
 8011dba:	2e00      	cmp	r6, #0
 8011dbc:	da17      	bge.n	8011dee <floor+0x4e>
 8011dbe:	a332      	add	r3, pc, #200	@ (adr r3, 8011e88 <floor+0xe8>)
 8011dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc4:	f7ee fa62 	bl	800028c <__adddf3>
 8011dc8:	2200      	movs	r2, #0
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f7ee fea4 	bl	8000b18 <__aeabi_dcmpgt>
 8011dd0:	b150      	cbz	r0, 8011de8 <floor+0x48>
 8011dd2:	2c00      	cmp	r4, #0
 8011dd4:	da55      	bge.n	8011e82 <floor+0xe2>
 8011dd6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011dda:	432c      	orrs	r4, r5
 8011ddc:	2500      	movs	r5, #0
 8011dde:	42ac      	cmp	r4, r5
 8011de0:	4c2b      	ldr	r4, [pc, #172]	@ (8011e90 <floor+0xf0>)
 8011de2:	bf08      	it	eq
 8011de4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011de8:	4621      	mov	r1, r4
 8011dea:	4628      	mov	r0, r5
 8011dec:	e023      	b.n	8011e36 <floor+0x96>
 8011dee:	4f29      	ldr	r7, [pc, #164]	@ (8011e94 <floor+0xf4>)
 8011df0:	4137      	asrs	r7, r6
 8011df2:	ea01 0307 	and.w	r3, r1, r7
 8011df6:	4303      	orrs	r3, r0
 8011df8:	d01d      	beq.n	8011e36 <floor+0x96>
 8011dfa:	a323      	add	r3, pc, #140	@ (adr r3, 8011e88 <floor+0xe8>)
 8011dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e00:	f7ee fa44 	bl	800028c <__adddf3>
 8011e04:	2200      	movs	r2, #0
 8011e06:	2300      	movs	r3, #0
 8011e08:	f7ee fe86 	bl	8000b18 <__aeabi_dcmpgt>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	d0eb      	beq.n	8011de8 <floor+0x48>
 8011e10:	2c00      	cmp	r4, #0
 8011e12:	bfbe      	ittt	lt
 8011e14:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011e18:	4133      	asrlt	r3, r6
 8011e1a:	18e4      	addlt	r4, r4, r3
 8011e1c:	ea24 0407 	bic.w	r4, r4, r7
 8011e20:	2500      	movs	r5, #0
 8011e22:	e7e1      	b.n	8011de8 <floor+0x48>
 8011e24:	2e33      	cmp	r6, #51	@ 0x33
 8011e26:	dd0a      	ble.n	8011e3e <floor+0x9e>
 8011e28:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8011e2c:	d103      	bne.n	8011e36 <floor+0x96>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	460b      	mov	r3, r1
 8011e32:	f7ee fa2b 	bl	800028c <__adddf3>
 8011e36:	ec41 0b10 	vmov	d0, r0, r1
 8011e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e3e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8011e42:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011e46:	40df      	lsrs	r7, r3
 8011e48:	4207      	tst	r7, r0
 8011e4a:	d0f4      	beq.n	8011e36 <floor+0x96>
 8011e4c:	a30e      	add	r3, pc, #56	@ (adr r3, 8011e88 <floor+0xe8>)
 8011e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e52:	f7ee fa1b 	bl	800028c <__adddf3>
 8011e56:	2200      	movs	r2, #0
 8011e58:	2300      	movs	r3, #0
 8011e5a:	f7ee fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d0c2      	beq.n	8011de8 <floor+0x48>
 8011e62:	2c00      	cmp	r4, #0
 8011e64:	da0a      	bge.n	8011e7c <floor+0xdc>
 8011e66:	2e14      	cmp	r6, #20
 8011e68:	d101      	bne.n	8011e6e <floor+0xce>
 8011e6a:	3401      	adds	r4, #1
 8011e6c:	e006      	b.n	8011e7c <floor+0xdc>
 8011e6e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011e72:	2301      	movs	r3, #1
 8011e74:	40b3      	lsls	r3, r6
 8011e76:	441d      	add	r5, r3
 8011e78:	4545      	cmp	r5, r8
 8011e7a:	d3f6      	bcc.n	8011e6a <floor+0xca>
 8011e7c:	ea25 0507 	bic.w	r5, r5, r7
 8011e80:	e7b2      	b.n	8011de8 <floor+0x48>
 8011e82:	2500      	movs	r5, #0
 8011e84:	462c      	mov	r4, r5
 8011e86:	e7af      	b.n	8011de8 <floor+0x48>
 8011e88:	8800759c 	.word	0x8800759c
 8011e8c:	7e37e43c 	.word	0x7e37e43c
 8011e90:	bff00000 	.word	0xbff00000
 8011e94:	000fffff 	.word	0x000fffff

08011e98 <_init>:
 8011e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e9a:	bf00      	nop
 8011e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e9e:	bc08      	pop	{r3}
 8011ea0:	469e      	mov	lr, r3
 8011ea2:	4770      	bx	lr

08011ea4 <_fini>:
 8011ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ea6:	bf00      	nop
 8011ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eaa:	bc08      	pop	{r3}
 8011eac:	469e      	mov	lr, r3
 8011eae:	4770      	bx	lr
