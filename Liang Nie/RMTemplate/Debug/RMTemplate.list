
RMTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08010bd0  08010bd0  00011bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110f8  080110f8  0001325c  2**0
                  CONTENTS
  4 .ARM          00000008  080110f8  080110f8  000120f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011100  08011100  0001325c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011100  08011100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011104  08011104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08011108  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001325c  2**0
                  CONTENTS
 10 .bss          000056b0  20000260  20000260  00013260  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005910  20005910  00013260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001325c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025979  00000000  00000000  0001328c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000543f  00000000  00000000  00038c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f58  00000000  00000000  0003e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001866  00000000  00000000  0003ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ad2  00000000  00000000  00041806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000263e3  00000000  00000000  000682d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f2d  00000000  00000000  0008e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001715e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094ac  00000000  00000000  0017162c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0017aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010bb4 	.word	0x08010bb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	08010bb4 	.word	0x08010bb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000ea2:	e003      	b.n	8000eac <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea8:	f000 f80a 	bl	8000ec0 <BMI088_delay_us>
    while(ms--)
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	80fa      	strh	r2, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f6      	bne.n	8000ea4 <BMI088_delay_ms+0xc>
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	22a8      	movs	r2, #168	@ 0xa8
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d0f8      	beq.n	8000ef4 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d206      	bcs.n	8000f18 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4413      	add	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	e007      	b.n	8000f28 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad2      	subs	r2, r2, r3
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4413      	add	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d200      	bcs.n	8000f36 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000f34:	e7de      	b.n	8000ef4 <BMI088_delay_us+0x34>
            {
                break;
 8000f36:	bf00      	nop
            }
        }
    }


}
 8000f38:	bf00      	nop
 8000f3a:	3724      	adds	r7, #36	@ 0x24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <BMI088_ACCEL_NS_L+0x18>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <BMI088_ACCEL_NS_L+0x1c>)
 8000f52:	8811      	ldrh	r1, [r2, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 fe1e 	bl	8006b98 <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <BMI088_ACCEL_NS_H+0x18>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <BMI088_ACCEL_NS_H+0x1c>)
 8000f72:	8811      	ldrh	r1, [r2, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 fe0e 	bl	8006b98 <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <BMI088_GYRO_NS_L+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <BMI088_GYRO_NS_L+0x1c>)
 8000f92:	8811      	ldrh	r1, [r2, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f005 fdfe 	bl	8006b98 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	2000000c 	.word	0x2000000c

08000fa8 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <BMI088_GYRO_NS_H+0x18>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <BMI088_GYRO_NS_H+0x1c>)
 8000fb2:	8811      	ldrh	r1, [r2, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 fdee 	bl	8006b98 <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	2000000c 	.word	0x2000000c

08000fc8 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000fd2:	f107 020f 	add.w	r2, r7, #15
 8000fd6:	1df9      	adds	r1, r7, #7
 8000fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <BMI088_read_write_byte+0x28>)
 8000fe2:	f007 fb37 	bl	8008654 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000918 	.word	0x20000918

08000ff4 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001002:	f7ff ffa1 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001006:	2080      	movs	r0, #128	@ 0x80
 8001008:	f7ff ffde 	bl	8000fc8 <BMI088_read_write_byte>
 800100c:	2055      	movs	r0, #85	@ 0x55
 800100e:	f7ff ffdb 	bl	8000fc8 <BMI088_read_write_byte>
 8001012:	2055      	movs	r0, #85	@ 0x55
 8001014:	f7ff ffd8 	bl	8000fc8 <BMI088_read_write_byte>
 8001018:	4603      	mov	r3, r0
 800101a:	71bb      	strb	r3, [r7, #6]
 800101c:	f7ff ffa4 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001020:	2096      	movs	r0, #150	@ 0x96
 8001022:	f7ff ff4d 	bl	8000ec0 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001026:	f7ff ff8f 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800102a:	2080      	movs	r0, #128	@ 0x80
 800102c:	f7ff ffcc 	bl	8000fc8 <BMI088_read_write_byte>
 8001030:	2055      	movs	r0, #85	@ 0x55
 8001032:	f7ff ffc9 	bl	8000fc8 <BMI088_read_write_byte>
 8001036:	2055      	movs	r0, #85	@ 0x55
 8001038:	f7ff ffc6 	bl	8000fc8 <BMI088_read_write_byte>
 800103c:	4603      	mov	r3, r0
 800103e:	71bb      	strb	r3, [r7, #6]
 8001040:	f7ff ff92 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001044:	2096      	movs	r0, #150	@ 0x96
 8001046:	f7ff ff3b 	bl	8000ec0 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 800104a:	f7ff ff7d 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800104e:	21b6      	movs	r1, #182	@ 0xb6
 8001050:	207e      	movs	r0, #126	@ 0x7e
 8001052:	f000 fa21 	bl	8001498 <BMI088_write_single_reg>
 8001056:	f7ff ff87 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800105a:	2050      	movs	r0, #80	@ 0x50
 800105c:	f7ff ff1c 	bl	8000e98 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001060:	f7ff ff72 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001064:	2080      	movs	r0, #128	@ 0x80
 8001066:	f7ff ffaf 	bl	8000fc8 <BMI088_read_write_byte>
 800106a:	2055      	movs	r0, #85	@ 0x55
 800106c:	f7ff ffac 	bl	8000fc8 <BMI088_read_write_byte>
 8001070:	2055      	movs	r0, #85	@ 0x55
 8001072:	f7ff ffa9 	bl	8000fc8 <BMI088_read_write_byte>
 8001076:	4603      	mov	r3, r0
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	f7ff ff75 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800107e:	2096      	movs	r0, #150	@ 0x96
 8001080:	f7ff ff1e 	bl	8000ec0 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001084:	f7ff ff60 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001088:	2080      	movs	r0, #128	@ 0x80
 800108a:	f7ff ff9d 	bl	8000fc8 <BMI088_read_write_byte>
 800108e:	2055      	movs	r0, #85	@ 0x55
 8001090:	f7ff ff9a 	bl	8000fc8 <BMI088_read_write_byte>
 8001094:	2055      	movs	r0, #85	@ 0x55
 8001096:	f7ff ff97 	bl	8000fc8 <BMI088_read_write_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	f7ff ff63 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010a2:	2096      	movs	r0, #150	@ 0x96
 80010a4:	f7ff ff0c 	bl	8000ec0 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	2b1e      	cmp	r3, #30
 80010ac:	d001      	beq.n	80010b2 <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 80010ae:	23ff      	movs	r3, #255	@ 0xff
 80010b0:	e052      	b.n	8001158 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e04b      	b.n	8001150 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 80010b8:	f7ff ff46 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	4928      	ldr	r1, [pc, #160]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	7818      	ldrb	r0, [r3, #0]
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4924      	ldr	r1, [pc, #144]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	3301      	adds	r3, #1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	f000 f9dc 	bl	8001498 <BMI088_write_single_reg>
 80010e0:	f7ff ff42 	bl	8000f68 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010e4:	2096      	movs	r0, #150	@ 0x96
 80010e6:	f7ff feeb 	bl	8000ec0 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80010ea:	f7ff ff2d 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	491b      	ldr	r1, [pc, #108]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff60 	bl	8000fc8 <BMI088_read_write_byte>
 8001108:	2055      	movs	r0, #85	@ 0x55
 800110a:	f7ff ff5d 	bl	8000fc8 <BMI088_read_write_byte>
 800110e:	2055      	movs	r0, #85	@ 0x55
 8001110:	f7ff ff5a 	bl	8000fc8 <BMI088_read_write_byte>
 8001114:	4603      	mov	r3, r0
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	f7ff ff26 	bl	8000f68 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800111c:	2096      	movs	r0, #150	@ 0x96
 800111e:	f7ff fecf 	bl	8000ec0 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	490e      	ldr	r1, [pc, #56]	@ (8001160 <BMI088_accel_init+0x16c>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	440b      	add	r3, r1
 800112e:	3301      	adds	r3, #1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	79ba      	ldrb	r2, [r7, #6]
 8001134:	429a      	cmp	r2, r3
 8001136:	d008      	beq.n	800114a <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	4909      	ldr	r1, [pc, #36]	@ (8001160 <BMI088_accel_init+0x16c>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	440b      	add	r3, r1
 8001144:	3302      	adds	r3, #2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	e006      	b.n	8001158 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d9b0      	bls.n	80010b8 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000018 	.word	0x20000018

08001164 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001172:	f7ff ff09 	bl	8000f88 <BMI088_GYRO_NS_L>
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	4619      	mov	r1, r3
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f9a0 	bl	80014c0 <BMI088_read_single_reg>
 8001180:	f7ff ff12 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001184:	2096      	movs	r0, #150	@ 0x96
 8001186:	f7ff fe9b 	bl	8000ec0 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800118a:	f7ff fefd 	bl	8000f88 <BMI088_GYRO_NS_L>
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	4619      	mov	r1, r3
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f994 	bl	80014c0 <BMI088_read_single_reg>
 8001198:	f7ff ff06 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800119c:	2096      	movs	r0, #150	@ 0x96
 800119e:	f7ff fe8f 	bl	8000ec0 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80011a2:	f7ff fef1 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011a6:	21b6      	movs	r1, #182	@ 0xb6
 80011a8:	2014      	movs	r0, #20
 80011aa:	f000 f975 	bl	8001498 <BMI088_write_single_reg>
 80011ae:	f7ff fefb 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80011b2:	2050      	movs	r0, #80	@ 0x50
 80011b4:	f7ff fe70 	bl	8000e98 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011b8:	f7ff fee6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011bc:	1dbb      	adds	r3, r7, #6
 80011be:	4619      	mov	r1, r3
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f97d 	bl	80014c0 <BMI088_read_single_reg>
 80011c6:	f7ff feef 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011ca:	2096      	movs	r0, #150	@ 0x96
 80011cc:	f7ff fe78 	bl	8000ec0 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011d0:	f7ff feda 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	4619      	mov	r1, r3
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f971 	bl	80014c0 <BMI088_read_single_reg>
 80011de:	f7ff fee3 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011e2:	2096      	movs	r0, #150	@ 0x96
 80011e4:	f7ff fe6c 	bl	8000ec0 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	d001      	beq.n	80011f2 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80011ee:	23ff      	movs	r3, #255	@ 0xff
 80011f0:	e049      	b.n	8001286 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e042      	b.n	800127e <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 80011f8:	f7ff fec6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4924      	ldr	r1, [pc, #144]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	440b      	add	r3, r1
 8001208:	7818      	ldrb	r0, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	4920      	ldr	r1, [pc, #128]	@ (8001290 <BMI088_gyro_init+0x12c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	440b      	add	r3, r1
 8001216:	3301      	adds	r3, #1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	f000 f93c 	bl	8001498 <BMI088_write_single_reg>
 8001220:	f7ff fec2 	bl	8000fa8 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001224:	2096      	movs	r0, #150	@ 0x96
 8001226:	f7ff fe4b 	bl	8000ec0 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 800122a:	f7ff fead 	bl	8000f88 <BMI088_GYRO_NS_L>
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	4917      	ldr	r1, [pc, #92]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	440b      	add	r3, r1
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	1dba      	adds	r2, r7, #6
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f93d 	bl	80014c0 <BMI088_read_single_reg>
 8001246:	f7ff feaf 	bl	8000fa8 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800124a:	2096      	movs	r0, #150	@ 0x96
 800124c:	f7ff fe38 	bl	8000ec0 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	490f      	ldr	r1, [pc, #60]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	440b      	add	r3, r1
 800125c:	3301      	adds	r3, #1
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	429a      	cmp	r2, r3
 8001264:	d008      	beq.n	8001278 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4909      	ldr	r1, [pc, #36]	@ (8001290 <BMI088_gyro_init+0x12c>)
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	440b      	add	r3, r1
 8001272:	3302      	adds	r3, #2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	e006      	b.n	8001286 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	3301      	adds	r3, #1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d9b9      	bls.n	80011f8 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000002c 	.word	0x2000002c

08001294 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8001298:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <IMU_get_temp+0x1c>)
 800129a:	4906      	ldr	r1, [pc, #24]	@ (80012b4 <IMU_get_temp+0x20>)
 800129c:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <IMU_get_temp+0x24>)
 800129e:	f000 f80d 	bl	80012bc <BMI088_read>
	return temp;
 80012a2:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <IMU_get_temp+0x1c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	ee07 3a90 	vmov	s15, r3
}
 80012aa:	eeb0 0a67 	vmov.f32	s0, s15
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000294 	.word	0x20000294
 80012b4:	20000288 	.word	0x20000288
 80012b8:	2000027c 	.word	0x2000027c

080012bc <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80012c8:	4a70      	ldr	r2, [pc, #448]	@ (800148c <BMI088_read+0x1d0>)
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d2:	6018      	str	r0, [r3, #0]
 80012d4:	3304      	adds	r3, #4
 80012d6:	8019      	strh	r1, [r3, #0]
 80012d8:	3302      	adds	r3, #2
 80012da:	0c0a      	lsrs	r2, r1, #16
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80012e2:	f7ff fe31 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80012e6:	2092      	movs	r0, #146	@ 0x92
 80012e8:	f7ff fe6e 	bl	8000fc8 <BMI088_read_write_byte>
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2206      	movs	r2, #6
 80012f2:	4619      	mov	r1, r3
 80012f4:	2012      	movs	r0, #18
 80012f6:	f000 f8fb 	bl	80014f0 <BMI088_read_muli_reg>
 80012fa:	f7ff fe35 	bl	8000f68 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80012fe:	7d7b      	ldrb	r3, [r7, #21]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	7d3b      	ldrb	r3, [r7, #20]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800130c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001318:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <BMI088_read+0x1d4>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	7dbb      	ldrb	r3, [r7, #22]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001336:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001342:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <BMI088_read+0x1d4>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3304      	adds	r3, #4
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001354:	7e7b      	ldrb	r3, [r7, #25]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7e3b      	ldrb	r3, [r7, #24]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001362:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136e:	4b48      	ldr	r3, [pc, #288]	@ (8001490 <BMI088_read+0x1d4>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3308      	adds	r3, #8
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8001380:	f7ff fe02 	bl	8000f88 <BMI088_GYRO_NS_L>
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2208      	movs	r2, #8
 800138a:	4619      	mov	r1, r3
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f8af 	bl	80014f0 <BMI088_read_muli_reg>
 8001392:	f7ff fe09 	bl	8000fa8 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8001396:	7d3b      	ldrb	r3, [r7, #20]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d140      	bne.n	800141e <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	7dbb      	ldrb	r3, [r7, #22]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80013aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b6:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <BMI088_read+0x1d8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80013c6:	7e7b      	ldrb	r3, [r7, #25]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	7e3b      	ldrb	r3, [r7, #24]
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80013d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <BMI088_read+0x1d8>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3304      	adds	r3, #4
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80013f2:	7efb      	ldrb	r3, [r7, #27]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7ebb      	ldrb	r3, [r7, #26]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001400:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <BMI088_read+0x1d8>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3308      	adds	r3, #8
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 800141e:	f7ff fd93 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001422:	20a2      	movs	r0, #162	@ 0xa2
 8001424:	f7ff fdd0 	bl	8000fc8 <BMI088_read_write_byte>
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2202      	movs	r2, #2
 800142e:	4619      	mov	r1, r3
 8001430:	2022      	movs	r0, #34	@ 0x22
 8001432:	f000 f85d 	bl	80014f0 <BMI088_read_muli_reg>
 8001436:	f7ff fd97 	bl	8000f68 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	b21a      	sxth	r2, r3
 8001440:	7d7b      	ldrb	r3, [r7, #21]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 800144c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001454:	db04      	blt.n	8001460 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 8001456:	8bfb      	ldrh	r3, [r7, #30]
 8001458:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800145c:	b29b      	uxth	r3, r3
 800145e:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001460:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001474:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001478:	ee77 7a87 	vadd.f32	s15, s15, s14
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edc3 7a00 	vstr	s15, [r3]
}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08010bd0 	.word	0x08010bd0
 8001490:	20000010 	.word	0x20000010
 8001494:	20000014 	.word	0x20000014

08001498 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fd8c 	bl	8000fc8 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fd88 	bl	8000fc8 <BMI088_read_write_byte>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fd77 	bl	8000fc8 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 80014da:	2055      	movs	r0, #85	@ 0x55
 80014dc:	f7ff fd74 	bl	8000fc8 <BMI088_read_write_byte>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	701a      	strb	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fd5d 	bl	8000fc8 <BMI088_read_write_byte>

    while (len != 0)
 800150e:	e00c      	b.n	800152a <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001510:	2055      	movs	r0, #85	@ 0x55
 8001512:	f7ff fd59 	bl	8000fc8 <BMI088_read_write_byte>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	701a      	strb	r2, [r3, #0]
        buf++;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	603b      	str	r3, [r7, #0]
        len--;
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	3b01      	subs	r3, #1
 8001528:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ef      	bne.n	8001510 <BMI088_read_muli_reg+0x20>
    }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	f107 0214 	add.w	r2, r7, #20
 800154c:	2100      	movs	r1, #0
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f004 f8fa 	bl	8005748 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 800155a:	f080 80d9 	bcs.w	8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 800155e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001562:	d807      	bhi.n	8001574 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8001564:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001568:	d066      	beq.n	8001638 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 800156a:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 800156e:	f000 80a4 	beq.w	80016ba <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 8001572:	e0cd      	b.n	8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b6a      	ldr	r3, [pc, #424]	@ (8001728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800157e:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 8001580:	4b69      	ldr	r3, [pc, #420]	@ (8001728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4a69      	ldr	r2, [pc, #420]	@ (800172c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001588:	460b      	mov	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	881a      	ldrh	r2, [r3, #0]
 8001594:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	b210      	sxth	r0, r2
 800159c:	4a63      	ldr	r2, [pc, #396]	@ (800172c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800159e:	460b      	mov	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	3308      	adds	r3, #8
 80015aa:	4602      	mov	r2, r0
 80015ac:	801a      	strh	r2, [r3, #0]
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	7b7b      	ldrb	r3, [r7, #13]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	b290      	uxth	r0, r2
 80015c4:	4a59      	ldr	r2, [pc, #356]	@ (800172c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015c6:	460b      	mov	r3, r1
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	4602      	mov	r2, r0
 80015d2:	801a      	strh	r2, [r3, #0]
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4952      	ldr	r1, [pc, #328]	@ (8001728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015e0:	7809      	ldrb	r1, [r1, #0]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b218      	sxth	r0, r3
 80015e6:	4a51      	ldr	r2, [pc, #324]	@ (800172c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	3302      	adds	r3, #2
 80015f4:	4602      	mov	r2, r0
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	7c3b      	ldrb	r3, [r7, #16]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	7c7b      	ldrb	r3, [r7, #17]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4949      	ldr	r1, [pc, #292]	@ (8001728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001604:	7809      	ldrb	r1, [r1, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	b218      	sxth	r0, r3
 800160a:	4a48      	ldr	r2, [pc, #288]	@ (800172c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	3304      	adds	r3, #4
 8001618:	4602      	mov	r2, r0
 800161a:	801a      	strh	r2, [r3, #0]
 800161c:	4b42      	ldr	r3, [pc, #264]	@ (8001728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	7cb8      	ldrb	r0, [r7, #18]
 8001624:	4a41      	ldr	r2, [pc, #260]	@ (800172c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001626:	460b      	mov	r3, r1
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	3306      	adds	r3, #6
 8001632:	4602      	mov	r2, r0
 8001634:	701a      	strb	r2, [r3, #0]
            break;
 8001636:	e072      	b.n	800171e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8001638:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	f240 1201 	movw	r2, #257	@ 0x101
 8001640:	4293      	cmp	r3, r2
 8001642:	d067      	beq.n	8001714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 8001644:	7b3b      	ldrb	r3, [r7, #12]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	7b7b      	ldrb	r3, [r7, #13]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21a      	sxth	r2, r3
 8001652:	4b38      	ldr	r3, [pc, #224]	@ (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21a      	sxth	r2, r3
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21a      	sxth	r2, r3
 8001664:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001666:	805a      	strh	r2, [r3, #2]
 8001668:	7c3b      	ldrb	r3, [r7, #16]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	7c7b      	ldrb	r3, [r7, #17]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b21a      	sxth	r2, r3
 8001676:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001678:	809a      	strh	r2, [r3, #4]
 800167a:	7cbb      	ldrb	r3, [r7, #18]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21a      	sxth	r2, r3
 8001680:	7cfb      	ldrb	r3, [r7, #19]
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800168a:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 800168c:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800168e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001692:	f5b3 6f53 	cmp.w	r3, #3376	@ 0xd30
 8001696:	db04      	blt.n	80016a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 8001698:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800169a:	f44f 6253 	mov.w	r2, #3376	@ 0xd30
 800169e:	801a      	strh	r2, [r3, #0]
        		break;
 80016a0:	e03a      	b.n	8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	f640 0254 	movw	r2, #2132	@ 0x854
 80016ac:	4293      	cmp	r3, r2
 80016ae:	dc33      	bgt.n	8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 80016b0:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016b2:	f640 0254 	movw	r2, #2132	@ 0x854
 80016b6:	801a      	strh	r2, [r3, #0]
        		break;
 80016b8:	e02e      	b.n	8001718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	f240 1211 	movw	r2, #273	@ 0x111
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d02a      	beq.n	800171c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 80016c6:	7b3b      	ldrb	r3, [r7, #12]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7b7b      	ldrb	r3, [r7, #13]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80016e8:	805a      	strh	r2, [r3, #2]
 80016ea:	7c3b      	ldrb	r3, [r7, #16]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	7c7b      	ldrb	r3, [r7, #17]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80016fa:	809a      	strh	r2, [r3, #4]
 80016fc:	7cbb      	ldrb	r3, [r7, #18]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b21a      	sxth	r2, r3
 8001702:	7cfb      	ldrb	r3, [r7, #19]
 8001704:	b21b      	sxth	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b21a      	sxth	r2, r3
 800170a:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800170c:	80da      	strh	r2, [r3, #6]
        	    break;
 800170e:	e006      	b.n	800171e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 8001710:	bf00      	nop
 8001712:	e004      	b.n	800171e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001714:	bf00      	nop
 8001716:	e002      	b.n	800171e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001718:	bf00      	nop
 800171a:	e000      	b.n	800171e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 800171c:	bf00      	nop
        }
    }
}
 800171e:	bf00      	nop
 8001720:	3730      	adds	r7, #48	@ 0x30
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200004d0 	.word	0x200004d0
 800172c:	200002b0 	.word	0x200002b0
 8001730:	2000007c 	.word	0x2000007c
 8001734:	20000320 	.word	0x20000320
 8001738:	20000328 	.word	0x20000328

0800173c <CAN1_cmd_b2b>:
/**
  * @brief          sends board to board (b2b) communication data
  * @param[in]      yaw: (0x205) 6020 motor control current, range [-30000,30000] 
  * @retval         none
  */
void CAN1_cmd_b2b(can_msg_id_e canID, int16_t data1, int16_t data2, int16_t data3, int16_t data4) {
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	4604      	mov	r4, r0
 8001744:	4608      	mov	r0, r1
 8001746:	4611      	mov	r1, r2
 8001748:	461a      	mov	r2, r3
 800174a:	4623      	mov	r3, r4
 800174c:	80fb      	strh	r3, [r7, #6]
 800174e:	4603      	mov	r3, r0
 8001750:	80bb      	strh	r3, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	807b      	strh	r3, [r7, #2]
 8001756:	4613      	mov	r3, r2
 8001758:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    b2b_tx_message.StdId = canID;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <CAN1_cmd_b2b+0xa4>)
 800175e:	6013      	str	r3, [r2, #0]
    b2b_tx_message.IDE = CAN_ID_STD;
 8001760:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <CAN1_cmd_b2b+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    b2b_tx_message.RTR = CAN_RTR_DATA;
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <CAN1_cmd_b2b+0xa4>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    b2b_tx_message.DLC = 0x08;
 800176c:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <CAN1_cmd_b2b+0xa4>)
 800176e:	2208      	movs	r2, #8
 8001770:	611a      	str	r2, [r3, #16]
    b2b_can_send_data[0] = (data1 >> 8);
 8001772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001776:	121b      	asrs	r3, r3, #8
 8001778:	b21b      	sxth	r3, r3
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 800177e:	701a      	strb	r2, [r3, #0]
    b2b_can_send_data[1] = data1;
 8001780:	88bb      	ldrh	r3, [r7, #4]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 8001786:	705a      	strb	r2, [r3, #1]
    b2b_can_send_data[2] = (data2 >> 8);
 8001788:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800178c:	121b      	asrs	r3, r3, #8
 800178e:	b21b      	sxth	r3, r3
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 8001794:	709a      	strb	r2, [r3, #2]
    b2b_can_send_data[3] = data2;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 800179c:	70da      	strb	r2, [r3, #3]
    b2b_can_send_data[4] = (data3 >> 8);
 800179e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017a2:	121b      	asrs	r3, r3, #8
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 80017aa:	711a      	strb	r2, [r3, #4]
    b2b_can_send_data[5] = data3;
 80017ac:	883b      	ldrh	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 80017b2:	715a      	strb	r2, [r3, #5]
    b2b_can_send_data[6] = (data4 >> 8);
 80017b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017b8:	121b      	asrs	r3, r3, #8
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 80017c0:	719a      	strb	r2, [r3, #6]
    b2b_can_send_data[7] = data4;
 80017c2:	8c3b      	ldrh	r3, [r7, #32]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 80017c8:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_1, &b2b_tx_message, b2b_can_send_data, &send_mail_box);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <CAN1_cmd_b2b+0xa8>)
 80017d0:	4903      	ldr	r1, [pc, #12]	@ (80017e0 <CAN1_cmd_b2b+0xa4>)
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <CAN1_cmd_b2b+0xac>)
 80017d4:	f003 fee8 	bl	80055a8 <HAL_CAN_AddTxMessage>
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000490 	.word	0x20000490
 80017e4:	200004a8 	.word	0x200004a8
 80017e8:	20000874 	.word	0x20000874

080017ec <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4604      	mov	r4, r0
 80017f4:	4608      	mov	r0, r1
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	4623      	mov	r3, r4
 80017fc:	80fb      	strh	r3, [r7, #6]
 80017fe:	4603      	mov	r3, r0
 8001800:	80bb      	strh	r3, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	807b      	strh	r3, [r7, #2]
 8001806:	4613      	mov	r3, r2
 8001808:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	4a20      	ldr	r2, [pc, #128]	@ (8001890 <CAN2_cmd_motors+0xa4>)
 800180e:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 8001810:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <CAN2_cmd_motors+0xa4>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 8001816:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <CAN2_cmd_motors+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 800181c:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <CAN2_cmd_motors+0xa4>)
 800181e:	2208      	movs	r2, #8
 8001820:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 8001822:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001826:	121b      	asrs	r3, r3, #8
 8001828:	b21b      	sxth	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 800182e:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 8001836:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 8001838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800183c:	121b      	asrs	r3, r3, #8
 800183e:	b21b      	sxth	r3, r3
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 8001844:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 800184c:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 800184e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001852:	121b      	asrs	r3, r3, #8
 8001854:	b21b      	sxth	r3, r3
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 800185a:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 800185c:	883b      	ldrh	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 8001862:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 8001864:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001868:	121b      	asrs	r3, r3, #8
 800186a:	b21b      	sxth	r3, r3
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 8001870:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 8001872:	8c3b      	ldrh	r3, [r7, #32]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 8001878:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <CAN2_cmd_motors+0xa8>)
 8001880:	4903      	ldr	r1, [pc, #12]	@ (8001890 <CAN2_cmd_motors+0xa4>)
 8001882:	4805      	ldr	r0, [pc, #20]	@ (8001898 <CAN2_cmd_motors+0xac>)
 8001884:	f003 fe90 	bl	80055a8 <HAL_CAN_AddTxMessage>
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	200004b0 	.word	0x200004b0
 8001894:	200004c8 	.word	0x200004c8
 8001898:	2000089c 	.word	0x2000089c

0800189c <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	491c      	ldr	r1, [pc, #112]	@ (8001924 <set_M3508_current+0x88>)
 80018b4:	88ba      	ldrh	r2, [r7, #4]
 80018b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	dc02      	bgt.n	80018c8 <set_M3508_current+0x2c>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	dc04      	bgt.n	80018d0 <set_M3508_current+0x34>
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
			// usart_printf("%d\r\n", 20);
		}
		default: {
	        break;
 80018c6:	e027      	b.n	8001918 <set_M3508_current+0x7c>
 80018c8:	3b05      	subs	r3, #5
	switch(motorID) {
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d824      	bhi.n	8001918 <set_M3508_current+0x7c>
 80018ce:	e011      	b.n	80018f4 <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <set_M3508_current+0x88>)
 80018d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80018d6:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <set_M3508_current+0x88>)
 80018d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <set_M3508_current+0x88>)
 80018de:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <set_M3508_current+0x88>)
 80018e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4603      	mov	r3, r0
 80018ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018f0:	f7ff ff7c 	bl	80017ec <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <set_M3508_current+0x88>)
 80018f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <set_M3508_current+0x88>)
 80018fc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <set_M3508_current+0x88>)
 8001902:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <set_M3508_current+0x88>)
 8001908:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	4603      	mov	r3, r0
 8001910:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8001914:	f7ff ff6a 	bl	80017ec <CAN2_cmd_motors>
	        break;
 8001918:	bf00      	nop
	    }
	}
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000298 	.word	0x20000298

08001928 <set_GM6020_voltage>:
/**
  * @brief          similar to the above function, but specifically for the GM6020's voltage control mode
  * @param[in]      motor ID (5~11) and its target voltage (-25000 ~ 25000)
  * @retval         none
  */
void set_GM6020_voltage(int8_t motorID, int16_t setVoltage) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af02      	add	r7, sp, #8
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	4613      	mov	r3, r2
 8001936:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setVoltage;      // -1 for 0 indexing and -4 for group 1, which cannot contain GM6020s
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	3b01      	subs	r3, #1
 800193e:	491a      	ldr	r1, [pc, #104]	@ (80019a8 <set_GM6020_voltage+0x80>)
 8001940:	88ba      	ldrh	r2, [r7, #4]
 8001942:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b08      	cmp	r3, #8
 800194c:	dc02      	bgt.n	8001954 <set_GM6020_voltage+0x2c>
 800194e:	2b05      	cmp	r3, #5
 8001950:	da04      	bge.n	800195c <set_GM6020_voltage+0x34>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
		}
		default: {
	        break;
 8001952:	e024      	b.n	800199e <set_GM6020_voltage+0x76>
 8001954:	3b09      	subs	r3, #9
	switch(motorID) {
 8001956:	2b02      	cmp	r3, #2
 8001958:	d821      	bhi.n	800199e <set_GM6020_voltage+0x76>
 800195a:	e011      	b.n	8001980 <set_GM6020_voltage+0x58>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <set_GM6020_voltage+0x80>)
 800195e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <set_GM6020_voltage+0x80>)
 8001964:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <set_GM6020_voltage+0x80>)
 800196a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <set_GM6020_voltage+0x80>)
 8001970:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4603      	mov	r3, r0
 8001978:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800197c:	f7ff ff36 	bl	80017ec <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <set_GM6020_voltage+0x80>)
 8001982:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8001986:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <set_GM6020_voltage+0x80>)
 8001988:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <set_GM6020_voltage+0x80>)
 800198e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001992:	2000      	movs	r0, #0
 8001994:	9000      	str	r0, [sp, #0]
 8001996:	f240 20ff 	movw	r0, #767	@ 0x2ff
 800199a:	f7ff ff27 	bl	80017ec <CAN2_cmd_motors>
	        break;
 800199e:	bf00      	nop
	    }
	}
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000298 	.word	0x20000298

080019ac <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80019ac:	b490      	push	{r4, r7}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	eef0 6a40 	vmov.f32	s13, s0
 80019ba:	eeb0 7a60 	vmov.f32	s14, s1
 80019be:	eef0 7a41 	vmov.f32	s15, s2
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	4613      	mov	r3, r2
 80019c6:	81bb      	strh	r3, [r7, #12]
 80019c8:	edc7 6a00 	vstr	s13, [r7]
 80019cc:	ed87 7a01 	vstr	s14, [r7, #4]
 80019d0:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	3b01      	subs	r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 80019e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001b10 <calc_current2RPM_PID+0x164>)
 80019e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019ea:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 80019ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80019f2:	4c48      	ldr	r4, [pc, #288]	@ (8001b14 <calc_current2RPM_PID+0x168>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4423      	add	r3, r4
 80019fe:	3302      	adds	r3, #2
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	1ac2      	subs	r2, r0, r3
 8001a06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a0a:	440a      	add	r2, r1
 8001a0c:	4940      	ldr	r1, [pc, #256]	@ (8001b10 <calc_current2RPM_PID+0x164>)
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001a12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a16:	4a40      	ldr	r2, [pc, #256]	@ (8001b18 <calc_current2RPM_PID+0x16c>)
 8001a18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a1c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a20:	483c      	ldr	r0, [pc, #240]	@ (8001b14 <calc_current2RPM_PID+0x168>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4403      	add	r3, r0
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a38:	1a8a      	subs	r2, r1, r2
 8001a3a:	4938      	ldr	r1, [pc, #224]	@ (8001b1c <calc_current2RPM_PID+0x170>)
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001a40:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a44:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a48:	4832      	ldr	r0, [pc, #200]	@ (8001b14 <calc_current2RPM_PID+0x168>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4403      	add	r3, r0
 8001a54:	3302      	adds	r3, #2
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a60:	1a8a      	subs	r2, r1, r2
 8001a62:	492f      	ldr	r1, [pc, #188]	@ (8001b20 <calc_current2RPM_PID+0x174>)
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001a68:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a6c:	4929      	ldr	r1, [pc, #164]	@ (8001b14 <calc_current2RPM_PID+0x168>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	440b      	add	r3, r1
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4a24      	ldr	r2, [pc, #144]	@ (8001b18 <calc_current2RPM_PID+0x16c>)
 8001a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001a8a:	ed97 7a00 	vldr	s14, [r7]
 8001a8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a92:	4a23      	ldr	r2, [pc, #140]	@ (8001b20 <calc_current2RPM_PID+0x174>)
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001aa8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001aac:	4a18      	ldr	r2, [pc, #96]	@ (8001b10 <calc_current2RPM_PID+0x164>)
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac2:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001aca:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <calc_current2RPM_PID+0x170>)
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae4:	ee17 3a90 	vmov	r3, s15
 8001ae8:	617b      	str	r3, [r7, #20]
	//apply power limit
	//if (ID == 6) {sendB2bData(CAN_b2b_B_gyro_ID, errRPM[5], 0, 0, 0);}
	if (return_current_val > 16384) {return_current_val = 16384;}
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001af0:	dd02      	ble.n	8001af8 <calc_current2RPM_PID+0x14c>
 8001af2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001af6:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001afe:	da01      	bge.n	8001b04 <calc_current2RPM_PID+0x158>
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <calc_current2RPM_PID+0x178>)
 8001b02:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001b04:	697b      	ldr	r3, [r7, #20]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc90      	pop	{r4, r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20000388 	.word	0x20000388
 8001b14:	200002b0 	.word	0x200002b0
 8001b18:	20000330 	.word	0x20000330
 8001b1c:	2000035c 	.word	0x2000035c
 8001b20:	200003b4 	.word	0x200003b4
 8001b24:	ffffc000 	.word	0xffffc000

08001b28 <calc_M2006_current2RPM_PID>:

int32_t calc_M2006_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460a      	mov	r2, r1
 8001b32:	eef0 6a40 	vmov.f32	s13, s0
 8001b36:	eeb0 7a60 	vmov.f32	s14, s1
 8001b3a:	eef0 7a41 	vmov.f32	s15, s2
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	4613      	mov	r3, r2
 8001b42:	81bb      	strh	r3, [r7, #12]
 8001b44:	edc7 6a00 	vstr	s13, [r7]
 8001b48:	ed87 7a01 	vstr	s14, [r7, #4]
 8001b4c:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001b5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b60:	4a54      	ldr	r2, [pc, #336]	@ (8001cb4 <calc_M2006_current2RPM_PID+0x18c>)
 8001b62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b66:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001b6a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b6e:	4c52      	ldr	r4, [pc, #328]	@ (8001cb8 <calc_M2006_current2RPM_PID+0x190>)
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4423      	add	r3, r4
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b80:	1ac2      	subs	r2, r0, r3
 8001b82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b86:	440a      	add	r2, r1
 8001b88:	494a      	ldr	r1, [pc, #296]	@ (8001cb4 <calc_M2006_current2RPM_PID+0x18c>)
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001b8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b92:	4a4a      	ldr	r2, [pc, #296]	@ (8001cbc <calc_M2006_current2RPM_PID+0x194>)
 8001b94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b98:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b9c:	4846      	ldr	r0, [pc, #280]	@ (8001cb8 <calc_M2006_current2RPM_PID+0x190>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4403      	add	r3, r0
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bb4:	1a8a      	subs	r2, r1, r2
 8001bb6:	4942      	ldr	r1, [pc, #264]	@ (8001cc0 <calc_M2006_current2RPM_PID+0x198>)
 8001bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001bbc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001bc0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001bc4:	483c      	ldr	r0, [pc, #240]	@ (8001cb8 <calc_M2006_current2RPM_PID+0x190>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4403      	add	r3, r0
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bdc:	1a8a      	subs	r2, r1, r2
 8001bde:	4939      	ldr	r1, [pc, #228]	@ (8001cc4 <calc_M2006_current2RPM_PID+0x19c>)
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001be4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001be8:	4933      	ldr	r1, [pc, #204]	@ (8001cb8 <calc_M2006_current2RPM_PID+0x190>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4a2e      	ldr	r2, [pc, #184]	@ (8001cbc <calc_M2006_current2RPM_PID+0x194>)
 8001c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//if(iRPM[ID] >= 3000) {iRPM[ID] = 3000;}
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001c06:	ed97 7a00 	vldr	s14, [r7]
 8001c0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc4 <calc_M2006_current2RPM_PID+0x19c>)
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c20:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c28:	4a22      	ldr	r2, [pc, #136]	@ (8001cb4 <calc_M2006_current2RPM_PID+0x18c>)
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c3e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c46:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc0 <calc_M2006_current2RPM_PID+0x198>)
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c60:	ee17 3a90 	vmov	r3, s15
 8001c64:	617b      	str	r3, [r7, #20]
	sendB2bData(CAN_b2b_B_gyro_ID, motor_feedback[ID].speed_rpm, -5400, 0, 0);
 8001c66:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001c6a:	4913      	ldr	r1, [pc, #76]	@ (8001cb8 <calc_M2006_current2RPM_PID+0x190>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	440b      	add	r3, r1
 8001c76:	3302      	adds	r3, #2
 8001c78:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2300      	movs	r3, #0
 8001c82:	4a11      	ldr	r2, [pc, #68]	@ (8001cc8 <calc_M2006_current2RPM_PID+0x1a0>)
 8001c84:	f44f 7089 	mov.w	r0, #274	@ 0x112
 8001c88:	f000 faac 	bl	80021e4 <sendB2bData>
	//apply power limit
	if (return_current_val > 10000) {return_current_val = 10000;}
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001c92:	4293      	cmp	r3, r2
 8001c94:	dd02      	ble.n	8001c9c <calc_M2006_current2RPM_PID+0x174>
 8001c96:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c9a:	617b      	str	r3, [r7, #20]
	if (return_current_val < -10000) {return_current_val = -10000;}
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <calc_M2006_current2RPM_PID+0x1a4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	da01      	bge.n	8001ca8 <calc_M2006_current2RPM_PID+0x180>
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <calc_M2006_current2RPM_PID+0x1a4>)
 8001ca6:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001ca8:	697b      	ldr	r3, [r7, #20]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000388 	.word	0x20000388
 8001cb8:	200002b0 	.word	0x200002b0
 8001cbc:	20000330 	.word	0x20000330
 8001cc0:	2000035c 	.word	0x2000035c
 8001cc4:	200003b4 	.word	0x200003b4
 8001cc8:	ffffeae8 	.word	0xffffeae8
 8001ccc:	ffffd8f0 	.word	0xffffd8f0

08001cd0 <calc_voltage2RPM_PID>:

int32_t calc_voltage2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001cd0:	b490      	push	{r4, r7}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	eef0 6a40 	vmov.f32	s13, s0
 8001cde:	eeb0 7a60 	vmov.f32	s14, s1
 8001ce2:	eef0 7a41 	vmov.f32	s15, s2
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	81bb      	strh	r3, [r7, #12]
 8001cec:	edc7 6a00 	vstr	s13, [r7]
 8001cf0:	ed87 7a01 	vstr	s14, [r7, #4]
 8001cf4:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001d04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d08:	4a53      	ldr	r2, [pc, #332]	@ (8001e58 <calc_voltage2RPM_PID+0x188>)
 8001d0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d0e:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001d12:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d16:	4c51      	ldr	r4, [pc, #324]	@ (8001e5c <calc_voltage2RPM_PID+0x18c>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4423      	add	r3, r4
 8001d22:	3302      	adds	r3, #2
 8001d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d28:	1ac2      	subs	r2, r0, r3
 8001d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d2e:	440a      	add	r2, r1
 8001d30:	4949      	ldr	r1, [pc, #292]	@ (8001e58 <calc_voltage2RPM_PID+0x188>)
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001d36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d3a:	4a49      	ldr	r2, [pc, #292]	@ (8001e60 <calc_voltage2RPM_PID+0x190>)
 8001d3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d40:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d44:	4845      	ldr	r0, [pc, #276]	@ (8001e5c <calc_voltage2RPM_PID+0x18c>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4403      	add	r3, r0
 8001d50:	3302      	adds	r3, #2
 8001d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d56:	461a      	mov	r2, r3
 8001d58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d5c:	1a8a      	subs	r2, r1, r2
 8001d5e:	4941      	ldr	r1, [pc, #260]	@ (8001e64 <calc_voltage2RPM_PID+0x194>)
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001d64:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001d68:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d6c:	483b      	ldr	r0, [pc, #236]	@ (8001e5c <calc_voltage2RPM_PID+0x18c>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4403      	add	r3, r0
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001d84:	1a8a      	subs	r2, r1, r2
 8001d86:	4938      	ldr	r1, [pc, #224]	@ (8001e68 <calc_voltage2RPM_PID+0x198>)
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// usart_printf("%d %d\r\n", getMotorRPM(5), 0);
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001d8c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001d90:	4932      	ldr	r1, [pc, #200]	@ (8001e5c <calc_voltage2RPM_PID+0x18c>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001da2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e60 <calc_voltage2RPM_PID+0x190>)
 8001daa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (iRPM[ID] >= 3400) {iRPM[ID] = 2600;}
 8001dae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001db2:	4a29      	ldr	r2, [pc, #164]	@ (8001e58 <calc_voltage2RPM_PID+0x188>)
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	dd06      	ble.n	8001dce <calc_voltage2RPM_PID+0xfe>
 8001dc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001dc4:	4a24      	ldr	r2, [pc, #144]	@ (8001e58 <calc_voltage2RPM_PID+0x188>)
 8001dc6:	f640 2128 	movw	r1, #2600	@ 0xa28
 8001dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001dce:	ed97 7a00 	vldr	s14, [r7]
 8001dd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001dd6:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <calc_voltage2RPM_PID+0x198>)
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de8:	edd7 6a01 	vldr	s13, [r7, #4]
 8001dec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <calc_voltage2RPM_PID+0x188>)
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e06:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <calc_voltage2RPM_PID+0x194>)
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e28:	ee17 3a90 	vmov	r3, s15
 8001e2c:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001e34:	4293      	cmp	r3, r2
 8001e36:	dd02      	ble.n	8001e3e <calc_voltage2RPM_PID+0x16e>
 8001e38:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001e3c:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <calc_voltage2RPM_PID+0x19c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	da01      	bge.n	8001e4a <calc_voltage2RPM_PID+0x17a>
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <calc_voltage2RPM_PID+0x19c>)
 8001e48:	617b      	str	r3, [r7, #20]

	return return_voltage_val;
 8001e4a:	697b      	ldr	r3, [r7, #20]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc90      	pop	{r4, r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000388 	.word	0x20000388
 8001e5c:	200002b0 	.word	0x200002b0
 8001e60:	20000330 	.word	0x20000330
 8001e64:	2000035c 	.word	0x2000035c
 8001e68:	200003b4 	.word	0x200003b4
 8001e6c:	ffff9e58 	.word	0xffff9e58

08001e70 <calc_voltage2Position_PID>:
	if (return_current_val > 16384) {return_current_val = 16384;}
	if (return_current_val < -16384) {return_current_val = -16384;}
	return return_current_val;
}

int32_t calc_voltage2Position_PID(int8_t motorID, int16_t position, PID_preset_t preset) {
 8001e70:	b490      	push	{r4, r7}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	460a      	mov	r2, r1
 8001e7a:	eef0 6a40 	vmov.f32	s13, s0
 8001e7e:	eeb0 7a60 	vmov.f32	s14, s1
 8001e82:	eef0 7a41 	vmov.f32	s15, s2
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	81bb      	strh	r3, [r7, #12]
 8001e8c:	edc7 6a00 	vstr	s13, [r7]
 8001e90:	ed87 7a01 	vstr	s14, [r7, #4]
 8001e94:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	74fb      	strb	r3, [r7, #19]
	iPosition[ID] += position - motor_feedback[ID].motor_position;      // add to integral term
 8001ea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ea8:	4a47      	ldr	r2, [pc, #284]	@ (8001fc8 <calc_voltage2Position_PID+0x158>)
 8001eaa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eae:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001eb2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001eb6:	4c45      	ldr	r4, [pc, #276]	@ (8001fcc <calc_voltage2Position_PID+0x15c>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4423      	add	r3, r4
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	1ac2      	subs	r2, r0, r3
 8001ec6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001eca:	440a      	add	r2, r1
 8001ecc:	493e      	ldr	r1, [pc, #248]	@ (8001fc8 <calc_voltage2Position_PID+0x158>)
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dPosition[ID] = lastPosition[ID] - motor_feedback[ID].motor_position;       // update derivative term
 8001ed2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fd0 <calc_voltage2Position_PID+0x160>)
 8001ed8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001edc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001ee0:	483a      	ldr	r0, [pc, #232]	@ (8001fcc <calc_voltage2Position_PID+0x15c>)
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4403      	add	r3, r0
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ef4:	1a8a      	subs	r2, r1, r2
 8001ef6:	4937      	ldr	r1, [pc, #220]	@ (8001fd4 <calc_voltage2Position_PID+0x164>)
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errPosition[ID] = position - motor_feedback[ID].motor_position;     // update proportional term
 8001efc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001f00:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001f04:	4831      	ldr	r0, [pc, #196]	@ (8001fcc <calc_voltage2Position_PID+0x15c>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4403      	add	r3, r0
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f18:	1a8a      	subs	r2, r1, r2
 8001f1a:	492f      	ldr	r1, [pc, #188]	@ (8001fd8 <calc_voltage2Position_PID+0x168>)
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastPosition[ID] = motor_feedback[ID].motor_position;
 8001f20:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001f24:	4929      	ldr	r1, [pc, #164]	@ (8001fcc <calc_voltage2Position_PID+0x15c>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	440b      	add	r3, r1
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4a25      	ldr	r2, [pc, #148]	@ (8001fd0 <calc_voltage2Position_PID+0x160>)
 8001f3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errPosition[ID]) + (preset.kI * iPosition[ID]) + (preset.kD * dPosition[ID]);
 8001f3e:	ed97 7a00 	vldr	s14, [r7]
 8001f42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f46:	4a24      	ldr	r2, [pc, #144]	@ (8001fd8 <calc_voltage2Position_PID+0x168>)
 8001f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f58:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f60:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <calc_voltage2Position_PID+0x158>)
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f76:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f7e:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <calc_voltage2Position_PID+0x164>)
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f98:	ee17 3a90 	vmov	r3, s15
 8001f9c:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	dd02      	ble.n	8001fae <calc_voltage2Position_PID+0x13e>
 8001fa8:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001fac:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <calc_voltage2Position_PID+0x16c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	da01      	bge.n	8001fba <calc_voltage2Position_PID+0x14a>
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <calc_voltage2Position_PID+0x16c>)
 8001fb8:	617b      	str	r3, [r7, #20]
	return return_voltage_val;
 8001fba:	697b      	ldr	r3, [r7, #20]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc90      	pop	{r4, r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000438 	.word	0x20000438
 8001fcc:	200002b0 	.word	0x200002b0
 8001fd0:	200003e0 	.word	0x200003e0
 8001fd4:	2000040c 	.word	0x2000040c
 8001fd8:	20000464 	.word	0x20000464
 8001fdc:	ffff9e58 	.word	0xffff9e58

08001fe0 <setM3508RPM>:

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460a      	mov	r2, r1
 8001fea:	eef0 6a40 	vmov.f32	s13, s0
 8001fee:	eeb0 7a60 	vmov.f32	s14, s1
 8001ff2:	eef0 7a41 	vmov.f32	s15, s2
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	81bb      	strh	r3, [r7, #12]
 8001ffc:	edc7 6a00 	vstr	s13, [r7]
 8002000:	ed87 7a01 	vstr	s14, [r7, #4]
 8002004:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 8002008:	edd7 6a00 	vldr	s13, [r7]
 800200c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002010:	edd7 7a02 	vldr	s15, [r7, #8]
 8002014:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201c:	eeb0 0a66 	vmov.f32	s0, s13
 8002020:	eef0 0a47 	vmov.f32	s1, s14
 8002024:	eeb0 1a67 	vmov.f32	s2, s15
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fcbe 	bl	80019ac <calc_current2RPM_PID>
 8002030:	4603      	mov	r3, r0
 8002032:	b21a      	sxth	r2, r3
 8002034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fc2e 	bl	800189c <set_M3508_current>
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <setGM6020voltageRPM>:

void setGM6020currentRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
}

void setGM6020voltageRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	eef0 6a40 	vmov.f32	s13, s0
 8002056:	eeb0 7a60 	vmov.f32	s14, s1
 800205a:	eef0 7a41 	vmov.f32	s15, s2
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	4613      	mov	r3, r2
 8002062:	81bb      	strh	r3, [r7, #12]
 8002064:	edc7 6a00 	vstr	s13, [r7]
 8002068:	ed87 7a01 	vstr	s14, [r7, #4]
 800206c:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2RPM_PID(motorID, RPMtarget, preset));
 8002070:	edd7 6a00 	vldr	s13, [r7]
 8002074:	ed97 7a01 	vldr	s14, [r7, #4]
 8002078:	edd7 7a02 	vldr	s15, [r7, #8]
 800207c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002084:	eeb0 0a66 	vmov.f32	s0, s13
 8002088:	eef0 0a47 	vmov.f32	s1, s14
 800208c:	eeb0 1a67 	vmov.f32	s2, s15
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe1c 	bl	8001cd0 <calc_voltage2RPM_PID>
 8002098:	4603      	mov	r3, r0
 800209a:	b21a      	sxth	r2, r3
 800209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fc40 	bl	8001928 <set_GM6020_voltage>
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <setGM6020voltagePosition>:
void setGM6020currentPosition(int8_t motorID, int16_t position, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2Position_PID(motorID, position, preset));

}

void setGM6020voltagePosition(int8_t motorID, int16_t position, PID_preset_t preset) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	460a      	mov	r2, r1
 80020ba:	eef0 6a40 	vmov.f32	s13, s0
 80020be:	eeb0 7a60 	vmov.f32	s14, s1
 80020c2:	eef0 7a41 	vmov.f32	s15, s2
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	4613      	mov	r3, r2
 80020ca:	81bb      	strh	r3, [r7, #12]
 80020cc:	edc7 6a00 	vstr	s13, [r7]
 80020d0:	ed87 7a01 	vstr	s14, [r7, #4]
 80020d4:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2Position_PID(motorID, position, preset));
 80020d8:	edd7 6a00 	vldr	s13, [r7]
 80020dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80020e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ec:	eeb0 0a66 	vmov.f32	s0, s13
 80020f0:	eef0 0a47 	vmov.f32	s1, s14
 80020f4:	eeb0 1a67 	vmov.f32	s2, s15
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff feb8 	bl	8001e70 <calc_voltage2Position_PID>
 8002100:	4603      	mov	r3, r0
 8002102:	b21a      	sxth	r2, r3
 8002104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fc0c 	bl	8001928 <set_GM6020_voltage>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <setM2006RPM>:

void setM2006RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	460a      	mov	r2, r1
 8002122:	eef0 6a40 	vmov.f32	s13, s0
 8002126:	eeb0 7a60 	vmov.f32	s14, s1
 800212a:	eef0 7a41 	vmov.f32	s15, s2
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	4613      	mov	r3, r2
 8002132:	81bb      	strh	r3, [r7, #12]
 8002134:	edc7 6a00 	vstr	s13, [r7]
 8002138:	ed87 7a01 	vstr	s14, [r7, #4]
 800213c:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_M2006_current2RPM_PID(motorID, RPMtarget, preset));
 8002140:	edd7 6a00 	vldr	s13, [r7]
 8002144:	ed97 7a01 	vldr	s14, [r7, #4]
 8002148:	edd7 7a02 	vldr	s15, [r7, #8]
 800214c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002154:	eeb0 0a66 	vmov.f32	s0, s13
 8002158:	eef0 0a47 	vmov.f32	s1, s14
 800215c:	eeb0 1a67 	vmov.f32	s2, s15
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fce0 	bl	8001b28 <calc_M2006_current2RPM_PID>
 8002168:	4603      	mov	r3, r0
 800216a:	b21a      	sxth	r2, r3
 800216c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fb92 	bl	800189c <set_M3508_current>
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <getMotorPosition>:

uint16_t getMotorPosition(int8_t motorID) {
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].motor_position;
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	4906      	ldr	r1, [pc, #24]	@ (80021ac <getMotorPosition+0x2c>)
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	440b      	add	r3, r1
 800219c:	881b      	ldrh	r3, [r3, #0]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	200002b0 	.word	0x200002b0

080021b0 <getMotorRPM>:

int16_t getMotorRPM(int8_t motorID) {
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].speed_rpm;
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	1e5a      	subs	r2, r3, #1
 80021c0:	4907      	ldr	r1, [pc, #28]	@ (80021e0 <getMotorRPM+0x30>)
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	440b      	add	r3, r1
 80021cc:	3302      	adds	r3, #2
 80021ce:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	200002b0 	.word	0x200002b0

080021e4 <sendB2bData>:

void setB2bID (can_msg_id_e canID) {
	boardID = canID;
}

void sendB2bData(can_msg_id_e canID, int16_t data1, int16_t data2, int16_t data3, int16_t data4) {
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	4604      	mov	r4, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4623      	mov	r3, r4
 80021f4:	80fb      	strh	r3, [r7, #6]
 80021f6:	4603      	mov	r3, r0
 80021f8:	80bb      	strh	r3, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	807b      	strh	r3, [r7, #2]
 80021fe:	4613      	mov	r3, r2
 8002200:	803b      	strh	r3, [r7, #0]
	CAN1_cmd_b2b(canID, data1, data2, data3, data4);
 8002202:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002206:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800220a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800220e:	88f8      	ldrh	r0, [r7, #6]
 8002210:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4623      	mov	r3, r4
 8002218:	f7ff fa90 	bl	800173c <CAN1_cmd_b2b>
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}

08002224 <usart_Init>:
remote_control_t remote_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8002228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800222c:	4905      	ldr	r1, [pc, #20]	@ (8002244 <usart_Init+0x20>)
 800222e:	4806      	ldr	r0, [pc, #24]	@ (8002248 <usart_Init+0x24>)
 8002230:	f007 fd10 	bl	8009c54 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8002234:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002238:	4904      	ldr	r1, [pc, #16]	@ (800224c <usart_Init+0x28>)
 800223a:	4805      	ldr	r0, [pc, #20]	@ (8002250 <usart_Init+0x2c>)
 800223c:	f007 fd0a 	bl	8009c54 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200004d4 	.word	0x200004d4
 8002248:	20000a90 	.word	0x20000a90
 800224c:	200005d4 	.word	0x200005d4
 8002250:	20000b20 	.word	0x20000b20

08002254 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8002254:	b40f      	push	{r0, r1, r2, r3}
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <usart_printf+0x3c>)
 8002260:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <usart_printf+0x3c>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	480a      	ldr	r0, [pc, #40]	@ (8002294 <usart_printf+0x40>)
 800226a:	f00c fb79 	bl	800e960 <vsiprintf>
 800226e:	4603      	mov	r3, r0
 8002270:	b29a      	uxth	r2, r3
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <usart_printf+0x44>)
 8002274:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <usart_printf+0x44>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	4905      	ldr	r1, [pc, #20]	@ (8002294 <usart_printf+0x40>)
 800227e:	4807      	ldr	r0, [pc, #28]	@ (800229c <usart_printf+0x48>)
 8002280:	f007 fc78 	bl	8009b74 <HAL_UART_Transmit_DMA>
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800228c:	b004      	add	sp, #16
 800228e:	4770      	bx	lr
 8002290:	2000070c 	.word	0x2000070c
 8002294:	20000710 	.word	0x20000710
 8002298:	20000810 	.word	0x20000810
 800229c:	20000a90 	.word	0x20000a90

080022a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
	if (huart == &huart6) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xc4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d152      	bne.n	800235a <HAL_UARTEx_RxEventCallback+0xba>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80022b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022b8:	492b      	ldr	r1, [pc, #172]	@ (8002368 <HAL_UARTEx_RxEventCallback+0xc8>)
 80022ba:	482a      	ldr	r0, [pc, #168]	@ (8002364 <HAL_UARTEx_RxEventCallback+0xc4>)
 80022bc:	f007 fcca 	bl	8009c54 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 80022c0:	4b29      	ldr	r3, [pc, #164]	@ (8002368 <HAL_UARTEx_RxEventCallback+0xc8>)
 80022c2:	795b      	ldrb	r3, [r3, #5]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	4b27      	ldr	r3, [pc, #156]	@ (8002368 <HAL_UARTEx_RxEventCallback+0xc8>)
 80022ca:	799b      	ldrb	r3, [r3, #6]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	81fb      	strh	r3, [r7, #14]
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 80022d4:	89fb      	ldrh	r3, [r7, #14]
 80022d6:	f240 2202 	movw	r2, #514	@ 0x202
 80022da:	4293      	cmp	r3, r2
 80022dc:	d036      	beq.n	800234c <HAL_UARTEx_RxEventCallback+0xac>
 80022de:	f240 2202 	movw	r2, #514	@ 0x202
 80022e2:	4293      	cmp	r3, r2
 80022e4:	dc38      	bgt.n	8002358 <HAL_UARTEx_RxEventCallback+0xb8>
 80022e6:	f240 2201 	movw	r2, #513	@ 0x201
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d028      	beq.n	8002340 <HAL_UARTEx_RxEventCallback+0xa0>
 80022ee:	f240 2201 	movw	r2, #513	@ 0x201
 80022f2:	4293      	cmp	r3, r2
 80022f4:	dc30      	bgt.n	8002358 <HAL_UARTEx_RxEventCallback+0xb8>
 80022f6:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80022fa:	da2d      	bge.n	8002358 <HAL_UARTEx_RxEventCallback+0xb8>
 80022fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002300:	da1e      	bge.n	8002340 <HAL_UARTEx_RxEventCallback+0xa0>
 8002302:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002306:	dc27      	bgt.n	8002358 <HAL_UARTEx_RxEventCallback+0xb8>
 8002308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800230c:	dc18      	bgt.n	8002340 <HAL_UARTEx_RxEventCallback+0xa0>
 800230e:	2b03      	cmp	r3, #3
 8002310:	d010      	beq.n	8002334 <HAL_UARTEx_RxEventCallback+0x94>
 8002312:	2b03      	cmp	r3, #3
 8002314:	dc20      	bgt.n	8002358 <HAL_UARTEx_RxEventCallback+0xb8>
 8002316:	2b01      	cmp	r3, #1
 8002318:	d002      	beq.n	8002320 <HAL_UARTEx_RxEventCallback+0x80>
 800231a:	2b02      	cmp	r3, #2
 800231c:	d006      	beq.n	800232c <HAL_UARTEx_RxEventCallback+0x8c>
		    case MINIMAP_DATA_HEADER: {}
		    case CUSTOM_INFO_HEADER: {}

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 800231e:	e01b      	b.n	8002358 <HAL_UARTEx_RxEventCallback+0xb8>
		    	memcpy(&game_status, (RxBuff_2 + frame_header_offset), game_status_len);
 8002320:	4b12      	ldr	r3, [pc, #72]	@ (800236c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002322:	220b      	movs	r2, #11
 8002324:	4619      	mov	r1, r3
 8002326:	4812      	ldr	r0, [pc, #72]	@ (8002370 <HAL_UARTEx_RxEventCallback+0xd0>)
 8002328:	f00c fbf9 	bl	800eb1e <memcpy>
		    	memcpy(&game_result, (RxBuff_2 + frame_header_offset), game_result_len);
 800232c:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <HAL_UARTEx_RxEventCallback+0xcc>)
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002332:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 8002334:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002336:	220d      	movs	r2, #13
 8002338:	4619      	mov	r1, r3
 800233a:	480f      	ldr	r0, [pc, #60]	@ (8002378 <HAL_UARTEx_RxEventCallback+0xd8>)
 800233c:	f00c fbef 	bl	800eb1e <memcpy>
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_UARTEx_RxEventCallback+0xcc>)
 8002342:	220d      	movs	r2, #13
 8002344:	4619      	mov	r1, r3
 8002346:	480c      	ldr	r0, [pc, #48]	@ (8002378 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002348:	f00c fbe9 	bl	800eb1e <memcpy>
		    	memcpy(&power_heat_data, (RxBuff_2 + frame_header_offset), power_heat_data_len);
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_UARTEx_RxEventCallback+0xcc>)
 800234e:	2210      	movs	r2, #16
 8002350:	4619      	mov	r1, r3
 8002352:	480a      	ldr	r0, [pc, #40]	@ (800237c <HAL_UARTEx_RxEventCallback+0xdc>)
 8002354:	f00c fbe3 	bl	800eb1e <memcpy>
		        break;
 8002358:	bf00      	nop
		    }
		}
	}
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000b20 	.word	0x20000b20
 8002368:	200005d4 	.word	0x200005d4
 800236c:	200005db 	.word	0x200005db
 8002370:	200006d8 	.word	0x200006d8
 8002374:	200006e8 	.word	0x200006e8
 8002378:	200006ec 	.word	0x200006ec
 800237c:	200006fc 	.word	0x200006fc

08002380 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8002386:	2301      	movs	r3, #1
 8002388:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80023aa:	463b      	mov	r3, r7
 80023ac:	4619      	mov	r1, r3
 80023ae:	480f      	ldr	r0, [pc, #60]	@ (80023ec <can_filter_init+0x6c>)
 80023b0:	f002 ffd6 	bl	8005360 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80023b4:	480d      	ldr	r0, [pc, #52]	@ (80023ec <can_filter_init+0x6c>)
 80023b6:	f003 f8b3 	bl	8005520 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80023ba:	2102      	movs	r1, #2
 80023bc:	480b      	ldr	r0, [pc, #44]	@ (80023ec <can_filter_init+0x6c>)
 80023be:	f003 fae5 	bl	800598c <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 80023c2:	230e      	movs	r3, #14
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 80023c6:	230e      	movs	r3, #14
 80023c8:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80023ca:	463b      	mov	r3, r7
 80023cc:	4619      	mov	r1, r3
 80023ce:	4808      	ldr	r0, [pc, #32]	@ (80023f0 <can_filter_init+0x70>)
 80023d0:	f002 ffc6 	bl	8005360 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80023d4:	4806      	ldr	r0, [pc, #24]	@ (80023f0 <can_filter_init+0x70>)
 80023d6:	f003 f8a3 	bl	8005520 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80023da:	2102      	movs	r1, #2
 80023dc:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <can_filter_init+0x70>)
 80023de:	f003 fad5 	bl	800598c <HAL_CAN_ActivateNotification>
}
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	@ 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000874 	.word	0x20000874
 80023f0:	2000089c 	.word	0x2000089c

080023f4 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80023fe:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <imu_pwm_set+0x1c>)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40014400 	.word	0x40014400

08002414 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8002422:	4b27      	ldr	r3, [pc, #156]	@ (80024c0 <RC_init+0xac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	4b25      	ldr	r3, [pc, #148]	@ (80024c0 <RC_init+0xac>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002430:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8002432:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <RC_init+0xac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	4b21      	ldr	r3, [pc, #132]	@ (80024c0 <RC_init+0xac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0210 	orr.w	r2, r2, #16
 8002440:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8002442:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <RC_init+0xb0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <RC_init+0xb0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002452:	e007      	b.n	8002464 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002454:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <RC_init+0xb0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <RC_init+0xb0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002464:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <RC_init+0xb0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8002472:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <RC_init+0xb0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <RC_init+0xb4>)
 8002478:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <RC_init+0xb0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <RC_init+0xb0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <RC_init+0xb0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002492:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <RC_init+0xb0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <RC_init+0xb0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80024a0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <RC_init+0xb0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <RC_init+0xb0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000ad8 	.word	0x20000ad8
 80024c4:	20000c28 	.word	0x20000c28
 80024c8:	40004804 	.word	0x40004804

080024cc <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
    osDelay(500);
 80024d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024d8:	f008 fe1c 	bl	800b114 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80024dc:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002580 <imu_temp_control_task+0xb4>
 80024e0:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002584 <imu_temp_control_task+0xb8>
 80024e4:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <imu_temp_control_task+0xbc>)
 80024e6:	2100      	movs	r1, #0
 80024e8:	4828      	ldr	r0, [pc, #160]	@ (800258c <imu_temp_control_task+0xc0>)
 80024ea:	f001 fb9b 	bl	8003c24 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024ee:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <imu_temp_control_task+0xc4>)
 80024f0:	2210      	movs	r2, #16
 80024f2:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024f4:	4826      	ldr	r0, [pc, #152]	@ (8002590 <imu_temp_control_task+0xc4>)
 80024f6:	f006 f824 	bl	8008542 <HAL_SPI_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8002500:	f001 fb8a 	bl	8003c18 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8002504:	2000      	movs	r0, #0
 8002506:	f009 ff23 	bl	800c350 <pcTaskGetName>
 800250a:	4603      	mov	r3, r0
 800250c:	4618      	mov	r0, r3
 800250e:	f009 ffb3 	bl	800c478 <xTaskGetHandle>
 8002512:	4603      	mov	r3, r0
 8002514:	4a1f      	ldr	r2, [pc, #124]	@ (8002594 <imu_temp_control_task+0xc8>)
 8002516:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <imu_temp_control_task+0xcc>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 800251e:	bf00      	nop
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	2001      	movs	r0, #1
 8002526:	f00a fbd3 	bl	800ccd0 <ulTaskNotifyTake>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d1f7      	bne.n	8002520 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8002530:	f7fe feb0 	bl	8001294 <IMU_get_temp>
 8002534:	eef0 7a40 	vmov.f32	s15, s0
 8002538:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800259c <imu_temp_control_task+0xd0>
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	4812      	ldr	r0, [pc, #72]	@ (800258c <imu_temp_control_task+0xc0>)
 8002542:	f001 fbc6 	bl	8003cd2 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <imu_temp_control_task+0xc0>)
 8002548:	edd3 7a08 	vldr	s15, [r3, #32]
 800254c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002554:	d503      	bpl.n	800255e <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8002556:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <imu_temp_control_task+0xc0>)
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 800255e:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <imu_temp_control_task+0xc0>)
 8002560:	edd3 7a08 	vldr	s15, [r3, #32]
 8002564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002568:	ee17 3a90 	vmov	r3, s15
 800256c:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff3f 	bl	80023f4 <imu_pwm_set>
        osDelay(5);
 8002576:	2005      	movs	r0, #5
 8002578:	f008 fdcc 	bl	800b114 <osDelay>
    {
 800257c:	e7cf      	b.n	800251e <imu_temp_control_task+0x52>
 800257e:	bf00      	nop
 8002580:	45898000 	.word	0x45898000
 8002584:	458ca000 	.word	0x458ca000
 8002588:	08010cbc 	.word	0x08010cbc
 800258c:	2000081c 	.word	0x2000081c
 8002590:	20000918 	.word	0x20000918
 8002594:	20000814 	.word	0x20000814
 8002598:	20000818 	.word	0x20000818
 800259c:	42200000 	.word	0x42200000

080025a0 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_GPIO_EXTI_Callback+0x54>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	88fa      	ldrh	r2, [r7, #6]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d11b      	bne.n	80025ec <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 80025b4:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_GPIO_EXTI_Callback+0x58>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d016      	beq.n	80025ec <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80025be:	f00a faf9 	bl	800cbb4 <xTaskGetSchedulerState>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d011      	beq.n	80025ec <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 80025c8:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <HAL_GPIO_EXTI_Callback+0x5c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	490c      	ldr	r1, [pc, #48]	@ (8002600 <HAL_GPIO_EXTI_Callback+0x60>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f00a fbca 	bl	800cd68 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_GPIO_EXTI_Callback+0x60>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_EXTI_Callback+0x4c>
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_GPIO_EXTI_Callback+0x64>)
 80025de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	2000000e 	.word	0x2000000e
 80025f8:	20000818 	.word	0x20000818
 80025fc:	20000814 	.word	0x20000814
 8002600:	20000864 	.word	0x20000864
 8002604:	e000ed04 	.word	0xe000ed04

08002608 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 8002616:	f000 f8bd 	bl	8002794 <ist8310_GPIO_init>
    ist8310_com_init();
 800261a:	f000 f8c2 	bl	80027a2 <ist8310_com_init>

    ist8310_RST_L();
 800261e:	f000 f97b 	bl	8002918 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 8002622:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <ist8310_init+0xdc>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f916 	bl	8002858 <ist8310_delay_ms>
    ist8310_RST_H();
 800262c:	f000 f968 	bl	8002900 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8002630:	4b2c      	ldr	r3, [pc, #176]	@ (80026e4 <ist8310_init+0xdc>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f90f 	bl	8002858 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 800263a:	2000      	movs	r0, #0
 800263c:	f000 f8b8 	bl	80027b0 <ist8310_IIC_read_single_reg>
 8002640:	4603      	mov	r3, r0
 8002642:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	2b10      	cmp	r3, #16
 8002648:	d001      	beq.n	800264e <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 800264a:	2340      	movs	r3, #64	@ 0x40
 800264c:	e045      	b.n	80026da <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
 8002652:	e03e      	b.n	80026d2 <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	4924      	ldr	r1, [pc, #144]	@ (80026e8 <ist8310_init+0xe0>)
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	440b      	add	r3, r1
 8002660:	7818      	ldrb	r0, [r3, #0]
 8002662:	79fa      	ldrb	r2, [r7, #7]
 8002664:	4920      	ldr	r1, [pc, #128]	@ (80026e8 <ist8310_init+0xe0>)
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	440b      	add	r3, r1
 800266e:	3301      	adds	r3, #1
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	f000 f8b8 	bl	80027e8 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <ist8310_init+0xe4>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f8f9 	bl	8002874 <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8002682:	79fa      	ldrb	r2, [r7, #7]
 8002684:	4918      	ldr	r1, [pc, #96]	@ (80026e8 <ist8310_init+0xe0>)
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	440b      	add	r3, r1
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f88d 	bl	80027b0 <ist8310_IIC_read_single_reg>
 8002696:	4603      	mov	r3, r0
 8002698:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 800269a:	4b14      	ldr	r3, [pc, #80]	@ (80026ec <ist8310_init+0xe4>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f8e8 	bl	8002874 <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 80026a4:	79fa      	ldrb	r2, [r7, #7]
 80026a6:	4910      	ldr	r1, [pc, #64]	@ (80026e8 <ist8310_init+0xe0>)
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	3301      	adds	r3, #1
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	79ba      	ldrb	r2, [r7, #6]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d008      	beq.n	80026cc <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 80026ba:	79fa      	ldrb	r2, [r7, #7]
 80026bc:	490a      	ldr	r1, [pc, #40]	@ (80026e8 <ist8310_init+0xe0>)
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	3302      	adds	r3, #2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	e006      	b.n	80026da <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	3301      	adds	r3, #1
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d9bd      	bls.n	8002654 <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	08010cd4 	.word	0x08010cd4
 80026e8:	08010cc8 	.word	0x08010cc8
 80026ec:	08010cd5 	.word	0x08010cd5

080026f0 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	2206      	movs	r2, #6
 8002702:	4619      	mov	r1, r3
 8002704:	2003      	movs	r0, #3
 8002706:	f000 f88b 	bl	8002820 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 800270a:	7a7b      	ldrb	r3, [r7, #9]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b21a      	sxth	r2, r3
 8002710:	7a3b      	ldrb	r3, [r7, #8]
 8002712:	b21b      	sxth	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8002718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002724:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002790 <ist8310_read_mag+0xa0>
 8002728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	b21a      	sxth	r2, r3
 8002738:	7abb      	ldrb	r3, [r7, #10]
 800273a:	b21b      	sxth	r3, r3
 800273c:	4313      	orrs	r3, r2
 800273e:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8002740:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002790 <ist8310_read_mag+0xa0>
 8002754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002758:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 800275c:	7b7b      	ldrb	r3, [r7, #13]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	b21a      	sxth	r2, r3
 8002762:	7b3b      	ldrb	r3, [r7, #12]
 8002764:	b21b      	sxth	r3, r3
 8002766:	4313      	orrs	r3, r2
 8002768:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800276a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3308      	adds	r3, #8
 800277a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002790 <ist8310_read_mag+0xa0>
 800277e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002782:	edc3 7a00 	vstr	s15, [r3]
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	3e99999a 	.word	0x3e99999a

08002794 <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0

}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af04      	add	r7, sp, #16
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	230a      	movs	r3, #10
 80027c4:	9302      	str	r3, [sp, #8]
 80027c6:	2301      	movs	r3, #1
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	f107 030f 	add.w	r3, r7, #15
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2301      	movs	r3, #1
 80027d2:	211c      	movs	r1, #28
 80027d4:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <ist8310_IIC_read_single_reg+0x34>)
 80027d6:	f004 fc4f 	bl	8007078 <HAL_I2C_Mem_Read>
    return res;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200008c4 	.word	0x200008c4

080027e8 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	4603      	mov	r3, r0
 80027f0:	460a      	mov	r2, r1
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	230a      	movs	r3, #10
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2301      	movs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	1dbb      	adds	r3, r7, #6
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2301      	movs	r3, #1
 800280a:	211c      	movs	r1, #28
 800280c:	4803      	ldr	r0, [pc, #12]	@ (800281c <ist8310_IIC_write_single_reg+0x34>)
 800280e:	f004 fb39 	bl	8006e84 <HAL_I2C_Mem_Write>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200008c4 	.word	0x200008c4

08002820 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af04      	add	r7, sp, #16
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	4613      	mov	r3, r2
 800282e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	b29a      	uxth	r2, r3
 8002834:	79bb      	ldrb	r3, [r7, #6]
 8002836:	b29b      	uxth	r3, r3
 8002838:	210a      	movs	r1, #10
 800283a:	9102      	str	r1, [sp, #8]
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2301      	movs	r3, #1
 8002844:	211c      	movs	r1, #28
 8002846:	4803      	ldr	r0, [pc, #12]	@ (8002854 <ist8310_IIC_read_muli_reg+0x34>)
 8002848:	f004 fc16 	bl	8007078 <HAL_I2C_Mem_Read>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200008c4 	.word	0x200008c4

08002858 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	4618      	mov	r0, r3
 8002866:	f002 fc5b 	bl	8005120 <HAL_Delay>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	@ 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8002892:	4b1a      	ldr	r3, [pc, #104]	@ (80028fc <ist8310_delay_us+0x88>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8002898:	88fa      	ldrh	r2, [r7, #6]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 80028a4:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <ist8310_delay_us+0x88>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 80028aa:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <ist8310_delay_us+0x88>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d0f8      	beq.n	80028aa <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d206      	bcs.n	80028ce <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e007      	b.n	80028de <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad2      	subs	r2, r2, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d200      	bcs.n	80028ec <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 80028ea:	e7de      	b.n	80028aa <ist8310_delay_us+0x36>
            {
                break;
 80028ec:	bf00      	nop
            }
        }
    }
}
 80028ee:	bf00      	nop
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8002904:	2201      	movs	r2, #1
 8002906:	2140      	movs	r1, #64	@ 0x40
 8002908:	4802      	ldr	r0, [pc, #8]	@ (8002914 <ist8310_RST_H+0x14>)
 800290a:	f004 f945 	bl	8006b98 <HAL_GPIO_WritePin>
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021800 	.word	0x40021800

08002918 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800291c:	2200      	movs	r2, #0
 800291e:	2140      	movs	r1, #64	@ 0x40
 8002920:	4802      	ldr	r0, [pc, #8]	@ (800292c <ist8310_RST_L+0x14>)
 8002922:	f004 f939 	bl	8006b98 <HAL_GPIO_WritePin>
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40021800 	.word	0x40021800

08002930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002934:	f002 fb82 	bl	800503c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002938:	f000 f866 	bl	8002a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800293c:	f000 fc78 	bl	8003230 <MX_GPIO_Init>
  MX_DMA_Init();
 8002940:	f000 fc28 	bl	8003194 <MX_DMA_Init>
  MX_CAN1_Init();
 8002944:	f000 f8cc 	bl	8002ae0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002948:	f000 f900 	bl	8002b4c <MX_CAN2_Init>
  MX_SPI1_Init();
 800294c:	f000 f962 	bl	8002c14 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002950:	f000 fa3e 	bl	8002dd0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002954:	f000 fb9e 	bl	8003094 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002958:	f000 fbf2 	bl	8003140 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800295c:	f000 f990 	bl	8002c80 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002960:	f000 faae 	bl	8002ec0 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8002964:	f000 fbc0 	bl	80030e8 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8002968:	f000 fb46 	bl	8002ff8 <MX_TIM10_Init>
  MX_I2C3_Init();
 800296c:	f000 f924 	bl	8002bb8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8002970:	f7ff fd06 	bl	8002380 <can_filter_init>
  remote_control_init();
 8002974:	f001 faf6 	bl	8003f64 <remote_control_init>
  usart_Init();
 8002978:	f7ff fc54 	bl	8002224 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 800297c:	f001 fb00 	bl	8003f80 <get_remote_control_point>
 8002980:	4603      	mov	r3, r0
 8002982:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <main+0xa4>)
 8002984:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002986:	f008 fae9 	bl	800af5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 800298a:	4a13      	ldr	r2, [pc, #76]	@ (80029d8 <main+0xa8>)
 800298c:	2100      	movs	r1, #0
 800298e:	4813      	ldr	r0, [pc, #76]	@ (80029dc <main+0xac>)
 8002990:	f008 fb2e 	bl	800aff0 <osThreadNew>
 8002994:	4603      	mov	r3, r0
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <main+0xb0>)
 8002998:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 800299a:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <main+0xb4>)
 800299c:	2100      	movs	r1, #0
 800299e:	4812      	ldr	r0, [pc, #72]	@ (80029e8 <main+0xb8>)
 80029a0:	f008 fb26 	bl	800aff0 <osThreadNew>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4a11      	ldr	r2, [pc, #68]	@ (80029ec <main+0xbc>)
 80029a8:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 80029aa:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <main+0xc0>)
 80029ac:	2100      	movs	r1, #0
 80029ae:	4811      	ldr	r0, [pc, #68]	@ (80029f4 <main+0xc4>)
 80029b0:	f008 fb1e 	bl	800aff0 <osThreadNew>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4a10      	ldr	r2, [pc, #64]	@ (80029f8 <main+0xc8>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 80029ba:	4a10      	ldr	r2, [pc, #64]	@ (80029fc <main+0xcc>)
 80029bc:	2100      	movs	r1, #0
 80029be:	4810      	ldr	r0, [pc, #64]	@ (8002a00 <main+0xd0>)
 80029c0:	f008 fb16 	bl	800aff0 <osThreadNew>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a04 <main+0xd4>)
 80029c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80029ca:	f008 faeb 	bl	800afa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029ce:	bf00      	nop
 80029d0:	e7fd      	b.n	80029ce <main+0x9e>
 80029d2:	bf00      	nop
 80029d4:	20000d58 	.word	0x20000d58
 80029d8:	08010cd8 	.word	0x08010cd8
 80029dc:	0800356d 	.word	0x0800356d
 80029e0:	20000d48 	.word	0x20000d48
 80029e4:	08010cfc 	.word	0x08010cfc
 80029e8:	08003625 	.word	0x08003625
 80029ec:	20000d4c 	.word	0x20000d4c
 80029f0:	08010d20 	.word	0x08010d20
 80029f4:	080024cd 	.word	0x080024cd
 80029f8:	20000d50 	.word	0x20000d50
 80029fc:	08010d44 	.word	0x08010d44
 8002a00:	08003c09 	.word	0x08003c09
 8002a04:	20000d54 	.word	0x20000d54

08002a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b094      	sub	sp, #80	@ 0x50
 8002a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a0e:	f107 0320 	add.w	r3, r7, #32
 8002a12:	2230      	movs	r2, #48	@ 0x30
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f00b ffac 	bl	800e974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	4b29      	ldr	r3, [pc, #164]	@ (8002ad8 <SystemClock_Config+0xd0>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	4a28      	ldr	r2, [pc, #160]	@ (8002ad8 <SystemClock_Config+0xd0>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3c:	4b26      	ldr	r3, [pc, #152]	@ (8002ad8 <SystemClock_Config+0xd0>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <SystemClock_Config+0xd4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <SystemClock_Config+0xd4>)
 8002a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <SystemClock_Config+0xd4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002a78:	2306      	movs	r3, #6
 8002a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a7c:	23a8      	movs	r3, #168	@ 0xa8
 8002a7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a80:	2302      	movs	r3, #2
 8002a82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a84:	2304      	movs	r3, #4
 8002a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a88:	f107 0320 	add.w	r3, r7, #32
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f005 f8d9 	bl	8007c44 <HAL_RCC_OscConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a98:	f001 f8be 	bl	8003c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002aa8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002aae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	2105      	movs	r1, #5
 8002aba:	4618      	mov	r0, r3
 8002abc:	f005 fb3a 	bl	8008134 <HAL_RCC_ClockConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ac6:	f001 f8a7 	bl	8003c18 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002aca:	f005 fc19 	bl	8008300 <HAL_RCC_EnableCSS>
}
 8002ace:	bf00      	nop
 8002ad0:	3750      	adds	r7, #80	@ 0x50
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40007000 	.word	0x40007000

08002ae0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002ae4:	4b17      	ldr	r3, [pc, #92]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002ae6:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <MX_CAN1_Init+0x68>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002aea:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002aec:	2203      	movs	r2, #3
 8002aee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002afe:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002b02:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002b06:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002b12:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002b24:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002b30:	4804      	ldr	r0, [pc, #16]	@ (8002b44 <MX_CAN1_Init+0x64>)
 8002b32:	f002 fb19 	bl	8005168 <HAL_CAN_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002b3c:	f001 f86c 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000874 	.word	0x20000874
 8002b48:	40006400 	.word	0x40006400

08002b4c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b52:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <MX_CAN2_Init+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002b56:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b58:	2203      	movs	r2, #3
 8002b5a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002b5c:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002b62:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b6a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002b6e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b72:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b76:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002b78:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002b84:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002b8a:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002b90:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002b9c:	4804      	ldr	r0, [pc, #16]	@ (8002bb0 <MX_CAN2_Init+0x64>)
 8002b9e:	f002 fae3 	bl	8005168 <HAL_CAN_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002ba8:	f001 f836 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2000089c 	.word	0x2000089c
 8002bb4:	40006800 	.word	0x40006800

08002bb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bbe:	4a13      	ldr	r2, [pc, #76]	@ (8002c0c <MX_I2C3_Init+0x54>)
 8002bc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bc4:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <MX_I2C3_Init+0x58>)
 8002bc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be8:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002bf4:	4804      	ldr	r0, [pc, #16]	@ (8002c08 <MX_I2C3_Init+0x50>)
 8002bf6:	f004 f801 	bl	8006bfc <HAL_I2C_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002c00:	f001 f80a 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200008c4 	.word	0x200008c4
 8002c0c:	40005c00 	.word	0x40005c00
 8002c10:	00061a80 	.word	0x00061a80

08002c14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c18:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c1a:	4a18      	ldr	r2, [pc, #96]	@ (8002c7c <MX_SPI1_Init+0x68>)
 8002c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c26:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c2c:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002c32:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c34:	2202      	movs	r2, #2
 8002c36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c38:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002c46:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c48:	2238      	movs	r2, #56	@ 0x38
 8002c4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c52:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c58:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c60:	220a      	movs	r2, #10
 8002c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c64:	4804      	ldr	r0, [pc, #16]	@ (8002c78 <MX_SPI1_Init+0x64>)
 8002c66:	f005 fc6c 	bl	8008542 <HAL_SPI_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c70:	f000 ffd2 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000918 	.word	0x20000918
 8002c7c:	40013000 	.word	0x40013000

08002c80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b092      	sub	sp, #72	@ 0x48
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
 8002ca0:	615a      	str	r2, [r3, #20]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f00b fe62 	bl	800e974 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cb0:	4b45      	ldr	r3, [pc, #276]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002cb2:	4a46      	ldr	r2, [pc, #280]	@ (8002dcc <MX_TIM1_Init+0x14c>)
 8002cb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8002cb6:	4b44      	ldr	r3, [pc, #272]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002cb8:	2253      	movs	r2, #83	@ 0x53
 8002cba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbc:	4b42      	ldr	r3, [pc, #264]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002cc2:	4b41      	ldr	r3, [pc, #260]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002cc4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cca:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002cdc:	483a      	ldr	r0, [pc, #232]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002cde:	f005 fffd 	bl	8008cdc <HAL_TIM_PWM_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ce8:	f000 ff96 	bl	8003c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cf4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4833      	ldr	r0, [pc, #204]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002cfc:	f006 fe1c 	bl	8009938 <HAL_TIMEx_MasterConfigSynchronization>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002d06:	f000 ff87 	bl	8003c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d0a:	2360      	movs	r3, #96	@ 0x60
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d16:	2300      	movs	r3, #0
 8002d18:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d22:	2300      	movs	r3, #0
 8002d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4826      	ldr	r0, [pc, #152]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002d30:	f006 f95c 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002d3a:	f000 ff6d 	bl	8003c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d42:	2204      	movs	r2, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	4820      	ldr	r0, [pc, #128]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002d48:	f006 f950 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002d52:	f000 ff61 	bl	8003c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	481a      	ldr	r0, [pc, #104]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002d60:	f006 f944 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002d6a:	f000 ff55 	bl	8003c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d72:	220c      	movs	r2, #12
 8002d74:	4619      	mov	r1, r3
 8002d76:	4814      	ldr	r0, [pc, #80]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002d78:	f006 f938 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002d82:	f000 ff49 	bl	8003c18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	4807      	ldr	r0, [pc, #28]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002daa:	f006 fe41 	bl	8009a30 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002db4:	f000 ff30 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002db8:	4803      	ldr	r0, [pc, #12]	@ (8002dc8 <MX_TIM1_Init+0x148>)
 8002dba:	f001 fcdd 	bl	8004778 <HAL_TIM_MspPostInit>

}
 8002dbe:	bf00      	nop
 8002dc0:	3748      	adds	r7, #72	@ 0x48
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000970 	.word	0x20000970
 8002dcc:	40010000 	.word	0x40010000

08002dd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08e      	sub	sp, #56	@ 0x38
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de4:	f107 0320 	add.w	r3, r7, #32
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e00:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e02:	4a2e      	ldr	r2, [pc, #184]	@ (8002ebc <MX_TIM4_Init+0xec>)
 8002e04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e06:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8002e12:	4b29      	ldr	r3, [pc, #164]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e14:	f245 2207 	movw	r2, #20999	@ 0x5207
 8002e18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1a:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e20:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e26:	4824      	ldr	r0, [pc, #144]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e28:	f005 fea0 	bl	8008b6c <HAL_TIM_Base_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002e32:	f000 fef1 	bl	8003c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e40:	4619      	mov	r1, r3
 8002e42:	481d      	ldr	r0, [pc, #116]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e44:	f006 f994 	bl	8009170 <HAL_TIM_ConfigClockSource>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002e4e:	f000 fee3 	bl	8003c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e52:	4819      	ldr	r0, [pc, #100]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e54:	f005 ff42 	bl	8008cdc <HAL_TIM_PWM_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002e5e:	f000 fedb 	bl	8003c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e6a:	f107 0320 	add.w	r3, r7, #32
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4811      	ldr	r0, [pc, #68]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e72:	f006 fd61 	bl	8009938 <HAL_TIMEx_MasterConfigSynchronization>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002e7c:	f000 fecc 	bl	8003c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e80:	2360      	movs	r3, #96	@ 0x60
 8002e82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002e84:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002e88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2208      	movs	r2, #8
 8002e96:	4619      	mov	r1, r3
 8002e98:	4807      	ldr	r0, [pc, #28]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002e9a:	f006 f8a7 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002ea4:	f000 feb8 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ea8:	4803      	ldr	r0, [pc, #12]	@ (8002eb8 <MX_TIM4_Init+0xe8>)
 8002eaa:	f001 fc65 	bl	8004778 <HAL_TIM_MspPostInit>

}
 8002eae:	bf00      	nop
 8002eb0:	3738      	adds	r7, #56	@ 0x38
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200009b8 	.word	0x200009b8
 8002ebc:	40000800 	.word	0x40000800

08002ec0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b092      	sub	sp, #72	@ 0x48
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
 8002ee0:	615a      	str	r2, [r3, #20]
 8002ee2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f00b fd42 	bl	800e974 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002ef2:	4a40      	ldr	r2, [pc, #256]	@ (8002ff4 <MX_TIM8_Init+0x134>)
 8002ef4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002ef8:	2253      	movs	r2, #83	@ 0x53
 8002efa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002f02:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002f04:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002f08:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0a:	4b39      	ldr	r3, [pc, #228]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f10:	4b37      	ldr	r3, [pc, #220]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f16:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002f18:	2280      	movs	r2, #128	@ 0x80
 8002f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f1c:	4834      	ldr	r0, [pc, #208]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002f1e:	f005 fedd 	bl	8008cdc <HAL_TIM_PWM_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002f28:	f000 fe76 	bl	8003c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f38:	4619      	mov	r1, r3
 8002f3a:	482d      	ldr	r0, [pc, #180]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002f3c:	f006 fcfc 	bl	8009938 <HAL_TIMEx_MasterConfigSynchronization>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002f46:	f000 fe67 	bl	8003c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f4a:	2360      	movs	r3, #96	@ 0x60
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f56:	2300      	movs	r3, #0
 8002f58:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4820      	ldr	r0, [pc, #128]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002f70:	f006 f83c 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002f7a:	f000 fe4d 	bl	8003c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f82:	2204      	movs	r2, #4
 8002f84:	4619      	mov	r1, r3
 8002f86:	481a      	ldr	r0, [pc, #104]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002f88:	f006 f830 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002f92:	f000 fe41 	bl	8003c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4814      	ldr	r0, [pc, #80]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002fa0:	f006 f824 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002faa:	f000 fe35 	bl	8003c18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002fcc:	1d3b      	adds	r3, r7, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4807      	ldr	r0, [pc, #28]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002fd2:	f006 fd2d 	bl	8009a30 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002fdc:	f000 fe1c 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002fe0:	4803      	ldr	r0, [pc, #12]	@ (8002ff0 <MX_TIM8_Init+0x130>)
 8002fe2:	f001 fbc9 	bl	8004778 <HAL_TIM_MspPostInit>

}
 8002fe6:	bf00      	nop
 8002fe8:	3748      	adds	r7, #72	@ 0x48
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000a00 	.word	0x20000a00
 8002ff4:	40010400 	.word	0x40010400

08002ff8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
 800300c:	615a      	str	r2, [r3, #20]
 800300e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003010:	4b1e      	ldr	r3, [pc, #120]	@ (800308c <MX_TIM10_Init+0x94>)
 8003012:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <MX_TIM10_Init+0x98>)
 8003014:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003016:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <MX_TIM10_Init+0x94>)
 8003018:	2200      	movs	r2, #0
 800301a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <MX_TIM10_Init+0x94>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8003022:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <MX_TIM10_Init+0x94>)
 8003024:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003028:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302a:	4b18      	ldr	r3, [pc, #96]	@ (800308c <MX_TIM10_Init+0x94>)
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003030:	4b16      	ldr	r3, [pc, #88]	@ (800308c <MX_TIM10_Init+0x94>)
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003036:	4815      	ldr	r0, [pc, #84]	@ (800308c <MX_TIM10_Init+0x94>)
 8003038:	f005 fd98 	bl	8008b6c <HAL_TIM_Base_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003042:	f000 fde9 	bl	8003c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003046:	4811      	ldr	r0, [pc, #68]	@ (800308c <MX_TIM10_Init+0x94>)
 8003048:	f005 fe48 	bl	8008cdc <HAL_TIM_PWM_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003052:	f000 fde1 	bl	8003c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003056:	2360      	movs	r3, #96	@ 0x60
 8003058:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	2200      	movs	r2, #0
 800306a:	4619      	mov	r1, r3
 800306c:	4807      	ldr	r0, [pc, #28]	@ (800308c <MX_TIM10_Init+0x94>)
 800306e:	f005 ffbd 	bl	8008fec <HAL_TIM_PWM_ConfigChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003078:	f000 fdce 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800307c:	4803      	ldr	r0, [pc, #12]	@ (800308c <MX_TIM10_Init+0x94>)
 800307e:	f001 fb7b 	bl	8004778 <HAL_TIM_MspPostInit>

}
 8003082:	bf00      	nop
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000a48 	.word	0x20000a48
 8003090:	40014400 	.word	0x40014400

08003094 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003098:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 800309a:	4a12      	ldr	r2, [pc, #72]	@ (80030e4 <MX_USART1_UART_Init+0x50>)
 800309c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800309e:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 80030a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ca:	4805      	ldr	r0, [pc, #20]	@ (80030e0 <MX_USART1_UART_Init+0x4c>)
 80030cc:	f006 fd02 	bl	8009ad4 <HAL_UART_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030d6:	f000 fd9f 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000a90 	.word	0x20000a90
 80030e4:	40011000 	.word	0x40011000

080030e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030ec:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 80030ee:	4a12      	ldr	r2, [pc, #72]	@ (8003138 <MX_USART3_UART_Init+0x50>)
 80030f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80030f2:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 80030f4:	4a11      	ldr	r2, [pc, #68]	@ (800313c <MX_USART3_UART_Init+0x54>)
 80030f6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 8003100:	2200      	movs	r2, #0
 8003102:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 8003106:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800310a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 800310e:	220c      	movs	r2, #12
 8003110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003112:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800311e:	4805      	ldr	r0, [pc, #20]	@ (8003134 <MX_USART3_UART_Init+0x4c>)
 8003120:	f006 fcd8 	bl	8009ad4 <HAL_UART_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800312a:	f000 fd75 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000ad8 	.word	0x20000ad8
 8003138:	40004800 	.word	0x40004800
 800313c:	000186a0 	.word	0x000186a0

08003140 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003144:	4b11      	ldr	r3, [pc, #68]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003146:	4a12      	ldr	r2, [pc, #72]	@ (8003190 <MX_USART6_UART_Init+0x50>)
 8003148:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 800314c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003150:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003152:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800315e:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003164:	4b09      	ldr	r3, [pc, #36]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003166:	220c      	movs	r2, #12
 8003168:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003176:	4805      	ldr	r0, [pc, #20]	@ (800318c <MX_USART6_UART_Init+0x4c>)
 8003178:	f006 fcac 	bl	8009ad4 <HAL_UART_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003182:	f000 fd49 	bl	8003c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000b20 	.word	0x20000b20
 8003190:	40011400 	.word	0x40011400

08003194 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	4b23      	ldr	r3, [pc, #140]	@ (800322c <MX_DMA_Init+0x98>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	4a22      	ldr	r2, [pc, #136]	@ (800322c <MX_DMA_Init+0x98>)
 80031a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031aa:	4b20      	ldr	r3, [pc, #128]	@ (800322c <MX_DMA_Init+0x98>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4b1c      	ldr	r3, [pc, #112]	@ (800322c <MX_DMA_Init+0x98>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <MX_DMA_Init+0x98>)
 80031c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4b19      	ldr	r3, [pc, #100]	@ (800322c <MX_DMA_Init+0x98>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2105      	movs	r1, #5
 80031d6:	200c      	movs	r0, #12
 80031d8:	f002 ff09 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80031dc:	200c      	movs	r0, #12
 80031de:	f002 ff22 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2105      	movs	r1, #5
 80031e6:	2039      	movs	r0, #57	@ 0x39
 80031e8:	f002 ff01 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80031ec:	2039      	movs	r0, #57	@ 0x39
 80031ee:	f002 ff1a 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2105      	movs	r1, #5
 80031f6:	203a      	movs	r0, #58	@ 0x3a
 80031f8:	f002 fef9 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80031fc:	203a      	movs	r0, #58	@ 0x3a
 80031fe:	f002 ff12 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003202:	2200      	movs	r2, #0
 8003204:	2105      	movs	r1, #5
 8003206:	2045      	movs	r0, #69	@ 0x45
 8003208:	f002 fef1 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800320c:	2045      	movs	r0, #69	@ 0x45
 800320e:	f002 ff0a 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2105      	movs	r1, #5
 8003216:	2046      	movs	r0, #70	@ 0x46
 8003218:	f002 fee9 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800321c:	2046      	movs	r0, #70	@ 0x46
 800321e:	f002 ff02 	bl	8006026 <HAL_NVIC_EnableIRQ>

}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800

08003230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08e      	sub	sp, #56	@ 0x38
 8003234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	609a      	str	r2, [r3, #8]
 8003242:	60da      	str	r2, [r3, #12]
 8003244:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	4b7c      	ldr	r3, [pc, #496]	@ (800343c <MX_GPIO_Init+0x20c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	4a7b      	ldr	r2, [pc, #492]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	6313      	str	r3, [r2, #48]	@ 0x30
 8003256:	4b79      	ldr	r3, [pc, #484]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	623b      	str	r3, [r7, #32]
 8003260:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	4b75      	ldr	r3, [pc, #468]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	4a74      	ldr	r2, [pc, #464]	@ (800343c <MX_GPIO_Init+0x20c>)
 800326c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003270:	6313      	str	r3, [r2, #48]	@ 0x30
 8003272:	4b72      	ldr	r3, [pc, #456]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	4b6e      	ldr	r3, [pc, #440]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	4a6d      	ldr	r2, [pc, #436]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6313      	str	r3, [r2, #48]	@ 0x30
 800328e:	4b6b      	ldr	r3, [pc, #428]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	4b67      	ldr	r3, [pc, #412]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	4a66      	ldr	r2, [pc, #408]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032aa:	4b64      	ldr	r3, [pc, #400]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	4b60      	ldr	r3, [pc, #384]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	4a5f      	ldr	r2, [pc, #380]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c6:	4b5d      	ldr	r3, [pc, #372]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b59      	ldr	r3, [pc, #356]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	4a58      	ldr	r2, [pc, #352]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e2:	4b56      	ldr	r3, [pc, #344]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	4b52      	ldr	r3, [pc, #328]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	4a51      	ldr	r2, [pc, #324]	@ (800343c <MX_GPIO_Init+0x20c>)
 80032f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fe:	4b4f      	ldr	r3, [pc, #316]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	4a4a      	ldr	r2, [pc, #296]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003314:	f043 0320 	orr.w	r3, r3, #32
 8003318:	6313      	str	r3, [r2, #48]	@ 0x30
 800331a:	4b48      	ldr	r3, [pc, #288]	@ (800343c <MX_GPIO_Init+0x20c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4b44      	ldr	r3, [pc, #272]	@ (800343c <MX_GPIO_Init+0x20c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	4a43      	ldr	r2, [pc, #268]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003330:	f043 0310 	orr.w	r3, r3, #16
 8003334:	6313      	str	r3, [r2, #48]	@ 0x30
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <MX_GPIO_Init+0x20c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003342:	2200      	movs	r2, #0
 8003344:	2140      	movs	r1, #64	@ 0x40
 8003346:	483e      	ldr	r0, [pc, #248]	@ (8003440 <MX_GPIO_Init+0x210>)
 8003348:	f003 fc26 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 800334c:	2200      	movs	r2, #0
 800334e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8003352:	483c      	ldr	r0, [pc, #240]	@ (8003444 <MX_GPIO_Init+0x214>)
 8003354:	f003 fc20 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003358:	2200      	movs	r2, #0
 800335a:	2110      	movs	r1, #16
 800335c:	483a      	ldr	r0, [pc, #232]	@ (8003448 <MX_GPIO_Init+0x218>)
 800335e:	f003 fc1b 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003362:	2200      	movs	r2, #0
 8003364:	2101      	movs	r1, #1
 8003366:	4839      	ldr	r0, [pc, #228]	@ (800344c <MX_GPIO_Init+0x21c>)
 8003368:	f003 fc16 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800336c:	2340      	movs	r3, #64	@ 0x40
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003370:	2301      	movs	r3, #1
 8003372:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800337c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003380:	4619      	mov	r1, r3
 8003382:	482f      	ldr	r0, [pc, #188]	@ (8003440 <MX_GPIO_Init+0x210>)
 8003384:	f003 fa6c 	bl	8006860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8003388:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338e:	2301      	movs	r3, #1
 8003390:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	2300      	movs	r3, #0
 8003398:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800339a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800339e:	4619      	mov	r1, r3
 80033a0:	4828      	ldr	r0, [pc, #160]	@ (8003444 <MX_GPIO_Init+0x214>)
 80033a2:	f003 fa5d 	bl	8006860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033a6:	2308      	movs	r3, #8
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033b8:	4619      	mov	r1, r3
 80033ba:	4821      	ldr	r0, [pc, #132]	@ (8003440 <MX_GPIO_Init+0x210>)
 80033bc:	f003 fa50 	bl	8006860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033c0:	2310      	movs	r3, #16
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c4:	2301      	movs	r3, #1
 80033c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d4:	4619      	mov	r1, r3
 80033d6:	481c      	ldr	r0, [pc, #112]	@ (8003448 <MX_GPIO_Init+0x218>)
 80033d8:	f003 fa42 	bl	8006860 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80033dc:	2330      	movs	r3, #48	@ 0x30
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ee:	4619      	mov	r1, r3
 80033f0:	4817      	ldr	r0, [pc, #92]	@ (8003450 <MX_GPIO_Init+0x220>)
 80033f2:	f003 fa35 	bl	8006860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033f6:	2301      	movs	r3, #1
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800340a:	4619      	mov	r1, r3
 800340c:	480f      	ldr	r0, [pc, #60]	@ (800344c <MX_GPIO_Init+0x21c>)
 800340e:	f003 fa27 	bl	8006860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2105      	movs	r1, #5
 8003416:	2009      	movs	r0, #9
 8003418:	f002 fde9 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800341c:	2009      	movs	r0, #9
 800341e:	f002 fe02 	bl	8006026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2105      	movs	r1, #5
 8003426:	200a      	movs	r0, #10
 8003428:	f002 fde1 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800342c:	200a      	movs	r0, #10
 800342e:	f002 fdfa 	bl	8006026 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003432:	bf00      	nop
 8003434:	3738      	adds	r7, #56	@ 0x38
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	40021800 	.word	0x40021800
 8003444:	40021c00 	.word	0x40021c00
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400
 8003450:	40020800 	.word	0x40020800

08003454 <positionPIDByMe>:

/* USER CODE BEGIN 4 */
int16_t positionPIDByMe(int8_t *isNegativeRegion1, int8_t *previousRegion1, int16_t *previousDifference,  int16_t DifferenceBetweenCurrentAndWannabePosition, int16_t *sumI1, float kPu, float kIu, float kDu) {
 8003454:	b480      	push	{r7}
 8003456:	b08b      	sub	sp, #44	@ 0x2c
 8003458:	af00      	add	r7, sp, #0
 800345a:	61f8      	str	r0, [r7, #28]
 800345c:	61b9      	str	r1, [r7, #24]
 800345e:	617a      	str	r2, [r7, #20]
 8003460:	ed87 0a03 	vstr	s0, [r7, #12]
 8003464:	edc7 0a02 	vstr	s1, [r7, #8]
 8003468:	ed87 1a01 	vstr	s2, [r7, #4]
 800346c:	827b      	strh	r3, [r7, #18]
	if (DifferenceBetweenCurrentAndWannabePosition >= 0) {
 800346e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003472:	2b00      	cmp	r3, #0
 8003474:	db03      	blt.n	800347e <positionPIDByMe+0x2a>
		*isNegativeRegion1 = -1;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	22ff      	movs	r2, #255	@ 0xff
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e002      	b.n	8003484 <positionPIDByMe+0x30>
	} else {
		*isNegativeRegion1 = 1;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
	}
	if (*isNegativeRegion1 != *previousRegion1) {
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f993 2000 	ldrsb.w	r2, [r3]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f993 3000 	ldrsb.w	r3, [r3]
 8003490:	429a      	cmp	r2, r3
 8003492:	d002      	beq.n	800349a <positionPIDByMe+0x46>
		*sumI1 = 0;
 8003494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003496:	2200      	movs	r2, #0
 8003498:	801a      	strh	r2, [r3, #0]
	}
	*previousRegion1 = *isNegativeRegion1;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f993 2000 	ldrsb.w	r2, [r3]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	701a      	strb	r2, [r3, #0]
	*sumI1 += (int)((float)(DifferenceBetweenCurrentAndWannabePosition)*0.005f);
 80034a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003564 <positionPIDByMe+0x110>
 80034bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c4:	ee17 3a90 	vmov	r3, s15
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b21a      	sxth	r2, r3
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	801a      	strh	r2, [r3, #0]
	int16_t PositionToGo = (int)(kPu*(float)(DifferenceBetweenCurrentAndWannabePosition));
 80034d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034d8:	ee07 3a90 	vmov	s15, r3
 80034dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ec:	ee17 3a90 	vmov	r3, s15
 80034f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t IntegralToGo = (int)(kIu*((float)(*sumI1)));
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f8:	ee07 3a90 	vmov	s15, r3
 80034fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003500:	edd7 7a02 	vldr	s15, [r7, #8]
 8003504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800350c:	ee17 3a90 	vmov	r3, s15
 8003510:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t DerivativeToGo = (int)((kDu)*((float)(DifferenceBetweenCurrentAndWannabePosition - *previousDifference))*(float)200);
 8003512:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	f9b2 2000 	ldrsh.w	r2, [r2]
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003526:	edd7 7a01 	vldr	s15, [r7, #4]
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003568 <positionPIDByMe+0x114>
 8003532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353a:	ee17 3a90 	vmov	r3, s15
 800353e:	847b      	strh	r3, [r7, #34]	@ 0x22
	*previousDifference = DifferenceBetweenCurrentAndWannabePosition;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	8a7a      	ldrh	r2, [r7, #18]
 8003544:	801a      	strh	r2, [r3, #0]
	return PositionToGo+IntegralToGo+DerivativeToGo;
 8003546:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003548:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800354a:	4413      	add	r3, r2
 800354c:	b29a      	uxth	r2, r3
 800354e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003550:	4413      	add	r3, r2
 8003552:	b29b      	uxth	r3, r3
 8003554:	b21b      	sxth	r3, r3
}
 8003556:	4618      	mov	r0, r3
 8003558:	372c      	adds	r7, #44	@ 0x2c
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	3ba3d70a 	.word	0x3ba3d70a
 8003568:	43480000 	.word	0x43480000

0800356c <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8003574:	2201      	movs	r2, #1
 8003576:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800357a:	4825      	ldr	r0, [pc, #148]	@ (8003610 <TaskMain+0xa4>)
 800357c:	f003 fb0c 	bl	8006b98 <HAL_GPIO_WritePin>
	__HAL_TIM_PRESCALER(&htim4, 2);
 8003580:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <TaskMain+0xa8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2202      	movs	r2, #2
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003588:	2108      	movs	r1, #8
 800358a:	4822      	ldr	r0, [pc, #136]	@ (8003614 <TaskMain+0xa8>)
 800358c:	f005 fbf6 	bl	8008d7c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 8003590:	4820      	ldr	r0, [pc, #128]	@ (8003614 <TaskMain+0xa8>)
 8003592:	f005 fb3b 	bl	8008c0c <HAL_TIM_Base_Start>
	if (BMI088_accel_init()) {
 8003596:	f7fd fd2d 	bl	8000ff4 <BMI088_accel_init>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <TaskMain+0x3a>
		usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
 80035a0:	481d      	ldr	r0, [pc, #116]	@ (8003618 <TaskMain+0xac>)
 80035a2:	f7fe fe57 	bl	8002254 <usart_printf>
	}
	if (BMI088_gyro_init()) {
 80035a6:	f7fd fddd 	bl	8001164 <BMI088_gyro_init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <TaskMain+0x4a>
		usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
 80035b0:	481a      	ldr	r0, [pc, #104]	@ (800361c <TaskMain+0xb0>)
 80035b2:	f7fe fe4f 	bl	8002254 <usart_printf>
	}
	if (ist8310_init()) {
 80035b6:	f7ff f827 	bl	8002608 <ist8310_init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <TaskMain+0x5a>
		usart_printf("WARNING - IST8310 compass init failed \r\n");
 80035c0:	4817      	ldr	r0, [pc, #92]	@ (8003620 <TaskMain+0xb4>)
 80035c2:	f7fe fe47 	bl	8002254 <usart_printf>
	}
	osDelay(150);
 80035c6:	2096      	movs	r0, #150	@ 0x96
 80035c8:	f007 fda4 	bl	800b114 <osDelay>
	__HAL_TIM_PRESCALER(&htim4, 0);
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <TaskMain+0xa8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2200      	movs	r2, #0
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28
	osDelay(150);
 80035d4:	2096      	movs	r0, #150	@ 0x96
 80035d6:	f007 fd9d 	bl	800b114 <osDelay>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80035da:	2108      	movs	r1, #8
 80035dc:	480d      	ldr	r0, [pc, #52]	@ (8003614 <TaskMain+0xa8>)
 80035de:	f005 fc95 	bl	8008f0c <HAL_TIM_PWM_Stop>

	for(;;) {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035e8:	4809      	ldr	r0, [pc, #36]	@ (8003610 <TaskMain+0xa4>)
 80035ea:	f003 fad5 	bl	8006b98 <HAL_GPIO_WritePin>
		//set_motor_voltage(5, 4000);
		osDelay(500);
 80035ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80035f2:	f007 fd8f 	bl	800b114 <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 80035f6:	2201      	movs	r2, #1
 80035f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80035fc:	4804      	ldr	r0, [pc, #16]	@ (8003610 <TaskMain+0xa4>)
 80035fe:	f003 facb 	bl	8006b98 <HAL_GPIO_WritePin>
		//set_motor_voltage(5, -4000);
		osDelay(500);
 8003602:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003606:	f007 fd85 	bl	800b114 <osDelay>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 800360a:	bf00      	nop
 800360c:	e7e9      	b.n	80035e2 <TaskMain+0x76>
 800360e:	bf00      	nop
 8003610:	40021c00 	.word	0x40021c00
 8003614:	200009b8 	.word	0x200009b8
 8003618:	08010c0c 	.word	0x08010c0c
 800361c:	08010c3c 	.word	0x08010c3c
 8003620:	08010c68 	.word	0x08010c68

08003624 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b095      	sub	sp, #84	@ 0x54
 8003628:	af02      	add	r7, sp, #8
 800362a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 800362c:	f107 0320 	add.w	r3, r7, #32
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
    float calcChassisPower = 0;                                 // range: 3376 ~ 2132
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int8_t jammed = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    int8_t indexerStopped = 1;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int8_t indexerTargetReached = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    // int8_t *isNegativeRegion1, int8_t *previousRegion1, int16_t previousDifference,  int16_t DifferenceBetweenCurrentAndWannabePosition, int16_t *sumI1, float kPu, float kIu, float kDu
    int8_t N[1] = {1};
 800364e:	2301      	movs	r3, #1
 8003650:	773b      	strb	r3, [r7, #28]
    int8_t pN[1] = {1};
 8003652:	2301      	movs	r3, #1
 8003654:	763b      	strb	r3, [r7, #24]
    int16_t PD [1] = {0};
 8003656:	2300      	movs	r3, #0
 8003658:	82bb      	strh	r3, [r7, #20]
    int16_t Diff [1] = {0};
 800365a:	2300      	movs	r3, #0
 800365c:	823b      	strh	r3, [r7, #16]
    int16_t sum[1] = {0};
 800365e:	2300      	movs	r3, #0
 8003660:	81bb      	strh	r3, [r7, #12]
    //int16_t targetRPM[4] = {0,0,0,0};
  /* Infinite loop */
    for(;;) {
	    for (int i = 0; i < 4; i++) {
 8003662:	2300      	movs	r3, #0
 8003664:	643b      	str	r3, [r7, #64]	@ 0x40
 8003666:	e01b      	b.n	80036a0 <TaskChassis+0x7c>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 8003668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800366a:	b25b      	sxtb	r3, r3
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fe3d 	bl	80042ec <getRCchannel>
 8003672:	4603      	mov	r3, r0
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80038a8 <TaskChassis+0x284>
 8003680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003688:	ee17 3a90 	vmov	r3, s15
 800368c:	b21a      	sxth	r2, r3
 800368e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	3348      	adds	r3, #72	@ 0x48
 8003694:	443b      	add	r3, r7
 8003696:	f823 2c28 	strh.w	r2, [r3, #-40]
	    for (int i = 0; i < 4; i++) {
 800369a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800369c:	3301      	adds	r3, #1
 800369e:	643b      	str	r3, [r7, #64]	@ 0x40
 80036a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	dde0      	ble.n	8003668 <TaskChassis+0x44>
	    }
	    //rcPitch = getRCchannel(1) * 0.94f + 2754;

	    chassisTargetRPM.motorRPM[0] = rcRPM[3] + rcRPM[0] + rcRPM[2];
 80036a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4413      	add	r3, r2
 80036be:	b29b      	uxth	r3, r3
 80036c0:	b21a      	sxth	r2, r3
 80036c2:	4b7a      	ldr	r3, [pc, #488]	@ (80038ac <TaskChassis+0x288>)
 80036c4:	801a      	strh	r2, [r3, #0]
	    chassisTargetRPM.motorRPM[1] = rcRPM[3] + rcRPM[0] - rcRPM[2];
 80036c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80036da:	b29b      	uxth	r3, r3
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	b29b      	uxth	r3, r3
 80036e0:	b21a      	sxth	r2, r3
 80036e2:	4b72      	ldr	r3, [pc, #456]	@ (80038ac <TaskChassis+0x288>)
 80036e4:	805a      	strh	r2, [r3, #2]
	    chassisTargetRPM.motorRPM[2] = -rcRPM[3] + rcRPM[0] - rcRPM[2];
 80036e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	b21a      	sxth	r2, r3
 8003702:	4b6a      	ldr	r3, [pc, #424]	@ (80038ac <TaskChassis+0x288>)
 8003704:	809a      	strh	r2, [r3, #4]
	    chassisTargetRPM.motorRPM[3] = -rcRPM[3] + rcRPM[0] + rcRPM[2];
 8003706:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800370a:	b29a      	uxth	r2, r3
 800370c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003710:	b29b      	uxth	r3, r3
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	b29a      	uxth	r2, r3
 8003716:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800371a:	b29b      	uxth	r3, r3
 800371c:	4413      	add	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	b21a      	sxth	r2, r3
 8003722:	4b62      	ldr	r3, [pc, #392]	@ (80038ac <TaskChassis+0x288>)
 8003724:	80da      	strh	r2, [r3, #6]
	    //gyroReading[0] = IMU_get_gyro(x);
	    //gyroReading[1] = IMU_get_gyro(y);
	    //gyroReading[2] = IMU_get_gyro(z);
	    //usart_printf("%f %f %f %f \r\n", getMagnetometerData(x), getMagnetometerData(y), getMagnetometerData(z), IMU_get_temp());
	    //usart_printf("%d\r\n", targetMotorRPM.motorRPM[0]);
	   calcChassisPower = power_heat_data.chassis_voltage * power_heat_data.chassis_current / 1000000;
 8003726:	4b62      	ldr	r3, [pc, #392]	@ (80038b0 <TaskChassis+0x28c>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	4b60      	ldr	r3, [pc, #384]	@ (80038b0 <TaskChassis+0x28c>)
 800372e:	885b      	ldrh	r3, [r3, #2]
 8003730:	fb02 f303 	mul.w	r3, r2, r3
 8003734:	4a5f      	ldr	r2, [pc, #380]	@ (80038b4 <TaskChassis+0x290>)
 8003736:	fb82 1203 	smull	r1, r2, r2, r3
 800373a:	1492      	asrs	r2, r2, #18
 800373c:	17db      	asrs	r3, r3, #31
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	ee07 3a90 	vmov	s15, r3
 8003744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003748:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	    //if (calcChassisPower >= 30) {
	    //chassisTargetCurrent = applyPowerlimit(chassis, chassisTargetRPM, calcChassisPower);

	    //CAN1_cmd_b2b(CAN_b2b_A_ID, 1, 1, 1, 1);

	    if (boardID == CAN_b2b_A_ID) {
 800374c:	4b5a      	ldr	r3, [pc, #360]	@ (80038b8 <TaskChassis+0x294>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	f240 1201 	movw	r2, #257	@ 0x101
 8003754:	4293      	cmp	r3, r2
 8003756:	f040 8122 	bne.w	800399e <TaskChassis+0x37a>
	    	setM3508RPM(1, chassisTargetRPM.motorRPM[0], chassisPreset);
 800375a:	4b54      	ldr	r3, [pc, #336]	@ (80038ac <TaskChassis+0x288>)
 800375c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003760:	4b56      	ldr	r3, [pc, #344]	@ (80038bc <TaskChassis+0x298>)
 8003762:	edd3 6a00 	vldr	s13, [r3]
 8003766:	ed93 7a01 	vldr	s14, [r3, #4]
 800376a:	edd3 7a02 	vldr	s15, [r3, #8]
 800376e:	eeb0 0a66 	vmov.f32	s0, s13
 8003772:	eef0 0a47 	vmov.f32	s1, s14
 8003776:	eeb0 1a67 	vmov.f32	s2, s15
 800377a:	4611      	mov	r1, r2
 800377c:	2001      	movs	r0, #1
 800377e:	f7fe fc2f 	bl	8001fe0 <setM3508RPM>
	    	setM3508RPM(2, chassisTargetRPM.motorRPM[1], chassisPreset);
 8003782:	4b4a      	ldr	r3, [pc, #296]	@ (80038ac <TaskChassis+0x288>)
 8003784:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003788:	4b4c      	ldr	r3, [pc, #304]	@ (80038bc <TaskChassis+0x298>)
 800378a:	edd3 6a00 	vldr	s13, [r3]
 800378e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003792:	edd3 7a02 	vldr	s15, [r3, #8]
 8003796:	eeb0 0a66 	vmov.f32	s0, s13
 800379a:	eef0 0a47 	vmov.f32	s1, s14
 800379e:	eeb0 1a67 	vmov.f32	s2, s15
 80037a2:	4611      	mov	r1, r2
 80037a4:	2002      	movs	r0, #2
 80037a6:	f7fe fc1b 	bl	8001fe0 <setM3508RPM>
	    	setM3508RPM(3, chassisTargetRPM.motorRPM[2], chassisPreset);
 80037aa:	4b40      	ldr	r3, [pc, #256]	@ (80038ac <TaskChassis+0x288>)
 80037ac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80037b0:	4b42      	ldr	r3, [pc, #264]	@ (80038bc <TaskChassis+0x298>)
 80037b2:	edd3 6a00 	vldr	s13, [r3]
 80037b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80037ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80037be:	eeb0 0a66 	vmov.f32	s0, s13
 80037c2:	eef0 0a47 	vmov.f32	s1, s14
 80037c6:	eeb0 1a67 	vmov.f32	s2, s15
 80037ca:	4611      	mov	r1, r2
 80037cc:	2003      	movs	r0, #3
 80037ce:	f7fe fc07 	bl	8001fe0 <setM3508RPM>
	    	setM3508RPM(4, chassisTargetRPM.motorRPM[3], chassisPreset);
 80037d2:	4b36      	ldr	r3, [pc, #216]	@ (80038ac <TaskChassis+0x288>)
 80037d4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80037d8:	4b38      	ldr	r3, [pc, #224]	@ (80038bc <TaskChassis+0x298>)
 80037da:	edd3 6a00 	vldr	s13, [r3]
 80037de:	ed93 7a01 	vldr	s14, [r3, #4]
 80037e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80037e6:	eeb0 0a66 	vmov.f32	s0, s13
 80037ea:	eef0 0a47 	vmov.f32	s1, s14
 80037ee:	eeb0 1a67 	vmov.f32	s2, s15
 80037f2:	4611      	mov	r1, r2
 80037f4:	2004      	movs	r0, #4
 80037f6:	f7fe fbf3 	bl	8001fe0 <setM3508RPM>

	    	if (getRCswitch(1) == 1) {
 80037fa:	2001      	movs	r0, #1
 80037fc:	f000 fd8a 	bl	8004314 <getRCswitch>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d123      	bne.n	800384e <TaskChassis+0x22a>
		    	setM3508RPM(5, -6600, chassisPreset);
 8003806:	4b2d      	ldr	r3, [pc, #180]	@ (80038bc <TaskChassis+0x298>)
 8003808:	edd3 6a00 	vldr	s13, [r3]
 800380c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003810:	edd3 7a02 	vldr	s15, [r3, #8]
 8003814:	eeb0 0a66 	vmov.f32	s0, s13
 8003818:	eef0 0a47 	vmov.f32	s1, s14
 800381c:	eeb0 1a67 	vmov.f32	s2, s15
 8003820:	4927      	ldr	r1, [pc, #156]	@ (80038c0 <TaskChassis+0x29c>)
 8003822:	2005      	movs	r0, #5
 8003824:	f7fe fbdc 	bl	8001fe0 <setM3508RPM>
		    	setM3508RPM(6, 6600, chassisPreset);
 8003828:	4b24      	ldr	r3, [pc, #144]	@ (80038bc <TaskChassis+0x298>)
 800382a:	edd3 6a00 	vldr	s13, [r3]
 800382e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003832:	edd3 7a02 	vldr	s15, [r3, #8]
 8003836:	eeb0 0a66 	vmov.f32	s0, s13
 800383a:	eef0 0a47 	vmov.f32	s1, s14
 800383e:	eeb0 1a67 	vmov.f32	s2, s15
 8003842:	f641 11c8 	movw	r1, #6600	@ 0x19c8
 8003846:	2006      	movs	r0, #6
 8003848:	f7fe fbca 	bl	8001fe0 <setM3508RPM>
 800384c:	e021      	b.n	8003892 <TaskChassis+0x26e>
	    	} else {
		    	setM3508RPM(5, 0, chassisPreset);
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <TaskChassis+0x298>)
 8003850:	edd3 6a00 	vldr	s13, [r3]
 8003854:	ed93 7a01 	vldr	s14, [r3, #4]
 8003858:	edd3 7a02 	vldr	s15, [r3, #8]
 800385c:	eeb0 0a66 	vmov.f32	s0, s13
 8003860:	eef0 0a47 	vmov.f32	s1, s14
 8003864:	eeb0 1a67 	vmov.f32	s2, s15
 8003868:	2100      	movs	r1, #0
 800386a:	2005      	movs	r0, #5
 800386c:	f7fe fbb8 	bl	8001fe0 <setM3508RPM>
		    	setM3508RPM(6, 0, chassisPreset);
 8003870:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <TaskChassis+0x298>)
 8003872:	edd3 6a00 	vldr	s13, [r3]
 8003876:	ed93 7a01 	vldr	s14, [r3, #4]
 800387a:	edd3 7a02 	vldr	s15, [r3, #8]
 800387e:	eeb0 0a66 	vmov.f32	s0, s13
 8003882:	eef0 0a47 	vmov.f32	s1, s14
 8003886:	eeb0 1a67 	vmov.f32	s2, s15
 800388a:	2100      	movs	r1, #0
 800388c:	2006      	movs	r0, #6
 800388e:	f7fe fba7 	bl	8001fe0 <setM3508RPM>
	    	}

	    	if (rcRPM[1] > 5) {
 8003892:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003896:	2b05      	cmp	r3, #5
 8003898:	dd16      	ble.n	80038c8 <TaskChassis+0x2a4>
	    		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
 800389a:	2201      	movs	r2, #1
 800389c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038a0:	4808      	ldr	r0, [pc, #32]	@ (80038c4 <TaskChassis+0x2a0>)
 80038a2:	f003 f979 	bl	8006b98 <HAL_GPIO_WritePin>
 80038a6:	e015      	b.n	80038d4 <TaskChassis+0x2b0>
 80038a8:	415a51ec 	.word	0x415a51ec
 80038ac:	20000d5c 	.word	0x20000d5c
 80038b0:	200006fc 	.word	0x200006fc
 80038b4:	431bde83 	.word	0x431bde83
 80038b8:	2000007c 	.word	0x2000007c
 80038bc:	20000040 	.word	0x20000040
 80038c0:	ffffe638 	.word	0xffffe638
 80038c4:	40021c00 	.word	0x40021c00
	    	} else {
	    		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038ce:	48bf      	ldr	r0, [pc, #764]	@ (8003bcc <TaskChassis+0x5a8>)
 80038d0:	f003 f962 	bl	8006b98 <HAL_GPIO_WritePin>
	    	}

	    	float kP = 0.06;
 80038d4:	4bbe      	ldr	r3, [pc, #760]	@ (8003bd0 <TaskChassis+0x5ac>)
 80038d6:	637b      	str	r3, [r7, #52]	@ 0x34
	    	float kI = 0.001;
 80038d8:	4bbe      	ldr	r3, [pc, #760]	@ (8003bd4 <TaskChassis+0x5b0>)
 80038da:	633b      	str	r3, [r7, #48]	@ 0x30
	    	float kD = 0.0001;
 80038dc:	4bbe      	ldr	r3, [pc, #760]	@ (8003bd8 <TaskChassis+0x5b4>)
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    	int16_t currentMotorPositionTurret = getMotorPosition(7);
 80038e0:	2007      	movs	r0, #7
 80038e2:	f7fe fc4d 	bl	8002180 <getMotorPosition>
 80038e6:	4603      	mov	r3, r0
 80038e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
	    	int16_t robotPositionToGo = (getRCchannel(1)*-1.212121f)+ 1900;
 80038ea:	2001      	movs	r0, #1
 80038ec:	f000 fcfe 	bl	80042ec <getRCchannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fa:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8003bdc <TaskChassis+0x5b8>
 80038fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003902:	ed9f 7ab7 	vldr	s14, [pc, #732]	@ 8003be0 <TaskChassis+0x5bc>
 8003906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800390a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800390e:	ee17 3a90 	vmov	r3, s15
 8003912:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	    	if (robotPositionToGo > 2600) {
 8003914:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8003918:	f640 2228 	movw	r2, #2600	@ 0xa28
 800391c:	4293      	cmp	r3, r2
 800391e:	dd02      	ble.n	8003926 <TaskChassis+0x302>
	    		robotPositionToGo = 2600;
 8003920:	f640 2328 	movw	r3, #2600	@ 0xa28
 8003924:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	    	}

	    	Diff[1] = robotPositionToGo - currentMotorPositionTurret;
 8003926:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003928:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	b29b      	uxth	r3, r3
 800392e:	b21b      	sxth	r3, r3
 8003930:	827b      	strh	r3, [r7, #18]
	    	// positionPIDByMe(&N[1], &pN[1],& PD [1],  Diff [1] , &sum[1] , kP, kI, kD)
	    	int16_t pidVal = positionPIDByMe(&N[1], &pN[1],& PD [1],  Diff [1] , &sum[1] , kP, kI, kD);
 8003932:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	f107 0318 	add.w	r3, r7, #24
 8003940:	1c59      	adds	r1, r3, #1
 8003942:	f107 031c 	add.w	r3, r7, #28
 8003946:	1c58      	adds	r0, r3, #1
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	3302      	adds	r3, #2
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	ed97 1a0b 	vldr	s2, [r7, #44]	@ 0x2c
 8003954:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 8003958:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800395c:	4623      	mov	r3, r4
 800395e:	f7ff fd79 	bl	8003454 <positionPIDByMe>
 8003962:	4603      	mov	r3, r0
 8003964:	853b      	strh	r3, [r7, #40]	@ 0x28
	    	setGM6020voltageRPM(7,  pidVal  , yawPresetVoltageRPM );
 8003966:	4b9f      	ldr	r3, [pc, #636]	@ (8003be4 <TaskChassis+0x5c0>)
 8003968:	edd3 6a00 	vldr	s13, [r3]
 800396c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003970:	edd3 7a02 	vldr	s15, [r3, #8]
 8003974:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003978:	eeb0 0a66 	vmov.f32	s0, s13
 800397c:	eef0 0a47 	vmov.f32	s1, s14
 8003980:	eeb0 1a67 	vmov.f32	s2, s15
 8003984:	4619      	mov	r1, r3
 8003986:	2007      	movs	r0, #7
 8003988:	f7fe fb5e 	bl	8002048 <setGM6020voltageRPM>

	    	usart_printf("$%d %d %d\r\n;",   currentMotorPositionTurret , robotPositionToGo, pidVal);
 800398c:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 8003990:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 8003994:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003998:	4893      	ldr	r0, [pc, #588]	@ (8003be8 <TaskChassis+0x5c4>)
 800399a:	f7fe fc5b 	bl	8002254 <usart_printf>
	    	// 1100 top
	    	//sendB2bData(CAN_b2b_A_motorCtrl_ID, rcPitch, getRCswitch(1), 0, 0);
	    	//usart_printf("%d %d\r\n", b2bGyro.gyro_x, b2bGyro.gyro_y);
	    }

	    if (boardID == CAN_b2b_B_ID) {
 800399e:	4b93      	ldr	r3, [pc, #588]	@ (8003bec <TaskChassis+0x5c8>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	f240 1211 	movw	r2, #273	@ 0x111
 80039a6:	4293      	cmp	r3, r2
 80039a8:	f040 810c 	bne.w	8003bc4 <TaskChassis+0x5a0>
	    	setGM6020voltagePosition(9, b2bMotorCtrl.motor1_Ctrl, yawPresetVoltagePosition);
 80039ac:	4b90      	ldr	r3, [pc, #576]	@ (8003bf0 <TaskChassis+0x5cc>)
 80039ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80039b2:	4b90      	ldr	r3, [pc, #576]	@ (8003bf4 <TaskChassis+0x5d0>)
 80039b4:	edd3 6a00 	vldr	s13, [r3]
 80039b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80039bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80039c0:	eeb0 0a66 	vmov.f32	s0, s13
 80039c4:	eef0 0a47 	vmov.f32	s1, s14
 80039c8:	eeb0 1a67 	vmov.f32	s2, s15
 80039cc:	4611      	mov	r1, r2
 80039ce:	2009      	movs	r0, #9
 80039d0:	f7fe fb6e 	bl	80020b0 <setGM6020voltagePosition>
	    	//setGM6020voltageRPM(9, 100, yawPresetVoltageRPM);
	    	//CAN2_cmd_motors(CAN_GROUP3C_ID, 5000, 0, 0, 0);
	    	if (b2bMotorCtrl.motor2_Ctrl == 2) {                                         // IMPORTANT: top to bottom: 1 -> 3 -> 2
 80039d4:	4b86      	ldr	r3, [pc, #536]	@ (8003bf0 <TaskChassis+0x5cc>)
 80039d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d179      	bne.n	8003ad2 <TaskChassis+0x4ae>
	    		//setM2006RPM(6, -5400, indexerPreset);                             // THIS IS FUCKING STUPID
	    		setM3508RPM(7, 8000, shooterPreset);
 80039de:	4b86      	ldr	r3, [pc, #536]	@ (8003bf8 <TaskChassis+0x5d4>)
 80039e0:	edd3 6a00 	vldr	s13, [r3]
 80039e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80039e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80039ec:	eeb0 0a66 	vmov.f32	s0, s13
 80039f0:	eef0 0a47 	vmov.f32	s1, s14
 80039f4:	eeb0 1a67 	vmov.f32	s2, s15
 80039f8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80039fc:	2007      	movs	r0, #7
 80039fe:	f7fe faef 	bl	8001fe0 <setM3508RPM>
	    		setM3508RPM(8, -8000, shooterPreset);
 8003a02:	4b7d      	ldr	r3, [pc, #500]	@ (8003bf8 <TaskChassis+0x5d4>)
 8003a04:	edd3 6a00 	vldr	s13, [r3]
 8003a08:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a10:	eeb0 0a66 	vmov.f32	s0, s13
 8003a14:	eef0 0a47 	vmov.f32	s1, s14
 8003a18:	eeb0 1a67 	vmov.f32	s2, s15
 8003a1c:	4977      	ldr	r1, [pc, #476]	@ (8003bfc <TaskChassis+0x5d8>)
 8003a1e:	2008      	movs	r0, #8
 8003a20:	f7fe fade 	bl	8001fe0 <setM3508RPM>

	    		if (jammed > 0 && indexerStopped == 0) {
 8003a24:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	dd1d      	ble.n	8003a68 <TaskChassis+0x444>
 8003a2c:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d119      	bne.n	8003a68 <TaskChassis+0x444>
	    			setM2006RPM(6, 15000, indexerPreset);
 8003a34:	4b72      	ldr	r3, [pc, #456]	@ (8003c00 <TaskChassis+0x5dc>)
 8003a36:	edd3 6a00 	vldr	s13, [r3]
 8003a3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a42:	eeb0 0a66 	vmov.f32	s0, s13
 8003a46:	eef0 0a47 	vmov.f32	s1, s14
 8003a4a:	eeb0 1a67 	vmov.f32	s2, s15
 8003a4e:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8003a52:	2006      	movs	r0, #6
 8003a54:	f7fe fb60 	bl	8002118 <setM2006RPM>
	    			jammed--;
 8003a58:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003a66:	e0ad      	b.n	8003bc4 <TaskChassis+0x5a0>
	    		} else {
	    			indexerStopped = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	    			setM2006RPM(6, -5400, indexerPreset);
 8003a6e:	4b64      	ldr	r3, [pc, #400]	@ (8003c00 <TaskChassis+0x5dc>)
 8003a70:	edd3 6a00 	vldr	s13, [r3]
 8003a74:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a78:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a7c:	eeb0 0a66 	vmov.f32	s0, s13
 8003a80:	eef0 0a47 	vmov.f32	s1, s14
 8003a84:	eeb0 1a67 	vmov.f32	s2, s15
 8003a88:	495e      	ldr	r1, [pc, #376]	@ (8003c04 <TaskChassis+0x5e0>)
 8003a8a:	2006      	movs	r0, #6
 8003a8c:	f7fe fb44 	bl	8002118 <setM2006RPM>
	    			if (indexerTargetReached == 0 && getMotorRPM(6) <= -10) {
 8003a90:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <TaskChassis+0x48a>
 8003a98:	2006      	movs	r0, #6
 8003a9a:	f7fe fb89 	bl	80021b0 <getMotorRPM>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f113 0f09 	cmn.w	r3, #9
 8003aa4:	da03      	bge.n	8003aae <TaskChassis+0x48a>
	    				indexerTargetReached = 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003aac:	e08a      	b.n	8003bc4 <TaskChassis+0x5a0>
	    			} else if (getMotorRPM(6) > -1 && indexerTargetReached == 1) {         // jammed
 8003aae:	2006      	movs	r0, #6
 8003ab0:	f7fe fb7e 	bl	80021b0 <getMotorRPM>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f2c0 8084 	blt.w	8003bc4 <TaskChassis+0x5a0>
 8003abc:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d17f      	bne.n	8003bc4 <TaskChassis+0x5a0>
	    				jammed = 12;
 8003ac4:	230c      	movs	r3, #12
 8003ac6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	    				indexerTargetReached = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003ad0:	e078      	b.n	8003bc4 <TaskChassis+0x5a0>
	    			}
	    		}

	    	} else if (b2bMotorCtrl.motor2_Ctrl == 3) {
 8003ad2:	4b47      	ldr	r3, [pc, #284]	@ (8003bf0 <TaskChassis+0x5cc>)
 8003ad4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d13a      	bne.n	8003b52 <TaskChassis+0x52e>
	    		setM2006RPM(6, 0, indexerPreset);
 8003adc:	4b48      	ldr	r3, [pc, #288]	@ (8003c00 <TaskChassis+0x5dc>)
 8003ade:	edd3 6a00 	vldr	s13, [r3]
 8003ae2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ae6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aea:	eeb0 0a66 	vmov.f32	s0, s13
 8003aee:	eef0 0a47 	vmov.f32	s1, s14
 8003af2:	eeb0 1a67 	vmov.f32	s2, s15
 8003af6:	2100      	movs	r1, #0
 8003af8:	2006      	movs	r0, #6
 8003afa:	f7fe fb0d 	bl	8002118 <setM2006RPM>
	    		setM3508RPM(7, 8000, shooterPreset);
 8003afe:	4b3e      	ldr	r3, [pc, #248]	@ (8003bf8 <TaskChassis+0x5d4>)
 8003b00:	edd3 6a00 	vldr	s13, [r3]
 8003b04:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b08:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b0c:	eeb0 0a66 	vmov.f32	s0, s13
 8003b10:	eef0 0a47 	vmov.f32	s1, s14
 8003b14:	eeb0 1a67 	vmov.f32	s2, s15
 8003b18:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003b1c:	2007      	movs	r0, #7
 8003b1e:	f7fe fa5f 	bl	8001fe0 <setM3508RPM>
	    		setM3508RPM(8, -8000, shooterPreset);
 8003b22:	4b35      	ldr	r3, [pc, #212]	@ (8003bf8 <TaskChassis+0x5d4>)
 8003b24:	edd3 6a00 	vldr	s13, [r3]
 8003b28:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b30:	eeb0 0a66 	vmov.f32	s0, s13
 8003b34:	eef0 0a47 	vmov.f32	s1, s14
 8003b38:	eeb0 1a67 	vmov.f32	s2, s15
 8003b3c:	492f      	ldr	r1, [pc, #188]	@ (8003bfc <TaskChassis+0x5d8>)
 8003b3e:	2008      	movs	r0, #8
 8003b40:	f7fe fa4e 	bl	8001fe0 <setM3508RPM>
	    		indexerStopped = 1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	    		indexerTargetReached = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8003b50:	e038      	b.n	8003bc4 <TaskChassis+0x5a0>
	    	} else {       // = 1
	    		setM2006RPM(6, 0, indexerPreset);
 8003b52:	4b2b      	ldr	r3, [pc, #172]	@ (8003c00 <TaskChassis+0x5dc>)
 8003b54:	edd3 6a00 	vldr	s13, [r3]
 8003b58:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b60:	eeb0 0a66 	vmov.f32	s0, s13
 8003b64:	eef0 0a47 	vmov.f32	s1, s14
 8003b68:	eeb0 1a67 	vmov.f32	s2, s15
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	2006      	movs	r0, #6
 8003b70:	f7fe fad2 	bl	8002118 <setM2006RPM>
	    		setM3508RPM(7, 0, shooterPreset);
 8003b74:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <TaskChassis+0x5d4>)
 8003b76:	edd3 6a00 	vldr	s13, [r3]
 8003b7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b82:	eeb0 0a66 	vmov.f32	s0, s13
 8003b86:	eef0 0a47 	vmov.f32	s1, s14
 8003b8a:	eeb0 1a67 	vmov.f32	s2, s15
 8003b8e:	2100      	movs	r1, #0
 8003b90:	2007      	movs	r0, #7
 8003b92:	f7fe fa25 	bl	8001fe0 <setM3508RPM>
	    		setM3508RPM(8, 0, shooterPreset);
 8003b96:	4b18      	ldr	r3, [pc, #96]	@ (8003bf8 <TaskChassis+0x5d4>)
 8003b98:	edd3 6a00 	vldr	s13, [r3]
 8003b9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ba0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ba4:	eeb0 0a66 	vmov.f32	s0, s13
 8003ba8:	eef0 0a47 	vmov.f32	s1, s14
 8003bac:	eeb0 1a67 	vmov.f32	s2, s15
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2008      	movs	r0, #8
 8003bb4:	f7fe fa14 	bl	8001fe0 <setM3508RPM>
	    		indexerStopped = 1;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	    		indexerTargetReached = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	    //sprintf((char*)txbuf, "%f \r\n", power_heat_data.chassis_power);
	    //HAL_UART_Transmit(&huart1, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
	    //txbuf = *((float*)&power_heat_data.chassis_power);
	    // usart_printf("%d\r\n", 30);

        osDelay(5);
 8003bc4:	2005      	movs	r0, #5
 8003bc6:	f007 faa5 	bl	800b114 <osDelay>
	    for (int i = 0; i < 4; i++) {
 8003bca:	e54a      	b.n	8003662 <TaskChassis+0x3e>
 8003bcc:	40021c00 	.word	0x40021c00
 8003bd0:	3d75c28f 	.word	0x3d75c28f
 8003bd4:	3a83126f 	.word	0x3a83126f
 8003bd8:	38d1b717 	.word	0x38d1b717
 8003bdc:	bf9b26c8 	.word	0xbf9b26c8
 8003be0:	44ed8000 	.word	0x44ed8000
 8003be4:	2000004c 	.word	0x2000004c
 8003be8:	08010c94 	.word	0x08010c94
 8003bec:	2000007c 	.word	0x2000007c
 8003bf0:	20000320 	.word	0x20000320
 8003bf4:	20000058 	.word	0x20000058
 8003bf8:	20000070 	.word	0x20000070
 8003bfc:	ffffe0c0 	.word	0xffffe0c0
 8003c00:	20000064 	.word	0x20000064
 8003c04:	ffffeae8 	.word	0xffffeae8

08003c08 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003c10:	2001      	movs	r0, #1
 8003c12:	f007 fa7f 	bl	800b114 <osDelay>
 8003c16:	e7fb      	b.n	8003c10 <TaskTurret+0x8>

08003c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c1c:	b672      	cpsid	i
}
 8003c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <Error_Handler+0x8>

08003c24 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6178      	str	r0, [r7, #20]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c34:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c38:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d042      	beq.n	8003cc6 <PID_init+0xa2>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d03f      	beq.n	8003cc6 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	7cfa      	ldrb	r2, [r7, #19]
 8003c4a:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3304      	adds	r3, #4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3308      	adds	r3, #8
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	621a      	str	r2, [r3, #32]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cc4:	e000      	b.n	8003cc8 <PID_init+0xa4>
        return;
 8003cc6:	bf00      	nop
}
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cde:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <PID_calc+0x1c>
    {
        return 0.0f;
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e130      	b.n	8003f50 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8003d0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 8095 	bne.w	8003e50 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	edd3 6a02 	vldr	s13, [r3, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dac:	dd04      	ble.n	8003db8 <PID_calc+0xe6>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003db6:	e014      	b.n	8003de2 <PID_calc+0x110>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003dc4:	eef1 7a67 	vneg.f32	s15, s15
 8003dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d507      	bpl.n	8003de2 <PID_calc+0x110>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003dd8:	eef1 7a67 	vneg.f32	s15, s15
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	ed93 7a08 	vldr	s14, [r3, #32]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e16:	dd04      	ble.n	8003e22 <PID_calc+0x150>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	621a      	str	r2, [r3, #32]
 8003e20:	e094      	b.n	8003f4c <PID_calc+0x27a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	ed93 7a08 	vldr	s14, [r3, #32]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e2e:	eef1 7a67 	vneg.f32	s15, s15
 8003e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3a:	f140 8087 	bpl.w	8003f4c <PID_calc+0x27a>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e44:	eef1 7a67 	vneg.f32	s15, s15
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	edc3 7a08 	vstr	s15, [r3, #32]
 8003e4e:	e07d      	b.n	8003f4c <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d179      	bne.n	8003f4c <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003e6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003eaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	ed93 7a08 	vldr	s14, [r3, #32]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	ed93 7a08 	vldr	s14, [r3, #32]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	dd04      	ble.n	8003f22 <PID_calc+0x250>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	621a      	str	r2, [r3, #32]
 8003f20:	e014      	b.n	8003f4c <PID_calc+0x27a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	ed93 7a08 	vldr	s14, [r3, #32]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f2e:	eef1 7a67 	vneg.f32	s15, s15
 8003f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3a:	d507      	bpl.n	8003f4c <PID_calc+0x27a>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f42:	eef1 7a67 	vneg.f32	s15, s15
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
}
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eeb0 0a67 	vmov.f32	s0, s15
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8003f68:	2224      	movs	r2, #36	@ 0x24
 8003f6a:	4903      	ldr	r1, [pc, #12]	@ (8003f78 <remote_control_init+0x14>)
 8003f6c:	4803      	ldr	r0, [pc, #12]	@ (8003f7c <remote_control_init+0x18>)
 8003f6e:	f7fe fa51 	bl	8002414 <RC_init>
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000da8 	.word	0x20000da8
 8003f7c:	20000d84 	.word	0x20000d84

08003f80 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003f84:	4b02      	ldr	r3, [pc, #8]	@ (8003f90 <get_remote_control_point+0x10>)
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20000d6c 	.word	0x20000d6c

08003f94 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8003f9a:	4b44      	ldr	r3, [pc, #272]	@ (80040ac <USART3_IRQHandler+0x118>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	4b3f      	ldr	r3, [pc, #252]	@ (80040ac <USART3_IRQHandler+0x118>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80040ac <USART3_IRQHandler+0x118>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8003fbe:	e070      	b.n	80040a2 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80040b0 <USART3_IRQHandler+0x11c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d06a      	beq.n	80040a2 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4b36      	ldr	r3, [pc, #216]	@ (80040ac <USART3_IRQHandler+0x118>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4b34      	ldr	r3, [pc, #208]	@ (80040ac <USART3_IRQHandler+0x118>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003fe2:	4b34      	ldr	r3, [pc, #208]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d12d      	bne.n	800404c <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003ff0:	4b30      	ldr	r3, [pc, #192]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8004000:	4b2c      	ldr	r3, [pc, #176]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b29b      	uxth	r3, r3
 8004008:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800400c:	b29a      	uxth	r2, r3
 800400e:	4b2a      	ldr	r3, [pc, #168]	@ (80040b8 <USART3_IRQHandler+0x124>)
 8004010:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8004012:	4b28      	ldr	r3, [pc, #160]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2224      	movs	r2, #36	@ 0x24
 8004018:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800401a:	4b26      	ldr	r3, [pc, #152]	@ (80040b4 <USART3_IRQHandler+0x120>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b24      	ldr	r3, [pc, #144]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004028:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800402a:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <USART3_IRQHandler+0x120>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b20      	ldr	r3, [pc, #128]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 800403a:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <USART3_IRQHandler+0x124>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	2b12      	cmp	r3, #18
 8004040:	d12f      	bne.n	80040a2 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8004042:	491e      	ldr	r1, [pc, #120]	@ (80040bc <USART3_IRQHandler+0x128>)
 8004044:	481e      	ldr	r0, [pc, #120]	@ (80040c0 <USART3_IRQHandler+0x12c>)
 8004046:	f000 f841 	bl	80040cc <sbus_to_rc>
}
 800404a:	e02a      	b.n	80040a2 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800404c:	4b19      	ldr	r3, [pc, #100]	@ (80040b4 <USART3_IRQHandler+0x120>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4b18      	ldr	r3, [pc, #96]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 800405c:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <USART3_IRQHandler+0x120>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8004068:	b29a      	uxth	r2, r3
 800406a:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <USART3_IRQHandler+0x124>)
 800406c:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 800406e:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2224      	movs	r2, #36	@ 0x24
 8004074:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <USART3_IRQHandler+0x130>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a12      	ldr	r2, [pc, #72]	@ (80040c4 <USART3_IRQHandler+0x130>)
 800407c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004080:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8004082:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <USART3_IRQHandler+0x120>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <USART3_IRQHandler+0x120>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0201 	orr.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8004092:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <USART3_IRQHandler+0x124>)
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	2b12      	cmp	r3, #18
 8004098:	d103      	bne.n	80040a2 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 800409a:	4908      	ldr	r1, [pc, #32]	@ (80040bc <USART3_IRQHandler+0x128>)
 800409c:	480a      	ldr	r0, [pc, #40]	@ (80040c8 <USART3_IRQHandler+0x134>)
 800409e:	f000 f815 	bl	80040cc <sbus_to_rc>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000ad8 	.word	0x20000ad8
 80040b0:	40004800 	.word	0x40004800
 80040b4:	20000c28 	.word	0x20000c28
 80040b8:	20000dcc 	.word	0x20000dcc
 80040bc:	20000d6c 	.word	0x20000d6c
 80040c0:	20000d84 	.word	0x20000d84
 80040c4:	40026028 	.word	0x40026028
 80040c8:	20000da8 	.word	0x20000da8

080040cc <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8101 	beq.w	80042e0 <sbus_to_rc+0x214>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80fd 	beq.w	80042e0 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	b21a      	sxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3301      	adds	r3, #1
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b21b      	sxth	r3, r3
 80040fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004102:	b21a      	sxth	r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3301      	adds	r3, #1
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	b21a      	sxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3302      	adds	r3, #2
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	015b      	lsls	r3, r3, #5
 8004120:	b21b      	sxth	r3, r3
 8004122:	4313      	orrs	r3, r2
 8004124:	b21b      	sxth	r3, r3
 8004126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800412a:	b21a      	sxth	r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3302      	adds	r3, #2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	b2db      	uxtb	r3, r3
 800413c:	b21a      	sxth	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3303      	adds	r3, #3
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	b21b      	sxth	r3, r3
 800414a:	4313      	orrs	r3, r2
 800414c:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004158:	b21b      	sxth	r3, r3
 800415a:	4313      	orrs	r3, r2
 800415c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800415e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004162:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	b21a      	sxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3305      	adds	r3, #5
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	01db      	lsls	r3, r3, #7
 8004180:	b21b      	sxth	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	b21b      	sxth	r3, r3
 8004186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418a:	b21a      	sxth	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3305      	adds	r3, #5
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3305      	adds	r3, #5
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	109b      	asrs	r3, r3, #2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3306      	adds	r3, #6
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	b21a      	sxth	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3307      	adds	r3, #7
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	b21b      	sxth	r3, r3
 80041d6:	4313      	orrs	r3, r2
 80041d8:	b21a      	sxth	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3308      	adds	r3, #8
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	b21a      	sxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3309      	adds	r3, #9
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	b21b      	sxth	r3, r3
 80041f4:	4313      	orrs	r3, r2
 80041f6:	b21a      	sxth	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	330a      	adds	r3, #10
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	b21a      	sxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	330b      	adds	r3, #11
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	b21b      	sxth	r3, r3
 8004212:	4313      	orrs	r3, r2
 8004214:	b21a      	sxth	r2, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	330c      	adds	r3, #12
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	330d      	adds	r3, #13
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	330e      	adds	r3, #14
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	b21a      	sxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	330f      	adds	r3, #15
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	b21b      	sxth	r3, r3
 8004248:	4313      	orrs	r3, r2
 800424a:	b21b      	sxth	r3, r3
 800424c:	b29a      	uxth	r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3310      	adds	r3, #16
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	b21a      	sxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3311      	adds	r3, #17
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	b21b      	sxth	r3, r3
 8004268:	4313      	orrs	r3, r2
 800426a:	b21a      	sxth	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004276:	b21b      	sxth	r3, r3
 8004278:	b29b      	uxth	r3, r3
 800427a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800427e:	b29b      	uxth	r3, r3
 8004280:	b21a      	sxth	r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800428c:	b21b      	sxth	r3, r3
 800428e:	b29b      	uxth	r3, r3
 8004290:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004294:	b29b      	uxth	r3, r3
 8004296:	b21a      	sxth	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042a2:	b21b      	sxth	r3, r3
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	b21a      	sxth	r2, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	b21a      	sxth	r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	b21a      	sxth	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	811a      	strh	r2, [r3, #8]
 80042de:	e000      	b.n	80042e2 <sbus_to_rc+0x216>
        return;
 80042e0:	bf00      	nop
}
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <getRCchannel+0x24>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80042fe:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004302:	b21b      	sxth	r3, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000080 	.word	0x20000080

08004314 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 800431e:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <getRCswitch+0x24>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	4413      	add	r3, r2
 8004328:	7a9b      	ldrb	r3, [r3, #10]
 800432a:	b25b      	sxtb	r3, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	20000080 	.word	0x20000080

0800433c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	4b12      	ldr	r3, [pc, #72]	@ (8004390 <HAL_MspInit+0x54>)
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	4a11      	ldr	r2, [pc, #68]	@ (8004390 <HAL_MspInit+0x54>)
 800434c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004350:	6453      	str	r3, [r2, #68]	@ 0x44
 8004352:	4b0f      	ldr	r3, [pc, #60]	@ (8004390 <HAL_MspInit+0x54>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800435a:	607b      	str	r3, [r7, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <HAL_MspInit+0x54>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	4a0a      	ldr	r2, [pc, #40]	@ (8004390 <HAL_MspInit+0x54>)
 8004368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	@ 0x40
 800436e:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <HAL_MspInit+0x54>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	210f      	movs	r1, #15
 800437e:	f06f 0001 	mvn.w	r0, #1
 8004382:	f001 fe34 	bl	8005fee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800

08004394 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	@ 0x30
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439c:	f107 031c 	add.w	r3, r7, #28
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a4a      	ldr	r2, [pc, #296]	@ (80044dc <HAL_CAN_MspInit+0x148>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d13d      	bne.n	8004432 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80043b6:	4b4a      	ldr	r3, [pc, #296]	@ (80044e0 <HAL_CAN_MspInit+0x14c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	4a48      	ldr	r2, [pc, #288]	@ (80044e0 <HAL_CAN_MspInit+0x14c>)
 80043be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80043c0:	4b47      	ldr	r3, [pc, #284]	@ (80044e0 <HAL_CAN_MspInit+0x14c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d10d      	bne.n	80043e4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	4b45      	ldr	r3, [pc, #276]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	4a44      	ldr	r2, [pc, #272]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 80043d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80043d8:	4b42      	ldr	r3, [pc, #264]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	4b3e      	ldr	r3, [pc, #248]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	4a3d      	ldr	r2, [pc, #244]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 80043ee:	f043 0308 	orr.w	r3, r3, #8
 80043f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f4:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004400:	2303      	movs	r3, #3
 8004402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440c:	2303      	movs	r3, #3
 800440e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004410:	2309      	movs	r3, #9
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004414:	f107 031c 	add.w	r3, r7, #28
 8004418:	4619      	mov	r1, r3
 800441a:	4833      	ldr	r0, [pc, #204]	@ (80044e8 <HAL_CAN_MspInit+0x154>)
 800441c:	f002 fa20 	bl	8006860 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	2105      	movs	r1, #5
 8004424:	2014      	movs	r0, #20
 8004426:	f001 fde2 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800442a:	2014      	movs	r0, #20
 800442c:	f001 fdfb 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004430:	e04f      	b.n	80044d2 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2d      	ldr	r2, [pc, #180]	@ (80044ec <HAL_CAN_MspInit+0x158>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d14a      	bne.n	80044d2 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	4a27      	ldr	r2, [pc, #156]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 8004446:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800444a:	6413      	str	r3, [r2, #64]	@ 0x40
 800444c:	4b25      	ldr	r3, [pc, #148]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004458:	4b21      	ldr	r3, [pc, #132]	@ (80044e0 <HAL_CAN_MspInit+0x14c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	4a20      	ldr	r2, [pc, #128]	@ (80044e0 <HAL_CAN_MspInit+0x14c>)
 8004460:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004462:	4b1f      	ldr	r3, [pc, #124]	@ (80044e0 <HAL_CAN_MspInit+0x14c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10d      	bne.n	8004486 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	4a1c      	ldr	r2, [pc, #112]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 8004474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004478:	6413      	str	r3, [r2, #64]	@ 0x40
 800447a:	4b1a      	ldr	r3, [pc, #104]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	4b16      	ldr	r3, [pc, #88]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	4a15      	ldr	r2, [pc, #84]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	6313      	str	r3, [r2, #48]	@ 0x30
 8004496:	4b13      	ldr	r3, [pc, #76]	@ (80044e4 <HAL_CAN_MspInit+0x150>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80044a2:	2360      	movs	r3, #96	@ 0x60
 80044a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a6:	2302      	movs	r3, #2
 80044a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	2303      	movs	r3, #3
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80044b2:	2309      	movs	r3, #9
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b6:	f107 031c 	add.w	r3, r7, #28
 80044ba:	4619      	mov	r1, r3
 80044bc:	480c      	ldr	r0, [pc, #48]	@ (80044f0 <HAL_CAN_MspInit+0x15c>)
 80044be:	f002 f9cf 	bl	8006860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2105      	movs	r1, #5
 80044c6:	2040      	movs	r0, #64	@ 0x40
 80044c8:	f001 fd91 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80044cc:	2040      	movs	r0, #64	@ 0x40
 80044ce:	f001 fdaa 	bl	8006026 <HAL_NVIC_EnableIRQ>
}
 80044d2:	bf00      	nop
 80044d4:	3730      	adds	r7, #48	@ 0x30
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40006400 	.word	0x40006400
 80044e0:	20000dd0 	.word	0x20000dd0
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40020c00 	.word	0x40020c00
 80044ec:	40006800 	.word	0x40006800
 80044f0:	40020400 	.word	0x40020400

080044f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	@ 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	f107 0314 	add.w	r3, r7, #20
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a29      	ldr	r2, [pc, #164]	@ (80045b8 <HAL_I2C_MspInit+0xc4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d14b      	bne.n	80045ae <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	4b28      	ldr	r3, [pc, #160]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	4a27      	ldr	r2, [pc, #156]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6313      	str	r3, [r2, #48]	@ 0x30
 8004526:	4b25      	ldr	r3, [pc, #148]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	4b21      	ldr	r3, [pc, #132]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	4a20      	ldr	r2, [pc, #128]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6313      	str	r3, [r2, #48]	@ 0x30
 8004542:	4b1e      	ldr	r3, [pc, #120]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800454e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004554:	2312      	movs	r3, #18
 8004556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800455c:	2303      	movs	r3, #3
 800455e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004560:	2304      	movs	r3, #4
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004564:	f107 0314 	add.w	r3, r7, #20
 8004568:	4619      	mov	r1, r3
 800456a:	4815      	ldr	r0, [pc, #84]	@ (80045c0 <HAL_I2C_MspInit+0xcc>)
 800456c:	f002 f978 	bl	8006860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004576:	2312      	movs	r3, #18
 8004578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457e:	2303      	movs	r3, #3
 8004580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004582:	2304      	movs	r3, #4
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004586:	f107 0314 	add.w	r3, r7, #20
 800458a:	4619      	mov	r1, r3
 800458c:	480d      	ldr	r0, [pc, #52]	@ (80045c4 <HAL_I2C_MspInit+0xd0>)
 800458e:	f002 f967 	bl	8006860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	4b09      	ldr	r3, [pc, #36]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	4a08      	ldr	r2, [pc, #32]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 800459c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a2:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <HAL_I2C_MspInit+0xc8>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80045ae:	bf00      	nop
 80045b0:	3728      	adds	r7, #40	@ 0x28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40005c00 	.word	0x40005c00
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40020800 	.word	0x40020800
 80045c4:	40020000 	.word	0x40020000

080045c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	@ 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a28      	ldr	r2, [pc, #160]	@ (8004688 <HAL_SPI_MspInit+0xc0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d149      	bne.n	800467e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	4b27      	ldr	r3, [pc, #156]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	4a26      	ldr	r2, [pc, #152]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 80045f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045fa:	4b24      	ldr	r3, [pc, #144]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	4b20      	ldr	r3, [pc, #128]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	4a1f      	ldr	r2, [pc, #124]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6313      	str	r3, [r2, #48]	@ 0x30
 8004616:	4b1d      	ldr	r3, [pc, #116]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	4b19      	ldr	r3, [pc, #100]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	4a18      	ldr	r2, [pc, #96]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6313      	str	r3, [r2, #48]	@ 0x30
 8004632:	4b16      	ldr	r3, [pc, #88]	@ (800468c <HAL_SPI_MspInit+0xc4>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800463e:	2318      	movs	r3, #24
 8004640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	2302      	movs	r3, #2
 8004644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464a:	2303      	movs	r3, #3
 800464c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800464e:	2305      	movs	r3, #5
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004652:	f107 0314 	add.w	r3, r7, #20
 8004656:	4619      	mov	r1, r3
 8004658:	480d      	ldr	r0, [pc, #52]	@ (8004690 <HAL_SPI_MspInit+0xc8>)
 800465a:	f002 f901 	bl	8006860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800465e:	2380      	movs	r3, #128	@ 0x80
 8004660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004662:	2302      	movs	r3, #2
 8004664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466a:	2303      	movs	r3, #3
 800466c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800466e:	2305      	movs	r3, #5
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004672:	f107 0314 	add.w	r3, r7, #20
 8004676:	4619      	mov	r1, r3
 8004678:	4806      	ldr	r0, [pc, #24]	@ (8004694 <HAL_SPI_MspInit+0xcc>)
 800467a:	f002 f8f1 	bl	8006860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800467e:	bf00      	nop
 8004680:	3728      	adds	r7, #40	@ 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40013000 	.word	0x40013000
 800468c:	40023800 	.word	0x40023800
 8004690:	40020400 	.word	0x40020400
 8004694:	40020000 	.word	0x40020000

08004698 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <HAL_TIM_PWM_MspInit+0x64>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10e      	bne.n	80046c8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	4b14      	ldr	r3, [pc, #80]	@ (8004700 <HAL_TIM_PWM_MspInit+0x68>)
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	4a13      	ldr	r2, [pc, #76]	@ (8004700 <HAL_TIM_PWM_MspInit+0x68>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ba:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_TIM_PWM_MspInit+0x68>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80046c6:	e012      	b.n	80046ee <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004704 <HAL_TIM_PWM_MspInit+0x6c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10d      	bne.n	80046ee <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <HAL_TIM_PWM_MspInit+0x68>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	4a09      	ldr	r2, [pc, #36]	@ (8004700 <HAL_TIM_PWM_MspInit+0x68>)
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80046e2:	4b07      	ldr	r3, [pc, #28]	@ (8004700 <HAL_TIM_PWM_MspInit+0x68>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40023800 	.word	0x40023800
 8004704:	40010400 	.word	0x40010400

08004708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a15      	ldr	r2, [pc, #84]	@ (800476c <HAL_TIM_Base_MspInit+0x64>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <HAL_TIM_Base_MspInit+0x68>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	4a13      	ldr	r2, [pc, #76]	@ (8004770 <HAL_TIM_Base_MspInit+0x68>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	6413      	str	r3, [r2, #64]	@ 0x40
 800472a:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <HAL_TIM_Base_MspInit+0x68>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004736:	e012      	b.n	800475e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a0d      	ldr	r2, [pc, #52]	@ (8004774 <HAL_TIM_Base_MspInit+0x6c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10d      	bne.n	800475e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <HAL_TIM_Base_MspInit+0x68>)
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	4a09      	ldr	r2, [pc, #36]	@ (8004770 <HAL_TIM_Base_MspInit+0x68>)
 800474c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004750:	6453      	str	r3, [r2, #68]	@ 0x44
 8004752:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <HAL_TIM_Base_MspInit+0x68>)
 8004754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40000800 	.word	0x40000800
 8004770:	40023800 	.word	0x40023800
 8004774:	40014400 	.word	0x40014400

08004778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	@ 0x30
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004780:	f107 031c 	add.w	r3, r7, #28
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a58      	ldr	r2, [pc, #352]	@ (80048f8 <HAL_TIM_MspPostInit+0x180>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d11f      	bne.n	80047da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	4b57      	ldr	r3, [pc, #348]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a2:	4a56      	ldr	r2, [pc, #344]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80047a4:	f043 0310 	orr.w	r3, r3, #16
 80047a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80047aa:	4b54      	ldr	r3, [pc, #336]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	69bb      	ldr	r3, [r7, #24]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80047b6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80047ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047c8:	2301      	movs	r3, #1
 80047ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047cc:	f107 031c 	add.w	r3, r7, #28
 80047d0:	4619      	mov	r1, r3
 80047d2:	484b      	ldr	r0, [pc, #300]	@ (8004900 <HAL_TIM_MspPostInit+0x188>)
 80047d4:	f002 f844 	bl	8006860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80047d8:	e089      	b.n	80048ee <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a49      	ldr	r2, [pc, #292]	@ (8004904 <HAL_TIM_MspPostInit+0x18c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d11f      	bne.n	8004824 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	4b44      	ldr	r3, [pc, #272]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ec:	4a43      	ldr	r2, [pc, #268]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80047ee:	f043 0308 	orr.w	r3, r3, #8
 80047f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f4:	4b41      	ldr	r3, [pc, #260]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004800:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	2300      	movs	r3, #0
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480e:	2300      	movs	r3, #0
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004812:	2302      	movs	r3, #2
 8004814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004816:	f107 031c 	add.w	r3, r7, #28
 800481a:	4619      	mov	r1, r3
 800481c:	483a      	ldr	r0, [pc, #232]	@ (8004908 <HAL_TIM_MspPostInit+0x190>)
 800481e:	f002 f81f 	bl	8006860 <HAL_GPIO_Init>
}
 8004822:	e064      	b.n	80048ee <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM8)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a38      	ldr	r2, [pc, #224]	@ (800490c <HAL_TIM_MspPostInit+0x194>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d13c      	bne.n	80048a8 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	4b32      	ldr	r3, [pc, #200]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	4a31      	ldr	r2, [pc, #196]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800483c:	6313      	str	r3, [r2, #48]	@ 0x30
 800483e:	4b2f      	ldr	r3, [pc, #188]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	4b2b      	ldr	r3, [pc, #172]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004852:	4a2a      	ldr	r2, [pc, #168]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	6313      	str	r3, [r2, #48]	@ 0x30
 800485a:	4b28      	ldr	r3, [pc, #160]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004866:	23c0      	movs	r3, #192	@ 0xc0
 8004868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004876:	2303      	movs	r3, #3
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800487a:	f107 031c 	add.w	r3, r7, #28
 800487e:	4619      	mov	r1, r3
 8004880:	4823      	ldr	r0, [pc, #140]	@ (8004910 <HAL_TIM_MspPostInit+0x198>)
 8004882:	f001 ffed 	bl	8006860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004886:	2340      	movs	r3, #64	@ 0x40
 8004888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488a:	2302      	movs	r3, #2
 800488c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004892:	2300      	movs	r3, #0
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004896:	2303      	movs	r3, #3
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800489a:	f107 031c 	add.w	r3, r7, #28
 800489e:	4619      	mov	r1, r3
 80048a0:	481c      	ldr	r0, [pc, #112]	@ (8004914 <HAL_TIM_MspPostInit+0x19c>)
 80048a2:	f001 ffdd 	bl	8006860 <HAL_GPIO_Init>
}
 80048a6:	e022      	b.n	80048ee <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004918 <HAL_TIM_MspPostInit+0x1a0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d11d      	bne.n	80048ee <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ba:	4a10      	ldr	r2, [pc, #64]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80048bc:	f043 0320 	orr.w	r3, r3, #32
 80048c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80048c2:	4b0e      	ldr	r3, [pc, #56]	@ (80048fc <HAL_TIM_MspPostInit+0x184>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80048ce:	2340      	movs	r3, #64	@ 0x40
 80048d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d2:	2302      	movs	r3, #2
 80048d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048d6:	2301      	movs	r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048da:	2302      	movs	r3, #2
 80048dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80048de:	2303      	movs	r3, #3
 80048e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80048e2:	f107 031c 	add.w	r3, r7, #28
 80048e6:	4619      	mov	r1, r3
 80048e8:	480c      	ldr	r0, [pc, #48]	@ (800491c <HAL_TIM_MspPostInit+0x1a4>)
 80048ea:	f001 ffb9 	bl	8006860 <HAL_GPIO_Init>
}
 80048ee:	bf00      	nop
 80048f0:	3730      	adds	r7, #48	@ 0x30
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40010000 	.word	0x40010000
 80048fc:	40023800 	.word	0x40023800
 8004900:	40021000 	.word	0x40021000
 8004904:	40000800 	.word	0x40000800
 8004908:	40020c00 	.word	0x40020c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40022000 	.word	0x40022000
 8004914:	40020800 	.word	0x40020800
 8004918:	40014400 	.word	0x40014400
 800491c:	40021400 	.word	0x40021400

08004920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08e      	sub	sp, #56	@ 0x38
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a90      	ldr	r2, [pc, #576]	@ (8004b80 <HAL_UART_MspInit+0x260>)
 800493e:	4293      	cmp	r3, r2
 8004940:	f040 80b2 	bne.w	8004aa8 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004944:	2300      	movs	r3, #0
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	4b8e      	ldr	r3, [pc, #568]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 800494a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494c:	4a8d      	ldr	r2, [pc, #564]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 800494e:	f043 0310 	orr.w	r3, r3, #16
 8004952:	6453      	str	r3, [r2, #68]	@ 0x44
 8004954:	4b8b      	ldr	r3, [pc, #556]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004960:	2300      	movs	r3, #0
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	4b87      	ldr	r3, [pc, #540]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	4a86      	ldr	r2, [pc, #536]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004970:	4b84      	ldr	r3, [pc, #528]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	4b80      	ldr	r3, [pc, #512]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	4a7f      	ldr	r2, [pc, #508]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6313      	str	r3, [r2, #48]	@ 0x30
 800498c:	4b7d      	ldr	r3, [pc, #500]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 800498e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499c:	2302      	movs	r3, #2
 800499e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a4:	2303      	movs	r3, #3
 80049a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049a8:	2307      	movs	r3, #7
 80049aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049b0:	4619      	mov	r1, r3
 80049b2:	4875      	ldr	r0, [pc, #468]	@ (8004b88 <HAL_UART_MspInit+0x268>)
 80049b4:	f001 ff54 	bl	8006860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80049b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049be:	2302      	movs	r3, #2
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c6:	2303      	movs	r3, #3
 80049c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049ca:	2307      	movs	r3, #7
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049d2:	4619      	mov	r1, r3
 80049d4:	486d      	ldr	r0, [pc, #436]	@ (8004b8c <HAL_UART_MspInit+0x26c>)
 80049d6:	f001 ff43 	bl	8006860 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80049da:	4b6d      	ldr	r3, [pc, #436]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 80049dc:	4a6d      	ldr	r2, [pc, #436]	@ (8004b94 <HAL_UART_MspInit+0x274>)
 80049de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80049e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 80049e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80049e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049e8:	4b69      	ldr	r3, [pc, #420]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 80049ea:	2240      	movs	r2, #64	@ 0x40
 80049ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049ee:	4b68      	ldr	r3, [pc, #416]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049f4:	4b66      	ldr	r3, [pc, #408]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 80049f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049fc:	4b64      	ldr	r3, [pc, #400]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a02:	4b63      	ldr	r3, [pc, #396]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004a08:	4b61      	ldr	r3, [pc, #388]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a0e:	4b60      	ldr	r3, [pc, #384]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 8004a10:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a14:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a16:	4b5e      	ldr	r3, [pc, #376]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004a1c:	485c      	ldr	r0, [pc, #368]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 8004a1e:	f001 fb1d 	bl	800605c <HAL_DMA_Init>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004a28:	f7ff f8f6 	bl	8003c18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a58      	ldr	r2, [pc, #352]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 8004a30:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a32:	4a57      	ldr	r2, [pc, #348]	@ (8004b90 <HAL_UART_MspInit+0x270>)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004a38:	4b57      	ldr	r3, [pc, #348]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a3a:	4a58      	ldr	r2, [pc, #352]	@ (8004b9c <HAL_UART_MspInit+0x27c>)
 8004a3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004a3e:	4b56      	ldr	r3, [pc, #344]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a40:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004a44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a46:	4b54      	ldr	r3, [pc, #336]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a4c:	4b52      	ldr	r3, [pc, #328]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a52:	4b51      	ldr	r3, [pc, #324]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a60:	4b4d      	ldr	r3, [pc, #308]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004a66:	4b4c      	ldr	r3, [pc, #304]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a6e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a72:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a74:	4b48      	ldr	r3, [pc, #288]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a7a:	4847      	ldr	r0, [pc, #284]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a7c:	f001 faee 	bl	800605c <HAL_DMA_Init>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8004a86:	f7ff f8c7 	bl	8003c18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a42      	ldr	r2, [pc, #264]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a90:	4a41      	ldr	r2, [pc, #260]	@ (8004b98 <HAL_UART_MspInit+0x278>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2105      	movs	r1, #5
 8004a9a:	2025      	movs	r0, #37	@ 0x25
 8004a9c:	f001 faa7 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004aa0:	2025      	movs	r0, #37	@ 0x25
 8004aa2:	f001 fac0 	bl	8006026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004aa6:	e11c      	b.n	8004ce2 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba0 <HAL_UART_MspInit+0x280>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d17e      	bne.n	8004bb0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	4b33      	ldr	r3, [pc, #204]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	4a32      	ldr	r2, [pc, #200]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ac2:	4b30      	ldr	r3, [pc, #192]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004ad8:	f043 0304 	orr.w	r3, r3, #4
 8004adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ade:	4b29      	ldr	r3, [pc, #164]	@ (8004b84 <HAL_UART_MspInit+0x264>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8004aea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af8:	2303      	movs	r3, #3
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004afc:	2307      	movs	r3, #7
 8004afe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b04:	4619      	mov	r1, r3
 8004b06:	4827      	ldr	r0, [pc, #156]	@ (8004ba4 <HAL_UART_MspInit+0x284>)
 8004b08:	f001 feaa 	bl	8006860 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004b0c:	4b26      	ldr	r3, [pc, #152]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b0e:	4a27      	ldr	r2, [pc, #156]	@ (8004bac <HAL_UART_MspInit+0x28c>)
 8004b10:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004b12:	4b25      	ldr	r3, [pc, #148]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004b18:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b20:	4b21      	ldr	r3, [pc, #132]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b26:	4b20      	ldr	r3, [pc, #128]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b2c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b34:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b40:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004b42:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b44:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004b48:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004b50:	4815      	ldr	r0, [pc, #84]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b52:	f001 fa83 	bl	800605c <HAL_DMA_Init>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8004b5c:	f7ff f85c 	bl	8003c18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a11      	ldr	r2, [pc, #68]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b66:	4a10      	ldr	r2, [pc, #64]	@ (8004ba8 <HAL_UART_MspInit+0x288>)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2105      	movs	r1, #5
 8004b70:	2027      	movs	r0, #39	@ 0x27
 8004b72:	f001 fa3c 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b76:	2027      	movs	r0, #39	@ 0x27
 8004b78:	f001 fa55 	bl	8006026 <HAL_NVIC_EnableIRQ>
}
 8004b7c:	e0b1      	b.n	8004ce2 <HAL_UART_MspInit+0x3c2>
 8004b7e:	bf00      	nop
 8004b80:	40011000 	.word	0x40011000
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40020400 	.word	0x40020400
 8004b8c:	40020000 	.word	0x40020000
 8004b90:	20000b68 	.word	0x20000b68
 8004b94:	400264b8 	.word	0x400264b8
 8004b98:	20000bc8 	.word	0x20000bc8
 8004b9c:	40026440 	.word	0x40026440
 8004ba0:	40004800 	.word	0x40004800
 8004ba4:	40020800 	.word	0x40020800
 8004ba8:	20000c28 	.word	0x20000c28
 8004bac:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8004cec <HAL_UART_MspInit+0x3cc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	f040 8093 	bne.w	8004ce2 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf0 <HAL_UART_MspInit+0x3d0>)
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf0 <HAL_UART_MspInit+0x3d0>)
 8004bc6:	f043 0320 	orr.w	r3, r3, #32
 8004bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bcc:	4b48      	ldr	r3, [pc, #288]	@ (8004cf0 <HAL_UART_MspInit+0x3d0>)
 8004bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	4b44      	ldr	r3, [pc, #272]	@ (8004cf0 <HAL_UART_MspInit+0x3d0>)
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	4a43      	ldr	r2, [pc, #268]	@ (8004cf0 <HAL_UART_MspInit+0x3d0>)
 8004be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004be8:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <HAL_UART_MspInit+0x3d0>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004bf4:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c02:	2303      	movs	r3, #3
 8004c04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c06:	2308      	movs	r3, #8
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4838      	ldr	r0, [pc, #224]	@ (8004cf4 <HAL_UART_MspInit+0x3d4>)
 8004c12:	f001 fe25 	bl	8006860 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004c16:	4b38      	ldr	r3, [pc, #224]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c18:	4a38      	ldr	r2, [pc, #224]	@ (8004cfc <HAL_UART_MspInit+0x3dc>)
 8004c1a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004c1c:	4b36      	ldr	r3, [pc, #216]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c1e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004c22:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c24:	4b34      	ldr	r3, [pc, #208]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c2a:	4b33      	ldr	r3, [pc, #204]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c30:	4b31      	ldr	r3, [pc, #196]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c36:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c38:	4b2f      	ldr	r3, [pc, #188]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004c44:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c4c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c50:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c52:	4b29      	ldr	r3, [pc, #164]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004c58:	4827      	ldr	r0, [pc, #156]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c5a:	f001 f9ff 	bl	800605c <HAL_DMA_Init>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004c64:	f7fe ffd8 	bl	8003c18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a23      	ldr	r2, [pc, #140]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c6e:	4a22      	ldr	r2, [pc, #136]	@ (8004cf8 <HAL_UART_MspInit+0x3d8>)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004c74:	4b22      	ldr	r3, [pc, #136]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004c76:	4a23      	ldr	r2, [pc, #140]	@ (8004d04 <HAL_UART_MspInit+0x3e4>)
 8004c78:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8004c7a:	4b21      	ldr	r3, [pc, #132]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004c7c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004c80:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c82:	4b1f      	ldr	r3, [pc, #124]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004c84:	2240      	movs	r2, #64	@ 0x40
 8004c86:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c88:	4b1d      	ldr	r3, [pc, #116]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004c90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c94:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c96:	4b1a      	ldr	r3, [pc, #104]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c9c:	4b18      	ldr	r3, [pc, #96]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004ca2:	4b17      	ldr	r3, [pc, #92]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004ca8:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004caa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004cae:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cb0:	4b13      	ldr	r3, [pc, #76]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004cb6:	4812      	ldr	r0, [pc, #72]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004cb8:	f001 f9d0 	bl	800605c <HAL_DMA_Init>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004cc2:	f7fe ffa9 	bl	8003c18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004cca:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8004d00 <HAL_UART_MspInit+0x3e0>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2105      	movs	r1, #5
 8004cd6:	2047      	movs	r0, #71	@ 0x47
 8004cd8:	f001 f989 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004cdc:	2047      	movs	r0, #71	@ 0x47
 8004cde:	f001 f9a2 	bl	8006026 <HAL_NVIC_EnableIRQ>
}
 8004ce2:	bf00      	nop
 8004ce4:	3738      	adds	r7, #56	@ 0x38
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40011400 	.word	0x40011400
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40021800 	.word	0x40021800
 8004cf8:	20000c88 	.word	0x20000c88
 8004cfc:	40026428 	.word	0x40026428
 8004d00:	20000ce8 	.word	0x20000ce8
 8004d04:	400264a0 	.word	0x400264a0

08004d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004d0c:	f003 fbfe 	bl	800850c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <NMI_Handler+0x8>

08004d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <HardFault_Handler+0x4>

08004d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <MemManage_Handler+0x4>

08004d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <BusFault_Handler+0x4>

08004d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <UsageFault_Handler+0x4>

08004d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d46:	f000 f9cb 	bl	80050e0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004d4a:	f007 ff33 	bl	800cbb4 <xTaskGetSchedulerState>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d001      	beq.n	8004d58 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004d54:	f008 fe10 	bl	800d978 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d58:	bf00      	nop
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004d60:	2008      	movs	r0, #8
 8004d62:	f001 ff33 	bl	8006bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8004d66:	4802      	ldr	r0, [pc, #8]	@ (8004d70 <EXTI3_IRQHandler+0x14>)
 8004d68:	f7fd fcc2 	bl	80026f0 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8004d6c:	bf00      	nop
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000868 	.word	0x20000868

08004d74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8004d78:	2010      	movs	r0, #16
 8004d7a:	f001 ff27 	bl	8006bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004d88:	4802      	ldr	r0, [pc, #8]	@ (8004d94 <DMA1_Stream1_IRQHandler+0x10>)
 8004d8a:	f001 faff 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000c28 	.word	0x20000c28

08004d98 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004d9c:	4802      	ldr	r0, [pc, #8]	@ (8004da8 <CAN1_RX0_IRQHandler+0x10>)
 8004d9e:	f000 fe1b 	bl	80059d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000874 	.word	0x20000874

08004dac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004db0:	4802      	ldr	r0, [pc, #8]	@ (8004dbc <USART1_IRQHandler+0x10>)
 8004db2:	f004 ffad 	bl	8009d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000a90 	.word	0x20000a90

08004dc0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004dc4:	4802      	ldr	r0, [pc, #8]	@ (8004dd0 <DMA2_Stream1_IRQHandler+0x10>)
 8004dc6:	f001 fae1 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000c88 	.word	0x20000c88

08004dd4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004dd8:	4802      	ldr	r0, [pc, #8]	@ (8004de4 <DMA2_Stream2_IRQHandler+0x10>)
 8004dda:	f001 fad7 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000bc8 	.word	0x20000bc8

08004de8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004dec:	4802      	ldr	r0, [pc, #8]	@ (8004df8 <CAN2_RX0_IRQHandler+0x10>)
 8004dee:	f000 fdf3 	bl	80059d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	2000089c 	.word	0x2000089c

08004dfc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004e00:	4802      	ldr	r0, [pc, #8]	@ (8004e0c <DMA2_Stream6_IRQHandler+0x10>)
 8004e02:	f001 fac3 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000ce8 	.word	0x20000ce8

08004e10 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004e14:	4802      	ldr	r0, [pc, #8]	@ (8004e20 <DMA2_Stream7_IRQHandler+0x10>)
 8004e16:	f001 fab9 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000b68 	.word	0x20000b68

08004e24 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004e28:	4802      	ldr	r0, [pc, #8]	@ (8004e34 <USART6_IRQHandler+0x10>)
 8004e2a:	f004 ff71 	bl	8009d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000b20 	.word	0x20000b20

08004e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return 1;
 8004e3c:	2301      	movs	r3, #1
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <_kill>:

int _kill(int pid, int sig)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e52:	f009 fe37 	bl	800eac4 <__errno>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2216      	movs	r2, #22
 8004e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_exit>:

void _exit (int status)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e70:	f04f 31ff 	mov.w	r1, #4294967295
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ffe7 	bl	8004e48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e7a:	bf00      	nop
 8004e7c:	e7fd      	b.n	8004e7a <_exit+0x12>

08004e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e00a      	b.n	8004ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e90:	f3af 8000 	nop.w
 8004e94:	4601      	mov	r1, r0
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	60ba      	str	r2, [r7, #8]
 8004e9c:	b2ca      	uxtb	r2, r1
 8004e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	dbf0      	blt.n	8004e90 <_read+0x12>
  }

  return len;
 8004eae:	687b      	ldr	r3, [r7, #4]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e009      	b.n	8004ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	60ba      	str	r2, [r7, #8]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	3301      	adds	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	dbf1      	blt.n	8004eca <_write+0x12>
  }
  return len;
 8004ee6:	687b      	ldr	r3, [r7, #4]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_close>:

int _close(int file)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f18:	605a      	str	r2, [r3, #4]
  return 0;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <_isatty>:

int _isatty(int file)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f30:	2301      	movs	r3, #1
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f60:	4a14      	ldr	r2, [pc, #80]	@ (8004fb4 <_sbrk+0x5c>)
 8004f62:	4b15      	ldr	r3, [pc, #84]	@ (8004fb8 <_sbrk+0x60>)
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f6c:	4b13      	ldr	r3, [pc, #76]	@ (8004fbc <_sbrk+0x64>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f74:	4b11      	ldr	r3, [pc, #68]	@ (8004fbc <_sbrk+0x64>)
 8004f76:	4a12      	ldr	r2, [pc, #72]	@ (8004fc0 <_sbrk+0x68>)
 8004f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f7a:	4b10      	ldr	r3, [pc, #64]	@ (8004fbc <_sbrk+0x64>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d207      	bcs.n	8004f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f88:	f009 fd9c 	bl	800eac4 <__errno>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	220c      	movs	r2, #12
 8004f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295
 8004f96:	e009      	b.n	8004fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f98:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <_sbrk+0x64>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f9e:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <_sbrk+0x64>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	4a05      	ldr	r2, [pc, #20]	@ (8004fbc <_sbrk+0x64>)
 8004fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20020000 	.word	0x20020000
 8004fb8:	00000400 	.word	0x00000400
 8004fbc:	20000dd4 	.word	0x20000dd4
 8004fc0:	20005910 	.word	0x20005910

08004fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fc8:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <SystemInit+0x20>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	4a05      	ldr	r2, [pc, #20]	@ (8004fe4 <SystemInit+0x20>)
 8004fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fec:	480d      	ldr	r0, [pc, #52]	@ (8005024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004fee:	490e      	ldr	r1, [pc, #56]	@ (8005028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800502c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ff4:	e002      	b.n	8004ffc <LoopCopyDataInit>

08004ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ffa:	3304      	adds	r3, #4

08004ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005000:	d3f9      	bcc.n	8004ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005002:	4a0b      	ldr	r2, [pc, #44]	@ (8005030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005004:	4c0b      	ldr	r4, [pc, #44]	@ (8005034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005008:	e001      	b.n	800500e <LoopFillZerobss>

0800500a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800500a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800500c:	3204      	adds	r2, #4

0800500e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800500e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005010:	d3fb      	bcc.n	800500a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005012:	f7ff ffd7 	bl	8004fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005016:	f009 fd5b 	bl	800ead0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800501a:	f7fd fc89 	bl	8002930 <main>
  bx  lr    
 800501e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005028:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 800502c:	08011108 	.word	0x08011108
  ldr r2, =_sbss
 8005030:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8005034:	20005910 	.word	0x20005910

08005038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005038:	e7fe      	b.n	8005038 <ADC_IRQHandler>
	...

0800503c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005040:	4b0e      	ldr	r3, [pc, #56]	@ (800507c <HAL_Init+0x40>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a0d      	ldr	r2, [pc, #52]	@ (800507c <HAL_Init+0x40>)
 8005046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800504a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800504c:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <HAL_Init+0x40>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0a      	ldr	r2, [pc, #40]	@ (800507c <HAL_Init+0x40>)
 8005052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005058:	4b08      	ldr	r3, [pc, #32]	@ (800507c <HAL_Init+0x40>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a07      	ldr	r2, [pc, #28]	@ (800507c <HAL_Init+0x40>)
 800505e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005064:	2003      	movs	r0, #3
 8005066:	f000 ffb7 	bl	8005fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800506a:	200f      	movs	r0, #15
 800506c:	f000 f808 	bl	8005080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005070:	f7ff f964 	bl	800433c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023c00 	.word	0x40023c00

08005080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005088:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <HAL_InitTick+0x54>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b12      	ldr	r3, [pc, #72]	@ (80050d8 <HAL_InitTick+0x58>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005096:	fbb3 f3f1 	udiv	r3, r3, r1
 800509a:	fbb2 f3f3 	udiv	r3, r2, r3
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 ffcf 	bl	8006042 <HAL_SYSTICK_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e00e      	b.n	80050cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b0f      	cmp	r3, #15
 80050b2:	d80a      	bhi.n	80050ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050b4:	2200      	movs	r2, #0
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	f000 ff97 	bl	8005fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050c0:	4a06      	ldr	r2, [pc, #24]	@ (80050dc <HAL_InitTick+0x5c>)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e000      	b.n	80050cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000084 	.word	0x20000084
 80050d8:	2000008c 	.word	0x2000008c
 80050dc:	20000088 	.word	0x20000088

080050e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050e4:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <HAL_IncTick+0x20>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_IncTick+0x24>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4413      	add	r3, r2
 80050f0:	4a04      	ldr	r2, [pc, #16]	@ (8005104 <HAL_IncTick+0x24>)
 80050f2:	6013      	str	r3, [r2, #0]
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	2000008c 	.word	0x2000008c
 8005104:	20000dd8 	.word	0x20000dd8

08005108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return uwTick;
 800510c:	4b03      	ldr	r3, [pc, #12]	@ (800511c <HAL_GetTick+0x14>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000dd8 	.word	0x20000dd8

08005120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005128:	f7ff ffee 	bl	8005108 <HAL_GetTick>
 800512c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d005      	beq.n	8005146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800513a:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <HAL_Delay+0x44>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005146:	bf00      	nop
 8005148:	f7ff ffde 	bl	8005108 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	429a      	cmp	r2, r3
 8005156:	d8f7      	bhi.n	8005148 <HAL_Delay+0x28>
  {
  }
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	2000008c 	.word	0x2000008c

08005168 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0ed      	b.n	8005356 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff f904 	bl	8004394 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800519c:	f7ff ffb4 	bl	8005108 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051a2:	e012      	b.n	80051ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051a4:	f7ff ffb0 	bl	8005108 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b0a      	cmp	r3, #10
 80051b0:	d90b      	bls.n	80051ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2205      	movs	r2, #5
 80051c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e0c5      	b.n	8005356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0e5      	beq.n	80051a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0202 	bic.w	r2, r2, #2
 80051e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051e8:	f7ff ff8e 	bl	8005108 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051ee:	e012      	b.n	8005216 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051f0:	f7ff ff8a 	bl	8005108 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b0a      	cmp	r3, #10
 80051fc:	d90b      	bls.n	8005216 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2205      	movs	r2, #5
 800520e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e09f      	b.n	8005356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	7e1b      	ldrb	r3, [r3, #24]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d108      	bne.n	800523e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	e007      	b.n	800524e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800524c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	7e5b      	ldrb	r3, [r3, #25]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d108      	bne.n	8005268 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e007      	b.n	8005278 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005276:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	7e9b      	ldrb	r3, [r3, #26]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d108      	bne.n	8005292 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0220 	orr.w	r2, r2, #32
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e007      	b.n	80052a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0220 	bic.w	r2, r2, #32
 80052a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	7edb      	ldrb	r3, [r3, #27]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d108      	bne.n	80052bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0210 	bic.w	r2, r2, #16
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e007      	b.n	80052cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0210 	orr.w	r2, r2, #16
 80052ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7f1b      	ldrb	r3, [r3, #28]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d108      	bne.n	80052e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0208 	orr.w	r2, r2, #8
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e007      	b.n	80052f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0208 	bic.w	r2, r2, #8
 80052f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7f5b      	ldrb	r3, [r3, #29]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d108      	bne.n	8005310 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0204 	orr.w	r2, r2, #4
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e007      	b.n	8005320 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0204 	bic.w	r2, r2, #4
 800531e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	ea42 0103 	orr.w	r1, r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	1e5a      	subs	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005376:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d003      	beq.n	8005386 <HAL_CAN_ConfigFilter+0x26>
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	2b02      	cmp	r3, #2
 8005382:	f040 80be 	bne.w	8005502 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005386:	4b65      	ldr	r3, [pc, #404]	@ (800551c <HAL_CAN_ConfigFilter+0x1bc>)
 8005388:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005390:	f043 0201 	orr.w	r2, r3, #1
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80053a0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	431a      	orrs	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	2201      	movs	r2, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	401a      	ands	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d123      	bne.n	8005430 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800540a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3248      	adds	r2, #72	@ 0x48
 8005410:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005424:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005426:	6979      	ldr	r1, [r7, #20]
 8005428:	3348      	adds	r3, #72	@ 0x48
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	440b      	add	r3, r1
 800542e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d122      	bne.n	800547e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	431a      	orrs	r2, r3
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005458:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	3248      	adds	r2, #72	@ 0x48
 800545e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005472:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005474:	6979      	ldr	r1, [r7, #20]
 8005476:	3348      	adds	r3, #72	@ 0x48
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	440b      	add	r3, r1
 800547c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	43db      	mvns	r3, r3
 8005490:	401a      	ands	r2, r3
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005498:	e007      	b.n	80054aa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	401a      	ands	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80054c4:	e007      	b.n	80054d6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d107      	bne.n	80054ee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80054f4:	f023 0201 	bic.w	r2, r3, #1
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e006      	b.n	8005510 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	40006400 	.word	0x40006400

08005520 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d12e      	bne.n	8005592 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800554c:	f7ff fddc 	bl	8005108 <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005552:	e012      	b.n	800557a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005554:	f7ff fdd8 	bl	8005108 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b0a      	cmp	r3, #10
 8005560:	d90b      	bls.n	800557a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005566:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2205      	movs	r2, #5
 8005572:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e012      	b.n	80055a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e5      	bne.n	8005554 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	e006      	b.n	80055a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	@ 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80055c6:	7ffb      	ldrb	r3, [r7, #31]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d003      	beq.n	80055d4 <HAL_CAN_AddTxMessage+0x2c>
 80055cc:	7ffb      	ldrb	r3, [r7, #31]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	f040 80ad 	bne.w	800572e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8095 	beq.w	800571e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	0e1b      	lsrs	r3, r3, #24
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80055fe:	2201      	movs	r2, #1
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	409a      	lsls	r2, r3
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10d      	bne.n	800562c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	6809      	ldr	r1, [r1, #0]
 800561e:	431a      	orrs	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	3318      	adds	r3, #24
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	440b      	add	r3, r1
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e00f      	b.n	800564c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005636:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005640:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	3318      	adds	r3, #24
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	440b      	add	r3, r1
 800564a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	3318      	adds	r3, #24
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	440b      	add	r3, r1
 800565c:	3304      	adds	r3, #4
 800565e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	7d1b      	ldrb	r3, [r3, #20]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d111      	bne.n	800568c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3318      	adds	r3, #24
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	6811      	ldr	r1, [r2, #0]
 800567c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	3318      	adds	r3, #24
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	440b      	add	r3, r1
 8005688:	3304      	adds	r3, #4
 800568a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3307      	adds	r3, #7
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	061a      	lsls	r2, r3, #24
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3306      	adds	r3, #6
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3305      	adds	r3, #5
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	4313      	orrs	r3, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	3204      	adds	r2, #4
 80056ac:	7812      	ldrb	r2, [r2, #0]
 80056ae:	4610      	mov	r0, r2
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	6811      	ldr	r1, [r2, #0]
 80056b4:	ea43 0200 	orr.w	r2, r3, r0
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	440b      	add	r3, r1
 80056be:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80056c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3303      	adds	r3, #3
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	061a      	lsls	r2, r3, #24
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3302      	adds	r3, #2
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	041b      	lsls	r3, r3, #16
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3301      	adds	r3, #1
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	021b      	lsls	r3, r3, #8
 80056de:	4313      	orrs	r3, r2
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	4610      	mov	r0, r2
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	6811      	ldr	r1, [r2, #0]
 80056ea:	ea43 0200 	orr.w	r2, r3, r0
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	440b      	add	r3, r1
 80056f4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80056f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	3318      	adds	r3, #24
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4413      	add	r3, r2
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	6811      	ldr	r1, [r2, #0]
 800570c:	f043 0201 	orr.w	r2, r3, #1
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3318      	adds	r3, #24
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	440b      	add	r3, r1
 8005718:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e00e      	b.n	800573c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005722:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e006      	b.n	800573c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
  }
}
 800573c:	4618      	mov	r0, r3
 800573e:	3724      	adds	r7, #36	@ 0x24
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d003      	beq.n	800576c <HAL_CAN_GetRxMessage+0x24>
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b02      	cmp	r3, #2
 8005768:	f040 8103 	bne.w	8005972 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10e      	bne.n	8005790 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d116      	bne.n	80057ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0f7      	b.n	8005980 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d107      	bne.n	80057ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e0e8      	b.n	8005980 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	331b      	adds	r3, #27
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	4413      	add	r3, r2
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0204 	and.w	r2, r3, #4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10c      	bne.n	80057e6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	331b      	adds	r3, #27
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	4413      	add	r3, r2
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	0d5b      	lsrs	r3, r3, #21
 80057dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e00b      	b.n	80057fe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	331b      	adds	r3, #27
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	4413      	add	r3, r2
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	08db      	lsrs	r3, r3, #3
 80057f6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	331b      	adds	r3, #27
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4413      	add	r3, r2
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0202 	and.w	r2, r3, #2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	331b      	adds	r3, #27
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	4413      	add	r3, r2
 8005820:	3304      	adds	r3, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2208      	movs	r2, #8
 8005830:	611a      	str	r2, [r3, #16]
 8005832:	e00b      	b.n	800584c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	331b      	adds	r3, #27
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	4413      	add	r3, r2
 8005840:	3304      	adds	r3, #4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	331b      	adds	r3, #27
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	4413      	add	r3, r2
 8005858:	3304      	adds	r3, #4
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	b2da      	uxtb	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	331b      	adds	r3, #27
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4413      	add	r3, r2
 8005870:	3304      	adds	r3, #4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	b29a      	uxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	4413      	add	r3, r2
 8005886:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	4413      	add	r3, r2
 800589c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	0a1a      	lsrs	r2, r3, #8
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	0c1a      	lsrs	r2, r3, #16
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	3302      	adds	r3, #2
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	0e1a      	lsrs	r2, r3, #24
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	3303      	adds	r3, #3
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	3304      	adds	r3, #4
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	4413      	add	r3, r2
 8005902:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0a1a      	lsrs	r2, r3, #8
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	3305      	adds	r3, #5
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	4413      	add	r3, r2
 800591c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	0c1a      	lsrs	r2, r3, #16
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	3306      	adds	r3, #6
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	4413      	add	r3, r2
 8005936:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	0e1a      	lsrs	r2, r3, #24
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	3307      	adds	r3, #7
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d108      	bne.n	800595e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0220 	orr.w	r2, r2, #32
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	e007      	b.n	800596e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0220 	orr.w	r2, r2, #32
 800596c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	e006      	b.n	8005980 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005976:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
  }
}
 8005980:	4618      	mov	r0, r3
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800599c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d002      	beq.n	80059aa <HAL_CAN_ActivateNotification+0x1e>
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d109      	bne.n	80059be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6959      	ldr	r1, [r3, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e006      	b.n	80059cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
  }
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	@ 0x28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d07c      	beq.n	8005b18 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d023      	beq.n	8005a70 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f983 	bl	8005d46 <HAL_CAN_TxMailbox0CompleteCallback>
 8005a40:	e016      	b.n	8005a70 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a54:	e00c      	b.n	8005a70 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a68:	e002      	b.n	8005a70 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f989 	bl	8005d82 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d024      	beq.n	8005ac4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f963 	bl	8005d5a <HAL_CAN_TxMailbox1CompleteCallback>
 8005a94:	e016      	b.n	8005ac4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa8:	e00c      	b.n	8005ac4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005abc:	e002      	b.n	8005ac4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f969 	bl	8005d96 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d024      	beq.n	8005b18 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005ad6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f943 	bl	8005d6e <HAL_CAN_TxMailbox2CompleteCallback>
 8005ae8:	e016      	b.n	8005b18 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afc:	e00c      	b.n	8005b18 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d004      	beq.n	8005b12 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b10:	e002      	b.n	8005b18 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f949 	bl	8005daa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2210      	movs	r2, #16
 8005b3a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f003 0308 	and.w	r3, r3, #8
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d006      	beq.n	8005b5e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2208      	movs	r2, #8
 8005b56:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f930 	bl	8005dbe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb fce0 	bl	800153c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d006      	beq.n	8005bc2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2208      	movs	r2, #8
 8005bba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f912 	bl	8005de6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d009      	beq.n	8005be0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8f9 	bl	8005dd2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d006      	beq.n	8005c02 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f8fc 	bl	8005dfa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d006      	beq.n	8005c24 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f8f5 	bl	8005e0e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d07b      	beq.n	8005d26 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d072      	beq.n	8005d1e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	f043 0302 	orr.w	r3, r3, #2
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	f043 0304 	orr.w	r3, r3, #4
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d043      	beq.n	8005d1e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d03e      	beq.n	8005d1e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ca6:	2b60      	cmp	r3, #96	@ 0x60
 8005ca8:	d02b      	beq.n	8005d02 <HAL_CAN_IRQHandler+0x32a>
 8005caa:	2b60      	cmp	r3, #96	@ 0x60
 8005cac:	d82e      	bhi.n	8005d0c <HAL_CAN_IRQHandler+0x334>
 8005cae:	2b50      	cmp	r3, #80	@ 0x50
 8005cb0:	d022      	beq.n	8005cf8 <HAL_CAN_IRQHandler+0x320>
 8005cb2:	2b50      	cmp	r3, #80	@ 0x50
 8005cb4:	d82a      	bhi.n	8005d0c <HAL_CAN_IRQHandler+0x334>
 8005cb6:	2b40      	cmp	r3, #64	@ 0x40
 8005cb8:	d019      	beq.n	8005cee <HAL_CAN_IRQHandler+0x316>
 8005cba:	2b40      	cmp	r3, #64	@ 0x40
 8005cbc:	d826      	bhi.n	8005d0c <HAL_CAN_IRQHandler+0x334>
 8005cbe:	2b30      	cmp	r3, #48	@ 0x30
 8005cc0:	d010      	beq.n	8005ce4 <HAL_CAN_IRQHandler+0x30c>
 8005cc2:	2b30      	cmp	r3, #48	@ 0x30
 8005cc4:	d822      	bhi.n	8005d0c <HAL_CAN_IRQHandler+0x334>
 8005cc6:	2b10      	cmp	r3, #16
 8005cc8:	d002      	beq.n	8005cd0 <HAL_CAN_IRQHandler+0x2f8>
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d005      	beq.n	8005cda <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005cce:	e01d      	b.n	8005d0c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	f043 0308 	orr.w	r3, r3, #8
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005cd8:	e019      	b.n	8005d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	f043 0310 	orr.w	r3, r3, #16
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005ce2:	e014      	b.n	8005d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	f043 0320 	orr.w	r3, r3, #32
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005cec:	e00f      	b.n	8005d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005cf6:	e00a      	b.n	8005d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d00:	e005      	b.n	8005d0e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005d0a:	e000      	b.n	8005d0e <HAL_CAN_IRQHandler+0x336>
            break;
 8005d0c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d1c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2204      	movs	r2, #4
 8005d24:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f872 	bl	8005e22 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005d3e:	bf00      	nop
 8005d40:	3728      	adds	r7, #40	@ 0x28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e48:	4b0c      	ldr	r3, [pc, #48]	@ (8005e7c <__NVIC_SetPriorityGrouping+0x44>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e54:	4013      	ands	r3, r2
 8005e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e6a:	4a04      	ldr	r2, [pc, #16]	@ (8005e7c <__NVIC_SetPriorityGrouping+0x44>)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	60d3      	str	r3, [r2, #12]
}
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	e000ed00 	.word	0xe000ed00

08005e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e84:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <__NVIC_GetPriorityGrouping+0x18>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	f003 0307 	and.w	r3, r3, #7
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	e000ed00 	.word	0xe000ed00

08005e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	db0b      	blt.n	8005ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	f003 021f 	and.w	r2, r3, #31
 8005eb4:	4907      	ldr	r1, [pc, #28]	@ (8005ed4 <__NVIC_EnableIRQ+0x38>)
 8005eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8005ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	e000e100 	.word	0xe000e100

08005ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6039      	str	r1, [r7, #0]
 8005ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db0a      	blt.n	8005f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	490c      	ldr	r1, [pc, #48]	@ (8005f24 <__NVIC_SetPriority+0x4c>)
 8005ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef6:	0112      	lsls	r2, r2, #4
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	440b      	add	r3, r1
 8005efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f00:	e00a      	b.n	8005f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	4908      	ldr	r1, [pc, #32]	@ (8005f28 <__NVIC_SetPriority+0x50>)
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	3b04      	subs	r3, #4
 8005f10:	0112      	lsls	r2, r2, #4
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	440b      	add	r3, r1
 8005f16:	761a      	strb	r2, [r3, #24]
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	e000e100 	.word	0xe000e100
 8005f28:	e000ed00 	.word	0xe000ed00

08005f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b089      	sub	sp, #36	@ 0x24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f1c3 0307 	rsb	r3, r3, #7
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	bf28      	it	cs
 8005f4a:	2304      	movcs	r3, #4
 8005f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3304      	adds	r3, #4
 8005f52:	2b06      	cmp	r3, #6
 8005f54:	d902      	bls.n	8005f5c <NVIC_EncodePriority+0x30>
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3b03      	subs	r3, #3
 8005f5a:	e000      	b.n	8005f5e <NVIC_EncodePriority+0x32>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43da      	mvns	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	401a      	ands	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f74:	f04f 31ff 	mov.w	r1, #4294967295
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7e:	43d9      	mvns	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f84:	4313      	orrs	r3, r2
         );
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3724      	adds	r7, #36	@ 0x24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
	...

08005f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fa4:	d301      	bcc.n	8005faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e00f      	b.n	8005fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005faa:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd4 <SysTick_Config+0x40>)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fb2:	210f      	movs	r1, #15
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	f7ff ff8e 	bl	8005ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fbc:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <SysTick_Config+0x40>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fc2:	4b04      	ldr	r3, [pc, #16]	@ (8005fd4 <SysTick_Config+0x40>)
 8005fc4:	2207      	movs	r2, #7
 8005fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	e000e010 	.word	0xe000e010

08005fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff29 	bl	8005e38 <__NVIC_SetPriorityGrouping>
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006000:	f7ff ff3e 	bl	8005e80 <__NVIC_GetPriorityGrouping>
 8006004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	6978      	ldr	r0, [r7, #20]
 800600c:	f7ff ff8e 	bl	8005f2c <NVIC_EncodePriority>
 8006010:	4602      	mov	r2, r0
 8006012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006016:	4611      	mov	r1, r2
 8006018:	4618      	mov	r0, r3
 800601a:	f7ff ff5d 	bl	8005ed8 <__NVIC_SetPriority>
}
 800601e:	bf00      	nop
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	4603      	mov	r3, r0
 800602e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff31 	bl	8005e9c <__NVIC_EnableIRQ>
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ffa2 	bl	8005f94 <SysTick_Config>
 8006050:	4603      	mov	r3, r0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006068:	f7ff f84e 	bl	8005108 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e099      	b.n	80061ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006098:	e00f      	b.n	80060ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800609a:	f7ff f835 	bl	8005108 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d908      	bls.n	80060ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2203      	movs	r2, #3
 80060b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e078      	b.n	80061ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e8      	bne.n	800609a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4b38      	ldr	r3, [pc, #224]	@ (80061b4 <HAL_DMA_Init+0x158>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	2b04      	cmp	r3, #4
 8006112:	d107      	bne.n	8006124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611c:	4313      	orrs	r3, r2
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f023 0307 	bic.w	r3, r3, #7
 800613a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	2b04      	cmp	r3, #4
 800614c:	d117      	bne.n	800617e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00e      	beq.n	800617e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fb01 	bl	8006768 <DMA_CheckFifoParam>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d008      	beq.n	800617e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2240      	movs	r2, #64	@ 0x40
 8006170:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800617a:	2301      	movs	r3, #1
 800617c:	e016      	b.n	80061ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fab8 	bl	80066fc <DMA_CalcBaseAndBitshift>
 800618c:	4603      	mov	r3, r0
 800618e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006194:	223f      	movs	r2, #63	@ 0x3f
 8006196:	409a      	lsls	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	f010803f 	.word	0xf010803f

080061b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_DMA_Start_IT+0x26>
 80061da:	2302      	movs	r3, #2
 80061dc:	e040      	b.n	8006260 <HAL_DMA_Start_IT+0xa8>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d12f      	bne.n	8006252 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 fa4a 	bl	80066a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006210:	223f      	movs	r2, #63	@ 0x3f
 8006212:	409a      	lsls	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0216 	orr.w	r2, r2, #22
 8006226:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0208 	orr.w	r2, r2, #8
 800623e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e005      	b.n	800625e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800625a:	2302      	movs	r3, #2
 800625c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800625e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006276:	f7fe ff47 	bl	8005108 <HAL_GetTick>
 800627a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d008      	beq.n	800629a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2280      	movs	r2, #128	@ 0x80
 800628c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e052      	b.n	8006340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0216 	bic.w	r2, r2, #22
 80062a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695a      	ldr	r2, [r3, #20]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <HAL_DMA_Abort+0x62>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0208 	bic.w	r2, r2, #8
 80062d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ea:	e013      	b.n	8006314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062ec:	f7fe ff0c 	bl	8005108 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	d90c      	bls.n	8006314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2203      	movs	r2, #3
 8006304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e015      	b.n	8006340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e4      	bne.n	80062ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006326:	223f      	movs	r2, #63	@ 0x3f
 8006328:	409a      	lsls	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d004      	beq.n	8006366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2280      	movs	r2, #128	@ 0x80
 8006360:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e00c      	b.n	8006380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2205      	movs	r2, #5
 800636a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006398:	4b8e      	ldr	r3, [pc, #568]	@ (80065d4 <HAL_DMA_IRQHandler+0x248>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a8e      	ldr	r2, [pc, #568]	@ (80065d8 <HAL_DMA_IRQHandler+0x24c>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	0a9b      	lsrs	r3, r3, #10
 80063a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b6:	2208      	movs	r2, #8
 80063b8:	409a      	lsls	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4013      	ands	r3, r2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01a      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d013      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0204 	bic.w	r2, r2, #4
 80063de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063e4:	2208      	movs	r2, #8
 80063e6:	409a      	lsls	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f0:	f043 0201 	orr.w	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fc:	2201      	movs	r2, #1
 80063fe:	409a      	lsls	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d012      	beq.n	800642e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641a:	2201      	movs	r2, #1
 800641c:	409a      	lsls	r2, r3
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006426:	f043 0202 	orr.w	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006432:	2204      	movs	r2, #4
 8006434:	409a      	lsls	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d012      	beq.n	8006464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006450:	2204      	movs	r2, #4
 8006452:	409a      	lsls	r2, r3
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645c:	f043 0204 	orr.w	r2, r3, #4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006468:	2210      	movs	r2, #16
 800646a:	409a      	lsls	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4013      	ands	r3, r2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d043      	beq.n	80064fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d03c      	beq.n	80064fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006486:	2210      	movs	r2, #16
 8006488:	409a      	lsls	r2, r3
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d018      	beq.n	80064ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d108      	bne.n	80064bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d024      	beq.n	80064fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
 80064ba:	e01f      	b.n	80064fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01b      	beq.n	80064fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
 80064cc:	e016      	b.n	80064fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0208 	bic.w	r2, r2, #8
 80064ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006500:	2220      	movs	r2, #32
 8006502:	409a      	lsls	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4013      	ands	r3, r2
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 808f 	beq.w	800662c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8087 	beq.w	800662c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006522:	2220      	movs	r2, #32
 8006524:	409a      	lsls	r2, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b05      	cmp	r3, #5
 8006534:	d136      	bne.n	80065a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0216 	bic.w	r2, r2, #22
 8006544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <HAL_DMA_IRQHandler+0x1da>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0208 	bic.w	r2, r2, #8
 8006574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657a:	223f      	movs	r2, #63	@ 0x3f
 800657c:	409a      	lsls	r2, r3
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006596:	2b00      	cmp	r3, #0
 8006598:	d07e      	beq.n	8006698 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
        }
        return;
 80065a2:	e079      	b.n	8006698 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01d      	beq.n	80065ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10d      	bne.n	80065dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d031      	beq.n	800662c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
 80065d0:	e02c      	b.n	800662c <HAL_DMA_IRQHandler+0x2a0>
 80065d2:	bf00      	nop
 80065d4:	20000084 	.word	0x20000084
 80065d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d023      	beq.n	800662c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
 80065ec:	e01e      	b.n	800662c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10f      	bne.n	800661c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0210 	bic.w	r2, r2, #16
 800660a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006630:	2b00      	cmp	r3, #0
 8006632:	d032      	beq.n	800669a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d022      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2205      	movs	r2, #5
 8006644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	3301      	adds	r3, #1
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	d307      	bcc.n	8006674 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f2      	bne.n	8006658 <HAL_DMA_IRQHandler+0x2cc>
 8006672:	e000      	b.n	8006676 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006674:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
 8006696:	e000      	b.n	800669a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006698:	bf00      	nop
    }
  }
}
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80066bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b40      	cmp	r3, #64	@ 0x40
 80066cc:	d108      	bne.n	80066e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80066de:	e007      	b.n	80066f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	60da      	str	r2, [r3, #12]
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	3b10      	subs	r3, #16
 800670c:	4a14      	ldr	r2, [pc, #80]	@ (8006760 <DMA_CalcBaseAndBitshift+0x64>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	091b      	lsrs	r3, r3, #4
 8006714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006716:	4a13      	ldr	r2, [pc, #76]	@ (8006764 <DMA_CalcBaseAndBitshift+0x68>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b03      	cmp	r3, #3
 8006728:	d909      	bls.n	800673e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	659a      	str	r2, [r3, #88]	@ 0x58
 800673c:	e007      	b.n	800674e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	aaaaaaab 	.word	0xaaaaaaab
 8006764:	08010d80 	.word	0x08010d80

08006768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d11f      	bne.n	80067c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d856      	bhi.n	8006836 <DMA_CheckFifoParam+0xce>
 8006788:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <DMA_CheckFifoParam+0x28>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067b3 	.word	0x080067b3
 8006798:	080067a1 	.word	0x080067a1
 800679c:	08006837 	.word	0x08006837
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d046      	beq.n	800683a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067b0:	e043      	b.n	800683a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067ba:	d140      	bne.n	800683e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067c0:	e03d      	b.n	800683e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ca:	d121      	bne.n	8006810 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d837      	bhi.n	8006842 <DMA_CheckFifoParam+0xda>
 80067d2:	a201      	add	r2, pc, #4	@ (adr r2, 80067d8 <DMA_CheckFifoParam+0x70>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	080067ef 	.word	0x080067ef
 80067e0:	080067e9 	.word	0x080067e9
 80067e4:	08006801 	.word	0x08006801
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
      break;
 80067ec:	e030      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d025      	beq.n	8006846 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067fe:	e022      	b.n	8006846 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006808:	d11f      	bne.n	800684a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800680e:	e01c      	b.n	800684a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b02      	cmp	r3, #2
 8006814:	d903      	bls.n	800681e <DMA_CheckFifoParam+0xb6>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d003      	beq.n	8006824 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800681c:	e018      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
      break;
 8006822:	e015      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006828:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00e      	beq.n	800684e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
      break;
 8006834:	e00b      	b.n	800684e <DMA_CheckFifoParam+0xe6>
      break;
 8006836:	bf00      	nop
 8006838:	e00a      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
      break;
 800683a:	bf00      	nop
 800683c:	e008      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
      break;
 800683e:	bf00      	nop
 8006840:	e006      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
      break;
 8006842:	bf00      	nop
 8006844:	e004      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
      break;
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
      break;   
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <DMA_CheckFifoParam+0xe8>
      break;
 800684e:	bf00      	nop
    }
  } 
  
  return status; 
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop

08006860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006860:	b480      	push	{r7}
 8006862:	b089      	sub	sp, #36	@ 0x24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006872:	2300      	movs	r3, #0
 8006874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	e16b      	b.n	8006b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800687c:	2201      	movs	r2, #1
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4013      	ands	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	429a      	cmp	r2, r3
 8006896:	f040 815a 	bne.w	8006b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d005      	beq.n	80068b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d130      	bne.n	8006914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	2203      	movs	r2, #3
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	43db      	mvns	r3, r3
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	4013      	ands	r3, r2
 80068c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	4313      	orrs	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068e8:	2201      	movs	r2, #1
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	43db      	mvns	r3, r3
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	4013      	ands	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	091b      	lsrs	r3, r3, #4
 80068fe:	f003 0201 	and.w	r2, r3, #1
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4313      	orrs	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	2b03      	cmp	r3, #3
 800691e:	d017      	beq.n	8006950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	2203      	movs	r2, #3
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	43db      	mvns	r3, r3
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	4013      	ands	r3, r2
 8006936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	fa02 f303 	lsl.w	r3, r2, r3
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	4313      	orrs	r3, r2
 8006948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d123      	bne.n	80069a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	08da      	lsrs	r2, r3, #3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3208      	adds	r2, #8
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	220f      	movs	r2, #15
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	43db      	mvns	r3, r3
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	4013      	ands	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	fa02 f303 	lsl.w	r3, r2, r3
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	4313      	orrs	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	08da      	lsrs	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3208      	adds	r2, #8
 800699e:	69b9      	ldr	r1, [r7, #24]
 80069a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	2203      	movs	r2, #3
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	43db      	mvns	r3, r3
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	4013      	ands	r3, r2
 80069ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f003 0203 	and.w	r2, r3, #3
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80b4 	beq.w	8006b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	4b60      	ldr	r3, [pc, #384]	@ (8006b6c <HAL_GPIO_Init+0x30c>)
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	4a5f      	ldr	r2, [pc, #380]	@ (8006b6c <HAL_GPIO_Init+0x30c>)
 80069f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80069f6:	4b5d      	ldr	r3, [pc, #372]	@ (8006b6c <HAL_GPIO_Init+0x30c>)
 80069f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a02:	4a5b      	ldr	r2, [pc, #364]	@ (8006b70 <HAL_GPIO_Init+0x310>)
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	089b      	lsrs	r3, r3, #2
 8006a08:	3302      	adds	r3, #2
 8006a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	220f      	movs	r2, #15
 8006a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4013      	ands	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a52      	ldr	r2, [pc, #328]	@ (8006b74 <HAL_GPIO_Init+0x314>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d02b      	beq.n	8006a86 <HAL_GPIO_Init+0x226>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a51      	ldr	r2, [pc, #324]	@ (8006b78 <HAL_GPIO_Init+0x318>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d025      	beq.n	8006a82 <HAL_GPIO_Init+0x222>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a50      	ldr	r2, [pc, #320]	@ (8006b7c <HAL_GPIO_Init+0x31c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01f      	beq.n	8006a7e <HAL_GPIO_Init+0x21e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a4f      	ldr	r2, [pc, #316]	@ (8006b80 <HAL_GPIO_Init+0x320>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d019      	beq.n	8006a7a <HAL_GPIO_Init+0x21a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a4e      	ldr	r2, [pc, #312]	@ (8006b84 <HAL_GPIO_Init+0x324>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_GPIO_Init+0x216>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a4d      	ldr	r2, [pc, #308]	@ (8006b88 <HAL_GPIO_Init+0x328>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00d      	beq.n	8006a72 <HAL_GPIO_Init+0x212>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a4c      	ldr	r2, [pc, #304]	@ (8006b8c <HAL_GPIO_Init+0x32c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d007      	beq.n	8006a6e <HAL_GPIO_Init+0x20e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a4b      	ldr	r2, [pc, #300]	@ (8006b90 <HAL_GPIO_Init+0x330>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d101      	bne.n	8006a6a <HAL_GPIO_Init+0x20a>
 8006a66:	2307      	movs	r3, #7
 8006a68:	e00e      	b.n	8006a88 <HAL_GPIO_Init+0x228>
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	e00c      	b.n	8006a88 <HAL_GPIO_Init+0x228>
 8006a6e:	2306      	movs	r3, #6
 8006a70:	e00a      	b.n	8006a88 <HAL_GPIO_Init+0x228>
 8006a72:	2305      	movs	r3, #5
 8006a74:	e008      	b.n	8006a88 <HAL_GPIO_Init+0x228>
 8006a76:	2304      	movs	r3, #4
 8006a78:	e006      	b.n	8006a88 <HAL_GPIO_Init+0x228>
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e004      	b.n	8006a88 <HAL_GPIO_Init+0x228>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e002      	b.n	8006a88 <HAL_GPIO_Init+0x228>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_GPIO_Init+0x228>
 8006a86:	2300      	movs	r3, #0
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	f002 0203 	and.w	r2, r2, #3
 8006a8e:	0092      	lsls	r2, r2, #2
 8006a90:	4093      	lsls	r3, r2
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a98:	4935      	ldr	r1, [pc, #212]	@ (8006b70 <HAL_GPIO_Init+0x310>)
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8006b94 <HAL_GPIO_Init+0x334>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006aca:	4a32      	ldr	r2, [pc, #200]	@ (8006b94 <HAL_GPIO_Init+0x334>)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ad0:	4b30      	ldr	r3, [pc, #192]	@ (8006b94 <HAL_GPIO_Init+0x334>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4013      	ands	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006af4:	4a27      	ldr	r2, [pc, #156]	@ (8006b94 <HAL_GPIO_Init+0x334>)
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006afa:	4b26      	ldr	r3, [pc, #152]	@ (8006b94 <HAL_GPIO_Init+0x334>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4013      	ands	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8006b94 <HAL_GPIO_Init+0x334>)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b24:	4b1b      	ldr	r3, [pc, #108]	@ (8006b94 <HAL_GPIO_Init+0x334>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	4013      	ands	r3, r2
 8006b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b48:	4a12      	ldr	r2, [pc, #72]	@ (8006b94 <HAL_GPIO_Init+0x334>)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	3301      	adds	r3, #1
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	f67f ae90 	bls.w	800687c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	3724      	adds	r7, #36	@ 0x24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40013800 	.word	0x40013800
 8006b74:	40020000 	.word	0x40020000
 8006b78:	40020400 	.word	0x40020400
 8006b7c:	40020800 	.word	0x40020800
 8006b80:	40020c00 	.word	0x40020c00
 8006b84:	40021000 	.word	0x40021000
 8006b88:	40021400 	.word	0x40021400
 8006b8c:	40021800 	.word	0x40021800
 8006b90:	40021c00 	.word	0x40021c00
 8006b94:	40013c00 	.word	0x40013c00

08006b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ba8:	787b      	ldrb	r3, [r7, #1]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bae:	887a      	ldrh	r2, [r7, #2]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006bb4:	e003      	b.n	8006bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bb6:	887b      	ldrh	r3, [r7, #2]
 8006bb8:	041a      	lsls	r2, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	619a      	str	r2, [r3, #24]
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
	...

08006bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006bd6:	4b08      	ldr	r3, [pc, #32]	@ (8006bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d006      	beq.n	8006bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006be2:	4a05      	ldr	r2, [pc, #20]	@ (8006bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fb fcd8 	bl	80025a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40013c00 	.word	0x40013c00

08006bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e12b      	b.n	8006e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fd fc66 	bl	80044f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2224      	movs	r2, #36	@ 0x24
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0201 	bic.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c60:	f001 fc2c 	bl	80084bc <HAL_RCC_GetPCLK1Freq>
 8006c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4a81      	ldr	r2, [pc, #516]	@ (8006e70 <HAL_I2C_Init+0x274>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d807      	bhi.n	8006c80 <HAL_I2C_Init+0x84>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a80      	ldr	r2, [pc, #512]	@ (8006e74 <HAL_I2C_Init+0x278>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	bf94      	ite	ls
 8006c78:	2301      	movls	r3, #1
 8006c7a:	2300      	movhi	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	e006      	b.n	8006c8e <HAL_I2C_Init+0x92>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a7d      	ldr	r2, [pc, #500]	@ (8006e78 <HAL_I2C_Init+0x27c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	bf94      	ite	ls
 8006c88:	2301      	movls	r3, #1
 8006c8a:	2300      	movhi	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e0e7      	b.n	8006e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4a78      	ldr	r2, [pc, #480]	@ (8006e7c <HAL_I2C_Init+0x280>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	0c9b      	lsrs	r3, r3, #18
 8006ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8006e70 <HAL_I2C_Init+0x274>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d802      	bhi.n	8006cd0 <HAL_I2C_Init+0xd4>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	e009      	b.n	8006ce4 <HAL_I2C_Init+0xe8>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006cd6:	fb02 f303 	mul.w	r3, r2, r3
 8006cda:	4a69      	ldr	r2, [pc, #420]	@ (8006e80 <HAL_I2C_Init+0x284>)
 8006cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce0:	099b      	lsrs	r3, r3, #6
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006cf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	495c      	ldr	r1, [pc, #368]	@ (8006e70 <HAL_I2C_Init+0x274>)
 8006d00:	428b      	cmp	r3, r1
 8006d02:	d819      	bhi.n	8006d38 <HAL_I2C_Init+0x13c>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	1e59      	subs	r1, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d18:	400b      	ands	r3, r1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <HAL_I2C_Init+0x138>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	1e59      	subs	r1, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d32:	e051      	b.n	8006dd8 <HAL_I2C_Init+0x1dc>
 8006d34:	2304      	movs	r3, #4
 8006d36:	e04f      	b.n	8006dd8 <HAL_I2C_Init+0x1dc>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d111      	bne.n	8006d64 <HAL_I2C_Init+0x168>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1e58      	subs	r0, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6859      	ldr	r1, [r3, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	440b      	add	r3, r1
 8006d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d52:	3301      	adds	r3, #1
 8006d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2301      	moveq	r3, #1
 8006d5e:	2300      	movne	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	e012      	b.n	8006d8a <HAL_I2C_Init+0x18e>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	1e58      	subs	r0, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6859      	ldr	r1, [r3, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	0099      	lsls	r1, r3, #2
 8006d74:	440b      	add	r3, r1
 8006d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <HAL_I2C_Init+0x196>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e022      	b.n	8006dd8 <HAL_I2C_Init+0x1dc>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10e      	bne.n	8006db8 <HAL_I2C_Init+0x1bc>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1e58      	subs	r0, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6859      	ldr	r1, [r3, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	440b      	add	r3, r1
 8006da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dac:	3301      	adds	r3, #1
 8006dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006db6:	e00f      	b.n	8006dd8 <HAL_I2C_Init+0x1dc>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	1e58      	subs	r0, r3, #1
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6859      	ldr	r1, [r3, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	0099      	lsls	r1, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	6809      	ldr	r1, [r1, #0]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69da      	ldr	r2, [r3, #28]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006e06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6911      	ldr	r1, [r2, #16]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68d2      	ldr	r2, [r2, #12]
 8006e12:	4311      	orrs	r1, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6812      	ldr	r2, [r2, #0]
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695a      	ldr	r2, [r3, #20]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	000186a0 	.word	0x000186a0
 8006e74:	001e847f 	.word	0x001e847f
 8006e78:	003d08ff 	.word	0x003d08ff
 8006e7c:	431bde83 	.word	0x431bde83
 8006e80:	10624dd3 	.word	0x10624dd3

08006e84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	817b      	strh	r3, [r7, #10]
 8006e96:	460b      	mov	r3, r1
 8006e98:	813b      	strh	r3, [r7, #8]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e9e:	f7fe f933 	bl	8005108 <HAL_GetTick>
 8006ea2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	f040 80d9 	bne.w	8007064 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	2319      	movs	r3, #25
 8006eb8:	2201      	movs	r2, #1
 8006eba:	496d      	ldr	r1, [pc, #436]	@ (8007070 <HAL_I2C_Mem_Write+0x1ec>)
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fc8b 	bl	80077d8 <I2C_WaitOnFlagUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e0cc      	b.n	8007066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_I2C_Mem_Write+0x56>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e0c5      	b.n	8007066 <HAL_I2C_Mem_Write+0x1e2>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d007      	beq.n	8006f00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2221      	movs	r2, #33	@ 0x21
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2240      	movs	r2, #64	@ 0x40
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a3a      	ldr	r2, [r7, #32]
 8006f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a4d      	ldr	r2, [pc, #308]	@ (8007074 <HAL_I2C_Mem_Write+0x1f0>)
 8006f40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f42:	88f8      	ldrh	r0, [r7, #6]
 8006f44:	893a      	ldrh	r2, [r7, #8]
 8006f46:	8979      	ldrh	r1, [r7, #10]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	4603      	mov	r3, r0
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fac2 	bl	80074dc <I2C_RequestMemoryWrite>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d052      	beq.n	8007004 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e081      	b.n	8007066 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fd50 	bl	8007a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d107      	bne.n	8006f8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e06b      	b.n	8007066 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d11b      	bne.n	8007004 <HAL_I2C_Mem_Write+0x180>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d017      	beq.n	8007004 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd8:	781a      	ldrb	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1aa      	bne.n	8006f62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fd43 	bl	8007a9c <I2C_WaitOnBTFFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007020:	2b04      	cmp	r3, #4
 8007022:	d107      	bne.n	8007034 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e016      	b.n	8007066 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	e000      	b.n	8007066 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	00100002 	.word	0x00100002
 8007074:	ffff0000 	.word	0xffff0000

08007078 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08c      	sub	sp, #48	@ 0x30
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	4608      	mov	r0, r1
 8007082:	4611      	mov	r1, r2
 8007084:	461a      	mov	r2, r3
 8007086:	4603      	mov	r3, r0
 8007088:	817b      	strh	r3, [r7, #10]
 800708a:	460b      	mov	r3, r1
 800708c:	813b      	strh	r3, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007092:	f7fe f839 	bl	8005108 <HAL_GetTick>
 8007096:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	f040 8214 	bne.w	80074ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	2319      	movs	r3, #25
 80070ac:	2201      	movs	r2, #1
 80070ae:	497b      	ldr	r1, [pc, #492]	@ (800729c <HAL_I2C_Mem_Read+0x224>)
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 fb91 	bl	80077d8 <I2C_WaitOnFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
 80070be:	e207      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_I2C_Mem_Read+0x56>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e200      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d007      	beq.n	80070f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2222      	movs	r2, #34	@ 0x22
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2240      	movs	r2, #64	@ 0x40
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800711e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4a5b      	ldr	r2, [pc, #364]	@ (80072a0 <HAL_I2C_Mem_Read+0x228>)
 8007134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007136:	88f8      	ldrh	r0, [r7, #6]
 8007138:	893a      	ldrh	r2, [r7, #8]
 800713a:	8979      	ldrh	r1, [r7, #10]
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	4603      	mov	r3, r0
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fa5e 	bl	8007608 <I2C_RequestMemoryRead>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d001      	beq.n	8007156 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e1bc      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d113      	bne.n	8007186 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800715e:	2300      	movs	r3, #0
 8007160:	623b      	str	r3, [r7, #32]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	623b      	str	r3, [r7, #32]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	623b      	str	r3, [r7, #32]
 8007172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	e190      	b.n	80074a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800718a:	2b01      	cmp	r3, #1
 800718c:	d11b      	bne.n	80071c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800719c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800719e:	2300      	movs	r3, #0
 80071a0:	61fb      	str	r3, [r7, #28]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	61fb      	str	r3, [r7, #28]
 80071b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e170      	b.n	80074a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d11b      	bne.n	8007206 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ee:	2300      	movs	r3, #0
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	e150      	b.n	80074a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800721c:	e144      	b.n	80074a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007222:	2b03      	cmp	r3, #3
 8007224:	f200 80f1 	bhi.w	800740a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800722c:	2b01      	cmp	r3, #1
 800722e:	d123      	bne.n	8007278 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007232:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 fc79 	bl	8007b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e145      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007276:	e117      	b.n	80074a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727c:	2b02      	cmp	r3, #2
 800727e:	d14e      	bne.n	800731e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007286:	2200      	movs	r2, #0
 8007288:	4906      	ldr	r1, [pc, #24]	@ (80072a4 <HAL_I2C_Mem_Read+0x22c>)
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 faa4 	bl	80077d8 <I2C_WaitOnFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d008      	beq.n	80072a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e11a      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
 800729a:	bf00      	nop
 800729c:	00100002 	.word	0x00100002
 80072a0:	ffff0000 	.word	0xffff0000
 80072a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800731c:	e0c4      	b.n	80074a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007324:	2200      	movs	r2, #0
 8007326:	496c      	ldr	r1, [pc, #432]	@ (80074d8 <HAL_I2C_Mem_Read+0x460>)
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 fa55 	bl	80077d8 <I2C_WaitOnFlagUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e0cb      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007380:	2200      	movs	r2, #0
 8007382:	4955      	ldr	r1, [pc, #340]	@ (80074d8 <HAL_I2C_Mem_Read+0x460>)
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fa27 	bl	80077d8 <I2C_WaitOnFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e09d      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691a      	ldr	r2, [r3, #16]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	691a      	ldr	r2, [r3, #16]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007408:	e04e      	b.n	80074a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800740a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800740c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 fb8c 	bl	8007b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e058      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b04      	cmp	r3, #4
 800745c:	d124      	bne.n	80074a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007462:	2b03      	cmp	r3, #3
 8007464:	d107      	bne.n	8007476 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007474:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f47f aeb6 	bne.w	800721e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2220      	movs	r2, #32
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e000      	b.n	80074d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80074ce:	2302      	movs	r3, #2
  }
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3728      	adds	r7, #40	@ 0x28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	00010004 	.word	0x00010004

080074dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	4608      	mov	r0, r1
 80074e6:	4611      	mov	r1, r2
 80074e8:	461a      	mov	r2, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	817b      	strh	r3, [r7, #10]
 80074ee:	460b      	mov	r3, r1
 80074f0:	813b      	strh	r3, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	2200      	movs	r2, #0
 800750e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 f960 	bl	80077d8 <I2C_WaitOnFlagUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00d      	beq.n	800753a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800752c:	d103      	bne.n	8007536 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007534:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e05f      	b.n	80075fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800753a:	897b      	ldrh	r3, [r7, #10]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	6a3a      	ldr	r2, [r7, #32]
 800754e:	492d      	ldr	r1, [pc, #180]	@ (8007604 <I2C_RequestMemoryWrite+0x128>)
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f9bb 	bl	80078cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e04c      	b.n	80075fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007578:	6a39      	ldr	r1, [r7, #32]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 fa46 	bl	8007a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00d      	beq.n	80075a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	2b04      	cmp	r3, #4
 800758c:	d107      	bne.n	800759e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800759c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e02b      	b.n	80075fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d105      	bne.n	80075b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075a8:	893b      	ldrh	r3, [r7, #8]
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	611a      	str	r2, [r3, #16]
 80075b2:	e021      	b.n	80075f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075b4:	893b      	ldrh	r3, [r7, #8]
 80075b6:	0a1b      	lsrs	r3, r3, #8
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c4:	6a39      	ldr	r1, [r7, #32]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fa20 	bl	8007a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00d      	beq.n	80075ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d107      	bne.n	80075ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e005      	b.n	80075fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075ee:	893b      	ldrh	r3, [r7, #8]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	00010002 	.word	0x00010002

08007608 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4603      	mov	r3, r0
 8007618:	817b      	strh	r3, [r7, #10]
 800761a:	460b      	mov	r3, r1
 800761c:	813b      	strh	r3, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007630:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007640:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	2200      	movs	r2, #0
 800764a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 f8c2 	bl	80077d8 <I2C_WaitOnFlagUntilTimeout>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007668:	d103      	bne.n	8007672 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007670:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e0aa      	b.n	80077cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007676:	897b      	ldrh	r3, [r7, #10]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	461a      	mov	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007684:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	6a3a      	ldr	r2, [r7, #32]
 800768a:	4952      	ldr	r1, [pc, #328]	@ (80077d4 <I2C_RequestMemoryRead+0x1cc>)
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f91d 	bl	80078cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e097      	b.n	80077cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b4:	6a39      	ldr	r1, [r7, #32]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f9a8 	bl	8007a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00d      	beq.n	80076de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d107      	bne.n	80076da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e076      	b.n	80077cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d105      	bne.n	80076f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	611a      	str	r2, [r3, #16]
 80076ee:	e021      	b.n	8007734 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007700:	6a39      	ldr	r1, [r7, #32]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f982 	bl	8007a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00d      	beq.n	800772a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	2b04      	cmp	r3, #4
 8007714:	d107      	bne.n	8007726 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007724:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e050      	b.n	80077cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800772a:	893b      	ldrh	r3, [r7, #8]
 800772c:	b2da      	uxtb	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007736:	6a39      	ldr	r1, [r7, #32]
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f967 	bl	8007a0c <I2C_WaitOnTXEFlagUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	2b04      	cmp	r3, #4
 800774a:	d107      	bne.n	800775c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800775a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e035      	b.n	80077cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800776e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	2200      	movs	r2, #0
 8007778:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f82b 	bl	80077d8 <I2C_WaitOnFlagUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00d      	beq.n	80077a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007796:	d103      	bne.n	80077a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800779e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e013      	b.n	80077cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077a4:	897b      	ldrh	r3, [r7, #10]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	6a3a      	ldr	r2, [r7, #32]
 80077b8:	4906      	ldr	r1, [pc, #24]	@ (80077d4 <I2C_RequestMemoryRead+0x1cc>)
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f886 	bl	80078cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	00010002 	.word	0x00010002

080077d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	4613      	mov	r3, r2
 80077e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077e8:	e048      	b.n	800787c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f0:	d044      	beq.n	800787c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f2:	f7fd fc89 	bl	8005108 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d139      	bne.n	800787c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	0c1b      	lsrs	r3, r3, #16
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b01      	cmp	r3, #1
 8007810:	d10d      	bne.n	800782e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	43da      	mvns	r2, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4013      	ands	r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	bf0c      	ite	eq
 8007824:	2301      	moveq	r3, #1
 8007826:	2300      	movne	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	e00c      	b.n	8007848 <I2C_WaitOnFlagUntilTimeout+0x70>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	43da      	mvns	r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4013      	ands	r3, r2
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	bf0c      	ite	eq
 8007840:	2301      	moveq	r3, #1
 8007842:	2300      	movne	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	429a      	cmp	r2, r3
 800784c:	d116      	bne.n	800787c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e023      	b.n	80078c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b01      	cmp	r3, #1
 8007884:	d10d      	bne.n	80078a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	43da      	mvns	r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4013      	ands	r3, r2
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	bf0c      	ite	eq
 8007898:	2301      	moveq	r3, #1
 800789a:	2300      	movne	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	e00c      	b.n	80078bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	43da      	mvns	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4013      	ands	r3, r2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	bf0c      	ite	eq
 80078b4:	2301      	moveq	r3, #1
 80078b6:	2300      	movne	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	79fb      	ldrb	r3, [r7, #7]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d093      	beq.n	80077ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078da:	e071      	b.n	80079c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ea:	d123      	bne.n	8007934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007920:	f043 0204 	orr.w	r2, r3, #4
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e067      	b.n	8007a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d041      	beq.n	80079c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800793c:	f7fd fbe4 	bl	8005108 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d136      	bne.n	80079c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10c      	bne.n	8007976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	43da      	mvns	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	bf14      	ite	ne
 800796e:	2301      	movne	r3, #1
 8007970:	2300      	moveq	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	e00b      	b.n	800798e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	43da      	mvns	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4013      	ands	r3, r2
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	bf14      	ite	ne
 8007988:	2301      	movne	r3, #1
 800798a:	2300      	moveq	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d016      	beq.n	80079c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ac:	f043 0220 	orr.w	r2, r3, #32
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e021      	b.n	8007a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10c      	bne.n	80079e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	43da      	mvns	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4013      	ands	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bf14      	ite	ne
 80079dc:	2301      	movne	r3, #1
 80079de:	2300      	moveq	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	e00b      	b.n	80079fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	43da      	mvns	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4013      	ands	r3, r2
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf14      	ite	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	2300      	moveq	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f47f af6d 	bne.w	80078dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a18:	e034      	b.n	8007a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f8e3 	bl	8007be6 <I2C_IsAcknowledgeFailed>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e034      	b.n	8007a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d028      	beq.n	8007a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a32:	f7fd fb69 	bl	8005108 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d302      	bcc.n	8007a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11d      	bne.n	8007a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a52:	2b80      	cmp	r3, #128	@ 0x80
 8007a54:	d016      	beq.n	8007a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a70:	f043 0220 	orr.w	r2, r3, #32
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e007      	b.n	8007a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a8e:	2b80      	cmp	r3, #128	@ 0x80
 8007a90:	d1c3      	bne.n	8007a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007aa8:	e034      	b.n	8007b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f89b 	bl	8007be6 <I2C_IsAcknowledgeFailed>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e034      	b.n	8007b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac0:	d028      	beq.n	8007b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac2:	f7fd fb21 	bl	8005108 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d302      	bcc.n	8007ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d11d      	bne.n	8007b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f003 0304 	and.w	r3, r3, #4
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d016      	beq.n	8007b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b00:	f043 0220 	orr.w	r2, r3, #32
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e007      	b.n	8007b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d1c3      	bne.n	8007aaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b38:	e049      	b.n	8007bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d119      	bne.n	8007b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0210 	mvn.w	r2, #16
 8007b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e030      	b.n	8007bde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b7c:	f7fd fac4 	bl	8005108 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d302      	bcc.n	8007b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d11d      	bne.n	8007bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b9c:	2b40      	cmp	r3, #64	@ 0x40
 8007b9e:	d016      	beq.n	8007bce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bba:	f043 0220 	orr.w	r2, r3, #32
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e007      	b.n	8007bde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd8:	2b40      	cmp	r3, #64	@ 0x40
 8007bda:	d1ae      	bne.n	8007b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bfc:	d11b      	bne.n	8007c36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c22:	f043 0204 	orr.w	r2, r3, #4
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e267      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d075      	beq.n	8007d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c62:	4b88      	ldr	r3, [pc, #544]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f003 030c 	and.w	r3, r3, #12
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d00c      	beq.n	8007c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c6e:	4b85      	ldr	r3, [pc, #532]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	d112      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c7a:	4b82      	ldr	r3, [pc, #520]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c86:	d10b      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c88:	4b7e      	ldr	r3, [pc, #504]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d05b      	beq.n	8007d4c <HAL_RCC_OscConfig+0x108>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d157      	bne.n	8007d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e242      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ca8:	d106      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x74>
 8007caa:	4b76      	ldr	r3, [pc, #472]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a75      	ldr	r2, [pc, #468]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	e01d      	b.n	8007cf4 <HAL_RCC_OscConfig+0xb0>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cc0:	d10c      	bne.n	8007cdc <HAL_RCC_OscConfig+0x98>
 8007cc2:	4b70      	ldr	r3, [pc, #448]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a6f      	ldr	r2, [pc, #444]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	4b6d      	ldr	r3, [pc, #436]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a6c      	ldr	r2, [pc, #432]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	e00b      	b.n	8007cf4 <HAL_RCC_OscConfig+0xb0>
 8007cdc:	4b69      	ldr	r3, [pc, #420]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a68      	ldr	r2, [pc, #416]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	4b66      	ldr	r3, [pc, #408]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a65      	ldr	r2, [pc, #404]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d013      	beq.n	8007d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cfc:	f7fd fa04 	bl	8005108 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d04:	f7fd fa00 	bl	8005108 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b64      	cmp	r3, #100	@ 0x64
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e207      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d16:	4b5b      	ldr	r3, [pc, #364]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0xc0>
 8007d22:	e014      	b.n	8007d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d24:	f7fd f9f0 	bl	8005108 <HAL_GetTick>
 8007d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d2a:	e008      	b.n	8007d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d2c:	f7fd f9ec 	bl	8005108 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b64      	cmp	r3, #100	@ 0x64
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e1f3      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d3e:	4b51      	ldr	r3, [pc, #324]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1f0      	bne.n	8007d2c <HAL_RCC_OscConfig+0xe8>
 8007d4a:	e000      	b.n	8007d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d063      	beq.n	8007e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f003 030c 	and.w	r3, r3, #12
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00b      	beq.n	8007d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d66:	4b47      	ldr	r3, [pc, #284]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d6e:	2b08      	cmp	r3, #8
 8007d70:	d11c      	bne.n	8007dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d72:	4b44      	ldr	r3, [pc, #272]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d116      	bne.n	8007dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d7e:	4b41      	ldr	r3, [pc, #260]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <HAL_RCC_OscConfig+0x152>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d001      	beq.n	8007d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e1c7      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d96:	4b3b      	ldr	r3, [pc, #236]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	4937      	ldr	r1, [pc, #220]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007daa:	e03a      	b.n	8007e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d020      	beq.n	8007df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007db4:	4b34      	ldr	r3, [pc, #208]	@ (8007e88 <HAL_RCC_OscConfig+0x244>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dba:	f7fd f9a5 	bl	8005108 <HAL_GetTick>
 8007dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dc2:	f7fd f9a1 	bl	8005108 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e1a8      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f0      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de0:	4b28      	ldr	r3, [pc, #160]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4925      	ldr	r1, [pc, #148]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	600b      	str	r3, [r1, #0]
 8007df4:	e015      	b.n	8007e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007df6:	4b24      	ldr	r3, [pc, #144]	@ (8007e88 <HAL_RCC_OscConfig+0x244>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfc:	f7fd f984 	bl	8005108 <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e04:	f7fd f980 	bl	8005108 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e187      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e16:	4b1b      	ldr	r3, [pc, #108]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f0      	bne.n	8007e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d036      	beq.n	8007e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d016      	beq.n	8007e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e36:	4b15      	ldr	r3, [pc, #84]	@ (8007e8c <HAL_RCC_OscConfig+0x248>)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e3c:	f7fd f964 	bl	8005108 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e44:	f7fd f960 	bl	8005108 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e167      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e56:	4b0b      	ldr	r3, [pc, #44]	@ (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <HAL_RCC_OscConfig+0x200>
 8007e62:	e01b      	b.n	8007e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e64:	4b09      	ldr	r3, [pc, #36]	@ (8007e8c <HAL_RCC_OscConfig+0x248>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e6a:	f7fd f94d 	bl	8005108 <HAL_GetTick>
 8007e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e70:	e00e      	b.n	8007e90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e72:	f7fd f949 	bl	8005108 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d907      	bls.n	8007e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e150      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
 8007e84:	40023800 	.word	0x40023800
 8007e88:	42470000 	.word	0x42470000
 8007e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e90:	4b88      	ldr	r3, [pc, #544]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1ea      	bne.n	8007e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8097 	beq.w	8007fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eae:	4b81      	ldr	r3, [pc, #516]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10f      	bne.n	8007eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	4a7c      	ldr	r2, [pc, #496]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007eca:	4b7a      	ldr	r3, [pc, #488]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ed2:	60bb      	str	r3, [r7, #8]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eda:	4b77      	ldr	r3, [pc, #476]	@ (80080b8 <HAL_RCC_OscConfig+0x474>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d118      	bne.n	8007f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ee6:	4b74      	ldr	r3, [pc, #464]	@ (80080b8 <HAL_RCC_OscConfig+0x474>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a73      	ldr	r2, [pc, #460]	@ (80080b8 <HAL_RCC_OscConfig+0x474>)
 8007eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ef2:	f7fd f909 	bl	8005108 <HAL_GetTick>
 8007ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef8:	e008      	b.n	8007f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007efa:	f7fd f905 	bl	8005108 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d901      	bls.n	8007f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e10c      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80080b8 <HAL_RCC_OscConfig+0x474>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0f0      	beq.n	8007efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d106      	bne.n	8007f2e <HAL_RCC_OscConfig+0x2ea>
 8007f20:	4b64      	ldr	r3, [pc, #400]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f24:	4a63      	ldr	r2, [pc, #396]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f2c:	e01c      	b.n	8007f68 <HAL_RCC_OscConfig+0x324>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d10c      	bne.n	8007f50 <HAL_RCC_OscConfig+0x30c>
 8007f36:	4b5f      	ldr	r3, [pc, #380]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3a:	4a5e      	ldr	r2, [pc, #376]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f3c:	f043 0304 	orr.w	r3, r3, #4
 8007f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f42:	4b5c      	ldr	r3, [pc, #368]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f46:	4a5b      	ldr	r2, [pc, #364]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f48:	f043 0301 	orr.w	r3, r3, #1
 8007f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f4e:	e00b      	b.n	8007f68 <HAL_RCC_OscConfig+0x324>
 8007f50:	4b58      	ldr	r3, [pc, #352]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f54:	4a57      	ldr	r2, [pc, #348]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f56:	f023 0301 	bic.w	r3, r3, #1
 8007f5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007f5c:	4b55      	ldr	r3, [pc, #340]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f60:	4a54      	ldr	r2, [pc, #336]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f62:	f023 0304 	bic.w	r3, r3, #4
 8007f66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d015      	beq.n	8007f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f70:	f7fd f8ca 	bl	8005108 <HAL_GetTick>
 8007f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f76:	e00a      	b.n	8007f8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f78:	f7fd f8c6 	bl	8005108 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e0cb      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f8e:	4b49      	ldr	r3, [pc, #292]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0ee      	beq.n	8007f78 <HAL_RCC_OscConfig+0x334>
 8007f9a:	e014      	b.n	8007fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f9c:	f7fd f8b4 	bl	8005108 <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa2:	e00a      	b.n	8007fba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fa4:	f7fd f8b0 	bl	8005108 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e0b5      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fba:	4b3e      	ldr	r3, [pc, #248]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1ee      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d105      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fcc:	4b39      	ldr	r3, [pc, #228]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	4a38      	ldr	r2, [pc, #224]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80a1 	beq.w	8008124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fe2:	4b34      	ldr	r3, [pc, #208]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 030c 	and.w	r3, r3, #12
 8007fea:	2b08      	cmp	r3, #8
 8007fec:	d05c      	beq.n	80080a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d141      	bne.n	800807a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ff6:	4b31      	ldr	r3, [pc, #196]	@ (80080bc <HAL_RCC_OscConfig+0x478>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ffc:	f7fd f884 	bl	8005108 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008004:	f7fd f880 	bl	8005108 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e087      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008016:	4b27      	ldr	r3, [pc, #156]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69da      	ldr	r2, [r3, #28]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	431a      	orrs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008030:	019b      	lsls	r3, r3, #6
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	3b01      	subs	r3, #1
 800803c:	041b      	lsls	r3, r3, #16
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008044:	061b      	lsls	r3, r3, #24
 8008046:	491b      	ldr	r1, [pc, #108]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 8008048:	4313      	orrs	r3, r2
 800804a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800804c:	4b1b      	ldr	r3, [pc, #108]	@ (80080bc <HAL_RCC_OscConfig+0x478>)
 800804e:	2201      	movs	r2, #1
 8008050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008052:	f7fd f859 	bl	8005108 <HAL_GetTick>
 8008056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008058:	e008      	b.n	800806c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800805a:	f7fd f855 	bl	8005108 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d901      	bls.n	800806c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e05c      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800806c:	4b11      	ldr	r3, [pc, #68]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0f0      	beq.n	800805a <HAL_RCC_OscConfig+0x416>
 8008078:	e054      	b.n	8008124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800807a:	4b10      	ldr	r3, [pc, #64]	@ (80080bc <HAL_RCC_OscConfig+0x478>)
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008080:	f7fd f842 	bl	8005108 <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008086:	e008      	b.n	800809a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008088:	f7fd f83e 	bl	8005108 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e045      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800809a:	4b06      	ldr	r3, [pc, #24]	@ (80080b4 <HAL_RCC_OscConfig+0x470>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f0      	bne.n	8008088 <HAL_RCC_OscConfig+0x444>
 80080a6:	e03d      	b.n	8008124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d107      	bne.n	80080c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e038      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
 80080b4:	40023800 	.word	0x40023800
 80080b8:	40007000 	.word	0x40007000
 80080bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008130 <HAL_RCC_OscConfig+0x4ec>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d028      	beq.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080d8:	429a      	cmp	r2, r3
 80080da:	d121      	bne.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d11a      	bne.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80080f0:	4013      	ands	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d111      	bne.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	3b01      	subs	r3, #1
 800810a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800810c:	429a      	cmp	r2, r3
 800810e:	d107      	bne.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800811c:	429a      	cmp	r2, r3
 800811e:	d001      	beq.n	8008124 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40023800 	.word	0x40023800

08008134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e0cc      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008148:	4b68      	ldr	r3, [pc, #416]	@ (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d90c      	bls.n	8008170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008156:	4b65      	ldr	r3, [pc, #404]	@ (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800815e:	4b63      	ldr	r3, [pc, #396]	@ (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d001      	beq.n	8008170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e0b8      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d020      	beq.n	80081be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008188:	4b59      	ldr	r3, [pc, #356]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4a58      	ldr	r2, [pc, #352]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 800818e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081a0:	4b53      	ldr	r3, [pc, #332]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	4a52      	ldr	r2, [pc, #328]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80081aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081ac:	4b50      	ldr	r3, [pc, #320]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	494d      	ldr	r1, [pc, #308]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d044      	beq.n	8008254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d107      	bne.n	80081e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081d2:	4b47      	ldr	r3, [pc, #284]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d119      	bne.n	8008212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e07f      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d003      	beq.n	80081f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d107      	bne.n	8008202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081f2:	4b3f      	ldr	r3, [pc, #252]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e06f      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008202:	4b3b      	ldr	r3, [pc, #236]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e067      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008212:	4b37      	ldr	r3, [pc, #220]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f023 0203 	bic.w	r2, r3, #3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4934      	ldr	r1, [pc, #208]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008220:	4313      	orrs	r3, r2
 8008222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008224:	f7fc ff70 	bl	8005108 <HAL_GetTick>
 8008228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800822a:	e00a      	b.n	8008242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800822c:	f7fc ff6c 	bl	8005108 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800823a:	4293      	cmp	r3, r2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e04f      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008242:	4b2b      	ldr	r3, [pc, #172]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f003 020c 	and.w	r2, r3, #12
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	429a      	cmp	r2, r3
 8008252:	d1eb      	bne.n	800822c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008254:	4b25      	ldr	r3, [pc, #148]	@ (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d20c      	bcs.n	800827c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008262:	4b22      	ldr	r3, [pc, #136]	@ (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800826a:	4b20      	ldr	r3, [pc, #128]	@ (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d001      	beq.n	800827c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e032      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b00      	cmp	r3, #0
 8008286:	d008      	beq.n	800829a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008288:	4b19      	ldr	r3, [pc, #100]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	4916      	ldr	r1, [pc, #88]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008296:	4313      	orrs	r3, r2
 8008298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0308 	and.w	r3, r3, #8
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082a6:	4b12      	ldr	r3, [pc, #72]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	490e      	ldr	r1, [pc, #56]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082ba:	f000 f82d 	bl	8008318 <HAL_RCC_GetSysClockFreq>
 80082be:	4602      	mov	r2, r0
 80082c0:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	091b      	lsrs	r3, r3, #4
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	490a      	ldr	r1, [pc, #40]	@ (80082f4 <HAL_RCC_ClockConfig+0x1c0>)
 80082cc:	5ccb      	ldrb	r3, [r1, r3]
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	4a09      	ldr	r2, [pc, #36]	@ (80082f8 <HAL_RCC_ClockConfig+0x1c4>)
 80082d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80082d6:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <HAL_RCC_ClockConfig+0x1c8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fc fed0 	bl	8005080 <HAL_InitTick>

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	40023c00 	.word	0x40023c00
 80082f0:	40023800 	.word	0x40023800
 80082f4:	08010d68 	.word	0x08010d68
 80082f8:	20000084 	.word	0x20000084
 80082fc:	20000088 	.word	0x20000088

08008300 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008304:	4b03      	ldr	r3, [pc, #12]	@ (8008314 <HAL_RCC_EnableCSS+0x14>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]
}
 800830a:	bf00      	nop
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	4247004c 	.word	0x4247004c

08008318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800831c:	b090      	sub	sp, #64	@ 0x40
 800831e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
 8008324:	2300      	movs	r3, #0
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008328:	2300      	movs	r3, #0
 800832a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008330:	4b59      	ldr	r3, [pc, #356]	@ (8008498 <HAL_RCC_GetSysClockFreq+0x180>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f003 030c 	and.w	r3, r3, #12
 8008338:	2b08      	cmp	r3, #8
 800833a:	d00d      	beq.n	8008358 <HAL_RCC_GetSysClockFreq+0x40>
 800833c:	2b08      	cmp	r3, #8
 800833e:	f200 80a1 	bhi.w	8008484 <HAL_RCC_GetSysClockFreq+0x16c>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_RCC_GetSysClockFreq+0x34>
 8008346:	2b04      	cmp	r3, #4
 8008348:	d003      	beq.n	8008352 <HAL_RCC_GetSysClockFreq+0x3a>
 800834a:	e09b      	b.n	8008484 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800834c:	4b53      	ldr	r3, [pc, #332]	@ (800849c <HAL_RCC_GetSysClockFreq+0x184>)
 800834e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008350:	e09b      	b.n	800848a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008352:	4b53      	ldr	r3, [pc, #332]	@ (80084a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008354:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008356:	e098      	b.n	800848a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008358:	4b4f      	ldr	r3, [pc, #316]	@ (8008498 <HAL_RCC_GetSysClockFreq+0x180>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008362:	4b4d      	ldr	r3, [pc, #308]	@ (8008498 <HAL_RCC_GetSysClockFreq+0x180>)
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d028      	beq.n	80083c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800836e:	4b4a      	ldr	r3, [pc, #296]	@ (8008498 <HAL_RCC_GetSysClockFreq+0x180>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	099b      	lsrs	r3, r3, #6
 8008374:	2200      	movs	r2, #0
 8008376:	623b      	str	r3, [r7, #32]
 8008378:	627a      	str	r2, [r7, #36]	@ 0x24
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008380:	2100      	movs	r1, #0
 8008382:	4b47      	ldr	r3, [pc, #284]	@ (80084a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008384:	fb03 f201 	mul.w	r2, r3, r1
 8008388:	2300      	movs	r3, #0
 800838a:	fb00 f303 	mul.w	r3, r0, r3
 800838e:	4413      	add	r3, r2
 8008390:	4a43      	ldr	r2, [pc, #268]	@ (80084a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008392:	fba0 1202 	umull	r1, r2, r0, r2
 8008396:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008398:	460a      	mov	r2, r1
 800839a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800839c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800839e:	4413      	add	r3, r2
 80083a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a4:	2200      	movs	r2, #0
 80083a6:	61bb      	str	r3, [r7, #24]
 80083a8:	61fa      	str	r2, [r7, #28]
 80083aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80083b2:	f7f8 fbf9 	bl	8000ba8 <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4613      	mov	r3, r2
 80083bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083be:	e053      	b.n	8008468 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083c0:	4b35      	ldr	r3, [pc, #212]	@ (8008498 <HAL_RCC_GetSysClockFreq+0x180>)
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	099b      	lsrs	r3, r3, #6
 80083c6:	2200      	movs	r2, #0
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	617a      	str	r2, [r7, #20]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80083d2:	f04f 0b00 	mov.w	fp, #0
 80083d6:	4652      	mov	r2, sl
 80083d8:	465b      	mov	r3, fp
 80083da:	f04f 0000 	mov.w	r0, #0
 80083de:	f04f 0100 	mov.w	r1, #0
 80083e2:	0159      	lsls	r1, r3, #5
 80083e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083e8:	0150      	lsls	r0, r2, #5
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	ebb2 080a 	subs.w	r8, r2, sl
 80083f2:	eb63 090b 	sbc.w	r9, r3, fp
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008402:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008406:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800840a:	ebb2 0408 	subs.w	r4, r2, r8
 800840e:	eb63 0509 	sbc.w	r5, r3, r9
 8008412:	f04f 0200 	mov.w	r2, #0
 8008416:	f04f 0300 	mov.w	r3, #0
 800841a:	00eb      	lsls	r3, r5, #3
 800841c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008420:	00e2      	lsls	r2, r4, #3
 8008422:	4614      	mov	r4, r2
 8008424:	461d      	mov	r5, r3
 8008426:	eb14 030a 	adds.w	r3, r4, sl
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	eb45 030b 	adc.w	r3, r5, fp
 8008430:	607b      	str	r3, [r7, #4]
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800843e:	4629      	mov	r1, r5
 8008440:	028b      	lsls	r3, r1, #10
 8008442:	4621      	mov	r1, r4
 8008444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008448:	4621      	mov	r1, r4
 800844a:	028a      	lsls	r2, r1, #10
 800844c:	4610      	mov	r0, r2
 800844e:	4619      	mov	r1, r3
 8008450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008452:	2200      	movs	r2, #0
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	60fa      	str	r2, [r7, #12]
 8008458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800845c:	f7f8 fba4 	bl	8000ba8 <__aeabi_uldivmod>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4613      	mov	r3, r2
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008468:	4b0b      	ldr	r3, [pc, #44]	@ (8008498 <HAL_RCC_GetSysClockFreq+0x180>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	3301      	adds	r3, #1
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008478:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008480:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008482:	e002      	b.n	800848a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008484:	4b05      	ldr	r3, [pc, #20]	@ (800849c <HAL_RCC_GetSysClockFreq+0x184>)
 8008486:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800848a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800848c:	4618      	mov	r0, r3
 800848e:	3740      	adds	r7, #64	@ 0x40
 8008490:	46bd      	mov	sp, r7
 8008492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008496:	bf00      	nop
 8008498:	40023800 	.word	0x40023800
 800849c:	00f42400 	.word	0x00f42400
 80084a0:	00b71b00 	.word	0x00b71b00

080084a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084a8:	4b03      	ldr	r3, [pc, #12]	@ (80084b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80084aa:	681b      	ldr	r3, [r3, #0]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	20000084 	.word	0x20000084

080084bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084c0:	f7ff fff0 	bl	80084a4 <HAL_RCC_GetHCLKFreq>
 80084c4:	4602      	mov	r2, r0
 80084c6:	4b05      	ldr	r3, [pc, #20]	@ (80084dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	0a9b      	lsrs	r3, r3, #10
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	4903      	ldr	r1, [pc, #12]	@ (80084e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084d2:	5ccb      	ldrb	r3, [r1, r3]
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084d8:	4618      	mov	r0, r3
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40023800 	.word	0x40023800
 80084e0:	08010d78 	.word	0x08010d78

080084e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084e8:	f7ff ffdc 	bl	80084a4 <HAL_RCC_GetHCLKFreq>
 80084ec:	4602      	mov	r2, r0
 80084ee:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	0b5b      	lsrs	r3, r3, #13
 80084f4:	f003 0307 	and.w	r3, r3, #7
 80084f8:	4903      	ldr	r1, [pc, #12]	@ (8008508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084fa:	5ccb      	ldrb	r3, [r1, r3]
 80084fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008500:	4618      	mov	r0, r3
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40023800 	.word	0x40023800
 8008508:	08010d78 	.word	0x08010d78

0800850c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008510:	4b06      	ldr	r3, [pc, #24]	@ (800852c <HAL_RCC_NMI_IRQHandler+0x20>)
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008518:	2b80      	cmp	r3, #128	@ 0x80
 800851a:	d104      	bne.n	8008526 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800851c:	f000 f80a 	bl	8008534 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008520:	4b03      	ldr	r3, [pc, #12]	@ (8008530 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008522:	2280      	movs	r2, #128	@ 0x80
 8008524:	701a      	strb	r2, [r3, #0]
  }
}
 8008526:	bf00      	nop
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	40023800 	.word	0x40023800
 8008530:	4002380e 	.word	0x4002380e

08008534 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e07b      	b.n	800864c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	d108      	bne.n	800856e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008564:	d009      	beq.n	800857a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	61da      	str	r2, [r3, #28]
 800856c:	e005      	b.n	800857a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d106      	bne.n	800859a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7fc f817 	bl	80045c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085cc:	431a      	orrs	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	431a      	orrs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085ea:	431a      	orrs	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085f4:	431a      	orrs	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fe:	ea42 0103 	orr.w	r1, r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008606:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	0c1b      	lsrs	r3, r3, #16
 8008618:	f003 0104 	and.w	r1, r3, #4
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008620:	f003 0210 	and.w	r2, r3, #16
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69da      	ldr	r2, [r3, #28]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800863a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08c      	sub	sp, #48	@ 0x30
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008662:	2301      	movs	r3, #1
 8008664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008672:	2b01      	cmp	r3, #1
 8008674:	d101      	bne.n	800867a <HAL_SPI_TransmitReceive+0x26>
 8008676:	2302      	movs	r3, #2
 8008678:	e198      	b.n	80089ac <HAL_SPI_TransmitReceive+0x358>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008682:	f7fc fd41 	bl	8005108 <HAL_GetTick>
 8008686:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008698:	887b      	ldrh	r3, [r7, #2]
 800869a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800869c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d00f      	beq.n	80086c4 <HAL_SPI_TransmitReceive+0x70>
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086aa:	d107      	bne.n	80086bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d103      	bne.n	80086bc <HAL_SPI_TransmitReceive+0x68>
 80086b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d003      	beq.n	80086c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80086bc:	2302      	movs	r3, #2
 80086be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80086c2:	e16d      	b.n	80089a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_SPI_TransmitReceive+0x82>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <HAL_SPI_TransmitReceive+0x82>
 80086d0:	887b      	ldrh	r3, [r7, #2]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d103      	bne.n	80086de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80086dc:	e160      	b.n	80089a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d003      	beq.n	80086f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2205      	movs	r2, #5
 80086ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	887a      	ldrh	r2, [r7, #2]
 8008702:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	887a      	ldrh	r2, [r7, #2]
 8008708:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	887a      	ldrh	r2, [r7, #2]
 8008714:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	887a      	ldrh	r2, [r7, #2]
 800871a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008732:	2b40      	cmp	r3, #64	@ 0x40
 8008734:	d007      	beq.n	8008746 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008744:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800874e:	d17c      	bne.n	800884a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <HAL_SPI_TransmitReceive+0x10a>
 8008758:	8b7b      	ldrh	r3, [r7, #26]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d16a      	bne.n	8008834 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008762:	881a      	ldrh	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876e:	1c9a      	adds	r2, r3, #2
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	b29a      	uxth	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008782:	e057      	b.n	8008834 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b02      	cmp	r3, #2
 8008790:	d11b      	bne.n	80087ca <HAL_SPI_TransmitReceive+0x176>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008796:	b29b      	uxth	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d016      	beq.n	80087ca <HAL_SPI_TransmitReceive+0x176>
 800879c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d113      	bne.n	80087ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a6:	881a      	ldrh	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b2:	1c9a      	adds	r2, r3, #2
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d119      	bne.n	800880c <HAL_SPI_TransmitReceive+0x1b8>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d014      	beq.n	800880c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ec:	b292      	uxth	r2, r2
 80087ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f4:	1c9a      	adds	r2, r3, #2
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087fe:	b29b      	uxth	r3, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008808:	2301      	movs	r3, #1
 800880a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800880c:	f7fc fc7c 	bl	8005108 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008818:	429a      	cmp	r2, r3
 800881a:	d80b      	bhi.n	8008834 <HAL_SPI_TransmitReceive+0x1e0>
 800881c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008822:	d007      	beq.n	8008834 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008832:	e0b5      	b.n	80089a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1a2      	bne.n	8008784 <HAL_SPI_TransmitReceive+0x130>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d19d      	bne.n	8008784 <HAL_SPI_TransmitReceive+0x130>
 8008848:	e080      	b.n	800894c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <HAL_SPI_TransmitReceive+0x204>
 8008852:	8b7b      	ldrh	r3, [r7, #26]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d16f      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	330c      	adds	r3, #12
 8008862:	7812      	ldrb	r2, [r2, #0]
 8008864:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	b29a      	uxth	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800887e:	e05b      	b.n	8008938 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b02      	cmp	r3, #2
 800888c:	d11c      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x274>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008892:	b29b      	uxth	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	d017      	beq.n	80088c8 <HAL_SPI_TransmitReceive+0x274>
 8008898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889a:	2b01      	cmp	r3, #1
 800889c:	d114      	bne.n	80088c8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	330c      	adds	r3, #12
 80088a8:	7812      	ldrb	r2, [r2, #0]
 80088aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d119      	bne.n	800890a <HAL_SPI_TransmitReceive+0x2b6>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088da:	b29b      	uxth	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d014      	beq.n	800890a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ea:	b2d2      	uxtb	r2, r2
 80088ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008906:	2301      	movs	r3, #1
 8008908:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800890a:	f7fc fbfd 	bl	8005108 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008916:	429a      	cmp	r2, r3
 8008918:	d803      	bhi.n	8008922 <HAL_SPI_TransmitReceive+0x2ce>
 800891a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d102      	bne.n	8008928 <HAL_SPI_TransmitReceive+0x2d4>
 8008922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008924:	2b00      	cmp	r3, #0
 8008926:	d107      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008936:	e033      	b.n	80089a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800893c:	b29b      	uxth	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d19e      	bne.n	8008880 <HAL_SPI_TransmitReceive+0x22c>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d199      	bne.n	8008880 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800894c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800894e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 f8b7 	bl	8008ac4 <SPI_EndRxTxTransaction>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d006      	beq.n	800896a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2220      	movs	r2, #32
 8008966:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008968:	e01a      	b.n	80089a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008996:	e003      	b.n	80089a0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80089a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3730      	adds	r7, #48	@ 0x30
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	4613      	mov	r3, r2
 80089c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80089c4:	f7fc fba0 	bl	8005108 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	4413      	add	r3, r2
 80089d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80089d4:	f7fc fb98 	bl	8005108 <HAL_GetTick>
 80089d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80089da:	4b39      	ldr	r3, [pc, #228]	@ (8008ac0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	015b      	lsls	r3, r3, #5
 80089e0:	0d1b      	lsrs	r3, r3, #20
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	fb02 f303 	mul.w	r3, r2, r3
 80089e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089ea:	e054      	b.n	8008a96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f2:	d050      	beq.n	8008a96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089f4:	f7fc fb88 	bl	8005108 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	69fa      	ldr	r2, [r7, #28]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d902      	bls.n	8008a0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d13d      	bne.n	8008a86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a22:	d111      	bne.n	8008a48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a2c:	d004      	beq.n	8008a38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a36:	d107      	bne.n	8008a48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a50:	d10f      	bne.n	8008a72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e017      	b.n	8008ab6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	bf0c      	ite	eq
 8008aa6:	2301      	moveq	r3, #1
 8008aa8:	2300      	movne	r3, #0
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d19b      	bne.n	80089ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3720      	adds	r7, #32
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000084 	.word	0x20000084

08008ac4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	2102      	movs	r1, #2
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff ff6a 	bl	80089b4 <SPI_WaitFlagStateUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d007      	beq.n	8008af6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aea:	f043 0220 	orr.w	r2, r3, #32
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e032      	b.n	8008b5c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008af6:	4b1b      	ldr	r3, [pc, #108]	@ (8008b64 <SPI_EndRxTxTransaction+0xa0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1b      	ldr	r2, [pc, #108]	@ (8008b68 <SPI_EndRxTxTransaction+0xa4>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	0d5b      	lsrs	r3, r3, #21
 8008b02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
 8008b0a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b14:	d112      	bne.n	8008b3c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2180      	movs	r1, #128	@ 0x80
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff ff47 	bl	80089b4 <SPI_WaitFlagStateUntilTimeout>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d016      	beq.n	8008b5a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b30:	f043 0220 	orr.w	r2, r3, #32
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e00f      	b.n	8008b5c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b52:	2b80      	cmp	r3, #128	@ 0x80
 8008b54:	d0f2      	beq.n	8008b3c <SPI_EndRxTxTransaction+0x78>
 8008b56:	e000      	b.n	8008b5a <SPI_EndRxTxTransaction+0x96>
        break;
 8008b58:	bf00      	nop
  }

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000084 	.word	0x20000084
 8008b68:	165e9f81 	.word	0x165e9f81

08008b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e041      	b.n	8008c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7fb fdb8 	bl	8004708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f000 fba8 	bl	8009300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d001      	beq.n	8008c24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e046      	b.n	8008cb2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a23      	ldr	r2, [pc, #140]	@ (8008cc0 <HAL_TIM_Base_Start+0xb4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d022      	beq.n	8008c7c <HAL_TIM_Base_Start+0x70>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c3e:	d01d      	beq.n	8008c7c <HAL_TIM_Base_Start+0x70>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc4 <HAL_TIM_Base_Start+0xb8>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d018      	beq.n	8008c7c <HAL_TIM_Base_Start+0x70>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8008cc8 <HAL_TIM_Base_Start+0xbc>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d013      	beq.n	8008c7c <HAL_TIM_Base_Start+0x70>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a1c      	ldr	r2, [pc, #112]	@ (8008ccc <HAL_TIM_Base_Start+0xc0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d00e      	beq.n	8008c7c <HAL_TIM_Base_Start+0x70>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a1b      	ldr	r2, [pc, #108]	@ (8008cd0 <HAL_TIM_Base_Start+0xc4>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d009      	beq.n	8008c7c <HAL_TIM_Base_Start+0x70>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a19      	ldr	r2, [pc, #100]	@ (8008cd4 <HAL_TIM_Base_Start+0xc8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d004      	beq.n	8008c7c <HAL_TIM_Base_Start+0x70>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a18      	ldr	r2, [pc, #96]	@ (8008cd8 <HAL_TIM_Base_Start+0xcc>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d111      	bne.n	8008ca0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2b06      	cmp	r3, #6
 8008c8c:	d010      	beq.n	8008cb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 0201 	orr.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c9e:	e007      	b.n	8008cb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	40010000 	.word	0x40010000
 8008cc4:	40000400 	.word	0x40000400
 8008cc8:	40000800 	.word	0x40000800
 8008ccc:	40000c00 	.word	0x40000c00
 8008cd0:	40010400 	.word	0x40010400
 8008cd4:	40014000 	.word	0x40014000
 8008cd8:	40001800 	.word	0x40001800

08008cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e041      	b.n	8008d72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fb fcc8 	bl	8004698 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f000 faf0 	bl	8009300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <HAL_TIM_PWM_Start+0x24>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	bf14      	ite	ne
 8008d98:	2301      	movne	r3, #1
 8008d9a:	2300      	moveq	r3, #0
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	e022      	b.n	8008de6 <HAL_TIM_PWM_Start+0x6a>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d109      	bne.n	8008dba <HAL_TIM_PWM_Start+0x3e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	bf14      	ite	ne
 8008db2:	2301      	movne	r3, #1
 8008db4:	2300      	moveq	r3, #0
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	e015      	b.n	8008de6 <HAL_TIM_PWM_Start+0x6a>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d109      	bne.n	8008dd4 <HAL_TIM_PWM_Start+0x58>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	bf14      	ite	ne
 8008dcc:	2301      	movne	r3, #1
 8008dce:	2300      	moveq	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	e008      	b.n	8008de6 <HAL_TIM_PWM_Start+0x6a>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	bf14      	ite	ne
 8008de0:	2301      	movne	r3, #1
 8008de2:	2300      	moveq	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e07c      	b.n	8008ee8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <HAL_TIM_PWM_Start+0x82>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dfc:	e013      	b.n	8008e26 <HAL_TIM_PWM_Start+0xaa>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d104      	bne.n	8008e0e <HAL_TIM_PWM_Start+0x92>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e0c:	e00b      	b.n	8008e26 <HAL_TIM_PWM_Start+0xaa>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d104      	bne.n	8008e1e <HAL_TIM_PWM_Start+0xa2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e1c:	e003      	b.n	8008e26 <HAL_TIM_PWM_Start+0xaa>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2202      	movs	r2, #2
 8008e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fd5c 	bl	80098ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2d      	ldr	r2, [pc, #180]	@ (8008ef0 <HAL_TIM_PWM_Start+0x174>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <HAL_TIM_PWM_Start+0xcc>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef4 <HAL_TIM_PWM_Start+0x178>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d101      	bne.n	8008e4c <HAL_TIM_PWM_Start+0xd0>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e000      	b.n	8008e4e <HAL_TIM_PWM_Start+0xd2>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d007      	beq.n	8008e62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a22      	ldr	r2, [pc, #136]	@ (8008ef0 <HAL_TIM_PWM_Start+0x174>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d022      	beq.n	8008eb2 <HAL_TIM_PWM_Start+0x136>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e74:	d01d      	beq.n	8008eb2 <HAL_TIM_PWM_Start+0x136>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ef8 <HAL_TIM_PWM_Start+0x17c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d018      	beq.n	8008eb2 <HAL_TIM_PWM_Start+0x136>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1d      	ldr	r2, [pc, #116]	@ (8008efc <HAL_TIM_PWM_Start+0x180>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d013      	beq.n	8008eb2 <HAL_TIM_PWM_Start+0x136>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8008f00 <HAL_TIM_PWM_Start+0x184>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00e      	beq.n	8008eb2 <HAL_TIM_PWM_Start+0x136>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a16      	ldr	r2, [pc, #88]	@ (8008ef4 <HAL_TIM_PWM_Start+0x178>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d009      	beq.n	8008eb2 <HAL_TIM_PWM_Start+0x136>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a18      	ldr	r2, [pc, #96]	@ (8008f04 <HAL_TIM_PWM_Start+0x188>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d004      	beq.n	8008eb2 <HAL_TIM_PWM_Start+0x136>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a16      	ldr	r2, [pc, #88]	@ (8008f08 <HAL_TIM_PWM_Start+0x18c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d111      	bne.n	8008ed6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	d010      	beq.n	8008ee6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0201 	orr.w	r2, r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed4:	e007      	b.n	8008ee6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0201 	orr.w	r2, r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40010400 	.word	0x40010400
 8008ef8:	40000400 	.word	0x40000400
 8008efc:	40000800 	.word	0x40000800
 8008f00:	40000c00 	.word	0x40000c00
 8008f04:	40014000 	.word	0x40014000
 8008f08:	40001800 	.word	0x40001800

08008f0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fce4 	bl	80098ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a2e      	ldr	r2, [pc, #184]	@ (8008fe4 <HAL_TIM_PWM_Stop+0xd8>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d004      	beq.n	8008f38 <HAL_TIM_PWM_Stop+0x2c>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a2d      	ldr	r2, [pc, #180]	@ (8008fe8 <HAL_TIM_PWM_Stop+0xdc>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d101      	bne.n	8008f3c <HAL_TIM_PWM_Stop+0x30>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e000      	b.n	8008f3e <HAL_TIM_PWM_Stop+0x32>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d017      	beq.n	8008f72 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6a1a      	ldr	r2, [r3, #32]
 8008f48:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10f      	bne.n	8008f72 <HAL_TIM_PWM_Stop+0x66>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6a1a      	ldr	r2, [r3, #32]
 8008f58:	f240 4344 	movw	r3, #1092	@ 0x444
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d107      	bne.n	8008f72 <HAL_TIM_PWM_Stop+0x66>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6a1a      	ldr	r2, [r3, #32]
 8008f78:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10f      	bne.n	8008fa2 <HAL_TIM_PWM_Stop+0x96>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6a1a      	ldr	r2, [r3, #32]
 8008f88:	f240 4344 	movw	r3, #1092	@ 0x444
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d107      	bne.n	8008fa2 <HAL_TIM_PWM_Stop+0x96>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0201 	bic.w	r2, r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <HAL_TIM_PWM_Stop+0xa6>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fb0:	e013      	b.n	8008fda <HAL_TIM_PWM_Stop+0xce>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d104      	bne.n	8008fc2 <HAL_TIM_PWM_Stop+0xb6>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fc0:	e00b      	b.n	8008fda <HAL_TIM_PWM_Stop+0xce>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d104      	bne.n	8008fd2 <HAL_TIM_PWM_Stop+0xc6>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fd0:	e003      	b.n	8008fda <HAL_TIM_PWM_Stop+0xce>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	40010000 	.word	0x40010000
 8008fe8:	40010400 	.word	0x40010400

08008fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009002:	2b01      	cmp	r3, #1
 8009004:	d101      	bne.n	800900a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009006:	2302      	movs	r3, #2
 8009008:	e0ae      	b.n	8009168 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b0c      	cmp	r3, #12
 8009016:	f200 809f 	bhi.w	8009158 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800901a:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009055 	.word	0x08009055
 8009024:	08009159 	.word	0x08009159
 8009028:	08009159 	.word	0x08009159
 800902c:	08009159 	.word	0x08009159
 8009030:	08009095 	.word	0x08009095
 8009034:	08009159 	.word	0x08009159
 8009038:	08009159 	.word	0x08009159
 800903c:	08009159 	.word	0x08009159
 8009040:	080090d7 	.word	0x080090d7
 8009044:	08009159 	.word	0x08009159
 8009048:	08009159 	.word	0x08009159
 800904c:	08009159 	.word	0x08009159
 8009050:	08009117 	.word	0x08009117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68b9      	ldr	r1, [r7, #8]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 f9fc 	bl	8009458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0208 	orr.w	r2, r2, #8
 800906e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0204 	bic.w	r2, r2, #4
 800907e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6999      	ldr	r1, [r3, #24]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	619a      	str	r2, [r3, #24]
      break;
 8009092:	e064      	b.n	800915e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fa4c 	bl	8009538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699a      	ldr	r2, [r3, #24]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6999      	ldr	r1, [r3, #24]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	021a      	lsls	r2, r3, #8
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	619a      	str	r2, [r3, #24]
      break;
 80090d4:	e043      	b.n	800915e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 faa1 	bl	8009624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69da      	ldr	r2, [r3, #28]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0208 	orr.w	r2, r2, #8
 80090f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0204 	bic.w	r2, r2, #4
 8009100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69d9      	ldr	r1, [r3, #28]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	61da      	str	r2, [r3, #28]
      break;
 8009114:	e023      	b.n	800915e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 faf5 	bl	800970c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69da      	ldr	r2, [r3, #28]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69d9      	ldr	r1, [r3, #28]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	021a      	lsls	r2, r3, #8
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	61da      	str	r2, [r3, #28]
      break;
 8009156:	e002      	b.n	800915e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	75fb      	strb	r3, [r7, #23]
      break;
 800915c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009166:	7dfb      	ldrb	r3, [r7, #23]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_TIM_ConfigClockSource+0x1c>
 8009188:	2302      	movs	r3, #2
 800918a:	e0b4      	b.n	80092f6 <HAL_TIM_ConfigClockSource+0x186>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80091aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091c4:	d03e      	beq.n	8009244 <HAL_TIM_ConfigClockSource+0xd4>
 80091c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ca:	f200 8087 	bhi.w	80092dc <HAL_TIM_ConfigClockSource+0x16c>
 80091ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091d2:	f000 8086 	beq.w	80092e2 <HAL_TIM_ConfigClockSource+0x172>
 80091d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091da:	d87f      	bhi.n	80092dc <HAL_TIM_ConfigClockSource+0x16c>
 80091dc:	2b70      	cmp	r3, #112	@ 0x70
 80091de:	d01a      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0xa6>
 80091e0:	2b70      	cmp	r3, #112	@ 0x70
 80091e2:	d87b      	bhi.n	80092dc <HAL_TIM_ConfigClockSource+0x16c>
 80091e4:	2b60      	cmp	r3, #96	@ 0x60
 80091e6:	d050      	beq.n	800928a <HAL_TIM_ConfigClockSource+0x11a>
 80091e8:	2b60      	cmp	r3, #96	@ 0x60
 80091ea:	d877      	bhi.n	80092dc <HAL_TIM_ConfigClockSource+0x16c>
 80091ec:	2b50      	cmp	r3, #80	@ 0x50
 80091ee:	d03c      	beq.n	800926a <HAL_TIM_ConfigClockSource+0xfa>
 80091f0:	2b50      	cmp	r3, #80	@ 0x50
 80091f2:	d873      	bhi.n	80092dc <HAL_TIM_ConfigClockSource+0x16c>
 80091f4:	2b40      	cmp	r3, #64	@ 0x40
 80091f6:	d058      	beq.n	80092aa <HAL_TIM_ConfigClockSource+0x13a>
 80091f8:	2b40      	cmp	r3, #64	@ 0x40
 80091fa:	d86f      	bhi.n	80092dc <HAL_TIM_ConfigClockSource+0x16c>
 80091fc:	2b30      	cmp	r3, #48	@ 0x30
 80091fe:	d064      	beq.n	80092ca <HAL_TIM_ConfigClockSource+0x15a>
 8009200:	2b30      	cmp	r3, #48	@ 0x30
 8009202:	d86b      	bhi.n	80092dc <HAL_TIM_ConfigClockSource+0x16c>
 8009204:	2b20      	cmp	r3, #32
 8009206:	d060      	beq.n	80092ca <HAL_TIM_ConfigClockSource+0x15a>
 8009208:	2b20      	cmp	r3, #32
 800920a:	d867      	bhi.n	80092dc <HAL_TIM_ConfigClockSource+0x16c>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d05c      	beq.n	80092ca <HAL_TIM_ConfigClockSource+0x15a>
 8009210:	2b10      	cmp	r3, #16
 8009212:	d05a      	beq.n	80092ca <HAL_TIM_ConfigClockSource+0x15a>
 8009214:	e062      	b.n	80092dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009226:	f000 fb41 	bl	80098ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	609a      	str	r2, [r3, #8]
      break;
 8009242:	e04f      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009254:	f000 fb2a 	bl	80098ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009266:	609a      	str	r2, [r3, #8]
      break;
 8009268:	e03c      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009276:	461a      	mov	r2, r3
 8009278:	f000 fa9e 	bl	80097b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2150      	movs	r1, #80	@ 0x50
 8009282:	4618      	mov	r0, r3
 8009284:	f000 faf7 	bl	8009876 <TIM_ITRx_SetConfig>
      break;
 8009288:	e02c      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009296:	461a      	mov	r2, r3
 8009298:	f000 fabd 	bl	8009816 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2160      	movs	r1, #96	@ 0x60
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fae7 	bl	8009876 <TIM_ITRx_SetConfig>
      break;
 80092a8:	e01c      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092b6:	461a      	mov	r2, r3
 80092b8:	f000 fa7e 	bl	80097b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2140      	movs	r1, #64	@ 0x40
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fad7 	bl	8009876 <TIM_ITRx_SetConfig>
      break;
 80092c8:	e00c      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f000 face 	bl	8009876 <TIM_ITRx_SetConfig>
      break;
 80092da:	e003      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
      break;
 80092e0:	e000      	b.n	80092e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a46      	ldr	r2, [pc, #280]	@ (800942c <TIM_Base_SetConfig+0x12c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d013      	beq.n	8009340 <TIM_Base_SetConfig+0x40>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800931e:	d00f      	beq.n	8009340 <TIM_Base_SetConfig+0x40>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a43      	ldr	r2, [pc, #268]	@ (8009430 <TIM_Base_SetConfig+0x130>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00b      	beq.n	8009340 <TIM_Base_SetConfig+0x40>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a42      	ldr	r2, [pc, #264]	@ (8009434 <TIM_Base_SetConfig+0x134>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d007      	beq.n	8009340 <TIM_Base_SetConfig+0x40>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a41      	ldr	r2, [pc, #260]	@ (8009438 <TIM_Base_SetConfig+0x138>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <TIM_Base_SetConfig+0x40>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a40      	ldr	r2, [pc, #256]	@ (800943c <TIM_Base_SetConfig+0x13c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d108      	bne.n	8009352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4313      	orrs	r3, r2
 8009350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a35      	ldr	r2, [pc, #212]	@ (800942c <TIM_Base_SetConfig+0x12c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d02b      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009360:	d027      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a32      	ldr	r2, [pc, #200]	@ (8009430 <TIM_Base_SetConfig+0x130>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d023      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a31      	ldr	r2, [pc, #196]	@ (8009434 <TIM_Base_SetConfig+0x134>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d01f      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a30      	ldr	r2, [pc, #192]	@ (8009438 <TIM_Base_SetConfig+0x138>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d01b      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a2f      	ldr	r2, [pc, #188]	@ (800943c <TIM_Base_SetConfig+0x13c>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d017      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a2e      	ldr	r2, [pc, #184]	@ (8009440 <TIM_Base_SetConfig+0x140>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d013      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a2d      	ldr	r2, [pc, #180]	@ (8009444 <TIM_Base_SetConfig+0x144>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d00f      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a2c      	ldr	r2, [pc, #176]	@ (8009448 <TIM_Base_SetConfig+0x148>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00b      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a2b      	ldr	r2, [pc, #172]	@ (800944c <TIM_Base_SetConfig+0x14c>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d007      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009450 <TIM_Base_SetConfig+0x150>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d003      	beq.n	80093b2 <TIM_Base_SetConfig+0xb2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a29      	ldr	r2, [pc, #164]	@ (8009454 <TIM_Base_SetConfig+0x154>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d108      	bne.n	80093c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a10      	ldr	r2, [pc, #64]	@ (800942c <TIM_Base_SetConfig+0x12c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d003      	beq.n	80093f8 <TIM_Base_SetConfig+0xf8>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a12      	ldr	r2, [pc, #72]	@ (800943c <TIM_Base_SetConfig+0x13c>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d103      	bne.n	8009400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	691a      	ldr	r2, [r3, #16]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b01      	cmp	r3, #1
 8009410:	d105      	bne.n	800941e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f023 0201 	bic.w	r2, r3, #1
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	611a      	str	r2, [r3, #16]
  }
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40010000 	.word	0x40010000
 8009430:	40000400 	.word	0x40000400
 8009434:	40000800 	.word	0x40000800
 8009438:	40000c00 	.word	0x40000c00
 800943c:	40010400 	.word	0x40010400
 8009440:	40014000 	.word	0x40014000
 8009444:	40014400 	.word	0x40014400
 8009448:	40014800 	.word	0x40014800
 800944c:	40001800 	.word	0x40001800
 8009450:	40001c00 	.word	0x40001c00
 8009454:	40002000 	.word	0x40002000

08009458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a1b      	ldr	r3, [r3, #32]
 8009466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	f023 0201 	bic.w	r2, r3, #1
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 0303 	bic.w	r3, r3, #3
 800948e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4313      	orrs	r3, r2
 8009498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f023 0302 	bic.w	r3, r3, #2
 80094a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a20      	ldr	r2, [pc, #128]	@ (8009530 <TIM_OC1_SetConfig+0xd8>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d003      	beq.n	80094bc <TIM_OC1_SetConfig+0x64>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009534 <TIM_OC1_SetConfig+0xdc>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d10c      	bne.n	80094d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f023 0308 	bic.w	r3, r3, #8
 80094c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f023 0304 	bic.w	r3, r3, #4
 80094d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a15      	ldr	r2, [pc, #84]	@ (8009530 <TIM_OC1_SetConfig+0xd8>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d003      	beq.n	80094e6 <TIM_OC1_SetConfig+0x8e>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a14      	ldr	r2, [pc, #80]	@ (8009534 <TIM_OC1_SetConfig+0xdc>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d111      	bne.n	800950a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	4313      	orrs	r3, r2
 8009508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	621a      	str	r2, [r3, #32]
}
 8009524:	bf00      	nop
 8009526:	371c      	adds	r7, #28
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	40010000 	.word	0x40010000
 8009534:	40010400 	.word	0x40010400

08009538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	f023 0210 	bic.w	r2, r3, #16
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	699b      	ldr	r3, [r3, #24]
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800956e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	021b      	lsls	r3, r3, #8
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f023 0320 	bic.w	r3, r3, #32
 8009582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	011b      	lsls	r3, r3, #4
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a22      	ldr	r2, [pc, #136]	@ (800961c <TIM_OC2_SetConfig+0xe4>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d003      	beq.n	80095a0 <TIM_OC2_SetConfig+0x68>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a21      	ldr	r2, [pc, #132]	@ (8009620 <TIM_OC2_SetConfig+0xe8>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10d      	bne.n	80095bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a17      	ldr	r2, [pc, #92]	@ (800961c <TIM_OC2_SetConfig+0xe4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d003      	beq.n	80095cc <TIM_OC2_SetConfig+0x94>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a16      	ldr	r2, [pc, #88]	@ (8009620 <TIM_OC2_SetConfig+0xe8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d113      	bne.n	80095f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	621a      	str	r2, [r3, #32]
}
 800960e:	bf00      	nop
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	40010000 	.word	0x40010000
 8009620:	40010400 	.word	0x40010400

08009624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800966c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a21      	ldr	r2, [pc, #132]	@ (8009704 <TIM_OC3_SetConfig+0xe0>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_OC3_SetConfig+0x66>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a20      	ldr	r2, [pc, #128]	@ (8009708 <TIM_OC3_SetConfig+0xe4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d10d      	bne.n	80096a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80096a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a16      	ldr	r2, [pc, #88]	@ (8009704 <TIM_OC3_SetConfig+0xe0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d003      	beq.n	80096b6 <TIM_OC3_SetConfig+0x92>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a15      	ldr	r2, [pc, #84]	@ (8009708 <TIM_OC3_SetConfig+0xe4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d113      	bne.n	80096de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	011b      	lsls	r3, r3, #4
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	011b      	lsls	r3, r3, #4
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	4313      	orrs	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	621a      	str	r2, [r3, #32]
}
 80096f8:	bf00      	nop
 80096fa:	371c      	adds	r7, #28
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	40010000 	.word	0x40010000
 8009708:	40010400 	.word	0x40010400

0800970c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a1b      	ldr	r3, [r3, #32]
 8009720:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800973a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4313      	orrs	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	031b      	lsls	r3, r3, #12
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	4313      	orrs	r3, r2
 8009762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a12      	ldr	r2, [pc, #72]	@ (80097b0 <TIM_OC4_SetConfig+0xa4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d003      	beq.n	8009774 <TIM_OC4_SetConfig+0x68>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a11      	ldr	r2, [pc, #68]	@ (80097b4 <TIM_OC4_SetConfig+0xa8>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d109      	bne.n	8009788 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800977a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	019b      	lsls	r3, r3, #6
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	4313      	orrs	r3, r2
 8009786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	621a      	str	r2, [r3, #32]
}
 80097a2:	bf00      	nop
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	40010000 	.word	0x40010000
 80097b4:	40010400 	.word	0x40010400

080097b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	f023 0201 	bic.w	r2, r3, #1
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	011b      	lsls	r3, r3, #4
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f023 030a 	bic.w	r3, r3, #10
 80097f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	621a      	str	r2, [r3, #32]
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009816:	b480      	push	{r7}
 8009818:	b087      	sub	sp, #28
 800981a:	af00      	add	r7, sp, #0
 800981c:	60f8      	str	r0, [r7, #12]
 800981e:	60b9      	str	r1, [r7, #8]
 8009820:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	f023 0210 	bic.w	r2, r3, #16
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	031b      	lsls	r3, r3, #12
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009852:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4313      	orrs	r3, r2
 800985c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	621a      	str	r2, [r3, #32]
}
 800986a:	bf00      	nop
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009876:	b480      	push	{r7}
 8009878:	b085      	sub	sp, #20
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800988c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	f043 0307 	orr.w	r3, r3, #7
 8009898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	609a      	str	r2, [r3, #8]
}
 80098a0:	bf00      	nop
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	021a      	lsls	r2, r3, #8
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	609a      	str	r2, [r3, #8]
}
 80098e0:	bf00      	nop
 80098e2:	371c      	adds	r7, #28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f003 031f 	and.w	r3, r3, #31
 80098fe:	2201      	movs	r2, #1
 8009900:	fa02 f303 	lsl.w	r3, r2, r3
 8009904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6a1a      	ldr	r2, [r3, #32]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	43db      	mvns	r3, r3
 800990e:	401a      	ands	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a1a      	ldr	r2, [r3, #32]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f003 031f 	and.w	r3, r3, #31
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	fa01 f303 	lsl.w	r3, r1, r3
 8009924:	431a      	orrs	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
	...

08009938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009948:	2b01      	cmp	r3, #1
 800994a:	d101      	bne.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800994c:	2302      	movs	r3, #2
 800994e:	e05a      	b.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a21      	ldr	r2, [pc, #132]	@ (8009a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d022      	beq.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800999c:	d01d      	beq.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a1d      	ldr	r2, [pc, #116]	@ (8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d018      	beq.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a1b      	ldr	r2, [pc, #108]	@ (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d013      	beq.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00e      	beq.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a18      	ldr	r2, [pc, #96]	@ (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d009      	beq.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a17      	ldr	r2, [pc, #92]	@ (8009a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d004      	beq.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a15      	ldr	r2, [pc, #84]	@ (8009a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d10c      	bne.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	40010000 	.word	0x40010000
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	40000800 	.word	0x40000800
 8009a20:	40000c00 	.word	0x40000c00
 8009a24:	40010400 	.word	0x40010400
 8009a28:	40014000 	.word	0x40014000
 8009a2c:	40001800 	.word	0x40001800

08009a30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d101      	bne.n	8009a4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e03d      	b.n	8009ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e042      	b.n	8009b6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7fa ff10 	bl	8004920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2224      	movs	r2, #36	@ 0x24
 8009b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 ff77 	bl	800aa0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691a      	ldr	r2, [r3, #16]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695a      	ldr	r2, [r3, #20]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68da      	ldr	r2, [r3, #12]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2220      	movs	r2, #32
 8009b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08c      	sub	sp, #48	@ 0x30
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d156      	bne.n	8009c3c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <HAL_UART_Transmit_DMA+0x26>
 8009b94:	88fb      	ldrh	r3, [r7, #6]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e04f      	b.n	8009c3e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	88fa      	ldrh	r2, [r7, #6]
 8009ba8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	88fa      	ldrh	r2, [r7, #6]
 8009bae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2221      	movs	r2, #33	@ 0x21
 8009bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc2:	4a21      	ldr	r2, [pc, #132]	@ (8009c48 <HAL_UART_Transmit_DMA+0xd4>)
 8009bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bca:	4a20      	ldr	r2, [pc, #128]	@ (8009c4c <HAL_UART_Transmit_DMA+0xd8>)
 8009bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8009c50 <HAL_UART_Transmit_DMA+0xdc>)
 8009bd4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bda:	2200      	movs	r2, #0
 8009bdc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bea:	6819      	ldr	r1, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	88fb      	ldrh	r3, [r7, #6]
 8009bf6:	f7fc fadf 	bl	80061b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	3314      	adds	r3, #20
 8009c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	e853 3f00 	ldrex	r3, [r3]
 8009c12:	617b      	str	r3, [r7, #20]
   return(result);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	3314      	adds	r3, #20
 8009c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c24:	627a      	str	r2, [r7, #36]	@ 0x24
 8009c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c28:	6a39      	ldr	r1, [r7, #32]
 8009c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c2c:	e841 2300 	strex	r3, r2, [r1]
 8009c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e5      	bne.n	8009c04 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	e000      	b.n	8009c3e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009c3c:	2302      	movs	r3, #2
  }
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3730      	adds	r7, #48	@ 0x30
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	0800a299 	.word	0x0800a299
 8009c4c:	0800a333 	.word	0x0800a333
 8009c50:	0800a4b7 	.word	0x0800a4b7

08009c54 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08c      	sub	sp, #48	@ 0x30
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	d14a      	bne.n	8009d04 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e043      	b.n	8009d06 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009c8a:	88fb      	ldrh	r3, [r7, #6]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 fc5b 	bl	800a54c <UART_Start_Receive_DMA>
 8009c96:	4603      	mov	r3, r0
 8009c98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d12c      	bne.n	8009cfe <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d125      	bne.n	8009cf8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cac:	2300      	movs	r3, #0
 8009cae:	613b      	str	r3, [r7, #16]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	613b      	str	r3, [r7, #16]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	613b      	str	r3, [r7, #16]
 8009cc0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	330c      	adds	r3, #12
 8009cc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	e853 3f00 	ldrex	r3, [r3]
 8009cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f043 0310 	orr.w	r3, r3, #16
 8009cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	330c      	adds	r3, #12
 8009ce0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ce2:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce6:	6a39      	ldr	r1, [r7, #32]
 8009ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cea:	e841 2300 	strex	r3, r2, [r1]
 8009cee:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1e5      	bne.n	8009cc2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8009cf6:	e002      	b.n	8009cfe <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009d02:	e000      	b.n	8009d06 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009d04:	2302      	movs	r3, #2
  }
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3730      	adds	r7, #48	@ 0x30
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b0ba      	sub	sp, #232	@ 0xe8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d46:	f003 030f 	and.w	r3, r3, #15
 8009d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10f      	bne.n	8009d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d5a:	f003 0320 	and.w	r3, r3, #32
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <HAL_UART_IRQHandler+0x66>
 8009d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d66:	f003 0320 	and.w	r3, r3, #32
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fd8d 	bl	800a88e <UART_Receive_IT>
      return;
 8009d74:	e25b      	b.n	800a22e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 80de 	beq.w	8009f3c <HAL_UART_IRQHandler+0x22c>
 8009d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d106      	bne.n	8009d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 80d1 	beq.w	8009f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00b      	beq.n	8009dbe <HAL_UART_IRQHandler+0xae>
 8009da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d005      	beq.n	8009dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009db6:	f043 0201 	orr.w	r2, r3, #1
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00b      	beq.n	8009de2 <HAL_UART_IRQHandler+0xd2>
 8009dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dda:	f043 0202 	orr.w	r2, r3, #2
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00b      	beq.n	8009e06 <HAL_UART_IRQHandler+0xf6>
 8009dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d005      	beq.n	8009e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dfe:	f043 0204 	orr.w	r2, r3, #4
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e0a:	f003 0308 	and.w	r3, r3, #8
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d011      	beq.n	8009e36 <HAL_UART_IRQHandler+0x126>
 8009e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e16:	f003 0320 	and.w	r3, r3, #32
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d105      	bne.n	8009e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d005      	beq.n	8009e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e2e:	f043 0208 	orr.w	r2, r3, #8
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 81f2 	beq.w	800a224 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d008      	beq.n	8009e5e <HAL_UART_IRQHandler+0x14e>
 8009e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e50:	f003 0320 	and.w	r3, r3, #32
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fd18 	bl	800a88e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e68:	2b40      	cmp	r3, #64	@ 0x40
 8009e6a:	bf0c      	ite	eq
 8009e6c:	2301      	moveq	r3, #1
 8009e6e:	2300      	movne	r3, #0
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e7a:	f003 0308 	and.w	r3, r3, #8
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d103      	bne.n	8009e8a <HAL_UART_IRQHandler+0x17a>
 8009e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d04f      	beq.n	8009f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fc20 	bl	800a6d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e9a:	2b40      	cmp	r3, #64	@ 0x40
 8009e9c:	d141      	bne.n	8009f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3314      	adds	r3, #20
 8009ea4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009eac:	e853 3f00 	ldrex	r3, [r3]
 8009eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3314      	adds	r3, #20
 8009ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009eca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009ece:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1d9      	bne.n	8009e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d013      	beq.n	8009f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef6:	4a7e      	ldr	r2, [pc, #504]	@ (800a0f0 <HAL_UART_IRQHandler+0x3e0>)
 8009ef8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fc fa22 	bl	8006348 <HAL_DMA_Abort_IT>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d016      	beq.n	8009f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009f14:	4610      	mov	r0, r2
 8009f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f18:	e00e      	b.n	8009f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f9b2 	bl	800a284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f20:	e00a      	b.n	8009f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f9ae 	bl	800a284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f28:	e006      	b.n	8009f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f9aa 	bl	800a284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009f36:	e175      	b.n	800a224 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f38:	bf00      	nop
    return;
 8009f3a:	e173      	b.n	800a224 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	f040 814f 	bne.w	800a1e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 8148 	beq.w	800a1e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 8141 	beq.w	800a1e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f62:	2300      	movs	r3, #0
 8009f64:	60bb      	str	r3, [r7, #8]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	60bb      	str	r3, [r7, #8]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	60bb      	str	r3, [r7, #8]
 8009f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f82:	2b40      	cmp	r3, #64	@ 0x40
 8009f84:	f040 80b6 	bne.w	800a0f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 8145 	beq.w	800a228 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	f080 813e 	bcs.w	800a228 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fbe:	f000 8088 	beq.w	800a0d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	330c      	adds	r3, #12
 8009fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	330c      	adds	r3, #12
 8009fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009fee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ff2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1d9      	bne.n	8009fc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3314      	adds	r3, #20
 800a014:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a018:	e853 3f00 	ldrex	r3, [r3]
 800a01c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a01e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a020:	f023 0301 	bic.w	r3, r3, #1
 800a024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3314      	adds	r3, #20
 800a02e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a032:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a036:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a03a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e1      	bne.n	800a00e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3314      	adds	r3, #20
 800a050:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a054:	e853 3f00 	ldrex	r3, [r3]
 800a058:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a05c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3314      	adds	r3, #20
 800a06a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a06e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a070:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a072:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a074:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a076:	e841 2300 	strex	r3, r2, [r1]
 800a07a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a07c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e3      	bne.n	800a04a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2220      	movs	r2, #32
 800a086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	330c      	adds	r3, #12
 800a096:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0a2:	f023 0310 	bic.w	r3, r3, #16
 800a0a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	330c      	adds	r3, #12
 800a0b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a0b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a0b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a0ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0bc:	e841 2300 	strex	r3, r2, [r1]
 800a0c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1e3      	bne.n	800a090 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fc f8cb 	bl	8006268 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7f8 f8d9 	bl	80022a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0ee:	e09b      	b.n	800a228 <HAL_UART_IRQHandler+0x518>
 800a0f0:	0800a797 	.word	0x0800a797
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a108:	b29b      	uxth	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 808e 	beq.w	800a22c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 8089 	beq.w	800a22c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	330c      	adds	r3, #12
 800a120:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	e853 3f00 	ldrex	r3, [r3]
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a130:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	330c      	adds	r3, #12
 800a13a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a13e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e3      	bne.n	800a11a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3314      	adds	r3, #20
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	623b      	str	r3, [r7, #32]
   return(result);
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	f023 0301 	bic.w	r3, r3, #1
 800a168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	3314      	adds	r3, #20
 800a172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a176:	633a      	str	r2, [r7, #48]	@ 0x30
 800a178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a17c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e3      	bne.n	800a152 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	330c      	adds	r3, #12
 800a19e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	e853 3f00 	ldrex	r3, [r3]
 800a1a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0310 	bic.w	r3, r3, #16
 800a1ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	330c      	adds	r3, #12
 800a1b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a1bc:	61fa      	str	r2, [r7, #28]
 800a1be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	69b9      	ldr	r1, [r7, #24]
 800a1c2:	69fa      	ldr	r2, [r7, #28]
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e3      	bne.n	800a198 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7f8 f85f 	bl	80022a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1e2:	e023      	b.n	800a22c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d009      	beq.n	800a204 <HAL_UART_IRQHandler+0x4f4>
 800a1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fade 	bl	800a7be <UART_Transmit_IT>
    return;
 800a202:	e014      	b.n	800a22e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00e      	beq.n	800a22e <HAL_UART_IRQHandler+0x51e>
 800a210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d008      	beq.n	800a22e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fb1e 	bl	800a85e <UART_EndTransmit_IT>
    return;
 800a222:	e004      	b.n	800a22e <HAL_UART_IRQHandler+0x51e>
    return;
 800a224:	bf00      	nop
 800a226:	e002      	b.n	800a22e <HAL_UART_IRQHandler+0x51e>
      return;
 800a228:	bf00      	nop
 800a22a:	e000      	b.n	800a22e <HAL_UART_IRQHandler+0x51e>
      return;
 800a22c:	bf00      	nop
  }
}
 800a22e:	37e8      	adds	r7, #232	@ 0xe8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a28c:	bf00      	nop
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b090      	sub	sp, #64	@ 0x40
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d137      	bne.n	800a324 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3314      	adds	r3, #20
 800a2c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3314      	adds	r3, #20
 800a2d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2da:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e5      	bne.n	800a2ba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	330c      	adds	r3, #12
 800a2f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a304:	637b      	str	r3, [r7, #52]	@ 0x34
 800a306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	330c      	adds	r3, #12
 800a30c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a30e:	61fa      	str	r2, [r7, #28]
 800a310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	69b9      	ldr	r1, [r7, #24]
 800a314:	69fa      	ldr	r2, [r7, #28]
 800a316:	e841 2300 	strex	r3, r2, [r1]
 800a31a:	617b      	str	r3, [r7, #20]
   return(result);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1e5      	bne.n	800a2ee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a322:	e002      	b.n	800a32a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a324:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a326:	f7ff ff85 	bl	800a234 <HAL_UART_TxCpltCallback>
}
 800a32a:	bf00      	nop
 800a32c:	3740      	adds	r7, #64	@ 0x40
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b084      	sub	sp, #16
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a33e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f7ff ff81 	bl	800a248 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b09c      	sub	sp, #112	@ 0x70
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a366:	2b00      	cmp	r3, #0
 800a368:	d172      	bne.n	800a450 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a36a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a36c:	2200      	movs	r2, #0
 800a36e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	330c      	adds	r3, #12
 800a376:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a37a:	e853 3f00 	ldrex	r3, [r3]
 800a37e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a382:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a386:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	330c      	adds	r3, #12
 800a38e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a390:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a392:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a394:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a396:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a39e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e5      	bne.n	800a370 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3314      	adds	r3, #20
 800a3aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b6:	f023 0301 	bic.w	r3, r3, #1
 800a3ba:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3314      	adds	r3, #20
 800a3c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a3c4:	647a      	str	r2, [r7, #68]	@ 0x44
 800a3c6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e5      	bne.n	800a3a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	e853 3f00 	ldrex	r3, [r3]
 800a3e6:	623b      	str	r3, [r7, #32]
   return(result);
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3ee:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a3f8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a400:	e841 2300 	strex	r3, r2, [r1]
 800a404:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1e5      	bne.n	800a3d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a40c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a40e:	2220      	movs	r2, #32
 800a410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d119      	bne.n	800a450 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a41c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	e853 3f00 	ldrex	r3, [r3]
 800a42a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f023 0310 	bic.w	r3, r3, #16
 800a432:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	330c      	adds	r3, #12
 800a43a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a43c:	61fa      	str	r2, [r7, #28]
 800a43e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a440:	69b9      	ldr	r1, [r7, #24]
 800a442:	69fa      	ldr	r2, [r7, #28]
 800a444:	e841 2300 	strex	r3, r2, [r1]
 800a448:	617b      	str	r3, [r7, #20]
   return(result);
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e5      	bne.n	800a41c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a452:	2200      	movs	r2, #0
 800a454:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d106      	bne.n	800a46c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a45e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a462:	4619      	mov	r1, r3
 800a464:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a466:	f7f7 ff1b 	bl	80022a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a46a:	e002      	b.n	800a472 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a46c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a46e:	f7ff fef5 	bl	800a25c <HAL_UART_RxCpltCallback>
}
 800a472:	bf00      	nop
 800a474:	3770      	adds	r7, #112	@ 0x70
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a486:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a492:	2b01      	cmp	r3, #1
 800a494:	d108      	bne.n	800a4a8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7f7 fefd 	bl	80022a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4a6:	e002      	b.n	800a4ae <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fee1 	bl	800a270 <HAL_UART_RxHalfCpltCallback>
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d2:	2b80      	cmp	r3, #128	@ 0x80
 800a4d4:	bf0c      	ite	eq
 800a4d6:	2301      	moveq	r3, #1
 800a4d8:	2300      	movne	r3, #0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b21      	cmp	r3, #33	@ 0x21
 800a4e8:	d108      	bne.n	800a4fc <UART_DMAError+0x46>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d005      	beq.n	800a4fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a4f6:	68b8      	ldr	r0, [r7, #8]
 800a4f8:	f000 f8c2 	bl	800a680 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a506:	2b40      	cmp	r3, #64	@ 0x40
 800a508:	bf0c      	ite	eq
 800a50a:	2301      	moveq	r3, #1
 800a50c:	2300      	movne	r3, #0
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b22      	cmp	r3, #34	@ 0x22
 800a51c:	d108      	bne.n	800a530 <UART_DMAError+0x7a>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d005      	beq.n	800a530 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2200      	movs	r2, #0
 800a528:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a52a:	68b8      	ldr	r0, [r7, #8]
 800a52c:	f000 f8d0 	bl	800a6d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a534:	f043 0210 	orr.w	r2, r3, #16
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a53c:	68b8      	ldr	r0, [r7, #8]
 800a53e:	f7ff fea1 	bl	800a284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a542:	bf00      	nop
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b098      	sub	sp, #96	@ 0x60
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	4613      	mov	r3, r2
 800a558:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	88fa      	ldrh	r2, [r7, #6]
 800a564:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2222      	movs	r2, #34	@ 0x22
 800a570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a578:	4a3e      	ldr	r2, [pc, #248]	@ (800a674 <UART_Start_Receive_DMA+0x128>)
 800a57a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a580:	4a3d      	ldr	r2, [pc, #244]	@ (800a678 <UART_Start_Receive_DMA+0x12c>)
 800a582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a588:	4a3c      	ldr	r2, [pc, #240]	@ (800a67c <UART_Start_Receive_DMA+0x130>)
 800a58a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a590:	2200      	movs	r2, #0
 800a592:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a594:	f107 0308 	add.w	r3, r7, #8
 800a598:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	88fb      	ldrh	r3, [r7, #6]
 800a5ac:	f7fb fe04 	bl	80061b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	613b      	str	r3, [r7, #16]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	613b      	str	r3, [r7, #16]
 800a5c4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d019      	beq.n	800a602 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	330c      	adds	r3, #12
 800a5d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	330c      	adds	r3, #12
 800a5ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5ee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a5f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a5f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a5fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e5      	bne.n	800a5ce <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3314      	adds	r3, #20
 800a608:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a614:	f043 0301 	orr.w	r3, r3, #1
 800a618:	657b      	str	r3, [r7, #84]	@ 0x54
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3314      	adds	r3, #20
 800a620:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a622:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a628:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e5      	bne.n	800a602 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3314      	adds	r3, #20
 800a63c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	617b      	str	r3, [r7, #20]
   return(result);
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a64c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3314      	adds	r3, #20
 800a654:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a656:	627a      	str	r2, [r7, #36]	@ 0x24
 800a658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6a39      	ldr	r1, [r7, #32]
 800a65c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	61fb      	str	r3, [r7, #28]
   return(result);
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e5      	bne.n	800a636 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3760      	adds	r7, #96	@ 0x60
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	0800a34f 	.word	0x0800a34f
 800a678:	0800a47b 	.word	0x0800a47b
 800a67c:	0800a4b7 	.word	0x0800a4b7

0800a680 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a680:	b480      	push	{r7}
 800a682:	b089      	sub	sp, #36	@ 0x24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	330c      	adds	r3, #12
 800a68e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	60bb      	str	r3, [r7, #8]
   return(result);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	330c      	adds	r3, #12
 800a6a6:	69fa      	ldr	r2, [r7, #28]
 800a6a8:	61ba      	str	r2, [r7, #24]
 800a6aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ac:	6979      	ldr	r1, [r7, #20]
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e5      	bne.n	800a688 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a6c4:	bf00      	nop
 800a6c6:	3724      	adds	r7, #36	@ 0x24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b095      	sub	sp, #84	@ 0x54
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	330c      	adds	r3, #12
 800a6de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e2:	e853 3f00 	ldrex	r3, [r3]
 800a6e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a6f8:	643a      	str	r2, [r7, #64]	@ 0x40
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a700:	e841 2300 	strex	r3, r2, [r1]
 800a704:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e5      	bne.n	800a6d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3314      	adds	r3, #20
 800a712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	e853 3f00 	ldrex	r3, [r3]
 800a71a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	f023 0301 	bic.w	r3, r3, #1
 800a722:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3314      	adds	r3, #20
 800a72a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a72c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a72e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a730:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a734:	e841 2300 	strex	r3, r2, [r1]
 800a738:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1e5      	bne.n	800a70c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a744:	2b01      	cmp	r3, #1
 800a746:	d119      	bne.n	800a77c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	330c      	adds	r3, #12
 800a74e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	60bb      	str	r3, [r7, #8]
   return(result);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f023 0310 	bic.w	r3, r3, #16
 800a75e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	330c      	adds	r3, #12
 800a766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a768:	61ba      	str	r2, [r7, #24]
 800a76a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76c:	6979      	ldr	r1, [r7, #20]
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	e841 2300 	strex	r3, r2, [r1]
 800a774:	613b      	str	r3, [r7, #16]
   return(result);
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e5      	bne.n	800a748 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2220      	movs	r2, #32
 800a780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a78a:	bf00      	nop
 800a78c:	3754      	adds	r7, #84	@ 0x54
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b084      	sub	sp, #16
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff fd67 	bl	800a284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7b6:	bf00      	nop
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b21      	cmp	r3, #33	@ 0x21
 800a7d0:	d13e      	bne.n	800a850 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7da:	d114      	bne.n	800a806 <UART_Transmit_IT+0x48>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d110      	bne.n	800a806 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a1b      	ldr	r3, [r3, #32]
 800a7e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	881b      	ldrh	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	1c9a      	adds	r2, r3, #2
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	621a      	str	r2, [r3, #32]
 800a804:	e008      	b.n	800a818 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	6211      	str	r1, [r2, #32]
 800a810:	781a      	ldrb	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	3b01      	subs	r3, #1
 800a820:	b29b      	uxth	r3, r3
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4619      	mov	r1, r3
 800a826:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10f      	bne.n	800a84c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a83a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a84a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e000      	b.n	800a852 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a850:	2302      	movs	r3, #2
  }
}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a874:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fcd8 	bl	800a234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b08c      	sub	sp, #48	@ 0x30
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	2b22      	cmp	r3, #34	@ 0x22
 800a8a0:	f040 80ae 	bne.w	800aa00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ac:	d117      	bne.n	800a8de <UART_Receive_IT+0x50>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d113      	bne.n	800a8de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8be:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	1c9a      	adds	r2, r3, #2
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	629a      	str	r2, [r3, #40]	@ 0x28
 800a8dc:	e026      	b.n	800a92c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8f0:	d007      	beq.n	800a902 <UART_Receive_IT+0x74>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10a      	bne.n	800a910 <UART_Receive_IT+0x82>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d106      	bne.n	800a910 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90c:	701a      	strb	r2, [r3, #0]
 800a90e:	e008      	b.n	800a922 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a920:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a930:	b29b      	uxth	r3, r3
 800a932:	3b01      	subs	r3, #1
 800a934:	b29b      	uxth	r3, r3
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	4619      	mov	r1, r3
 800a93a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d15d      	bne.n	800a9fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0220 	bic.w	r2, r2, #32
 800a94e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a95e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	695a      	ldr	r2, [r3, #20]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f022 0201 	bic.w	r2, r2, #1
 800a96e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2220      	movs	r2, #32
 800a974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a982:	2b01      	cmp	r3, #1
 800a984:	d135      	bne.n	800a9f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	330c      	adds	r3, #12
 800a992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	e853 3f00 	ldrex	r3, [r3]
 800a99a:	613b      	str	r3, [r7, #16]
   return(result);
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f023 0310 	bic.w	r3, r3, #16
 800a9a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	330c      	adds	r3, #12
 800a9aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9ac:	623a      	str	r2, [r7, #32]
 800a9ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b0:	69f9      	ldr	r1, [r7, #28]
 800a9b2:	6a3a      	ldr	r2, [r7, #32]
 800a9b4:	e841 2300 	strex	r3, r2, [r1]
 800a9b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1e5      	bne.n	800a98c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0310 	and.w	r3, r3, #16
 800a9ca:	2b10      	cmp	r3, #16
 800a9cc:	d10a      	bne.n	800a9e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60fb      	str	r3, [r7, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7f7 fc58 	bl	80022a0 <HAL_UARTEx_RxEventCallback>
 800a9f0:	e002      	b.n	800a9f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff fc32 	bl	800a25c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e002      	b.n	800aa02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e000      	b.n	800aa02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aa00:	2302      	movs	r3, #2
  }
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3730      	adds	r7, #48	@ 0x30
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa10:	b0c0      	sub	sp, #256	@ 0x100
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aa24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa28:	68d9      	ldr	r1, [r3, #12]
 800aa2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	ea40 0301 	orr.w	r3, r0, r1
 800aa34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa3a:	689a      	ldr	r2, [r3, #8]
 800aa3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	431a      	orrs	r2, r3
 800aa4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aa58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aa64:	f021 010c 	bic.w	r1, r1, #12
 800aa68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aa72:	430b      	orrs	r3, r1
 800aa74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aa82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa86:	6999      	ldr	r1, [r3, #24]
 800aa88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	ea40 0301 	orr.w	r3, r0, r1
 800aa92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	4b8f      	ldr	r3, [pc, #572]	@ (800acd8 <UART_SetConfig+0x2cc>)
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d005      	beq.n	800aaac <UART_SetConfig+0xa0>
 800aaa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	4b8d      	ldr	r3, [pc, #564]	@ (800acdc <UART_SetConfig+0x2d0>)
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d104      	bne.n	800aab6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aaac:	f7fd fd1a 	bl	80084e4 <HAL_RCC_GetPCLK2Freq>
 800aab0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aab4:	e003      	b.n	800aabe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aab6:	f7fd fd01 	bl	80084bc <HAL_RCC_GetPCLK1Freq>
 800aaba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aac8:	f040 810c 	bne.w	800ace4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aacc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aad6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aada:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aade:	4622      	mov	r2, r4
 800aae0:	462b      	mov	r3, r5
 800aae2:	1891      	adds	r1, r2, r2
 800aae4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aae6:	415b      	adcs	r3, r3
 800aae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aaea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aaee:	4621      	mov	r1, r4
 800aaf0:	eb12 0801 	adds.w	r8, r2, r1
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	eb43 0901 	adc.w	r9, r3, r1
 800aafa:	f04f 0200 	mov.w	r2, #0
 800aafe:	f04f 0300 	mov.w	r3, #0
 800ab02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab0e:	4690      	mov	r8, r2
 800ab10:	4699      	mov	r9, r3
 800ab12:	4623      	mov	r3, r4
 800ab14:	eb18 0303 	adds.w	r3, r8, r3
 800ab18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	eb49 0303 	adc.w	r3, r9, r3
 800ab22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ab26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ab36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	18db      	adds	r3, r3, r3
 800ab3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab40:	4613      	mov	r3, r2
 800ab42:	eb42 0303 	adc.w	r3, r2, r3
 800ab46:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ab4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ab50:	f7f6 f82a 	bl	8000ba8 <__aeabi_uldivmod>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4b61      	ldr	r3, [pc, #388]	@ (800ace0 <UART_SetConfig+0x2d4>)
 800ab5a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab5e:	095b      	lsrs	r3, r3, #5
 800ab60:	011c      	lsls	r4, r3, #4
 800ab62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ab70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ab74:	4642      	mov	r2, r8
 800ab76:	464b      	mov	r3, r9
 800ab78:	1891      	adds	r1, r2, r2
 800ab7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ab7c:	415b      	adcs	r3, r3
 800ab7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ab84:	4641      	mov	r1, r8
 800ab86:	eb12 0a01 	adds.w	sl, r2, r1
 800ab8a:	4649      	mov	r1, r9
 800ab8c:	eb43 0b01 	adc.w	fp, r3, r1
 800ab90:	f04f 0200 	mov.w	r2, #0
 800ab94:	f04f 0300 	mov.w	r3, #0
 800ab98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aba4:	4692      	mov	sl, r2
 800aba6:	469b      	mov	fp, r3
 800aba8:	4643      	mov	r3, r8
 800abaa:	eb1a 0303 	adds.w	r3, sl, r3
 800abae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800abb2:	464b      	mov	r3, r9
 800abb4:	eb4b 0303 	adc.w	r3, fp, r3
 800abb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800abbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800abcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800abd0:	460b      	mov	r3, r1
 800abd2:	18db      	adds	r3, r3, r3
 800abd4:	643b      	str	r3, [r7, #64]	@ 0x40
 800abd6:	4613      	mov	r3, r2
 800abd8:	eb42 0303 	adc.w	r3, r2, r3
 800abdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800abde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800abe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800abe6:	f7f5 ffdf 	bl	8000ba8 <__aeabi_uldivmod>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	4611      	mov	r1, r2
 800abf0:	4b3b      	ldr	r3, [pc, #236]	@ (800ace0 <UART_SetConfig+0x2d4>)
 800abf2:	fba3 2301 	umull	r2, r3, r3, r1
 800abf6:	095b      	lsrs	r3, r3, #5
 800abf8:	2264      	movs	r2, #100	@ 0x64
 800abfa:	fb02 f303 	mul.w	r3, r2, r3
 800abfe:	1acb      	subs	r3, r1, r3
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ac06:	4b36      	ldr	r3, [pc, #216]	@ (800ace0 <UART_SetConfig+0x2d4>)
 800ac08:	fba3 2302 	umull	r2, r3, r3, r2
 800ac0c:	095b      	lsrs	r3, r3, #5
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ac14:	441c      	add	r4, r3
 800ac16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ac24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ac28:	4642      	mov	r2, r8
 800ac2a:	464b      	mov	r3, r9
 800ac2c:	1891      	adds	r1, r2, r2
 800ac2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ac30:	415b      	adcs	r3, r3
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ac38:	4641      	mov	r1, r8
 800ac3a:	1851      	adds	r1, r2, r1
 800ac3c:	6339      	str	r1, [r7, #48]	@ 0x30
 800ac3e:	4649      	mov	r1, r9
 800ac40:	414b      	adcs	r3, r1
 800ac42:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ac50:	4659      	mov	r1, fp
 800ac52:	00cb      	lsls	r3, r1, #3
 800ac54:	4651      	mov	r1, sl
 800ac56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac5a:	4651      	mov	r1, sl
 800ac5c:	00ca      	lsls	r2, r1, #3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	4603      	mov	r3, r0
 800ac64:	4642      	mov	r2, r8
 800ac66:	189b      	adds	r3, r3, r2
 800ac68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac6c:	464b      	mov	r3, r9
 800ac6e:	460a      	mov	r2, r1
 800ac70:	eb42 0303 	adc.w	r3, r2, r3
 800ac74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ac84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ac88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	18db      	adds	r3, r3, r3
 800ac90:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac92:	4613      	mov	r3, r2
 800ac94:	eb42 0303 	adc.w	r3, r2, r3
 800ac98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ac9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aca2:	f7f5 ff81 	bl	8000ba8 <__aeabi_uldivmod>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ace0 <UART_SetConfig+0x2d4>)
 800acac:	fba3 1302 	umull	r1, r3, r3, r2
 800acb0:	095b      	lsrs	r3, r3, #5
 800acb2:	2164      	movs	r1, #100	@ 0x64
 800acb4:	fb01 f303 	mul.w	r3, r1, r3
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	3332      	adds	r3, #50	@ 0x32
 800acbe:	4a08      	ldr	r2, [pc, #32]	@ (800ace0 <UART_SetConfig+0x2d4>)
 800acc0:	fba2 2303 	umull	r2, r3, r2, r3
 800acc4:	095b      	lsrs	r3, r3, #5
 800acc6:	f003 0207 	and.w	r2, r3, #7
 800acca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4422      	add	r2, r4
 800acd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800acd4:	e106      	b.n	800aee4 <UART_SetConfig+0x4d8>
 800acd6:	bf00      	nop
 800acd8:	40011000 	.word	0x40011000
 800acdc:	40011400 	.word	0x40011400
 800ace0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ace4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800acee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800acf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800acf6:	4642      	mov	r2, r8
 800acf8:	464b      	mov	r3, r9
 800acfa:	1891      	adds	r1, r2, r2
 800acfc:	6239      	str	r1, [r7, #32]
 800acfe:	415b      	adcs	r3, r3
 800ad00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad06:	4641      	mov	r1, r8
 800ad08:	1854      	adds	r4, r2, r1
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	eb43 0501 	adc.w	r5, r3, r1
 800ad10:	f04f 0200 	mov.w	r2, #0
 800ad14:	f04f 0300 	mov.w	r3, #0
 800ad18:	00eb      	lsls	r3, r5, #3
 800ad1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad1e:	00e2      	lsls	r2, r4, #3
 800ad20:	4614      	mov	r4, r2
 800ad22:	461d      	mov	r5, r3
 800ad24:	4643      	mov	r3, r8
 800ad26:	18e3      	adds	r3, r4, r3
 800ad28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	eb45 0303 	adc.w	r3, r5, r3
 800ad32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ad36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	f04f 0300 	mov.w	r3, #0
 800ad4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ad52:	4629      	mov	r1, r5
 800ad54:	008b      	lsls	r3, r1, #2
 800ad56:	4621      	mov	r1, r4
 800ad58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	008a      	lsls	r2, r1, #2
 800ad60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ad64:	f7f5 ff20 	bl	8000ba8 <__aeabi_uldivmod>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4b60      	ldr	r3, [pc, #384]	@ (800aef0 <UART_SetConfig+0x4e4>)
 800ad6e:	fba3 2302 	umull	r2, r3, r3, r2
 800ad72:	095b      	lsrs	r3, r3, #5
 800ad74:	011c      	lsls	r4, r3, #4
 800ad76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ad84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ad88:	4642      	mov	r2, r8
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	1891      	adds	r1, r2, r2
 800ad8e:	61b9      	str	r1, [r7, #24]
 800ad90:	415b      	adcs	r3, r3
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad98:	4641      	mov	r1, r8
 800ad9a:	1851      	adds	r1, r2, r1
 800ad9c:	6139      	str	r1, [r7, #16]
 800ad9e:	4649      	mov	r1, r9
 800ada0:	414b      	adcs	r3, r1
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800adb0:	4659      	mov	r1, fp
 800adb2:	00cb      	lsls	r3, r1, #3
 800adb4:	4651      	mov	r1, sl
 800adb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adba:	4651      	mov	r1, sl
 800adbc:	00ca      	lsls	r2, r1, #3
 800adbe:	4610      	mov	r0, r2
 800adc0:	4619      	mov	r1, r3
 800adc2:	4603      	mov	r3, r0
 800adc4:	4642      	mov	r2, r8
 800adc6:	189b      	adds	r3, r3, r2
 800adc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adcc:	464b      	mov	r3, r9
 800adce:	460a      	mov	r2, r1
 800add0:	eb42 0303 	adc.w	r3, r2, r3
 800add4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800add8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ade2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ade4:	f04f 0200 	mov.w	r2, #0
 800ade8:	f04f 0300 	mov.w	r3, #0
 800adec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800adf0:	4649      	mov	r1, r9
 800adf2:	008b      	lsls	r3, r1, #2
 800adf4:	4641      	mov	r1, r8
 800adf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800adfa:	4641      	mov	r1, r8
 800adfc:	008a      	lsls	r2, r1, #2
 800adfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ae02:	f7f5 fed1 	bl	8000ba8 <__aeabi_uldivmod>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4b38      	ldr	r3, [pc, #224]	@ (800aef0 <UART_SetConfig+0x4e4>)
 800ae0e:	fba3 2301 	umull	r2, r3, r3, r1
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	2264      	movs	r2, #100	@ 0x64
 800ae16:	fb02 f303 	mul.w	r3, r2, r3
 800ae1a:	1acb      	subs	r3, r1, r3
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	3332      	adds	r3, #50	@ 0x32
 800ae20:	4a33      	ldr	r2, [pc, #204]	@ (800aef0 <UART_SetConfig+0x4e4>)
 800ae22:	fba2 2303 	umull	r2, r3, r2, r3
 800ae26:	095b      	lsrs	r3, r3, #5
 800ae28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae2c:	441c      	add	r4, r3
 800ae2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae32:	2200      	movs	r2, #0
 800ae34:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae36:	677a      	str	r2, [r7, #116]	@ 0x74
 800ae38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ae3c:	4642      	mov	r2, r8
 800ae3e:	464b      	mov	r3, r9
 800ae40:	1891      	adds	r1, r2, r2
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	415b      	adcs	r3, r3
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae4c:	4641      	mov	r1, r8
 800ae4e:	1851      	adds	r1, r2, r1
 800ae50:	6039      	str	r1, [r7, #0]
 800ae52:	4649      	mov	r1, r9
 800ae54:	414b      	adcs	r3, r1
 800ae56:	607b      	str	r3, [r7, #4]
 800ae58:	f04f 0200 	mov.w	r2, #0
 800ae5c:	f04f 0300 	mov.w	r3, #0
 800ae60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae64:	4659      	mov	r1, fp
 800ae66:	00cb      	lsls	r3, r1, #3
 800ae68:	4651      	mov	r1, sl
 800ae6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae6e:	4651      	mov	r1, sl
 800ae70:	00ca      	lsls	r2, r1, #3
 800ae72:	4610      	mov	r0, r2
 800ae74:	4619      	mov	r1, r3
 800ae76:	4603      	mov	r3, r0
 800ae78:	4642      	mov	r2, r8
 800ae7a:	189b      	adds	r3, r3, r2
 800ae7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae7e:	464b      	mov	r3, r9
 800ae80:	460a      	mov	r2, r1
 800ae82:	eb42 0303 	adc.w	r3, r2, r3
 800ae86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae92:	667a      	str	r2, [r7, #100]	@ 0x64
 800ae94:	f04f 0200 	mov.w	r2, #0
 800ae98:	f04f 0300 	mov.w	r3, #0
 800ae9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aea0:	4649      	mov	r1, r9
 800aea2:	008b      	lsls	r3, r1, #2
 800aea4:	4641      	mov	r1, r8
 800aea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aeaa:	4641      	mov	r1, r8
 800aeac:	008a      	lsls	r2, r1, #2
 800aeae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aeb2:	f7f5 fe79 	bl	8000ba8 <__aeabi_uldivmod>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4b0d      	ldr	r3, [pc, #52]	@ (800aef0 <UART_SetConfig+0x4e4>)
 800aebc:	fba3 1302 	umull	r1, r3, r3, r2
 800aec0:	095b      	lsrs	r3, r3, #5
 800aec2:	2164      	movs	r1, #100	@ 0x64
 800aec4:	fb01 f303 	mul.w	r3, r1, r3
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	3332      	adds	r3, #50	@ 0x32
 800aece:	4a08      	ldr	r2, [pc, #32]	@ (800aef0 <UART_SetConfig+0x4e4>)
 800aed0:	fba2 2303 	umull	r2, r3, r2, r3
 800aed4:	095b      	lsrs	r3, r3, #5
 800aed6:	f003 020f 	and.w	r2, r3, #15
 800aeda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4422      	add	r2, r4
 800aee2:	609a      	str	r2, [r3, #8]
}
 800aee4:	bf00      	nop
 800aee6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aeea:	46bd      	mov	sp, r7
 800aeec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aef0:	51eb851f 	.word	0x51eb851f

0800aef4 <__NVIC_SetPriority>:
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	6039      	str	r1, [r7, #0]
 800aefe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af04:	2b00      	cmp	r3, #0
 800af06:	db0a      	blt.n	800af1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	490c      	ldr	r1, [pc, #48]	@ (800af40 <__NVIC_SetPriority+0x4c>)
 800af0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af12:	0112      	lsls	r2, r2, #4
 800af14:	b2d2      	uxtb	r2, r2
 800af16:	440b      	add	r3, r1
 800af18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800af1c:	e00a      	b.n	800af34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	b2da      	uxtb	r2, r3
 800af22:	4908      	ldr	r1, [pc, #32]	@ (800af44 <__NVIC_SetPriority+0x50>)
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	f003 030f 	and.w	r3, r3, #15
 800af2a:	3b04      	subs	r3, #4
 800af2c:	0112      	lsls	r2, r2, #4
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	440b      	add	r3, r1
 800af32:	761a      	strb	r2, [r3, #24]
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr
 800af40:	e000e100 	.word	0xe000e100
 800af44:	e000ed00 	.word	0xe000ed00

0800af48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800af4c:	2100      	movs	r1, #0
 800af4e:	f06f 0004 	mvn.w	r0, #4
 800af52:	f7ff ffcf 	bl	800aef4 <__NVIC_SetPriority>
#endif
}
 800af56:	bf00      	nop
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af62:	f3ef 8305 	mrs	r3, IPSR
 800af66:	603b      	str	r3, [r7, #0]
  return(result);
 800af68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800af6e:	f06f 0305 	mvn.w	r3, #5
 800af72:	607b      	str	r3, [r7, #4]
 800af74:	e00c      	b.n	800af90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800af76:	4b0a      	ldr	r3, [pc, #40]	@ (800afa0 <osKernelInitialize+0x44>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d105      	bne.n	800af8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800af7e:	4b08      	ldr	r3, [pc, #32]	@ (800afa0 <osKernelInitialize+0x44>)
 800af80:	2201      	movs	r2, #1
 800af82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800af84:	2300      	movs	r3, #0
 800af86:	607b      	str	r3, [r7, #4]
 800af88:	e002      	b.n	800af90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800af8a:	f04f 33ff 	mov.w	r3, #4294967295
 800af8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af90:	687b      	ldr	r3, [r7, #4]
}
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	20000ddc 	.word	0x20000ddc

0800afa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afaa:	f3ef 8305 	mrs	r3, IPSR
 800afae:	603b      	str	r3, [r7, #0]
  return(result);
 800afb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <osKernelStart+0x1a>
    stat = osErrorISR;
 800afb6:	f06f 0305 	mvn.w	r3, #5
 800afba:	607b      	str	r3, [r7, #4]
 800afbc:	e010      	b.n	800afe0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800afbe:	4b0b      	ldr	r3, [pc, #44]	@ (800afec <osKernelStart+0x48>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d109      	bne.n	800afda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800afc6:	f7ff ffbf 	bl	800af48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800afca:	4b08      	ldr	r3, [pc, #32]	@ (800afec <osKernelStart+0x48>)
 800afcc:	2202      	movs	r2, #2
 800afce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800afd0:	f001 f892 	bl	800c0f8 <vTaskStartScheduler>
      stat = osOK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	607b      	str	r3, [r7, #4]
 800afd8:	e002      	b.n	800afe0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800afda:	f04f 33ff 	mov.w	r3, #4294967295
 800afde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800afe0:	687b      	ldr	r3, [r7, #4]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20000ddc 	.word	0x20000ddc

0800aff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b08e      	sub	sp, #56	@ 0x38
 800aff4:	af04      	add	r7, sp, #16
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800affc:	2300      	movs	r3, #0
 800affe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b000:	f3ef 8305 	mrs	r3, IPSR
 800b004:	617b      	str	r3, [r7, #20]
  return(result);
 800b006:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d17e      	bne.n	800b10a <osThreadNew+0x11a>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d07b      	beq.n	800b10a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b012:	2380      	movs	r3, #128	@ 0x80
 800b014:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b016:	2318      	movs	r3, #24
 800b018:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295
 800b022:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d045      	beq.n	800b0b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d002      	beq.n	800b038 <osThreadNew+0x48>
        name = attr->name;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d008      	beq.n	800b05e <osThreadNew+0x6e>
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	2b38      	cmp	r3, #56	@ 0x38
 800b050:	d805      	bhi.n	800b05e <osThreadNew+0x6e>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d001      	beq.n	800b062 <osThreadNew+0x72>
        return (NULL);
 800b05e:	2300      	movs	r3, #0
 800b060:	e054      	b.n	800b10c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	089b      	lsrs	r3, r3, #2
 800b070:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00e      	beq.n	800b098 <osThreadNew+0xa8>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	2ba7      	cmp	r3, #167	@ 0xa7
 800b080:	d90a      	bls.n	800b098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b086:	2b00      	cmp	r3, #0
 800b088:	d006      	beq.n	800b098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <osThreadNew+0xa8>
        mem = 1;
 800b092:	2301      	movs	r3, #1
 800b094:	61bb      	str	r3, [r7, #24]
 800b096:	e010      	b.n	800b0ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10c      	bne.n	800b0ba <osThreadNew+0xca>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d108      	bne.n	800b0ba <osThreadNew+0xca>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d104      	bne.n	800b0ba <osThreadNew+0xca>
          mem = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	61bb      	str	r3, [r7, #24]
 800b0b4:	e001      	b.n	800b0ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d110      	bne.n	800b0e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b0c8:	9202      	str	r2, [sp, #8]
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	6a3a      	ldr	r2, [r7, #32]
 800b0d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 fe1a 	bl	800bd10 <xTaskCreateStatic>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	613b      	str	r3, [r7, #16]
 800b0e0:	e013      	b.n	800b10a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d110      	bne.n	800b10a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b0e8:	6a3b      	ldr	r3, [r7, #32]
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	f107 0310 	add.w	r3, r7, #16
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f000 fe68 	bl	800bdd0 <xTaskCreate>
 800b100:	4603      	mov	r3, r0
 800b102:	2b01      	cmp	r3, #1
 800b104:	d001      	beq.n	800b10a <osThreadNew+0x11a>
            hTask = NULL;
 800b106:	2300      	movs	r3, #0
 800b108:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b10a:	693b      	ldr	r3, [r7, #16]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3728      	adds	r7, #40	@ 0x28
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b11c:	f3ef 8305 	mrs	r3, IPSR
 800b120:	60bb      	str	r3, [r7, #8]
  return(result);
 800b122:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <osDelay+0x1c>
    stat = osErrorISR;
 800b128:	f06f 0305 	mvn.w	r3, #5
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	e007      	b.n	800b140 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b130:	2300      	movs	r3, #0
 800b132:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 ffa6 	bl	800c08c <vTaskDelay>
    }
  }

  return (stat);
 800b140:	68fb      	ldr	r3, [r7, #12]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4a07      	ldr	r2, [pc, #28]	@ (800b178 <vApplicationGetIdleTaskMemory+0x2c>)
 800b15c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	4a06      	ldr	r2, [pc, #24]	@ (800b17c <vApplicationGetIdleTaskMemory+0x30>)
 800b162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2280      	movs	r2, #128	@ 0x80
 800b168:	601a      	str	r2, [r3, #0]
}
 800b16a:	bf00      	nop
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	20000de0 	.word	0x20000de0
 800b17c:	20000e88 	.word	0x20000e88

0800b180 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4a07      	ldr	r2, [pc, #28]	@ (800b1ac <vApplicationGetTimerTaskMemory+0x2c>)
 800b190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	4a06      	ldr	r2, [pc, #24]	@ (800b1b0 <vApplicationGetTimerTaskMemory+0x30>)
 800b196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b19e:	601a      	str	r2, [r3, #0]
}
 800b1a0:	bf00      	nop
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	20001088 	.word	0x20001088
 800b1b0:	20001130 	.word	0x20001130

0800b1b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f103 0208 	add.w	r2, r3, #8
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f103 0208 	add.w	r2, r3, #8
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f103 0208 	add.w	r2, r3, #8
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b20e:	b480      	push	{r7}
 800b210:	b085      	sub	sp, #20
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	689a      	ldr	r2, [r3, #8]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	601a      	str	r2, [r3, #0]
}
 800b24a:	bf00      	nop
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b256:	b480      	push	{r7}
 800b258:	b085      	sub	sp, #20
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26c:	d103      	bne.n	800b276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	e00c      	b.n	800b290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3308      	adds	r3, #8
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	e002      	b.n	800b284 <vListInsert+0x2e>
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	60fb      	str	r3, [r7, #12]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d2f6      	bcs.n	800b27e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	601a      	str	r2, [r3, #0]
}
 800b2bc:	bf00      	nop
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	6892      	ldr	r2, [r2, #8]
 800b2de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	6852      	ldr	r2, [r2, #4]
 800b2e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d103      	bne.n	800b2fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	1e5a      	subs	r2, r3, #1
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10b      	bne.n	800b348 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b342:	bf00      	nop
 800b344:	bf00      	nop
 800b346:	e7fd      	b.n	800b344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b348:	f002 fa86 	bl	800d858 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b354:	68f9      	ldr	r1, [r7, #12]
 800b356:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b358:	fb01 f303 	mul.w	r3, r1, r3
 800b35c:	441a      	add	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b378:	3b01      	subs	r3, #1
 800b37a:	68f9      	ldr	r1, [r7, #12]
 800b37c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b37e:	fb01 f303 	mul.w	r3, r1, r3
 800b382:	441a      	add	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	22ff      	movs	r2, #255	@ 0xff
 800b38c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	22ff      	movs	r2, #255	@ 0xff
 800b394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d114      	bne.n	800b3c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d01a      	beq.n	800b3dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3310      	adds	r3, #16
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 fa3c 	bl	800c828 <xTaskRemoveFromEventList>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d012      	beq.n	800b3dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ec <xQueueGenericReset+0xd0>)
 800b3b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	e009      	b.n	800b3dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3310      	adds	r3, #16
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7ff fef1 	bl	800b1b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	3324      	adds	r3, #36	@ 0x24
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff feec 	bl	800b1b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b3dc:	f002 fa6e 	bl	800d8bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b3e0:	2301      	movs	r3, #1
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08e      	sub	sp, #56	@ 0x38
 800b3f4:	af02      	add	r7, sp, #8
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10b      	bne.n	800b41c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b416:	bf00      	nop
 800b418:	bf00      	nop
 800b41a:	e7fd      	b.n	800b418 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d10b      	bne.n	800b43a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	e7fd      	b.n	800b436 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <xQueueGenericCreateStatic+0x56>
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d001      	beq.n	800b44a <xQueueGenericCreateStatic+0x5a>
 800b446:	2301      	movs	r3, #1
 800b448:	e000      	b.n	800b44c <xQueueGenericCreateStatic+0x5c>
 800b44a:	2300      	movs	r3, #0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10b      	bne.n	800b468 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	623b      	str	r3, [r7, #32]
}
 800b462:	bf00      	nop
 800b464:	bf00      	nop
 800b466:	e7fd      	b.n	800b464 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <xQueueGenericCreateStatic+0x84>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <xQueueGenericCreateStatic+0x88>
 800b474:	2301      	movs	r3, #1
 800b476:	e000      	b.n	800b47a <xQueueGenericCreateStatic+0x8a>
 800b478:	2300      	movs	r3, #0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10b      	bne.n	800b496 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	61fb      	str	r3, [r7, #28]
}
 800b490:	bf00      	nop
 800b492:	bf00      	nop
 800b494:	e7fd      	b.n	800b492 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b496:	2350      	movs	r3, #80	@ 0x50
 800b498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b50      	cmp	r3, #80	@ 0x50
 800b49e:	d00b      	beq.n	800b4b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	61bb      	str	r3, [r7, #24]
}
 800b4b2:	bf00      	nop
 800b4b4:	bf00      	nop
 800b4b6:	e7fd      	b.n	800b4b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b4b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00d      	beq.n	800b4e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	68b9      	ldr	r1, [r7, #8]
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 f805 	bl	800b4ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3730      	adds	r7, #48	@ 0x30
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	607a      	str	r2, [r7, #4]
 800b4f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d103      	bne.n	800b506 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	e002      	b.n	800b50c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b518:	2101      	movs	r1, #1
 800b51a:	69b8      	ldr	r0, [r7, #24]
 800b51c:	f7ff fefe 	bl	800b31c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	78fa      	ldrb	r2, [r7, #3]
 800b524:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b528:	bf00      	nop
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08e      	sub	sp, #56	@ 0x38
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b53e:	2300      	movs	r3, #0
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10b      	bne.n	800b564 <xQueueGenericSend+0x34>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b55e:	bf00      	nop
 800b560:	bf00      	nop
 800b562:	e7fd      	b.n	800b560 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d103      	bne.n	800b572 <xQueueGenericSend+0x42>
 800b56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <xQueueGenericSend+0x46>
 800b572:	2301      	movs	r3, #1
 800b574:	e000      	b.n	800b578 <xQueueGenericSend+0x48>
 800b576:	2300      	movs	r3, #0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10b      	bne.n	800b594 <xQueueGenericSend+0x64>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b58e:	bf00      	nop
 800b590:	bf00      	nop
 800b592:	e7fd      	b.n	800b590 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d103      	bne.n	800b5a2 <xQueueGenericSend+0x72>
 800b59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d101      	bne.n	800b5a6 <xQueueGenericSend+0x76>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e000      	b.n	800b5a8 <xQueueGenericSend+0x78>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10b      	bne.n	800b5c4 <xQueueGenericSend+0x94>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	623b      	str	r3, [r7, #32]
}
 800b5be:	bf00      	nop
 800b5c0:	bf00      	nop
 800b5c2:	e7fd      	b.n	800b5c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5c4:	f001 faf6 	bl	800cbb4 <xTaskGetSchedulerState>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <xQueueGenericSend+0xa4>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <xQueueGenericSend+0xa8>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e000      	b.n	800b5da <xQueueGenericSend+0xaa>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10b      	bne.n	800b5f6 <xQueueGenericSend+0xc6>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	61fb      	str	r3, [r7, #28]
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	e7fd      	b.n	800b5f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5f6:	f002 f92f 	bl	800d858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b602:	429a      	cmp	r2, r3
 800b604:	d302      	bcc.n	800b60c <xQueueGenericSend+0xdc>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d129      	bne.n	800b660 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b612:	f000 fa0f 	bl	800ba34 <prvCopyDataToQueue>
 800b616:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d010      	beq.n	800b642 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b622:	3324      	adds	r3, #36	@ 0x24
 800b624:	4618      	mov	r0, r3
 800b626:	f001 f8ff 	bl	800c828 <xTaskRemoveFromEventList>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d013      	beq.n	800b658 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b630:	4b3f      	ldr	r3, [pc, #252]	@ (800b730 <xQueueGenericSend+0x200>)
 800b632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	e00a      	b.n	800b658 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d007      	beq.n	800b658 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b648:	4b39      	ldr	r3, [pc, #228]	@ (800b730 <xQueueGenericSend+0x200>)
 800b64a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b658:	f002 f930 	bl	800d8bc <vPortExitCritical>
				return pdPASS;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e063      	b.n	800b728 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d103      	bne.n	800b66e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b666:	f002 f929 	bl	800d8bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	e05c      	b.n	800b728 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b670:	2b00      	cmp	r3, #0
 800b672:	d106      	bne.n	800b682 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b674:	f107 0314 	add.w	r3, r7, #20
 800b678:	4618      	mov	r0, r3
 800b67a:	f001 f939 	bl	800c8f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b67e:	2301      	movs	r3, #1
 800b680:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b682:	f002 f91b 	bl	800d8bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b686:	f000 fda7 	bl	800c1d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b68a:	f002 f8e5 	bl	800d858 <vPortEnterCritical>
 800b68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b694:	b25b      	sxtb	r3, r3
 800b696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69a:	d103      	bne.n	800b6a4 <xQueueGenericSend+0x174>
 800b69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6aa:	b25b      	sxtb	r3, r3
 800b6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b0:	d103      	bne.n	800b6ba <xQueueGenericSend+0x18a>
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6ba:	f002 f8ff 	bl	800d8bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6be:	1d3a      	adds	r2, r7, #4
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 f928 	bl	800c91c <xTaskCheckForTimeOut>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d124      	bne.n	800b71c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6d4:	f000 faa6 	bl	800bc24 <prvIsQueueFull>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d018      	beq.n	800b710 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	3310      	adds	r3, #16
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f001 f84c 	bl	800c784 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6ee:	f000 fa31 	bl	800bb54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b6f2:	f000 fd7f 	bl	800c1f4 <xTaskResumeAll>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f47f af7c 	bne.w	800b5f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b730 <xQueueGenericSend+0x200>)
 800b700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b704:	601a      	str	r2, [r3, #0]
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	e772      	b.n	800b5f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b710:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b712:	f000 fa1f 	bl	800bb54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b716:	f000 fd6d 	bl	800c1f4 <xTaskResumeAll>
 800b71a:	e76c      	b.n	800b5f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b71c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b71e:	f000 fa19 	bl	800bb54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b722:	f000 fd67 	bl	800c1f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b726:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3738      	adds	r7, #56	@ 0x38
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	e000ed04 	.word	0xe000ed04

0800b734 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b090      	sub	sp, #64	@ 0x40
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10b      	bne.n	800b764 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b75e:	bf00      	nop
 800b760:	bf00      	nop
 800b762:	e7fd      	b.n	800b760 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d103      	bne.n	800b772 <xQueueGenericSendFromISR+0x3e>
 800b76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <xQueueGenericSendFromISR+0x42>
 800b772:	2301      	movs	r3, #1
 800b774:	e000      	b.n	800b778 <xQueueGenericSendFromISR+0x44>
 800b776:	2300      	movs	r3, #0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10b      	bne.n	800b794 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b78e:	bf00      	nop
 800b790:	bf00      	nop
 800b792:	e7fd      	b.n	800b790 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b02      	cmp	r3, #2
 800b798:	d103      	bne.n	800b7a2 <xQueueGenericSendFromISR+0x6e>
 800b79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d101      	bne.n	800b7a6 <xQueueGenericSendFromISR+0x72>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e000      	b.n	800b7a8 <xQueueGenericSendFromISR+0x74>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10b      	bne.n	800b7c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	623b      	str	r3, [r7, #32]
}
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	e7fd      	b.n	800b7c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7c4:	f002 f928 	bl	800da18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7c8:	f3ef 8211 	mrs	r2, BASEPRI
 800b7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	61fa      	str	r2, [r7, #28]
 800b7de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b7e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d302      	bcc.n	800b7f6 <xQueueGenericSendFromISR+0xc2>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d12f      	bne.n	800b856 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b804:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	68b9      	ldr	r1, [r7, #8]
 800b80a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b80c:	f000 f912 	bl	800ba34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b810:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b818:	d112      	bne.n	800b840 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d016      	beq.n	800b850 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b824:	3324      	adds	r3, #36	@ 0x24
 800b826:	4618      	mov	r0, r3
 800b828:	f000 fffe 	bl	800c828 <xTaskRemoveFromEventList>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00e      	beq.n	800b850 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00b      	beq.n	800b850 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	e007      	b.n	800b850 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b844:	3301      	adds	r3, #1
 800b846:	b2db      	uxtb	r3, r3
 800b848:	b25a      	sxtb	r2, r3
 800b84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b850:	2301      	movs	r3, #1
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b854:	e001      	b.n	800b85a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b856:	2300      	movs	r3, #0
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b85c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b864:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3740      	adds	r7, #64	@ 0x40
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b08c      	sub	sp, #48	@ 0x30
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b87c:	2300      	movs	r3, #0
 800b87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10b      	bne.n	800b8a2 <xQueueReceive+0x32>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	623b      	str	r3, [r7, #32]
}
 800b89c:	bf00      	nop
 800b89e:	bf00      	nop
 800b8a0:	e7fd      	b.n	800b89e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d103      	bne.n	800b8b0 <xQueueReceive+0x40>
 800b8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <xQueueReceive+0x44>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e000      	b.n	800b8b6 <xQueueReceive+0x46>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <xQueueReceive+0x62>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	61fb      	str	r3, [r7, #28]
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	e7fd      	b.n	800b8ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8d2:	f001 f96f 	bl	800cbb4 <xTaskGetSchedulerState>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d102      	bne.n	800b8e2 <xQueueReceive+0x72>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <xQueueReceive+0x76>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e000      	b.n	800b8e8 <xQueueReceive+0x78>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10b      	bne.n	800b904 <xQueueReceive+0x94>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	61bb      	str	r3, [r7, #24]
}
 800b8fe:	bf00      	nop
 800b900:	bf00      	nop
 800b902:	e7fd      	b.n	800b900 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b904:	f001 ffa8 	bl	800d858 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b90c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b910:	2b00      	cmp	r3, #0
 800b912:	d01f      	beq.n	800b954 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b914:	68b9      	ldr	r1, [r7, #8]
 800b916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b918:	f000 f8f6 	bl	800bb08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91e:	1e5a      	subs	r2, r3, #1
 800b920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b922:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00f      	beq.n	800b94c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92e:	3310      	adds	r3, #16
 800b930:	4618      	mov	r0, r3
 800b932:	f000 ff79 	bl	800c828 <xTaskRemoveFromEventList>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d007      	beq.n	800b94c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b93c:	4b3c      	ldr	r3, [pc, #240]	@ (800ba30 <xQueueReceive+0x1c0>)
 800b93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b94c:	f001 ffb6 	bl	800d8bc <vPortExitCritical>
				return pdPASS;
 800b950:	2301      	movs	r3, #1
 800b952:	e069      	b.n	800ba28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b95a:	f001 ffaf 	bl	800d8bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b95e:	2300      	movs	r3, #0
 800b960:	e062      	b.n	800ba28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d106      	bne.n	800b976 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b968:	f107 0310 	add.w	r3, r7, #16
 800b96c:	4618      	mov	r0, r3
 800b96e:	f000 ffbf 	bl	800c8f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b972:	2301      	movs	r3, #1
 800b974:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b976:	f001 ffa1 	bl	800d8bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b97a:	f000 fc2d 	bl	800c1d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b97e:	f001 ff6b 	bl	800d858 <vPortEnterCritical>
 800b982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b988:	b25b      	sxtb	r3, r3
 800b98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98e:	d103      	bne.n	800b998 <xQueueReceive+0x128>
 800b990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b99e:	b25b      	sxtb	r3, r3
 800b9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a4:	d103      	bne.n	800b9ae <xQueueReceive+0x13e>
 800b9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9ae:	f001 ff85 	bl	800d8bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9b2:	1d3a      	adds	r2, r7, #4
 800b9b4:	f107 0310 	add.w	r3, r7, #16
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 ffae 	bl	800c91c <xTaskCheckForTimeOut>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d123      	bne.n	800ba0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9c8:	f000 f916 	bl	800bbf8 <prvIsQueueEmpty>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d017      	beq.n	800ba02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d4:	3324      	adds	r3, #36	@ 0x24
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	4611      	mov	r1, r2
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 fed2 	bl	800c784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9e2:	f000 f8b7 	bl	800bb54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b9e6:	f000 fc05 	bl	800c1f4 <xTaskResumeAll>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d189      	bne.n	800b904 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800ba30 <xQueueReceive+0x1c0>)
 800b9f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	e780      	b.n	800b904 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba04:	f000 f8a6 	bl	800bb54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba08:	f000 fbf4 	bl	800c1f4 <xTaskResumeAll>
 800ba0c:	e77a      	b.n	800b904 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba10:	f000 f8a0 	bl	800bb54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba14:	f000 fbee 	bl	800c1f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba1a:	f000 f8ed 	bl	800bbf8 <prvIsQueueEmpty>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f43f af6f 	beq.w	800b904 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3730      	adds	r7, #48	@ 0x30
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	e000ed04 	.word	0xe000ed04

0800ba34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10d      	bne.n	800ba6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d14d      	bne.n	800baf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f001 f8c6 	bl	800cbf0 <xTaskPriorityDisinherit>
 800ba64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	609a      	str	r2, [r3, #8]
 800ba6c:	e043      	b.n	800baf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d119      	bne.n	800baa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6858      	ldr	r0, [r3, #4]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	68b9      	ldr	r1, [r7, #8]
 800ba80:	f003 f84d 	bl	800eb1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba8c:	441a      	add	r2, r3
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d32b      	bcc.n	800baf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	605a      	str	r2, [r3, #4]
 800baa6:	e026      	b.n	800baf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	68d8      	ldr	r0, [r3, #12]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab0:	461a      	mov	r2, r3
 800bab2:	68b9      	ldr	r1, [r7, #8]
 800bab4:	f003 f833 	bl	800eb1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	68da      	ldr	r2, [r3, #12]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac0:	425b      	negs	r3, r3
 800bac2:	441a      	add	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	68da      	ldr	r2, [r3, #12]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d207      	bcs.n	800bae4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800badc:	425b      	negs	r3, r3
 800bade:	441a      	add	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d105      	bne.n	800baf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bafe:	697b      	ldr	r3, [r7, #20]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d018      	beq.n	800bb4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68da      	ldr	r2, [r3, #12]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb22:	441a      	add	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	68da      	ldr	r2, [r3, #12]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d303      	bcc.n	800bb3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68d9      	ldr	r1, [r3, #12]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb44:	461a      	mov	r2, r3
 800bb46:	6838      	ldr	r0, [r7, #0]
 800bb48:	f002 ffe9 	bl	800eb1e <memcpy>
	}
}
 800bb4c:	bf00      	nop
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb5c:	f001 fe7c 	bl	800d858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb68:	e011      	b.n	800bb8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d012      	beq.n	800bb98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	3324      	adds	r3, #36	@ 0x24
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 fe56 	bl	800c828 <xTaskRemoveFromEventList>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb82:	f000 ff2f 	bl	800c9e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	dce9      	bgt.n	800bb6a <prvUnlockQueue+0x16>
 800bb96:	e000      	b.n	800bb9a <prvUnlockQueue+0x46>
					break;
 800bb98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	22ff      	movs	r2, #255	@ 0xff
 800bb9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bba2:	f001 fe8b 	bl	800d8bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bba6:	f001 fe57 	bl	800d858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbb2:	e011      	b.n	800bbd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d012      	beq.n	800bbe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	3310      	adds	r3, #16
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 fe31 	bl	800c828 <xTaskRemoveFromEventList>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bbcc:	f000 ff0a 	bl	800c9e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	dce9      	bgt.n	800bbb4 <prvUnlockQueue+0x60>
 800bbe0:	e000      	b.n	800bbe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bbe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	22ff      	movs	r2, #255	@ 0xff
 800bbe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bbec:	f001 fe66 	bl	800d8bc <vPortExitCritical>
}
 800bbf0:	bf00      	nop
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc00:	f001 fe2a 	bl	800d858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d102      	bne.n	800bc12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	60fb      	str	r3, [r7, #12]
 800bc10:	e001      	b.n	800bc16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc12:	2300      	movs	r3, #0
 800bc14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc16:	f001 fe51 	bl	800d8bc <vPortExitCritical>

	return xReturn;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc2c:	f001 fe14 	bl	800d858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d102      	bne.n	800bc42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	e001      	b.n	800bc46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc42:	2300      	movs	r3, #0
 800bc44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc46:	f001 fe39 	bl	800d8bc <vPortExitCritical>

	return xReturn;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	e014      	b.n	800bc8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc64:	4a0f      	ldr	r2, [pc, #60]	@ (800bca4 <vQueueAddToRegistry+0x50>)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10b      	bne.n	800bc88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc70:	490c      	ldr	r1, [pc, #48]	@ (800bca4 <vQueueAddToRegistry+0x50>)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc7a:	4a0a      	ldr	r2, [pc, #40]	@ (800bca4 <vQueueAddToRegistry+0x50>)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	4413      	add	r3, r2
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc86:	e006      	b.n	800bc96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b07      	cmp	r3, #7
 800bc92:	d9e7      	bls.n	800bc64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc94:	bf00      	nop
 800bc96:	bf00      	nop
 800bc98:	3714      	adds	r7, #20
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	20001530 	.word	0x20001530

0800bca8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bcb8:	f001 fdce 	bl	800d858 <vPortEnterCritical>
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bcc2:	b25b      	sxtb	r3, r3
 800bcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc8:	d103      	bne.n	800bcd2 <vQueueWaitForMessageRestricted+0x2a>
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcd8:	b25b      	sxtb	r3, r3
 800bcda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcde:	d103      	bne.n	800bce8 <vQueueWaitForMessageRestricted+0x40>
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bce8:	f001 fde8 	bl	800d8bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d106      	bne.n	800bd02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	3324      	adds	r3, #36	@ 0x24
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	68b9      	ldr	r1, [r7, #8]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f000 fd67 	bl	800c7d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd02:	6978      	ldr	r0, [r7, #20]
 800bd04:	f7ff ff26 	bl	800bb54 <prvUnlockQueue>
	}
 800bd08:	bf00      	nop
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08e      	sub	sp, #56	@ 0x38
 800bd14:	af04      	add	r7, sp, #16
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10b      	bne.n	800bd3c <xTaskCreateStatic+0x2c>
	__asm volatile
 800bd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	623b      	str	r3, [r7, #32]
}
 800bd36:	bf00      	nop
 800bd38:	bf00      	nop
 800bd3a:	e7fd      	b.n	800bd38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10b      	bne.n	800bd5a <xTaskCreateStatic+0x4a>
	__asm volatile
 800bd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	61fb      	str	r3, [r7, #28]
}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop
 800bd58:	e7fd      	b.n	800bd56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd5a:	23a8      	movs	r3, #168	@ 0xa8
 800bd5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2ba8      	cmp	r3, #168	@ 0xa8
 800bd62:	d00b      	beq.n	800bd7c <xTaskCreateStatic+0x6c>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	61bb      	str	r3, [r7, #24]
}
 800bd76:	bf00      	nop
 800bd78:	bf00      	nop
 800bd7a:	e7fd      	b.n	800bd78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d01e      	beq.n	800bdc2 <xTaskCreateStatic+0xb2>
 800bd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d01b      	beq.n	800bdc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd96:	2202      	movs	r2, #2
 800bd98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9303      	str	r3, [sp, #12]
 800bda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda2:	9302      	str	r3, [sp, #8]
 800bda4:	f107 0314 	add.w	r3, r7, #20
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	68b9      	ldr	r1, [r7, #8]
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f000 f851 	bl	800be5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdbc:	f000 f8f6 	bl	800bfac <prvAddNewTaskToReadyList>
 800bdc0:	e001      	b.n	800bdc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bdc6:	697b      	ldr	r3, [r7, #20]
	}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3728      	adds	r7, #40	@ 0x28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08c      	sub	sp, #48	@ 0x30
 800bdd4:	af04      	add	r7, sp, #16
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	4613      	mov	r3, r2
 800bdde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bde0:	88fb      	ldrh	r3, [r7, #6]
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4618      	mov	r0, r3
 800bde6:	f001 fe59 	bl	800da9c <pvPortMalloc>
 800bdea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00e      	beq.n	800be10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bdf2:	20a8      	movs	r0, #168	@ 0xa8
 800bdf4:	f001 fe52 	bl	800da9c <pvPortMalloc>
 800bdf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	631a      	str	r2, [r3, #48]	@ 0x30
 800be06:	e005      	b.n	800be14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be08:	6978      	ldr	r0, [r7, #20]
 800be0a:	f001 ff15 	bl	800dc38 <vPortFree>
 800be0e:	e001      	b.n	800be14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be10:	2300      	movs	r3, #0
 800be12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d017      	beq.n	800be4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	2200      	movs	r2, #0
 800be1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be22:	88fa      	ldrh	r2, [r7, #6]
 800be24:	2300      	movs	r3, #0
 800be26:	9303      	str	r3, [sp, #12]
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 f80f 	bl	800be5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be3e:	69f8      	ldr	r0, [r7, #28]
 800be40:	f000 f8b4 	bl	800bfac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be44:	2301      	movs	r3, #1
 800be46:	61bb      	str	r3, [r7, #24]
 800be48:	e002      	b.n	800be50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be4a:	f04f 33ff 	mov.w	r3, #4294967295
 800be4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be50:	69bb      	ldr	r3, [r7, #24]
	}
 800be52:	4618      	mov	r0, r3
 800be54:	3720      	adds	r7, #32
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
	...

0800be5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b088      	sub	sp, #32
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	461a      	mov	r2, r3
 800be74:	21a5      	movs	r1, #165	@ 0xa5
 800be76:	f002 fd7d 	bl	800e974 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be84:	3b01      	subs	r3, #1
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	f023 0307 	bic.w	r3, r3, #7
 800be92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00b      	beq.n	800beb6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	617b      	str	r3, [r7, #20]
}
 800beb0:	bf00      	nop
 800beb2:	bf00      	nop
 800beb4:	e7fd      	b.n	800beb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d01f      	beq.n	800befc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bebc:	2300      	movs	r3, #0
 800bebe:	61fb      	str	r3, [r7, #28]
 800bec0:	e012      	b.n	800bee8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	4413      	add	r3, r2
 800bec8:	7819      	ldrb	r1, [r3, #0]
 800beca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	4413      	add	r3, r2
 800bed0:	3334      	adds	r3, #52	@ 0x34
 800bed2:	460a      	mov	r2, r1
 800bed4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	4413      	add	r3, r2
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d006      	beq.n	800bef0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	3301      	adds	r3, #1
 800bee6:	61fb      	str	r3, [r7, #28]
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	2b0f      	cmp	r3, #15
 800beec:	d9e9      	bls.n	800bec2 <prvInitialiseNewTask+0x66>
 800beee:	e000      	b.n	800bef2 <prvInitialiseNewTask+0x96>
			{
				break;
 800bef0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800befa:	e003      	b.n	800bf04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800befc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf06:	2b37      	cmp	r3, #55	@ 0x37
 800bf08:	d901      	bls.n	800bf0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf0a:	2337      	movs	r3, #55	@ 0x37
 800bf0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf22:	3304      	adds	r3, #4
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff f965 	bl	800b1f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2c:	3318      	adds	r3, #24
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7ff f960 	bl	800b1f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5c:	3354      	adds	r3, #84	@ 0x54
 800bf5e:	224c      	movs	r2, #76	@ 0x4c
 800bf60:	2100      	movs	r1, #0
 800bf62:	4618      	mov	r0, r3
 800bf64:	f002 fd06 	bl	800e974 <memset>
 800bf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6a:	4a0d      	ldr	r2, [pc, #52]	@ (800bfa0 <prvInitialiseNewTask+0x144>)
 800bf6c:	659a      	str	r2, [r3, #88]	@ 0x58
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa4 <prvInitialiseNewTask+0x148>)
 800bf72:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf76:	4a0c      	ldr	r2, [pc, #48]	@ (800bfa8 <prvInitialiseNewTask+0x14c>)
 800bf78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	68f9      	ldr	r1, [r7, #12]
 800bf7e:	69b8      	ldr	r0, [r7, #24]
 800bf80:	f001 fb36 	bl	800d5f0 <pxPortInitialiseStack>
 800bf84:	4602      	mov	r2, r0
 800bf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf96:	bf00      	nop
 800bf98:	3720      	adds	r7, #32
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	200057c4 	.word	0x200057c4
 800bfa4:	2000582c 	.word	0x2000582c
 800bfa8:	20005894 	.word	0x20005894

0800bfac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfb4:	f001 fc50 	bl	800d858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfb8:	4b2d      	ldr	r3, [pc, #180]	@ (800c070 <prvAddNewTaskToReadyList+0xc4>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	4a2c      	ldr	r2, [pc, #176]	@ (800c070 <prvAddNewTaskToReadyList+0xc4>)
 800bfc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfc2:	4b2c      	ldr	r3, [pc, #176]	@ (800c074 <prvAddNewTaskToReadyList+0xc8>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d109      	bne.n	800bfde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bfca:	4a2a      	ldr	r2, [pc, #168]	@ (800c074 <prvAddNewTaskToReadyList+0xc8>)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bfd0:	4b27      	ldr	r3, [pc, #156]	@ (800c070 <prvAddNewTaskToReadyList+0xc4>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d110      	bne.n	800bffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bfd8:	f000 fd28 	bl	800ca2c <prvInitialiseTaskLists>
 800bfdc:	e00d      	b.n	800bffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bfde:	4b26      	ldr	r3, [pc, #152]	@ (800c078 <prvAddNewTaskToReadyList+0xcc>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d109      	bne.n	800bffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bfe6:	4b23      	ldr	r3, [pc, #140]	@ (800c074 <prvAddNewTaskToReadyList+0xc8>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d802      	bhi.n	800bffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bff4:	4a1f      	ldr	r2, [pc, #124]	@ (800c074 <prvAddNewTaskToReadyList+0xc8>)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bffa:	4b20      	ldr	r3, [pc, #128]	@ (800c07c <prvAddNewTaskToReadyList+0xd0>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3301      	adds	r3, #1
 800c000:	4a1e      	ldr	r2, [pc, #120]	@ (800c07c <prvAddNewTaskToReadyList+0xd0>)
 800c002:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c004:	4b1d      	ldr	r3, [pc, #116]	@ (800c07c <prvAddNewTaskToReadyList+0xd0>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c010:	4b1b      	ldr	r3, [pc, #108]	@ (800c080 <prvAddNewTaskToReadyList+0xd4>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d903      	bls.n	800c020 <prvAddNewTaskToReadyList+0x74>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01c:	4a18      	ldr	r2, [pc, #96]	@ (800c080 <prvAddNewTaskToReadyList+0xd4>)
 800c01e:	6013      	str	r3, [r2, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c024:	4613      	mov	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4a15      	ldr	r2, [pc, #84]	@ (800c084 <prvAddNewTaskToReadyList+0xd8>)
 800c02e:	441a      	add	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	3304      	adds	r3, #4
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f7ff f8e9 	bl	800b20e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c03c:	f001 fc3e 	bl	800d8bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c040:	4b0d      	ldr	r3, [pc, #52]	@ (800c078 <prvAddNewTaskToReadyList+0xcc>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00e      	beq.n	800c066 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c048:	4b0a      	ldr	r3, [pc, #40]	@ (800c074 <prvAddNewTaskToReadyList+0xc8>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c052:	429a      	cmp	r2, r3
 800c054:	d207      	bcs.n	800c066 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c056:	4b0c      	ldr	r3, [pc, #48]	@ (800c088 <prvAddNewTaskToReadyList+0xdc>)
 800c058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c05c:	601a      	str	r2, [r3, #0]
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c066:	bf00      	nop
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20001a44 	.word	0x20001a44
 800c074:	20001570 	.word	0x20001570
 800c078:	20001a50 	.word	0x20001a50
 800c07c:	20001a60 	.word	0x20001a60
 800c080:	20001a4c 	.word	0x20001a4c
 800c084:	20001574 	.word	0x20001574
 800c088:	e000ed04 	.word	0xe000ed04

0800c08c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c094:	2300      	movs	r3, #0
 800c096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d018      	beq.n	800c0d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c09e:	4b14      	ldr	r3, [pc, #80]	@ (800c0f0 <vTaskDelay+0x64>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00b      	beq.n	800c0be <vTaskDelay+0x32>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	60bb      	str	r3, [r7, #8]
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop
 800c0bc:	e7fd      	b.n	800c0ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0be:	f000 f88b 	bl	800c1d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fee5 	bl	800ce94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0ca:	f000 f893 	bl	800c1f4 <xTaskResumeAll>
 800c0ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d107      	bne.n	800c0e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c0d6:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <vTaskDelay+0x68>)
 800c0d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0e6:	bf00      	nop
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20001a6c 	.word	0x20001a6c
 800c0f4:	e000ed04 	.word	0xe000ed04

0800c0f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	@ 0x28
 800c0fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c102:	2300      	movs	r3, #0
 800c104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c106:	463a      	mov	r2, r7
 800c108:	1d39      	adds	r1, r7, #4
 800c10a:	f107 0308 	add.w	r3, r7, #8
 800c10e:	4618      	mov	r0, r3
 800c110:	f7ff f81c 	bl	800b14c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	9202      	str	r2, [sp, #8]
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	2300      	movs	r3, #0
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	2300      	movs	r3, #0
 800c124:	460a      	mov	r2, r1
 800c126:	4924      	ldr	r1, [pc, #144]	@ (800c1b8 <vTaskStartScheduler+0xc0>)
 800c128:	4824      	ldr	r0, [pc, #144]	@ (800c1bc <vTaskStartScheduler+0xc4>)
 800c12a:	f7ff fdf1 	bl	800bd10 <xTaskCreateStatic>
 800c12e:	4603      	mov	r3, r0
 800c130:	4a23      	ldr	r2, [pc, #140]	@ (800c1c0 <vTaskStartScheduler+0xc8>)
 800c132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c134:	4b22      	ldr	r3, [pc, #136]	@ (800c1c0 <vTaskStartScheduler+0xc8>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d002      	beq.n	800c142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c13c:	2301      	movs	r3, #1
 800c13e:	617b      	str	r3, [r7, #20]
 800c140:	e001      	b.n	800c146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d102      	bne.n	800c152 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c14c:	f000 fef6 	bl	800cf3c <xTimerCreateTimerTask>
 800c150:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d11b      	bne.n	800c190 <vTaskStartScheduler+0x98>
	__asm volatile
 800c158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	613b      	str	r3, [r7, #16]
}
 800c16a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c16c:	4b15      	ldr	r3, [pc, #84]	@ (800c1c4 <vTaskStartScheduler+0xcc>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	3354      	adds	r3, #84	@ 0x54
 800c172:	4a15      	ldr	r2, [pc, #84]	@ (800c1c8 <vTaskStartScheduler+0xd0>)
 800c174:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c176:	4b15      	ldr	r3, [pc, #84]	@ (800c1cc <vTaskStartScheduler+0xd4>)
 800c178:	f04f 32ff 	mov.w	r2, #4294967295
 800c17c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c17e:	4b14      	ldr	r3, [pc, #80]	@ (800c1d0 <vTaskStartScheduler+0xd8>)
 800c180:	2201      	movs	r2, #1
 800c182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c184:	4b13      	ldr	r3, [pc, #76]	@ (800c1d4 <vTaskStartScheduler+0xdc>)
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c18a:	f001 fac1 	bl	800d710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c18e:	e00f      	b.n	800c1b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c196:	d10b      	bne.n	800c1b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	60fb      	str	r3, [r7, #12]
}
 800c1aa:	bf00      	nop
 800c1ac:	bf00      	nop
 800c1ae:	e7fd      	b.n	800c1ac <vTaskStartScheduler+0xb4>
}
 800c1b0:	bf00      	nop
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	08010ca4 	.word	0x08010ca4
 800c1bc:	0800c9fd 	.word	0x0800c9fd
 800c1c0:	20001a68 	.word	0x20001a68
 800c1c4:	20001570 	.word	0x20001570
 800c1c8:	200000a0 	.word	0x200000a0
 800c1cc:	20001a64 	.word	0x20001a64
 800c1d0:	20001a50 	.word	0x20001a50
 800c1d4:	20001a48 	.word	0x20001a48

0800c1d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1d8:	b480      	push	{r7}
 800c1da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1dc:	4b04      	ldr	r3, [pc, #16]	@ (800c1f0 <vTaskSuspendAll+0x18>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	4a03      	ldr	r2, [pc, #12]	@ (800c1f0 <vTaskSuspendAll+0x18>)
 800c1e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c1e6:	bf00      	nop
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	20001a6c 	.word	0x20001a6c

0800c1f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1fe:	2300      	movs	r3, #0
 800c200:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c202:	4b42      	ldr	r3, [pc, #264]	@ (800c30c <xTaskResumeAll+0x118>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10b      	bne.n	800c222 <xTaskResumeAll+0x2e>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	603b      	str	r3, [r7, #0]
}
 800c21c:	bf00      	nop
 800c21e:	bf00      	nop
 800c220:	e7fd      	b.n	800c21e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c222:	f001 fb19 	bl	800d858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c226:	4b39      	ldr	r3, [pc, #228]	@ (800c30c <xTaskResumeAll+0x118>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	4a37      	ldr	r2, [pc, #220]	@ (800c30c <xTaskResumeAll+0x118>)
 800c22e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c230:	4b36      	ldr	r3, [pc, #216]	@ (800c30c <xTaskResumeAll+0x118>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d162      	bne.n	800c2fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c238:	4b35      	ldr	r3, [pc, #212]	@ (800c310 <xTaskResumeAll+0x11c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d05e      	beq.n	800c2fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c240:	e02f      	b.n	800c2a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c242:	4b34      	ldr	r3, [pc, #208]	@ (800c314 <xTaskResumeAll+0x120>)
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3318      	adds	r3, #24
 800c24e:	4618      	mov	r0, r3
 800c250:	f7ff f83a 	bl	800b2c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3304      	adds	r3, #4
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff f835 	bl	800b2c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c262:	4b2d      	ldr	r3, [pc, #180]	@ (800c318 <xTaskResumeAll+0x124>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	429a      	cmp	r2, r3
 800c268:	d903      	bls.n	800c272 <xTaskResumeAll+0x7e>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c26e:	4a2a      	ldr	r2, [pc, #168]	@ (800c318 <xTaskResumeAll+0x124>)
 800c270:	6013      	str	r3, [r2, #0]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c276:	4613      	mov	r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4a27      	ldr	r2, [pc, #156]	@ (800c31c <xTaskResumeAll+0x128>)
 800c280:	441a      	add	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3304      	adds	r3, #4
 800c286:	4619      	mov	r1, r3
 800c288:	4610      	mov	r0, r2
 800c28a:	f7fe ffc0 	bl	800b20e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c292:	4b23      	ldr	r3, [pc, #140]	@ (800c320 <xTaskResumeAll+0x12c>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c298:	429a      	cmp	r2, r3
 800c29a:	d302      	bcc.n	800c2a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c29c:	4b21      	ldr	r3, [pc, #132]	@ (800c324 <xTaskResumeAll+0x130>)
 800c29e:	2201      	movs	r2, #1
 800c2a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	@ (800c314 <xTaskResumeAll+0x120>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1cb      	bne.n	800c242 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2b0:	f000 fc60 	bl	800cb74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2b4:	4b1c      	ldr	r3, [pc, #112]	@ (800c328 <xTaskResumeAll+0x134>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d010      	beq.n	800c2e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2c0:	f000 f940 	bl	800c544 <xTaskIncrementTick>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d002      	beq.n	800c2d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c2ca:	4b16      	ldr	r3, [pc, #88]	@ (800c324 <xTaskResumeAll+0x130>)
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1f1      	bne.n	800c2c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c2dc:	4b12      	ldr	r3, [pc, #72]	@ (800c328 <xTaskResumeAll+0x134>)
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2e2:	4b10      	ldr	r3, [pc, #64]	@ (800c324 <xTaskResumeAll+0x130>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d009      	beq.n	800c2fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c32c <xTaskResumeAll+0x138>)
 800c2f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2f4:	601a      	str	r2, [r3, #0]
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2fe:	f001 fadd 	bl	800d8bc <vPortExitCritical>

	return xAlreadyYielded;
 800c302:	68bb      	ldr	r3, [r7, #8]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20001a6c 	.word	0x20001a6c
 800c310:	20001a44 	.word	0x20001a44
 800c314:	20001a04 	.word	0x20001a04
 800c318:	20001a4c 	.word	0x20001a4c
 800c31c:	20001574 	.word	0x20001574
 800c320:	20001570 	.word	0x20001570
 800c324:	20001a58 	.word	0x20001a58
 800c328:	20001a54 	.word	0x20001a54
 800c32c:	e000ed04 	.word	0xe000ed04

0800c330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c336:	4b05      	ldr	r3, [pc, #20]	@ (800c34c <xTaskGetTickCount+0x1c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c33c:	687b      	ldr	r3, [r7, #4]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	20001a48 	.word	0x20001a48

0800c350 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d102      	bne.n	800c364 <pcTaskGetName+0x14>
 800c35e:	4b0e      	ldr	r3, [pc, #56]	@ (800c398 <pcTaskGetName+0x48>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	e000      	b.n	800c366 <pcTaskGetName+0x16>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10b      	bne.n	800c386 <pcTaskGetName+0x36>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	60bb      	str	r3, [r7, #8]
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	e7fd      	b.n	800c382 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	3334      	adds	r3, #52	@ 0x34
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	20001570 	.word	0x20001570

0800c39c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800c39c:	b480      	push	{r7}
 800c39e:	b08b      	sub	sp, #44	@ 0x2c
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d05b      	beq.n	800c46a <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	61bb      	str	r3, [r7, #24]
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	605a      	str	r2, [r3, #4]
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	685a      	ldr	r2, [r3, #4]
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d104      	bne.n	800c3d6 <prvSearchForNameWithinSingleList+0x3a>
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	685a      	ldr	r2, [r3, #4]
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	605a      	str	r2, [r3, #4]
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	685a      	ldr	r2, [r3, #4]
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	605a      	str	r2, [r3, #4]
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	685a      	ldr	r2, [r3, #4]
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	3308      	adds	r3, #8
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d104      	bne.n	800c402 <prvSearchForNameWithinSingleList+0x66>
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	605a      	str	r2, [r3, #4]
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800c40a:	2300      	movs	r3, #0
 800c40c:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c40e:	2300      	movs	r3, #0
 800c410:	623b      	str	r3, [r7, #32]
 800c412:	e01c      	b.n	800c44e <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	4413      	add	r3, r2
 800c41a:	3334      	adds	r3, #52	@ 0x34
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	6a3b      	ldr	r3, [r7, #32]
 800c424:	4413      	add	r3, r2
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	7afa      	ldrb	r2, [r7, #11]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d002      	beq.n	800c434 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800c42e:	2301      	movs	r3, #1
 800c430:	61fb      	str	r3, [r7, #28]
 800c432:	e006      	b.n	800c442 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800c434:	7afb      	ldrb	r3, [r7, #11]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800c43e:	2301      	movs	r3, #1
 800c440:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d106      	bne.n	800c456 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	3301      	adds	r3, #1
 800c44c:	623b      	str	r3, [r7, #32]
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	2b0f      	cmp	r3, #15
 800c452:	d9df      	bls.n	800c414 <prvSearchForNameWithinSingleList+0x78>
 800c454:	e000      	b.n	800c458 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800c456:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800c458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d104      	bne.n	800c468 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	429a      	cmp	r2, r3
 800c464:	d1bb      	bne.n	800c3de <prvSearchForNameWithinSingleList+0x42>
 800c466:	e000      	b.n	800c46a <prvSearchForNameWithinSingleList+0xce>
					break;
 800c468:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800c46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800c46c:	4618      	mov	r0, r3
 800c46e:	372c      	adds	r7, #44	@ 0x2c
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800c480:	2338      	movs	r3, #56	@ 0x38
 800c482:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7f3 fef3 	bl	8000270 <strlen>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b0f      	cmp	r3, #15
 800c48e:	d90b      	bls.n	800c4a8 <xTaskGetHandle+0x30>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	60fb      	str	r3, [r7, #12]
}
 800c4a2:	bf00      	nop
 800c4a4:	bf00      	nop
 800c4a6:	e7fd      	b.n	800c4a4 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800c4a8:	f7ff fe96 	bl	800c1d8 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4a1c      	ldr	r2, [pc, #112]	@ (800c530 <xTaskGetHandle+0xb8>)
 800c4be:	4413      	add	r3, r2
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff ff6a 	bl	800c39c <prvSearchForNameWithinSingleList>
 800c4c8:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d103      	bne.n	800c4d8 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1ea      	bne.n	800c4ac <xTaskGetHandle+0x34>
 800c4d6:	e000      	b.n	800c4da <xTaskGetHandle+0x62>
					break;
 800c4d8:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d106      	bne.n	800c4ee <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800c4e0:	4b14      	ldr	r3, [pc, #80]	@ (800c534 <xTaskGetHandle+0xbc>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6879      	ldr	r1, [r7, #4]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff ff58 	bl	800c39c <prvSearchForNameWithinSingleList>
 800c4ec:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d106      	bne.n	800c502 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800c4f4:	4b10      	ldr	r3, [pc, #64]	@ (800c538 <xTaskGetHandle+0xc0>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	6879      	ldr	r1, [r7, #4]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7ff ff4e 	bl	800c39c <prvSearchForNameWithinSingleList>
 800c500:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d104      	bne.n	800c512 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800c508:	6879      	ldr	r1, [r7, #4]
 800c50a:	480c      	ldr	r0, [pc, #48]	@ (800c53c <xTaskGetHandle+0xc4>)
 800c50c:	f7ff ff46 	bl	800c39c <prvSearchForNameWithinSingleList>
 800c510:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d104      	bne.n	800c522 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800c518:	6879      	ldr	r1, [r7, #4]
 800c51a:	4809      	ldr	r0, [pc, #36]	@ (800c540 <xTaskGetHandle+0xc8>)
 800c51c:	f7ff ff3e 	bl	800c39c <prvSearchForNameWithinSingleList>
 800c520:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800c522:	f7ff fe67 	bl	800c1f4 <xTaskResumeAll>

		return pxTCB;
 800c526:	693b      	ldr	r3, [r7, #16]
	}
 800c528:	4618      	mov	r0, r3
 800c52a:	3718      	adds	r7, #24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20001574 	.word	0x20001574
 800c534:	200019fc 	.word	0x200019fc
 800c538:	20001a00 	.word	0x20001a00
 800c53c:	20001a30 	.word	0x20001a30
 800c540:	20001a18 	.word	0x20001a18

0800c544 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c54a:	2300      	movs	r3, #0
 800c54c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c54e:	4b4f      	ldr	r3, [pc, #316]	@ (800c68c <xTaskIncrementTick+0x148>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	f040 8090 	bne.w	800c678 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c558:	4b4d      	ldr	r3, [pc, #308]	@ (800c690 <xTaskIncrementTick+0x14c>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3301      	adds	r3, #1
 800c55e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c560:	4a4b      	ldr	r2, [pc, #300]	@ (800c690 <xTaskIncrementTick+0x14c>)
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d121      	bne.n	800c5b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c56c:	4b49      	ldr	r3, [pc, #292]	@ (800c694 <xTaskIncrementTick+0x150>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00b      	beq.n	800c58e <xTaskIncrementTick+0x4a>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	603b      	str	r3, [r7, #0]
}
 800c588:	bf00      	nop
 800c58a:	bf00      	nop
 800c58c:	e7fd      	b.n	800c58a <xTaskIncrementTick+0x46>
 800c58e:	4b41      	ldr	r3, [pc, #260]	@ (800c694 <xTaskIncrementTick+0x150>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	60fb      	str	r3, [r7, #12]
 800c594:	4b40      	ldr	r3, [pc, #256]	@ (800c698 <xTaskIncrementTick+0x154>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a3e      	ldr	r2, [pc, #248]	@ (800c694 <xTaskIncrementTick+0x150>)
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	4a3e      	ldr	r2, [pc, #248]	@ (800c698 <xTaskIncrementTick+0x154>)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6013      	str	r3, [r2, #0]
 800c5a2:	4b3e      	ldr	r3, [pc, #248]	@ (800c69c <xTaskIncrementTick+0x158>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	4a3c      	ldr	r2, [pc, #240]	@ (800c69c <xTaskIncrementTick+0x158>)
 800c5aa:	6013      	str	r3, [r2, #0]
 800c5ac:	f000 fae2 	bl	800cb74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5b0:	4b3b      	ldr	r3, [pc, #236]	@ (800c6a0 <xTaskIncrementTick+0x15c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d349      	bcc.n	800c64e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5ba:	4b36      	ldr	r3, [pc, #216]	@ (800c694 <xTaskIncrementTick+0x150>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c4:	4b36      	ldr	r3, [pc, #216]	@ (800c6a0 <xTaskIncrementTick+0x15c>)
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ca:	601a      	str	r2, [r3, #0]
					break;
 800c5cc:	e03f      	b.n	800c64e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5ce:	4b31      	ldr	r3, [pc, #196]	@ (800c694 <xTaskIncrementTick+0x150>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c5de:	693a      	ldr	r2, [r7, #16]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d203      	bcs.n	800c5ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c5e6:	4a2e      	ldr	r2, [pc, #184]	@ (800c6a0 <xTaskIncrementTick+0x15c>)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5ec:	e02f      	b.n	800c64e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fe fe68 	bl	800b2c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d004      	beq.n	800c60a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	3318      	adds	r3, #24
 800c604:	4618      	mov	r0, r3
 800c606:	f7fe fe5f 	bl	800b2c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c60e:	4b25      	ldr	r3, [pc, #148]	@ (800c6a4 <xTaskIncrementTick+0x160>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	429a      	cmp	r2, r3
 800c614:	d903      	bls.n	800c61e <xTaskIncrementTick+0xda>
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61a:	4a22      	ldr	r2, [pc, #136]	@ (800c6a4 <xTaskIncrementTick+0x160>)
 800c61c:	6013      	str	r3, [r2, #0]
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c622:	4613      	mov	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4413      	add	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4a1f      	ldr	r2, [pc, #124]	@ (800c6a8 <xTaskIncrementTick+0x164>)
 800c62c:	441a      	add	r2, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	3304      	adds	r3, #4
 800c632:	4619      	mov	r1, r3
 800c634:	4610      	mov	r0, r2
 800c636:	f7fe fdea 	bl	800b20e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c63e:	4b1b      	ldr	r3, [pc, #108]	@ (800c6ac <xTaskIncrementTick+0x168>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c644:	429a      	cmp	r2, r3
 800c646:	d3b8      	bcc.n	800c5ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c648:	2301      	movs	r3, #1
 800c64a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c64c:	e7b5      	b.n	800c5ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c64e:	4b17      	ldr	r3, [pc, #92]	@ (800c6ac <xTaskIncrementTick+0x168>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c654:	4914      	ldr	r1, [pc, #80]	@ (800c6a8 <xTaskIncrementTick+0x164>)
 800c656:	4613      	mov	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	440b      	add	r3, r1
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d901      	bls.n	800c66a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c666:	2301      	movs	r3, #1
 800c668:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c66a:	4b11      	ldr	r3, [pc, #68]	@ (800c6b0 <xTaskIncrementTick+0x16c>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d007      	beq.n	800c682 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c672:	2301      	movs	r3, #1
 800c674:	617b      	str	r3, [r7, #20]
 800c676:	e004      	b.n	800c682 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c678:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b4 <xTaskIncrementTick+0x170>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3301      	adds	r3, #1
 800c67e:	4a0d      	ldr	r2, [pc, #52]	@ (800c6b4 <xTaskIncrementTick+0x170>)
 800c680:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c682:	697b      	ldr	r3, [r7, #20]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3718      	adds	r7, #24
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	20001a6c 	.word	0x20001a6c
 800c690:	20001a48 	.word	0x20001a48
 800c694:	200019fc 	.word	0x200019fc
 800c698:	20001a00 	.word	0x20001a00
 800c69c:	20001a5c 	.word	0x20001a5c
 800c6a0:	20001a64 	.word	0x20001a64
 800c6a4:	20001a4c 	.word	0x20001a4c
 800c6a8:	20001574 	.word	0x20001574
 800c6ac:	20001570 	.word	0x20001570
 800c6b0:	20001a58 	.word	0x20001a58
 800c6b4:	20001a54 	.word	0x20001a54

0800c6b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6be:	4b2b      	ldr	r3, [pc, #172]	@ (800c76c <vTaskSwitchContext+0xb4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c6c6:	4b2a      	ldr	r3, [pc, #168]	@ (800c770 <vTaskSwitchContext+0xb8>)
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c6cc:	e047      	b.n	800c75e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c6ce:	4b28      	ldr	r3, [pc, #160]	@ (800c770 <vTaskSwitchContext+0xb8>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6d4:	4b27      	ldr	r3, [pc, #156]	@ (800c774 <vTaskSwitchContext+0xbc>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	60fb      	str	r3, [r7, #12]
 800c6da:	e011      	b.n	800c700 <vTaskSwitchContext+0x48>
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10b      	bne.n	800c6fa <vTaskSwitchContext+0x42>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	607b      	str	r3, [r7, #4]
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop
 800c6f8:	e7fd      	b.n	800c6f6 <vTaskSwitchContext+0x3e>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	491d      	ldr	r1, [pc, #116]	@ (800c778 <vTaskSwitchContext+0xc0>)
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	440b      	add	r3, r1
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d0e3      	beq.n	800c6dc <vTaskSwitchContext+0x24>
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	4613      	mov	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4a16      	ldr	r2, [pc, #88]	@ (800c778 <vTaskSwitchContext+0xc0>)
 800c720:	4413      	add	r3, r2
 800c722:	60bb      	str	r3, [r7, #8]
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	605a      	str	r2, [r3, #4]
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	3308      	adds	r3, #8
 800c736:	429a      	cmp	r2, r3
 800c738:	d104      	bne.n	800c744 <vTaskSwitchContext+0x8c>
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	605a      	str	r2, [r3, #4]
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	4a0c      	ldr	r2, [pc, #48]	@ (800c77c <vTaskSwitchContext+0xc4>)
 800c74c:	6013      	str	r3, [r2, #0]
 800c74e:	4a09      	ldr	r2, [pc, #36]	@ (800c774 <vTaskSwitchContext+0xbc>)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c754:	4b09      	ldr	r3, [pc, #36]	@ (800c77c <vTaskSwitchContext+0xc4>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3354      	adds	r3, #84	@ 0x54
 800c75a:	4a09      	ldr	r2, [pc, #36]	@ (800c780 <vTaskSwitchContext+0xc8>)
 800c75c:	6013      	str	r3, [r2, #0]
}
 800c75e:	bf00      	nop
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	20001a6c 	.word	0x20001a6c
 800c770:	20001a58 	.word	0x20001a58
 800c774:	20001a4c 	.word	0x20001a4c
 800c778:	20001574 	.word	0x20001574
 800c77c:	20001570 	.word	0x20001570
 800c780:	200000a0 	.word	0x200000a0

0800c784 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10b      	bne.n	800c7ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	60fb      	str	r3, [r7, #12]
}
 800c7a6:	bf00      	nop
 800c7a8:	bf00      	nop
 800c7aa:	e7fd      	b.n	800c7a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7ac:	4b07      	ldr	r3, [pc, #28]	@ (800c7cc <vTaskPlaceOnEventList+0x48>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	3318      	adds	r3, #24
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7fe fd4e 	bl	800b256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	6838      	ldr	r0, [r7, #0]
 800c7be:	f000 fb69 	bl	800ce94 <prvAddCurrentTaskToDelayedList>
}
 800c7c2:	bf00      	nop
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20001570 	.word	0x20001570

0800c7d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10b      	bne.n	800c7fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	617b      	str	r3, [r7, #20]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c824 <vTaskPlaceOnEventListRestricted+0x54>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	3318      	adds	r3, #24
 800c800:	4619      	mov	r1, r3
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f7fe fd03 	bl	800b20e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c80e:	f04f 33ff 	mov.w	r3, #4294967295
 800c812:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	68b8      	ldr	r0, [r7, #8]
 800c818:	f000 fb3c 	bl	800ce94 <prvAddCurrentTaskToDelayedList>
	}
 800c81c:	bf00      	nop
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	20001570 	.word	0x20001570

0800c828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10b      	bne.n	800c856 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	60fb      	str	r3, [r7, #12]
}
 800c850:	bf00      	nop
 800c852:	bf00      	nop
 800c854:	e7fd      	b.n	800c852 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	3318      	adds	r3, #24
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe fd34 	bl	800b2c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c860:	4b1d      	ldr	r3, [pc, #116]	@ (800c8d8 <xTaskRemoveFromEventList+0xb0>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d11d      	bne.n	800c8a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	3304      	adds	r3, #4
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fe fd2b 	bl	800b2c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c876:	4b19      	ldr	r3, [pc, #100]	@ (800c8dc <xTaskRemoveFromEventList+0xb4>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d903      	bls.n	800c886 <xTaskRemoveFromEventList+0x5e>
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c882:	4a16      	ldr	r2, [pc, #88]	@ (800c8dc <xTaskRemoveFromEventList+0xb4>)
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4a13      	ldr	r2, [pc, #76]	@ (800c8e0 <xTaskRemoveFromEventList+0xb8>)
 800c894:	441a      	add	r2, r3
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	3304      	adds	r3, #4
 800c89a:	4619      	mov	r1, r3
 800c89c:	4610      	mov	r0, r2
 800c89e:	f7fe fcb6 	bl	800b20e <vListInsertEnd>
 800c8a2:	e005      	b.n	800c8b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	3318      	adds	r3, #24
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	480e      	ldr	r0, [pc, #56]	@ (800c8e4 <xTaskRemoveFromEventList+0xbc>)
 800c8ac:	f7fe fcaf 	bl	800b20e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c8e8 <xTaskRemoveFromEventList+0xc0>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d905      	bls.n	800c8ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c8ec <xTaskRemoveFromEventList+0xc4>)
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	e001      	b.n	800c8ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8ce:	697b      	ldr	r3, [r7, #20]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20001a6c 	.word	0x20001a6c
 800c8dc:	20001a4c 	.word	0x20001a4c
 800c8e0:	20001574 	.word	0x20001574
 800c8e4:	20001a04 	.word	0x20001a04
 800c8e8:	20001570 	.word	0x20001570
 800c8ec:	20001a58 	.word	0x20001a58

0800c8f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8f8:	4b06      	ldr	r3, [pc, #24]	@ (800c914 <vTaskInternalSetTimeOutState+0x24>)
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c900:	4b05      	ldr	r3, [pc, #20]	@ (800c918 <vTaskInternalSetTimeOutState+0x28>)
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	605a      	str	r2, [r3, #4]
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	20001a5c 	.word	0x20001a5c
 800c918:	20001a48 	.word	0x20001a48

0800c91c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10b      	bne.n	800c944 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	613b      	str	r3, [r7, #16]
}
 800c93e:	bf00      	nop
 800c940:	bf00      	nop
 800c942:	e7fd      	b.n	800c940 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10b      	bne.n	800c962 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	60fb      	str	r3, [r7, #12]
}
 800c95c:	bf00      	nop
 800c95e:	bf00      	nop
 800c960:	e7fd      	b.n	800c95e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c962:	f000 ff79 	bl	800d858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c966:	4b1d      	ldr	r3, [pc, #116]	@ (800c9dc <xTaskCheckForTimeOut+0xc0>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	69ba      	ldr	r2, [r7, #24]
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97e:	d102      	bne.n	800c986 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c980:	2300      	movs	r3, #0
 800c982:	61fb      	str	r3, [r7, #28]
 800c984:	e023      	b.n	800c9ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	4b15      	ldr	r3, [pc, #84]	@ (800c9e0 <xTaskCheckForTimeOut+0xc4>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d007      	beq.n	800c9a2 <xTaskCheckForTimeOut+0x86>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	69ba      	ldr	r2, [r7, #24]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d302      	bcc.n	800c9a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c99c:	2301      	movs	r3, #1
 800c99e:	61fb      	str	r3, [r7, #28]
 800c9a0:	e015      	b.n	800c9ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d20b      	bcs.n	800c9c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	1ad2      	subs	r2, r2, r3
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7ff ff99 	bl	800c8f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	61fb      	str	r3, [r7, #28]
 800c9c2:	e004      	b.n	800c9ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9ce:	f000 ff75 	bl	800d8bc <vPortExitCritical>

	return xReturn;
 800c9d2:	69fb      	ldr	r3, [r7, #28]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3720      	adds	r7, #32
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	20001a48 	.word	0x20001a48
 800c9e0:	20001a5c 	.word	0x20001a5c

0800c9e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9e8:	4b03      	ldr	r3, [pc, #12]	@ (800c9f8 <vTaskMissedYield+0x14>)
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	601a      	str	r2, [r3, #0]
}
 800c9ee:	bf00      	nop
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	20001a58 	.word	0x20001a58

0800c9fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca04:	f000 f852 	bl	800caac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca08:	4b06      	ldr	r3, [pc, #24]	@ (800ca24 <prvIdleTask+0x28>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d9f9      	bls.n	800ca04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ca10:	4b05      	ldr	r3, [pc, #20]	@ (800ca28 <prvIdleTask+0x2c>)
 800ca12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca20:	e7f0      	b.n	800ca04 <prvIdleTask+0x8>
 800ca22:	bf00      	nop
 800ca24:	20001574 	.word	0x20001574
 800ca28:	e000ed04 	.word	0xe000ed04

0800ca2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca32:	2300      	movs	r3, #0
 800ca34:	607b      	str	r3, [r7, #4]
 800ca36:	e00c      	b.n	800ca52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4413      	add	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4a12      	ldr	r2, [pc, #72]	@ (800ca8c <prvInitialiseTaskLists+0x60>)
 800ca44:	4413      	add	r3, r2
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fe fbb4 	bl	800b1b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	607b      	str	r3, [r7, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b37      	cmp	r3, #55	@ 0x37
 800ca56:	d9ef      	bls.n	800ca38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca58:	480d      	ldr	r0, [pc, #52]	@ (800ca90 <prvInitialiseTaskLists+0x64>)
 800ca5a:	f7fe fbab 	bl	800b1b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca5e:	480d      	ldr	r0, [pc, #52]	@ (800ca94 <prvInitialiseTaskLists+0x68>)
 800ca60:	f7fe fba8 	bl	800b1b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca64:	480c      	ldr	r0, [pc, #48]	@ (800ca98 <prvInitialiseTaskLists+0x6c>)
 800ca66:	f7fe fba5 	bl	800b1b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca6a:	480c      	ldr	r0, [pc, #48]	@ (800ca9c <prvInitialiseTaskLists+0x70>)
 800ca6c:	f7fe fba2 	bl	800b1b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca70:	480b      	ldr	r0, [pc, #44]	@ (800caa0 <prvInitialiseTaskLists+0x74>)
 800ca72:	f7fe fb9f 	bl	800b1b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca76:	4b0b      	ldr	r3, [pc, #44]	@ (800caa4 <prvInitialiseTaskLists+0x78>)
 800ca78:	4a05      	ldr	r2, [pc, #20]	@ (800ca90 <prvInitialiseTaskLists+0x64>)
 800ca7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <prvInitialiseTaskLists+0x7c>)
 800ca7e:	4a05      	ldr	r2, [pc, #20]	@ (800ca94 <prvInitialiseTaskLists+0x68>)
 800ca80:	601a      	str	r2, [r3, #0]
}
 800ca82:	bf00      	nop
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20001574 	.word	0x20001574
 800ca90:	200019d4 	.word	0x200019d4
 800ca94:	200019e8 	.word	0x200019e8
 800ca98:	20001a04 	.word	0x20001a04
 800ca9c:	20001a18 	.word	0x20001a18
 800caa0:	20001a30 	.word	0x20001a30
 800caa4:	200019fc 	.word	0x200019fc
 800caa8:	20001a00 	.word	0x20001a00

0800caac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cab2:	e019      	b.n	800cae8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cab4:	f000 fed0 	bl	800d858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab8:	4b10      	ldr	r3, [pc, #64]	@ (800cafc <prvCheckTasksWaitingTermination+0x50>)
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	3304      	adds	r3, #4
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fe fbff 	bl	800b2c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800caca:	4b0d      	ldr	r3, [pc, #52]	@ (800cb00 <prvCheckTasksWaitingTermination+0x54>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	3b01      	subs	r3, #1
 800cad0:	4a0b      	ldr	r2, [pc, #44]	@ (800cb00 <prvCheckTasksWaitingTermination+0x54>)
 800cad2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cad4:	4b0b      	ldr	r3, [pc, #44]	@ (800cb04 <prvCheckTasksWaitingTermination+0x58>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3b01      	subs	r3, #1
 800cada:	4a0a      	ldr	r2, [pc, #40]	@ (800cb04 <prvCheckTasksWaitingTermination+0x58>)
 800cadc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cade:	f000 feed 	bl	800d8bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 f810 	bl	800cb08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cae8:	4b06      	ldr	r3, [pc, #24]	@ (800cb04 <prvCheckTasksWaitingTermination+0x58>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d1e1      	bne.n	800cab4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800caf0:	bf00      	nop
 800caf2:	bf00      	nop
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	20001a18 	.word	0x20001a18
 800cb00:	20001a44 	.word	0x20001a44
 800cb04:	20001a2c 	.word	0x20001a2c

0800cb08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	3354      	adds	r3, #84	@ 0x54
 800cb14:	4618      	mov	r0, r3
 800cb16:	f001 ff49 	bl	800e9ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d108      	bne.n	800cb36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f001 f885 	bl	800dc38 <vPortFree>
				vPortFree( pxTCB );
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f001 f882 	bl	800dc38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb34:	e019      	b.n	800cb6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d103      	bne.n	800cb48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f001 f879 	bl	800dc38 <vPortFree>
	}
 800cb46:	e010      	b.n	800cb6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d00b      	beq.n	800cb6a <prvDeleteTCB+0x62>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	60fb      	str	r3, [r7, #12]
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop
 800cb68:	e7fd      	b.n	800cb66 <prvDeleteTCB+0x5e>
	}
 800cb6a:	bf00      	nop
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb7a:	4b0c      	ldr	r3, [pc, #48]	@ (800cbac <prvResetNextTaskUnblockTime+0x38>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d104      	bne.n	800cb8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb84:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb0 <prvResetNextTaskUnblockTime+0x3c>)
 800cb86:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb8c:	e008      	b.n	800cba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb8e:	4b07      	ldr	r3, [pc, #28]	@ (800cbac <prvResetNextTaskUnblockTime+0x38>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	4a04      	ldr	r2, [pc, #16]	@ (800cbb0 <prvResetNextTaskUnblockTime+0x3c>)
 800cb9e:	6013      	str	r3, [r2, #0]
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	200019fc 	.word	0x200019fc
 800cbb0:	20001a64 	.word	0x20001a64

0800cbb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cbba:	4b0b      	ldr	r3, [pc, #44]	@ (800cbe8 <xTaskGetSchedulerState+0x34>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d102      	bne.n	800cbc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	e008      	b.n	800cbda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbc8:	4b08      	ldr	r3, [pc, #32]	@ (800cbec <xTaskGetSchedulerState+0x38>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	607b      	str	r3, [r7, #4]
 800cbd4:	e001      	b.n	800cbda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cbda:	687b      	ldr	r3, [r7, #4]
	}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	20001a50 	.word	0x20001a50
 800cbec:	20001a6c 	.word	0x20001a6c

0800cbf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d058      	beq.n	800ccb8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc06:	4b2f      	ldr	r3, [pc, #188]	@ (800ccc4 <xTaskPriorityDisinherit+0xd4>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d00b      	beq.n	800cc28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	60fb      	str	r3, [r7, #12]
}
 800cc22:	bf00      	nop
 800cc24:	bf00      	nop
 800cc26:	e7fd      	b.n	800cc24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10b      	bne.n	800cc48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	60bb      	str	r3, [r7, #8]
}
 800cc42:	bf00      	nop
 800cc44:	bf00      	nop
 800cc46:	e7fd      	b.n	800cc44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc4c:	1e5a      	subs	r2, r3, #1
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d02c      	beq.n	800ccb8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d128      	bne.n	800ccb8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fb2c 	bl	800b2c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc88:	4b0f      	ldr	r3, [pc, #60]	@ (800ccc8 <xTaskPriorityDisinherit+0xd8>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d903      	bls.n	800cc98 <xTaskPriorityDisinherit+0xa8>
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc94:	4a0c      	ldr	r2, [pc, #48]	@ (800ccc8 <xTaskPriorityDisinherit+0xd8>)
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	4413      	add	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4a09      	ldr	r2, [pc, #36]	@ (800cccc <xTaskPriorityDisinherit+0xdc>)
 800cca6:	441a      	add	r2, r3
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	4619      	mov	r1, r3
 800ccae:	4610      	mov	r0, r2
 800ccb0:	f7fe faad 	bl	800b20e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccb8:	697b      	ldr	r3, [r7, #20]
	}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20001570 	.word	0x20001570
 800ccc8:	20001a4c 	.word	0x20001a4c
 800cccc:	20001574 	.word	0x20001574

0800ccd0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ccda:	f000 fdbd 	bl	800d858 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ccde:	4b20      	ldr	r3, [pc, #128]	@ (800cd60 <ulTaskNotifyTake+0x90>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d113      	bne.n	800cd12 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ccea:	4b1d      	ldr	r3, [pc, #116]	@ (800cd60 <ulTaskNotifyTake+0x90>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	6838      	ldr	r0, [r7, #0]
 800ccfe:	f000 f8c9 	bl	800ce94 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cd02:	4b18      	ldr	r3, [pc, #96]	@ (800cd64 <ulTaskNotifyTake+0x94>)
 800cd04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cd12:	f000 fdd3 	bl	800d8bc <vPortExitCritical>

		taskENTER_CRITICAL();
 800cd16:	f000 fd9f 	bl	800d858 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800cd1a:	4b11      	ldr	r3, [pc, #68]	@ (800cd60 <ulTaskNotifyTake+0x90>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cd22:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00e      	beq.n	800cd48 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d005      	beq.n	800cd3c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800cd30:	4b0b      	ldr	r3, [pc, #44]	@ (800cd60 <ulTaskNotifyTake+0x90>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800cd3a:	e005      	b.n	800cd48 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800cd3c:	4b08      	ldr	r3, [pc, #32]	@ (800cd60 <ulTaskNotifyTake+0x90>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	3a01      	subs	r2, #1
 800cd44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd48:	4b05      	ldr	r3, [pc, #20]	@ (800cd60 <ulTaskNotifyTake+0x90>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800cd52:	f000 fdb3 	bl	800d8bc <vPortExitCritical>

		return ulReturn;
 800cd56:	68fb      	ldr	r3, [r7, #12]
	}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	20001570 	.word	0x20001570
 800cd64:	e000ed04 	.word	0xe000ed04

0800cd68 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08a      	sub	sp, #40	@ 0x28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10b      	bne.n	800cd90 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	61bb      	str	r3, [r7, #24]
}
 800cd8a:	bf00      	nop
 800cd8c:	bf00      	nop
 800cd8e:	e7fd      	b.n	800cd8c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd90:	f000 fe42 	bl	800da18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800cd98:	f3ef 8211 	mrs	r2, BASEPRI
 800cd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	617a      	str	r2, [r7, #20]
 800cdae:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cdb0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdb2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800cdba:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbe:	2202      	movs	r2, #2
 800cdc0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cdd2:	7ffb      	ldrb	r3, [r7, #31]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d147      	bne.n	800ce68 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00b      	beq.n	800cdf8 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	60fb      	str	r3, [r7, #12]
}
 800cdf2:	bf00      	nop
 800cdf4:	bf00      	nop
 800cdf6:	e7fd      	b.n	800cdf4 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdf8:	4b20      	ldr	r3, [pc, #128]	@ (800ce7c <vTaskNotifyGiveFromISR+0x114>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d11d      	bne.n	800ce3c <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce02:	3304      	adds	r3, #4
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fa5f 	bl	800b2c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ce80 <vTaskNotifyGiveFromISR+0x118>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d903      	bls.n	800ce1e <vTaskNotifyGiveFromISR+0xb6>
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce1a:	4a19      	ldr	r2, [pc, #100]	@ (800ce80 <vTaskNotifyGiveFromISR+0x118>)
 800ce1c:	6013      	str	r3, [r2, #0]
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce22:	4613      	mov	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4a16      	ldr	r2, [pc, #88]	@ (800ce84 <vTaskNotifyGiveFromISR+0x11c>)
 800ce2c:	441a      	add	r2, r3
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce30:	3304      	adds	r3, #4
 800ce32:	4619      	mov	r1, r3
 800ce34:	4610      	mov	r0, r2
 800ce36:	f7fe f9ea 	bl	800b20e <vListInsertEnd>
 800ce3a:	e005      	b.n	800ce48 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3e:	3318      	adds	r3, #24
 800ce40:	4619      	mov	r1, r3
 800ce42:	4811      	ldr	r0, [pc, #68]	@ (800ce88 <vTaskNotifyGiveFromISR+0x120>)
 800ce44:	f7fe f9e3 	bl	800b20e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ce8c <vTaskNotifyGiveFromISR+0x124>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d908      	bls.n	800ce68 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ce62:	4b0b      	ldr	r3, [pc, #44]	@ (800ce90 <vTaskNotifyGiveFromISR+0x128>)
 800ce64:	2201      	movs	r2, #1
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	6a3b      	ldr	r3, [r7, #32]
 800ce6a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	f383 8811 	msr	BASEPRI, r3
}
 800ce72:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ce74:	bf00      	nop
 800ce76:	3728      	adds	r7, #40	@ 0x28
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	20001a6c 	.word	0x20001a6c
 800ce80:	20001a4c 	.word	0x20001a4c
 800ce84:	20001574 	.word	0x20001574
 800ce88:	20001a04 	.word	0x20001a04
 800ce8c:	20001570 	.word	0x20001570
 800ce90:	20001a58 	.word	0x20001a58

0800ce94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce9e:	4b21      	ldr	r3, [pc, #132]	@ (800cf24 <prvAddCurrentTaskToDelayedList+0x90>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cea4:	4b20      	ldr	r3, [pc, #128]	@ (800cf28 <prvAddCurrentTaskToDelayedList+0x94>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fe fa0c 	bl	800b2c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb6:	d10a      	bne.n	800cece <prvAddCurrentTaskToDelayedList+0x3a>
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d007      	beq.n	800cece <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cebe:	4b1a      	ldr	r3, [pc, #104]	@ (800cf28 <prvAddCurrentTaskToDelayedList+0x94>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4619      	mov	r1, r3
 800cec6:	4819      	ldr	r0, [pc, #100]	@ (800cf2c <prvAddCurrentTaskToDelayedList+0x98>)
 800cec8:	f7fe f9a1 	bl	800b20e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cecc:	e026      	b.n	800cf1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4413      	add	r3, r2
 800ced4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ced6:	4b14      	ldr	r3, [pc, #80]	@ (800cf28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d209      	bcs.n	800cefa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cee6:	4b12      	ldr	r3, [pc, #72]	@ (800cf30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	4b0f      	ldr	r3, [pc, #60]	@ (800cf28 <prvAddCurrentTaskToDelayedList+0x94>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3304      	adds	r3, #4
 800cef0:	4619      	mov	r1, r3
 800cef2:	4610      	mov	r0, r2
 800cef4:	f7fe f9af 	bl	800b256 <vListInsert>
}
 800cef8:	e010      	b.n	800cf1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cefa:	4b0e      	ldr	r3, [pc, #56]	@ (800cf34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	4b0a      	ldr	r3, [pc, #40]	@ (800cf28 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3304      	adds	r3, #4
 800cf04:	4619      	mov	r1, r3
 800cf06:	4610      	mov	r0, r2
 800cf08:	f7fe f9a5 	bl	800b256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d202      	bcs.n	800cf1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cf16:	4a08      	ldr	r2, [pc, #32]	@ (800cf38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	6013      	str	r3, [r2, #0]
}
 800cf1c:	bf00      	nop
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20001a48 	.word	0x20001a48
 800cf28:	20001570 	.word	0x20001570
 800cf2c:	20001a30 	.word	0x20001a30
 800cf30:	20001a00 	.word	0x20001a00
 800cf34:	200019fc 	.word	0x200019fc
 800cf38:	20001a64 	.word	0x20001a64

0800cf3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b08a      	sub	sp, #40	@ 0x28
 800cf40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cf42:	2300      	movs	r3, #0
 800cf44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cf46:	f000 fb13 	bl	800d570 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf4a:	4b1d      	ldr	r3, [pc, #116]	@ (800cfc0 <xTimerCreateTimerTask+0x84>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d021      	beq.n	800cf96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf52:	2300      	movs	r3, #0
 800cf54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf56:	2300      	movs	r3, #0
 800cf58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf5a:	1d3a      	adds	r2, r7, #4
 800cf5c:	f107 0108 	add.w	r1, r7, #8
 800cf60:	f107 030c 	add.w	r3, r7, #12
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe f90b 	bl	800b180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	9202      	str	r2, [sp, #8]
 800cf72:	9301      	str	r3, [sp, #4]
 800cf74:	2302      	movs	r3, #2
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	2300      	movs	r3, #0
 800cf7a:	460a      	mov	r2, r1
 800cf7c:	4911      	ldr	r1, [pc, #68]	@ (800cfc4 <xTimerCreateTimerTask+0x88>)
 800cf7e:	4812      	ldr	r0, [pc, #72]	@ (800cfc8 <xTimerCreateTimerTask+0x8c>)
 800cf80:	f7fe fec6 	bl	800bd10 <xTaskCreateStatic>
 800cf84:	4603      	mov	r3, r0
 800cf86:	4a11      	ldr	r2, [pc, #68]	@ (800cfcc <xTimerCreateTimerTask+0x90>)
 800cf88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf8a:	4b10      	ldr	r3, [pc, #64]	@ (800cfcc <xTimerCreateTimerTask+0x90>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d001      	beq.n	800cf96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf92:	2301      	movs	r3, #1
 800cf94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10b      	bne.n	800cfb4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	613b      	str	r3, [r7, #16]
}
 800cfae:	bf00      	nop
 800cfb0:	bf00      	nop
 800cfb2:	e7fd      	b.n	800cfb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cfb4:	697b      	ldr	r3, [r7, #20]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3718      	adds	r7, #24
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20001aa0 	.word	0x20001aa0
 800cfc4:	08010cac 	.word	0x08010cac
 800cfc8:	0800d109 	.word	0x0800d109
 800cfcc:	20001aa4 	.word	0x20001aa4

0800cfd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08a      	sub	sp, #40	@ 0x28
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10b      	bne.n	800d000 <xTimerGenericCommand+0x30>
	__asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	623b      	str	r3, [r7, #32]
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	e7fd      	b.n	800cffc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d000:	4b19      	ldr	r3, [pc, #100]	@ (800d068 <xTimerGenericCommand+0x98>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d02a      	beq.n	800d05e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	2b05      	cmp	r3, #5
 800d018:	dc18      	bgt.n	800d04c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d01a:	f7ff fdcb 	bl	800cbb4 <xTaskGetSchedulerState>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b02      	cmp	r3, #2
 800d022:	d109      	bne.n	800d038 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d024:	4b10      	ldr	r3, [pc, #64]	@ (800d068 <xTimerGenericCommand+0x98>)
 800d026:	6818      	ldr	r0, [r3, #0]
 800d028:	f107 0110 	add.w	r1, r7, #16
 800d02c:	2300      	movs	r3, #0
 800d02e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d030:	f7fe fa7e 	bl	800b530 <xQueueGenericSend>
 800d034:	6278      	str	r0, [r7, #36]	@ 0x24
 800d036:	e012      	b.n	800d05e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d038:	4b0b      	ldr	r3, [pc, #44]	@ (800d068 <xTimerGenericCommand+0x98>)
 800d03a:	6818      	ldr	r0, [r3, #0]
 800d03c:	f107 0110 	add.w	r1, r7, #16
 800d040:	2300      	movs	r3, #0
 800d042:	2200      	movs	r2, #0
 800d044:	f7fe fa74 	bl	800b530 <xQueueGenericSend>
 800d048:	6278      	str	r0, [r7, #36]	@ 0x24
 800d04a:	e008      	b.n	800d05e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d04c:	4b06      	ldr	r3, [pc, #24]	@ (800d068 <xTimerGenericCommand+0x98>)
 800d04e:	6818      	ldr	r0, [r3, #0]
 800d050:	f107 0110 	add.w	r1, r7, #16
 800d054:	2300      	movs	r3, #0
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	f7fe fb6c 	bl	800b734 <xQueueGenericSendFromISR>
 800d05c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d060:	4618      	mov	r0, r3
 800d062:	3728      	adds	r7, #40	@ 0x28
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	20001aa0 	.word	0x20001aa0

0800d06c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b088      	sub	sp, #32
 800d070:	af02      	add	r7, sp, #8
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d076:	4b23      	ldr	r3, [pc, #140]	@ (800d104 <prvProcessExpiredTimer+0x98>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	3304      	adds	r3, #4
 800d084:	4618      	mov	r0, r3
 800d086:	f7fe f91f 	bl	800b2c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d090:	f003 0304 	and.w	r3, r3, #4
 800d094:	2b00      	cmp	r3, #0
 800d096:	d023      	beq.n	800d0e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	699a      	ldr	r2, [r3, #24]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	18d1      	adds	r1, r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	6978      	ldr	r0, [r7, #20]
 800d0a6:	f000 f8d5 	bl	800d254 <prvInsertTimerInActiveList>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d020      	beq.n	800d0f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	6978      	ldr	r0, [r7, #20]
 800d0bc:	f7ff ff88 	bl	800cfd0 <xTimerGenericCommand>
 800d0c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d114      	bne.n	800d0f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0cc:	f383 8811 	msr	BASEPRI, r3
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	60fb      	str	r3, [r7, #12]
}
 800d0da:	bf00      	nop
 800d0dc:	bf00      	nop
 800d0de:	e7fd      	b.n	800d0dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0e6:	f023 0301 	bic.w	r3, r3, #1
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	6a1b      	ldr	r3, [r3, #32]
 800d0f6:	6978      	ldr	r0, [r7, #20]
 800d0f8:	4798      	blx	r3
}
 800d0fa:	bf00      	nop
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20001a98 	.word	0x20001a98

0800d108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d110:	f107 0308 	add.w	r3, r7, #8
 800d114:	4618      	mov	r0, r3
 800d116:	f000 f859 	bl	800d1cc <prvGetNextExpireTime>
 800d11a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	4619      	mov	r1, r3
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f000 f805 	bl	800d130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d126:	f000 f8d7 	bl	800d2d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d12a:	bf00      	nop
 800d12c:	e7f0      	b.n	800d110 <prvTimerTask+0x8>
	...

0800d130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d13a:	f7ff f84d 	bl	800c1d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d13e:	f107 0308 	add.w	r3, r7, #8
 800d142:	4618      	mov	r0, r3
 800d144:	f000 f866 	bl	800d214 <prvSampleTimeNow>
 800d148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d130      	bne.n	800d1b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10a      	bne.n	800d16c <prvProcessTimerOrBlockTask+0x3c>
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d806      	bhi.n	800d16c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d15e:	f7ff f849 	bl	800c1f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d162:	68f9      	ldr	r1, [r7, #12]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff ff81 	bl	800d06c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d16a:	e024      	b.n	800d1b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d008      	beq.n	800d184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d172:	4b13      	ldr	r3, [pc, #76]	@ (800d1c0 <prvProcessTimerOrBlockTask+0x90>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <prvProcessTimerOrBlockTask+0x50>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e000      	b.n	800d182 <prvProcessTimerOrBlockTask+0x52>
 800d180:	2300      	movs	r3, #0
 800d182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d184:	4b0f      	ldr	r3, [pc, #60]	@ (800d1c4 <prvProcessTimerOrBlockTask+0x94>)
 800d186:	6818      	ldr	r0, [r3, #0]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	4619      	mov	r1, r3
 800d192:	f7fe fd89 	bl	800bca8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d196:	f7ff f82d 	bl	800c1f4 <xTaskResumeAll>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10a      	bne.n	800d1b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d1a0:	4b09      	ldr	r3, [pc, #36]	@ (800d1c8 <prvProcessTimerOrBlockTask+0x98>)
 800d1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1a6:	601a      	str	r2, [r3, #0]
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	f3bf 8f6f 	isb	sy
}
 800d1b0:	e001      	b.n	800d1b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d1b2:	f7ff f81f 	bl	800c1f4 <xTaskResumeAll>
}
 800d1b6:	bf00      	nop
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	20001a9c 	.word	0x20001a9c
 800d1c4:	20001aa0 	.word	0x20001aa0
 800d1c8:	e000ed04 	.word	0xe000ed04

0800d1cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d210 <prvGetNextExpireTime+0x44>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <prvGetNextExpireTime+0x16>
 800d1de:	2201      	movs	r2, #1
 800d1e0:	e000      	b.n	800d1e4 <prvGetNextExpireTime+0x18>
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d105      	bne.n	800d1fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1f0:	4b07      	ldr	r3, [pc, #28]	@ (800d210 <prvGetNextExpireTime+0x44>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	60fb      	str	r3, [r7, #12]
 800d1fa:	e001      	b.n	800d200 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d200:	68fb      	ldr	r3, [r7, #12]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3714      	adds	r7, #20
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	20001a98 	.word	0x20001a98

0800d214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d21c:	f7ff f888 	bl	800c330 <xTaskGetTickCount>
 800d220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d222:	4b0b      	ldr	r3, [pc, #44]	@ (800d250 <prvSampleTimeNow+0x3c>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d205      	bcs.n	800d238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d22c:	f000 f93a 	bl	800d4a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	e002      	b.n	800d23e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d23e:	4a04      	ldr	r2, [pc, #16]	@ (800d250 <prvSampleTimeNow+0x3c>)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d244:	68fb      	ldr	r3, [r7, #12]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	20001aa8 	.word	0x20001aa8

0800d254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d262:	2300      	movs	r3, #0
 800d264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	429a      	cmp	r2, r3
 800d278:	d812      	bhi.n	800d2a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	699b      	ldr	r3, [r3, #24]
 800d284:	429a      	cmp	r2, r3
 800d286:	d302      	bcc.n	800d28e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d288:	2301      	movs	r3, #1
 800d28a:	617b      	str	r3, [r7, #20]
 800d28c:	e01b      	b.n	800d2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d28e:	4b10      	ldr	r3, [pc, #64]	@ (800d2d0 <prvInsertTimerInActiveList+0x7c>)
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	3304      	adds	r3, #4
 800d296:	4619      	mov	r1, r3
 800d298:	4610      	mov	r0, r2
 800d29a:	f7fd ffdc 	bl	800b256 <vListInsert>
 800d29e:	e012      	b.n	800d2c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d206      	bcs.n	800d2b6 <prvInsertTimerInActiveList+0x62>
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d302      	bcc.n	800d2b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	617b      	str	r3, [r7, #20]
 800d2b4:	e007      	b.n	800d2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2b6:	4b07      	ldr	r3, [pc, #28]	@ (800d2d4 <prvInsertTimerInActiveList+0x80>)
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f7fd ffc8 	bl	800b256 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d2c6:	697b      	ldr	r3, [r7, #20]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3718      	adds	r7, #24
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	20001a9c 	.word	0x20001a9c
 800d2d4:	20001a98 	.word	0x20001a98

0800d2d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b08e      	sub	sp, #56	@ 0x38
 800d2dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2de:	e0ce      	b.n	800d47e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	da19      	bge.n	800d31a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d2e6:	1d3b      	adds	r3, r7, #4
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10b      	bne.n	800d30a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	61fb      	str	r3, [r7, #28]
}
 800d304:	bf00      	nop
 800d306:	bf00      	nop
 800d308:	e7fd      	b.n	800d306 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d310:	6850      	ldr	r0, [r2, #4]
 800d312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d314:	6892      	ldr	r2, [r2, #8]
 800d316:	4611      	mov	r1, r2
 800d318:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f2c0 80ae 	blt.w	800d47e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d328:	695b      	ldr	r3, [r3, #20]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d004      	beq.n	800d338 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d330:	3304      	adds	r3, #4
 800d332:	4618      	mov	r0, r3
 800d334:	f7fd ffc8 	bl	800b2c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d338:	463b      	mov	r3, r7
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff ff6a 	bl	800d214 <prvSampleTimeNow>
 800d340:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b09      	cmp	r3, #9
 800d346:	f200 8097 	bhi.w	800d478 <prvProcessReceivedCommands+0x1a0>
 800d34a:	a201      	add	r2, pc, #4	@ (adr r2, 800d350 <prvProcessReceivedCommands+0x78>)
 800d34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d350:	0800d379 	.word	0x0800d379
 800d354:	0800d379 	.word	0x0800d379
 800d358:	0800d379 	.word	0x0800d379
 800d35c:	0800d3ef 	.word	0x0800d3ef
 800d360:	0800d403 	.word	0x0800d403
 800d364:	0800d44f 	.word	0x0800d44f
 800d368:	0800d379 	.word	0x0800d379
 800d36c:	0800d379 	.word	0x0800d379
 800d370:	0800d3ef 	.word	0x0800d3ef
 800d374:	0800d403 	.word	0x0800d403
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d37e:	f043 0301 	orr.w	r3, r3, #1
 800d382:	b2da      	uxtb	r2, r3
 800d384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d386:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	18d1      	adds	r1, r2, r3
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d398:	f7ff ff5c 	bl	800d254 <prvInsertTimerInActiveList>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d06c      	beq.n	800d47c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3b0:	f003 0304 	and.w	r3, r3, #4
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d061      	beq.n	800d47c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	441a      	add	r2, r3
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	2100      	movs	r1, #0
 800d3c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3ca:	f7ff fe01 	bl	800cfd0 <xTimerGenericCommand>
 800d3ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d152      	bne.n	800d47c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	61bb      	str	r3, [r7, #24]
}
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	e7fd      	b.n	800d3ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3f4:	f023 0301 	bic.w	r3, r3, #1
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d400:	e03d      	b.n	800d47e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d408:	f043 0301 	orr.w	r3, r3, #1
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d410:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d418:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10b      	bne.n	800d43a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	617b      	str	r3, [r7, #20]
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop
 800d438:	e7fd      	b.n	800d436 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d43c:	699a      	ldr	r2, [r3, #24]
 800d43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d440:	18d1      	adds	r1, r2, r3
 800d442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d448:	f7ff ff04 	bl	800d254 <prvInsertTimerInActiveList>
					break;
 800d44c:	e017      	b.n	800d47e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d450:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d103      	bne.n	800d464 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d45c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d45e:	f000 fbeb 	bl	800dc38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d462:	e00c      	b.n	800d47e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d466:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d46a:	f023 0301 	bic.w	r3, r3, #1
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d472:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d476:	e002      	b.n	800d47e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d478:	bf00      	nop
 800d47a:	e000      	b.n	800d47e <prvProcessReceivedCommands+0x1a6>
					break;
 800d47c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d47e:	4b08      	ldr	r3, [pc, #32]	@ (800d4a0 <prvProcessReceivedCommands+0x1c8>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	1d39      	adds	r1, r7, #4
 800d484:	2200      	movs	r2, #0
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe f9f2 	bl	800b870 <xQueueReceive>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	f47f af26 	bne.w	800d2e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop
 800d498:	3730      	adds	r7, #48	@ 0x30
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	20001aa0 	.word	0x20001aa0

0800d4a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d4aa:	e049      	b.n	800d540 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4ac:	4b2e      	ldr	r3, [pc, #184]	@ (800d568 <prvSwitchTimerLists+0xc4>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4b6:	4b2c      	ldr	r3, [pc, #176]	@ (800d568 <prvSwitchTimerLists+0xc4>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fd feff 	bl	800b2c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6a1b      	ldr	r3, [r3, #32]
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4d8:	f003 0304 	and.w	r3, r3, #4
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d02f      	beq.n	800d540 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	693a      	ldr	r2, [r7, #16]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d4ea:	68ba      	ldr	r2, [r7, #8]
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d90e      	bls.n	800d510 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d568 <prvSwitchTimerLists+0xc4>)
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	3304      	adds	r3, #4
 800d506:	4619      	mov	r1, r3
 800d508:	4610      	mov	r0, r2
 800d50a:	f7fd fea4 	bl	800b256 <vListInsert>
 800d50e:	e017      	b.n	800d540 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d510:	2300      	movs	r3, #0
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	2300      	movs	r3, #0
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	2100      	movs	r1, #0
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f7ff fd58 	bl	800cfd0 <xTimerGenericCommand>
 800d520:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10b      	bne.n	800d540 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	603b      	str	r3, [r7, #0]
}
 800d53a:	bf00      	nop
 800d53c:	bf00      	nop
 800d53e:	e7fd      	b.n	800d53c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d540:	4b09      	ldr	r3, [pc, #36]	@ (800d568 <prvSwitchTimerLists+0xc4>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1b0      	bne.n	800d4ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d54a:	4b07      	ldr	r3, [pc, #28]	@ (800d568 <prvSwitchTimerLists+0xc4>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d550:	4b06      	ldr	r3, [pc, #24]	@ (800d56c <prvSwitchTimerLists+0xc8>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a04      	ldr	r2, [pc, #16]	@ (800d568 <prvSwitchTimerLists+0xc4>)
 800d556:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d558:	4a04      	ldr	r2, [pc, #16]	@ (800d56c <prvSwitchTimerLists+0xc8>)
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	6013      	str	r3, [r2, #0]
}
 800d55e:	bf00      	nop
 800d560:	3718      	adds	r7, #24
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	20001a98 	.word	0x20001a98
 800d56c:	20001a9c 	.word	0x20001a9c

0800d570 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d576:	f000 f96f 	bl	800d858 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d57a:	4b15      	ldr	r3, [pc, #84]	@ (800d5d0 <prvCheckForValidListAndQueue+0x60>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d120      	bne.n	800d5c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d582:	4814      	ldr	r0, [pc, #80]	@ (800d5d4 <prvCheckForValidListAndQueue+0x64>)
 800d584:	f7fd fe16 	bl	800b1b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d588:	4813      	ldr	r0, [pc, #76]	@ (800d5d8 <prvCheckForValidListAndQueue+0x68>)
 800d58a:	f7fd fe13 	bl	800b1b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d58e:	4b13      	ldr	r3, [pc, #76]	@ (800d5dc <prvCheckForValidListAndQueue+0x6c>)
 800d590:	4a10      	ldr	r2, [pc, #64]	@ (800d5d4 <prvCheckForValidListAndQueue+0x64>)
 800d592:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d594:	4b12      	ldr	r3, [pc, #72]	@ (800d5e0 <prvCheckForValidListAndQueue+0x70>)
 800d596:	4a10      	ldr	r2, [pc, #64]	@ (800d5d8 <prvCheckForValidListAndQueue+0x68>)
 800d598:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d59a:	2300      	movs	r3, #0
 800d59c:	9300      	str	r3, [sp, #0]
 800d59e:	4b11      	ldr	r3, [pc, #68]	@ (800d5e4 <prvCheckForValidListAndQueue+0x74>)
 800d5a0:	4a11      	ldr	r2, [pc, #68]	@ (800d5e8 <prvCheckForValidListAndQueue+0x78>)
 800d5a2:	2110      	movs	r1, #16
 800d5a4:	200a      	movs	r0, #10
 800d5a6:	f7fd ff23 	bl	800b3f0 <xQueueGenericCreateStatic>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	4a08      	ldr	r2, [pc, #32]	@ (800d5d0 <prvCheckForValidListAndQueue+0x60>)
 800d5ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d5b0:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <prvCheckForValidListAndQueue+0x60>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d005      	beq.n	800d5c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d5b8:	4b05      	ldr	r3, [pc, #20]	@ (800d5d0 <prvCheckForValidListAndQueue+0x60>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	490b      	ldr	r1, [pc, #44]	@ (800d5ec <prvCheckForValidListAndQueue+0x7c>)
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fe fb48 	bl	800bc54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5c4:	f000 f97a 	bl	800d8bc <vPortExitCritical>
}
 800d5c8:	bf00      	nop
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	20001aa0 	.word	0x20001aa0
 800d5d4:	20001a70 	.word	0x20001a70
 800d5d8:	20001a84 	.word	0x20001a84
 800d5dc:	20001a98 	.word	0x20001a98
 800d5e0:	20001a9c 	.word	0x20001a9c
 800d5e4:	20001b4c 	.word	0x20001b4c
 800d5e8:	20001aac 	.word	0x20001aac
 800d5ec:	08010cb4 	.word	0x08010cb4

0800d5f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b085      	sub	sp, #20
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3b04      	subs	r3, #4
 800d600:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3b04      	subs	r3, #4
 800d60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	f023 0201 	bic.w	r2, r3, #1
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	3b04      	subs	r3, #4
 800d61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d620:	4a0c      	ldr	r2, [pc, #48]	@ (800d654 <pxPortInitialiseStack+0x64>)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3b14      	subs	r3, #20
 800d62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3b04      	subs	r3, #4
 800d636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f06f 0202 	mvn.w	r2, #2
 800d63e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3b20      	subs	r3, #32
 800d644:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d646:	68fb      	ldr	r3, [r7, #12]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3714      	adds	r7, #20
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr
 800d654:	0800d659 	.word	0x0800d659

0800d658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d65e:	2300      	movs	r3, #0
 800d660:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d662:	4b13      	ldr	r3, [pc, #76]	@ (800d6b0 <prvTaskExitError+0x58>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66a:	d00b      	beq.n	800d684 <prvTaskExitError+0x2c>
	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	60fb      	str	r3, [r7, #12]
}
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	e7fd      	b.n	800d680 <prvTaskExitError+0x28>
	__asm volatile
 800d684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	60bb      	str	r3, [r7, #8]
}
 800d696:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d698:	bf00      	nop
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d0fc      	beq.n	800d69a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d6a0:	bf00      	nop
 800d6a2:	bf00      	nop
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20000090 	.word	0x20000090
	...

0800d6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d6c0:	4b07      	ldr	r3, [pc, #28]	@ (800d6e0 <pxCurrentTCBConst2>)
 800d6c2:	6819      	ldr	r1, [r3, #0]
 800d6c4:	6808      	ldr	r0, [r1, #0]
 800d6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ca:	f380 8809 	msr	PSP, r0
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f04f 0000 	mov.w	r0, #0
 800d6d6:	f380 8811 	msr	BASEPRI, r0
 800d6da:	4770      	bx	lr
 800d6dc:	f3af 8000 	nop.w

0800d6e0 <pxCurrentTCBConst2>:
 800d6e0:	20001570 	.word	0x20001570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop

0800d6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d6e8:	4808      	ldr	r0, [pc, #32]	@ (800d70c <prvPortStartFirstTask+0x24>)
 800d6ea:	6800      	ldr	r0, [r0, #0]
 800d6ec:	6800      	ldr	r0, [r0, #0]
 800d6ee:	f380 8808 	msr	MSP, r0
 800d6f2:	f04f 0000 	mov.w	r0, #0
 800d6f6:	f380 8814 	msr	CONTROL, r0
 800d6fa:	b662      	cpsie	i
 800d6fc:	b661      	cpsie	f
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	df00      	svc	0
 800d708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d70a:	bf00      	nop
 800d70c:	e000ed08 	.word	0xe000ed08

0800d710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d716:	4b47      	ldr	r3, [pc, #284]	@ (800d834 <xPortStartScheduler+0x124>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a47      	ldr	r2, [pc, #284]	@ (800d838 <xPortStartScheduler+0x128>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d10b      	bne.n	800d738 <xPortStartScheduler+0x28>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	613b      	str	r3, [r7, #16]
}
 800d732:	bf00      	nop
 800d734:	bf00      	nop
 800d736:	e7fd      	b.n	800d734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d738:	4b3e      	ldr	r3, [pc, #248]	@ (800d834 <xPortStartScheduler+0x124>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a3f      	ldr	r2, [pc, #252]	@ (800d83c <xPortStartScheduler+0x12c>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d10b      	bne.n	800d75a <xPortStartScheduler+0x4a>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	60fb      	str	r3, [r7, #12]
}
 800d754:	bf00      	nop
 800d756:	bf00      	nop
 800d758:	e7fd      	b.n	800d756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d75a:	4b39      	ldr	r3, [pc, #228]	@ (800d840 <xPortStartScheduler+0x130>)
 800d75c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	b2db      	uxtb	r3, r3
 800d764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	22ff      	movs	r2, #255	@ 0xff
 800d76a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	b2db      	uxtb	r3, r3
 800d772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d774:	78fb      	ldrb	r3, [r7, #3]
 800d776:	b2db      	uxtb	r3, r3
 800d778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	4b31      	ldr	r3, [pc, #196]	@ (800d844 <xPortStartScheduler+0x134>)
 800d780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d782:	4b31      	ldr	r3, [pc, #196]	@ (800d848 <xPortStartScheduler+0x138>)
 800d784:	2207      	movs	r2, #7
 800d786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d788:	e009      	b.n	800d79e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d78a:	4b2f      	ldr	r3, [pc, #188]	@ (800d848 <xPortStartScheduler+0x138>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	3b01      	subs	r3, #1
 800d790:	4a2d      	ldr	r2, [pc, #180]	@ (800d848 <xPortStartScheduler+0x138>)
 800d792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d794:	78fb      	ldrb	r3, [r7, #3]
 800d796:	b2db      	uxtb	r3, r3
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d79e:	78fb      	ldrb	r3, [r7, #3]
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7a6:	2b80      	cmp	r3, #128	@ 0x80
 800d7a8:	d0ef      	beq.n	800d78a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d7aa:	4b27      	ldr	r3, [pc, #156]	@ (800d848 <xPortStartScheduler+0x138>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f1c3 0307 	rsb	r3, r3, #7
 800d7b2:	2b04      	cmp	r3, #4
 800d7b4:	d00b      	beq.n	800d7ce <xPortStartScheduler+0xbe>
	__asm volatile
 800d7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ba:	f383 8811 	msr	BASEPRI, r3
 800d7be:	f3bf 8f6f 	isb	sy
 800d7c2:	f3bf 8f4f 	dsb	sy
 800d7c6:	60bb      	str	r3, [r7, #8]
}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	e7fd      	b.n	800d7ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d7ce:	4b1e      	ldr	r3, [pc, #120]	@ (800d848 <xPortStartScheduler+0x138>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	021b      	lsls	r3, r3, #8
 800d7d4:	4a1c      	ldr	r2, [pc, #112]	@ (800d848 <xPortStartScheduler+0x138>)
 800d7d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7d8:	4b1b      	ldr	r3, [pc, #108]	@ (800d848 <xPortStartScheduler+0x138>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d7e0:	4a19      	ldr	r2, [pc, #100]	@ (800d848 <xPortStartScheduler+0x138>)
 800d7e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7ec:	4b17      	ldr	r3, [pc, #92]	@ (800d84c <xPortStartScheduler+0x13c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a16      	ldr	r2, [pc, #88]	@ (800d84c <xPortStartScheduler+0x13c>)
 800d7f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d7f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7f8:	4b14      	ldr	r3, [pc, #80]	@ (800d84c <xPortStartScheduler+0x13c>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4a13      	ldr	r2, [pc, #76]	@ (800d84c <xPortStartScheduler+0x13c>)
 800d7fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d804:	f000 f8da 	bl	800d9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d808:	4b11      	ldr	r3, [pc, #68]	@ (800d850 <xPortStartScheduler+0x140>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d80e:	f000 f8f9 	bl	800da04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d812:	4b10      	ldr	r3, [pc, #64]	@ (800d854 <xPortStartScheduler+0x144>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a0f      	ldr	r2, [pc, #60]	@ (800d854 <xPortStartScheduler+0x144>)
 800d818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d81c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d81e:	f7ff ff63 	bl	800d6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d822:	f7fe ff49 	bl	800c6b8 <vTaskSwitchContext>
	prvTaskExitError();
 800d826:	f7ff ff17 	bl	800d658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3718      	adds	r7, #24
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	e000ed00 	.word	0xe000ed00
 800d838:	410fc271 	.word	0x410fc271
 800d83c:	410fc270 	.word	0x410fc270
 800d840:	e000e400 	.word	0xe000e400
 800d844:	20001b9c 	.word	0x20001b9c
 800d848:	20001ba0 	.word	0x20001ba0
 800d84c:	e000ed20 	.word	0xe000ed20
 800d850:	20000090 	.word	0x20000090
 800d854:	e000ef34 	.word	0xe000ef34

0800d858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
	__asm volatile
 800d85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d862:	f383 8811 	msr	BASEPRI, r3
 800d866:	f3bf 8f6f 	isb	sy
 800d86a:	f3bf 8f4f 	dsb	sy
 800d86e:	607b      	str	r3, [r7, #4]
}
 800d870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d872:	4b10      	ldr	r3, [pc, #64]	@ (800d8b4 <vPortEnterCritical+0x5c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	3301      	adds	r3, #1
 800d878:	4a0e      	ldr	r2, [pc, #56]	@ (800d8b4 <vPortEnterCritical+0x5c>)
 800d87a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d87c:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b4 <vPortEnterCritical+0x5c>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d110      	bne.n	800d8a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d884:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b8 <vPortEnterCritical+0x60>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00b      	beq.n	800d8a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	603b      	str	r3, [r7, #0]
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	e7fd      	b.n	800d8a2 <vPortEnterCritical+0x4a>
	}
}
 800d8a6:	bf00      	nop
 800d8a8:	370c      	adds	r7, #12
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
 800d8b2:	bf00      	nop
 800d8b4:	20000090 	.word	0x20000090
 800d8b8:	e000ed04 	.word	0xe000ed04

0800d8bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d8c2:	4b12      	ldr	r3, [pc, #72]	@ (800d90c <vPortExitCritical+0x50>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d10b      	bne.n	800d8e2 <vPortExitCritical+0x26>
	__asm volatile
 800d8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ce:	f383 8811 	msr	BASEPRI, r3
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	607b      	str	r3, [r7, #4]
}
 800d8dc:	bf00      	nop
 800d8de:	bf00      	nop
 800d8e0:	e7fd      	b.n	800d8de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d90c <vPortExitCritical+0x50>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	4a08      	ldr	r2, [pc, #32]	@ (800d90c <vPortExitCritical+0x50>)
 800d8ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8ec:	4b07      	ldr	r3, [pc, #28]	@ (800d90c <vPortExitCritical+0x50>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d105      	bne.n	800d900 <vPortExitCritical+0x44>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	f383 8811 	msr	BASEPRI, r3
}
 800d8fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	20000090 	.word	0x20000090

0800d910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d910:	f3ef 8009 	mrs	r0, PSP
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	4b15      	ldr	r3, [pc, #84]	@ (800d970 <pxCurrentTCBConst>)
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	f01e 0f10 	tst.w	lr, #16
 800d920:	bf08      	it	eq
 800d922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92a:	6010      	str	r0, [r2, #0]
 800d92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d934:	f380 8811 	msr	BASEPRI, r0
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f7fe feba 	bl	800c6b8 <vTaskSwitchContext>
 800d944:	f04f 0000 	mov.w	r0, #0
 800d948:	f380 8811 	msr	BASEPRI, r0
 800d94c:	bc09      	pop	{r0, r3}
 800d94e:	6819      	ldr	r1, [r3, #0]
 800d950:	6808      	ldr	r0, [r1, #0]
 800d952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d956:	f01e 0f10 	tst.w	lr, #16
 800d95a:	bf08      	it	eq
 800d95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d960:	f380 8809 	msr	PSP, r0
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	f3af 8000 	nop.w

0800d970 <pxCurrentTCBConst>:
 800d970:	20001570 	.word	0x20001570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d974:	bf00      	nop
 800d976:	bf00      	nop

0800d978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
	__asm volatile
 800d97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	607b      	str	r3, [r7, #4]
}
 800d990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d992:	f7fe fdd7 	bl	800c544 <xTaskIncrementTick>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d99c:	4b06      	ldr	r3, [pc, #24]	@ (800d9b8 <xPortSysTickHandler+0x40>)
 800d99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9a2:	601a      	str	r2, [r3, #0]
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	f383 8811 	msr	BASEPRI, r3
}
 800d9ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	e000ed04 	.word	0xe000ed04

0800d9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d9bc:	b480      	push	{r7}
 800d9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f0 <vPortSetupTimerInterrupt+0x34>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f4 <vPortSetupTimerInterrupt+0x38>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d9f8 <vPortSetupTimerInterrupt+0x3c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a0a      	ldr	r2, [pc, #40]	@ (800d9fc <vPortSetupTimerInterrupt+0x40>)
 800d9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d6:	099b      	lsrs	r3, r3, #6
 800d9d8:	4a09      	ldr	r2, [pc, #36]	@ (800da00 <vPortSetupTimerInterrupt+0x44>)
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9de:	4b04      	ldr	r3, [pc, #16]	@ (800d9f0 <vPortSetupTimerInterrupt+0x34>)
 800d9e0:	2207      	movs	r2, #7
 800d9e2:	601a      	str	r2, [r3, #0]
}
 800d9e4:	bf00      	nop
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	e000e010 	.word	0xe000e010
 800d9f4:	e000e018 	.word	0xe000e018
 800d9f8:	20000084 	.word	0x20000084
 800d9fc:	10624dd3 	.word	0x10624dd3
 800da00:	e000e014 	.word	0xe000e014

0800da04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800da14 <vPortEnableVFP+0x10>
 800da08:	6801      	ldr	r1, [r0, #0]
 800da0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800da0e:	6001      	str	r1, [r0, #0]
 800da10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da12:	bf00      	nop
 800da14:	e000ed88 	.word	0xe000ed88

0800da18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da1e:	f3ef 8305 	mrs	r3, IPSR
 800da22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2b0f      	cmp	r3, #15
 800da28:	d915      	bls.n	800da56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da2a:	4a18      	ldr	r2, [pc, #96]	@ (800da8c <vPortValidateInterruptPriority+0x74>)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4413      	add	r3, r2
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da34:	4b16      	ldr	r3, [pc, #88]	@ (800da90 <vPortValidateInterruptPriority+0x78>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	7afa      	ldrb	r2, [r7, #11]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d20b      	bcs.n	800da56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	607b      	str	r3, [r7, #4]
}
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	e7fd      	b.n	800da52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da56:	4b0f      	ldr	r3, [pc, #60]	@ (800da94 <vPortValidateInterruptPriority+0x7c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800da5e:	4b0e      	ldr	r3, [pc, #56]	@ (800da98 <vPortValidateInterruptPriority+0x80>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	429a      	cmp	r2, r3
 800da64:	d90b      	bls.n	800da7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800da66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6a:	f383 8811 	msr	BASEPRI, r3
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	f3bf 8f4f 	dsb	sy
 800da76:	603b      	str	r3, [r7, #0]
}
 800da78:	bf00      	nop
 800da7a:	bf00      	nop
 800da7c:	e7fd      	b.n	800da7a <vPortValidateInterruptPriority+0x62>
	}
 800da7e:	bf00      	nop
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	e000e3f0 	.word	0xe000e3f0
 800da90:	20001b9c 	.word	0x20001b9c
 800da94:	e000ed0c 	.word	0xe000ed0c
 800da98:	20001ba0 	.word	0x20001ba0

0800da9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b08a      	sub	sp, #40	@ 0x28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800daa4:	2300      	movs	r3, #0
 800daa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800daa8:	f7fe fb96 	bl	800c1d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800daac:	4b5c      	ldr	r3, [pc, #368]	@ (800dc20 <pvPortMalloc+0x184>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d101      	bne.n	800dab8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dab4:	f000 f924 	bl	800dd00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dab8:	4b5a      	ldr	r3, [pc, #360]	@ (800dc24 <pvPortMalloc+0x188>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4013      	ands	r3, r2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f040 8095 	bne.w	800dbf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d01e      	beq.n	800db0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dacc:	2208      	movs	r2, #8
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4413      	add	r3, r2
 800dad2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f003 0307 	and.w	r3, r3, #7
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d015      	beq.n	800db0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f023 0307 	bic.w	r3, r3, #7
 800dae4:	3308      	adds	r3, #8
 800dae6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f003 0307 	and.w	r3, r3, #7
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00b      	beq.n	800db0a <pvPortMalloc+0x6e>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	617b      	str	r3, [r7, #20]
}
 800db04:	bf00      	nop
 800db06:	bf00      	nop
 800db08:	e7fd      	b.n	800db06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d06f      	beq.n	800dbf0 <pvPortMalloc+0x154>
 800db10:	4b45      	ldr	r3, [pc, #276]	@ (800dc28 <pvPortMalloc+0x18c>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	429a      	cmp	r2, r3
 800db18:	d86a      	bhi.n	800dbf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db1a:	4b44      	ldr	r3, [pc, #272]	@ (800dc2c <pvPortMalloc+0x190>)
 800db1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db1e:	4b43      	ldr	r3, [pc, #268]	@ (800dc2c <pvPortMalloc+0x190>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db24:	e004      	b.n	800db30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800db26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	429a      	cmp	r2, r3
 800db38:	d903      	bls.n	800db42 <pvPortMalloc+0xa6>
 800db3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1f1      	bne.n	800db26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db42:	4b37      	ldr	r3, [pc, #220]	@ (800dc20 <pvPortMalloc+0x184>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db48:	429a      	cmp	r2, r3
 800db4a:	d051      	beq.n	800dbf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db4c:	6a3b      	ldr	r3, [r7, #32]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2208      	movs	r2, #8
 800db52:	4413      	add	r3, r2
 800db54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	6a3b      	ldr	r3, [r7, #32]
 800db5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db60:	685a      	ldr	r2, [r3, #4]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	1ad2      	subs	r2, r2, r3
 800db66:	2308      	movs	r3, #8
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d920      	bls.n	800dbb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4413      	add	r3, r2
 800db74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	f003 0307 	and.w	r3, r3, #7
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00b      	beq.n	800db98 <pvPortMalloc+0xfc>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	613b      	str	r3, [r7, #16]
}
 800db92:	bf00      	nop
 800db94:	bf00      	nop
 800db96:	e7fd      	b.n	800db94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	1ad2      	subs	r2, r2, r3
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dbaa:	69b8      	ldr	r0, [r7, #24]
 800dbac:	f000 f90a 	bl	800ddc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dbb0:	4b1d      	ldr	r3, [pc, #116]	@ (800dc28 <pvPortMalloc+0x18c>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	4a1b      	ldr	r2, [pc, #108]	@ (800dc28 <pvPortMalloc+0x18c>)
 800dbbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dbbe:	4b1a      	ldr	r3, [pc, #104]	@ (800dc28 <pvPortMalloc+0x18c>)
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	4b1b      	ldr	r3, [pc, #108]	@ (800dc30 <pvPortMalloc+0x194>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d203      	bcs.n	800dbd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dbca:	4b17      	ldr	r3, [pc, #92]	@ (800dc28 <pvPortMalloc+0x18c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a18      	ldr	r2, [pc, #96]	@ (800dc30 <pvPortMalloc+0x194>)
 800dbd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	4b13      	ldr	r3, [pc, #76]	@ (800dc24 <pvPortMalloc+0x188>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dbe6:	4b13      	ldr	r3, [pc, #76]	@ (800dc34 <pvPortMalloc+0x198>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	3301      	adds	r3, #1
 800dbec:	4a11      	ldr	r2, [pc, #68]	@ (800dc34 <pvPortMalloc+0x198>)
 800dbee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dbf0:	f7fe fb00 	bl	800c1f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	f003 0307 	and.w	r3, r3, #7
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00b      	beq.n	800dc16 <pvPortMalloc+0x17a>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	60fb      	str	r3, [r7, #12]
}
 800dc10:	bf00      	nop
 800dc12:	bf00      	nop
 800dc14:	e7fd      	b.n	800dc12 <pvPortMalloc+0x176>
	return pvReturn;
 800dc16:	69fb      	ldr	r3, [r7, #28]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3728      	adds	r7, #40	@ 0x28
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	200057ac 	.word	0x200057ac
 800dc24:	200057c0 	.word	0x200057c0
 800dc28:	200057b0 	.word	0x200057b0
 800dc2c:	200057a4 	.word	0x200057a4
 800dc30:	200057b4 	.word	0x200057b4
 800dc34:	200057b8 	.word	0x200057b8

0800dc38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d04f      	beq.n	800dcea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc4a:	2308      	movs	r3, #8
 800dc4c:	425b      	negs	r3, r3
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	4413      	add	r3, r2
 800dc52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	685a      	ldr	r2, [r3, #4]
 800dc5c:	4b25      	ldr	r3, [pc, #148]	@ (800dcf4 <vPortFree+0xbc>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4013      	ands	r3, r2
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10b      	bne.n	800dc7e <vPortFree+0x46>
	__asm volatile
 800dc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6a:	f383 8811 	msr	BASEPRI, r3
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	f3bf 8f4f 	dsb	sy
 800dc76:	60fb      	str	r3, [r7, #12]
}
 800dc78:	bf00      	nop
 800dc7a:	bf00      	nop
 800dc7c:	e7fd      	b.n	800dc7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00b      	beq.n	800dc9e <vPortFree+0x66>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	60bb      	str	r3, [r7, #8]
}
 800dc98:	bf00      	nop
 800dc9a:	bf00      	nop
 800dc9c:	e7fd      	b.n	800dc9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	685a      	ldr	r2, [r3, #4]
 800dca2:	4b14      	ldr	r3, [pc, #80]	@ (800dcf4 <vPortFree+0xbc>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	4013      	ands	r3, r2
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d01e      	beq.n	800dcea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d11a      	bne.n	800dcea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	685a      	ldr	r2, [r3, #4]
 800dcb8:	4b0e      	ldr	r3, [pc, #56]	@ (800dcf4 <vPortFree+0xbc>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	43db      	mvns	r3, r3
 800dcbe:	401a      	ands	r2, r3
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dcc4:	f7fe fa88 	bl	800c1d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	685a      	ldr	r2, [r3, #4]
 800dccc:	4b0a      	ldr	r3, [pc, #40]	@ (800dcf8 <vPortFree+0xc0>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	4a09      	ldr	r2, [pc, #36]	@ (800dcf8 <vPortFree+0xc0>)
 800dcd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dcd6:	6938      	ldr	r0, [r7, #16]
 800dcd8:	f000 f874 	bl	800ddc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dcdc:	4b07      	ldr	r3, [pc, #28]	@ (800dcfc <vPortFree+0xc4>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	3301      	adds	r3, #1
 800dce2:	4a06      	ldr	r2, [pc, #24]	@ (800dcfc <vPortFree+0xc4>)
 800dce4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dce6:	f7fe fa85 	bl	800c1f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dcea:	bf00      	nop
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	200057c0 	.word	0x200057c0
 800dcf8:	200057b0 	.word	0x200057b0
 800dcfc:	200057bc 	.word	0x200057bc

0800dd00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800dd0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dd0c:	4b27      	ldr	r3, [pc, #156]	@ (800ddac <prvHeapInit+0xac>)
 800dd0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f003 0307 	and.w	r3, r3, #7
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00c      	beq.n	800dd34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	3307      	adds	r3, #7
 800dd1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f023 0307 	bic.w	r3, r3, #7
 800dd26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	4a1f      	ldr	r2, [pc, #124]	@ (800ddac <prvHeapInit+0xac>)
 800dd30:	4413      	add	r3, r2
 800dd32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd38:	4a1d      	ldr	r2, [pc, #116]	@ (800ddb0 <prvHeapInit+0xb0>)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd3e:	4b1c      	ldr	r3, [pc, #112]	@ (800ddb0 <prvHeapInit+0xb0>)
 800dd40:	2200      	movs	r2, #0
 800dd42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	4413      	add	r3, r2
 800dd4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd4c:	2208      	movs	r2, #8
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	1a9b      	subs	r3, r3, r2
 800dd52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f023 0307 	bic.w	r3, r3, #7
 800dd5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	4a15      	ldr	r2, [pc, #84]	@ (800ddb4 <prvHeapInit+0xb4>)
 800dd60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd62:	4b14      	ldr	r3, [pc, #80]	@ (800ddb4 <prvHeapInit+0xb4>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2200      	movs	r2, #0
 800dd68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd6a:	4b12      	ldr	r3, [pc, #72]	@ (800ddb4 <prvHeapInit+0xb4>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	1ad2      	subs	r2, r2, r3
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd80:	4b0c      	ldr	r3, [pc, #48]	@ (800ddb4 <prvHeapInit+0xb4>)
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	4a0a      	ldr	r2, [pc, #40]	@ (800ddb8 <prvHeapInit+0xb8>)
 800dd8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	4a09      	ldr	r2, [pc, #36]	@ (800ddbc <prvHeapInit+0xbc>)
 800dd96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd98:	4b09      	ldr	r3, [pc, #36]	@ (800ddc0 <prvHeapInit+0xc0>)
 800dd9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dd9e:	601a      	str	r2, [r3, #0]
}
 800dda0:	bf00      	nop
 800dda2:	3714      	adds	r7, #20
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr
 800ddac:	20001ba4 	.word	0x20001ba4
 800ddb0:	200057a4 	.word	0x200057a4
 800ddb4:	200057ac 	.word	0x200057ac
 800ddb8:	200057b4 	.word	0x200057b4
 800ddbc:	200057b0 	.word	0x200057b0
 800ddc0:	200057c0 	.word	0x200057c0

0800ddc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ddcc:	4b28      	ldr	r3, [pc, #160]	@ (800de70 <prvInsertBlockIntoFreeList+0xac>)
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	e002      	b.n	800ddd8 <prvInsertBlockIntoFreeList+0x14>
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	60fb      	str	r3, [r7, #12]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d8f7      	bhi.n	800ddd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	4413      	add	r3, r2
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d108      	bne.n	800de06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	441a      	add	r2, r3
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	68ba      	ldr	r2, [r7, #8]
 800de10:	441a      	add	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	429a      	cmp	r2, r3
 800de18:	d118      	bne.n	800de4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	4b15      	ldr	r3, [pc, #84]	@ (800de74 <prvInsertBlockIntoFreeList+0xb0>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	429a      	cmp	r2, r3
 800de24:	d00d      	beq.n	800de42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	685a      	ldr	r2, [r3, #4]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	441a      	add	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	e008      	b.n	800de54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de42:	4b0c      	ldr	r3, [pc, #48]	@ (800de74 <prvInsertBlockIntoFreeList+0xb0>)
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	e003      	b.n	800de54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d002      	beq.n	800de62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de62:	bf00      	nop
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	200057a4 	.word	0x200057a4
 800de74:	200057ac 	.word	0x200057ac

0800de78 <__cvt>:
 800de78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de7c:	ec57 6b10 	vmov	r6, r7, d0
 800de80:	2f00      	cmp	r7, #0
 800de82:	460c      	mov	r4, r1
 800de84:	4619      	mov	r1, r3
 800de86:	463b      	mov	r3, r7
 800de88:	bfbb      	ittet	lt
 800de8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800de8e:	461f      	movlt	r7, r3
 800de90:	2300      	movge	r3, #0
 800de92:	232d      	movlt	r3, #45	@ 0x2d
 800de94:	700b      	strb	r3, [r1, #0]
 800de96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800de9c:	4691      	mov	r9, r2
 800de9e:	f023 0820 	bic.w	r8, r3, #32
 800dea2:	bfbc      	itt	lt
 800dea4:	4632      	movlt	r2, r6
 800dea6:	4616      	movlt	r6, r2
 800dea8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800deac:	d005      	beq.n	800deba <__cvt+0x42>
 800deae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800deb2:	d100      	bne.n	800deb6 <__cvt+0x3e>
 800deb4:	3401      	adds	r4, #1
 800deb6:	2102      	movs	r1, #2
 800deb8:	e000      	b.n	800debc <__cvt+0x44>
 800deba:	2103      	movs	r1, #3
 800debc:	ab03      	add	r3, sp, #12
 800debe:	9301      	str	r3, [sp, #4]
 800dec0:	ab02      	add	r3, sp, #8
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	ec47 6b10 	vmov	d0, r6, r7
 800dec8:	4653      	mov	r3, sl
 800deca:	4622      	mov	r2, r4
 800decc:	f000 fec0 	bl	800ec50 <_dtoa_r>
 800ded0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ded4:	4605      	mov	r5, r0
 800ded6:	d119      	bne.n	800df0c <__cvt+0x94>
 800ded8:	f019 0f01 	tst.w	r9, #1
 800dedc:	d00e      	beq.n	800defc <__cvt+0x84>
 800dede:	eb00 0904 	add.w	r9, r0, r4
 800dee2:	2200      	movs	r2, #0
 800dee4:	2300      	movs	r3, #0
 800dee6:	4630      	mov	r0, r6
 800dee8:	4639      	mov	r1, r7
 800deea:	f7f2 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 800deee:	b108      	cbz	r0, 800def4 <__cvt+0x7c>
 800def0:	f8cd 900c 	str.w	r9, [sp, #12]
 800def4:	2230      	movs	r2, #48	@ 0x30
 800def6:	9b03      	ldr	r3, [sp, #12]
 800def8:	454b      	cmp	r3, r9
 800defa:	d31e      	bcc.n	800df3a <__cvt+0xc2>
 800defc:	9b03      	ldr	r3, [sp, #12]
 800defe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df00:	1b5b      	subs	r3, r3, r5
 800df02:	4628      	mov	r0, r5
 800df04:	6013      	str	r3, [r2, #0]
 800df06:	b004      	add	sp, #16
 800df08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df10:	eb00 0904 	add.w	r9, r0, r4
 800df14:	d1e5      	bne.n	800dee2 <__cvt+0x6a>
 800df16:	7803      	ldrb	r3, [r0, #0]
 800df18:	2b30      	cmp	r3, #48	@ 0x30
 800df1a:	d10a      	bne.n	800df32 <__cvt+0xba>
 800df1c:	2200      	movs	r2, #0
 800df1e:	2300      	movs	r3, #0
 800df20:	4630      	mov	r0, r6
 800df22:	4639      	mov	r1, r7
 800df24:	f7f2 fdd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800df28:	b918      	cbnz	r0, 800df32 <__cvt+0xba>
 800df2a:	f1c4 0401 	rsb	r4, r4, #1
 800df2e:	f8ca 4000 	str.w	r4, [sl]
 800df32:	f8da 3000 	ldr.w	r3, [sl]
 800df36:	4499      	add	r9, r3
 800df38:	e7d3      	b.n	800dee2 <__cvt+0x6a>
 800df3a:	1c59      	adds	r1, r3, #1
 800df3c:	9103      	str	r1, [sp, #12]
 800df3e:	701a      	strb	r2, [r3, #0]
 800df40:	e7d9      	b.n	800def6 <__cvt+0x7e>

0800df42 <__exponent>:
 800df42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df44:	2900      	cmp	r1, #0
 800df46:	bfba      	itte	lt
 800df48:	4249      	neglt	r1, r1
 800df4a:	232d      	movlt	r3, #45	@ 0x2d
 800df4c:	232b      	movge	r3, #43	@ 0x2b
 800df4e:	2909      	cmp	r1, #9
 800df50:	7002      	strb	r2, [r0, #0]
 800df52:	7043      	strb	r3, [r0, #1]
 800df54:	dd29      	ble.n	800dfaa <__exponent+0x68>
 800df56:	f10d 0307 	add.w	r3, sp, #7
 800df5a:	461d      	mov	r5, r3
 800df5c:	270a      	movs	r7, #10
 800df5e:	461a      	mov	r2, r3
 800df60:	fbb1 f6f7 	udiv	r6, r1, r7
 800df64:	fb07 1416 	mls	r4, r7, r6, r1
 800df68:	3430      	adds	r4, #48	@ 0x30
 800df6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800df6e:	460c      	mov	r4, r1
 800df70:	2c63      	cmp	r4, #99	@ 0x63
 800df72:	f103 33ff 	add.w	r3, r3, #4294967295
 800df76:	4631      	mov	r1, r6
 800df78:	dcf1      	bgt.n	800df5e <__exponent+0x1c>
 800df7a:	3130      	adds	r1, #48	@ 0x30
 800df7c:	1e94      	subs	r4, r2, #2
 800df7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800df82:	1c41      	adds	r1, r0, #1
 800df84:	4623      	mov	r3, r4
 800df86:	42ab      	cmp	r3, r5
 800df88:	d30a      	bcc.n	800dfa0 <__exponent+0x5e>
 800df8a:	f10d 0309 	add.w	r3, sp, #9
 800df8e:	1a9b      	subs	r3, r3, r2
 800df90:	42ac      	cmp	r4, r5
 800df92:	bf88      	it	hi
 800df94:	2300      	movhi	r3, #0
 800df96:	3302      	adds	r3, #2
 800df98:	4403      	add	r3, r0
 800df9a:	1a18      	subs	r0, r3, r0
 800df9c:	b003      	add	sp, #12
 800df9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dfa4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dfa8:	e7ed      	b.n	800df86 <__exponent+0x44>
 800dfaa:	2330      	movs	r3, #48	@ 0x30
 800dfac:	3130      	adds	r1, #48	@ 0x30
 800dfae:	7083      	strb	r3, [r0, #2]
 800dfb0:	70c1      	strb	r1, [r0, #3]
 800dfb2:	1d03      	adds	r3, r0, #4
 800dfb4:	e7f1      	b.n	800df9a <__exponent+0x58>
	...

0800dfb8 <_printf_float>:
 800dfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfbc:	b08d      	sub	sp, #52	@ 0x34
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dfc4:	4616      	mov	r6, r2
 800dfc6:	461f      	mov	r7, r3
 800dfc8:	4605      	mov	r5, r0
 800dfca:	f000 fcdb 	bl	800e984 <_localeconv_r>
 800dfce:	6803      	ldr	r3, [r0, #0]
 800dfd0:	9304      	str	r3, [sp, #16]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7f2 f94c 	bl	8000270 <strlen>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfdc:	f8d8 3000 	ldr.w	r3, [r8]
 800dfe0:	9005      	str	r0, [sp, #20]
 800dfe2:	3307      	adds	r3, #7
 800dfe4:	f023 0307 	bic.w	r3, r3, #7
 800dfe8:	f103 0208 	add.w	r2, r3, #8
 800dfec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dff0:	f8d4 b000 	ldr.w	fp, [r4]
 800dff4:	f8c8 2000 	str.w	r2, [r8]
 800dff8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dffc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e000:	9307      	str	r3, [sp, #28]
 800e002:	f8cd 8018 	str.w	r8, [sp, #24]
 800e006:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e00a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e00e:	4b9c      	ldr	r3, [pc, #624]	@ (800e280 <_printf_float+0x2c8>)
 800e010:	f04f 32ff 	mov.w	r2, #4294967295
 800e014:	f7f2 fd8a 	bl	8000b2c <__aeabi_dcmpun>
 800e018:	bb70      	cbnz	r0, 800e078 <_printf_float+0xc0>
 800e01a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e01e:	4b98      	ldr	r3, [pc, #608]	@ (800e280 <_printf_float+0x2c8>)
 800e020:	f04f 32ff 	mov.w	r2, #4294967295
 800e024:	f7f2 fd64 	bl	8000af0 <__aeabi_dcmple>
 800e028:	bb30      	cbnz	r0, 800e078 <_printf_float+0xc0>
 800e02a:	2200      	movs	r2, #0
 800e02c:	2300      	movs	r3, #0
 800e02e:	4640      	mov	r0, r8
 800e030:	4649      	mov	r1, r9
 800e032:	f7f2 fd53 	bl	8000adc <__aeabi_dcmplt>
 800e036:	b110      	cbz	r0, 800e03e <_printf_float+0x86>
 800e038:	232d      	movs	r3, #45	@ 0x2d
 800e03a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e03e:	4a91      	ldr	r2, [pc, #580]	@ (800e284 <_printf_float+0x2cc>)
 800e040:	4b91      	ldr	r3, [pc, #580]	@ (800e288 <_printf_float+0x2d0>)
 800e042:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e046:	bf94      	ite	ls
 800e048:	4690      	movls	r8, r2
 800e04a:	4698      	movhi	r8, r3
 800e04c:	2303      	movs	r3, #3
 800e04e:	6123      	str	r3, [r4, #16]
 800e050:	f02b 0304 	bic.w	r3, fp, #4
 800e054:	6023      	str	r3, [r4, #0]
 800e056:	f04f 0900 	mov.w	r9, #0
 800e05a:	9700      	str	r7, [sp, #0]
 800e05c:	4633      	mov	r3, r6
 800e05e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e060:	4621      	mov	r1, r4
 800e062:	4628      	mov	r0, r5
 800e064:	f000 f9d2 	bl	800e40c <_printf_common>
 800e068:	3001      	adds	r0, #1
 800e06a:	f040 808d 	bne.w	800e188 <_printf_float+0x1d0>
 800e06e:	f04f 30ff 	mov.w	r0, #4294967295
 800e072:	b00d      	add	sp, #52	@ 0x34
 800e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e078:	4642      	mov	r2, r8
 800e07a:	464b      	mov	r3, r9
 800e07c:	4640      	mov	r0, r8
 800e07e:	4649      	mov	r1, r9
 800e080:	f7f2 fd54 	bl	8000b2c <__aeabi_dcmpun>
 800e084:	b140      	cbz	r0, 800e098 <_printf_float+0xe0>
 800e086:	464b      	mov	r3, r9
 800e088:	2b00      	cmp	r3, #0
 800e08a:	bfbc      	itt	lt
 800e08c:	232d      	movlt	r3, #45	@ 0x2d
 800e08e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e092:	4a7e      	ldr	r2, [pc, #504]	@ (800e28c <_printf_float+0x2d4>)
 800e094:	4b7e      	ldr	r3, [pc, #504]	@ (800e290 <_printf_float+0x2d8>)
 800e096:	e7d4      	b.n	800e042 <_printf_float+0x8a>
 800e098:	6863      	ldr	r3, [r4, #4]
 800e09a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e09e:	9206      	str	r2, [sp, #24]
 800e0a0:	1c5a      	adds	r2, r3, #1
 800e0a2:	d13b      	bne.n	800e11c <_printf_float+0x164>
 800e0a4:	2306      	movs	r3, #6
 800e0a6:	6063      	str	r3, [r4, #4]
 800e0a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	6022      	str	r2, [r4, #0]
 800e0b0:	9303      	str	r3, [sp, #12]
 800e0b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800e0b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e0b8:	ab09      	add	r3, sp, #36	@ 0x24
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	6861      	ldr	r1, [r4, #4]
 800e0be:	ec49 8b10 	vmov	d0, r8, r9
 800e0c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f7ff fed6 	bl	800de78 <__cvt>
 800e0cc:	9b06      	ldr	r3, [sp, #24]
 800e0ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e0d0:	2b47      	cmp	r3, #71	@ 0x47
 800e0d2:	4680      	mov	r8, r0
 800e0d4:	d129      	bne.n	800e12a <_printf_float+0x172>
 800e0d6:	1cc8      	adds	r0, r1, #3
 800e0d8:	db02      	blt.n	800e0e0 <_printf_float+0x128>
 800e0da:	6863      	ldr	r3, [r4, #4]
 800e0dc:	4299      	cmp	r1, r3
 800e0de:	dd41      	ble.n	800e164 <_printf_float+0x1ac>
 800e0e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800e0e4:	fa5f fa8a 	uxtb.w	sl, sl
 800e0e8:	3901      	subs	r1, #1
 800e0ea:	4652      	mov	r2, sl
 800e0ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e0f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800e0f2:	f7ff ff26 	bl	800df42 <__exponent>
 800e0f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0f8:	1813      	adds	r3, r2, r0
 800e0fa:	2a01      	cmp	r2, #1
 800e0fc:	4681      	mov	r9, r0
 800e0fe:	6123      	str	r3, [r4, #16]
 800e100:	dc02      	bgt.n	800e108 <_printf_float+0x150>
 800e102:	6822      	ldr	r2, [r4, #0]
 800e104:	07d2      	lsls	r2, r2, #31
 800e106:	d501      	bpl.n	800e10c <_printf_float+0x154>
 800e108:	3301      	adds	r3, #1
 800e10a:	6123      	str	r3, [r4, #16]
 800e10c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e110:	2b00      	cmp	r3, #0
 800e112:	d0a2      	beq.n	800e05a <_printf_float+0xa2>
 800e114:	232d      	movs	r3, #45	@ 0x2d
 800e116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e11a:	e79e      	b.n	800e05a <_printf_float+0xa2>
 800e11c:	9a06      	ldr	r2, [sp, #24]
 800e11e:	2a47      	cmp	r2, #71	@ 0x47
 800e120:	d1c2      	bne.n	800e0a8 <_printf_float+0xf0>
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1c0      	bne.n	800e0a8 <_printf_float+0xf0>
 800e126:	2301      	movs	r3, #1
 800e128:	e7bd      	b.n	800e0a6 <_printf_float+0xee>
 800e12a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e12e:	d9db      	bls.n	800e0e8 <_printf_float+0x130>
 800e130:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e134:	d118      	bne.n	800e168 <_printf_float+0x1b0>
 800e136:	2900      	cmp	r1, #0
 800e138:	6863      	ldr	r3, [r4, #4]
 800e13a:	dd0b      	ble.n	800e154 <_printf_float+0x19c>
 800e13c:	6121      	str	r1, [r4, #16]
 800e13e:	b913      	cbnz	r3, 800e146 <_printf_float+0x18e>
 800e140:	6822      	ldr	r2, [r4, #0]
 800e142:	07d0      	lsls	r0, r2, #31
 800e144:	d502      	bpl.n	800e14c <_printf_float+0x194>
 800e146:	3301      	adds	r3, #1
 800e148:	440b      	add	r3, r1
 800e14a:	6123      	str	r3, [r4, #16]
 800e14c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e14e:	f04f 0900 	mov.w	r9, #0
 800e152:	e7db      	b.n	800e10c <_printf_float+0x154>
 800e154:	b913      	cbnz	r3, 800e15c <_printf_float+0x1a4>
 800e156:	6822      	ldr	r2, [r4, #0]
 800e158:	07d2      	lsls	r2, r2, #31
 800e15a:	d501      	bpl.n	800e160 <_printf_float+0x1a8>
 800e15c:	3302      	adds	r3, #2
 800e15e:	e7f4      	b.n	800e14a <_printf_float+0x192>
 800e160:	2301      	movs	r3, #1
 800e162:	e7f2      	b.n	800e14a <_printf_float+0x192>
 800e164:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e16a:	4299      	cmp	r1, r3
 800e16c:	db05      	blt.n	800e17a <_printf_float+0x1c2>
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	6121      	str	r1, [r4, #16]
 800e172:	07d8      	lsls	r0, r3, #31
 800e174:	d5ea      	bpl.n	800e14c <_printf_float+0x194>
 800e176:	1c4b      	adds	r3, r1, #1
 800e178:	e7e7      	b.n	800e14a <_printf_float+0x192>
 800e17a:	2900      	cmp	r1, #0
 800e17c:	bfd4      	ite	le
 800e17e:	f1c1 0202 	rsble	r2, r1, #2
 800e182:	2201      	movgt	r2, #1
 800e184:	4413      	add	r3, r2
 800e186:	e7e0      	b.n	800e14a <_printf_float+0x192>
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	055a      	lsls	r2, r3, #21
 800e18c:	d407      	bmi.n	800e19e <_printf_float+0x1e6>
 800e18e:	6923      	ldr	r3, [r4, #16]
 800e190:	4642      	mov	r2, r8
 800e192:	4631      	mov	r1, r6
 800e194:	4628      	mov	r0, r5
 800e196:	47b8      	blx	r7
 800e198:	3001      	adds	r0, #1
 800e19a:	d12b      	bne.n	800e1f4 <_printf_float+0x23c>
 800e19c:	e767      	b.n	800e06e <_printf_float+0xb6>
 800e19e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e1a2:	f240 80dd 	bls.w	800e360 <_printf_float+0x3a8>
 800e1a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f7f2 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d033      	beq.n	800e21e <_printf_float+0x266>
 800e1b6:	4a37      	ldr	r2, [pc, #220]	@ (800e294 <_printf_float+0x2dc>)
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	4631      	mov	r1, r6
 800e1bc:	4628      	mov	r0, r5
 800e1be:	47b8      	blx	r7
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	f43f af54 	beq.w	800e06e <_printf_float+0xb6>
 800e1c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e1ca:	4543      	cmp	r3, r8
 800e1cc:	db02      	blt.n	800e1d4 <_printf_float+0x21c>
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	07d8      	lsls	r0, r3, #31
 800e1d2:	d50f      	bpl.n	800e1f4 <_printf_float+0x23c>
 800e1d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1d8:	4631      	mov	r1, r6
 800e1da:	4628      	mov	r0, r5
 800e1dc:	47b8      	blx	r7
 800e1de:	3001      	adds	r0, #1
 800e1e0:	f43f af45 	beq.w	800e06e <_printf_float+0xb6>
 800e1e4:	f04f 0900 	mov.w	r9, #0
 800e1e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e1ec:	f104 0a1a 	add.w	sl, r4, #26
 800e1f0:	45c8      	cmp	r8, r9
 800e1f2:	dc09      	bgt.n	800e208 <_printf_float+0x250>
 800e1f4:	6823      	ldr	r3, [r4, #0]
 800e1f6:	079b      	lsls	r3, r3, #30
 800e1f8:	f100 8103 	bmi.w	800e402 <_printf_float+0x44a>
 800e1fc:	68e0      	ldr	r0, [r4, #12]
 800e1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e200:	4298      	cmp	r0, r3
 800e202:	bfb8      	it	lt
 800e204:	4618      	movlt	r0, r3
 800e206:	e734      	b.n	800e072 <_printf_float+0xba>
 800e208:	2301      	movs	r3, #1
 800e20a:	4652      	mov	r2, sl
 800e20c:	4631      	mov	r1, r6
 800e20e:	4628      	mov	r0, r5
 800e210:	47b8      	blx	r7
 800e212:	3001      	adds	r0, #1
 800e214:	f43f af2b 	beq.w	800e06e <_printf_float+0xb6>
 800e218:	f109 0901 	add.w	r9, r9, #1
 800e21c:	e7e8      	b.n	800e1f0 <_printf_float+0x238>
 800e21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e220:	2b00      	cmp	r3, #0
 800e222:	dc39      	bgt.n	800e298 <_printf_float+0x2e0>
 800e224:	4a1b      	ldr	r2, [pc, #108]	@ (800e294 <_printf_float+0x2dc>)
 800e226:	2301      	movs	r3, #1
 800e228:	4631      	mov	r1, r6
 800e22a:	4628      	mov	r0, r5
 800e22c:	47b8      	blx	r7
 800e22e:	3001      	adds	r0, #1
 800e230:	f43f af1d 	beq.w	800e06e <_printf_float+0xb6>
 800e234:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e238:	ea59 0303 	orrs.w	r3, r9, r3
 800e23c:	d102      	bne.n	800e244 <_printf_float+0x28c>
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	07d9      	lsls	r1, r3, #31
 800e242:	d5d7      	bpl.n	800e1f4 <_printf_float+0x23c>
 800e244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e248:	4631      	mov	r1, r6
 800e24a:	4628      	mov	r0, r5
 800e24c:	47b8      	blx	r7
 800e24e:	3001      	adds	r0, #1
 800e250:	f43f af0d 	beq.w	800e06e <_printf_float+0xb6>
 800e254:	f04f 0a00 	mov.w	sl, #0
 800e258:	f104 0b1a 	add.w	fp, r4, #26
 800e25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e25e:	425b      	negs	r3, r3
 800e260:	4553      	cmp	r3, sl
 800e262:	dc01      	bgt.n	800e268 <_printf_float+0x2b0>
 800e264:	464b      	mov	r3, r9
 800e266:	e793      	b.n	800e190 <_printf_float+0x1d8>
 800e268:	2301      	movs	r3, #1
 800e26a:	465a      	mov	r2, fp
 800e26c:	4631      	mov	r1, r6
 800e26e:	4628      	mov	r0, r5
 800e270:	47b8      	blx	r7
 800e272:	3001      	adds	r0, #1
 800e274:	f43f aefb 	beq.w	800e06e <_printf_float+0xb6>
 800e278:	f10a 0a01 	add.w	sl, sl, #1
 800e27c:	e7ee      	b.n	800e25c <_printf_float+0x2a4>
 800e27e:	bf00      	nop
 800e280:	7fefffff 	.word	0x7fefffff
 800e284:	08010d88 	.word	0x08010d88
 800e288:	08010d8c 	.word	0x08010d8c
 800e28c:	08010d90 	.word	0x08010d90
 800e290:	08010d94 	.word	0x08010d94
 800e294:	08010d98 	.word	0x08010d98
 800e298:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e29a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e29e:	4553      	cmp	r3, sl
 800e2a0:	bfa8      	it	ge
 800e2a2:	4653      	movge	r3, sl
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	4699      	mov	r9, r3
 800e2a8:	dc36      	bgt.n	800e318 <_printf_float+0x360>
 800e2aa:	f04f 0b00 	mov.w	fp, #0
 800e2ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2b2:	f104 021a 	add.w	r2, r4, #26
 800e2b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e2b8:	9306      	str	r3, [sp, #24]
 800e2ba:	eba3 0309 	sub.w	r3, r3, r9
 800e2be:	455b      	cmp	r3, fp
 800e2c0:	dc31      	bgt.n	800e326 <_printf_float+0x36e>
 800e2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2c4:	459a      	cmp	sl, r3
 800e2c6:	dc3a      	bgt.n	800e33e <_printf_float+0x386>
 800e2c8:	6823      	ldr	r3, [r4, #0]
 800e2ca:	07da      	lsls	r2, r3, #31
 800e2cc:	d437      	bmi.n	800e33e <_printf_float+0x386>
 800e2ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2d0:	ebaa 0903 	sub.w	r9, sl, r3
 800e2d4:	9b06      	ldr	r3, [sp, #24]
 800e2d6:	ebaa 0303 	sub.w	r3, sl, r3
 800e2da:	4599      	cmp	r9, r3
 800e2dc:	bfa8      	it	ge
 800e2de:	4699      	movge	r9, r3
 800e2e0:	f1b9 0f00 	cmp.w	r9, #0
 800e2e4:	dc33      	bgt.n	800e34e <_printf_float+0x396>
 800e2e6:	f04f 0800 	mov.w	r8, #0
 800e2ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2ee:	f104 0b1a 	add.w	fp, r4, #26
 800e2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2f4:	ebaa 0303 	sub.w	r3, sl, r3
 800e2f8:	eba3 0309 	sub.w	r3, r3, r9
 800e2fc:	4543      	cmp	r3, r8
 800e2fe:	f77f af79 	ble.w	800e1f4 <_printf_float+0x23c>
 800e302:	2301      	movs	r3, #1
 800e304:	465a      	mov	r2, fp
 800e306:	4631      	mov	r1, r6
 800e308:	4628      	mov	r0, r5
 800e30a:	47b8      	blx	r7
 800e30c:	3001      	adds	r0, #1
 800e30e:	f43f aeae 	beq.w	800e06e <_printf_float+0xb6>
 800e312:	f108 0801 	add.w	r8, r8, #1
 800e316:	e7ec      	b.n	800e2f2 <_printf_float+0x33a>
 800e318:	4642      	mov	r2, r8
 800e31a:	4631      	mov	r1, r6
 800e31c:	4628      	mov	r0, r5
 800e31e:	47b8      	blx	r7
 800e320:	3001      	adds	r0, #1
 800e322:	d1c2      	bne.n	800e2aa <_printf_float+0x2f2>
 800e324:	e6a3      	b.n	800e06e <_printf_float+0xb6>
 800e326:	2301      	movs	r3, #1
 800e328:	4631      	mov	r1, r6
 800e32a:	4628      	mov	r0, r5
 800e32c:	9206      	str	r2, [sp, #24]
 800e32e:	47b8      	blx	r7
 800e330:	3001      	adds	r0, #1
 800e332:	f43f ae9c 	beq.w	800e06e <_printf_float+0xb6>
 800e336:	9a06      	ldr	r2, [sp, #24]
 800e338:	f10b 0b01 	add.w	fp, fp, #1
 800e33c:	e7bb      	b.n	800e2b6 <_printf_float+0x2fe>
 800e33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e342:	4631      	mov	r1, r6
 800e344:	4628      	mov	r0, r5
 800e346:	47b8      	blx	r7
 800e348:	3001      	adds	r0, #1
 800e34a:	d1c0      	bne.n	800e2ce <_printf_float+0x316>
 800e34c:	e68f      	b.n	800e06e <_printf_float+0xb6>
 800e34e:	9a06      	ldr	r2, [sp, #24]
 800e350:	464b      	mov	r3, r9
 800e352:	4442      	add	r2, r8
 800e354:	4631      	mov	r1, r6
 800e356:	4628      	mov	r0, r5
 800e358:	47b8      	blx	r7
 800e35a:	3001      	adds	r0, #1
 800e35c:	d1c3      	bne.n	800e2e6 <_printf_float+0x32e>
 800e35e:	e686      	b.n	800e06e <_printf_float+0xb6>
 800e360:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e364:	f1ba 0f01 	cmp.w	sl, #1
 800e368:	dc01      	bgt.n	800e36e <_printf_float+0x3b6>
 800e36a:	07db      	lsls	r3, r3, #31
 800e36c:	d536      	bpl.n	800e3dc <_printf_float+0x424>
 800e36e:	2301      	movs	r3, #1
 800e370:	4642      	mov	r2, r8
 800e372:	4631      	mov	r1, r6
 800e374:	4628      	mov	r0, r5
 800e376:	47b8      	blx	r7
 800e378:	3001      	adds	r0, #1
 800e37a:	f43f ae78 	beq.w	800e06e <_printf_float+0xb6>
 800e37e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e382:	4631      	mov	r1, r6
 800e384:	4628      	mov	r0, r5
 800e386:	47b8      	blx	r7
 800e388:	3001      	adds	r0, #1
 800e38a:	f43f ae70 	beq.w	800e06e <_printf_float+0xb6>
 800e38e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e392:	2200      	movs	r2, #0
 800e394:	2300      	movs	r3, #0
 800e396:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e39a:	f7f2 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800e39e:	b9c0      	cbnz	r0, 800e3d2 <_printf_float+0x41a>
 800e3a0:	4653      	mov	r3, sl
 800e3a2:	f108 0201 	add.w	r2, r8, #1
 800e3a6:	4631      	mov	r1, r6
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	47b8      	blx	r7
 800e3ac:	3001      	adds	r0, #1
 800e3ae:	d10c      	bne.n	800e3ca <_printf_float+0x412>
 800e3b0:	e65d      	b.n	800e06e <_printf_float+0xb6>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	465a      	mov	r2, fp
 800e3b6:	4631      	mov	r1, r6
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	47b8      	blx	r7
 800e3bc:	3001      	adds	r0, #1
 800e3be:	f43f ae56 	beq.w	800e06e <_printf_float+0xb6>
 800e3c2:	f108 0801 	add.w	r8, r8, #1
 800e3c6:	45d0      	cmp	r8, sl
 800e3c8:	dbf3      	blt.n	800e3b2 <_printf_float+0x3fa>
 800e3ca:	464b      	mov	r3, r9
 800e3cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e3d0:	e6df      	b.n	800e192 <_printf_float+0x1da>
 800e3d2:	f04f 0800 	mov.w	r8, #0
 800e3d6:	f104 0b1a 	add.w	fp, r4, #26
 800e3da:	e7f4      	b.n	800e3c6 <_printf_float+0x40e>
 800e3dc:	2301      	movs	r3, #1
 800e3de:	4642      	mov	r2, r8
 800e3e0:	e7e1      	b.n	800e3a6 <_printf_float+0x3ee>
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	464a      	mov	r2, r9
 800e3e6:	4631      	mov	r1, r6
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	47b8      	blx	r7
 800e3ec:	3001      	adds	r0, #1
 800e3ee:	f43f ae3e 	beq.w	800e06e <_printf_float+0xb6>
 800e3f2:	f108 0801 	add.w	r8, r8, #1
 800e3f6:	68e3      	ldr	r3, [r4, #12]
 800e3f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3fa:	1a5b      	subs	r3, r3, r1
 800e3fc:	4543      	cmp	r3, r8
 800e3fe:	dcf0      	bgt.n	800e3e2 <_printf_float+0x42a>
 800e400:	e6fc      	b.n	800e1fc <_printf_float+0x244>
 800e402:	f04f 0800 	mov.w	r8, #0
 800e406:	f104 0919 	add.w	r9, r4, #25
 800e40a:	e7f4      	b.n	800e3f6 <_printf_float+0x43e>

0800e40c <_printf_common>:
 800e40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e410:	4616      	mov	r6, r2
 800e412:	4698      	mov	r8, r3
 800e414:	688a      	ldr	r2, [r1, #8]
 800e416:	690b      	ldr	r3, [r1, #16]
 800e418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e41c:	4293      	cmp	r3, r2
 800e41e:	bfb8      	it	lt
 800e420:	4613      	movlt	r3, r2
 800e422:	6033      	str	r3, [r6, #0]
 800e424:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e428:	4607      	mov	r7, r0
 800e42a:	460c      	mov	r4, r1
 800e42c:	b10a      	cbz	r2, 800e432 <_printf_common+0x26>
 800e42e:	3301      	adds	r3, #1
 800e430:	6033      	str	r3, [r6, #0]
 800e432:	6823      	ldr	r3, [r4, #0]
 800e434:	0699      	lsls	r1, r3, #26
 800e436:	bf42      	ittt	mi
 800e438:	6833      	ldrmi	r3, [r6, #0]
 800e43a:	3302      	addmi	r3, #2
 800e43c:	6033      	strmi	r3, [r6, #0]
 800e43e:	6825      	ldr	r5, [r4, #0]
 800e440:	f015 0506 	ands.w	r5, r5, #6
 800e444:	d106      	bne.n	800e454 <_printf_common+0x48>
 800e446:	f104 0a19 	add.w	sl, r4, #25
 800e44a:	68e3      	ldr	r3, [r4, #12]
 800e44c:	6832      	ldr	r2, [r6, #0]
 800e44e:	1a9b      	subs	r3, r3, r2
 800e450:	42ab      	cmp	r3, r5
 800e452:	dc26      	bgt.n	800e4a2 <_printf_common+0x96>
 800e454:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e458:	6822      	ldr	r2, [r4, #0]
 800e45a:	3b00      	subs	r3, #0
 800e45c:	bf18      	it	ne
 800e45e:	2301      	movne	r3, #1
 800e460:	0692      	lsls	r2, r2, #26
 800e462:	d42b      	bmi.n	800e4bc <_printf_common+0xb0>
 800e464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e468:	4641      	mov	r1, r8
 800e46a:	4638      	mov	r0, r7
 800e46c:	47c8      	blx	r9
 800e46e:	3001      	adds	r0, #1
 800e470:	d01e      	beq.n	800e4b0 <_printf_common+0xa4>
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	6922      	ldr	r2, [r4, #16]
 800e476:	f003 0306 	and.w	r3, r3, #6
 800e47a:	2b04      	cmp	r3, #4
 800e47c:	bf02      	ittt	eq
 800e47e:	68e5      	ldreq	r5, [r4, #12]
 800e480:	6833      	ldreq	r3, [r6, #0]
 800e482:	1aed      	subeq	r5, r5, r3
 800e484:	68a3      	ldr	r3, [r4, #8]
 800e486:	bf0c      	ite	eq
 800e488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e48c:	2500      	movne	r5, #0
 800e48e:	4293      	cmp	r3, r2
 800e490:	bfc4      	itt	gt
 800e492:	1a9b      	subgt	r3, r3, r2
 800e494:	18ed      	addgt	r5, r5, r3
 800e496:	2600      	movs	r6, #0
 800e498:	341a      	adds	r4, #26
 800e49a:	42b5      	cmp	r5, r6
 800e49c:	d11a      	bne.n	800e4d4 <_printf_common+0xc8>
 800e49e:	2000      	movs	r0, #0
 800e4a0:	e008      	b.n	800e4b4 <_printf_common+0xa8>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	4652      	mov	r2, sl
 800e4a6:	4641      	mov	r1, r8
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	47c8      	blx	r9
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	d103      	bne.n	800e4b8 <_printf_common+0xac>
 800e4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4b8:	3501      	adds	r5, #1
 800e4ba:	e7c6      	b.n	800e44a <_printf_common+0x3e>
 800e4bc:	18e1      	adds	r1, r4, r3
 800e4be:	1c5a      	adds	r2, r3, #1
 800e4c0:	2030      	movs	r0, #48	@ 0x30
 800e4c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e4c6:	4422      	add	r2, r4
 800e4c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e4cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e4d0:	3302      	adds	r3, #2
 800e4d2:	e7c7      	b.n	800e464 <_printf_common+0x58>
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	4622      	mov	r2, r4
 800e4d8:	4641      	mov	r1, r8
 800e4da:	4638      	mov	r0, r7
 800e4dc:	47c8      	blx	r9
 800e4de:	3001      	adds	r0, #1
 800e4e0:	d0e6      	beq.n	800e4b0 <_printf_common+0xa4>
 800e4e2:	3601      	adds	r6, #1
 800e4e4:	e7d9      	b.n	800e49a <_printf_common+0x8e>
	...

0800e4e8 <_printf_i>:
 800e4e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ec:	7e0f      	ldrb	r7, [r1, #24]
 800e4ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e4f0:	2f78      	cmp	r7, #120	@ 0x78
 800e4f2:	4691      	mov	r9, r2
 800e4f4:	4680      	mov	r8, r0
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	469a      	mov	sl, r3
 800e4fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e4fe:	d807      	bhi.n	800e510 <_printf_i+0x28>
 800e500:	2f62      	cmp	r7, #98	@ 0x62
 800e502:	d80a      	bhi.n	800e51a <_printf_i+0x32>
 800e504:	2f00      	cmp	r7, #0
 800e506:	f000 80d2 	beq.w	800e6ae <_printf_i+0x1c6>
 800e50a:	2f58      	cmp	r7, #88	@ 0x58
 800e50c:	f000 80b9 	beq.w	800e682 <_printf_i+0x19a>
 800e510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e514:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e518:	e03a      	b.n	800e590 <_printf_i+0xa8>
 800e51a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e51e:	2b15      	cmp	r3, #21
 800e520:	d8f6      	bhi.n	800e510 <_printf_i+0x28>
 800e522:	a101      	add	r1, pc, #4	@ (adr r1, 800e528 <_printf_i+0x40>)
 800e524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e528:	0800e581 	.word	0x0800e581
 800e52c:	0800e595 	.word	0x0800e595
 800e530:	0800e511 	.word	0x0800e511
 800e534:	0800e511 	.word	0x0800e511
 800e538:	0800e511 	.word	0x0800e511
 800e53c:	0800e511 	.word	0x0800e511
 800e540:	0800e595 	.word	0x0800e595
 800e544:	0800e511 	.word	0x0800e511
 800e548:	0800e511 	.word	0x0800e511
 800e54c:	0800e511 	.word	0x0800e511
 800e550:	0800e511 	.word	0x0800e511
 800e554:	0800e695 	.word	0x0800e695
 800e558:	0800e5bf 	.word	0x0800e5bf
 800e55c:	0800e64f 	.word	0x0800e64f
 800e560:	0800e511 	.word	0x0800e511
 800e564:	0800e511 	.word	0x0800e511
 800e568:	0800e6b7 	.word	0x0800e6b7
 800e56c:	0800e511 	.word	0x0800e511
 800e570:	0800e5bf 	.word	0x0800e5bf
 800e574:	0800e511 	.word	0x0800e511
 800e578:	0800e511 	.word	0x0800e511
 800e57c:	0800e657 	.word	0x0800e657
 800e580:	6833      	ldr	r3, [r6, #0]
 800e582:	1d1a      	adds	r2, r3, #4
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6032      	str	r2, [r6, #0]
 800e588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e58c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e590:	2301      	movs	r3, #1
 800e592:	e09d      	b.n	800e6d0 <_printf_i+0x1e8>
 800e594:	6833      	ldr	r3, [r6, #0]
 800e596:	6820      	ldr	r0, [r4, #0]
 800e598:	1d19      	adds	r1, r3, #4
 800e59a:	6031      	str	r1, [r6, #0]
 800e59c:	0606      	lsls	r6, r0, #24
 800e59e:	d501      	bpl.n	800e5a4 <_printf_i+0xbc>
 800e5a0:	681d      	ldr	r5, [r3, #0]
 800e5a2:	e003      	b.n	800e5ac <_printf_i+0xc4>
 800e5a4:	0645      	lsls	r5, r0, #25
 800e5a6:	d5fb      	bpl.n	800e5a0 <_printf_i+0xb8>
 800e5a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e5ac:	2d00      	cmp	r5, #0
 800e5ae:	da03      	bge.n	800e5b8 <_printf_i+0xd0>
 800e5b0:	232d      	movs	r3, #45	@ 0x2d
 800e5b2:	426d      	negs	r5, r5
 800e5b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5b8:	4859      	ldr	r0, [pc, #356]	@ (800e720 <_printf_i+0x238>)
 800e5ba:	230a      	movs	r3, #10
 800e5bc:	e011      	b.n	800e5e2 <_printf_i+0xfa>
 800e5be:	6821      	ldr	r1, [r4, #0]
 800e5c0:	6833      	ldr	r3, [r6, #0]
 800e5c2:	0608      	lsls	r0, r1, #24
 800e5c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e5c8:	d402      	bmi.n	800e5d0 <_printf_i+0xe8>
 800e5ca:	0649      	lsls	r1, r1, #25
 800e5cc:	bf48      	it	mi
 800e5ce:	b2ad      	uxthmi	r5, r5
 800e5d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e5d2:	4853      	ldr	r0, [pc, #332]	@ (800e720 <_printf_i+0x238>)
 800e5d4:	6033      	str	r3, [r6, #0]
 800e5d6:	bf14      	ite	ne
 800e5d8:	230a      	movne	r3, #10
 800e5da:	2308      	moveq	r3, #8
 800e5dc:	2100      	movs	r1, #0
 800e5de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e5e2:	6866      	ldr	r6, [r4, #4]
 800e5e4:	60a6      	str	r6, [r4, #8]
 800e5e6:	2e00      	cmp	r6, #0
 800e5e8:	bfa2      	ittt	ge
 800e5ea:	6821      	ldrge	r1, [r4, #0]
 800e5ec:	f021 0104 	bicge.w	r1, r1, #4
 800e5f0:	6021      	strge	r1, [r4, #0]
 800e5f2:	b90d      	cbnz	r5, 800e5f8 <_printf_i+0x110>
 800e5f4:	2e00      	cmp	r6, #0
 800e5f6:	d04b      	beq.n	800e690 <_printf_i+0x1a8>
 800e5f8:	4616      	mov	r6, r2
 800e5fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5fe:	fb03 5711 	mls	r7, r3, r1, r5
 800e602:	5dc7      	ldrb	r7, [r0, r7]
 800e604:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e608:	462f      	mov	r7, r5
 800e60a:	42bb      	cmp	r3, r7
 800e60c:	460d      	mov	r5, r1
 800e60e:	d9f4      	bls.n	800e5fa <_printf_i+0x112>
 800e610:	2b08      	cmp	r3, #8
 800e612:	d10b      	bne.n	800e62c <_printf_i+0x144>
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	07df      	lsls	r7, r3, #31
 800e618:	d508      	bpl.n	800e62c <_printf_i+0x144>
 800e61a:	6923      	ldr	r3, [r4, #16]
 800e61c:	6861      	ldr	r1, [r4, #4]
 800e61e:	4299      	cmp	r1, r3
 800e620:	bfde      	ittt	le
 800e622:	2330      	movle	r3, #48	@ 0x30
 800e624:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e628:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e62c:	1b92      	subs	r2, r2, r6
 800e62e:	6122      	str	r2, [r4, #16]
 800e630:	f8cd a000 	str.w	sl, [sp]
 800e634:	464b      	mov	r3, r9
 800e636:	aa03      	add	r2, sp, #12
 800e638:	4621      	mov	r1, r4
 800e63a:	4640      	mov	r0, r8
 800e63c:	f7ff fee6 	bl	800e40c <_printf_common>
 800e640:	3001      	adds	r0, #1
 800e642:	d14a      	bne.n	800e6da <_printf_i+0x1f2>
 800e644:	f04f 30ff 	mov.w	r0, #4294967295
 800e648:	b004      	add	sp, #16
 800e64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	f043 0320 	orr.w	r3, r3, #32
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	4833      	ldr	r0, [pc, #204]	@ (800e724 <_printf_i+0x23c>)
 800e658:	2778      	movs	r7, #120	@ 0x78
 800e65a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e65e:	6823      	ldr	r3, [r4, #0]
 800e660:	6831      	ldr	r1, [r6, #0]
 800e662:	061f      	lsls	r7, r3, #24
 800e664:	f851 5b04 	ldr.w	r5, [r1], #4
 800e668:	d402      	bmi.n	800e670 <_printf_i+0x188>
 800e66a:	065f      	lsls	r7, r3, #25
 800e66c:	bf48      	it	mi
 800e66e:	b2ad      	uxthmi	r5, r5
 800e670:	6031      	str	r1, [r6, #0]
 800e672:	07d9      	lsls	r1, r3, #31
 800e674:	bf44      	itt	mi
 800e676:	f043 0320 	orrmi.w	r3, r3, #32
 800e67a:	6023      	strmi	r3, [r4, #0]
 800e67c:	b11d      	cbz	r5, 800e686 <_printf_i+0x19e>
 800e67e:	2310      	movs	r3, #16
 800e680:	e7ac      	b.n	800e5dc <_printf_i+0xf4>
 800e682:	4827      	ldr	r0, [pc, #156]	@ (800e720 <_printf_i+0x238>)
 800e684:	e7e9      	b.n	800e65a <_printf_i+0x172>
 800e686:	6823      	ldr	r3, [r4, #0]
 800e688:	f023 0320 	bic.w	r3, r3, #32
 800e68c:	6023      	str	r3, [r4, #0]
 800e68e:	e7f6      	b.n	800e67e <_printf_i+0x196>
 800e690:	4616      	mov	r6, r2
 800e692:	e7bd      	b.n	800e610 <_printf_i+0x128>
 800e694:	6833      	ldr	r3, [r6, #0]
 800e696:	6825      	ldr	r5, [r4, #0]
 800e698:	6961      	ldr	r1, [r4, #20]
 800e69a:	1d18      	adds	r0, r3, #4
 800e69c:	6030      	str	r0, [r6, #0]
 800e69e:	062e      	lsls	r6, r5, #24
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	d501      	bpl.n	800e6a8 <_printf_i+0x1c0>
 800e6a4:	6019      	str	r1, [r3, #0]
 800e6a6:	e002      	b.n	800e6ae <_printf_i+0x1c6>
 800e6a8:	0668      	lsls	r0, r5, #25
 800e6aa:	d5fb      	bpl.n	800e6a4 <_printf_i+0x1bc>
 800e6ac:	8019      	strh	r1, [r3, #0]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	6123      	str	r3, [r4, #16]
 800e6b2:	4616      	mov	r6, r2
 800e6b4:	e7bc      	b.n	800e630 <_printf_i+0x148>
 800e6b6:	6833      	ldr	r3, [r6, #0]
 800e6b8:	1d1a      	adds	r2, r3, #4
 800e6ba:	6032      	str	r2, [r6, #0]
 800e6bc:	681e      	ldr	r6, [r3, #0]
 800e6be:	6862      	ldr	r2, [r4, #4]
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	f7f1 fd84 	bl	80001d0 <memchr>
 800e6c8:	b108      	cbz	r0, 800e6ce <_printf_i+0x1e6>
 800e6ca:	1b80      	subs	r0, r0, r6
 800e6cc:	6060      	str	r0, [r4, #4]
 800e6ce:	6863      	ldr	r3, [r4, #4]
 800e6d0:	6123      	str	r3, [r4, #16]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6d8:	e7aa      	b.n	800e630 <_printf_i+0x148>
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	4632      	mov	r2, r6
 800e6de:	4649      	mov	r1, r9
 800e6e0:	4640      	mov	r0, r8
 800e6e2:	47d0      	blx	sl
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d0ad      	beq.n	800e644 <_printf_i+0x15c>
 800e6e8:	6823      	ldr	r3, [r4, #0]
 800e6ea:	079b      	lsls	r3, r3, #30
 800e6ec:	d413      	bmi.n	800e716 <_printf_i+0x22e>
 800e6ee:	68e0      	ldr	r0, [r4, #12]
 800e6f0:	9b03      	ldr	r3, [sp, #12]
 800e6f2:	4298      	cmp	r0, r3
 800e6f4:	bfb8      	it	lt
 800e6f6:	4618      	movlt	r0, r3
 800e6f8:	e7a6      	b.n	800e648 <_printf_i+0x160>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4632      	mov	r2, r6
 800e6fe:	4649      	mov	r1, r9
 800e700:	4640      	mov	r0, r8
 800e702:	47d0      	blx	sl
 800e704:	3001      	adds	r0, #1
 800e706:	d09d      	beq.n	800e644 <_printf_i+0x15c>
 800e708:	3501      	adds	r5, #1
 800e70a:	68e3      	ldr	r3, [r4, #12]
 800e70c:	9903      	ldr	r1, [sp, #12]
 800e70e:	1a5b      	subs	r3, r3, r1
 800e710:	42ab      	cmp	r3, r5
 800e712:	dcf2      	bgt.n	800e6fa <_printf_i+0x212>
 800e714:	e7eb      	b.n	800e6ee <_printf_i+0x206>
 800e716:	2500      	movs	r5, #0
 800e718:	f104 0619 	add.w	r6, r4, #25
 800e71c:	e7f5      	b.n	800e70a <_printf_i+0x222>
 800e71e:	bf00      	nop
 800e720:	08010d9a 	.word	0x08010d9a
 800e724:	08010dab 	.word	0x08010dab

0800e728 <std>:
 800e728:	2300      	movs	r3, #0
 800e72a:	b510      	push	{r4, lr}
 800e72c:	4604      	mov	r4, r0
 800e72e:	e9c0 3300 	strd	r3, r3, [r0]
 800e732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e736:	6083      	str	r3, [r0, #8]
 800e738:	8181      	strh	r1, [r0, #12]
 800e73a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e73c:	81c2      	strh	r2, [r0, #14]
 800e73e:	6183      	str	r3, [r0, #24]
 800e740:	4619      	mov	r1, r3
 800e742:	2208      	movs	r2, #8
 800e744:	305c      	adds	r0, #92	@ 0x5c
 800e746:	f000 f915 	bl	800e974 <memset>
 800e74a:	4b0d      	ldr	r3, [pc, #52]	@ (800e780 <std+0x58>)
 800e74c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e74e:	4b0d      	ldr	r3, [pc, #52]	@ (800e784 <std+0x5c>)
 800e750:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e752:	4b0d      	ldr	r3, [pc, #52]	@ (800e788 <std+0x60>)
 800e754:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e756:	4b0d      	ldr	r3, [pc, #52]	@ (800e78c <std+0x64>)
 800e758:	6323      	str	r3, [r4, #48]	@ 0x30
 800e75a:	4b0d      	ldr	r3, [pc, #52]	@ (800e790 <std+0x68>)
 800e75c:	6224      	str	r4, [r4, #32]
 800e75e:	429c      	cmp	r4, r3
 800e760:	d006      	beq.n	800e770 <std+0x48>
 800e762:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e766:	4294      	cmp	r4, r2
 800e768:	d002      	beq.n	800e770 <std+0x48>
 800e76a:	33d0      	adds	r3, #208	@ 0xd0
 800e76c:	429c      	cmp	r4, r3
 800e76e:	d105      	bne.n	800e77c <std+0x54>
 800e770:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e778:	f000 b9ce 	b.w	800eb18 <__retarget_lock_init_recursive>
 800e77c:	bd10      	pop	{r4, pc}
 800e77e:	bf00      	nop
 800e780:	0800e8ad 	.word	0x0800e8ad
 800e784:	0800e8cf 	.word	0x0800e8cf
 800e788:	0800e907 	.word	0x0800e907
 800e78c:	0800e92b 	.word	0x0800e92b
 800e790:	200057c4 	.word	0x200057c4

0800e794 <stdio_exit_handler>:
 800e794:	4a02      	ldr	r2, [pc, #8]	@ (800e7a0 <stdio_exit_handler+0xc>)
 800e796:	4903      	ldr	r1, [pc, #12]	@ (800e7a4 <stdio_exit_handler+0x10>)
 800e798:	4803      	ldr	r0, [pc, #12]	@ (800e7a8 <stdio_exit_handler+0x14>)
 800e79a:	f000 b869 	b.w	800e870 <_fwalk_sglue>
 800e79e:	bf00      	nop
 800e7a0:	20000094 	.word	0x20000094
 800e7a4:	08010495 	.word	0x08010495
 800e7a8:	200000a4 	.word	0x200000a4

0800e7ac <cleanup_stdio>:
 800e7ac:	6841      	ldr	r1, [r0, #4]
 800e7ae:	4b0c      	ldr	r3, [pc, #48]	@ (800e7e0 <cleanup_stdio+0x34>)
 800e7b0:	4299      	cmp	r1, r3
 800e7b2:	b510      	push	{r4, lr}
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	d001      	beq.n	800e7bc <cleanup_stdio+0x10>
 800e7b8:	f001 fe6c 	bl	8010494 <_fflush_r>
 800e7bc:	68a1      	ldr	r1, [r4, #8]
 800e7be:	4b09      	ldr	r3, [pc, #36]	@ (800e7e4 <cleanup_stdio+0x38>)
 800e7c0:	4299      	cmp	r1, r3
 800e7c2:	d002      	beq.n	800e7ca <cleanup_stdio+0x1e>
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f001 fe65 	bl	8010494 <_fflush_r>
 800e7ca:	68e1      	ldr	r1, [r4, #12]
 800e7cc:	4b06      	ldr	r3, [pc, #24]	@ (800e7e8 <cleanup_stdio+0x3c>)
 800e7ce:	4299      	cmp	r1, r3
 800e7d0:	d004      	beq.n	800e7dc <cleanup_stdio+0x30>
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7d8:	f001 be5c 	b.w	8010494 <_fflush_r>
 800e7dc:	bd10      	pop	{r4, pc}
 800e7de:	bf00      	nop
 800e7e0:	200057c4 	.word	0x200057c4
 800e7e4:	2000582c 	.word	0x2000582c
 800e7e8:	20005894 	.word	0x20005894

0800e7ec <global_stdio_init.part.0>:
 800e7ec:	b510      	push	{r4, lr}
 800e7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e81c <global_stdio_init.part.0+0x30>)
 800e7f0:	4c0b      	ldr	r4, [pc, #44]	@ (800e820 <global_stdio_init.part.0+0x34>)
 800e7f2:	4a0c      	ldr	r2, [pc, #48]	@ (800e824 <global_stdio_init.part.0+0x38>)
 800e7f4:	601a      	str	r2, [r3, #0]
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	2104      	movs	r1, #4
 800e7fc:	f7ff ff94 	bl	800e728 <std>
 800e800:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e804:	2201      	movs	r2, #1
 800e806:	2109      	movs	r1, #9
 800e808:	f7ff ff8e 	bl	800e728 <std>
 800e80c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e810:	2202      	movs	r2, #2
 800e812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e816:	2112      	movs	r1, #18
 800e818:	f7ff bf86 	b.w	800e728 <std>
 800e81c:	200058fc 	.word	0x200058fc
 800e820:	200057c4 	.word	0x200057c4
 800e824:	0800e795 	.word	0x0800e795

0800e828 <__sfp_lock_acquire>:
 800e828:	4801      	ldr	r0, [pc, #4]	@ (800e830 <__sfp_lock_acquire+0x8>)
 800e82a:	f000 b976 	b.w	800eb1a <__retarget_lock_acquire_recursive>
 800e82e:	bf00      	nop
 800e830:	20005905 	.word	0x20005905

0800e834 <__sfp_lock_release>:
 800e834:	4801      	ldr	r0, [pc, #4]	@ (800e83c <__sfp_lock_release+0x8>)
 800e836:	f000 b971 	b.w	800eb1c <__retarget_lock_release_recursive>
 800e83a:	bf00      	nop
 800e83c:	20005905 	.word	0x20005905

0800e840 <__sinit>:
 800e840:	b510      	push	{r4, lr}
 800e842:	4604      	mov	r4, r0
 800e844:	f7ff fff0 	bl	800e828 <__sfp_lock_acquire>
 800e848:	6a23      	ldr	r3, [r4, #32]
 800e84a:	b11b      	cbz	r3, 800e854 <__sinit+0x14>
 800e84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e850:	f7ff bff0 	b.w	800e834 <__sfp_lock_release>
 800e854:	4b04      	ldr	r3, [pc, #16]	@ (800e868 <__sinit+0x28>)
 800e856:	6223      	str	r3, [r4, #32]
 800e858:	4b04      	ldr	r3, [pc, #16]	@ (800e86c <__sinit+0x2c>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1f5      	bne.n	800e84c <__sinit+0xc>
 800e860:	f7ff ffc4 	bl	800e7ec <global_stdio_init.part.0>
 800e864:	e7f2      	b.n	800e84c <__sinit+0xc>
 800e866:	bf00      	nop
 800e868:	0800e7ad 	.word	0x0800e7ad
 800e86c:	200058fc 	.word	0x200058fc

0800e870 <_fwalk_sglue>:
 800e870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e874:	4607      	mov	r7, r0
 800e876:	4688      	mov	r8, r1
 800e878:	4614      	mov	r4, r2
 800e87a:	2600      	movs	r6, #0
 800e87c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e880:	f1b9 0901 	subs.w	r9, r9, #1
 800e884:	d505      	bpl.n	800e892 <_fwalk_sglue+0x22>
 800e886:	6824      	ldr	r4, [r4, #0]
 800e888:	2c00      	cmp	r4, #0
 800e88a:	d1f7      	bne.n	800e87c <_fwalk_sglue+0xc>
 800e88c:	4630      	mov	r0, r6
 800e88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e892:	89ab      	ldrh	r3, [r5, #12]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d907      	bls.n	800e8a8 <_fwalk_sglue+0x38>
 800e898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e89c:	3301      	adds	r3, #1
 800e89e:	d003      	beq.n	800e8a8 <_fwalk_sglue+0x38>
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4638      	mov	r0, r7
 800e8a4:	47c0      	blx	r8
 800e8a6:	4306      	orrs	r6, r0
 800e8a8:	3568      	adds	r5, #104	@ 0x68
 800e8aa:	e7e9      	b.n	800e880 <_fwalk_sglue+0x10>

0800e8ac <__sread>:
 800e8ac:	b510      	push	{r4, lr}
 800e8ae:	460c      	mov	r4, r1
 800e8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8b4:	f000 f8e2 	bl	800ea7c <_read_r>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	bfab      	itete	ge
 800e8bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e8be:	89a3      	ldrhlt	r3, [r4, #12]
 800e8c0:	181b      	addge	r3, r3, r0
 800e8c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e8c6:	bfac      	ite	ge
 800e8c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e8ca:	81a3      	strhlt	r3, [r4, #12]
 800e8cc:	bd10      	pop	{r4, pc}

0800e8ce <__swrite>:
 800e8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d2:	461f      	mov	r7, r3
 800e8d4:	898b      	ldrh	r3, [r1, #12]
 800e8d6:	05db      	lsls	r3, r3, #23
 800e8d8:	4605      	mov	r5, r0
 800e8da:	460c      	mov	r4, r1
 800e8dc:	4616      	mov	r6, r2
 800e8de:	d505      	bpl.n	800e8ec <__swrite+0x1e>
 800e8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e4:	2302      	movs	r3, #2
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f000 f8b6 	bl	800ea58 <_lseek_r>
 800e8ec:	89a3      	ldrh	r3, [r4, #12]
 800e8ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8f6:	81a3      	strh	r3, [r4, #12]
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	463b      	mov	r3, r7
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e902:	f000 b8cd 	b.w	800eaa0 <_write_r>

0800e906 <__sseek>:
 800e906:	b510      	push	{r4, lr}
 800e908:	460c      	mov	r4, r1
 800e90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e90e:	f000 f8a3 	bl	800ea58 <_lseek_r>
 800e912:	1c43      	adds	r3, r0, #1
 800e914:	89a3      	ldrh	r3, [r4, #12]
 800e916:	bf15      	itete	ne
 800e918:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e91a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e91e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e922:	81a3      	strheq	r3, [r4, #12]
 800e924:	bf18      	it	ne
 800e926:	81a3      	strhne	r3, [r4, #12]
 800e928:	bd10      	pop	{r4, pc}

0800e92a <__sclose>:
 800e92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e92e:	f000 b82d 	b.w	800e98c <_close_r>
	...

0800e934 <_vsiprintf_r>:
 800e934:	b500      	push	{lr}
 800e936:	b09b      	sub	sp, #108	@ 0x6c
 800e938:	9100      	str	r1, [sp, #0]
 800e93a:	9104      	str	r1, [sp, #16]
 800e93c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e940:	9105      	str	r1, [sp, #20]
 800e942:	9102      	str	r1, [sp, #8]
 800e944:	4905      	ldr	r1, [pc, #20]	@ (800e95c <_vsiprintf_r+0x28>)
 800e946:	9103      	str	r1, [sp, #12]
 800e948:	4669      	mov	r1, sp
 800e94a:	f001 fc23 	bl	8010194 <_svfiprintf_r>
 800e94e:	9b00      	ldr	r3, [sp, #0]
 800e950:	2200      	movs	r2, #0
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	b01b      	add	sp, #108	@ 0x6c
 800e956:	f85d fb04 	ldr.w	pc, [sp], #4
 800e95a:	bf00      	nop
 800e95c:	ffff0208 	.word	0xffff0208

0800e960 <vsiprintf>:
 800e960:	4613      	mov	r3, r2
 800e962:	460a      	mov	r2, r1
 800e964:	4601      	mov	r1, r0
 800e966:	4802      	ldr	r0, [pc, #8]	@ (800e970 <vsiprintf+0x10>)
 800e968:	6800      	ldr	r0, [r0, #0]
 800e96a:	f7ff bfe3 	b.w	800e934 <_vsiprintf_r>
 800e96e:	bf00      	nop
 800e970:	200000a0 	.word	0x200000a0

0800e974 <memset>:
 800e974:	4402      	add	r2, r0
 800e976:	4603      	mov	r3, r0
 800e978:	4293      	cmp	r3, r2
 800e97a:	d100      	bne.n	800e97e <memset+0xa>
 800e97c:	4770      	bx	lr
 800e97e:	f803 1b01 	strb.w	r1, [r3], #1
 800e982:	e7f9      	b.n	800e978 <memset+0x4>

0800e984 <_localeconv_r>:
 800e984:	4800      	ldr	r0, [pc, #0]	@ (800e988 <_localeconv_r+0x4>)
 800e986:	4770      	bx	lr
 800e988:	200001e0 	.word	0x200001e0

0800e98c <_close_r>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	4d06      	ldr	r5, [pc, #24]	@ (800e9a8 <_close_r+0x1c>)
 800e990:	2300      	movs	r3, #0
 800e992:	4604      	mov	r4, r0
 800e994:	4608      	mov	r0, r1
 800e996:	602b      	str	r3, [r5, #0]
 800e998:	f7f6 faaa 	bl	8004ef0 <_close>
 800e99c:	1c43      	adds	r3, r0, #1
 800e99e:	d102      	bne.n	800e9a6 <_close_r+0x1a>
 800e9a0:	682b      	ldr	r3, [r5, #0]
 800e9a2:	b103      	cbz	r3, 800e9a6 <_close_r+0x1a>
 800e9a4:	6023      	str	r3, [r4, #0]
 800e9a6:	bd38      	pop	{r3, r4, r5, pc}
 800e9a8:	20005900 	.word	0x20005900

0800e9ac <_reclaim_reent>:
 800e9ac:	4b29      	ldr	r3, [pc, #164]	@ (800ea54 <_reclaim_reent+0xa8>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4283      	cmp	r3, r0
 800e9b2:	b570      	push	{r4, r5, r6, lr}
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	d04b      	beq.n	800ea50 <_reclaim_reent+0xa4>
 800e9b8:	69c3      	ldr	r3, [r0, #28]
 800e9ba:	b1ab      	cbz	r3, 800e9e8 <_reclaim_reent+0x3c>
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	b16b      	cbz	r3, 800e9dc <_reclaim_reent+0x30>
 800e9c0:	2500      	movs	r5, #0
 800e9c2:	69e3      	ldr	r3, [r4, #28]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	5959      	ldr	r1, [r3, r5]
 800e9c8:	2900      	cmp	r1, #0
 800e9ca:	d13b      	bne.n	800ea44 <_reclaim_reent+0x98>
 800e9cc:	3504      	adds	r5, #4
 800e9ce:	2d80      	cmp	r5, #128	@ 0x80
 800e9d0:	d1f7      	bne.n	800e9c2 <_reclaim_reent+0x16>
 800e9d2:	69e3      	ldr	r3, [r4, #28]
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	68d9      	ldr	r1, [r3, #12]
 800e9d8:	f000 fefe 	bl	800f7d8 <_free_r>
 800e9dc:	69e3      	ldr	r3, [r4, #28]
 800e9de:	6819      	ldr	r1, [r3, #0]
 800e9e0:	b111      	cbz	r1, 800e9e8 <_reclaim_reent+0x3c>
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f000 fef8 	bl	800f7d8 <_free_r>
 800e9e8:	6961      	ldr	r1, [r4, #20]
 800e9ea:	b111      	cbz	r1, 800e9f2 <_reclaim_reent+0x46>
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f000 fef3 	bl	800f7d8 <_free_r>
 800e9f2:	69e1      	ldr	r1, [r4, #28]
 800e9f4:	b111      	cbz	r1, 800e9fc <_reclaim_reent+0x50>
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f000 feee 	bl	800f7d8 <_free_r>
 800e9fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e9fe:	b111      	cbz	r1, 800ea06 <_reclaim_reent+0x5a>
 800ea00:	4620      	mov	r0, r4
 800ea02:	f000 fee9 	bl	800f7d8 <_free_r>
 800ea06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea08:	b111      	cbz	r1, 800ea10 <_reclaim_reent+0x64>
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f000 fee4 	bl	800f7d8 <_free_r>
 800ea10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ea12:	b111      	cbz	r1, 800ea1a <_reclaim_reent+0x6e>
 800ea14:	4620      	mov	r0, r4
 800ea16:	f000 fedf 	bl	800f7d8 <_free_r>
 800ea1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ea1c:	b111      	cbz	r1, 800ea24 <_reclaim_reent+0x78>
 800ea1e:	4620      	mov	r0, r4
 800ea20:	f000 feda 	bl	800f7d8 <_free_r>
 800ea24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ea26:	b111      	cbz	r1, 800ea2e <_reclaim_reent+0x82>
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f000 fed5 	bl	800f7d8 <_free_r>
 800ea2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ea30:	b111      	cbz	r1, 800ea38 <_reclaim_reent+0x8c>
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 fed0 	bl	800f7d8 <_free_r>
 800ea38:	6a23      	ldr	r3, [r4, #32]
 800ea3a:	b14b      	cbz	r3, 800ea50 <_reclaim_reent+0xa4>
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea42:	4718      	bx	r3
 800ea44:	680e      	ldr	r6, [r1, #0]
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 fec6 	bl	800f7d8 <_free_r>
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	e7bb      	b.n	800e9c8 <_reclaim_reent+0x1c>
 800ea50:	bd70      	pop	{r4, r5, r6, pc}
 800ea52:	bf00      	nop
 800ea54:	200000a0 	.word	0x200000a0

0800ea58 <_lseek_r>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	4d07      	ldr	r5, [pc, #28]	@ (800ea78 <_lseek_r+0x20>)
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	4608      	mov	r0, r1
 800ea60:	4611      	mov	r1, r2
 800ea62:	2200      	movs	r2, #0
 800ea64:	602a      	str	r2, [r5, #0]
 800ea66:	461a      	mov	r2, r3
 800ea68:	f7f6 fa69 	bl	8004f3e <_lseek>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_lseek_r+0x1e>
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_lseek_r+0x1e>
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	20005900 	.word	0x20005900

0800ea7c <_read_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	4d07      	ldr	r5, [pc, #28]	@ (800ea9c <_read_r+0x20>)
 800ea80:	4604      	mov	r4, r0
 800ea82:	4608      	mov	r0, r1
 800ea84:	4611      	mov	r1, r2
 800ea86:	2200      	movs	r2, #0
 800ea88:	602a      	str	r2, [r5, #0]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	f7f6 f9f7 	bl	8004e7e <_read>
 800ea90:	1c43      	adds	r3, r0, #1
 800ea92:	d102      	bne.n	800ea9a <_read_r+0x1e>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	b103      	cbz	r3, 800ea9a <_read_r+0x1e>
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	20005900 	.word	0x20005900

0800eaa0 <_write_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4d07      	ldr	r5, [pc, #28]	@ (800eac0 <_write_r+0x20>)
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	4608      	mov	r0, r1
 800eaa8:	4611      	mov	r1, r2
 800eaaa:	2200      	movs	r2, #0
 800eaac:	602a      	str	r2, [r5, #0]
 800eaae:	461a      	mov	r2, r3
 800eab0:	f7f6 fa02 	bl	8004eb8 <_write>
 800eab4:	1c43      	adds	r3, r0, #1
 800eab6:	d102      	bne.n	800eabe <_write_r+0x1e>
 800eab8:	682b      	ldr	r3, [r5, #0]
 800eaba:	b103      	cbz	r3, 800eabe <_write_r+0x1e>
 800eabc:	6023      	str	r3, [r4, #0]
 800eabe:	bd38      	pop	{r3, r4, r5, pc}
 800eac0:	20005900 	.word	0x20005900

0800eac4 <__errno>:
 800eac4:	4b01      	ldr	r3, [pc, #4]	@ (800eacc <__errno+0x8>)
 800eac6:	6818      	ldr	r0, [r3, #0]
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	200000a0 	.word	0x200000a0

0800ead0 <__libc_init_array>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	4d0d      	ldr	r5, [pc, #52]	@ (800eb08 <__libc_init_array+0x38>)
 800ead4:	4c0d      	ldr	r4, [pc, #52]	@ (800eb0c <__libc_init_array+0x3c>)
 800ead6:	1b64      	subs	r4, r4, r5
 800ead8:	10a4      	asrs	r4, r4, #2
 800eada:	2600      	movs	r6, #0
 800eadc:	42a6      	cmp	r6, r4
 800eade:	d109      	bne.n	800eaf4 <__libc_init_array+0x24>
 800eae0:	4d0b      	ldr	r5, [pc, #44]	@ (800eb10 <__libc_init_array+0x40>)
 800eae2:	4c0c      	ldr	r4, [pc, #48]	@ (800eb14 <__libc_init_array+0x44>)
 800eae4:	f002 f866 	bl	8010bb4 <_init>
 800eae8:	1b64      	subs	r4, r4, r5
 800eaea:	10a4      	asrs	r4, r4, #2
 800eaec:	2600      	movs	r6, #0
 800eaee:	42a6      	cmp	r6, r4
 800eaf0:	d105      	bne.n	800eafe <__libc_init_array+0x2e>
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaf8:	4798      	blx	r3
 800eafa:	3601      	adds	r6, #1
 800eafc:	e7ee      	b.n	800eadc <__libc_init_array+0xc>
 800eafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb02:	4798      	blx	r3
 800eb04:	3601      	adds	r6, #1
 800eb06:	e7f2      	b.n	800eaee <__libc_init_array+0x1e>
 800eb08:	08011100 	.word	0x08011100
 800eb0c:	08011100 	.word	0x08011100
 800eb10:	08011100 	.word	0x08011100
 800eb14:	08011104 	.word	0x08011104

0800eb18 <__retarget_lock_init_recursive>:
 800eb18:	4770      	bx	lr

0800eb1a <__retarget_lock_acquire_recursive>:
 800eb1a:	4770      	bx	lr

0800eb1c <__retarget_lock_release_recursive>:
 800eb1c:	4770      	bx	lr

0800eb1e <memcpy>:
 800eb1e:	440a      	add	r2, r1
 800eb20:	4291      	cmp	r1, r2
 800eb22:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb26:	d100      	bne.n	800eb2a <memcpy+0xc>
 800eb28:	4770      	bx	lr
 800eb2a:	b510      	push	{r4, lr}
 800eb2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb34:	4291      	cmp	r1, r2
 800eb36:	d1f9      	bne.n	800eb2c <memcpy+0xe>
 800eb38:	bd10      	pop	{r4, pc}

0800eb3a <quorem>:
 800eb3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3e:	6903      	ldr	r3, [r0, #16]
 800eb40:	690c      	ldr	r4, [r1, #16]
 800eb42:	42a3      	cmp	r3, r4
 800eb44:	4607      	mov	r7, r0
 800eb46:	db7e      	blt.n	800ec46 <quorem+0x10c>
 800eb48:	3c01      	subs	r4, #1
 800eb4a:	f101 0814 	add.w	r8, r1, #20
 800eb4e:	00a3      	lsls	r3, r4, #2
 800eb50:	f100 0514 	add.w	r5, r0, #20
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb5a:	9301      	str	r3, [sp, #4]
 800eb5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb64:	3301      	adds	r3, #1
 800eb66:	429a      	cmp	r2, r3
 800eb68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb6c:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb70:	d32e      	bcc.n	800ebd0 <quorem+0x96>
 800eb72:	f04f 0a00 	mov.w	sl, #0
 800eb76:	46c4      	mov	ip, r8
 800eb78:	46ae      	mov	lr, r5
 800eb7a:	46d3      	mov	fp, sl
 800eb7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb80:	b298      	uxth	r0, r3
 800eb82:	fb06 a000 	mla	r0, r6, r0, sl
 800eb86:	0c02      	lsrs	r2, r0, #16
 800eb88:	0c1b      	lsrs	r3, r3, #16
 800eb8a:	fb06 2303 	mla	r3, r6, r3, r2
 800eb8e:	f8de 2000 	ldr.w	r2, [lr]
 800eb92:	b280      	uxth	r0, r0
 800eb94:	b292      	uxth	r2, r2
 800eb96:	1a12      	subs	r2, r2, r0
 800eb98:	445a      	add	r2, fp
 800eb9a:	f8de 0000 	ldr.w	r0, [lr]
 800eb9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eba8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ebac:	b292      	uxth	r2, r2
 800ebae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ebb2:	45e1      	cmp	r9, ip
 800ebb4:	f84e 2b04 	str.w	r2, [lr], #4
 800ebb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ebbc:	d2de      	bcs.n	800eb7c <quorem+0x42>
 800ebbe:	9b00      	ldr	r3, [sp, #0]
 800ebc0:	58eb      	ldr	r3, [r5, r3]
 800ebc2:	b92b      	cbnz	r3, 800ebd0 <quorem+0x96>
 800ebc4:	9b01      	ldr	r3, [sp, #4]
 800ebc6:	3b04      	subs	r3, #4
 800ebc8:	429d      	cmp	r5, r3
 800ebca:	461a      	mov	r2, r3
 800ebcc:	d32f      	bcc.n	800ec2e <quorem+0xf4>
 800ebce:	613c      	str	r4, [r7, #16]
 800ebd0:	4638      	mov	r0, r7
 800ebd2:	f001 f97b 	bl	800fecc <__mcmp>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	db25      	blt.n	800ec26 <quorem+0xec>
 800ebda:	4629      	mov	r1, r5
 800ebdc:	2000      	movs	r0, #0
 800ebde:	f858 2b04 	ldr.w	r2, [r8], #4
 800ebe2:	f8d1 c000 	ldr.w	ip, [r1]
 800ebe6:	fa1f fe82 	uxth.w	lr, r2
 800ebea:	fa1f f38c 	uxth.w	r3, ip
 800ebee:	eba3 030e 	sub.w	r3, r3, lr
 800ebf2:	4403      	add	r3, r0
 800ebf4:	0c12      	lsrs	r2, r2, #16
 800ebf6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ebfa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec04:	45c1      	cmp	r9, r8
 800ec06:	f841 3b04 	str.w	r3, [r1], #4
 800ec0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ec0e:	d2e6      	bcs.n	800ebde <quorem+0xa4>
 800ec10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec18:	b922      	cbnz	r2, 800ec24 <quorem+0xea>
 800ec1a:	3b04      	subs	r3, #4
 800ec1c:	429d      	cmp	r5, r3
 800ec1e:	461a      	mov	r2, r3
 800ec20:	d30b      	bcc.n	800ec3a <quorem+0x100>
 800ec22:	613c      	str	r4, [r7, #16]
 800ec24:	3601      	adds	r6, #1
 800ec26:	4630      	mov	r0, r6
 800ec28:	b003      	add	sp, #12
 800ec2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec2e:	6812      	ldr	r2, [r2, #0]
 800ec30:	3b04      	subs	r3, #4
 800ec32:	2a00      	cmp	r2, #0
 800ec34:	d1cb      	bne.n	800ebce <quorem+0x94>
 800ec36:	3c01      	subs	r4, #1
 800ec38:	e7c6      	b.n	800ebc8 <quorem+0x8e>
 800ec3a:	6812      	ldr	r2, [r2, #0]
 800ec3c:	3b04      	subs	r3, #4
 800ec3e:	2a00      	cmp	r2, #0
 800ec40:	d1ef      	bne.n	800ec22 <quorem+0xe8>
 800ec42:	3c01      	subs	r4, #1
 800ec44:	e7ea      	b.n	800ec1c <quorem+0xe2>
 800ec46:	2000      	movs	r0, #0
 800ec48:	e7ee      	b.n	800ec28 <quorem+0xee>
 800ec4a:	0000      	movs	r0, r0
 800ec4c:	0000      	movs	r0, r0
	...

0800ec50 <_dtoa_r>:
 800ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	69c7      	ldr	r7, [r0, #28]
 800ec56:	b099      	sub	sp, #100	@ 0x64
 800ec58:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec5c:	ec55 4b10 	vmov	r4, r5, d0
 800ec60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ec62:	9109      	str	r1, [sp, #36]	@ 0x24
 800ec64:	4683      	mov	fp, r0
 800ec66:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec6a:	b97f      	cbnz	r7, 800ec8c <_dtoa_r+0x3c>
 800ec6c:	2010      	movs	r0, #16
 800ec6e:	f000 fdfd 	bl	800f86c <malloc>
 800ec72:	4602      	mov	r2, r0
 800ec74:	f8cb 001c 	str.w	r0, [fp, #28]
 800ec78:	b920      	cbnz	r0, 800ec84 <_dtoa_r+0x34>
 800ec7a:	4ba7      	ldr	r3, [pc, #668]	@ (800ef18 <_dtoa_r+0x2c8>)
 800ec7c:	21ef      	movs	r1, #239	@ 0xef
 800ec7e:	48a7      	ldr	r0, [pc, #668]	@ (800ef1c <_dtoa_r+0x2cc>)
 800ec80:	f001 fc5a 	bl	8010538 <__assert_func>
 800ec84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ec88:	6007      	str	r7, [r0, #0]
 800ec8a:	60c7      	str	r7, [r0, #12]
 800ec8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ec90:	6819      	ldr	r1, [r3, #0]
 800ec92:	b159      	cbz	r1, 800ecac <_dtoa_r+0x5c>
 800ec94:	685a      	ldr	r2, [r3, #4]
 800ec96:	604a      	str	r2, [r1, #4]
 800ec98:	2301      	movs	r3, #1
 800ec9a:	4093      	lsls	r3, r2
 800ec9c:	608b      	str	r3, [r1, #8]
 800ec9e:	4658      	mov	r0, fp
 800eca0:	f000 feda 	bl	800fa58 <_Bfree>
 800eca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]
 800ecac:	1e2b      	subs	r3, r5, #0
 800ecae:	bfb9      	ittee	lt
 800ecb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ecb4:	9303      	strlt	r3, [sp, #12]
 800ecb6:	2300      	movge	r3, #0
 800ecb8:	6033      	strge	r3, [r6, #0]
 800ecba:	9f03      	ldr	r7, [sp, #12]
 800ecbc:	4b98      	ldr	r3, [pc, #608]	@ (800ef20 <_dtoa_r+0x2d0>)
 800ecbe:	bfbc      	itt	lt
 800ecc0:	2201      	movlt	r2, #1
 800ecc2:	6032      	strlt	r2, [r6, #0]
 800ecc4:	43bb      	bics	r3, r7
 800ecc6:	d112      	bne.n	800ecee <_dtoa_r+0x9e>
 800ecc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ecca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ecce:	6013      	str	r3, [r2, #0]
 800ecd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ecd4:	4323      	orrs	r3, r4
 800ecd6:	f000 854d 	beq.w	800f774 <_dtoa_r+0xb24>
 800ecda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ef34 <_dtoa_r+0x2e4>
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f000 854f 	beq.w	800f784 <_dtoa_r+0xb34>
 800ece6:	f10a 0303 	add.w	r3, sl, #3
 800ecea:	f000 bd49 	b.w	800f780 <_dtoa_r+0xb30>
 800ecee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	ec51 0b17 	vmov	r0, r1, d7
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ecfe:	f7f1 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed02:	4680      	mov	r8, r0
 800ed04:	b158      	cbz	r0, 800ed1e <_dtoa_r+0xce>
 800ed06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ed08:	2301      	movs	r3, #1
 800ed0a:	6013      	str	r3, [r2, #0]
 800ed0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ed0e:	b113      	cbz	r3, 800ed16 <_dtoa_r+0xc6>
 800ed10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ed12:	4b84      	ldr	r3, [pc, #528]	@ (800ef24 <_dtoa_r+0x2d4>)
 800ed14:	6013      	str	r3, [r2, #0]
 800ed16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ef38 <_dtoa_r+0x2e8>
 800ed1a:	f000 bd33 	b.w	800f784 <_dtoa_r+0xb34>
 800ed1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ed22:	aa16      	add	r2, sp, #88	@ 0x58
 800ed24:	a917      	add	r1, sp, #92	@ 0x5c
 800ed26:	4658      	mov	r0, fp
 800ed28:	f001 f980 	bl	801002c <__d2b>
 800ed2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ed30:	4681      	mov	r9, r0
 800ed32:	2e00      	cmp	r6, #0
 800ed34:	d077      	beq.n	800ee26 <_dtoa_r+0x1d6>
 800ed36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ed3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ed48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ed4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ed50:	4619      	mov	r1, r3
 800ed52:	2200      	movs	r2, #0
 800ed54:	4b74      	ldr	r3, [pc, #464]	@ (800ef28 <_dtoa_r+0x2d8>)
 800ed56:	f7f1 fa97 	bl	8000288 <__aeabi_dsub>
 800ed5a:	a369      	add	r3, pc, #420	@ (adr r3, 800ef00 <_dtoa_r+0x2b0>)
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	f7f1 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ed64:	a368      	add	r3, pc, #416	@ (adr r3, 800ef08 <_dtoa_r+0x2b8>)
 800ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6a:	f7f1 fa8f 	bl	800028c <__adddf3>
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4630      	mov	r0, r6
 800ed72:	460d      	mov	r5, r1
 800ed74:	f7f1 fbd6 	bl	8000524 <__aeabi_i2d>
 800ed78:	a365      	add	r3, pc, #404	@ (adr r3, 800ef10 <_dtoa_r+0x2c0>)
 800ed7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7e:	f7f1 fc3b 	bl	80005f8 <__aeabi_dmul>
 800ed82:	4602      	mov	r2, r0
 800ed84:	460b      	mov	r3, r1
 800ed86:	4620      	mov	r0, r4
 800ed88:	4629      	mov	r1, r5
 800ed8a:	f7f1 fa7f 	bl	800028c <__adddf3>
 800ed8e:	4604      	mov	r4, r0
 800ed90:	460d      	mov	r5, r1
 800ed92:	f7f1 fee1 	bl	8000b58 <__aeabi_d2iz>
 800ed96:	2200      	movs	r2, #0
 800ed98:	4607      	mov	r7, r0
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	4629      	mov	r1, r5
 800eda0:	f7f1 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800eda4:	b140      	cbz	r0, 800edb8 <_dtoa_r+0x168>
 800eda6:	4638      	mov	r0, r7
 800eda8:	f7f1 fbbc 	bl	8000524 <__aeabi_i2d>
 800edac:	4622      	mov	r2, r4
 800edae:	462b      	mov	r3, r5
 800edb0:	f7f1 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800edb4:	b900      	cbnz	r0, 800edb8 <_dtoa_r+0x168>
 800edb6:	3f01      	subs	r7, #1
 800edb8:	2f16      	cmp	r7, #22
 800edba:	d851      	bhi.n	800ee60 <_dtoa_r+0x210>
 800edbc:	4b5b      	ldr	r3, [pc, #364]	@ (800ef2c <_dtoa_r+0x2dc>)
 800edbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800edca:	f7f1 fe87 	bl	8000adc <__aeabi_dcmplt>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d048      	beq.n	800ee64 <_dtoa_r+0x214>
 800edd2:	3f01      	subs	r7, #1
 800edd4:	2300      	movs	r3, #0
 800edd6:	9312      	str	r3, [sp, #72]	@ 0x48
 800edd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800edda:	1b9b      	subs	r3, r3, r6
 800eddc:	1e5a      	subs	r2, r3, #1
 800edde:	bf44      	itt	mi
 800ede0:	f1c3 0801 	rsbmi	r8, r3, #1
 800ede4:	2300      	movmi	r3, #0
 800ede6:	9208      	str	r2, [sp, #32]
 800ede8:	bf54      	ite	pl
 800edea:	f04f 0800 	movpl.w	r8, #0
 800edee:	9308      	strmi	r3, [sp, #32]
 800edf0:	2f00      	cmp	r7, #0
 800edf2:	db39      	blt.n	800ee68 <_dtoa_r+0x218>
 800edf4:	9b08      	ldr	r3, [sp, #32]
 800edf6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800edf8:	443b      	add	r3, r7
 800edfa:	9308      	str	r3, [sp, #32]
 800edfc:	2300      	movs	r3, #0
 800edfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee02:	2b09      	cmp	r3, #9
 800ee04:	d864      	bhi.n	800eed0 <_dtoa_r+0x280>
 800ee06:	2b05      	cmp	r3, #5
 800ee08:	bfc4      	itt	gt
 800ee0a:	3b04      	subgt	r3, #4
 800ee0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ee0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee10:	f1a3 0302 	sub.w	r3, r3, #2
 800ee14:	bfcc      	ite	gt
 800ee16:	2400      	movgt	r4, #0
 800ee18:	2401      	movle	r4, #1
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d863      	bhi.n	800eee6 <_dtoa_r+0x296>
 800ee1e:	e8df f003 	tbb	[pc, r3]
 800ee22:	372a      	.short	0x372a
 800ee24:	5535      	.short	0x5535
 800ee26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ee2a:	441e      	add	r6, r3
 800ee2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ee30:	2b20      	cmp	r3, #32
 800ee32:	bfc1      	itttt	gt
 800ee34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ee38:	409f      	lslgt	r7, r3
 800ee3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ee3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ee42:	bfd6      	itet	le
 800ee44:	f1c3 0320 	rsble	r3, r3, #32
 800ee48:	ea47 0003 	orrgt.w	r0, r7, r3
 800ee4c:	fa04 f003 	lslle.w	r0, r4, r3
 800ee50:	f7f1 fb58 	bl	8000504 <__aeabi_ui2d>
 800ee54:	2201      	movs	r2, #1
 800ee56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ee5a:	3e01      	subs	r6, #1
 800ee5c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ee5e:	e777      	b.n	800ed50 <_dtoa_r+0x100>
 800ee60:	2301      	movs	r3, #1
 800ee62:	e7b8      	b.n	800edd6 <_dtoa_r+0x186>
 800ee64:	9012      	str	r0, [sp, #72]	@ 0x48
 800ee66:	e7b7      	b.n	800edd8 <_dtoa_r+0x188>
 800ee68:	427b      	negs	r3, r7
 800ee6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	eba8 0807 	sub.w	r8, r8, r7
 800ee72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee74:	e7c4      	b.n	800ee00 <_dtoa_r+0x1b0>
 800ee76:	2300      	movs	r3, #0
 800ee78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	dc35      	bgt.n	800eeec <_dtoa_r+0x29c>
 800ee80:	2301      	movs	r3, #1
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	9307      	str	r3, [sp, #28]
 800ee86:	461a      	mov	r2, r3
 800ee88:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee8a:	e00b      	b.n	800eea4 <_dtoa_r+0x254>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e7f3      	b.n	800ee78 <_dtoa_r+0x228>
 800ee90:	2300      	movs	r3, #0
 800ee92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee96:	18fb      	adds	r3, r7, r3
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	9307      	str	r3, [sp, #28]
 800eea0:	bfb8      	it	lt
 800eea2:	2301      	movlt	r3, #1
 800eea4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800eea8:	2100      	movs	r1, #0
 800eeaa:	2204      	movs	r2, #4
 800eeac:	f102 0514 	add.w	r5, r2, #20
 800eeb0:	429d      	cmp	r5, r3
 800eeb2:	d91f      	bls.n	800eef4 <_dtoa_r+0x2a4>
 800eeb4:	6041      	str	r1, [r0, #4]
 800eeb6:	4658      	mov	r0, fp
 800eeb8:	f000 fd8e 	bl	800f9d8 <_Balloc>
 800eebc:	4682      	mov	sl, r0
 800eebe:	2800      	cmp	r0, #0
 800eec0:	d13c      	bne.n	800ef3c <_dtoa_r+0x2ec>
 800eec2:	4b1b      	ldr	r3, [pc, #108]	@ (800ef30 <_dtoa_r+0x2e0>)
 800eec4:	4602      	mov	r2, r0
 800eec6:	f240 11af 	movw	r1, #431	@ 0x1af
 800eeca:	e6d8      	b.n	800ec7e <_dtoa_r+0x2e>
 800eecc:	2301      	movs	r3, #1
 800eece:	e7e0      	b.n	800ee92 <_dtoa_r+0x242>
 800eed0:	2401      	movs	r4, #1
 800eed2:	2300      	movs	r3, #0
 800eed4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eed6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eed8:	f04f 33ff 	mov.w	r3, #4294967295
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	9307      	str	r3, [sp, #28]
 800eee0:	2200      	movs	r2, #0
 800eee2:	2312      	movs	r3, #18
 800eee4:	e7d0      	b.n	800ee88 <_dtoa_r+0x238>
 800eee6:	2301      	movs	r3, #1
 800eee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eeea:	e7f5      	b.n	800eed8 <_dtoa_r+0x288>
 800eeec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	9307      	str	r3, [sp, #28]
 800eef2:	e7d7      	b.n	800eea4 <_dtoa_r+0x254>
 800eef4:	3101      	adds	r1, #1
 800eef6:	0052      	lsls	r2, r2, #1
 800eef8:	e7d8      	b.n	800eeac <_dtoa_r+0x25c>
 800eefa:	bf00      	nop
 800eefc:	f3af 8000 	nop.w
 800ef00:	636f4361 	.word	0x636f4361
 800ef04:	3fd287a7 	.word	0x3fd287a7
 800ef08:	8b60c8b3 	.word	0x8b60c8b3
 800ef0c:	3fc68a28 	.word	0x3fc68a28
 800ef10:	509f79fb 	.word	0x509f79fb
 800ef14:	3fd34413 	.word	0x3fd34413
 800ef18:	08010dc9 	.word	0x08010dc9
 800ef1c:	08010de0 	.word	0x08010de0
 800ef20:	7ff00000 	.word	0x7ff00000
 800ef24:	08010d99 	.word	0x08010d99
 800ef28:	3ff80000 	.word	0x3ff80000
 800ef2c:	08010ed8 	.word	0x08010ed8
 800ef30:	08010e38 	.word	0x08010e38
 800ef34:	08010dc5 	.word	0x08010dc5
 800ef38:	08010d98 	.word	0x08010d98
 800ef3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ef40:	6018      	str	r0, [r3, #0]
 800ef42:	9b07      	ldr	r3, [sp, #28]
 800ef44:	2b0e      	cmp	r3, #14
 800ef46:	f200 80a4 	bhi.w	800f092 <_dtoa_r+0x442>
 800ef4a:	2c00      	cmp	r4, #0
 800ef4c:	f000 80a1 	beq.w	800f092 <_dtoa_r+0x442>
 800ef50:	2f00      	cmp	r7, #0
 800ef52:	dd33      	ble.n	800efbc <_dtoa_r+0x36c>
 800ef54:	4bad      	ldr	r3, [pc, #692]	@ (800f20c <_dtoa_r+0x5bc>)
 800ef56:	f007 020f 	and.w	r2, r7, #15
 800ef5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef5e:	ed93 7b00 	vldr	d7, [r3]
 800ef62:	05f8      	lsls	r0, r7, #23
 800ef64:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ef68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ef6c:	d516      	bpl.n	800ef9c <_dtoa_r+0x34c>
 800ef6e:	4ba8      	ldr	r3, [pc, #672]	@ (800f210 <_dtoa_r+0x5c0>)
 800ef70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ef74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef78:	f7f1 fc68 	bl	800084c <__aeabi_ddiv>
 800ef7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef80:	f004 040f 	and.w	r4, r4, #15
 800ef84:	2603      	movs	r6, #3
 800ef86:	4da2      	ldr	r5, [pc, #648]	@ (800f210 <_dtoa_r+0x5c0>)
 800ef88:	b954      	cbnz	r4, 800efa0 <_dtoa_r+0x350>
 800ef8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef92:	f7f1 fc5b 	bl	800084c <__aeabi_ddiv>
 800ef96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef9a:	e028      	b.n	800efee <_dtoa_r+0x39e>
 800ef9c:	2602      	movs	r6, #2
 800ef9e:	e7f2      	b.n	800ef86 <_dtoa_r+0x336>
 800efa0:	07e1      	lsls	r1, r4, #31
 800efa2:	d508      	bpl.n	800efb6 <_dtoa_r+0x366>
 800efa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800efac:	f7f1 fb24 	bl	80005f8 <__aeabi_dmul>
 800efb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efb4:	3601      	adds	r6, #1
 800efb6:	1064      	asrs	r4, r4, #1
 800efb8:	3508      	adds	r5, #8
 800efba:	e7e5      	b.n	800ef88 <_dtoa_r+0x338>
 800efbc:	f000 80d2 	beq.w	800f164 <_dtoa_r+0x514>
 800efc0:	427c      	negs	r4, r7
 800efc2:	4b92      	ldr	r3, [pc, #584]	@ (800f20c <_dtoa_r+0x5bc>)
 800efc4:	4d92      	ldr	r5, [pc, #584]	@ (800f210 <_dtoa_r+0x5c0>)
 800efc6:	f004 020f 	and.w	r2, r4, #15
 800efca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800efd6:	f7f1 fb0f 	bl	80005f8 <__aeabi_dmul>
 800efda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efde:	1124      	asrs	r4, r4, #4
 800efe0:	2300      	movs	r3, #0
 800efe2:	2602      	movs	r6, #2
 800efe4:	2c00      	cmp	r4, #0
 800efe6:	f040 80b2 	bne.w	800f14e <_dtoa_r+0x4fe>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1d3      	bne.n	800ef96 <_dtoa_r+0x346>
 800efee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eff0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f000 80b7 	beq.w	800f168 <_dtoa_r+0x518>
 800effa:	4b86      	ldr	r3, [pc, #536]	@ (800f214 <_dtoa_r+0x5c4>)
 800effc:	2200      	movs	r2, #0
 800effe:	4620      	mov	r0, r4
 800f000:	4629      	mov	r1, r5
 800f002:	f7f1 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800f006:	2800      	cmp	r0, #0
 800f008:	f000 80ae 	beq.w	800f168 <_dtoa_r+0x518>
 800f00c:	9b07      	ldr	r3, [sp, #28]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f000 80aa 	beq.w	800f168 <_dtoa_r+0x518>
 800f014:	9b00      	ldr	r3, [sp, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	dd37      	ble.n	800f08a <_dtoa_r+0x43a>
 800f01a:	1e7b      	subs	r3, r7, #1
 800f01c:	9304      	str	r3, [sp, #16]
 800f01e:	4620      	mov	r0, r4
 800f020:	4b7d      	ldr	r3, [pc, #500]	@ (800f218 <_dtoa_r+0x5c8>)
 800f022:	2200      	movs	r2, #0
 800f024:	4629      	mov	r1, r5
 800f026:	f7f1 fae7 	bl	80005f8 <__aeabi_dmul>
 800f02a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f02e:	9c00      	ldr	r4, [sp, #0]
 800f030:	3601      	adds	r6, #1
 800f032:	4630      	mov	r0, r6
 800f034:	f7f1 fa76 	bl	8000524 <__aeabi_i2d>
 800f038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f03c:	f7f1 fadc 	bl	80005f8 <__aeabi_dmul>
 800f040:	4b76      	ldr	r3, [pc, #472]	@ (800f21c <_dtoa_r+0x5cc>)
 800f042:	2200      	movs	r2, #0
 800f044:	f7f1 f922 	bl	800028c <__adddf3>
 800f048:	4605      	mov	r5, r0
 800f04a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f04e:	2c00      	cmp	r4, #0
 800f050:	f040 808d 	bne.w	800f16e <_dtoa_r+0x51e>
 800f054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f058:	4b71      	ldr	r3, [pc, #452]	@ (800f220 <_dtoa_r+0x5d0>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	f7f1 f914 	bl	8000288 <__aeabi_dsub>
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f068:	462a      	mov	r2, r5
 800f06a:	4633      	mov	r3, r6
 800f06c:	f7f1 fd54 	bl	8000b18 <__aeabi_dcmpgt>
 800f070:	2800      	cmp	r0, #0
 800f072:	f040 828b 	bne.w	800f58c <_dtoa_r+0x93c>
 800f076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f07a:	462a      	mov	r2, r5
 800f07c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f080:	f7f1 fd2c 	bl	8000adc <__aeabi_dcmplt>
 800f084:	2800      	cmp	r0, #0
 800f086:	f040 8128 	bne.w	800f2da <_dtoa_r+0x68a>
 800f08a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f08e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f092:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f094:	2b00      	cmp	r3, #0
 800f096:	f2c0 815a 	blt.w	800f34e <_dtoa_r+0x6fe>
 800f09a:	2f0e      	cmp	r7, #14
 800f09c:	f300 8157 	bgt.w	800f34e <_dtoa_r+0x6fe>
 800f0a0:	4b5a      	ldr	r3, [pc, #360]	@ (800f20c <_dtoa_r+0x5bc>)
 800f0a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f0a6:	ed93 7b00 	vldr	d7, [r3]
 800f0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	ed8d 7b00 	vstr	d7, [sp]
 800f0b2:	da03      	bge.n	800f0bc <_dtoa_r+0x46c>
 800f0b4:	9b07      	ldr	r3, [sp, #28]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	f340 8101 	ble.w	800f2be <_dtoa_r+0x66e>
 800f0bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f0c0:	4656      	mov	r6, sl
 800f0c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	f7f1 fbbf 	bl	800084c <__aeabi_ddiv>
 800f0ce:	f7f1 fd43 	bl	8000b58 <__aeabi_d2iz>
 800f0d2:	4680      	mov	r8, r0
 800f0d4:	f7f1 fa26 	bl	8000524 <__aeabi_i2d>
 800f0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0dc:	f7f1 fa8c 	bl	80005f8 <__aeabi_dmul>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f0ec:	f7f1 f8cc 	bl	8000288 <__aeabi_dsub>
 800f0f0:	f806 4b01 	strb.w	r4, [r6], #1
 800f0f4:	9d07      	ldr	r5, [sp, #28]
 800f0f6:	eba6 040a 	sub.w	r4, r6, sl
 800f0fa:	42a5      	cmp	r5, r4
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	460b      	mov	r3, r1
 800f100:	f040 8117 	bne.w	800f332 <_dtoa_r+0x6e2>
 800f104:	f7f1 f8c2 	bl	800028c <__adddf3>
 800f108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f10c:	4604      	mov	r4, r0
 800f10e:	460d      	mov	r5, r1
 800f110:	f7f1 fd02 	bl	8000b18 <__aeabi_dcmpgt>
 800f114:	2800      	cmp	r0, #0
 800f116:	f040 80f9 	bne.w	800f30c <_dtoa_r+0x6bc>
 800f11a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f11e:	4620      	mov	r0, r4
 800f120:	4629      	mov	r1, r5
 800f122:	f7f1 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800f126:	b118      	cbz	r0, 800f130 <_dtoa_r+0x4e0>
 800f128:	f018 0f01 	tst.w	r8, #1
 800f12c:	f040 80ee 	bne.w	800f30c <_dtoa_r+0x6bc>
 800f130:	4649      	mov	r1, r9
 800f132:	4658      	mov	r0, fp
 800f134:	f000 fc90 	bl	800fa58 <_Bfree>
 800f138:	2300      	movs	r3, #0
 800f13a:	7033      	strb	r3, [r6, #0]
 800f13c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f13e:	3701      	adds	r7, #1
 800f140:	601f      	str	r7, [r3, #0]
 800f142:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f144:	2b00      	cmp	r3, #0
 800f146:	f000 831d 	beq.w	800f784 <_dtoa_r+0xb34>
 800f14a:	601e      	str	r6, [r3, #0]
 800f14c:	e31a      	b.n	800f784 <_dtoa_r+0xb34>
 800f14e:	07e2      	lsls	r2, r4, #31
 800f150:	d505      	bpl.n	800f15e <_dtoa_r+0x50e>
 800f152:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f156:	f7f1 fa4f 	bl	80005f8 <__aeabi_dmul>
 800f15a:	3601      	adds	r6, #1
 800f15c:	2301      	movs	r3, #1
 800f15e:	1064      	asrs	r4, r4, #1
 800f160:	3508      	adds	r5, #8
 800f162:	e73f      	b.n	800efe4 <_dtoa_r+0x394>
 800f164:	2602      	movs	r6, #2
 800f166:	e742      	b.n	800efee <_dtoa_r+0x39e>
 800f168:	9c07      	ldr	r4, [sp, #28]
 800f16a:	9704      	str	r7, [sp, #16]
 800f16c:	e761      	b.n	800f032 <_dtoa_r+0x3e2>
 800f16e:	4b27      	ldr	r3, [pc, #156]	@ (800f20c <_dtoa_r+0x5bc>)
 800f170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f172:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f176:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f17a:	4454      	add	r4, sl
 800f17c:	2900      	cmp	r1, #0
 800f17e:	d053      	beq.n	800f228 <_dtoa_r+0x5d8>
 800f180:	4928      	ldr	r1, [pc, #160]	@ (800f224 <_dtoa_r+0x5d4>)
 800f182:	2000      	movs	r0, #0
 800f184:	f7f1 fb62 	bl	800084c <__aeabi_ddiv>
 800f188:	4633      	mov	r3, r6
 800f18a:	462a      	mov	r2, r5
 800f18c:	f7f1 f87c 	bl	8000288 <__aeabi_dsub>
 800f190:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f194:	4656      	mov	r6, sl
 800f196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f19a:	f7f1 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800f19e:	4605      	mov	r5, r0
 800f1a0:	f7f1 f9c0 	bl	8000524 <__aeabi_i2d>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1ac:	f7f1 f86c 	bl	8000288 <__aeabi_dsub>
 800f1b0:	3530      	adds	r5, #48	@ 0x30
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f1ba:	f806 5b01 	strb.w	r5, [r6], #1
 800f1be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f1c2:	f7f1 fc8b 	bl	8000adc <__aeabi_dcmplt>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d171      	bne.n	800f2ae <_dtoa_r+0x65e>
 800f1ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1ce:	4911      	ldr	r1, [pc, #68]	@ (800f214 <_dtoa_r+0x5c4>)
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	f7f1 f859 	bl	8000288 <__aeabi_dsub>
 800f1d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f1da:	f7f1 fc7f 	bl	8000adc <__aeabi_dcmplt>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	f040 8095 	bne.w	800f30e <_dtoa_r+0x6be>
 800f1e4:	42a6      	cmp	r6, r4
 800f1e6:	f43f af50 	beq.w	800f08a <_dtoa_r+0x43a>
 800f1ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800f218 <_dtoa_r+0x5c8>)
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f7f1 fa01 	bl	80005f8 <__aeabi_dmul>
 800f1f6:	4b08      	ldr	r3, [pc, #32]	@ (800f218 <_dtoa_r+0x5c8>)
 800f1f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f202:	f7f1 f9f9 	bl	80005f8 <__aeabi_dmul>
 800f206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f20a:	e7c4      	b.n	800f196 <_dtoa_r+0x546>
 800f20c:	08010ed8 	.word	0x08010ed8
 800f210:	08010eb0 	.word	0x08010eb0
 800f214:	3ff00000 	.word	0x3ff00000
 800f218:	40240000 	.word	0x40240000
 800f21c:	401c0000 	.word	0x401c0000
 800f220:	40140000 	.word	0x40140000
 800f224:	3fe00000 	.word	0x3fe00000
 800f228:	4631      	mov	r1, r6
 800f22a:	4628      	mov	r0, r5
 800f22c:	f7f1 f9e4 	bl	80005f8 <__aeabi_dmul>
 800f230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f234:	9415      	str	r4, [sp, #84]	@ 0x54
 800f236:	4656      	mov	r6, sl
 800f238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f23c:	f7f1 fc8c 	bl	8000b58 <__aeabi_d2iz>
 800f240:	4605      	mov	r5, r0
 800f242:	f7f1 f96f 	bl	8000524 <__aeabi_i2d>
 800f246:	4602      	mov	r2, r0
 800f248:	460b      	mov	r3, r1
 800f24a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f24e:	f7f1 f81b 	bl	8000288 <__aeabi_dsub>
 800f252:	3530      	adds	r5, #48	@ 0x30
 800f254:	f806 5b01 	strb.w	r5, [r6], #1
 800f258:	4602      	mov	r2, r0
 800f25a:	460b      	mov	r3, r1
 800f25c:	42a6      	cmp	r6, r4
 800f25e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f262:	f04f 0200 	mov.w	r2, #0
 800f266:	d124      	bne.n	800f2b2 <_dtoa_r+0x662>
 800f268:	4bac      	ldr	r3, [pc, #688]	@ (800f51c <_dtoa_r+0x8cc>)
 800f26a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f26e:	f7f1 f80d 	bl	800028c <__adddf3>
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f27a:	f7f1 fc4d 	bl	8000b18 <__aeabi_dcmpgt>
 800f27e:	2800      	cmp	r0, #0
 800f280:	d145      	bne.n	800f30e <_dtoa_r+0x6be>
 800f282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f286:	49a5      	ldr	r1, [pc, #660]	@ (800f51c <_dtoa_r+0x8cc>)
 800f288:	2000      	movs	r0, #0
 800f28a:	f7f0 fffd 	bl	8000288 <__aeabi_dsub>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f296:	f7f1 fc21 	bl	8000adc <__aeabi_dcmplt>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	f43f aef5 	beq.w	800f08a <_dtoa_r+0x43a>
 800f2a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f2a2:	1e73      	subs	r3, r6, #1
 800f2a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800f2a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f2aa:	2b30      	cmp	r3, #48	@ 0x30
 800f2ac:	d0f8      	beq.n	800f2a0 <_dtoa_r+0x650>
 800f2ae:	9f04      	ldr	r7, [sp, #16]
 800f2b0:	e73e      	b.n	800f130 <_dtoa_r+0x4e0>
 800f2b2:	4b9b      	ldr	r3, [pc, #620]	@ (800f520 <_dtoa_r+0x8d0>)
 800f2b4:	f7f1 f9a0 	bl	80005f8 <__aeabi_dmul>
 800f2b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2bc:	e7bc      	b.n	800f238 <_dtoa_r+0x5e8>
 800f2be:	d10c      	bne.n	800f2da <_dtoa_r+0x68a>
 800f2c0:	4b98      	ldr	r3, [pc, #608]	@ (800f524 <_dtoa_r+0x8d4>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2c8:	f7f1 f996 	bl	80005f8 <__aeabi_dmul>
 800f2cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2d0:	f7f1 fc18 	bl	8000b04 <__aeabi_dcmpge>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	f000 8157 	beq.w	800f588 <_dtoa_r+0x938>
 800f2da:	2400      	movs	r4, #0
 800f2dc:	4625      	mov	r5, r4
 800f2de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2e0:	43db      	mvns	r3, r3
 800f2e2:	9304      	str	r3, [sp, #16]
 800f2e4:	4656      	mov	r6, sl
 800f2e6:	2700      	movs	r7, #0
 800f2e8:	4621      	mov	r1, r4
 800f2ea:	4658      	mov	r0, fp
 800f2ec:	f000 fbb4 	bl	800fa58 <_Bfree>
 800f2f0:	2d00      	cmp	r5, #0
 800f2f2:	d0dc      	beq.n	800f2ae <_dtoa_r+0x65e>
 800f2f4:	b12f      	cbz	r7, 800f302 <_dtoa_r+0x6b2>
 800f2f6:	42af      	cmp	r7, r5
 800f2f8:	d003      	beq.n	800f302 <_dtoa_r+0x6b2>
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	4658      	mov	r0, fp
 800f2fe:	f000 fbab 	bl	800fa58 <_Bfree>
 800f302:	4629      	mov	r1, r5
 800f304:	4658      	mov	r0, fp
 800f306:	f000 fba7 	bl	800fa58 <_Bfree>
 800f30a:	e7d0      	b.n	800f2ae <_dtoa_r+0x65e>
 800f30c:	9704      	str	r7, [sp, #16]
 800f30e:	4633      	mov	r3, r6
 800f310:	461e      	mov	r6, r3
 800f312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f316:	2a39      	cmp	r2, #57	@ 0x39
 800f318:	d107      	bne.n	800f32a <_dtoa_r+0x6da>
 800f31a:	459a      	cmp	sl, r3
 800f31c:	d1f8      	bne.n	800f310 <_dtoa_r+0x6c0>
 800f31e:	9a04      	ldr	r2, [sp, #16]
 800f320:	3201      	adds	r2, #1
 800f322:	9204      	str	r2, [sp, #16]
 800f324:	2230      	movs	r2, #48	@ 0x30
 800f326:	f88a 2000 	strb.w	r2, [sl]
 800f32a:	781a      	ldrb	r2, [r3, #0]
 800f32c:	3201      	adds	r2, #1
 800f32e:	701a      	strb	r2, [r3, #0]
 800f330:	e7bd      	b.n	800f2ae <_dtoa_r+0x65e>
 800f332:	4b7b      	ldr	r3, [pc, #492]	@ (800f520 <_dtoa_r+0x8d0>)
 800f334:	2200      	movs	r2, #0
 800f336:	f7f1 f95f 	bl	80005f8 <__aeabi_dmul>
 800f33a:	2200      	movs	r2, #0
 800f33c:	2300      	movs	r3, #0
 800f33e:	4604      	mov	r4, r0
 800f340:	460d      	mov	r5, r1
 800f342:	f7f1 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800f346:	2800      	cmp	r0, #0
 800f348:	f43f aebb 	beq.w	800f0c2 <_dtoa_r+0x472>
 800f34c:	e6f0      	b.n	800f130 <_dtoa_r+0x4e0>
 800f34e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f350:	2a00      	cmp	r2, #0
 800f352:	f000 80db 	beq.w	800f50c <_dtoa_r+0x8bc>
 800f356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f358:	2a01      	cmp	r2, #1
 800f35a:	f300 80bf 	bgt.w	800f4dc <_dtoa_r+0x88c>
 800f35e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f360:	2a00      	cmp	r2, #0
 800f362:	f000 80b7 	beq.w	800f4d4 <_dtoa_r+0x884>
 800f366:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f36a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f36c:	4646      	mov	r6, r8
 800f36e:	9a08      	ldr	r2, [sp, #32]
 800f370:	2101      	movs	r1, #1
 800f372:	441a      	add	r2, r3
 800f374:	4658      	mov	r0, fp
 800f376:	4498      	add	r8, r3
 800f378:	9208      	str	r2, [sp, #32]
 800f37a:	f000 fc21 	bl	800fbc0 <__i2b>
 800f37e:	4605      	mov	r5, r0
 800f380:	b15e      	cbz	r6, 800f39a <_dtoa_r+0x74a>
 800f382:	9b08      	ldr	r3, [sp, #32]
 800f384:	2b00      	cmp	r3, #0
 800f386:	dd08      	ble.n	800f39a <_dtoa_r+0x74a>
 800f388:	42b3      	cmp	r3, r6
 800f38a:	9a08      	ldr	r2, [sp, #32]
 800f38c:	bfa8      	it	ge
 800f38e:	4633      	movge	r3, r6
 800f390:	eba8 0803 	sub.w	r8, r8, r3
 800f394:	1af6      	subs	r6, r6, r3
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	9308      	str	r3, [sp, #32]
 800f39a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f39c:	b1f3      	cbz	r3, 800f3dc <_dtoa_r+0x78c>
 800f39e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f000 80b7 	beq.w	800f514 <_dtoa_r+0x8c4>
 800f3a6:	b18c      	cbz	r4, 800f3cc <_dtoa_r+0x77c>
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	4622      	mov	r2, r4
 800f3ac:	4658      	mov	r0, fp
 800f3ae:	f000 fcc7 	bl	800fd40 <__pow5mult>
 800f3b2:	464a      	mov	r2, r9
 800f3b4:	4601      	mov	r1, r0
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	4658      	mov	r0, fp
 800f3ba:	f000 fc17 	bl	800fbec <__multiply>
 800f3be:	4649      	mov	r1, r9
 800f3c0:	9004      	str	r0, [sp, #16]
 800f3c2:	4658      	mov	r0, fp
 800f3c4:	f000 fb48 	bl	800fa58 <_Bfree>
 800f3c8:	9b04      	ldr	r3, [sp, #16]
 800f3ca:	4699      	mov	r9, r3
 800f3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3ce:	1b1a      	subs	r2, r3, r4
 800f3d0:	d004      	beq.n	800f3dc <_dtoa_r+0x78c>
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	4658      	mov	r0, fp
 800f3d6:	f000 fcb3 	bl	800fd40 <__pow5mult>
 800f3da:	4681      	mov	r9, r0
 800f3dc:	2101      	movs	r1, #1
 800f3de:	4658      	mov	r0, fp
 800f3e0:	f000 fbee 	bl	800fbc0 <__i2b>
 800f3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	f000 81cf 	beq.w	800f78c <_dtoa_r+0xb3c>
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	4601      	mov	r1, r0
 800f3f2:	4658      	mov	r0, fp
 800f3f4:	f000 fca4 	bl	800fd40 <__pow5mult>
 800f3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	f300 8095 	bgt.w	800f52c <_dtoa_r+0x8dc>
 800f402:	9b02      	ldr	r3, [sp, #8]
 800f404:	2b00      	cmp	r3, #0
 800f406:	f040 8087 	bne.w	800f518 <_dtoa_r+0x8c8>
 800f40a:	9b03      	ldr	r3, [sp, #12]
 800f40c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f410:	2b00      	cmp	r3, #0
 800f412:	f040 8089 	bne.w	800f528 <_dtoa_r+0x8d8>
 800f416:	9b03      	ldr	r3, [sp, #12]
 800f418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f41c:	0d1b      	lsrs	r3, r3, #20
 800f41e:	051b      	lsls	r3, r3, #20
 800f420:	b12b      	cbz	r3, 800f42e <_dtoa_r+0x7de>
 800f422:	9b08      	ldr	r3, [sp, #32]
 800f424:	3301      	adds	r3, #1
 800f426:	9308      	str	r3, [sp, #32]
 800f428:	f108 0801 	add.w	r8, r8, #1
 800f42c:	2301      	movs	r3, #1
 800f42e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f432:	2b00      	cmp	r3, #0
 800f434:	f000 81b0 	beq.w	800f798 <_dtoa_r+0xb48>
 800f438:	6923      	ldr	r3, [r4, #16]
 800f43a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f43e:	6918      	ldr	r0, [r3, #16]
 800f440:	f000 fb72 	bl	800fb28 <__hi0bits>
 800f444:	f1c0 0020 	rsb	r0, r0, #32
 800f448:	9b08      	ldr	r3, [sp, #32]
 800f44a:	4418      	add	r0, r3
 800f44c:	f010 001f 	ands.w	r0, r0, #31
 800f450:	d077      	beq.n	800f542 <_dtoa_r+0x8f2>
 800f452:	f1c0 0320 	rsb	r3, r0, #32
 800f456:	2b04      	cmp	r3, #4
 800f458:	dd6b      	ble.n	800f532 <_dtoa_r+0x8e2>
 800f45a:	9b08      	ldr	r3, [sp, #32]
 800f45c:	f1c0 001c 	rsb	r0, r0, #28
 800f460:	4403      	add	r3, r0
 800f462:	4480      	add	r8, r0
 800f464:	4406      	add	r6, r0
 800f466:	9308      	str	r3, [sp, #32]
 800f468:	f1b8 0f00 	cmp.w	r8, #0
 800f46c:	dd05      	ble.n	800f47a <_dtoa_r+0x82a>
 800f46e:	4649      	mov	r1, r9
 800f470:	4642      	mov	r2, r8
 800f472:	4658      	mov	r0, fp
 800f474:	f000 fcbe 	bl	800fdf4 <__lshift>
 800f478:	4681      	mov	r9, r0
 800f47a:	9b08      	ldr	r3, [sp, #32]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	dd05      	ble.n	800f48c <_dtoa_r+0x83c>
 800f480:	4621      	mov	r1, r4
 800f482:	461a      	mov	r2, r3
 800f484:	4658      	mov	r0, fp
 800f486:	f000 fcb5 	bl	800fdf4 <__lshift>
 800f48a:	4604      	mov	r4, r0
 800f48c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d059      	beq.n	800f546 <_dtoa_r+0x8f6>
 800f492:	4621      	mov	r1, r4
 800f494:	4648      	mov	r0, r9
 800f496:	f000 fd19 	bl	800fecc <__mcmp>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	da53      	bge.n	800f546 <_dtoa_r+0x8f6>
 800f49e:	1e7b      	subs	r3, r7, #1
 800f4a0:	9304      	str	r3, [sp, #16]
 800f4a2:	4649      	mov	r1, r9
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	220a      	movs	r2, #10
 800f4a8:	4658      	mov	r0, fp
 800f4aa:	f000 faf7 	bl	800fa9c <__multadd>
 800f4ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4b0:	4681      	mov	r9, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	f000 8172 	beq.w	800f79c <_dtoa_r+0xb4c>
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	4629      	mov	r1, r5
 800f4bc:	220a      	movs	r2, #10
 800f4be:	4658      	mov	r0, fp
 800f4c0:	f000 faec 	bl	800fa9c <__multadd>
 800f4c4:	9b00      	ldr	r3, [sp, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	dc67      	bgt.n	800f59c <_dtoa_r+0x94c>
 800f4cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ce:	2b02      	cmp	r3, #2
 800f4d0:	dc41      	bgt.n	800f556 <_dtoa_r+0x906>
 800f4d2:	e063      	b.n	800f59c <_dtoa_r+0x94c>
 800f4d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f4d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f4da:	e746      	b.n	800f36a <_dtoa_r+0x71a>
 800f4dc:	9b07      	ldr	r3, [sp, #28]
 800f4de:	1e5c      	subs	r4, r3, #1
 800f4e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4e2:	42a3      	cmp	r3, r4
 800f4e4:	bfbf      	itttt	lt
 800f4e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f4e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f4ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f4ec:	1ae3      	sublt	r3, r4, r3
 800f4ee:	bfb4      	ite	lt
 800f4f0:	18d2      	addlt	r2, r2, r3
 800f4f2:	1b1c      	subge	r4, r3, r4
 800f4f4:	9b07      	ldr	r3, [sp, #28]
 800f4f6:	bfbc      	itt	lt
 800f4f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f4fa:	2400      	movlt	r4, #0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	bfb5      	itete	lt
 800f500:	eba8 0603 	sublt.w	r6, r8, r3
 800f504:	9b07      	ldrge	r3, [sp, #28]
 800f506:	2300      	movlt	r3, #0
 800f508:	4646      	movge	r6, r8
 800f50a:	e730      	b.n	800f36e <_dtoa_r+0x71e>
 800f50c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f50e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f510:	4646      	mov	r6, r8
 800f512:	e735      	b.n	800f380 <_dtoa_r+0x730>
 800f514:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f516:	e75c      	b.n	800f3d2 <_dtoa_r+0x782>
 800f518:	2300      	movs	r3, #0
 800f51a:	e788      	b.n	800f42e <_dtoa_r+0x7de>
 800f51c:	3fe00000 	.word	0x3fe00000
 800f520:	40240000 	.word	0x40240000
 800f524:	40140000 	.word	0x40140000
 800f528:	9b02      	ldr	r3, [sp, #8]
 800f52a:	e780      	b.n	800f42e <_dtoa_r+0x7de>
 800f52c:	2300      	movs	r3, #0
 800f52e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f530:	e782      	b.n	800f438 <_dtoa_r+0x7e8>
 800f532:	d099      	beq.n	800f468 <_dtoa_r+0x818>
 800f534:	9a08      	ldr	r2, [sp, #32]
 800f536:	331c      	adds	r3, #28
 800f538:	441a      	add	r2, r3
 800f53a:	4498      	add	r8, r3
 800f53c:	441e      	add	r6, r3
 800f53e:	9208      	str	r2, [sp, #32]
 800f540:	e792      	b.n	800f468 <_dtoa_r+0x818>
 800f542:	4603      	mov	r3, r0
 800f544:	e7f6      	b.n	800f534 <_dtoa_r+0x8e4>
 800f546:	9b07      	ldr	r3, [sp, #28]
 800f548:	9704      	str	r7, [sp, #16]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	dc20      	bgt.n	800f590 <_dtoa_r+0x940>
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f552:	2b02      	cmp	r3, #2
 800f554:	dd1e      	ble.n	800f594 <_dtoa_r+0x944>
 800f556:	9b00      	ldr	r3, [sp, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f47f aec0 	bne.w	800f2de <_dtoa_r+0x68e>
 800f55e:	4621      	mov	r1, r4
 800f560:	2205      	movs	r2, #5
 800f562:	4658      	mov	r0, fp
 800f564:	f000 fa9a 	bl	800fa9c <__multadd>
 800f568:	4601      	mov	r1, r0
 800f56a:	4604      	mov	r4, r0
 800f56c:	4648      	mov	r0, r9
 800f56e:	f000 fcad 	bl	800fecc <__mcmp>
 800f572:	2800      	cmp	r0, #0
 800f574:	f77f aeb3 	ble.w	800f2de <_dtoa_r+0x68e>
 800f578:	4656      	mov	r6, sl
 800f57a:	2331      	movs	r3, #49	@ 0x31
 800f57c:	f806 3b01 	strb.w	r3, [r6], #1
 800f580:	9b04      	ldr	r3, [sp, #16]
 800f582:	3301      	adds	r3, #1
 800f584:	9304      	str	r3, [sp, #16]
 800f586:	e6ae      	b.n	800f2e6 <_dtoa_r+0x696>
 800f588:	9c07      	ldr	r4, [sp, #28]
 800f58a:	9704      	str	r7, [sp, #16]
 800f58c:	4625      	mov	r5, r4
 800f58e:	e7f3      	b.n	800f578 <_dtoa_r+0x928>
 800f590:	9b07      	ldr	r3, [sp, #28]
 800f592:	9300      	str	r3, [sp, #0]
 800f594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f596:	2b00      	cmp	r3, #0
 800f598:	f000 8104 	beq.w	800f7a4 <_dtoa_r+0xb54>
 800f59c:	2e00      	cmp	r6, #0
 800f59e:	dd05      	ble.n	800f5ac <_dtoa_r+0x95c>
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	4632      	mov	r2, r6
 800f5a4:	4658      	mov	r0, fp
 800f5a6:	f000 fc25 	bl	800fdf4 <__lshift>
 800f5aa:	4605      	mov	r5, r0
 800f5ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d05a      	beq.n	800f668 <_dtoa_r+0xa18>
 800f5b2:	6869      	ldr	r1, [r5, #4]
 800f5b4:	4658      	mov	r0, fp
 800f5b6:	f000 fa0f 	bl	800f9d8 <_Balloc>
 800f5ba:	4606      	mov	r6, r0
 800f5bc:	b928      	cbnz	r0, 800f5ca <_dtoa_r+0x97a>
 800f5be:	4b84      	ldr	r3, [pc, #528]	@ (800f7d0 <_dtoa_r+0xb80>)
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f5c6:	f7ff bb5a 	b.w	800ec7e <_dtoa_r+0x2e>
 800f5ca:	692a      	ldr	r2, [r5, #16]
 800f5cc:	3202      	adds	r2, #2
 800f5ce:	0092      	lsls	r2, r2, #2
 800f5d0:	f105 010c 	add.w	r1, r5, #12
 800f5d4:	300c      	adds	r0, #12
 800f5d6:	f7ff faa2 	bl	800eb1e <memcpy>
 800f5da:	2201      	movs	r2, #1
 800f5dc:	4631      	mov	r1, r6
 800f5de:	4658      	mov	r0, fp
 800f5e0:	f000 fc08 	bl	800fdf4 <__lshift>
 800f5e4:	f10a 0301 	add.w	r3, sl, #1
 800f5e8:	9307      	str	r3, [sp, #28]
 800f5ea:	9b00      	ldr	r3, [sp, #0]
 800f5ec:	4453      	add	r3, sl
 800f5ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5f0:	9b02      	ldr	r3, [sp, #8]
 800f5f2:	f003 0301 	and.w	r3, r3, #1
 800f5f6:	462f      	mov	r7, r5
 800f5f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5fa:	4605      	mov	r5, r0
 800f5fc:	9b07      	ldr	r3, [sp, #28]
 800f5fe:	4621      	mov	r1, r4
 800f600:	3b01      	subs	r3, #1
 800f602:	4648      	mov	r0, r9
 800f604:	9300      	str	r3, [sp, #0]
 800f606:	f7ff fa98 	bl	800eb3a <quorem>
 800f60a:	4639      	mov	r1, r7
 800f60c:	9002      	str	r0, [sp, #8]
 800f60e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f612:	4648      	mov	r0, r9
 800f614:	f000 fc5a 	bl	800fecc <__mcmp>
 800f618:	462a      	mov	r2, r5
 800f61a:	9008      	str	r0, [sp, #32]
 800f61c:	4621      	mov	r1, r4
 800f61e:	4658      	mov	r0, fp
 800f620:	f000 fc70 	bl	800ff04 <__mdiff>
 800f624:	68c2      	ldr	r2, [r0, #12]
 800f626:	4606      	mov	r6, r0
 800f628:	bb02      	cbnz	r2, 800f66c <_dtoa_r+0xa1c>
 800f62a:	4601      	mov	r1, r0
 800f62c:	4648      	mov	r0, r9
 800f62e:	f000 fc4d 	bl	800fecc <__mcmp>
 800f632:	4602      	mov	r2, r0
 800f634:	4631      	mov	r1, r6
 800f636:	4658      	mov	r0, fp
 800f638:	920e      	str	r2, [sp, #56]	@ 0x38
 800f63a:	f000 fa0d 	bl	800fa58 <_Bfree>
 800f63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f640:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f642:	9e07      	ldr	r6, [sp, #28]
 800f644:	ea43 0102 	orr.w	r1, r3, r2
 800f648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f64a:	4319      	orrs	r1, r3
 800f64c:	d110      	bne.n	800f670 <_dtoa_r+0xa20>
 800f64e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f652:	d029      	beq.n	800f6a8 <_dtoa_r+0xa58>
 800f654:	9b08      	ldr	r3, [sp, #32]
 800f656:	2b00      	cmp	r3, #0
 800f658:	dd02      	ble.n	800f660 <_dtoa_r+0xa10>
 800f65a:	9b02      	ldr	r3, [sp, #8]
 800f65c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f660:	9b00      	ldr	r3, [sp, #0]
 800f662:	f883 8000 	strb.w	r8, [r3]
 800f666:	e63f      	b.n	800f2e8 <_dtoa_r+0x698>
 800f668:	4628      	mov	r0, r5
 800f66a:	e7bb      	b.n	800f5e4 <_dtoa_r+0x994>
 800f66c:	2201      	movs	r2, #1
 800f66e:	e7e1      	b.n	800f634 <_dtoa_r+0x9e4>
 800f670:	9b08      	ldr	r3, [sp, #32]
 800f672:	2b00      	cmp	r3, #0
 800f674:	db04      	blt.n	800f680 <_dtoa_r+0xa30>
 800f676:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f678:	430b      	orrs	r3, r1
 800f67a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f67c:	430b      	orrs	r3, r1
 800f67e:	d120      	bne.n	800f6c2 <_dtoa_r+0xa72>
 800f680:	2a00      	cmp	r2, #0
 800f682:	dded      	ble.n	800f660 <_dtoa_r+0xa10>
 800f684:	4649      	mov	r1, r9
 800f686:	2201      	movs	r2, #1
 800f688:	4658      	mov	r0, fp
 800f68a:	f000 fbb3 	bl	800fdf4 <__lshift>
 800f68e:	4621      	mov	r1, r4
 800f690:	4681      	mov	r9, r0
 800f692:	f000 fc1b 	bl	800fecc <__mcmp>
 800f696:	2800      	cmp	r0, #0
 800f698:	dc03      	bgt.n	800f6a2 <_dtoa_r+0xa52>
 800f69a:	d1e1      	bne.n	800f660 <_dtoa_r+0xa10>
 800f69c:	f018 0f01 	tst.w	r8, #1
 800f6a0:	d0de      	beq.n	800f660 <_dtoa_r+0xa10>
 800f6a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f6a6:	d1d8      	bne.n	800f65a <_dtoa_r+0xa0a>
 800f6a8:	9a00      	ldr	r2, [sp, #0]
 800f6aa:	2339      	movs	r3, #57	@ 0x39
 800f6ac:	7013      	strb	r3, [r2, #0]
 800f6ae:	4633      	mov	r3, r6
 800f6b0:	461e      	mov	r6, r3
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f6b8:	2a39      	cmp	r2, #57	@ 0x39
 800f6ba:	d052      	beq.n	800f762 <_dtoa_r+0xb12>
 800f6bc:	3201      	adds	r2, #1
 800f6be:	701a      	strb	r2, [r3, #0]
 800f6c0:	e612      	b.n	800f2e8 <_dtoa_r+0x698>
 800f6c2:	2a00      	cmp	r2, #0
 800f6c4:	dd07      	ble.n	800f6d6 <_dtoa_r+0xa86>
 800f6c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f6ca:	d0ed      	beq.n	800f6a8 <_dtoa_r+0xa58>
 800f6cc:	9a00      	ldr	r2, [sp, #0]
 800f6ce:	f108 0301 	add.w	r3, r8, #1
 800f6d2:	7013      	strb	r3, [r2, #0]
 800f6d4:	e608      	b.n	800f2e8 <_dtoa_r+0x698>
 800f6d6:	9b07      	ldr	r3, [sp, #28]
 800f6d8:	9a07      	ldr	r2, [sp, #28]
 800f6da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f6de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d028      	beq.n	800f736 <_dtoa_r+0xae6>
 800f6e4:	4649      	mov	r1, r9
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	220a      	movs	r2, #10
 800f6ea:	4658      	mov	r0, fp
 800f6ec:	f000 f9d6 	bl	800fa9c <__multadd>
 800f6f0:	42af      	cmp	r7, r5
 800f6f2:	4681      	mov	r9, r0
 800f6f4:	f04f 0300 	mov.w	r3, #0
 800f6f8:	f04f 020a 	mov.w	r2, #10
 800f6fc:	4639      	mov	r1, r7
 800f6fe:	4658      	mov	r0, fp
 800f700:	d107      	bne.n	800f712 <_dtoa_r+0xac2>
 800f702:	f000 f9cb 	bl	800fa9c <__multadd>
 800f706:	4607      	mov	r7, r0
 800f708:	4605      	mov	r5, r0
 800f70a:	9b07      	ldr	r3, [sp, #28]
 800f70c:	3301      	adds	r3, #1
 800f70e:	9307      	str	r3, [sp, #28]
 800f710:	e774      	b.n	800f5fc <_dtoa_r+0x9ac>
 800f712:	f000 f9c3 	bl	800fa9c <__multadd>
 800f716:	4629      	mov	r1, r5
 800f718:	4607      	mov	r7, r0
 800f71a:	2300      	movs	r3, #0
 800f71c:	220a      	movs	r2, #10
 800f71e:	4658      	mov	r0, fp
 800f720:	f000 f9bc 	bl	800fa9c <__multadd>
 800f724:	4605      	mov	r5, r0
 800f726:	e7f0      	b.n	800f70a <_dtoa_r+0xaba>
 800f728:	9b00      	ldr	r3, [sp, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	bfcc      	ite	gt
 800f72e:	461e      	movgt	r6, r3
 800f730:	2601      	movle	r6, #1
 800f732:	4456      	add	r6, sl
 800f734:	2700      	movs	r7, #0
 800f736:	4649      	mov	r1, r9
 800f738:	2201      	movs	r2, #1
 800f73a:	4658      	mov	r0, fp
 800f73c:	f000 fb5a 	bl	800fdf4 <__lshift>
 800f740:	4621      	mov	r1, r4
 800f742:	4681      	mov	r9, r0
 800f744:	f000 fbc2 	bl	800fecc <__mcmp>
 800f748:	2800      	cmp	r0, #0
 800f74a:	dcb0      	bgt.n	800f6ae <_dtoa_r+0xa5e>
 800f74c:	d102      	bne.n	800f754 <_dtoa_r+0xb04>
 800f74e:	f018 0f01 	tst.w	r8, #1
 800f752:	d1ac      	bne.n	800f6ae <_dtoa_r+0xa5e>
 800f754:	4633      	mov	r3, r6
 800f756:	461e      	mov	r6, r3
 800f758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f75c:	2a30      	cmp	r2, #48	@ 0x30
 800f75e:	d0fa      	beq.n	800f756 <_dtoa_r+0xb06>
 800f760:	e5c2      	b.n	800f2e8 <_dtoa_r+0x698>
 800f762:	459a      	cmp	sl, r3
 800f764:	d1a4      	bne.n	800f6b0 <_dtoa_r+0xa60>
 800f766:	9b04      	ldr	r3, [sp, #16]
 800f768:	3301      	adds	r3, #1
 800f76a:	9304      	str	r3, [sp, #16]
 800f76c:	2331      	movs	r3, #49	@ 0x31
 800f76e:	f88a 3000 	strb.w	r3, [sl]
 800f772:	e5b9      	b.n	800f2e8 <_dtoa_r+0x698>
 800f774:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f776:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f7d4 <_dtoa_r+0xb84>
 800f77a:	b11b      	cbz	r3, 800f784 <_dtoa_r+0xb34>
 800f77c:	f10a 0308 	add.w	r3, sl, #8
 800f780:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	4650      	mov	r0, sl
 800f786:	b019      	add	sp, #100	@ 0x64
 800f788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f78c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f78e:	2b01      	cmp	r3, #1
 800f790:	f77f ae37 	ble.w	800f402 <_dtoa_r+0x7b2>
 800f794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f796:	930a      	str	r3, [sp, #40]	@ 0x28
 800f798:	2001      	movs	r0, #1
 800f79a:	e655      	b.n	800f448 <_dtoa_r+0x7f8>
 800f79c:	9b00      	ldr	r3, [sp, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f77f aed6 	ble.w	800f550 <_dtoa_r+0x900>
 800f7a4:	4656      	mov	r6, sl
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	4648      	mov	r0, r9
 800f7aa:	f7ff f9c6 	bl	800eb3a <quorem>
 800f7ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f7b2:	f806 8b01 	strb.w	r8, [r6], #1
 800f7b6:	9b00      	ldr	r3, [sp, #0]
 800f7b8:	eba6 020a 	sub.w	r2, r6, sl
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	ddb3      	ble.n	800f728 <_dtoa_r+0xad8>
 800f7c0:	4649      	mov	r1, r9
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	220a      	movs	r2, #10
 800f7c6:	4658      	mov	r0, fp
 800f7c8:	f000 f968 	bl	800fa9c <__multadd>
 800f7cc:	4681      	mov	r9, r0
 800f7ce:	e7ea      	b.n	800f7a6 <_dtoa_r+0xb56>
 800f7d0:	08010e38 	.word	0x08010e38
 800f7d4:	08010dbc 	.word	0x08010dbc

0800f7d8 <_free_r>:
 800f7d8:	b538      	push	{r3, r4, r5, lr}
 800f7da:	4605      	mov	r5, r0
 800f7dc:	2900      	cmp	r1, #0
 800f7de:	d041      	beq.n	800f864 <_free_r+0x8c>
 800f7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7e4:	1f0c      	subs	r4, r1, #4
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	bfb8      	it	lt
 800f7ea:	18e4      	addlt	r4, r4, r3
 800f7ec:	f000 f8e8 	bl	800f9c0 <__malloc_lock>
 800f7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800f868 <_free_r+0x90>)
 800f7f2:	6813      	ldr	r3, [r2, #0]
 800f7f4:	b933      	cbnz	r3, 800f804 <_free_r+0x2c>
 800f7f6:	6063      	str	r3, [r4, #4]
 800f7f8:	6014      	str	r4, [r2, #0]
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f800:	f000 b8e4 	b.w	800f9cc <__malloc_unlock>
 800f804:	42a3      	cmp	r3, r4
 800f806:	d908      	bls.n	800f81a <_free_r+0x42>
 800f808:	6820      	ldr	r0, [r4, #0]
 800f80a:	1821      	adds	r1, r4, r0
 800f80c:	428b      	cmp	r3, r1
 800f80e:	bf01      	itttt	eq
 800f810:	6819      	ldreq	r1, [r3, #0]
 800f812:	685b      	ldreq	r3, [r3, #4]
 800f814:	1809      	addeq	r1, r1, r0
 800f816:	6021      	streq	r1, [r4, #0]
 800f818:	e7ed      	b.n	800f7f6 <_free_r+0x1e>
 800f81a:	461a      	mov	r2, r3
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	b10b      	cbz	r3, 800f824 <_free_r+0x4c>
 800f820:	42a3      	cmp	r3, r4
 800f822:	d9fa      	bls.n	800f81a <_free_r+0x42>
 800f824:	6811      	ldr	r1, [r2, #0]
 800f826:	1850      	adds	r0, r2, r1
 800f828:	42a0      	cmp	r0, r4
 800f82a:	d10b      	bne.n	800f844 <_free_r+0x6c>
 800f82c:	6820      	ldr	r0, [r4, #0]
 800f82e:	4401      	add	r1, r0
 800f830:	1850      	adds	r0, r2, r1
 800f832:	4283      	cmp	r3, r0
 800f834:	6011      	str	r1, [r2, #0]
 800f836:	d1e0      	bne.n	800f7fa <_free_r+0x22>
 800f838:	6818      	ldr	r0, [r3, #0]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	6053      	str	r3, [r2, #4]
 800f83e:	4408      	add	r0, r1
 800f840:	6010      	str	r0, [r2, #0]
 800f842:	e7da      	b.n	800f7fa <_free_r+0x22>
 800f844:	d902      	bls.n	800f84c <_free_r+0x74>
 800f846:	230c      	movs	r3, #12
 800f848:	602b      	str	r3, [r5, #0]
 800f84a:	e7d6      	b.n	800f7fa <_free_r+0x22>
 800f84c:	6820      	ldr	r0, [r4, #0]
 800f84e:	1821      	adds	r1, r4, r0
 800f850:	428b      	cmp	r3, r1
 800f852:	bf04      	itt	eq
 800f854:	6819      	ldreq	r1, [r3, #0]
 800f856:	685b      	ldreq	r3, [r3, #4]
 800f858:	6063      	str	r3, [r4, #4]
 800f85a:	bf04      	itt	eq
 800f85c:	1809      	addeq	r1, r1, r0
 800f85e:	6021      	streq	r1, [r4, #0]
 800f860:	6054      	str	r4, [r2, #4]
 800f862:	e7ca      	b.n	800f7fa <_free_r+0x22>
 800f864:	bd38      	pop	{r3, r4, r5, pc}
 800f866:	bf00      	nop
 800f868:	2000590c 	.word	0x2000590c

0800f86c <malloc>:
 800f86c:	4b02      	ldr	r3, [pc, #8]	@ (800f878 <malloc+0xc>)
 800f86e:	4601      	mov	r1, r0
 800f870:	6818      	ldr	r0, [r3, #0]
 800f872:	f000 b825 	b.w	800f8c0 <_malloc_r>
 800f876:	bf00      	nop
 800f878:	200000a0 	.word	0x200000a0

0800f87c <sbrk_aligned>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	4e0f      	ldr	r6, [pc, #60]	@ (800f8bc <sbrk_aligned+0x40>)
 800f880:	460c      	mov	r4, r1
 800f882:	6831      	ldr	r1, [r6, #0]
 800f884:	4605      	mov	r5, r0
 800f886:	b911      	cbnz	r1, 800f88e <sbrk_aligned+0x12>
 800f888:	f000 fe46 	bl	8010518 <_sbrk_r>
 800f88c:	6030      	str	r0, [r6, #0]
 800f88e:	4621      	mov	r1, r4
 800f890:	4628      	mov	r0, r5
 800f892:	f000 fe41 	bl	8010518 <_sbrk_r>
 800f896:	1c43      	adds	r3, r0, #1
 800f898:	d103      	bne.n	800f8a2 <sbrk_aligned+0x26>
 800f89a:	f04f 34ff 	mov.w	r4, #4294967295
 800f89e:	4620      	mov	r0, r4
 800f8a0:	bd70      	pop	{r4, r5, r6, pc}
 800f8a2:	1cc4      	adds	r4, r0, #3
 800f8a4:	f024 0403 	bic.w	r4, r4, #3
 800f8a8:	42a0      	cmp	r0, r4
 800f8aa:	d0f8      	beq.n	800f89e <sbrk_aligned+0x22>
 800f8ac:	1a21      	subs	r1, r4, r0
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f000 fe32 	bl	8010518 <_sbrk_r>
 800f8b4:	3001      	adds	r0, #1
 800f8b6:	d1f2      	bne.n	800f89e <sbrk_aligned+0x22>
 800f8b8:	e7ef      	b.n	800f89a <sbrk_aligned+0x1e>
 800f8ba:	bf00      	nop
 800f8bc:	20005908 	.word	0x20005908

0800f8c0 <_malloc_r>:
 800f8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c4:	1ccd      	adds	r5, r1, #3
 800f8c6:	f025 0503 	bic.w	r5, r5, #3
 800f8ca:	3508      	adds	r5, #8
 800f8cc:	2d0c      	cmp	r5, #12
 800f8ce:	bf38      	it	cc
 800f8d0:	250c      	movcc	r5, #12
 800f8d2:	2d00      	cmp	r5, #0
 800f8d4:	4606      	mov	r6, r0
 800f8d6:	db01      	blt.n	800f8dc <_malloc_r+0x1c>
 800f8d8:	42a9      	cmp	r1, r5
 800f8da:	d904      	bls.n	800f8e6 <_malloc_r+0x26>
 800f8dc:	230c      	movs	r3, #12
 800f8de:	6033      	str	r3, [r6, #0]
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f9bc <_malloc_r+0xfc>
 800f8ea:	f000 f869 	bl	800f9c0 <__malloc_lock>
 800f8ee:	f8d8 3000 	ldr.w	r3, [r8]
 800f8f2:	461c      	mov	r4, r3
 800f8f4:	bb44      	cbnz	r4, 800f948 <_malloc_r+0x88>
 800f8f6:	4629      	mov	r1, r5
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	f7ff ffbf 	bl	800f87c <sbrk_aligned>
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	4604      	mov	r4, r0
 800f902:	d158      	bne.n	800f9b6 <_malloc_r+0xf6>
 800f904:	f8d8 4000 	ldr.w	r4, [r8]
 800f908:	4627      	mov	r7, r4
 800f90a:	2f00      	cmp	r7, #0
 800f90c:	d143      	bne.n	800f996 <_malloc_r+0xd6>
 800f90e:	2c00      	cmp	r4, #0
 800f910:	d04b      	beq.n	800f9aa <_malloc_r+0xea>
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	4639      	mov	r1, r7
 800f916:	4630      	mov	r0, r6
 800f918:	eb04 0903 	add.w	r9, r4, r3
 800f91c:	f000 fdfc 	bl	8010518 <_sbrk_r>
 800f920:	4581      	cmp	r9, r0
 800f922:	d142      	bne.n	800f9aa <_malloc_r+0xea>
 800f924:	6821      	ldr	r1, [r4, #0]
 800f926:	1a6d      	subs	r5, r5, r1
 800f928:	4629      	mov	r1, r5
 800f92a:	4630      	mov	r0, r6
 800f92c:	f7ff ffa6 	bl	800f87c <sbrk_aligned>
 800f930:	3001      	adds	r0, #1
 800f932:	d03a      	beq.n	800f9aa <_malloc_r+0xea>
 800f934:	6823      	ldr	r3, [r4, #0]
 800f936:	442b      	add	r3, r5
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	f8d8 3000 	ldr.w	r3, [r8]
 800f93e:	685a      	ldr	r2, [r3, #4]
 800f940:	bb62      	cbnz	r2, 800f99c <_malloc_r+0xdc>
 800f942:	f8c8 7000 	str.w	r7, [r8]
 800f946:	e00f      	b.n	800f968 <_malloc_r+0xa8>
 800f948:	6822      	ldr	r2, [r4, #0]
 800f94a:	1b52      	subs	r2, r2, r5
 800f94c:	d420      	bmi.n	800f990 <_malloc_r+0xd0>
 800f94e:	2a0b      	cmp	r2, #11
 800f950:	d917      	bls.n	800f982 <_malloc_r+0xc2>
 800f952:	1961      	adds	r1, r4, r5
 800f954:	42a3      	cmp	r3, r4
 800f956:	6025      	str	r5, [r4, #0]
 800f958:	bf18      	it	ne
 800f95a:	6059      	strne	r1, [r3, #4]
 800f95c:	6863      	ldr	r3, [r4, #4]
 800f95e:	bf08      	it	eq
 800f960:	f8c8 1000 	streq.w	r1, [r8]
 800f964:	5162      	str	r2, [r4, r5]
 800f966:	604b      	str	r3, [r1, #4]
 800f968:	4630      	mov	r0, r6
 800f96a:	f000 f82f 	bl	800f9cc <__malloc_unlock>
 800f96e:	f104 000b 	add.w	r0, r4, #11
 800f972:	1d23      	adds	r3, r4, #4
 800f974:	f020 0007 	bic.w	r0, r0, #7
 800f978:	1ac2      	subs	r2, r0, r3
 800f97a:	bf1c      	itt	ne
 800f97c:	1a1b      	subne	r3, r3, r0
 800f97e:	50a3      	strne	r3, [r4, r2]
 800f980:	e7af      	b.n	800f8e2 <_malloc_r+0x22>
 800f982:	6862      	ldr	r2, [r4, #4]
 800f984:	42a3      	cmp	r3, r4
 800f986:	bf0c      	ite	eq
 800f988:	f8c8 2000 	streq.w	r2, [r8]
 800f98c:	605a      	strne	r2, [r3, #4]
 800f98e:	e7eb      	b.n	800f968 <_malloc_r+0xa8>
 800f990:	4623      	mov	r3, r4
 800f992:	6864      	ldr	r4, [r4, #4]
 800f994:	e7ae      	b.n	800f8f4 <_malloc_r+0x34>
 800f996:	463c      	mov	r4, r7
 800f998:	687f      	ldr	r7, [r7, #4]
 800f99a:	e7b6      	b.n	800f90a <_malloc_r+0x4a>
 800f99c:	461a      	mov	r2, r3
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	42a3      	cmp	r3, r4
 800f9a2:	d1fb      	bne.n	800f99c <_malloc_r+0xdc>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	6053      	str	r3, [r2, #4]
 800f9a8:	e7de      	b.n	800f968 <_malloc_r+0xa8>
 800f9aa:	230c      	movs	r3, #12
 800f9ac:	6033      	str	r3, [r6, #0]
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	f000 f80c 	bl	800f9cc <__malloc_unlock>
 800f9b4:	e794      	b.n	800f8e0 <_malloc_r+0x20>
 800f9b6:	6005      	str	r5, [r0, #0]
 800f9b8:	e7d6      	b.n	800f968 <_malloc_r+0xa8>
 800f9ba:	bf00      	nop
 800f9bc:	2000590c 	.word	0x2000590c

0800f9c0 <__malloc_lock>:
 800f9c0:	4801      	ldr	r0, [pc, #4]	@ (800f9c8 <__malloc_lock+0x8>)
 800f9c2:	f7ff b8aa 	b.w	800eb1a <__retarget_lock_acquire_recursive>
 800f9c6:	bf00      	nop
 800f9c8:	20005904 	.word	0x20005904

0800f9cc <__malloc_unlock>:
 800f9cc:	4801      	ldr	r0, [pc, #4]	@ (800f9d4 <__malloc_unlock+0x8>)
 800f9ce:	f7ff b8a5 	b.w	800eb1c <__retarget_lock_release_recursive>
 800f9d2:	bf00      	nop
 800f9d4:	20005904 	.word	0x20005904

0800f9d8 <_Balloc>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	69c6      	ldr	r6, [r0, #28]
 800f9dc:	4604      	mov	r4, r0
 800f9de:	460d      	mov	r5, r1
 800f9e0:	b976      	cbnz	r6, 800fa00 <_Balloc+0x28>
 800f9e2:	2010      	movs	r0, #16
 800f9e4:	f7ff ff42 	bl	800f86c <malloc>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	61e0      	str	r0, [r4, #28]
 800f9ec:	b920      	cbnz	r0, 800f9f8 <_Balloc+0x20>
 800f9ee:	4b18      	ldr	r3, [pc, #96]	@ (800fa50 <_Balloc+0x78>)
 800f9f0:	4818      	ldr	r0, [pc, #96]	@ (800fa54 <_Balloc+0x7c>)
 800f9f2:	216b      	movs	r1, #107	@ 0x6b
 800f9f4:	f000 fda0 	bl	8010538 <__assert_func>
 800f9f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9fc:	6006      	str	r6, [r0, #0]
 800f9fe:	60c6      	str	r6, [r0, #12]
 800fa00:	69e6      	ldr	r6, [r4, #28]
 800fa02:	68f3      	ldr	r3, [r6, #12]
 800fa04:	b183      	cbz	r3, 800fa28 <_Balloc+0x50>
 800fa06:	69e3      	ldr	r3, [r4, #28]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fa0e:	b9b8      	cbnz	r0, 800fa40 <_Balloc+0x68>
 800fa10:	2101      	movs	r1, #1
 800fa12:	fa01 f605 	lsl.w	r6, r1, r5
 800fa16:	1d72      	adds	r2, r6, #5
 800fa18:	0092      	lsls	r2, r2, #2
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f000 fdaa 	bl	8010574 <_calloc_r>
 800fa20:	b160      	cbz	r0, 800fa3c <_Balloc+0x64>
 800fa22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fa26:	e00e      	b.n	800fa46 <_Balloc+0x6e>
 800fa28:	2221      	movs	r2, #33	@ 0x21
 800fa2a:	2104      	movs	r1, #4
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f000 fda1 	bl	8010574 <_calloc_r>
 800fa32:	69e3      	ldr	r3, [r4, #28]
 800fa34:	60f0      	str	r0, [r6, #12]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d1e4      	bne.n	800fa06 <_Balloc+0x2e>
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	bd70      	pop	{r4, r5, r6, pc}
 800fa40:	6802      	ldr	r2, [r0, #0]
 800fa42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa46:	2300      	movs	r3, #0
 800fa48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa4c:	e7f7      	b.n	800fa3e <_Balloc+0x66>
 800fa4e:	bf00      	nop
 800fa50:	08010dc9 	.word	0x08010dc9
 800fa54:	08010e49 	.word	0x08010e49

0800fa58 <_Bfree>:
 800fa58:	b570      	push	{r4, r5, r6, lr}
 800fa5a:	69c6      	ldr	r6, [r0, #28]
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	460c      	mov	r4, r1
 800fa60:	b976      	cbnz	r6, 800fa80 <_Bfree+0x28>
 800fa62:	2010      	movs	r0, #16
 800fa64:	f7ff ff02 	bl	800f86c <malloc>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	61e8      	str	r0, [r5, #28]
 800fa6c:	b920      	cbnz	r0, 800fa78 <_Bfree+0x20>
 800fa6e:	4b09      	ldr	r3, [pc, #36]	@ (800fa94 <_Bfree+0x3c>)
 800fa70:	4809      	ldr	r0, [pc, #36]	@ (800fa98 <_Bfree+0x40>)
 800fa72:	218f      	movs	r1, #143	@ 0x8f
 800fa74:	f000 fd60 	bl	8010538 <__assert_func>
 800fa78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa7c:	6006      	str	r6, [r0, #0]
 800fa7e:	60c6      	str	r6, [r0, #12]
 800fa80:	b13c      	cbz	r4, 800fa92 <_Bfree+0x3a>
 800fa82:	69eb      	ldr	r3, [r5, #28]
 800fa84:	6862      	ldr	r2, [r4, #4]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa8c:	6021      	str	r1, [r4, #0]
 800fa8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
 800fa94:	08010dc9 	.word	0x08010dc9
 800fa98:	08010e49 	.word	0x08010e49

0800fa9c <__multadd>:
 800fa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa0:	690d      	ldr	r5, [r1, #16]
 800faa2:	4607      	mov	r7, r0
 800faa4:	460c      	mov	r4, r1
 800faa6:	461e      	mov	r6, r3
 800faa8:	f101 0c14 	add.w	ip, r1, #20
 800faac:	2000      	movs	r0, #0
 800faae:	f8dc 3000 	ldr.w	r3, [ip]
 800fab2:	b299      	uxth	r1, r3
 800fab4:	fb02 6101 	mla	r1, r2, r1, r6
 800fab8:	0c1e      	lsrs	r6, r3, #16
 800faba:	0c0b      	lsrs	r3, r1, #16
 800fabc:	fb02 3306 	mla	r3, r2, r6, r3
 800fac0:	b289      	uxth	r1, r1
 800fac2:	3001      	adds	r0, #1
 800fac4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fac8:	4285      	cmp	r5, r0
 800faca:	f84c 1b04 	str.w	r1, [ip], #4
 800face:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fad2:	dcec      	bgt.n	800faae <__multadd+0x12>
 800fad4:	b30e      	cbz	r6, 800fb1a <__multadd+0x7e>
 800fad6:	68a3      	ldr	r3, [r4, #8]
 800fad8:	42ab      	cmp	r3, r5
 800fada:	dc19      	bgt.n	800fb10 <__multadd+0x74>
 800fadc:	6861      	ldr	r1, [r4, #4]
 800fade:	4638      	mov	r0, r7
 800fae0:	3101      	adds	r1, #1
 800fae2:	f7ff ff79 	bl	800f9d8 <_Balloc>
 800fae6:	4680      	mov	r8, r0
 800fae8:	b928      	cbnz	r0, 800faf6 <__multadd+0x5a>
 800faea:	4602      	mov	r2, r0
 800faec:	4b0c      	ldr	r3, [pc, #48]	@ (800fb20 <__multadd+0x84>)
 800faee:	480d      	ldr	r0, [pc, #52]	@ (800fb24 <__multadd+0x88>)
 800faf0:	21ba      	movs	r1, #186	@ 0xba
 800faf2:	f000 fd21 	bl	8010538 <__assert_func>
 800faf6:	6922      	ldr	r2, [r4, #16]
 800faf8:	3202      	adds	r2, #2
 800fafa:	f104 010c 	add.w	r1, r4, #12
 800fafe:	0092      	lsls	r2, r2, #2
 800fb00:	300c      	adds	r0, #12
 800fb02:	f7ff f80c 	bl	800eb1e <memcpy>
 800fb06:	4621      	mov	r1, r4
 800fb08:	4638      	mov	r0, r7
 800fb0a:	f7ff ffa5 	bl	800fa58 <_Bfree>
 800fb0e:	4644      	mov	r4, r8
 800fb10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fb14:	3501      	adds	r5, #1
 800fb16:	615e      	str	r6, [r3, #20]
 800fb18:	6125      	str	r5, [r4, #16]
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb20:	08010e38 	.word	0x08010e38
 800fb24:	08010e49 	.word	0x08010e49

0800fb28 <__hi0bits>:
 800fb28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	bf36      	itet	cc
 800fb30:	0403      	lslcc	r3, r0, #16
 800fb32:	2000      	movcs	r0, #0
 800fb34:	2010      	movcc	r0, #16
 800fb36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fb3a:	bf3c      	itt	cc
 800fb3c:	021b      	lslcc	r3, r3, #8
 800fb3e:	3008      	addcc	r0, #8
 800fb40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb44:	bf3c      	itt	cc
 800fb46:	011b      	lslcc	r3, r3, #4
 800fb48:	3004      	addcc	r0, #4
 800fb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb4e:	bf3c      	itt	cc
 800fb50:	009b      	lslcc	r3, r3, #2
 800fb52:	3002      	addcc	r0, #2
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	db05      	blt.n	800fb64 <__hi0bits+0x3c>
 800fb58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fb5c:	f100 0001 	add.w	r0, r0, #1
 800fb60:	bf08      	it	eq
 800fb62:	2020      	moveq	r0, #32
 800fb64:	4770      	bx	lr

0800fb66 <__lo0bits>:
 800fb66:	6803      	ldr	r3, [r0, #0]
 800fb68:	4602      	mov	r2, r0
 800fb6a:	f013 0007 	ands.w	r0, r3, #7
 800fb6e:	d00b      	beq.n	800fb88 <__lo0bits+0x22>
 800fb70:	07d9      	lsls	r1, r3, #31
 800fb72:	d421      	bmi.n	800fbb8 <__lo0bits+0x52>
 800fb74:	0798      	lsls	r0, r3, #30
 800fb76:	bf49      	itett	mi
 800fb78:	085b      	lsrmi	r3, r3, #1
 800fb7a:	089b      	lsrpl	r3, r3, #2
 800fb7c:	2001      	movmi	r0, #1
 800fb7e:	6013      	strmi	r3, [r2, #0]
 800fb80:	bf5c      	itt	pl
 800fb82:	6013      	strpl	r3, [r2, #0]
 800fb84:	2002      	movpl	r0, #2
 800fb86:	4770      	bx	lr
 800fb88:	b299      	uxth	r1, r3
 800fb8a:	b909      	cbnz	r1, 800fb90 <__lo0bits+0x2a>
 800fb8c:	0c1b      	lsrs	r3, r3, #16
 800fb8e:	2010      	movs	r0, #16
 800fb90:	b2d9      	uxtb	r1, r3
 800fb92:	b909      	cbnz	r1, 800fb98 <__lo0bits+0x32>
 800fb94:	3008      	adds	r0, #8
 800fb96:	0a1b      	lsrs	r3, r3, #8
 800fb98:	0719      	lsls	r1, r3, #28
 800fb9a:	bf04      	itt	eq
 800fb9c:	091b      	lsreq	r3, r3, #4
 800fb9e:	3004      	addeq	r0, #4
 800fba0:	0799      	lsls	r1, r3, #30
 800fba2:	bf04      	itt	eq
 800fba4:	089b      	lsreq	r3, r3, #2
 800fba6:	3002      	addeq	r0, #2
 800fba8:	07d9      	lsls	r1, r3, #31
 800fbaa:	d403      	bmi.n	800fbb4 <__lo0bits+0x4e>
 800fbac:	085b      	lsrs	r3, r3, #1
 800fbae:	f100 0001 	add.w	r0, r0, #1
 800fbb2:	d003      	beq.n	800fbbc <__lo0bits+0x56>
 800fbb4:	6013      	str	r3, [r2, #0]
 800fbb6:	4770      	bx	lr
 800fbb8:	2000      	movs	r0, #0
 800fbba:	4770      	bx	lr
 800fbbc:	2020      	movs	r0, #32
 800fbbe:	4770      	bx	lr

0800fbc0 <__i2b>:
 800fbc0:	b510      	push	{r4, lr}
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	f7ff ff07 	bl	800f9d8 <_Balloc>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	b928      	cbnz	r0, 800fbda <__i2b+0x1a>
 800fbce:	4b05      	ldr	r3, [pc, #20]	@ (800fbe4 <__i2b+0x24>)
 800fbd0:	4805      	ldr	r0, [pc, #20]	@ (800fbe8 <__i2b+0x28>)
 800fbd2:	f240 1145 	movw	r1, #325	@ 0x145
 800fbd6:	f000 fcaf 	bl	8010538 <__assert_func>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	6144      	str	r4, [r0, #20]
 800fbde:	6103      	str	r3, [r0, #16]
 800fbe0:	bd10      	pop	{r4, pc}
 800fbe2:	bf00      	nop
 800fbe4:	08010e38 	.word	0x08010e38
 800fbe8:	08010e49 	.word	0x08010e49

0800fbec <__multiply>:
 800fbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	4614      	mov	r4, r2
 800fbf2:	690a      	ldr	r2, [r1, #16]
 800fbf4:	6923      	ldr	r3, [r4, #16]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	bfa8      	it	ge
 800fbfa:	4623      	movge	r3, r4
 800fbfc:	460f      	mov	r7, r1
 800fbfe:	bfa4      	itt	ge
 800fc00:	460c      	movge	r4, r1
 800fc02:	461f      	movge	r7, r3
 800fc04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fc08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fc0c:	68a3      	ldr	r3, [r4, #8]
 800fc0e:	6861      	ldr	r1, [r4, #4]
 800fc10:	eb0a 0609 	add.w	r6, sl, r9
 800fc14:	42b3      	cmp	r3, r6
 800fc16:	b085      	sub	sp, #20
 800fc18:	bfb8      	it	lt
 800fc1a:	3101      	addlt	r1, #1
 800fc1c:	f7ff fedc 	bl	800f9d8 <_Balloc>
 800fc20:	b930      	cbnz	r0, 800fc30 <__multiply+0x44>
 800fc22:	4602      	mov	r2, r0
 800fc24:	4b44      	ldr	r3, [pc, #272]	@ (800fd38 <__multiply+0x14c>)
 800fc26:	4845      	ldr	r0, [pc, #276]	@ (800fd3c <__multiply+0x150>)
 800fc28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fc2c:	f000 fc84 	bl	8010538 <__assert_func>
 800fc30:	f100 0514 	add.w	r5, r0, #20
 800fc34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fc38:	462b      	mov	r3, r5
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	4543      	cmp	r3, r8
 800fc3e:	d321      	bcc.n	800fc84 <__multiply+0x98>
 800fc40:	f107 0114 	add.w	r1, r7, #20
 800fc44:	f104 0214 	add.w	r2, r4, #20
 800fc48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fc4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fc50:	9302      	str	r3, [sp, #8]
 800fc52:	1b13      	subs	r3, r2, r4
 800fc54:	3b15      	subs	r3, #21
 800fc56:	f023 0303 	bic.w	r3, r3, #3
 800fc5a:	3304      	adds	r3, #4
 800fc5c:	f104 0715 	add.w	r7, r4, #21
 800fc60:	42ba      	cmp	r2, r7
 800fc62:	bf38      	it	cc
 800fc64:	2304      	movcc	r3, #4
 800fc66:	9301      	str	r3, [sp, #4]
 800fc68:	9b02      	ldr	r3, [sp, #8]
 800fc6a:	9103      	str	r1, [sp, #12]
 800fc6c:	428b      	cmp	r3, r1
 800fc6e:	d80c      	bhi.n	800fc8a <__multiply+0x9e>
 800fc70:	2e00      	cmp	r6, #0
 800fc72:	dd03      	ble.n	800fc7c <__multiply+0x90>
 800fc74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d05b      	beq.n	800fd34 <__multiply+0x148>
 800fc7c:	6106      	str	r6, [r0, #16]
 800fc7e:	b005      	add	sp, #20
 800fc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc84:	f843 2b04 	str.w	r2, [r3], #4
 800fc88:	e7d8      	b.n	800fc3c <__multiply+0x50>
 800fc8a:	f8b1 a000 	ldrh.w	sl, [r1]
 800fc8e:	f1ba 0f00 	cmp.w	sl, #0
 800fc92:	d024      	beq.n	800fcde <__multiply+0xf2>
 800fc94:	f104 0e14 	add.w	lr, r4, #20
 800fc98:	46a9      	mov	r9, r5
 800fc9a:	f04f 0c00 	mov.w	ip, #0
 800fc9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fca2:	f8d9 3000 	ldr.w	r3, [r9]
 800fca6:	fa1f fb87 	uxth.w	fp, r7
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	fb0a 330b 	mla	r3, sl, fp, r3
 800fcb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fcb4:	f8d9 7000 	ldr.w	r7, [r9]
 800fcb8:	4463      	add	r3, ip
 800fcba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fcbe:	fb0a c70b 	mla	r7, sl, fp, ip
 800fcc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fccc:	4572      	cmp	r2, lr
 800fcce:	f849 3b04 	str.w	r3, [r9], #4
 800fcd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fcd6:	d8e2      	bhi.n	800fc9e <__multiply+0xb2>
 800fcd8:	9b01      	ldr	r3, [sp, #4]
 800fcda:	f845 c003 	str.w	ip, [r5, r3]
 800fcde:	9b03      	ldr	r3, [sp, #12]
 800fce0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fce4:	3104      	adds	r1, #4
 800fce6:	f1b9 0f00 	cmp.w	r9, #0
 800fcea:	d021      	beq.n	800fd30 <__multiply+0x144>
 800fcec:	682b      	ldr	r3, [r5, #0]
 800fcee:	f104 0c14 	add.w	ip, r4, #20
 800fcf2:	46ae      	mov	lr, r5
 800fcf4:	f04f 0a00 	mov.w	sl, #0
 800fcf8:	f8bc b000 	ldrh.w	fp, [ip]
 800fcfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fd00:	fb09 770b 	mla	r7, r9, fp, r7
 800fd04:	4457      	add	r7, sl
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fd0c:	f84e 3b04 	str.w	r3, [lr], #4
 800fd10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd18:	f8be 3000 	ldrh.w	r3, [lr]
 800fd1c:	fb09 330a 	mla	r3, r9, sl, r3
 800fd20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fd24:	4562      	cmp	r2, ip
 800fd26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd2a:	d8e5      	bhi.n	800fcf8 <__multiply+0x10c>
 800fd2c:	9f01      	ldr	r7, [sp, #4]
 800fd2e:	51eb      	str	r3, [r5, r7]
 800fd30:	3504      	adds	r5, #4
 800fd32:	e799      	b.n	800fc68 <__multiply+0x7c>
 800fd34:	3e01      	subs	r6, #1
 800fd36:	e79b      	b.n	800fc70 <__multiply+0x84>
 800fd38:	08010e38 	.word	0x08010e38
 800fd3c:	08010e49 	.word	0x08010e49

0800fd40 <__pow5mult>:
 800fd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd44:	4615      	mov	r5, r2
 800fd46:	f012 0203 	ands.w	r2, r2, #3
 800fd4a:	4607      	mov	r7, r0
 800fd4c:	460e      	mov	r6, r1
 800fd4e:	d007      	beq.n	800fd60 <__pow5mult+0x20>
 800fd50:	4c25      	ldr	r4, [pc, #148]	@ (800fde8 <__pow5mult+0xa8>)
 800fd52:	3a01      	subs	r2, #1
 800fd54:	2300      	movs	r3, #0
 800fd56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd5a:	f7ff fe9f 	bl	800fa9c <__multadd>
 800fd5e:	4606      	mov	r6, r0
 800fd60:	10ad      	asrs	r5, r5, #2
 800fd62:	d03d      	beq.n	800fde0 <__pow5mult+0xa0>
 800fd64:	69fc      	ldr	r4, [r7, #28]
 800fd66:	b97c      	cbnz	r4, 800fd88 <__pow5mult+0x48>
 800fd68:	2010      	movs	r0, #16
 800fd6a:	f7ff fd7f 	bl	800f86c <malloc>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	61f8      	str	r0, [r7, #28]
 800fd72:	b928      	cbnz	r0, 800fd80 <__pow5mult+0x40>
 800fd74:	4b1d      	ldr	r3, [pc, #116]	@ (800fdec <__pow5mult+0xac>)
 800fd76:	481e      	ldr	r0, [pc, #120]	@ (800fdf0 <__pow5mult+0xb0>)
 800fd78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fd7c:	f000 fbdc 	bl	8010538 <__assert_func>
 800fd80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd84:	6004      	str	r4, [r0, #0]
 800fd86:	60c4      	str	r4, [r0, #12]
 800fd88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fd8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd90:	b94c      	cbnz	r4, 800fda6 <__pow5mult+0x66>
 800fd92:	f240 2171 	movw	r1, #625	@ 0x271
 800fd96:	4638      	mov	r0, r7
 800fd98:	f7ff ff12 	bl	800fbc0 <__i2b>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fda2:	4604      	mov	r4, r0
 800fda4:	6003      	str	r3, [r0, #0]
 800fda6:	f04f 0900 	mov.w	r9, #0
 800fdaa:	07eb      	lsls	r3, r5, #31
 800fdac:	d50a      	bpl.n	800fdc4 <__pow5mult+0x84>
 800fdae:	4631      	mov	r1, r6
 800fdb0:	4622      	mov	r2, r4
 800fdb2:	4638      	mov	r0, r7
 800fdb4:	f7ff ff1a 	bl	800fbec <__multiply>
 800fdb8:	4631      	mov	r1, r6
 800fdba:	4680      	mov	r8, r0
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	f7ff fe4b 	bl	800fa58 <_Bfree>
 800fdc2:	4646      	mov	r6, r8
 800fdc4:	106d      	asrs	r5, r5, #1
 800fdc6:	d00b      	beq.n	800fde0 <__pow5mult+0xa0>
 800fdc8:	6820      	ldr	r0, [r4, #0]
 800fdca:	b938      	cbnz	r0, 800fddc <__pow5mult+0x9c>
 800fdcc:	4622      	mov	r2, r4
 800fdce:	4621      	mov	r1, r4
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	f7ff ff0b 	bl	800fbec <__multiply>
 800fdd6:	6020      	str	r0, [r4, #0]
 800fdd8:	f8c0 9000 	str.w	r9, [r0]
 800fddc:	4604      	mov	r4, r0
 800fdde:	e7e4      	b.n	800fdaa <__pow5mult+0x6a>
 800fde0:	4630      	mov	r0, r6
 800fde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fde6:	bf00      	nop
 800fde8:	08010ea4 	.word	0x08010ea4
 800fdec:	08010dc9 	.word	0x08010dc9
 800fdf0:	08010e49 	.word	0x08010e49

0800fdf4 <__lshift>:
 800fdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdf8:	460c      	mov	r4, r1
 800fdfa:	6849      	ldr	r1, [r1, #4]
 800fdfc:	6923      	ldr	r3, [r4, #16]
 800fdfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fe02:	68a3      	ldr	r3, [r4, #8]
 800fe04:	4607      	mov	r7, r0
 800fe06:	4691      	mov	r9, r2
 800fe08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fe0c:	f108 0601 	add.w	r6, r8, #1
 800fe10:	42b3      	cmp	r3, r6
 800fe12:	db0b      	blt.n	800fe2c <__lshift+0x38>
 800fe14:	4638      	mov	r0, r7
 800fe16:	f7ff fddf 	bl	800f9d8 <_Balloc>
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	b948      	cbnz	r0, 800fe32 <__lshift+0x3e>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	4b28      	ldr	r3, [pc, #160]	@ (800fec4 <__lshift+0xd0>)
 800fe22:	4829      	ldr	r0, [pc, #164]	@ (800fec8 <__lshift+0xd4>)
 800fe24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fe28:	f000 fb86 	bl	8010538 <__assert_func>
 800fe2c:	3101      	adds	r1, #1
 800fe2e:	005b      	lsls	r3, r3, #1
 800fe30:	e7ee      	b.n	800fe10 <__lshift+0x1c>
 800fe32:	2300      	movs	r3, #0
 800fe34:	f100 0114 	add.w	r1, r0, #20
 800fe38:	f100 0210 	add.w	r2, r0, #16
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	4553      	cmp	r3, sl
 800fe40:	db33      	blt.n	800feaa <__lshift+0xb6>
 800fe42:	6920      	ldr	r0, [r4, #16]
 800fe44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe48:	f104 0314 	add.w	r3, r4, #20
 800fe4c:	f019 091f 	ands.w	r9, r9, #31
 800fe50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fe58:	d02b      	beq.n	800feb2 <__lshift+0xbe>
 800fe5a:	f1c9 0e20 	rsb	lr, r9, #32
 800fe5e:	468a      	mov	sl, r1
 800fe60:	2200      	movs	r2, #0
 800fe62:	6818      	ldr	r0, [r3, #0]
 800fe64:	fa00 f009 	lsl.w	r0, r0, r9
 800fe68:	4310      	orrs	r0, r2
 800fe6a:	f84a 0b04 	str.w	r0, [sl], #4
 800fe6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe72:	459c      	cmp	ip, r3
 800fe74:	fa22 f20e 	lsr.w	r2, r2, lr
 800fe78:	d8f3      	bhi.n	800fe62 <__lshift+0x6e>
 800fe7a:	ebac 0304 	sub.w	r3, ip, r4
 800fe7e:	3b15      	subs	r3, #21
 800fe80:	f023 0303 	bic.w	r3, r3, #3
 800fe84:	3304      	adds	r3, #4
 800fe86:	f104 0015 	add.w	r0, r4, #21
 800fe8a:	4584      	cmp	ip, r0
 800fe8c:	bf38      	it	cc
 800fe8e:	2304      	movcc	r3, #4
 800fe90:	50ca      	str	r2, [r1, r3]
 800fe92:	b10a      	cbz	r2, 800fe98 <__lshift+0xa4>
 800fe94:	f108 0602 	add.w	r6, r8, #2
 800fe98:	3e01      	subs	r6, #1
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	612e      	str	r6, [r5, #16]
 800fe9e:	4621      	mov	r1, r4
 800fea0:	f7ff fdda 	bl	800fa58 <_Bfree>
 800fea4:	4628      	mov	r0, r5
 800fea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800feae:	3301      	adds	r3, #1
 800feb0:	e7c5      	b.n	800fe3e <__lshift+0x4a>
 800feb2:	3904      	subs	r1, #4
 800feb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800febc:	459c      	cmp	ip, r3
 800febe:	d8f9      	bhi.n	800feb4 <__lshift+0xc0>
 800fec0:	e7ea      	b.n	800fe98 <__lshift+0xa4>
 800fec2:	bf00      	nop
 800fec4:	08010e38 	.word	0x08010e38
 800fec8:	08010e49 	.word	0x08010e49

0800fecc <__mcmp>:
 800fecc:	690a      	ldr	r2, [r1, #16]
 800fece:	4603      	mov	r3, r0
 800fed0:	6900      	ldr	r0, [r0, #16]
 800fed2:	1a80      	subs	r0, r0, r2
 800fed4:	b530      	push	{r4, r5, lr}
 800fed6:	d10e      	bne.n	800fef6 <__mcmp+0x2a>
 800fed8:	3314      	adds	r3, #20
 800feda:	3114      	adds	r1, #20
 800fedc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fee0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800feec:	4295      	cmp	r5, r2
 800feee:	d003      	beq.n	800fef8 <__mcmp+0x2c>
 800fef0:	d205      	bcs.n	800fefe <__mcmp+0x32>
 800fef2:	f04f 30ff 	mov.w	r0, #4294967295
 800fef6:	bd30      	pop	{r4, r5, pc}
 800fef8:	42a3      	cmp	r3, r4
 800fefa:	d3f3      	bcc.n	800fee4 <__mcmp+0x18>
 800fefc:	e7fb      	b.n	800fef6 <__mcmp+0x2a>
 800fefe:	2001      	movs	r0, #1
 800ff00:	e7f9      	b.n	800fef6 <__mcmp+0x2a>
	...

0800ff04 <__mdiff>:
 800ff04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff08:	4689      	mov	r9, r1
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	4611      	mov	r1, r2
 800ff0e:	4648      	mov	r0, r9
 800ff10:	4614      	mov	r4, r2
 800ff12:	f7ff ffdb 	bl	800fecc <__mcmp>
 800ff16:	1e05      	subs	r5, r0, #0
 800ff18:	d112      	bne.n	800ff40 <__mdiff+0x3c>
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	f7ff fd5b 	bl	800f9d8 <_Balloc>
 800ff22:	4602      	mov	r2, r0
 800ff24:	b928      	cbnz	r0, 800ff32 <__mdiff+0x2e>
 800ff26:	4b3f      	ldr	r3, [pc, #252]	@ (8010024 <__mdiff+0x120>)
 800ff28:	f240 2137 	movw	r1, #567	@ 0x237
 800ff2c:	483e      	ldr	r0, [pc, #248]	@ (8010028 <__mdiff+0x124>)
 800ff2e:	f000 fb03 	bl	8010538 <__assert_func>
 800ff32:	2301      	movs	r3, #1
 800ff34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ff38:	4610      	mov	r0, r2
 800ff3a:	b003      	add	sp, #12
 800ff3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff40:	bfbc      	itt	lt
 800ff42:	464b      	movlt	r3, r9
 800ff44:	46a1      	movlt	r9, r4
 800ff46:	4630      	mov	r0, r6
 800ff48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ff4c:	bfba      	itte	lt
 800ff4e:	461c      	movlt	r4, r3
 800ff50:	2501      	movlt	r5, #1
 800ff52:	2500      	movge	r5, #0
 800ff54:	f7ff fd40 	bl	800f9d8 <_Balloc>
 800ff58:	4602      	mov	r2, r0
 800ff5a:	b918      	cbnz	r0, 800ff64 <__mdiff+0x60>
 800ff5c:	4b31      	ldr	r3, [pc, #196]	@ (8010024 <__mdiff+0x120>)
 800ff5e:	f240 2145 	movw	r1, #581	@ 0x245
 800ff62:	e7e3      	b.n	800ff2c <__mdiff+0x28>
 800ff64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ff68:	6926      	ldr	r6, [r4, #16]
 800ff6a:	60c5      	str	r5, [r0, #12]
 800ff6c:	f109 0310 	add.w	r3, r9, #16
 800ff70:	f109 0514 	add.w	r5, r9, #20
 800ff74:	f104 0e14 	add.w	lr, r4, #20
 800ff78:	f100 0b14 	add.w	fp, r0, #20
 800ff7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ff80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ff84:	9301      	str	r3, [sp, #4]
 800ff86:	46d9      	mov	r9, fp
 800ff88:	f04f 0c00 	mov.w	ip, #0
 800ff8c:	9b01      	ldr	r3, [sp, #4]
 800ff8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ff92:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	fa1f f38a 	uxth.w	r3, sl
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	b283      	uxth	r3, r0
 800ffa0:	1acb      	subs	r3, r1, r3
 800ffa2:	0c00      	lsrs	r0, r0, #16
 800ffa4:	4463      	add	r3, ip
 800ffa6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ffaa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ffb4:	4576      	cmp	r6, lr
 800ffb6:	f849 3b04 	str.w	r3, [r9], #4
 800ffba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ffbe:	d8e5      	bhi.n	800ff8c <__mdiff+0x88>
 800ffc0:	1b33      	subs	r3, r6, r4
 800ffc2:	3b15      	subs	r3, #21
 800ffc4:	f023 0303 	bic.w	r3, r3, #3
 800ffc8:	3415      	adds	r4, #21
 800ffca:	3304      	adds	r3, #4
 800ffcc:	42a6      	cmp	r6, r4
 800ffce:	bf38      	it	cc
 800ffd0:	2304      	movcc	r3, #4
 800ffd2:	441d      	add	r5, r3
 800ffd4:	445b      	add	r3, fp
 800ffd6:	461e      	mov	r6, r3
 800ffd8:	462c      	mov	r4, r5
 800ffda:	4544      	cmp	r4, r8
 800ffdc:	d30e      	bcc.n	800fffc <__mdiff+0xf8>
 800ffde:	f108 0103 	add.w	r1, r8, #3
 800ffe2:	1b49      	subs	r1, r1, r5
 800ffe4:	f021 0103 	bic.w	r1, r1, #3
 800ffe8:	3d03      	subs	r5, #3
 800ffea:	45a8      	cmp	r8, r5
 800ffec:	bf38      	it	cc
 800ffee:	2100      	movcc	r1, #0
 800fff0:	440b      	add	r3, r1
 800fff2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fff6:	b191      	cbz	r1, 801001e <__mdiff+0x11a>
 800fff8:	6117      	str	r7, [r2, #16]
 800fffa:	e79d      	b.n	800ff38 <__mdiff+0x34>
 800fffc:	f854 1b04 	ldr.w	r1, [r4], #4
 8010000:	46e6      	mov	lr, ip
 8010002:	0c08      	lsrs	r0, r1, #16
 8010004:	fa1c fc81 	uxtah	ip, ip, r1
 8010008:	4471      	add	r1, lr
 801000a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801000e:	b289      	uxth	r1, r1
 8010010:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010014:	f846 1b04 	str.w	r1, [r6], #4
 8010018:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801001c:	e7dd      	b.n	800ffda <__mdiff+0xd6>
 801001e:	3f01      	subs	r7, #1
 8010020:	e7e7      	b.n	800fff2 <__mdiff+0xee>
 8010022:	bf00      	nop
 8010024:	08010e38 	.word	0x08010e38
 8010028:	08010e49 	.word	0x08010e49

0801002c <__d2b>:
 801002c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010030:	460f      	mov	r7, r1
 8010032:	2101      	movs	r1, #1
 8010034:	ec59 8b10 	vmov	r8, r9, d0
 8010038:	4616      	mov	r6, r2
 801003a:	f7ff fccd 	bl	800f9d8 <_Balloc>
 801003e:	4604      	mov	r4, r0
 8010040:	b930      	cbnz	r0, 8010050 <__d2b+0x24>
 8010042:	4602      	mov	r2, r0
 8010044:	4b23      	ldr	r3, [pc, #140]	@ (80100d4 <__d2b+0xa8>)
 8010046:	4824      	ldr	r0, [pc, #144]	@ (80100d8 <__d2b+0xac>)
 8010048:	f240 310f 	movw	r1, #783	@ 0x30f
 801004c:	f000 fa74 	bl	8010538 <__assert_func>
 8010050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010058:	b10d      	cbz	r5, 801005e <__d2b+0x32>
 801005a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801005e:	9301      	str	r3, [sp, #4]
 8010060:	f1b8 0300 	subs.w	r3, r8, #0
 8010064:	d023      	beq.n	80100ae <__d2b+0x82>
 8010066:	4668      	mov	r0, sp
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	f7ff fd7c 	bl	800fb66 <__lo0bits>
 801006e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010072:	b1d0      	cbz	r0, 80100aa <__d2b+0x7e>
 8010074:	f1c0 0320 	rsb	r3, r0, #32
 8010078:	fa02 f303 	lsl.w	r3, r2, r3
 801007c:	430b      	orrs	r3, r1
 801007e:	40c2      	lsrs	r2, r0
 8010080:	6163      	str	r3, [r4, #20]
 8010082:	9201      	str	r2, [sp, #4]
 8010084:	9b01      	ldr	r3, [sp, #4]
 8010086:	61a3      	str	r3, [r4, #24]
 8010088:	2b00      	cmp	r3, #0
 801008a:	bf0c      	ite	eq
 801008c:	2201      	moveq	r2, #1
 801008e:	2202      	movne	r2, #2
 8010090:	6122      	str	r2, [r4, #16]
 8010092:	b1a5      	cbz	r5, 80100be <__d2b+0x92>
 8010094:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010098:	4405      	add	r5, r0
 801009a:	603d      	str	r5, [r7, #0]
 801009c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80100a0:	6030      	str	r0, [r6, #0]
 80100a2:	4620      	mov	r0, r4
 80100a4:	b003      	add	sp, #12
 80100a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100aa:	6161      	str	r1, [r4, #20]
 80100ac:	e7ea      	b.n	8010084 <__d2b+0x58>
 80100ae:	a801      	add	r0, sp, #4
 80100b0:	f7ff fd59 	bl	800fb66 <__lo0bits>
 80100b4:	9b01      	ldr	r3, [sp, #4]
 80100b6:	6163      	str	r3, [r4, #20]
 80100b8:	3020      	adds	r0, #32
 80100ba:	2201      	movs	r2, #1
 80100bc:	e7e8      	b.n	8010090 <__d2b+0x64>
 80100be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80100c6:	6038      	str	r0, [r7, #0]
 80100c8:	6918      	ldr	r0, [r3, #16]
 80100ca:	f7ff fd2d 	bl	800fb28 <__hi0bits>
 80100ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100d2:	e7e5      	b.n	80100a0 <__d2b+0x74>
 80100d4:	08010e38 	.word	0x08010e38
 80100d8:	08010e49 	.word	0x08010e49

080100dc <__ssputs_r>:
 80100dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e0:	688e      	ldr	r6, [r1, #8]
 80100e2:	461f      	mov	r7, r3
 80100e4:	42be      	cmp	r6, r7
 80100e6:	680b      	ldr	r3, [r1, #0]
 80100e8:	4682      	mov	sl, r0
 80100ea:	460c      	mov	r4, r1
 80100ec:	4690      	mov	r8, r2
 80100ee:	d82d      	bhi.n	801014c <__ssputs_r+0x70>
 80100f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80100f8:	d026      	beq.n	8010148 <__ssputs_r+0x6c>
 80100fa:	6965      	ldr	r5, [r4, #20]
 80100fc:	6909      	ldr	r1, [r1, #16]
 80100fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010102:	eba3 0901 	sub.w	r9, r3, r1
 8010106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801010a:	1c7b      	adds	r3, r7, #1
 801010c:	444b      	add	r3, r9
 801010e:	106d      	asrs	r5, r5, #1
 8010110:	429d      	cmp	r5, r3
 8010112:	bf38      	it	cc
 8010114:	461d      	movcc	r5, r3
 8010116:	0553      	lsls	r3, r2, #21
 8010118:	d527      	bpl.n	801016a <__ssputs_r+0x8e>
 801011a:	4629      	mov	r1, r5
 801011c:	f7ff fbd0 	bl	800f8c0 <_malloc_r>
 8010120:	4606      	mov	r6, r0
 8010122:	b360      	cbz	r0, 801017e <__ssputs_r+0xa2>
 8010124:	6921      	ldr	r1, [r4, #16]
 8010126:	464a      	mov	r2, r9
 8010128:	f7fe fcf9 	bl	800eb1e <memcpy>
 801012c:	89a3      	ldrh	r3, [r4, #12]
 801012e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010136:	81a3      	strh	r3, [r4, #12]
 8010138:	6126      	str	r6, [r4, #16]
 801013a:	6165      	str	r5, [r4, #20]
 801013c:	444e      	add	r6, r9
 801013e:	eba5 0509 	sub.w	r5, r5, r9
 8010142:	6026      	str	r6, [r4, #0]
 8010144:	60a5      	str	r5, [r4, #8]
 8010146:	463e      	mov	r6, r7
 8010148:	42be      	cmp	r6, r7
 801014a:	d900      	bls.n	801014e <__ssputs_r+0x72>
 801014c:	463e      	mov	r6, r7
 801014e:	6820      	ldr	r0, [r4, #0]
 8010150:	4632      	mov	r2, r6
 8010152:	4641      	mov	r1, r8
 8010154:	f000 f9c6 	bl	80104e4 <memmove>
 8010158:	68a3      	ldr	r3, [r4, #8]
 801015a:	1b9b      	subs	r3, r3, r6
 801015c:	60a3      	str	r3, [r4, #8]
 801015e:	6823      	ldr	r3, [r4, #0]
 8010160:	4433      	add	r3, r6
 8010162:	6023      	str	r3, [r4, #0]
 8010164:	2000      	movs	r0, #0
 8010166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801016a:	462a      	mov	r2, r5
 801016c:	f000 fa28 	bl	80105c0 <_realloc_r>
 8010170:	4606      	mov	r6, r0
 8010172:	2800      	cmp	r0, #0
 8010174:	d1e0      	bne.n	8010138 <__ssputs_r+0x5c>
 8010176:	6921      	ldr	r1, [r4, #16]
 8010178:	4650      	mov	r0, sl
 801017a:	f7ff fb2d 	bl	800f7d8 <_free_r>
 801017e:	230c      	movs	r3, #12
 8010180:	f8ca 3000 	str.w	r3, [sl]
 8010184:	89a3      	ldrh	r3, [r4, #12]
 8010186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801018a:	81a3      	strh	r3, [r4, #12]
 801018c:	f04f 30ff 	mov.w	r0, #4294967295
 8010190:	e7e9      	b.n	8010166 <__ssputs_r+0x8a>
	...

08010194 <_svfiprintf_r>:
 8010194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010198:	4698      	mov	r8, r3
 801019a:	898b      	ldrh	r3, [r1, #12]
 801019c:	061b      	lsls	r3, r3, #24
 801019e:	b09d      	sub	sp, #116	@ 0x74
 80101a0:	4607      	mov	r7, r0
 80101a2:	460d      	mov	r5, r1
 80101a4:	4614      	mov	r4, r2
 80101a6:	d510      	bpl.n	80101ca <_svfiprintf_r+0x36>
 80101a8:	690b      	ldr	r3, [r1, #16]
 80101aa:	b973      	cbnz	r3, 80101ca <_svfiprintf_r+0x36>
 80101ac:	2140      	movs	r1, #64	@ 0x40
 80101ae:	f7ff fb87 	bl	800f8c0 <_malloc_r>
 80101b2:	6028      	str	r0, [r5, #0]
 80101b4:	6128      	str	r0, [r5, #16]
 80101b6:	b930      	cbnz	r0, 80101c6 <_svfiprintf_r+0x32>
 80101b8:	230c      	movs	r3, #12
 80101ba:	603b      	str	r3, [r7, #0]
 80101bc:	f04f 30ff 	mov.w	r0, #4294967295
 80101c0:	b01d      	add	sp, #116	@ 0x74
 80101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c6:	2340      	movs	r3, #64	@ 0x40
 80101c8:	616b      	str	r3, [r5, #20]
 80101ca:	2300      	movs	r3, #0
 80101cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80101ce:	2320      	movs	r3, #32
 80101d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80101d8:	2330      	movs	r3, #48	@ 0x30
 80101da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010378 <_svfiprintf_r+0x1e4>
 80101de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101e2:	f04f 0901 	mov.w	r9, #1
 80101e6:	4623      	mov	r3, r4
 80101e8:	469a      	mov	sl, r3
 80101ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101ee:	b10a      	cbz	r2, 80101f4 <_svfiprintf_r+0x60>
 80101f0:	2a25      	cmp	r2, #37	@ 0x25
 80101f2:	d1f9      	bne.n	80101e8 <_svfiprintf_r+0x54>
 80101f4:	ebba 0b04 	subs.w	fp, sl, r4
 80101f8:	d00b      	beq.n	8010212 <_svfiprintf_r+0x7e>
 80101fa:	465b      	mov	r3, fp
 80101fc:	4622      	mov	r2, r4
 80101fe:	4629      	mov	r1, r5
 8010200:	4638      	mov	r0, r7
 8010202:	f7ff ff6b 	bl	80100dc <__ssputs_r>
 8010206:	3001      	adds	r0, #1
 8010208:	f000 80a7 	beq.w	801035a <_svfiprintf_r+0x1c6>
 801020c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801020e:	445a      	add	r2, fp
 8010210:	9209      	str	r2, [sp, #36]	@ 0x24
 8010212:	f89a 3000 	ldrb.w	r3, [sl]
 8010216:	2b00      	cmp	r3, #0
 8010218:	f000 809f 	beq.w	801035a <_svfiprintf_r+0x1c6>
 801021c:	2300      	movs	r3, #0
 801021e:	f04f 32ff 	mov.w	r2, #4294967295
 8010222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010226:	f10a 0a01 	add.w	sl, sl, #1
 801022a:	9304      	str	r3, [sp, #16]
 801022c:	9307      	str	r3, [sp, #28]
 801022e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010232:	931a      	str	r3, [sp, #104]	@ 0x68
 8010234:	4654      	mov	r4, sl
 8010236:	2205      	movs	r2, #5
 8010238:	f814 1b01 	ldrb.w	r1, [r4], #1
 801023c:	484e      	ldr	r0, [pc, #312]	@ (8010378 <_svfiprintf_r+0x1e4>)
 801023e:	f7ef ffc7 	bl	80001d0 <memchr>
 8010242:	9a04      	ldr	r2, [sp, #16]
 8010244:	b9d8      	cbnz	r0, 801027e <_svfiprintf_r+0xea>
 8010246:	06d0      	lsls	r0, r2, #27
 8010248:	bf44      	itt	mi
 801024a:	2320      	movmi	r3, #32
 801024c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010250:	0711      	lsls	r1, r2, #28
 8010252:	bf44      	itt	mi
 8010254:	232b      	movmi	r3, #43	@ 0x2b
 8010256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801025a:	f89a 3000 	ldrb.w	r3, [sl]
 801025e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010260:	d015      	beq.n	801028e <_svfiprintf_r+0xfa>
 8010262:	9a07      	ldr	r2, [sp, #28]
 8010264:	4654      	mov	r4, sl
 8010266:	2000      	movs	r0, #0
 8010268:	f04f 0c0a 	mov.w	ip, #10
 801026c:	4621      	mov	r1, r4
 801026e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010272:	3b30      	subs	r3, #48	@ 0x30
 8010274:	2b09      	cmp	r3, #9
 8010276:	d94b      	bls.n	8010310 <_svfiprintf_r+0x17c>
 8010278:	b1b0      	cbz	r0, 80102a8 <_svfiprintf_r+0x114>
 801027a:	9207      	str	r2, [sp, #28]
 801027c:	e014      	b.n	80102a8 <_svfiprintf_r+0x114>
 801027e:	eba0 0308 	sub.w	r3, r0, r8
 8010282:	fa09 f303 	lsl.w	r3, r9, r3
 8010286:	4313      	orrs	r3, r2
 8010288:	9304      	str	r3, [sp, #16]
 801028a:	46a2      	mov	sl, r4
 801028c:	e7d2      	b.n	8010234 <_svfiprintf_r+0xa0>
 801028e:	9b03      	ldr	r3, [sp, #12]
 8010290:	1d19      	adds	r1, r3, #4
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	9103      	str	r1, [sp, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	bfbb      	ittet	lt
 801029a:	425b      	neglt	r3, r3
 801029c:	f042 0202 	orrlt.w	r2, r2, #2
 80102a0:	9307      	strge	r3, [sp, #28]
 80102a2:	9307      	strlt	r3, [sp, #28]
 80102a4:	bfb8      	it	lt
 80102a6:	9204      	strlt	r2, [sp, #16]
 80102a8:	7823      	ldrb	r3, [r4, #0]
 80102aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80102ac:	d10a      	bne.n	80102c4 <_svfiprintf_r+0x130>
 80102ae:	7863      	ldrb	r3, [r4, #1]
 80102b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80102b2:	d132      	bne.n	801031a <_svfiprintf_r+0x186>
 80102b4:	9b03      	ldr	r3, [sp, #12]
 80102b6:	1d1a      	adds	r2, r3, #4
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	9203      	str	r2, [sp, #12]
 80102bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102c0:	3402      	adds	r4, #2
 80102c2:	9305      	str	r3, [sp, #20]
 80102c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010388 <_svfiprintf_r+0x1f4>
 80102c8:	7821      	ldrb	r1, [r4, #0]
 80102ca:	2203      	movs	r2, #3
 80102cc:	4650      	mov	r0, sl
 80102ce:	f7ef ff7f 	bl	80001d0 <memchr>
 80102d2:	b138      	cbz	r0, 80102e4 <_svfiprintf_r+0x150>
 80102d4:	9b04      	ldr	r3, [sp, #16]
 80102d6:	eba0 000a 	sub.w	r0, r0, sl
 80102da:	2240      	movs	r2, #64	@ 0x40
 80102dc:	4082      	lsls	r2, r0
 80102de:	4313      	orrs	r3, r2
 80102e0:	3401      	adds	r4, #1
 80102e2:	9304      	str	r3, [sp, #16]
 80102e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102e8:	4824      	ldr	r0, [pc, #144]	@ (801037c <_svfiprintf_r+0x1e8>)
 80102ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102ee:	2206      	movs	r2, #6
 80102f0:	f7ef ff6e 	bl	80001d0 <memchr>
 80102f4:	2800      	cmp	r0, #0
 80102f6:	d036      	beq.n	8010366 <_svfiprintf_r+0x1d2>
 80102f8:	4b21      	ldr	r3, [pc, #132]	@ (8010380 <_svfiprintf_r+0x1ec>)
 80102fa:	bb1b      	cbnz	r3, 8010344 <_svfiprintf_r+0x1b0>
 80102fc:	9b03      	ldr	r3, [sp, #12]
 80102fe:	3307      	adds	r3, #7
 8010300:	f023 0307 	bic.w	r3, r3, #7
 8010304:	3308      	adds	r3, #8
 8010306:	9303      	str	r3, [sp, #12]
 8010308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801030a:	4433      	add	r3, r6
 801030c:	9309      	str	r3, [sp, #36]	@ 0x24
 801030e:	e76a      	b.n	80101e6 <_svfiprintf_r+0x52>
 8010310:	fb0c 3202 	mla	r2, ip, r2, r3
 8010314:	460c      	mov	r4, r1
 8010316:	2001      	movs	r0, #1
 8010318:	e7a8      	b.n	801026c <_svfiprintf_r+0xd8>
 801031a:	2300      	movs	r3, #0
 801031c:	3401      	adds	r4, #1
 801031e:	9305      	str	r3, [sp, #20]
 8010320:	4619      	mov	r1, r3
 8010322:	f04f 0c0a 	mov.w	ip, #10
 8010326:	4620      	mov	r0, r4
 8010328:	f810 2b01 	ldrb.w	r2, [r0], #1
 801032c:	3a30      	subs	r2, #48	@ 0x30
 801032e:	2a09      	cmp	r2, #9
 8010330:	d903      	bls.n	801033a <_svfiprintf_r+0x1a6>
 8010332:	2b00      	cmp	r3, #0
 8010334:	d0c6      	beq.n	80102c4 <_svfiprintf_r+0x130>
 8010336:	9105      	str	r1, [sp, #20]
 8010338:	e7c4      	b.n	80102c4 <_svfiprintf_r+0x130>
 801033a:	fb0c 2101 	mla	r1, ip, r1, r2
 801033e:	4604      	mov	r4, r0
 8010340:	2301      	movs	r3, #1
 8010342:	e7f0      	b.n	8010326 <_svfiprintf_r+0x192>
 8010344:	ab03      	add	r3, sp, #12
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	462a      	mov	r2, r5
 801034a:	4b0e      	ldr	r3, [pc, #56]	@ (8010384 <_svfiprintf_r+0x1f0>)
 801034c:	a904      	add	r1, sp, #16
 801034e:	4638      	mov	r0, r7
 8010350:	f7fd fe32 	bl	800dfb8 <_printf_float>
 8010354:	1c42      	adds	r2, r0, #1
 8010356:	4606      	mov	r6, r0
 8010358:	d1d6      	bne.n	8010308 <_svfiprintf_r+0x174>
 801035a:	89ab      	ldrh	r3, [r5, #12]
 801035c:	065b      	lsls	r3, r3, #25
 801035e:	f53f af2d 	bmi.w	80101bc <_svfiprintf_r+0x28>
 8010362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010364:	e72c      	b.n	80101c0 <_svfiprintf_r+0x2c>
 8010366:	ab03      	add	r3, sp, #12
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	462a      	mov	r2, r5
 801036c:	4b05      	ldr	r3, [pc, #20]	@ (8010384 <_svfiprintf_r+0x1f0>)
 801036e:	a904      	add	r1, sp, #16
 8010370:	4638      	mov	r0, r7
 8010372:	f7fe f8b9 	bl	800e4e8 <_printf_i>
 8010376:	e7ed      	b.n	8010354 <_svfiprintf_r+0x1c0>
 8010378:	08010fa0 	.word	0x08010fa0
 801037c:	08010faa 	.word	0x08010faa
 8010380:	0800dfb9 	.word	0x0800dfb9
 8010384:	080100dd 	.word	0x080100dd
 8010388:	08010fa6 	.word	0x08010fa6

0801038c <__sflush_r>:
 801038c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010394:	0716      	lsls	r6, r2, #28
 8010396:	4605      	mov	r5, r0
 8010398:	460c      	mov	r4, r1
 801039a:	d454      	bmi.n	8010446 <__sflush_r+0xba>
 801039c:	684b      	ldr	r3, [r1, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	dc02      	bgt.n	80103a8 <__sflush_r+0x1c>
 80103a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	dd48      	ble.n	801043a <__sflush_r+0xae>
 80103a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80103aa:	2e00      	cmp	r6, #0
 80103ac:	d045      	beq.n	801043a <__sflush_r+0xae>
 80103ae:	2300      	movs	r3, #0
 80103b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80103b4:	682f      	ldr	r7, [r5, #0]
 80103b6:	6a21      	ldr	r1, [r4, #32]
 80103b8:	602b      	str	r3, [r5, #0]
 80103ba:	d030      	beq.n	801041e <__sflush_r+0x92>
 80103bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80103be:	89a3      	ldrh	r3, [r4, #12]
 80103c0:	0759      	lsls	r1, r3, #29
 80103c2:	d505      	bpl.n	80103d0 <__sflush_r+0x44>
 80103c4:	6863      	ldr	r3, [r4, #4]
 80103c6:	1ad2      	subs	r2, r2, r3
 80103c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80103ca:	b10b      	cbz	r3, 80103d0 <__sflush_r+0x44>
 80103cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80103ce:	1ad2      	subs	r2, r2, r3
 80103d0:	2300      	movs	r3, #0
 80103d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80103d4:	6a21      	ldr	r1, [r4, #32]
 80103d6:	4628      	mov	r0, r5
 80103d8:	47b0      	blx	r6
 80103da:	1c43      	adds	r3, r0, #1
 80103dc:	89a3      	ldrh	r3, [r4, #12]
 80103de:	d106      	bne.n	80103ee <__sflush_r+0x62>
 80103e0:	6829      	ldr	r1, [r5, #0]
 80103e2:	291d      	cmp	r1, #29
 80103e4:	d82b      	bhi.n	801043e <__sflush_r+0xb2>
 80103e6:	4a2a      	ldr	r2, [pc, #168]	@ (8010490 <__sflush_r+0x104>)
 80103e8:	410a      	asrs	r2, r1
 80103ea:	07d6      	lsls	r6, r2, #31
 80103ec:	d427      	bmi.n	801043e <__sflush_r+0xb2>
 80103ee:	2200      	movs	r2, #0
 80103f0:	6062      	str	r2, [r4, #4]
 80103f2:	04d9      	lsls	r1, r3, #19
 80103f4:	6922      	ldr	r2, [r4, #16]
 80103f6:	6022      	str	r2, [r4, #0]
 80103f8:	d504      	bpl.n	8010404 <__sflush_r+0x78>
 80103fa:	1c42      	adds	r2, r0, #1
 80103fc:	d101      	bne.n	8010402 <__sflush_r+0x76>
 80103fe:	682b      	ldr	r3, [r5, #0]
 8010400:	b903      	cbnz	r3, 8010404 <__sflush_r+0x78>
 8010402:	6560      	str	r0, [r4, #84]	@ 0x54
 8010404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010406:	602f      	str	r7, [r5, #0]
 8010408:	b1b9      	cbz	r1, 801043a <__sflush_r+0xae>
 801040a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801040e:	4299      	cmp	r1, r3
 8010410:	d002      	beq.n	8010418 <__sflush_r+0x8c>
 8010412:	4628      	mov	r0, r5
 8010414:	f7ff f9e0 	bl	800f7d8 <_free_r>
 8010418:	2300      	movs	r3, #0
 801041a:	6363      	str	r3, [r4, #52]	@ 0x34
 801041c:	e00d      	b.n	801043a <__sflush_r+0xae>
 801041e:	2301      	movs	r3, #1
 8010420:	4628      	mov	r0, r5
 8010422:	47b0      	blx	r6
 8010424:	4602      	mov	r2, r0
 8010426:	1c50      	adds	r0, r2, #1
 8010428:	d1c9      	bne.n	80103be <__sflush_r+0x32>
 801042a:	682b      	ldr	r3, [r5, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d0c6      	beq.n	80103be <__sflush_r+0x32>
 8010430:	2b1d      	cmp	r3, #29
 8010432:	d001      	beq.n	8010438 <__sflush_r+0xac>
 8010434:	2b16      	cmp	r3, #22
 8010436:	d11e      	bne.n	8010476 <__sflush_r+0xea>
 8010438:	602f      	str	r7, [r5, #0]
 801043a:	2000      	movs	r0, #0
 801043c:	e022      	b.n	8010484 <__sflush_r+0xf8>
 801043e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010442:	b21b      	sxth	r3, r3
 8010444:	e01b      	b.n	801047e <__sflush_r+0xf2>
 8010446:	690f      	ldr	r7, [r1, #16]
 8010448:	2f00      	cmp	r7, #0
 801044a:	d0f6      	beq.n	801043a <__sflush_r+0xae>
 801044c:	0793      	lsls	r3, r2, #30
 801044e:	680e      	ldr	r6, [r1, #0]
 8010450:	bf08      	it	eq
 8010452:	694b      	ldreq	r3, [r1, #20]
 8010454:	600f      	str	r7, [r1, #0]
 8010456:	bf18      	it	ne
 8010458:	2300      	movne	r3, #0
 801045a:	eba6 0807 	sub.w	r8, r6, r7
 801045e:	608b      	str	r3, [r1, #8]
 8010460:	f1b8 0f00 	cmp.w	r8, #0
 8010464:	dde9      	ble.n	801043a <__sflush_r+0xae>
 8010466:	6a21      	ldr	r1, [r4, #32]
 8010468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801046a:	4643      	mov	r3, r8
 801046c:	463a      	mov	r2, r7
 801046e:	4628      	mov	r0, r5
 8010470:	47b0      	blx	r6
 8010472:	2800      	cmp	r0, #0
 8010474:	dc08      	bgt.n	8010488 <__sflush_r+0xfc>
 8010476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801047a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801047e:	81a3      	strh	r3, [r4, #12]
 8010480:	f04f 30ff 	mov.w	r0, #4294967295
 8010484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010488:	4407      	add	r7, r0
 801048a:	eba8 0800 	sub.w	r8, r8, r0
 801048e:	e7e7      	b.n	8010460 <__sflush_r+0xd4>
 8010490:	dfbffffe 	.word	0xdfbffffe

08010494 <_fflush_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	690b      	ldr	r3, [r1, #16]
 8010498:	4605      	mov	r5, r0
 801049a:	460c      	mov	r4, r1
 801049c:	b913      	cbnz	r3, 80104a4 <_fflush_r+0x10>
 801049e:	2500      	movs	r5, #0
 80104a0:	4628      	mov	r0, r5
 80104a2:	bd38      	pop	{r3, r4, r5, pc}
 80104a4:	b118      	cbz	r0, 80104ae <_fflush_r+0x1a>
 80104a6:	6a03      	ldr	r3, [r0, #32]
 80104a8:	b90b      	cbnz	r3, 80104ae <_fflush_r+0x1a>
 80104aa:	f7fe f9c9 	bl	800e840 <__sinit>
 80104ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d0f3      	beq.n	801049e <_fflush_r+0xa>
 80104b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80104b8:	07d0      	lsls	r0, r2, #31
 80104ba:	d404      	bmi.n	80104c6 <_fflush_r+0x32>
 80104bc:	0599      	lsls	r1, r3, #22
 80104be:	d402      	bmi.n	80104c6 <_fflush_r+0x32>
 80104c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104c2:	f7fe fb2a 	bl	800eb1a <__retarget_lock_acquire_recursive>
 80104c6:	4628      	mov	r0, r5
 80104c8:	4621      	mov	r1, r4
 80104ca:	f7ff ff5f 	bl	801038c <__sflush_r>
 80104ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104d0:	07da      	lsls	r2, r3, #31
 80104d2:	4605      	mov	r5, r0
 80104d4:	d4e4      	bmi.n	80104a0 <_fflush_r+0xc>
 80104d6:	89a3      	ldrh	r3, [r4, #12]
 80104d8:	059b      	lsls	r3, r3, #22
 80104da:	d4e1      	bmi.n	80104a0 <_fflush_r+0xc>
 80104dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104de:	f7fe fb1d 	bl	800eb1c <__retarget_lock_release_recursive>
 80104e2:	e7dd      	b.n	80104a0 <_fflush_r+0xc>

080104e4 <memmove>:
 80104e4:	4288      	cmp	r0, r1
 80104e6:	b510      	push	{r4, lr}
 80104e8:	eb01 0402 	add.w	r4, r1, r2
 80104ec:	d902      	bls.n	80104f4 <memmove+0x10>
 80104ee:	4284      	cmp	r4, r0
 80104f0:	4623      	mov	r3, r4
 80104f2:	d807      	bhi.n	8010504 <memmove+0x20>
 80104f4:	1e43      	subs	r3, r0, #1
 80104f6:	42a1      	cmp	r1, r4
 80104f8:	d008      	beq.n	801050c <memmove+0x28>
 80104fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010502:	e7f8      	b.n	80104f6 <memmove+0x12>
 8010504:	4402      	add	r2, r0
 8010506:	4601      	mov	r1, r0
 8010508:	428a      	cmp	r2, r1
 801050a:	d100      	bne.n	801050e <memmove+0x2a>
 801050c:	bd10      	pop	{r4, pc}
 801050e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010516:	e7f7      	b.n	8010508 <memmove+0x24>

08010518 <_sbrk_r>:
 8010518:	b538      	push	{r3, r4, r5, lr}
 801051a:	4d06      	ldr	r5, [pc, #24]	@ (8010534 <_sbrk_r+0x1c>)
 801051c:	2300      	movs	r3, #0
 801051e:	4604      	mov	r4, r0
 8010520:	4608      	mov	r0, r1
 8010522:	602b      	str	r3, [r5, #0]
 8010524:	f7f4 fd18 	bl	8004f58 <_sbrk>
 8010528:	1c43      	adds	r3, r0, #1
 801052a:	d102      	bne.n	8010532 <_sbrk_r+0x1a>
 801052c:	682b      	ldr	r3, [r5, #0]
 801052e:	b103      	cbz	r3, 8010532 <_sbrk_r+0x1a>
 8010530:	6023      	str	r3, [r4, #0]
 8010532:	bd38      	pop	{r3, r4, r5, pc}
 8010534:	20005900 	.word	0x20005900

08010538 <__assert_func>:
 8010538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801053a:	4614      	mov	r4, r2
 801053c:	461a      	mov	r2, r3
 801053e:	4b09      	ldr	r3, [pc, #36]	@ (8010564 <__assert_func+0x2c>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4605      	mov	r5, r0
 8010544:	68d8      	ldr	r0, [r3, #12]
 8010546:	b954      	cbnz	r4, 801055e <__assert_func+0x26>
 8010548:	4b07      	ldr	r3, [pc, #28]	@ (8010568 <__assert_func+0x30>)
 801054a:	461c      	mov	r4, r3
 801054c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010550:	9100      	str	r1, [sp, #0]
 8010552:	462b      	mov	r3, r5
 8010554:	4905      	ldr	r1, [pc, #20]	@ (801056c <__assert_func+0x34>)
 8010556:	f000 f86f 	bl	8010638 <fiprintf>
 801055a:	f000 f87f 	bl	801065c <abort>
 801055e:	4b04      	ldr	r3, [pc, #16]	@ (8010570 <__assert_func+0x38>)
 8010560:	e7f4      	b.n	801054c <__assert_func+0x14>
 8010562:	bf00      	nop
 8010564:	200000a0 	.word	0x200000a0
 8010568:	08010ff6 	.word	0x08010ff6
 801056c:	08010fc8 	.word	0x08010fc8
 8010570:	08010fbb 	.word	0x08010fbb

08010574 <_calloc_r>:
 8010574:	b570      	push	{r4, r5, r6, lr}
 8010576:	fba1 5402 	umull	r5, r4, r1, r2
 801057a:	b93c      	cbnz	r4, 801058c <_calloc_r+0x18>
 801057c:	4629      	mov	r1, r5
 801057e:	f7ff f99f 	bl	800f8c0 <_malloc_r>
 8010582:	4606      	mov	r6, r0
 8010584:	b928      	cbnz	r0, 8010592 <_calloc_r+0x1e>
 8010586:	2600      	movs	r6, #0
 8010588:	4630      	mov	r0, r6
 801058a:	bd70      	pop	{r4, r5, r6, pc}
 801058c:	220c      	movs	r2, #12
 801058e:	6002      	str	r2, [r0, #0]
 8010590:	e7f9      	b.n	8010586 <_calloc_r+0x12>
 8010592:	462a      	mov	r2, r5
 8010594:	4621      	mov	r1, r4
 8010596:	f7fe f9ed 	bl	800e974 <memset>
 801059a:	e7f5      	b.n	8010588 <_calloc_r+0x14>

0801059c <__ascii_mbtowc>:
 801059c:	b082      	sub	sp, #8
 801059e:	b901      	cbnz	r1, 80105a2 <__ascii_mbtowc+0x6>
 80105a0:	a901      	add	r1, sp, #4
 80105a2:	b142      	cbz	r2, 80105b6 <__ascii_mbtowc+0x1a>
 80105a4:	b14b      	cbz	r3, 80105ba <__ascii_mbtowc+0x1e>
 80105a6:	7813      	ldrb	r3, [r2, #0]
 80105a8:	600b      	str	r3, [r1, #0]
 80105aa:	7812      	ldrb	r2, [r2, #0]
 80105ac:	1e10      	subs	r0, r2, #0
 80105ae:	bf18      	it	ne
 80105b0:	2001      	movne	r0, #1
 80105b2:	b002      	add	sp, #8
 80105b4:	4770      	bx	lr
 80105b6:	4610      	mov	r0, r2
 80105b8:	e7fb      	b.n	80105b2 <__ascii_mbtowc+0x16>
 80105ba:	f06f 0001 	mvn.w	r0, #1
 80105be:	e7f8      	b.n	80105b2 <__ascii_mbtowc+0x16>

080105c0 <_realloc_r>:
 80105c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c4:	4680      	mov	r8, r0
 80105c6:	4615      	mov	r5, r2
 80105c8:	460c      	mov	r4, r1
 80105ca:	b921      	cbnz	r1, 80105d6 <_realloc_r+0x16>
 80105cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105d0:	4611      	mov	r1, r2
 80105d2:	f7ff b975 	b.w	800f8c0 <_malloc_r>
 80105d6:	b92a      	cbnz	r2, 80105e4 <_realloc_r+0x24>
 80105d8:	f7ff f8fe 	bl	800f7d8 <_free_r>
 80105dc:	2400      	movs	r4, #0
 80105de:	4620      	mov	r0, r4
 80105e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e4:	f000 f841 	bl	801066a <_malloc_usable_size_r>
 80105e8:	4285      	cmp	r5, r0
 80105ea:	4606      	mov	r6, r0
 80105ec:	d802      	bhi.n	80105f4 <_realloc_r+0x34>
 80105ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80105f2:	d8f4      	bhi.n	80105de <_realloc_r+0x1e>
 80105f4:	4629      	mov	r1, r5
 80105f6:	4640      	mov	r0, r8
 80105f8:	f7ff f962 	bl	800f8c0 <_malloc_r>
 80105fc:	4607      	mov	r7, r0
 80105fe:	2800      	cmp	r0, #0
 8010600:	d0ec      	beq.n	80105dc <_realloc_r+0x1c>
 8010602:	42b5      	cmp	r5, r6
 8010604:	462a      	mov	r2, r5
 8010606:	4621      	mov	r1, r4
 8010608:	bf28      	it	cs
 801060a:	4632      	movcs	r2, r6
 801060c:	f7fe fa87 	bl	800eb1e <memcpy>
 8010610:	4621      	mov	r1, r4
 8010612:	4640      	mov	r0, r8
 8010614:	f7ff f8e0 	bl	800f7d8 <_free_r>
 8010618:	463c      	mov	r4, r7
 801061a:	e7e0      	b.n	80105de <_realloc_r+0x1e>

0801061c <__ascii_wctomb>:
 801061c:	4603      	mov	r3, r0
 801061e:	4608      	mov	r0, r1
 8010620:	b141      	cbz	r1, 8010634 <__ascii_wctomb+0x18>
 8010622:	2aff      	cmp	r2, #255	@ 0xff
 8010624:	d904      	bls.n	8010630 <__ascii_wctomb+0x14>
 8010626:	228a      	movs	r2, #138	@ 0x8a
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	f04f 30ff 	mov.w	r0, #4294967295
 801062e:	4770      	bx	lr
 8010630:	700a      	strb	r2, [r1, #0]
 8010632:	2001      	movs	r0, #1
 8010634:	4770      	bx	lr
	...

08010638 <fiprintf>:
 8010638:	b40e      	push	{r1, r2, r3}
 801063a:	b503      	push	{r0, r1, lr}
 801063c:	4601      	mov	r1, r0
 801063e:	ab03      	add	r3, sp, #12
 8010640:	4805      	ldr	r0, [pc, #20]	@ (8010658 <fiprintf+0x20>)
 8010642:	f853 2b04 	ldr.w	r2, [r3], #4
 8010646:	6800      	ldr	r0, [r0, #0]
 8010648:	9301      	str	r3, [sp, #4]
 801064a:	f000 f83f 	bl	80106cc <_vfiprintf_r>
 801064e:	b002      	add	sp, #8
 8010650:	f85d eb04 	ldr.w	lr, [sp], #4
 8010654:	b003      	add	sp, #12
 8010656:	4770      	bx	lr
 8010658:	200000a0 	.word	0x200000a0

0801065c <abort>:
 801065c:	b508      	push	{r3, lr}
 801065e:	2006      	movs	r0, #6
 8010660:	f000 fa08 	bl	8010a74 <raise>
 8010664:	2001      	movs	r0, #1
 8010666:	f7f4 fbff 	bl	8004e68 <_exit>

0801066a <_malloc_usable_size_r>:
 801066a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801066e:	1f18      	subs	r0, r3, #4
 8010670:	2b00      	cmp	r3, #0
 8010672:	bfbc      	itt	lt
 8010674:	580b      	ldrlt	r3, [r1, r0]
 8010676:	18c0      	addlt	r0, r0, r3
 8010678:	4770      	bx	lr

0801067a <__sfputc_r>:
 801067a:	6893      	ldr	r3, [r2, #8]
 801067c:	3b01      	subs	r3, #1
 801067e:	2b00      	cmp	r3, #0
 8010680:	b410      	push	{r4}
 8010682:	6093      	str	r3, [r2, #8]
 8010684:	da08      	bge.n	8010698 <__sfputc_r+0x1e>
 8010686:	6994      	ldr	r4, [r2, #24]
 8010688:	42a3      	cmp	r3, r4
 801068a:	db01      	blt.n	8010690 <__sfputc_r+0x16>
 801068c:	290a      	cmp	r1, #10
 801068e:	d103      	bne.n	8010698 <__sfputc_r+0x1e>
 8010690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010694:	f000 b932 	b.w	80108fc <__swbuf_r>
 8010698:	6813      	ldr	r3, [r2, #0]
 801069a:	1c58      	adds	r0, r3, #1
 801069c:	6010      	str	r0, [r2, #0]
 801069e:	7019      	strb	r1, [r3, #0]
 80106a0:	4608      	mov	r0, r1
 80106a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106a6:	4770      	bx	lr

080106a8 <__sfputs_r>:
 80106a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106aa:	4606      	mov	r6, r0
 80106ac:	460f      	mov	r7, r1
 80106ae:	4614      	mov	r4, r2
 80106b0:	18d5      	adds	r5, r2, r3
 80106b2:	42ac      	cmp	r4, r5
 80106b4:	d101      	bne.n	80106ba <__sfputs_r+0x12>
 80106b6:	2000      	movs	r0, #0
 80106b8:	e007      	b.n	80106ca <__sfputs_r+0x22>
 80106ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106be:	463a      	mov	r2, r7
 80106c0:	4630      	mov	r0, r6
 80106c2:	f7ff ffda 	bl	801067a <__sfputc_r>
 80106c6:	1c43      	adds	r3, r0, #1
 80106c8:	d1f3      	bne.n	80106b2 <__sfputs_r+0xa>
 80106ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080106cc <_vfiprintf_r>:
 80106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d0:	460d      	mov	r5, r1
 80106d2:	b09d      	sub	sp, #116	@ 0x74
 80106d4:	4614      	mov	r4, r2
 80106d6:	4698      	mov	r8, r3
 80106d8:	4606      	mov	r6, r0
 80106da:	b118      	cbz	r0, 80106e4 <_vfiprintf_r+0x18>
 80106dc:	6a03      	ldr	r3, [r0, #32]
 80106de:	b90b      	cbnz	r3, 80106e4 <_vfiprintf_r+0x18>
 80106e0:	f7fe f8ae 	bl	800e840 <__sinit>
 80106e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106e6:	07d9      	lsls	r1, r3, #31
 80106e8:	d405      	bmi.n	80106f6 <_vfiprintf_r+0x2a>
 80106ea:	89ab      	ldrh	r3, [r5, #12]
 80106ec:	059a      	lsls	r2, r3, #22
 80106ee:	d402      	bmi.n	80106f6 <_vfiprintf_r+0x2a>
 80106f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106f2:	f7fe fa12 	bl	800eb1a <__retarget_lock_acquire_recursive>
 80106f6:	89ab      	ldrh	r3, [r5, #12]
 80106f8:	071b      	lsls	r3, r3, #28
 80106fa:	d501      	bpl.n	8010700 <_vfiprintf_r+0x34>
 80106fc:	692b      	ldr	r3, [r5, #16]
 80106fe:	b99b      	cbnz	r3, 8010728 <_vfiprintf_r+0x5c>
 8010700:	4629      	mov	r1, r5
 8010702:	4630      	mov	r0, r6
 8010704:	f000 f938 	bl	8010978 <__swsetup_r>
 8010708:	b170      	cbz	r0, 8010728 <_vfiprintf_r+0x5c>
 801070a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801070c:	07dc      	lsls	r4, r3, #31
 801070e:	d504      	bpl.n	801071a <_vfiprintf_r+0x4e>
 8010710:	f04f 30ff 	mov.w	r0, #4294967295
 8010714:	b01d      	add	sp, #116	@ 0x74
 8010716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071a:	89ab      	ldrh	r3, [r5, #12]
 801071c:	0598      	lsls	r0, r3, #22
 801071e:	d4f7      	bmi.n	8010710 <_vfiprintf_r+0x44>
 8010720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010722:	f7fe f9fb 	bl	800eb1c <__retarget_lock_release_recursive>
 8010726:	e7f3      	b.n	8010710 <_vfiprintf_r+0x44>
 8010728:	2300      	movs	r3, #0
 801072a:	9309      	str	r3, [sp, #36]	@ 0x24
 801072c:	2320      	movs	r3, #32
 801072e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010732:	f8cd 800c 	str.w	r8, [sp, #12]
 8010736:	2330      	movs	r3, #48	@ 0x30
 8010738:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80108e8 <_vfiprintf_r+0x21c>
 801073c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010740:	f04f 0901 	mov.w	r9, #1
 8010744:	4623      	mov	r3, r4
 8010746:	469a      	mov	sl, r3
 8010748:	f813 2b01 	ldrb.w	r2, [r3], #1
 801074c:	b10a      	cbz	r2, 8010752 <_vfiprintf_r+0x86>
 801074e:	2a25      	cmp	r2, #37	@ 0x25
 8010750:	d1f9      	bne.n	8010746 <_vfiprintf_r+0x7a>
 8010752:	ebba 0b04 	subs.w	fp, sl, r4
 8010756:	d00b      	beq.n	8010770 <_vfiprintf_r+0xa4>
 8010758:	465b      	mov	r3, fp
 801075a:	4622      	mov	r2, r4
 801075c:	4629      	mov	r1, r5
 801075e:	4630      	mov	r0, r6
 8010760:	f7ff ffa2 	bl	80106a8 <__sfputs_r>
 8010764:	3001      	adds	r0, #1
 8010766:	f000 80a7 	beq.w	80108b8 <_vfiprintf_r+0x1ec>
 801076a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801076c:	445a      	add	r2, fp
 801076e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010770:	f89a 3000 	ldrb.w	r3, [sl]
 8010774:	2b00      	cmp	r3, #0
 8010776:	f000 809f 	beq.w	80108b8 <_vfiprintf_r+0x1ec>
 801077a:	2300      	movs	r3, #0
 801077c:	f04f 32ff 	mov.w	r2, #4294967295
 8010780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010784:	f10a 0a01 	add.w	sl, sl, #1
 8010788:	9304      	str	r3, [sp, #16]
 801078a:	9307      	str	r3, [sp, #28]
 801078c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010790:	931a      	str	r3, [sp, #104]	@ 0x68
 8010792:	4654      	mov	r4, sl
 8010794:	2205      	movs	r2, #5
 8010796:	f814 1b01 	ldrb.w	r1, [r4], #1
 801079a:	4853      	ldr	r0, [pc, #332]	@ (80108e8 <_vfiprintf_r+0x21c>)
 801079c:	f7ef fd18 	bl	80001d0 <memchr>
 80107a0:	9a04      	ldr	r2, [sp, #16]
 80107a2:	b9d8      	cbnz	r0, 80107dc <_vfiprintf_r+0x110>
 80107a4:	06d1      	lsls	r1, r2, #27
 80107a6:	bf44      	itt	mi
 80107a8:	2320      	movmi	r3, #32
 80107aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107ae:	0713      	lsls	r3, r2, #28
 80107b0:	bf44      	itt	mi
 80107b2:	232b      	movmi	r3, #43	@ 0x2b
 80107b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80107b8:	f89a 3000 	ldrb.w	r3, [sl]
 80107bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80107be:	d015      	beq.n	80107ec <_vfiprintf_r+0x120>
 80107c0:	9a07      	ldr	r2, [sp, #28]
 80107c2:	4654      	mov	r4, sl
 80107c4:	2000      	movs	r0, #0
 80107c6:	f04f 0c0a 	mov.w	ip, #10
 80107ca:	4621      	mov	r1, r4
 80107cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107d0:	3b30      	subs	r3, #48	@ 0x30
 80107d2:	2b09      	cmp	r3, #9
 80107d4:	d94b      	bls.n	801086e <_vfiprintf_r+0x1a2>
 80107d6:	b1b0      	cbz	r0, 8010806 <_vfiprintf_r+0x13a>
 80107d8:	9207      	str	r2, [sp, #28]
 80107da:	e014      	b.n	8010806 <_vfiprintf_r+0x13a>
 80107dc:	eba0 0308 	sub.w	r3, r0, r8
 80107e0:	fa09 f303 	lsl.w	r3, r9, r3
 80107e4:	4313      	orrs	r3, r2
 80107e6:	9304      	str	r3, [sp, #16]
 80107e8:	46a2      	mov	sl, r4
 80107ea:	e7d2      	b.n	8010792 <_vfiprintf_r+0xc6>
 80107ec:	9b03      	ldr	r3, [sp, #12]
 80107ee:	1d19      	adds	r1, r3, #4
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	9103      	str	r1, [sp, #12]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	bfbb      	ittet	lt
 80107f8:	425b      	neglt	r3, r3
 80107fa:	f042 0202 	orrlt.w	r2, r2, #2
 80107fe:	9307      	strge	r3, [sp, #28]
 8010800:	9307      	strlt	r3, [sp, #28]
 8010802:	bfb8      	it	lt
 8010804:	9204      	strlt	r2, [sp, #16]
 8010806:	7823      	ldrb	r3, [r4, #0]
 8010808:	2b2e      	cmp	r3, #46	@ 0x2e
 801080a:	d10a      	bne.n	8010822 <_vfiprintf_r+0x156>
 801080c:	7863      	ldrb	r3, [r4, #1]
 801080e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010810:	d132      	bne.n	8010878 <_vfiprintf_r+0x1ac>
 8010812:	9b03      	ldr	r3, [sp, #12]
 8010814:	1d1a      	adds	r2, r3, #4
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	9203      	str	r2, [sp, #12]
 801081a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801081e:	3402      	adds	r4, #2
 8010820:	9305      	str	r3, [sp, #20]
 8010822:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80108f8 <_vfiprintf_r+0x22c>
 8010826:	7821      	ldrb	r1, [r4, #0]
 8010828:	2203      	movs	r2, #3
 801082a:	4650      	mov	r0, sl
 801082c:	f7ef fcd0 	bl	80001d0 <memchr>
 8010830:	b138      	cbz	r0, 8010842 <_vfiprintf_r+0x176>
 8010832:	9b04      	ldr	r3, [sp, #16]
 8010834:	eba0 000a 	sub.w	r0, r0, sl
 8010838:	2240      	movs	r2, #64	@ 0x40
 801083a:	4082      	lsls	r2, r0
 801083c:	4313      	orrs	r3, r2
 801083e:	3401      	adds	r4, #1
 8010840:	9304      	str	r3, [sp, #16]
 8010842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010846:	4829      	ldr	r0, [pc, #164]	@ (80108ec <_vfiprintf_r+0x220>)
 8010848:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801084c:	2206      	movs	r2, #6
 801084e:	f7ef fcbf 	bl	80001d0 <memchr>
 8010852:	2800      	cmp	r0, #0
 8010854:	d03f      	beq.n	80108d6 <_vfiprintf_r+0x20a>
 8010856:	4b26      	ldr	r3, [pc, #152]	@ (80108f0 <_vfiprintf_r+0x224>)
 8010858:	bb1b      	cbnz	r3, 80108a2 <_vfiprintf_r+0x1d6>
 801085a:	9b03      	ldr	r3, [sp, #12]
 801085c:	3307      	adds	r3, #7
 801085e:	f023 0307 	bic.w	r3, r3, #7
 8010862:	3308      	adds	r3, #8
 8010864:	9303      	str	r3, [sp, #12]
 8010866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010868:	443b      	add	r3, r7
 801086a:	9309      	str	r3, [sp, #36]	@ 0x24
 801086c:	e76a      	b.n	8010744 <_vfiprintf_r+0x78>
 801086e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010872:	460c      	mov	r4, r1
 8010874:	2001      	movs	r0, #1
 8010876:	e7a8      	b.n	80107ca <_vfiprintf_r+0xfe>
 8010878:	2300      	movs	r3, #0
 801087a:	3401      	adds	r4, #1
 801087c:	9305      	str	r3, [sp, #20]
 801087e:	4619      	mov	r1, r3
 8010880:	f04f 0c0a 	mov.w	ip, #10
 8010884:	4620      	mov	r0, r4
 8010886:	f810 2b01 	ldrb.w	r2, [r0], #1
 801088a:	3a30      	subs	r2, #48	@ 0x30
 801088c:	2a09      	cmp	r2, #9
 801088e:	d903      	bls.n	8010898 <_vfiprintf_r+0x1cc>
 8010890:	2b00      	cmp	r3, #0
 8010892:	d0c6      	beq.n	8010822 <_vfiprintf_r+0x156>
 8010894:	9105      	str	r1, [sp, #20]
 8010896:	e7c4      	b.n	8010822 <_vfiprintf_r+0x156>
 8010898:	fb0c 2101 	mla	r1, ip, r1, r2
 801089c:	4604      	mov	r4, r0
 801089e:	2301      	movs	r3, #1
 80108a0:	e7f0      	b.n	8010884 <_vfiprintf_r+0x1b8>
 80108a2:	ab03      	add	r3, sp, #12
 80108a4:	9300      	str	r3, [sp, #0]
 80108a6:	462a      	mov	r2, r5
 80108a8:	4b12      	ldr	r3, [pc, #72]	@ (80108f4 <_vfiprintf_r+0x228>)
 80108aa:	a904      	add	r1, sp, #16
 80108ac:	4630      	mov	r0, r6
 80108ae:	f7fd fb83 	bl	800dfb8 <_printf_float>
 80108b2:	4607      	mov	r7, r0
 80108b4:	1c78      	adds	r0, r7, #1
 80108b6:	d1d6      	bne.n	8010866 <_vfiprintf_r+0x19a>
 80108b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108ba:	07d9      	lsls	r1, r3, #31
 80108bc:	d405      	bmi.n	80108ca <_vfiprintf_r+0x1fe>
 80108be:	89ab      	ldrh	r3, [r5, #12]
 80108c0:	059a      	lsls	r2, r3, #22
 80108c2:	d402      	bmi.n	80108ca <_vfiprintf_r+0x1fe>
 80108c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108c6:	f7fe f929 	bl	800eb1c <__retarget_lock_release_recursive>
 80108ca:	89ab      	ldrh	r3, [r5, #12]
 80108cc:	065b      	lsls	r3, r3, #25
 80108ce:	f53f af1f 	bmi.w	8010710 <_vfiprintf_r+0x44>
 80108d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108d4:	e71e      	b.n	8010714 <_vfiprintf_r+0x48>
 80108d6:	ab03      	add	r3, sp, #12
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	462a      	mov	r2, r5
 80108dc:	4b05      	ldr	r3, [pc, #20]	@ (80108f4 <_vfiprintf_r+0x228>)
 80108de:	a904      	add	r1, sp, #16
 80108e0:	4630      	mov	r0, r6
 80108e2:	f7fd fe01 	bl	800e4e8 <_printf_i>
 80108e6:	e7e4      	b.n	80108b2 <_vfiprintf_r+0x1e6>
 80108e8:	08010fa0 	.word	0x08010fa0
 80108ec:	08010faa 	.word	0x08010faa
 80108f0:	0800dfb9 	.word	0x0800dfb9
 80108f4:	080106a9 	.word	0x080106a9
 80108f8:	08010fa6 	.word	0x08010fa6

080108fc <__swbuf_r>:
 80108fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108fe:	460e      	mov	r6, r1
 8010900:	4614      	mov	r4, r2
 8010902:	4605      	mov	r5, r0
 8010904:	b118      	cbz	r0, 801090e <__swbuf_r+0x12>
 8010906:	6a03      	ldr	r3, [r0, #32]
 8010908:	b90b      	cbnz	r3, 801090e <__swbuf_r+0x12>
 801090a:	f7fd ff99 	bl	800e840 <__sinit>
 801090e:	69a3      	ldr	r3, [r4, #24]
 8010910:	60a3      	str	r3, [r4, #8]
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	071a      	lsls	r2, r3, #28
 8010916:	d501      	bpl.n	801091c <__swbuf_r+0x20>
 8010918:	6923      	ldr	r3, [r4, #16]
 801091a:	b943      	cbnz	r3, 801092e <__swbuf_r+0x32>
 801091c:	4621      	mov	r1, r4
 801091e:	4628      	mov	r0, r5
 8010920:	f000 f82a 	bl	8010978 <__swsetup_r>
 8010924:	b118      	cbz	r0, 801092e <__swbuf_r+0x32>
 8010926:	f04f 37ff 	mov.w	r7, #4294967295
 801092a:	4638      	mov	r0, r7
 801092c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801092e:	6823      	ldr	r3, [r4, #0]
 8010930:	6922      	ldr	r2, [r4, #16]
 8010932:	1a98      	subs	r0, r3, r2
 8010934:	6963      	ldr	r3, [r4, #20]
 8010936:	b2f6      	uxtb	r6, r6
 8010938:	4283      	cmp	r3, r0
 801093a:	4637      	mov	r7, r6
 801093c:	dc05      	bgt.n	801094a <__swbuf_r+0x4e>
 801093e:	4621      	mov	r1, r4
 8010940:	4628      	mov	r0, r5
 8010942:	f7ff fda7 	bl	8010494 <_fflush_r>
 8010946:	2800      	cmp	r0, #0
 8010948:	d1ed      	bne.n	8010926 <__swbuf_r+0x2a>
 801094a:	68a3      	ldr	r3, [r4, #8]
 801094c:	3b01      	subs	r3, #1
 801094e:	60a3      	str	r3, [r4, #8]
 8010950:	6823      	ldr	r3, [r4, #0]
 8010952:	1c5a      	adds	r2, r3, #1
 8010954:	6022      	str	r2, [r4, #0]
 8010956:	701e      	strb	r6, [r3, #0]
 8010958:	6962      	ldr	r2, [r4, #20]
 801095a:	1c43      	adds	r3, r0, #1
 801095c:	429a      	cmp	r2, r3
 801095e:	d004      	beq.n	801096a <__swbuf_r+0x6e>
 8010960:	89a3      	ldrh	r3, [r4, #12]
 8010962:	07db      	lsls	r3, r3, #31
 8010964:	d5e1      	bpl.n	801092a <__swbuf_r+0x2e>
 8010966:	2e0a      	cmp	r6, #10
 8010968:	d1df      	bne.n	801092a <__swbuf_r+0x2e>
 801096a:	4621      	mov	r1, r4
 801096c:	4628      	mov	r0, r5
 801096e:	f7ff fd91 	bl	8010494 <_fflush_r>
 8010972:	2800      	cmp	r0, #0
 8010974:	d0d9      	beq.n	801092a <__swbuf_r+0x2e>
 8010976:	e7d6      	b.n	8010926 <__swbuf_r+0x2a>

08010978 <__swsetup_r>:
 8010978:	b538      	push	{r3, r4, r5, lr}
 801097a:	4b29      	ldr	r3, [pc, #164]	@ (8010a20 <__swsetup_r+0xa8>)
 801097c:	4605      	mov	r5, r0
 801097e:	6818      	ldr	r0, [r3, #0]
 8010980:	460c      	mov	r4, r1
 8010982:	b118      	cbz	r0, 801098c <__swsetup_r+0x14>
 8010984:	6a03      	ldr	r3, [r0, #32]
 8010986:	b90b      	cbnz	r3, 801098c <__swsetup_r+0x14>
 8010988:	f7fd ff5a 	bl	800e840 <__sinit>
 801098c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010990:	0719      	lsls	r1, r3, #28
 8010992:	d422      	bmi.n	80109da <__swsetup_r+0x62>
 8010994:	06da      	lsls	r2, r3, #27
 8010996:	d407      	bmi.n	80109a8 <__swsetup_r+0x30>
 8010998:	2209      	movs	r2, #9
 801099a:	602a      	str	r2, [r5, #0]
 801099c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109a0:	81a3      	strh	r3, [r4, #12]
 80109a2:	f04f 30ff 	mov.w	r0, #4294967295
 80109a6:	e033      	b.n	8010a10 <__swsetup_r+0x98>
 80109a8:	0758      	lsls	r0, r3, #29
 80109aa:	d512      	bpl.n	80109d2 <__swsetup_r+0x5a>
 80109ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109ae:	b141      	cbz	r1, 80109c2 <__swsetup_r+0x4a>
 80109b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109b4:	4299      	cmp	r1, r3
 80109b6:	d002      	beq.n	80109be <__swsetup_r+0x46>
 80109b8:	4628      	mov	r0, r5
 80109ba:	f7fe ff0d 	bl	800f7d8 <_free_r>
 80109be:	2300      	movs	r3, #0
 80109c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80109c2:	89a3      	ldrh	r3, [r4, #12]
 80109c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80109c8:	81a3      	strh	r3, [r4, #12]
 80109ca:	2300      	movs	r3, #0
 80109cc:	6063      	str	r3, [r4, #4]
 80109ce:	6923      	ldr	r3, [r4, #16]
 80109d0:	6023      	str	r3, [r4, #0]
 80109d2:	89a3      	ldrh	r3, [r4, #12]
 80109d4:	f043 0308 	orr.w	r3, r3, #8
 80109d8:	81a3      	strh	r3, [r4, #12]
 80109da:	6923      	ldr	r3, [r4, #16]
 80109dc:	b94b      	cbnz	r3, 80109f2 <__swsetup_r+0x7a>
 80109de:	89a3      	ldrh	r3, [r4, #12]
 80109e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80109e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80109e8:	d003      	beq.n	80109f2 <__swsetup_r+0x7a>
 80109ea:	4621      	mov	r1, r4
 80109ec:	4628      	mov	r0, r5
 80109ee:	f000 f883 	bl	8010af8 <__smakebuf_r>
 80109f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109f6:	f013 0201 	ands.w	r2, r3, #1
 80109fa:	d00a      	beq.n	8010a12 <__swsetup_r+0x9a>
 80109fc:	2200      	movs	r2, #0
 80109fe:	60a2      	str	r2, [r4, #8]
 8010a00:	6962      	ldr	r2, [r4, #20]
 8010a02:	4252      	negs	r2, r2
 8010a04:	61a2      	str	r2, [r4, #24]
 8010a06:	6922      	ldr	r2, [r4, #16]
 8010a08:	b942      	cbnz	r2, 8010a1c <__swsetup_r+0xa4>
 8010a0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010a0e:	d1c5      	bne.n	801099c <__swsetup_r+0x24>
 8010a10:	bd38      	pop	{r3, r4, r5, pc}
 8010a12:	0799      	lsls	r1, r3, #30
 8010a14:	bf58      	it	pl
 8010a16:	6962      	ldrpl	r2, [r4, #20]
 8010a18:	60a2      	str	r2, [r4, #8]
 8010a1a:	e7f4      	b.n	8010a06 <__swsetup_r+0x8e>
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	e7f7      	b.n	8010a10 <__swsetup_r+0x98>
 8010a20:	200000a0 	.word	0x200000a0

08010a24 <_raise_r>:
 8010a24:	291f      	cmp	r1, #31
 8010a26:	b538      	push	{r3, r4, r5, lr}
 8010a28:	4605      	mov	r5, r0
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	d904      	bls.n	8010a38 <_raise_r+0x14>
 8010a2e:	2316      	movs	r3, #22
 8010a30:	6003      	str	r3, [r0, #0]
 8010a32:	f04f 30ff 	mov.w	r0, #4294967295
 8010a36:	bd38      	pop	{r3, r4, r5, pc}
 8010a38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a3a:	b112      	cbz	r2, 8010a42 <_raise_r+0x1e>
 8010a3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a40:	b94b      	cbnz	r3, 8010a56 <_raise_r+0x32>
 8010a42:	4628      	mov	r0, r5
 8010a44:	f000 f830 	bl	8010aa8 <_getpid_r>
 8010a48:	4622      	mov	r2, r4
 8010a4a:	4601      	mov	r1, r0
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a52:	f000 b817 	b.w	8010a84 <_kill_r>
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d00a      	beq.n	8010a70 <_raise_r+0x4c>
 8010a5a:	1c59      	adds	r1, r3, #1
 8010a5c:	d103      	bne.n	8010a66 <_raise_r+0x42>
 8010a5e:	2316      	movs	r3, #22
 8010a60:	6003      	str	r3, [r0, #0]
 8010a62:	2001      	movs	r0, #1
 8010a64:	e7e7      	b.n	8010a36 <_raise_r+0x12>
 8010a66:	2100      	movs	r1, #0
 8010a68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	4798      	blx	r3
 8010a70:	2000      	movs	r0, #0
 8010a72:	e7e0      	b.n	8010a36 <_raise_r+0x12>

08010a74 <raise>:
 8010a74:	4b02      	ldr	r3, [pc, #8]	@ (8010a80 <raise+0xc>)
 8010a76:	4601      	mov	r1, r0
 8010a78:	6818      	ldr	r0, [r3, #0]
 8010a7a:	f7ff bfd3 	b.w	8010a24 <_raise_r>
 8010a7e:	bf00      	nop
 8010a80:	200000a0 	.word	0x200000a0

08010a84 <_kill_r>:
 8010a84:	b538      	push	{r3, r4, r5, lr}
 8010a86:	4d07      	ldr	r5, [pc, #28]	@ (8010aa4 <_kill_r+0x20>)
 8010a88:	2300      	movs	r3, #0
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	4608      	mov	r0, r1
 8010a8e:	4611      	mov	r1, r2
 8010a90:	602b      	str	r3, [r5, #0]
 8010a92:	f7f4 f9d9 	bl	8004e48 <_kill>
 8010a96:	1c43      	adds	r3, r0, #1
 8010a98:	d102      	bne.n	8010aa0 <_kill_r+0x1c>
 8010a9a:	682b      	ldr	r3, [r5, #0]
 8010a9c:	b103      	cbz	r3, 8010aa0 <_kill_r+0x1c>
 8010a9e:	6023      	str	r3, [r4, #0]
 8010aa0:	bd38      	pop	{r3, r4, r5, pc}
 8010aa2:	bf00      	nop
 8010aa4:	20005900 	.word	0x20005900

08010aa8 <_getpid_r>:
 8010aa8:	f7f4 b9c6 	b.w	8004e38 <_getpid>

08010aac <__swhatbuf_r>:
 8010aac:	b570      	push	{r4, r5, r6, lr}
 8010aae:	460c      	mov	r4, r1
 8010ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ab4:	2900      	cmp	r1, #0
 8010ab6:	b096      	sub	sp, #88	@ 0x58
 8010ab8:	4615      	mov	r5, r2
 8010aba:	461e      	mov	r6, r3
 8010abc:	da0d      	bge.n	8010ada <__swhatbuf_r+0x2e>
 8010abe:	89a3      	ldrh	r3, [r4, #12]
 8010ac0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010ac4:	f04f 0100 	mov.w	r1, #0
 8010ac8:	bf14      	ite	ne
 8010aca:	2340      	movne	r3, #64	@ 0x40
 8010acc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	6031      	str	r1, [r6, #0]
 8010ad4:	602b      	str	r3, [r5, #0]
 8010ad6:	b016      	add	sp, #88	@ 0x58
 8010ad8:	bd70      	pop	{r4, r5, r6, pc}
 8010ada:	466a      	mov	r2, sp
 8010adc:	f000 f848 	bl	8010b70 <_fstat_r>
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	dbec      	blt.n	8010abe <__swhatbuf_r+0x12>
 8010ae4:	9901      	ldr	r1, [sp, #4]
 8010ae6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010aea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010aee:	4259      	negs	r1, r3
 8010af0:	4159      	adcs	r1, r3
 8010af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010af6:	e7eb      	b.n	8010ad0 <__swhatbuf_r+0x24>

08010af8 <__smakebuf_r>:
 8010af8:	898b      	ldrh	r3, [r1, #12]
 8010afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010afc:	079d      	lsls	r5, r3, #30
 8010afe:	4606      	mov	r6, r0
 8010b00:	460c      	mov	r4, r1
 8010b02:	d507      	bpl.n	8010b14 <__smakebuf_r+0x1c>
 8010b04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	6123      	str	r3, [r4, #16]
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	6163      	str	r3, [r4, #20]
 8010b10:	b003      	add	sp, #12
 8010b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b14:	ab01      	add	r3, sp, #4
 8010b16:	466a      	mov	r2, sp
 8010b18:	f7ff ffc8 	bl	8010aac <__swhatbuf_r>
 8010b1c:	9f00      	ldr	r7, [sp, #0]
 8010b1e:	4605      	mov	r5, r0
 8010b20:	4639      	mov	r1, r7
 8010b22:	4630      	mov	r0, r6
 8010b24:	f7fe fecc 	bl	800f8c0 <_malloc_r>
 8010b28:	b948      	cbnz	r0, 8010b3e <__smakebuf_r+0x46>
 8010b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b2e:	059a      	lsls	r2, r3, #22
 8010b30:	d4ee      	bmi.n	8010b10 <__smakebuf_r+0x18>
 8010b32:	f023 0303 	bic.w	r3, r3, #3
 8010b36:	f043 0302 	orr.w	r3, r3, #2
 8010b3a:	81a3      	strh	r3, [r4, #12]
 8010b3c:	e7e2      	b.n	8010b04 <__smakebuf_r+0xc>
 8010b3e:	89a3      	ldrh	r3, [r4, #12]
 8010b40:	6020      	str	r0, [r4, #0]
 8010b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b46:	81a3      	strh	r3, [r4, #12]
 8010b48:	9b01      	ldr	r3, [sp, #4]
 8010b4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010b4e:	b15b      	cbz	r3, 8010b68 <__smakebuf_r+0x70>
 8010b50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b54:	4630      	mov	r0, r6
 8010b56:	f000 f81d 	bl	8010b94 <_isatty_r>
 8010b5a:	b128      	cbz	r0, 8010b68 <__smakebuf_r+0x70>
 8010b5c:	89a3      	ldrh	r3, [r4, #12]
 8010b5e:	f023 0303 	bic.w	r3, r3, #3
 8010b62:	f043 0301 	orr.w	r3, r3, #1
 8010b66:	81a3      	strh	r3, [r4, #12]
 8010b68:	89a3      	ldrh	r3, [r4, #12]
 8010b6a:	431d      	orrs	r5, r3
 8010b6c:	81a5      	strh	r5, [r4, #12]
 8010b6e:	e7cf      	b.n	8010b10 <__smakebuf_r+0x18>

08010b70 <_fstat_r>:
 8010b70:	b538      	push	{r3, r4, r5, lr}
 8010b72:	4d07      	ldr	r5, [pc, #28]	@ (8010b90 <_fstat_r+0x20>)
 8010b74:	2300      	movs	r3, #0
 8010b76:	4604      	mov	r4, r0
 8010b78:	4608      	mov	r0, r1
 8010b7a:	4611      	mov	r1, r2
 8010b7c:	602b      	str	r3, [r5, #0]
 8010b7e:	f7f4 f9c3 	bl	8004f08 <_fstat>
 8010b82:	1c43      	adds	r3, r0, #1
 8010b84:	d102      	bne.n	8010b8c <_fstat_r+0x1c>
 8010b86:	682b      	ldr	r3, [r5, #0]
 8010b88:	b103      	cbz	r3, 8010b8c <_fstat_r+0x1c>
 8010b8a:	6023      	str	r3, [r4, #0]
 8010b8c:	bd38      	pop	{r3, r4, r5, pc}
 8010b8e:	bf00      	nop
 8010b90:	20005900 	.word	0x20005900

08010b94 <_isatty_r>:
 8010b94:	b538      	push	{r3, r4, r5, lr}
 8010b96:	4d06      	ldr	r5, [pc, #24]	@ (8010bb0 <_isatty_r+0x1c>)
 8010b98:	2300      	movs	r3, #0
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	4608      	mov	r0, r1
 8010b9e:	602b      	str	r3, [r5, #0]
 8010ba0:	f7f4 f9c2 	bl	8004f28 <_isatty>
 8010ba4:	1c43      	adds	r3, r0, #1
 8010ba6:	d102      	bne.n	8010bae <_isatty_r+0x1a>
 8010ba8:	682b      	ldr	r3, [r5, #0]
 8010baa:	b103      	cbz	r3, 8010bae <_isatty_r+0x1a>
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	bd38      	pop	{r3, r4, r5, pc}
 8010bb0:	20005900 	.word	0x20005900

08010bb4 <_init>:
 8010bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bb6:	bf00      	nop
 8010bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bba:	bc08      	pop	{r3}
 8010bbc:	469e      	mov	lr, r3
 8010bbe:	4770      	bx	lr

08010bc0 <_fini>:
 8010bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc2:	bf00      	nop
 8010bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bc6:	bc08      	pop	{r3}
 8010bc8:	469e      	mov	lr, r3
 8010bca:	4770      	bx	lr
