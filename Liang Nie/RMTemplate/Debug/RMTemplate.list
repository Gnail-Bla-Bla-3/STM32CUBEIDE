
RMTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012498  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08012628  08012628  00013628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cd0  08012cd0  00014238  2**0
                  CONTENTS
  4 .ARM          00000008  08012cd0  08012cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cd8  08012cd8  00014238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cd8  08012cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cdc  08012cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08012ce0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014238  2**0
                  CONTENTS
 10 .bss          000055d0  20000238  20000238  00014238  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005808  20005808  00014238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002532e  00000000  00000000  00014268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000541b  00000000  00000000  00039596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f40  00000000  00000000  0003e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001853  00000000  00000000  000408f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a4a  00000000  00000000  0004214b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000269ad  00000000  00000000  00068b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2330  00000000  00000000  0008f542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00171872  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009678  00000000  00000000  001718b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0017af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012610 	.word	0x08012610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	08012610 	.word	0x08012610

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000f42:	e003      	b.n	8000f4c <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000f44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f48:	f000 f80a 	bl	8000f60 <BMI088_delay_us>
    while(ms--)
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	80fa      	strh	r2, [r7, #6]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f6      	bne.n	8000f44 <BMI088_delay_ms+0xc>
    }
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <BMI088_delay_us+0x84>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	22a8      	movs	r2, #168	@ 0xa8
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <BMI088_delay_us+0x84>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <BMI088_delay_us+0x84>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d0f8      	beq.n	8000f94 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d206      	bcs.n	8000fb8 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	e007      	b.n	8000fc8 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad2      	subs	r2, r2, r3
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d200      	bcs.n	8000fd6 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000fd4:	e7de      	b.n	8000f94 <BMI088_delay_us+0x34>
            {
                break;
 8000fd6:	bf00      	nop
            }
        }
    }


}
 8000fd8:	bf00      	nop
 8000fda:	3724      	adds	r7, #36	@ 0x24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <BMI088_ACCEL_NS_L+0x18>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <BMI088_ACCEL_NS_L+0x1c>)
 8000ff2:	8811      	ldrh	r1, [r2, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fb72 	bl	80076e0 <HAL_GPIO_WritePin>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <BMI088_ACCEL_NS_H+0x18>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <BMI088_ACCEL_NS_H+0x1c>)
 8001012:	8811      	ldrh	r1, [r2, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f006 fb62 	bl	80076e0 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000004 	.word	0x20000004

08001028 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <BMI088_GYRO_NS_L+0x18>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <BMI088_GYRO_NS_L+0x1c>)
 8001032:	8811      	ldrh	r1, [r2, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fb52 	bl	80076e0 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000008 	.word	0x20000008
 8001044:	2000000c 	.word	0x2000000c

08001048 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <BMI088_GYRO_NS_H+0x18>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <BMI088_GYRO_NS_H+0x1c>)
 8001052:	8811      	ldrh	r1, [r2, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f006 fb42 	bl	80076e0 <HAL_GPIO_WritePin>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000008 	.word	0x20000008
 8001064:	2000000c 	.word	0x2000000c

08001068 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8001072:	f107 020f 	add.w	r2, r7, #15
 8001076:	1df9      	adds	r1, r7, #7
 8001078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <BMI088_read_write_byte+0x28>)
 8001082:	f008 f827 	bl	80090d4 <HAL_SPI_TransmitReceive>
    return rx_data;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000081c 	.word	0x2000081c

08001094 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80010a2:	f7ff ffa1 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 80010a6:	2080      	movs	r0, #128	@ 0x80
 80010a8:	f7ff ffde 	bl	8001068 <BMI088_read_write_byte>
 80010ac:	2055      	movs	r0, #85	@ 0x55
 80010ae:	f7ff ffdb 	bl	8001068 <BMI088_read_write_byte>
 80010b2:	2055      	movs	r0, #85	@ 0x55
 80010b4:	f7ff ffd8 	bl	8001068 <BMI088_read_write_byte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	71bb      	strb	r3, [r7, #6]
 80010bc:	f7ff ffa4 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010c0:	2096      	movs	r0, #150	@ 0x96
 80010c2:	f7ff ff4d 	bl	8000f60 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80010c6:	f7ff ff8f 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 80010ca:	2080      	movs	r0, #128	@ 0x80
 80010cc:	f7ff ffcc 	bl	8001068 <BMI088_read_write_byte>
 80010d0:	2055      	movs	r0, #85	@ 0x55
 80010d2:	f7ff ffc9 	bl	8001068 <BMI088_read_write_byte>
 80010d6:	2055      	movs	r0, #85	@ 0x55
 80010d8:	f7ff ffc6 	bl	8001068 <BMI088_read_write_byte>
 80010dc:	4603      	mov	r3, r0
 80010de:	71bb      	strb	r3, [r7, #6]
 80010e0:	f7ff ff92 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010e4:	2096      	movs	r0, #150	@ 0x96
 80010e6:	f7ff ff3b 	bl	8000f60 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 80010ea:	f7ff ff7d 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 80010ee:	21b6      	movs	r1, #182	@ 0xb6
 80010f0:	207e      	movs	r0, #126	@ 0x7e
 80010f2:	f000 fa4d 	bl	8001590 <BMI088_write_single_reg>
 80010f6:	f7ff ff87 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80010fa:	2050      	movs	r0, #80	@ 0x50
 80010fc:	f7ff ff1c 	bl	8000f38 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001100:	f7ff ff72 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 8001104:	2080      	movs	r0, #128	@ 0x80
 8001106:	f7ff ffaf 	bl	8001068 <BMI088_read_write_byte>
 800110a:	2055      	movs	r0, #85	@ 0x55
 800110c:	f7ff ffac 	bl	8001068 <BMI088_read_write_byte>
 8001110:	2055      	movs	r0, #85	@ 0x55
 8001112:	f7ff ffa9 	bl	8001068 <BMI088_read_write_byte>
 8001116:	4603      	mov	r3, r0
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	f7ff ff75 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800111e:	2096      	movs	r0, #150	@ 0x96
 8001120:	f7ff ff1e 	bl	8000f60 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001124:	f7ff ff60 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 8001128:	2080      	movs	r0, #128	@ 0x80
 800112a:	f7ff ff9d 	bl	8001068 <BMI088_read_write_byte>
 800112e:	2055      	movs	r0, #85	@ 0x55
 8001130:	f7ff ff9a 	bl	8001068 <BMI088_read_write_byte>
 8001134:	2055      	movs	r0, #85	@ 0x55
 8001136:	f7ff ff97 	bl	8001068 <BMI088_read_write_byte>
 800113a:	4603      	mov	r3, r0
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	f7ff ff63 	bl	8001008 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001142:	2096      	movs	r0, #150	@ 0x96
 8001144:	f7ff ff0c 	bl	8000f60 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	2b1e      	cmp	r3, #30
 800114c:	d001      	beq.n	8001152 <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 800114e:	23ff      	movs	r3, #255	@ 0xff
 8001150:	e052      	b.n	80011f8 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8001152:	2300      	movs	r3, #0
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e04b      	b.n	80011f0 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 8001158:	f7ff ff46 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	4928      	ldr	r1, [pc, #160]	@ (8001200 <BMI088_accel_init+0x16c>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	440b      	add	r3, r1
 8001168:	7818      	ldrb	r0, [r3, #0]
 800116a:	79fa      	ldrb	r2, [r7, #7]
 800116c:	4924      	ldr	r1, [pc, #144]	@ (8001200 <BMI088_accel_init+0x16c>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	440b      	add	r3, r1
 8001176:	3301      	adds	r3, #1
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	f000 fa08 	bl	8001590 <BMI088_write_single_reg>
 8001180:	f7ff ff42 	bl	8001008 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001184:	2096      	movs	r0, #150	@ 0x96
 8001186:	f7ff feeb 	bl	8000f60 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 800118a:	f7ff ff2d 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	491b      	ldr	r1, [pc, #108]	@ (8001200 <BMI088_accel_init+0x16c>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	440b      	add	r3, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff60 	bl	8001068 <BMI088_read_write_byte>
 80011a8:	2055      	movs	r0, #85	@ 0x55
 80011aa:	f7ff ff5d 	bl	8001068 <BMI088_read_write_byte>
 80011ae:	2055      	movs	r0, #85	@ 0x55
 80011b0:	f7ff ff5a 	bl	8001068 <BMI088_read_write_byte>
 80011b4:	4603      	mov	r3, r0
 80011b6:	71bb      	strb	r3, [r7, #6]
 80011b8:	f7ff ff26 	bl	8001008 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011bc:	2096      	movs	r0, #150	@ 0x96
 80011be:	f7ff fecf 	bl	8000f60 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	490e      	ldr	r1, [pc, #56]	@ (8001200 <BMI088_accel_init+0x16c>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	3301      	adds	r3, #1
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	79ba      	ldrb	r2, [r7, #6]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d008      	beq.n	80011ea <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	4909      	ldr	r1, [pc, #36]	@ (8001200 <BMI088_accel_init+0x16c>)
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	3302      	adds	r3, #2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	e006      	b.n	80011f8 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	3301      	adds	r3, #1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d9b0      	bls.n	8001158 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000018 	.word	0x20000018

08001204 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001212:	f7ff ff09 	bl	8001028 <BMI088_GYRO_NS_L>
 8001216:	1dbb      	adds	r3, r7, #6
 8001218:	4619      	mov	r1, r3
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f9cc 	bl	80015b8 <BMI088_read_single_reg>
 8001220:	f7ff ff12 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001224:	2096      	movs	r0, #150	@ 0x96
 8001226:	f7ff fe9b 	bl	8000f60 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800122a:	f7ff fefd 	bl	8001028 <BMI088_GYRO_NS_L>
 800122e:	1dbb      	adds	r3, r7, #6
 8001230:	4619      	mov	r1, r3
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f9c0 	bl	80015b8 <BMI088_read_single_reg>
 8001238:	f7ff ff06 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800123c:	2096      	movs	r0, #150	@ 0x96
 800123e:	f7ff fe8f 	bl	8000f60 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 8001242:	f7ff fef1 	bl	8001028 <BMI088_GYRO_NS_L>
 8001246:	21b6      	movs	r1, #182	@ 0xb6
 8001248:	2014      	movs	r0, #20
 800124a:	f000 f9a1 	bl	8001590 <BMI088_write_single_reg>
 800124e:	f7ff fefb 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8001252:	2050      	movs	r0, #80	@ 0x50
 8001254:	f7ff fe70 	bl	8000f38 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001258:	f7ff fee6 	bl	8001028 <BMI088_GYRO_NS_L>
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	4619      	mov	r1, r3
 8001260:	2000      	movs	r0, #0
 8001262:	f000 f9a9 	bl	80015b8 <BMI088_read_single_reg>
 8001266:	f7ff feef 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800126a:	2096      	movs	r0, #150	@ 0x96
 800126c:	f7ff fe78 	bl	8000f60 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001270:	f7ff feda 	bl	8001028 <BMI088_GYRO_NS_L>
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	4619      	mov	r1, r3
 8001278:	2000      	movs	r0, #0
 800127a:	f000 f99d 	bl	80015b8 <BMI088_read_single_reg>
 800127e:	f7ff fee3 	bl	8001048 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001282:	2096      	movs	r0, #150	@ 0x96
 8001284:	f7ff fe6c 	bl	8000f60 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d001      	beq.n	8001292 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800128e:	23ff      	movs	r3, #255	@ 0xff
 8001290:	e049      	b.n	8001326 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	e042      	b.n	800131e <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001298:	f7ff fec6 	bl	8001028 <BMI088_GYRO_NS_L>
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	4924      	ldr	r1, [pc, #144]	@ (8001330 <BMI088_gyro_init+0x12c>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	7818      	ldrb	r0, [r3, #0]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	4920      	ldr	r1, [pc, #128]	@ (8001330 <BMI088_gyro_init+0x12c>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	3301      	adds	r3, #1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	f000 f968 	bl	8001590 <BMI088_write_single_reg>
 80012c0:	f7ff fec2 	bl	8001048 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80012c4:	2096      	movs	r0, #150	@ 0x96
 80012c6:	f7ff fe4b 	bl	8000f60 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 80012ca:	f7ff fead 	bl	8001028 <BMI088_GYRO_NS_L>
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	4917      	ldr	r1, [pc, #92]	@ (8001330 <BMI088_gyro_init+0x12c>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	440b      	add	r3, r1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	1dba      	adds	r2, r7, #6
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f969 	bl	80015b8 <BMI088_read_single_reg>
 80012e6:	f7ff feaf 	bl	8001048 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80012ea:	2096      	movs	r0, #150	@ 0x96
 80012ec:	f7ff fe38 	bl	8000f60 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	490f      	ldr	r1, [pc, #60]	@ (8001330 <BMI088_gyro_init+0x12c>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	3301      	adds	r3, #1
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	429a      	cmp	r2, r3
 8001304:	d008      	beq.n	8001318 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001306:	79fa      	ldrb	r2, [r7, #7]
 8001308:	4909      	ldr	r1, [pc, #36]	@ (8001330 <BMI088_gyro_init+0x12c>)
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	440b      	add	r3, r1
 8001312:	3302      	adds	r3, #2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	e006      	b.n	8001326 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	3301      	adds	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d9b9      	bls.n	8001298 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000002c 	.word	0x2000002c

08001334 <IMU_get_gyro>:

float IMU_get_gyro(axis_t axis) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	BMI088_read(gyro, accel, &temp);
 800133e:	4a10      	ldr	r2, [pc, #64]	@ (8001380 <IMU_get_gyro+0x4c>)
 8001340:	4910      	ldr	r1, [pc, #64]	@ (8001384 <IMU_get_gyro+0x50>)
 8001342:	4811      	ldr	r0, [pc, #68]	@ (8001388 <IMU_get_gyro+0x54>)
 8001344:	f000 f836 	bl	80013b4 <BMI088_read>
	if(axis == x){
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <IMU_get_gyro+0x20>
		return gyro[0];
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <IMU_get_gyro+0x54>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	e00d      	b.n	8001370 <IMU_get_gyro+0x3c>
	} else if (axis == y) {
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <IMU_get_gyro+0x2c>
		return gyro[1];
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <IMU_get_gyro+0x54>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	e007      	b.n	8001370 <IMU_get_gyro+0x3c>
	} else if (axis == z) {
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d102      	bne.n	800136c <IMU_get_gyro+0x38>
		return gyro[2];
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <IMU_get_gyro+0x54>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	e001      	b.n	8001370 <IMU_get_gyro+0x3c>
	} else {
		return 0;
 800136c:	f04f 0300 	mov.w	r3, #0
	}
}
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000026c 	.word	0x2000026c
 8001384:	20000260 	.word	0x20000260
 8001388:	20000254 	.word	0x20000254

0800138c <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8001390:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <IMU_get_temp+0x1c>)
 8001392:	4906      	ldr	r1, [pc, #24]	@ (80013ac <IMU_get_temp+0x20>)
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <IMU_get_temp+0x24>)
 8001396:	f000 f80d 	bl	80013b4 <BMI088_read>
	return temp;
 800139a:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <IMU_get_temp+0x1c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
}
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000026c 	.word	0x2000026c
 80013ac:	20000260 	.word	0x20000260
 80013b0:	20000254 	.word	0x20000254

080013b4 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80013c0:	4a70      	ldr	r2, [pc, #448]	@ (8001584 <BMI088_read+0x1d0>)
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ca:	6018      	str	r0, [r3, #0]
 80013cc:	3304      	adds	r3, #4
 80013ce:	8019      	strh	r1, [r3, #0]
 80013d0:	3302      	adds	r3, #2
 80013d2:	0c0a      	lsrs	r2, r1, #16
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80013da:	f7ff fe05 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 80013de:	2092      	movs	r0, #146	@ 0x92
 80013e0:	f7ff fe42 	bl	8001068 <BMI088_read_write_byte>
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2206      	movs	r2, #6
 80013ea:	4619      	mov	r1, r3
 80013ec:	2012      	movs	r0, #18
 80013ee:	f000 f8fb 	bl	80015e8 <BMI088_read_muli_reg>
 80013f2:	f7ff fe09 	bl	8001008 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001404:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001410:	4b5d      	ldr	r3, [pc, #372]	@ (8001588 <BMI088_read+0x1d4>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	7dbb      	ldrb	r3, [r7, #22]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800142e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143a:	4b53      	ldr	r3, [pc, #332]	@ (8001588 <BMI088_read+0x1d4>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3304      	adds	r3, #4
 8001444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001448:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800144c:	7e7b      	ldrb	r3, [r7, #25]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	7e3b      	ldrb	r3, [r7, #24]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800145a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001466:	4b48      	ldr	r3, [pc, #288]	@ (8001588 <BMI088_read+0x1d4>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	3308      	adds	r3, #8
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8001478:	f7ff fdd6 	bl	8001028 <BMI088_GYRO_NS_L>
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2208      	movs	r2, #8
 8001482:	4619      	mov	r1, r3
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f8af 	bl	80015e8 <BMI088_read_muli_reg>
 800148a:	f7ff fddd 	bl	8001048 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 800148e:	7d3b      	ldrb	r3, [r7, #20]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d140      	bne.n	8001516 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	7dbb      	ldrb	r3, [r7, #22]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80014a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ae:	4b37      	ldr	r3, [pc, #220]	@ (800158c <BMI088_read+0x1d8>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80014be:	7e7b      	ldrb	r3, [r7, #25]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	7e3b      	ldrb	r3, [r7, #24]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80014cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d8:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <BMI088_read+0x1d8>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e6:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80014ea:	7efb      	ldrb	r3, [r7, #27]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	7ebb      	ldrb	r3, [r7, #26]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80014f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <BMI088_read+0x1d8>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3308      	adds	r3, #8
 800150e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001512:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001516:	f7ff fd67 	bl	8000fe8 <BMI088_ACCEL_NS_L>
 800151a:	20a2      	movs	r0, #162	@ 0xa2
 800151c:	f7ff fda4 	bl	8001068 <BMI088_read_write_byte>
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2202      	movs	r2, #2
 8001526:	4619      	mov	r1, r3
 8001528:	2022      	movs	r0, #34	@ 0x22
 800152a:	f000 f85d 	bl	80015e8 <BMI088_read_muli_reg>
 800152e:	f7ff fd6b 	bl	8001008 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001532:	7d3b      	ldrb	r3, [r7, #20]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	b21a      	sxth	r2, r3
 8001538:	7d7b      	ldrb	r3, [r7, #21]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	b2db      	uxtb	r3, r3
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001544:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154c:	db04      	blt.n	8001558 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001554:	b29b      	uxth	r3, r3
 8001556:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001558:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001564:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156c:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	edc3 7a00 	vstr	s15, [r3]
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	08012628 	.word	0x08012628
 8001588:	20000010 	.word	0x20000010
 800158c:	20000014 	.word	0x20000014

08001590 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	460a      	mov	r2, r1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4613      	mov	r3, r2
 800159e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fd60 	bl	8001068 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd5c 	bl	8001068 <BMI088_read_write_byte>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fd4b 	bl	8001068 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 80015d2:	2055      	movs	r0, #85	@ 0x55
 80015d4:	f7ff fd48 	bl	8001068 <BMI088_read_write_byte>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	701a      	strb	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd31 	bl	8001068 <BMI088_read_write_byte>

    while (len != 0)
 8001606:	e00c      	b.n	8001622 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001608:	2055      	movs	r0, #85	@ 0x55
 800160a:	f7ff fd2d 	bl	8001068 <BMI088_read_write_byte>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	701a      	strb	r2, [r3, #0]
        buf++;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	603b      	str	r3, [r7, #0]
        len--;
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	3b01      	subs	r3, #1
 8001620:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ef      	bne.n	8001608 <BMI088_read_muli_reg+0x20>
    }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	@ 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	f107 0214 	add.w	r2, r7, #20
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f004 fe33 	bl	80062b2 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8001652:	f080 80d9 	bcs.w	8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 8001656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800165a:	d807      	bhi.n	800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 800165c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001660:	d066      	beq.n	8001730 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8001662:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8001666:	f000 80a4 	beq.w	80017b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 800166a:	e0cd      	b.n	8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3b01      	subs	r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b6a      	ldr	r3, [pc, #424]	@ (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001676:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 8001678:	4b69      	ldr	r3, [pc, #420]	@ (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	4a69      	ldr	r2, [pc, #420]	@ (8001824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	4b64      	ldr	r3, [pc, #400]	@ (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	b210      	sxth	r0, r2
 8001694:	4a63      	ldr	r2, [pc, #396]	@ (8001824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001696:	460b      	mov	r3, r1
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	3308      	adds	r3, #8
 80016a2:	4602      	mov	r2, r0
 80016a4:	801a      	strh	r2, [r3, #0]
 80016a6:	7b3b      	ldrb	r3, [r7, #12]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	7b7b      	ldrb	r3, [r7, #13]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	b290      	uxth	r0, r2
 80016bc:	4a59      	ldr	r2, [pc, #356]	@ (8001824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80016be:	460b      	mov	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	4602      	mov	r2, r0
 80016ca:	801a      	strh	r2, [r3, #0]
 80016cc:	7bbb      	ldrb	r3, [r7, #14]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4952      	ldr	r1, [pc, #328]	@ (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80016d8:	7809      	ldrb	r1, [r1, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	b218      	sxth	r0, r3
 80016de:	4a51      	ldr	r2, [pc, #324]	@ (8001824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80016e0:	460b      	mov	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	3302      	adds	r3, #2
 80016ec:	4602      	mov	r2, r0
 80016ee:	801a      	strh	r2, [r3, #0]
 80016f0:	7c3b      	ldrb	r3, [r7, #16]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	7c7b      	ldrb	r3, [r7, #17]
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4949      	ldr	r1, [pc, #292]	@ (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80016fc:	7809      	ldrb	r1, [r1, #0]
 80016fe:	4313      	orrs	r3, r2
 8001700:	b218      	sxth	r0, r3
 8001702:	4a48      	ldr	r2, [pc, #288]	@ (8001824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001704:	460b      	mov	r3, r1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	3304      	adds	r3, #4
 8001710:	4602      	mov	r2, r0
 8001712:	801a      	strh	r2, [r3, #0]
 8001714:	4b42      	ldr	r3, [pc, #264]	@ (8001820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	7cb8      	ldrb	r0, [r7, #18]
 800171c:	4a41      	ldr	r2, [pc, #260]	@ (8001824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800171e:	460b      	mov	r3, r1
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	3306      	adds	r3, #6
 800172a:	4602      	mov	r2, r0
 800172c:	701a      	strb	r2, [r3, #0]
            break;
 800172e:	e072      	b.n	8001816 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8001730:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	f240 1201 	movw	r2, #257	@ 0x101
 8001738:	4293      	cmp	r3, r2
 800173a:	d067      	beq.n	800180c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 800173c:	7b3b      	ldrb	r3, [r7, #12]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	7b7b      	ldrb	r3, [r7, #13]
 8001744:	b21b      	sxth	r3, r3
 8001746:	4313      	orrs	r3, r2
 8001748:	b21a      	sxth	r2, r3
 800174a:	4b38      	ldr	r3, [pc, #224]	@ (800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800174c:	801a      	strh	r2, [r3, #0]
 800174e:	7bbb      	ldrb	r3, [r7, #14]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	b21b      	sxth	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	b21a      	sxth	r2, r3
 800175c:	4b33      	ldr	r3, [pc, #204]	@ (800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800175e:	805a      	strh	r2, [r3, #2]
 8001760:	7c3b      	ldrb	r3, [r7, #16]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	b21a      	sxth	r2, r3
 8001766:	7c7b      	ldrb	r3, [r7, #17]
 8001768:	b21b      	sxth	r3, r3
 800176a:	4313      	orrs	r3, r2
 800176c:	b21a      	sxth	r2, r3
 800176e:	4b2f      	ldr	r3, [pc, #188]	@ (800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001770:	809a      	strh	r2, [r3, #4]
 8001772:	7cbb      	ldrb	r3, [r7, #18]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b21a      	sxth	r2, r3
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001782:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 8001784:	4b29      	ldr	r3, [pc, #164]	@ (800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	f5b3 6f53 	cmp.w	r3, #3376	@ 0xd30
 800178e:	db04      	blt.n	800179a <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 8001790:	4b26      	ldr	r3, [pc, #152]	@ (800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001792:	f44f 6253 	mov.w	r2, #3376	@ 0xd30
 8001796:	801a      	strh	r2, [r3, #0]
        		break;
 8001798:	e03a      	b.n	8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 800179a:	4b24      	ldr	r3, [pc, #144]	@ (800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	f640 0254 	movw	r2, #2132	@ 0x854
 80017a4:	4293      	cmp	r3, r2
 80017a6:	dc33      	bgt.n	8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 80017a8:	4b20      	ldr	r3, [pc, #128]	@ (800182c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80017aa:	f640 0254 	movw	r2, #2132	@ 0x854
 80017ae:	801a      	strh	r2, [r3, #0]
        		break;
 80017b0:	e02e      	b.n	8001810 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 80017b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	f240 1211 	movw	r2, #273	@ 0x111
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d02a      	beq.n	8001814 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 80017be:	7b3b      	ldrb	r3, [r7, #12]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80017ce:	801a      	strh	r2, [r3, #0]
 80017d0:	7bbb      	ldrb	r3, [r7, #14]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21a      	sxth	r2, r3
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80017e0:	805a      	strh	r2, [r3, #2]
 80017e2:	7c3b      	ldrb	r3, [r7, #16]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	7c7b      	ldrb	r3, [r7, #17]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80017f2:	809a      	strh	r2, [r3, #4]
 80017f4:	7cbb      	ldrb	r3, [r7, #18]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	7cfb      	ldrb	r3, [r7, #19]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b21a      	sxth	r2, r3
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001804:	80da      	strh	r2, [r3, #6]
        	    break;
 8001806:	e006      	b.n	8001816 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 8001808:	bf00      	nop
 800180a:	e004      	b.n	8001816 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 800180c:	bf00      	nop
 800180e:	e002      	b.n	8001816 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001810:	bf00      	nop
 8001812:	e000      	b.n	8001816 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001814:	bf00      	nop
        }
    }
}
 8001816:	bf00      	nop
 8001818:	3730      	adds	r7, #48	@ 0x30
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200003d8 	.word	0x200003d8
 8001824:	20000288 	.word	0x20000288
 8001828:	20000058 	.word	0x20000058
 800182c:	200002f8 	.word	0x200002f8
 8001830:	20000300 	.word	0x20000300

08001834 <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	4604      	mov	r4, r0
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4623      	mov	r3, r4
 8001844:	80fb      	strh	r3, [r7, #6]
 8001846:	4603      	mov	r3, r0
 8001848:	80bb      	strh	r3, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	807b      	strh	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <CAN2_cmd_motors+0xa4>)
 8001856:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <CAN2_cmd_motors+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <CAN2_cmd_motors+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <CAN2_cmd_motors+0xa4>)
 8001866:	2208      	movs	r2, #8
 8001868:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 800186a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800186e:	121b      	asrs	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 8001876:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 800187e:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 8001880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001884:	121b      	asrs	r3, r3, #8
 8001886:	b21b      	sxth	r3, r3
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 800188c:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 8001894:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 8001896:	f9b7 3000 	ldrsh.w	r3, [r7]
 800189a:	121b      	asrs	r3, r3, #8
 800189c:	b21b      	sxth	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 80018a2:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 80018a4:	883b      	ldrh	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 80018aa:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 80018ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80018b0:	121b      	asrs	r3, r3, #8
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 80018b8:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 80018ba:	8c3b      	ldrh	r3, [r7, #32]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 80018c0:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <CAN2_cmd_motors+0xa8>)
 80018c8:	4903      	ldr	r1, [pc, #12]	@ (80018d8 <CAN2_cmd_motors+0xa4>)
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <CAN2_cmd_motors+0xac>)
 80018cc:	f004 fc16 	bl	80060fc <HAL_CAN_AddTxMessage>
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd90      	pop	{r4, r7, pc}
 80018d8:	200003b8 	.word	0x200003b8
 80018dc:	200003d0 	.word	0x200003d0
 80018e0:	200007a0 	.word	0x200007a0

080018e4 <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	4603      	mov	r3, r0
 80018ec:	460a      	mov	r2, r1
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	491c      	ldr	r1, [pc, #112]	@ (800196c <set_M3508_current+0x88>)
 80018fc:	88ba      	ldrh	r2, [r7, #4]
 80018fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b04      	cmp	r3, #4
 8001908:	dc02      	bgt.n	8001910 <set_M3508_current+0x2c>
 800190a:	2b00      	cmp	r3, #0
 800190c:	dc04      	bgt.n	8001918 <set_M3508_current+0x34>
		case (7):
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
		}
		default: {
	        break;
 800190e:	e027      	b.n	8001960 <set_M3508_current+0x7c>
 8001910:	3b05      	subs	r3, #5
	switch(motorID) {
 8001912:	2b03      	cmp	r3, #3
 8001914:	d824      	bhi.n	8001960 <set_M3508_current+0x7c>
 8001916:	e011      	b.n	800193c <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <set_M3508_current+0x88>)
 800191a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800191e:	4b13      	ldr	r3, [pc, #76]	@ (800196c <set_M3508_current+0x88>)
 8001920:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <set_M3508_current+0x88>)
 8001926:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <set_M3508_current+0x88>)
 800192c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	4603      	mov	r3, r0
 8001934:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001938:	f7ff ff7c 	bl	8001834 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <set_M3508_current+0x88>)
 800193e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <set_M3508_current+0x88>)
 8001944:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <set_M3508_current+0x88>)
 800194a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <set_M3508_current+0x88>)
 8001950:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	4603      	mov	r3, r0
 8001958:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800195c:	f7ff ff6a 	bl	8001834 <CAN2_cmd_motors>
	        break;
 8001960:	bf00      	nop
	    }
	}
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000270 	.word	0x20000270

08001970 <set_GM6020_voltage>:
/**
  * @brief          similar to the above function, but specifically for the GM6020's voltage control mode
  * @param[in]      motor ID (5~11) and its target voltage (-25000 ~ 25000)
  * @retval         none
  */
void set_GM6020_voltage(int8_t motorID, int16_t setVoltage) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af02      	add	r7, sp, #8
 8001976:	4603      	mov	r3, r0
 8001978:	460a      	mov	r2, r1
 800197a:	71fb      	strb	r3, [r7, #7]
 800197c:	4613      	mov	r3, r2
 800197e:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setVoltage;      // -1 for 0 indexing and -4 for group 1, which cannot contain GM6020s
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	3b01      	subs	r3, #1
 8001986:	491a      	ldr	r1, [pc, #104]	@ (80019f0 <set_GM6020_voltage+0x80>)
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b08      	cmp	r3, #8
 8001994:	dc02      	bgt.n	800199c <set_GM6020_voltage+0x2c>
 8001996:	2b05      	cmp	r3, #5
 8001998:	da04      	bge.n	80019a4 <set_GM6020_voltage+0x34>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
		}
		default: {
	        break;
 800199a:	e024      	b.n	80019e6 <set_GM6020_voltage+0x76>
 800199c:	3b09      	subs	r3, #9
	switch(motorID) {
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d821      	bhi.n	80019e6 <set_GM6020_voltage+0x76>
 80019a2:	e011      	b.n	80019c8 <set_GM6020_voltage+0x58>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <set_GM6020_voltage+0x80>)
 80019a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <set_GM6020_voltage+0x80>)
 80019ac:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <set_GM6020_voltage+0x80>)
 80019b2:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <set_GM6020_voltage+0x80>)
 80019b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4603      	mov	r3, r0
 80019c0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80019c4:	f7ff ff36 	bl	8001834 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <set_GM6020_voltage+0x80>)
 80019ca:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <set_GM6020_voltage+0x80>)
 80019d0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <set_GM6020_voltage+0x80>)
 80019d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019da:	2000      	movs	r0, #0
 80019dc:	9000      	str	r0, [sp, #0]
 80019de:	f240 20ff 	movw	r0, #767	@ 0x2ff
 80019e2:	f7ff ff27 	bl	8001834 <CAN2_cmd_motors>
	        break;
 80019e6:	bf00      	nop
	    }
	}
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000270 	.word	0x20000270

080019f4 <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80019f4:	b490      	push	{r4, r7}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	eef0 6a40 	vmov.f32	s13, s0
 8001a02:	eeb0 7a60 	vmov.f32	s14, s1
 8001a06:	eef0 7a41 	vmov.f32	s15, s2
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	81bb      	strh	r3, [r7, #12]
 8001a10:	edc7 6a00 	vstr	s13, [r7]
 8001a14:	ed87 7a01 	vstr	s14, [r7, #4]
 8001a18:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001a28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b58 <calc_current2RPM_PID+0x164>)
 8001a2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a32:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001a36:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a3a:	4c48      	ldr	r4, [pc, #288]	@ (8001b5c <calc_current2RPM_PID+0x168>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4423      	add	r3, r4
 8001a46:	3302      	adds	r3, #2
 8001a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4c:	1ac2      	subs	r2, r0, r3
 8001a4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a52:	440a      	add	r2, r1
 8001a54:	4940      	ldr	r1, [pc, #256]	@ (8001b58 <calc_current2RPM_PID+0x164>)
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	4a40      	ldr	r2, [pc, #256]	@ (8001b60 <calc_current2RPM_PID+0x16c>)
 8001a60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a64:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a68:	483c      	ldr	r0, [pc, #240]	@ (8001b5c <calc_current2RPM_PID+0x168>)
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4403      	add	r3, r0
 8001a74:	3302      	adds	r3, #2
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a80:	1a8a      	subs	r2, r1, r2
 8001a82:	4938      	ldr	r1, [pc, #224]	@ (8001b64 <calc_current2RPM_PID+0x170>)
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001a88:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a8c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a90:	4832      	ldr	r0, [pc, #200]	@ (8001b5c <calc_current2RPM_PID+0x168>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4403      	add	r3, r0
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001aa8:	1a8a      	subs	r2, r1, r2
 8001aaa:	492f      	ldr	r1, [pc, #188]	@ (8001b68 <calc_current2RPM_PID+0x174>)
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001ab0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001ab4:	4929      	ldr	r1, [pc, #164]	@ (8001b5c <calc_current2RPM_PID+0x168>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	440b      	add	r3, r1
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <calc_current2RPM_PID+0x16c>)
 8001ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001ad2:	ed97 7a00 	vldr	s14, [r7]
 8001ad6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ada:	4a23      	ldr	r2, [pc, #140]	@ (8001b68 <calc_current2RPM_PID+0x174>)
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aec:	edd7 6a01 	vldr	s13, [r7, #4]
 8001af0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001af4:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <calc_current2RPM_PID+0x164>)
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b12:	4a14      	ldr	r2, [pc, #80]	@ (8001b64 <calc_current2RPM_PID+0x170>)
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2c:	ee17 3a90 	vmov	r3, s15
 8001b30:	617b      	str	r3, [r7, #20]
	//apply power limit
	//if (ID == 6) {sendB2bData(CAN_b2b_B_gyro_ID, errRPM[5], 0, 0, 0);}
	if (return_current_val > 16384) {return_current_val = 16384;}
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b38:	dd02      	ble.n	8001b40 <calc_current2RPM_PID+0x14c>
 8001b3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b3e:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001b46:	da01      	bge.n	8001b4c <calc_current2RPM_PID+0x158>
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <calc_current2RPM_PID+0x178>)
 8001b4a:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001b4c:	697b      	ldr	r3, [r7, #20]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc90      	pop	{r4, r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000360 	.word	0x20000360
 8001b5c:	20000288 	.word	0x20000288
 8001b60:	20000308 	.word	0x20000308
 8001b64:	20000334 	.word	0x20000334
 8001b68:	2000038c 	.word	0x2000038c
 8001b6c:	ffffc000 	.word	0xffffc000

08001b70 <calc_voltage2RPM_PID>:
	if (return_current_val > 10000) {return_current_val = 10000;}
	if (return_current_val < -10000) {return_current_val = -10000;}
	return return_current_val;
}

int32_t calc_voltage2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001b70:	b490      	push	{r4, r7}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	eef0 6a40 	vmov.f32	s13, s0
 8001b7e:	eeb0 7a60 	vmov.f32	s14, s1
 8001b82:	eef0 7a41 	vmov.f32	s15, s2
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	81bb      	strh	r3, [r7, #12]
 8001b8c:	edc7 6a00 	vstr	s13, [r7]
 8001b90:	ed87 7a01 	vstr	s14, [r7, #4]
 8001b94:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001ba4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ba8:	4a53      	ldr	r2, [pc, #332]	@ (8001cf8 <calc_voltage2RPM_PID+0x188>)
 8001baa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001bae:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001bb2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001bb6:	4c51      	ldr	r4, [pc, #324]	@ (8001cfc <calc_voltage2RPM_PID+0x18c>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4423      	add	r3, r4
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc8:	1ac2      	subs	r2, r0, r3
 8001bca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bce:	440a      	add	r2, r1
 8001bd0:	4949      	ldr	r1, [pc, #292]	@ (8001cf8 <calc_voltage2RPM_PID+0x188>)
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001bd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bda:	4a49      	ldr	r2, [pc, #292]	@ (8001d00 <calc_voltage2RPM_PID+0x190>)
 8001bdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001be0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001be4:	4845      	ldr	r0, [pc, #276]	@ (8001cfc <calc_voltage2RPM_PID+0x18c>)
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4403      	add	r3, r0
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bfc:	1a8a      	subs	r2, r1, r2
 8001bfe:	4941      	ldr	r1, [pc, #260]	@ (8001d04 <calc_voltage2RPM_PID+0x194>)
 8001c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001c04:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001c08:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001c0c:	483b      	ldr	r0, [pc, #236]	@ (8001cfc <calc_voltage2RPM_PID+0x18c>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4403      	add	r3, r0
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c24:	1a8a      	subs	r2, r1, r2
 8001c26:	4938      	ldr	r1, [pc, #224]	@ (8001d08 <calc_voltage2RPM_PID+0x198>)
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// usart_printf("%d %d\r\n", getMotorRPM(5), 0);
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001c2c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001c30:	4932      	ldr	r1, [pc, #200]	@ (8001cfc <calc_voltage2RPM_PID+0x18c>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4a2d      	ldr	r2, [pc, #180]	@ (8001d00 <calc_voltage2RPM_PID+0x190>)
 8001c4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (iRPM[ID] >= 3400) {iRPM[ID] = 2600;}
 8001c4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c52:	4a29      	ldr	r2, [pc, #164]	@ (8001cf8 <calc_voltage2RPM_PID+0x188>)
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	dd06      	ble.n	8001c6e <calc_voltage2RPM_PID+0xfe>
 8001c60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c64:	4a24      	ldr	r2, [pc, #144]	@ (8001cf8 <calc_voltage2RPM_PID+0x188>)
 8001c66:	f640 2128 	movw	r1, #2600	@ 0xa28
 8001c6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001c6e:	ed97 7a00 	vldr	s14, [r7]
 8001c72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c76:	4a24      	ldr	r2, [pc, #144]	@ (8001d08 <calc_voltage2RPM_PID+0x198>)
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c88:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c90:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <calc_voltage2RPM_PID+0x188>)
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca6:	edd7 6a02 	vldr	s13, [r7, #8]
 8001caa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001cae:	4a15      	ldr	r2, [pc, #84]	@ (8001d04 <calc_voltage2RPM_PID+0x194>)
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc8:	ee17 3a90 	vmov	r3, s15
 8001ccc:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	dd02      	ble.n	8001cde <calc_voltage2RPM_PID+0x16e>
 8001cd8:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001cdc:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <calc_voltage2RPM_PID+0x19c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	da01      	bge.n	8001cea <calc_voltage2RPM_PID+0x17a>
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <calc_voltage2RPM_PID+0x19c>)
 8001ce8:	617b      	str	r3, [r7, #20]

	return return_voltage_val;
 8001cea:	697b      	ldr	r3, [r7, #20]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc90      	pop	{r4, r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000360 	.word	0x20000360
 8001cfc:	20000288 	.word	0x20000288
 8001d00:	20000308 	.word	0x20000308
 8001d04:	20000334 	.word	0x20000334
 8001d08:	2000038c 	.word	0x2000038c
 8001d0c:	ffff9e58 	.word	0xffff9e58

08001d10 <setM3508RPM>:
	return return_voltage_val;
}

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	460a      	mov	r2, r1
 8001d1a:	eef0 6a40 	vmov.f32	s13, s0
 8001d1e:	eeb0 7a60 	vmov.f32	s14, s1
 8001d22:	eef0 7a41 	vmov.f32	s15, s2
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	81bb      	strh	r3, [r7, #12]
 8001d2c:	edc7 6a00 	vstr	s13, [r7]
 8001d30:	ed87 7a01 	vstr	s14, [r7, #4]
 8001d34:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 8001d38:	edd7 6a00 	vldr	s13, [r7]
 8001d3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4c:	eeb0 0a66 	vmov.f32	s0, s13
 8001d50:	eef0 0a47 	vmov.f32	s1, s14
 8001d54:	eeb0 1a67 	vmov.f32	s2, s15
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fe4a 	bl	80019f4 <calc_current2RPM_PID>
 8001d60:	4603      	mov	r3, r0
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fdba 	bl	80018e4 <set_M3508_current>
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <setGM6020voltageRPM>:

void setGM6020currentRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
}

void setGM6020voltageRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460a      	mov	r2, r1
 8001d82:	eef0 6a40 	vmov.f32	s13, s0
 8001d86:	eeb0 7a60 	vmov.f32	s14, s1
 8001d8a:	eef0 7a41 	vmov.f32	s15, s2
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	4613      	mov	r3, r2
 8001d92:	81bb      	strh	r3, [r7, #12]
 8001d94:	edc7 6a00 	vstr	s13, [r7]
 8001d98:	ed87 7a01 	vstr	s14, [r7, #4]
 8001d9c:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2RPM_PID(motorID, RPMtarget, preset));
 8001da0:	edd7 6a00 	vldr	s13, [r7]
 8001da4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001da8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db4:	eeb0 0a66 	vmov.f32	s0, s13
 8001db8:	eef0 0a47 	vmov.f32	s1, s14
 8001dbc:	eeb0 1a67 	vmov.f32	s2, s15
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fed4 	bl	8001b70 <calc_voltage2RPM_PID>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fdcc 	bl	8001970 <set_GM6020_voltage>
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <getMotorPosition>:

void setM2006RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_M3508_current(motorID, calc_M2006_current2RPM_PID(motorID, RPMtarget, preset));
}

uint16_t getMotorPosition(int8_t motorID) {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].motor_position;
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	1e5a      	subs	r2, r3, #1
 8001df0:	4906      	ldr	r1, [pc, #24]	@ (8001e0c <getMotorPosition+0x2c>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	440b      	add	r3, r1
 8001dfc:	881b      	ldrh	r3, [r3, #0]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000288 	.word	0x20000288

08001e10 <usart_Init>:
referee_warning_t referee_warning;
dart_info_t dart_info;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001e14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e18:	4905      	ldr	r1, [pc, #20]	@ (8001e30 <usart_Init+0x20>)
 8001e1a:	4806      	ldr	r0, [pc, #24]	@ (8001e34 <usart_Init+0x24>)
 8001e1c:	f008 fbca 	bl	800a5b4 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001e20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e24:	4904      	ldr	r1, [pc, #16]	@ (8001e38 <usart_Init+0x28>)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <usart_Init+0x2c>)
 8001e28:	f008 fbc4 	bl	800a5b4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200003dc 	.word	0x200003dc
 8001e34:	20000994 	.word	0x20000994
 8001e38:	200004dc 	.word	0x200004dc
 8001e3c:	20000a1c 	.word	0x20000a1c

08001e40 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8001e40:	b40f      	push	{r0, r1, r2, r3}
 8001e42:	b580      	push	{r7, lr}
 8001e44:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <usart_printf+0x3c>)
 8001e4c:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <usart_printf+0x3c>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	480a      	ldr	r0, [pc, #40]	@ (8001e80 <usart_printf+0x40>)
 8001e56:	f00d fa2b 	bl	800f2b0 <vsiprintf>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <usart_printf+0x44>)
 8001e60:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <usart_printf+0x44>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4905      	ldr	r1, [pc, #20]	@ (8001e80 <usart_printf+0x40>)
 8001e6a:	4807      	ldr	r0, [pc, #28]	@ (8001e88 <usart_printf+0x48>)
 8001e6c:	f008 fb24 	bl	800a4b8 <HAL_UART_Transmit_DMA>
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e78:	b004      	add	sp, #16
 8001e7a:	4770      	bx	lr
 8001e7c:	20000610 	.word	0x20000610
 8001e80:	20000614 	.word	0x20000614
 8001e84:	20000714 	.word	0x20000714
 8001e88:	20000994 	.word	0x20000994

08001e8c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e90:	b09f      	sub	sp, #124	@ 0x7c
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8001e96:	460b      	mov	r3, r1
 8001e98:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	if (huart == &huart6) {
 8001e9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001e9e:	4b81      	ldr	r3, [pc, #516]	@ (80020a4 <HAL_UARTEx_RxEventCallback+0x218>)
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 81c9 	bne.w	8002238 <HAL_UARTEx_RxEventCallback+0x3ac>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001ea6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eaa:	497f      	ldr	r1, [pc, #508]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001eac:	487d      	ldr	r0, [pc, #500]	@ (80020a4 <HAL_UARTEx_RxEventCallback+0x218>)
 8001eae:	f008 fb81 	bl	800a5b4 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 8001eb2:	4b7d      	ldr	r3, [pc, #500]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001eb4:	795b      	ldrb	r3, [r3, #5]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	4b7b      	ldr	r3, [pc, #492]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001ebc:	799b      	ldrb	r3, [r3, #6]
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 8001ec8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8001ecc:	f240 2302 	movw	r3, #514	@ 0x202
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f000 8153 	beq.w	800217c <HAL_UARTEx_RxEventCallback+0x2f0>
 8001ed6:	f240 2302 	movw	r3, #514	@ 0x202
 8001eda:	429a      	cmp	r2, r3
 8001edc:	f300 81ab 	bgt.w	8002236 <HAL_UARTEx_RxEventCallback+0x3aa>
 8001ee0:	f240 2301 	movw	r3, #513	@ 0x201
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f000 80e7 	beq.w	80020b8 <HAL_UARTEx_RxEventCallback+0x22c>
 8001eea:	f240 2301 	movw	r3, #513	@ 0x201
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	f300 81a1 	bgt.w	8002236 <HAL_UARTEx_RxEventCallback+0x3aa>
 8001ef4:	f5b2 7f83 	cmp.w	r2, #262	@ 0x106
 8001ef8:	f280 819d 	bge.w	8002236 <HAL_UARTEx_RxEventCallback+0x3aa>
 8001efc:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001f00:	f280 80da 	bge.w	80020b8 <HAL_UARTEx_RxEventCallback+0x22c>
 8001f04:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8001f08:	f300 8195 	bgt.w	8002236 <HAL_UARTEx_RxEventCallback+0x3aa>
 8001f0c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001f10:	f300 80d2 	bgt.w	80020b8 <HAL_UARTEx_RxEventCallback+0x22c>
 8001f14:	2a03      	cmp	r2, #3
 8001f16:	f000 80cf 	beq.w	80020b8 <HAL_UARTEx_RxEventCallback+0x22c>
 8001f1a:	2a03      	cmp	r2, #3
 8001f1c:	f300 818b 	bgt.w	8002236 <HAL_UARTEx_RxEventCallback+0x3aa>
 8001f20:	2a01      	cmp	r2, #1
 8001f22:	d003      	beq.n	8001f2c <HAL_UARTEx_RxEventCallback+0xa0>
 8001f24:	2a02      	cmp	r2, #2
 8001f26:	f000 80c3 	beq.w	80020b0 <HAL_UARTEx_RxEventCallback+0x224>
		    case MINIMAP_DATA_HEADER: {}
		    case CUSTOM_INFO_HEADER: {}

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 8001f2a:	e184      	b.n	8002236 <HAL_UARTEx_RxEventCallback+0x3aa>
		    	game_status.game_type = RxBuff_2[7];
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f2e:	79db      	ldrb	r3, [r3, #7]
 8001f30:	4a5e      	ldr	r2, [pc, #376]	@ (80020ac <HAL_UARTEx_RxEventCallback+0x220>)
 8001f32:	7013      	strb	r3, [r2, #0]
		    	game_status.game_progress = RxBuff_2[8];
 8001f34:	4b5c      	ldr	r3, [pc, #368]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f36:	7a1b      	ldrb	r3, [r3, #8]
 8001f38:	4a5c      	ldr	r2, [pc, #368]	@ (80020ac <HAL_UARTEx_RxEventCallback+0x220>)
 8001f3a:	7053      	strb	r3, [r2, #1]
		    	game_status.stage_remain_time = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 8001f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f3e:	7a5b      	ldrb	r3, [r3, #9]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	4b58      	ldr	r3, [pc, #352]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f46:	7a9b      	ldrb	r3, [r3, #10]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4a56      	ldr	r2, [pc, #344]	@ (80020ac <HAL_UARTEx_RxEventCallback+0x220>)
 8001f52:	8053      	strh	r3, [r2, #2]
		    		((uint64_t) RxBuff_2[11] << 56) |
 8001f54:	4b54      	ldr	r3, [pc, #336]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f56:	7adb      	ldrb	r3, [r3, #11]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001f60:	f04f 0000 	mov.w	r0, #0
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f6a:	0619      	lsls	r1, r3, #24
 8001f6c:	2000      	movs	r0, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 8001f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f70:	7b1b      	ldrb	r3, [r3, #12]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f78:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 8001f84:	0433      	lsls	r3, r6, #16
 8001f86:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[11] << 56) |
 8001f88:	ea40 0402 	orr.w	r4, r0, r2
 8001f8c:	ea41 0503 	orr.w	r5, r1, r3
		    		((uint64_t) RxBuff_2[13] << 40) |
 8001f90:	4b45      	ldr	r3, [pc, #276]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001f92:	7b5b      	ldrb	r3, [r3, #13]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2200      	movs	r2, #0
 8001f98:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f9a:	657a      	str	r2, [r7, #84]	@ 0x54
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001fa6:	020b      	lsls	r3, r1, #8
 8001fa8:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 8001faa:	ea44 0802 	orr.w	r8, r4, r2
 8001fae:	ea45 0903 	orr.w	r9, r5, r3
		    		((uint64_t) RxBuff_2[14] << 32) |
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001fb4:	7b9b      	ldrb	r3, [r3, #14]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fbc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001fc8:	000b      	movs	r3, r1
 8001fca:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[13] << 40) |
 8001fcc:	ea48 0102 	orr.w	r1, r8, r2
 8001fd0:	6439      	str	r1, [r7, #64]	@ 0x40
 8001fd2:	ea49 0303 	orr.w	r3, r9, r3
 8001fd6:	647b      	str	r3, [r7, #68]	@ 0x44
		    		((uint64_t) RxBuff_2[15] << 24) |
 8001fd8:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8001fda:	7bdb      	ldrb	r3, [r3, #15]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2200      	movs	r2, #0
 8001fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fe2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fe4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8001fe8:	460b      	mov	r3, r1
 8001fea:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8001fee:	460b      	mov	r3, r1
 8001ff0:	ea4f 6a03 	mov.w	sl, r3, lsl #24
		    		((uint64_t) RxBuff_2[14] << 32) |
 8001ff4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	ea43 030a 	orr.w	r3, r3, sl
 8001ffe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002000:	4613      	mov	r3, r2
 8002002:	ea43 030b 	orr.w	r3, r3, fp
 8002006:	637b      	str	r3, [r7, #52]	@ 0x34
		    		((uint64_t) RxBuff_2[16] << 16) |
 8002008:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 800200a:	7c1b      	ldrb	r3, [r3, #16]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2200      	movs	r2, #0
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002020:	4629      	mov	r1, r5
 8002022:	040b      	lsls	r3, r1, #16
 8002024:	4621      	mov	r1, r4
 8002026:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800202a:	4621      	mov	r1, r4
 800202c:	040a      	lsls	r2, r1, #16
		    		((uint64_t) RxBuff_2[15] << 24) |
 800202e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002032:	4621      	mov	r1, r4
 8002034:	4311      	orrs	r1, r2
 8002036:	6239      	str	r1, [r7, #32]
 8002038:	4629      	mov	r1, r5
 800203a:	4319      	orrs	r1, r3
 800203c:	6279      	str	r1, [r7, #36]	@ 0x24
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 800203e:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8002040:	7c5b      	ldrb	r3, [r3, #17]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2200      	movs	r2, #0
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	61fa      	str	r2, [r7, #28]
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002056:	4629      	mov	r1, r5
 8002058:	020b      	lsls	r3, r1, #8
 800205a:	4621      	mov	r1, r4
 800205c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002060:	4621      	mov	r1, r4
 8002062:	020a      	lsls	r2, r1, #8
		    		((uint64_t) RxBuff_2[16] << 16) |
 8002064:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002068:	4621      	mov	r1, r4
 800206a:	4311      	orrs	r1, r2
 800206c:	6139      	str	r1, [r7, #16]
 800206e:	4629      	mov	r1, r5
 8002070:	4319      	orrs	r1, r3
 8002072:	6179      	str	r1, [r7, #20]
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8002076:	7c9b      	ldrb	r3, [r3, #18]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2200      	movs	r2, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	60fa      	str	r2, [r7, #12]
 8002080:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002084:	4623      	mov	r3, r4
 8002086:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800208a:	4602      	mov	r2, r0
 800208c:	4313      	orrs	r3, r2
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	462b      	mov	r3, r5
 8002092:	460a      	mov	r2, r1
 8002094:	4313      	orrs	r3, r2
 8002096:	607b      	str	r3, [r7, #4]
		    	game_status.SyncTimeStamp =
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <HAL_UARTEx_RxEventCallback+0x220>)
 800209a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800209e:	e9c3 1202 	strd	r1, r2, [r3, #8]
		    	break;
 80020a2:	e0c9      	b.n	8002238 <HAL_UARTEx_RxEventCallback+0x3ac>
 80020a4:	20000a1c 	.word	0x20000a1c
 80020a8:	200004dc 	.word	0x200004dc
 80020ac:	200005e0 	.word	0x200005e0
		    	game_status.game_type = RxBuff_2[7];
 80020b0:	4b64      	ldr	r3, [pc, #400]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020b2:	79da      	ldrb	r2, [r3, #7]
 80020b4:	4b64      	ldr	r3, [pc, #400]	@ (8002248 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80020b6:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_id = RxBuff_2[7];
 80020b8:	4b62      	ldr	r3, [pc, #392]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020ba:	79da      	ldrb	r2, [r3, #7]
 80020bc:	4b63      	ldr	r3, [pc, #396]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 80020be:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_level = RxBuff_2[8];
 80020c0:	4b60      	ldr	r3, [pc, #384]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020c2:	7a1a      	ldrb	r2, [r3, #8]
 80020c4:	4b61      	ldr	r3, [pc, #388]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 80020c6:	705a      	strb	r2, [r3, #1]
		    	robot_status.current_HP = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 80020c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020ca:	7a5b      	ldrb	r3, [r3, #9]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020d2:	7a9b      	ldrb	r3, [r3, #10]
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b21b      	sxth	r3, r3
 80020da:	b29a      	uxth	r2, r3
 80020dc:	4b5b      	ldr	r3, [pc, #364]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 80020de:	805a      	strh	r2, [r3, #2]
		    	robot_status.maximum_HP = ((uint16_t) RxBuff_2[11] << 8) | RxBuff_2[12];
 80020e0:	4b58      	ldr	r3, [pc, #352]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020e2:	7adb      	ldrb	r3, [r3, #11]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	4b56      	ldr	r3, [pc, #344]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020ea:	7b1b      	ldrb	r3, [r3, #12]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b55      	ldr	r3, [pc, #340]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 80020f6:	809a      	strh	r2, [r3, #4]
		    	robot_status.shooter_barrel_cooling_value = ((uint16_t) RxBuff_2[13] << 8) | RxBuff_2[14];
 80020f8:	4b52      	ldr	r3, [pc, #328]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80020fa:	7b5b      	ldrb	r3, [r3, #13]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	b21a      	sxth	r2, r3
 8002100:	4b50      	ldr	r3, [pc, #320]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002102:	7b9b      	ldrb	r3, [r3, #14]
 8002104:	b21b      	sxth	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b21b      	sxth	r3, r3
 800210a:	b29a      	uxth	r2, r3
 800210c:	4b4f      	ldr	r3, [pc, #316]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 800210e:	80da      	strh	r2, [r3, #6]
		    	robot_status.shooter_barrel_heat_limit = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 8002110:	4b4c      	ldr	r3, [pc, #304]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002112:	7bdb      	ldrb	r3, [r3, #15]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b21a      	sxth	r2, r3
 8002118:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800211a:	7c1b      	ldrb	r3, [r3, #16]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	4b49      	ldr	r3, [pc, #292]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 8002126:	811a      	strh	r2, [r3, #8]
		    	robot_status.chassis_power_limit = ((uint16_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8002128:	4b46      	ldr	r3, [pc, #280]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800212a:	7c5b      	ldrb	r3, [r3, #17]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b21a      	sxth	r2, r3
 8002130:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002132:	7c9b      	ldrb	r3, [r3, #18]
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b21b      	sxth	r3, r3
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b43      	ldr	r3, [pc, #268]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 800213e:	815a      	strh	r2, [r3, #10]
		    	robot_status.power_management_gimbal_output = RxBuff_2[19];
 8002140:	4b40      	ldr	r3, [pc, #256]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002142:	7cdb      	ldrb	r3, [r3, #19]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	b2d9      	uxtb	r1, r3
 800214a:	4a40      	ldr	r2, [pc, #256]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 800214c:	7b13      	ldrb	r3, [r2, #12]
 800214e:	f361 0300 	bfi	r3, r1, #0, #1
 8002152:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_chassis_output = RxBuff_2[20];
 8002154:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002156:	7d1b      	ldrb	r3, [r3, #20]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	b2d9      	uxtb	r1, r3
 800215e:	4a3b      	ldr	r2, [pc, #236]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 8002160:	7b13      	ldrb	r3, [r2, #12]
 8002162:	f361 0341 	bfi	r3, r1, #1, #1
 8002166:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_shooter_output = RxBuff_2[21];
 8002168:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800216a:	7d5b      	ldrb	r3, [r3, #21]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	b2d9      	uxtb	r1, r3
 8002172:	4a36      	ldr	r2, [pc, #216]	@ (800224c <HAL_UARTEx_RxEventCallback+0x3c0>)
 8002174:	7b13      	ldrb	r3, [r2, #12]
 8002176:	f361 0382 	bfi	r3, r1, #2, #1
 800217a:	7313      	strb	r3, [r2, #12]
		    	power_heat_data.chassis_voltage = ((uint16_t) RxBuff_2[8] << 8) | RxBuff_2[7];
 800217c:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800217e:	7a1b      	ldrb	r3, [r3, #8]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002186:	79db      	ldrb	r3, [r3, #7]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21b      	sxth	r3, r3
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b2f      	ldr	r3, [pc, #188]	@ (8002250 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8002192:	801a      	strh	r2, [r3, #0]
		    	power_heat_data.chassis_current = ((uint16_t) RxBuff_2[10] << 8) | RxBuff_2[9];
 8002194:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002196:	7a9b      	ldrb	r3, [r3, #10]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b21a      	sxth	r2, r3
 800219c:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800219e:	7a5b      	ldrb	r3, [r3, #9]
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80021aa:	805a      	strh	r2, [r3, #2]
		    	power_heat_data.chassis_power = ((uint32_t) RxBuff_2[14] << 24) | ((uint32_t) RxBuff_2[13] << 16) | ((uint32_t) RxBuff_2[12] << 8) | RxBuff_2[11];
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80021ae:	7b9b      	ldrb	r3, [r3, #14]
 80021b0:	061a      	lsls	r2, r3, #24
 80021b2:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80021b4:	7b5b      	ldrb	r3, [r3, #13]
 80021b6:	041b      	lsls	r3, r3, #16
 80021b8:	431a      	orrs	r2, r3
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80021bc:	7b1b      	ldrb	r3, [r3, #12]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	4313      	orrs	r3, r2
 80021c2:	4a20      	ldr	r2, [pc, #128]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80021c4:	7ad2      	ldrb	r2, [r2, #11]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002250 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80021d2:	edc3 7a01 	vstr	s15, [r3, #4]
		    	power_heat_data.buffer_energy = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 80021d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80021d8:	7bdb      	ldrb	r3, [r3, #15]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	b21a      	sxth	r2, r3
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80021e0:	7c1b      	ldrb	r3, [r3, #16]
 80021e2:	b21b      	sxth	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80021ec:	811a      	strh	r2, [r3, #8]
		    	power_heat_data.shooter_17mm_1_barrel_heat = ((uint16_t) RxBuff_2[18] << 8) | RxBuff_2[17];
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80021f0:	7c9b      	ldrb	r3, [r3, #18]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	4b13      	ldr	r3, [pc, #76]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80021f8:	7c5b      	ldrb	r3, [r3, #17]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21b      	sxth	r3, r3
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8002204:	815a      	strh	r2, [r3, #10]
		    	power_heat_data.shooter_17mm_2_barrel_heat = ((uint16_t) RxBuff_2[20] << 8) | RxBuff_2[19];
 8002206:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002208:	7d1b      	ldrb	r3, [r3, #20]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b21a      	sxth	r2, r3
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002210:	7cdb      	ldrb	r3, [r3, #19]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21b      	sxth	r3, r3
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <HAL_UARTEx_RxEventCallback+0x3c4>)
 800221c:	819a      	strh	r2, [r3, #12]
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002220:	7d9b      	ldrb	r3, [r3, #22]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b21a      	sxth	r2, r3
 8002226:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8002228:	7d5b      	ldrb	r3, [r3, #21]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b21b      	sxth	r3, r3
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8002234:	81da      	strh	r2, [r3, #14]
		        break;
 8002236:	bf00      	nop
		    }
		}
	}
}
 8002238:	bf00      	nop
 800223a:	377c      	adds	r7, #124	@ 0x7c
 800223c:	46bd      	mov	sp, r7
 800223e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002242:	bf00      	nop
 8002244:	200004dc 	.word	0x200004dc
 8002248:	200005e0 	.word	0x200005e0
 800224c:	20000600 	.word	0x20000600
 8002250:	200005f0 	.word	0x200005f0

08002254 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800225a:	2301      	movs	r3, #1
 800225c:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8002262:	2301      	movs	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800227e:	463b      	mov	r3, r7
 8002280:	4619      	mov	r1, r3
 8002282:	480f      	ldr	r0, [pc, #60]	@ (80022c0 <can_filter_init+0x6c>)
 8002284:	f003 fe16 	bl	8005eb4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8002288:	480d      	ldr	r0, [pc, #52]	@ (80022c0 <can_filter_init+0x6c>)
 800228a:	f003 fef3 	bl	8006074 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800228e:	2102      	movs	r1, #2
 8002290:	480b      	ldr	r0, [pc, #44]	@ (80022c0 <can_filter_init+0x6c>)
 8002292:	f004 f920 	bl	80064d6 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8002296:	230e      	movs	r3, #14
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 800229a:	230e      	movs	r3, #14
 800229c:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4808      	ldr	r0, [pc, #32]	@ (80022c4 <can_filter_init+0x70>)
 80022a4:	f003 fe06 	bl	8005eb4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80022a8:	4806      	ldr	r0, [pc, #24]	@ (80022c4 <can_filter_init+0x70>)
 80022aa:	f003 fee3 	bl	8006074 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022ae:	2102      	movs	r1, #2
 80022b0:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <can_filter_init+0x70>)
 80022b2:	f004 f910 	bl	80064d6 <HAL_CAN_ActivateNotification>
}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	@ 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000778 	.word	0x20000778
 80022c4:	200007a0 	.word	0x200007a0

080022c8 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80022d2:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <imu_pwm_set+0x1c>)
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40014400 	.word	0x40014400

080022e8 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80022f6:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <RC_init+0xac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	4b25      	ldr	r3, [pc, #148]	@ (8002394 <RC_init+0xac>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002304:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8002306:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <RC_init+0xac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	4b21      	ldr	r3, [pc, #132]	@ (8002394 <RC_init+0xac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0210 	orr.w	r2, r2, #16
 8002314:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8002316:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <RC_init+0xb0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <RC_init+0xb0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002326:	e007      	b.n	8002338 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <RC_init+0xb0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <RC_init+0xb0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002338:	4b17      	ldr	r3, [pc, #92]	@ (8002398 <RC_init+0xb0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <RC_init+0xb0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a14      	ldr	r2, [pc, #80]	@ (800239c <RC_init+0xb4>)
 800234c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 800234e:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <RC_init+0xb0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <RC_init+0xb0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <RC_init+0xb0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	88fa      	ldrh	r2, [r7, #6]
 8002364:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002366:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <RC_init+0xb0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <RC_init+0xb0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002374:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <RC_init+0xb0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <RC_init+0xb0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	200009d8 	.word	0x200009d8
 8002398:	20000b20 	.word	0x20000b20
 800239c:	40004804 	.word	0x40004804

080023a0 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
    osDelay(500);
 80023a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023ac:	f009 fb60 	bl	800ba70 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80023b0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002454 <imu_temp_control_task+0xb4>
 80023b4:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002458 <imu_temp_control_task+0xb8>
 80023b8:	4a28      	ldr	r2, [pc, #160]	@ (800245c <imu_temp_control_task+0xbc>)
 80023ba:	2100      	movs	r1, #0
 80023bc:	4828      	ldr	r0, [pc, #160]	@ (8002460 <imu_temp_control_task+0xc0>)
 80023be:	f002 f9db 	bl	8004778 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023c2:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <imu_temp_control_task+0xc4>)
 80023c4:	2210      	movs	r2, #16
 80023c6:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023c8:	4826      	ldr	r0, [pc, #152]	@ (8002464 <imu_temp_control_task+0xc4>)
 80023ca:	f006 fdfa 	bl	8008fc2 <HAL_SPI_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80023d4:	f002 f9ca 	bl	800476c <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80023d8:	2000      	movs	r0, #0
 80023da:	f00a fc67 	bl	800ccac <pcTaskGetName>
 80023de:	4603      	mov	r3, r0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00a fcf7 	bl	800cdd4 <xTaskGetHandle>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002468 <imu_temp_control_task+0xc8>)
 80023ea:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <imu_temp_control_task+0xcc>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80023f2:	bf00      	nop
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	2001      	movs	r0, #1
 80023fa:	f00b f917 	bl	800d62c <ulTaskNotifyTake>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b01      	cmp	r3, #1
 8002402:	d1f7      	bne.n	80023f4 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8002404:	f7fe ffc2 	bl	800138c <IMU_get_temp>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002470 <imu_temp_control_task+0xd0>
 8002410:	eeb0 0a67 	vmov.f32	s0, s15
 8002414:	4812      	ldr	r0, [pc, #72]	@ (8002460 <imu_temp_control_task+0xc0>)
 8002416:	f002 fa06 	bl	8004826 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 800241a:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <imu_temp_control_task+0xc0>)
 800241c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002428:	d503      	bpl.n	8002432 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 800242a:	4b0d      	ldr	r3, [pc, #52]	@ (8002460 <imu_temp_control_task+0xc0>)
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8002432:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <imu_temp_control_task+0xc0>)
 8002434:	edd3 7a08 	vldr	s15, [r3, #32]
 8002438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243c:	ee17 3a90 	vmov	r3, s15
 8002440:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8002442:	89fb      	ldrh	r3, [r7, #14]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff3f 	bl	80022c8 <imu_pwm_set>
        osDelay(5);
 800244a:	2005      	movs	r0, #5
 800244c:	f009 fb10 	bl	800ba70 <osDelay>
    {
 8002450:	e7cf      	b.n	80023f2 <imu_temp_control_task+0x52>
 8002452:	bf00      	nop
 8002454:	45898000 	.word	0x45898000
 8002458:	458ca000 	.word	0x458ca000
 800245c:	080126b8 	.word	0x080126b8
 8002460:	20000720 	.word	0x20000720
 8002464:	2000081c 	.word	0x2000081c
 8002468:	20000718 	.word	0x20000718
 800246c:	2000071c 	.word	0x2000071c
 8002470:	42200000 	.word	0x42200000

08002474 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	429a      	cmp	r2, r3
 8002486:	d11b      	bne.n	80024c0 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8002488:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002492:	f00b f83d 	bl	800d510 <xTaskGetSchedulerState>
 8002496:	4603      	mov	r3, r0
 8002498:	2b01      	cmp	r3, #1
 800249a:	d011      	beq.n	80024c0 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	490c      	ldr	r1, [pc, #48]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f00b f90e 	bl	800d6c4 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80024a8:	4b0a      	ldr	r3, [pc, #40]	@ (80024d4 <HAL_GPIO_EXTI_Callback+0x60>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_GPIO_EXTI_Callback+0x4c>
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_GPIO_EXTI_Callback+0x64>)
 80024b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	2000000e 	.word	0x2000000e
 80024cc:	2000071c 	.word	0x2000071c
 80024d0:	20000718 	.word	0x20000718
 80024d4:	20000768 	.word	0x20000768
 80024d8:	e000ed04 	.word	0xe000ed04

080024dc <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80024ea:	f000 f8bd 	bl	8002668 <ist8310_GPIO_init>
    ist8310_com_init();
 80024ee:	f000 f8c2 	bl	8002676 <ist8310_com_init>

    ist8310_RST_L();
 80024f2:	f000 f97b 	bl	80027ec <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 80024f6:	4b30      	ldr	r3, [pc, #192]	@ (80025b8 <ist8310_init+0xdc>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f916 	bl	800272c <ist8310_delay_ms>
    ist8310_RST_H();
 8002500:	f000 f968 	bl	80027d4 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8002504:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <ist8310_init+0xdc>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f90f 	bl	800272c <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 800250e:	2000      	movs	r0, #0
 8002510:	f000 f8b8 	bl	8002684 <ist8310_IIC_read_single_reg>
 8002514:	4603      	mov	r3, r0
 8002516:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	2b10      	cmp	r3, #16
 800251c:	d001      	beq.n	8002522 <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 800251e:	2340      	movs	r3, #64	@ 0x40
 8002520:	e045      	b.n	80025ae <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8002522:	2300      	movs	r3, #0
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	e03e      	b.n	80025a6 <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 8002528:	79fa      	ldrb	r2, [r7, #7]
 800252a:	4924      	ldr	r1, [pc, #144]	@ (80025bc <ist8310_init+0xe0>)
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	440b      	add	r3, r1
 8002534:	7818      	ldrb	r0, [r3, #0]
 8002536:	79fa      	ldrb	r2, [r7, #7]
 8002538:	4920      	ldr	r1, [pc, #128]	@ (80025bc <ist8310_init+0xe0>)
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	440b      	add	r3, r1
 8002542:	3301      	adds	r3, #1
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	f000 f8b8 	bl	80026bc <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 800254c:	4b1c      	ldr	r3, [pc, #112]	@ (80025c0 <ist8310_init+0xe4>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f8f9 	bl	8002748 <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8002556:	79fa      	ldrb	r2, [r7, #7]
 8002558:	4918      	ldr	r1, [pc, #96]	@ (80025bc <ist8310_init+0xe0>)
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	440b      	add	r3, r1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f88d 	bl	8002684 <ist8310_IIC_read_single_reg>
 800256a:	4603      	mov	r3, r0
 800256c:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <ist8310_init+0xe4>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f8e8 	bl	8002748 <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	4910      	ldr	r1, [pc, #64]	@ (80025bc <ist8310_init+0xe0>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	440b      	add	r3, r1
 8002584:	3301      	adds	r3, #1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	79ba      	ldrb	r2, [r7, #6]
 800258a:	429a      	cmp	r2, r3
 800258c:	d008      	beq.n	80025a0 <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 800258e:	79fa      	ldrb	r2, [r7, #7]
 8002590:	490a      	ldr	r1, [pc, #40]	@ (80025bc <ist8310_init+0xe0>)
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	440b      	add	r3, r1
 800259a:	3302      	adds	r3, #2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	e006      	b.n	80025ae <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	3301      	adds	r3, #1
 80025a4:	71fb      	strb	r3, [r7, #7]
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d9bd      	bls.n	8002528 <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	080126d0 	.word	0x080126d0
 80025bc:	080126c4 	.word	0x080126c4
 80025c0:	080126d1 	.word	0x080126d1

080025c4 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	2206      	movs	r2, #6
 80025d6:	4619      	mov	r1, r3
 80025d8:	2003      	movs	r0, #3
 80025da:	f000 f88b 	bl	80026f4 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80025de:	7a7b      	ldrb	r3, [r7, #9]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	b21a      	sxth	r2, r3
 80025e4:	7a3b      	ldrb	r3, [r7, #8]
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	4313      	orrs	r3, r2
 80025ea:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80025ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002664 <ist8310_read_mag+0xa0>
 80025fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8002606:	7afb      	ldrb	r3, [r7, #11]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	b21a      	sxth	r2, r3
 800260c:	7abb      	ldrb	r3, [r7, #10]
 800260e:	b21b      	sxth	r3, r3
 8002610:	4313      	orrs	r3, r2
 8002612:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8002614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002664 <ist8310_read_mag+0xa0>
 8002628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262c:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8002630:	7b7b      	ldrb	r3, [r7, #13]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	b21a      	sxth	r2, r3
 8002636:	7b3b      	ldrb	r3, [r7, #12]
 8002638:	b21b      	sxth	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800263e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3308      	adds	r3, #8
 800264e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002664 <ist8310_read_mag+0xa0>
 8002652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002656:	edc3 7a00 	vstr	s15, [r3]
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	3e99999a 	.word	0x3e99999a

08002668 <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af04      	add	r7, sp, #16
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	b29a      	uxth	r2, r3
 8002696:	230a      	movs	r3, #10
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	2301      	movs	r3, #1
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	f107 030f 	add.w	r3, r7, #15
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2301      	movs	r3, #1
 80026a6:	211c      	movs	r1, #28
 80026a8:	4803      	ldr	r0, [pc, #12]	@ (80026b8 <ist8310_IIC_read_single_reg+0x34>)
 80026aa:	f005 fa89 	bl	8007bc0 <HAL_I2C_Mem_Read>
    return res;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200007c8 	.word	0x200007c8

080026bc <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	4603      	mov	r3, r0
 80026c4:	460a      	mov	r2, r1
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	230a      	movs	r3, #10
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	2301      	movs	r3, #1
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	1dbb      	adds	r3, r7, #6
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	211c      	movs	r1, #28
 80026e0:	4803      	ldr	r0, [pc, #12]	@ (80026f0 <ist8310_IIC_write_single_reg+0x34>)
 80026e2:	f005 f973 	bl	80079cc <HAL_I2C_Mem_Write>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200007c8 	.word	0x200007c8

080026f4 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af04      	add	r7, sp, #16
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	b29a      	uxth	r2, r3
 8002708:	79bb      	ldrb	r3, [r7, #6]
 800270a:	b29b      	uxth	r3, r3
 800270c:	210a      	movs	r1, #10
 800270e:	9102      	str	r1, [sp, #8]
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	211c      	movs	r1, #28
 800271a:	4803      	ldr	r0, [pc, #12]	@ (8002728 <ist8310_IIC_read_muli_reg+0x34>)
 800271c:	f005 fa50 	bl	8007bc0 <HAL_I2C_Mem_Read>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	200007c8 	.word	0x200007c8

0800272c <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	4618      	mov	r0, r3
 800273a:	f003 fa9b 	bl	8005c74 <HAL_Delay>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8002766:	4b1a      	ldr	r3, [pc, #104]	@ (80027d0 <ist8310_delay_us+0x88>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 800276c:	88fa      	ldrh	r2, [r7, #6]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8002778:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <ist8310_delay_us+0x88>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 800277e:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <ist8310_delay_us+0x88>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	429a      	cmp	r2, r3
 800278a:	d0f8      	beq.n	800277e <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	429a      	cmp	r2, r3
 8002792:	d206      	bcs.n	80027a2 <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4413      	add	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e007      	b.n	80027b2 <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d200      	bcs.n	80027c0 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 80027be:	e7de      	b.n	800277e <ist8310_delay_us+0x36>
            {
                break;
 80027c0:	bf00      	nop
            }
        }
    }
}
 80027c2:	bf00      	nop
 80027c4:	3724      	adds	r7, #36	@ 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	2140      	movs	r1, #64	@ 0x40
 80027dc:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <ist8310_RST_H+0x14>)
 80027de:	f004 ff7f 	bl	80076e0 <HAL_GPIO_WritePin>
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40021800 	.word	0x40021800

080027ec <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2140      	movs	r1, #64	@ 0x40
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <ist8310_RST_L+0x14>)
 80027f6:	f004 ff73 	bl	80076e0 <HAL_GPIO_WritePin>
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40021800 	.word	0x40021800

08002804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002808:	f003 f9c2 	bl	8005b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800280c:	f000 f866 	bl	80028dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002810:	f000 fc76 	bl	8003100 <MX_GPIO_Init>
  MX_DMA_Init();
 8002814:	f000 fc26 	bl	8003064 <MX_DMA_Init>
  MX_CAN1_Init();
 8002818:	f000 f8cc 	bl	80029b4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800281c:	f000 f900 	bl	8002a20 <MX_CAN2_Init>
  MX_SPI1_Init();
 8002820:	f000 f962 	bl	8002ae8 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002824:	f000 fa3e 	bl	8002ca4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002828:	f000 fb9c 	bl	8002f64 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800282c:	f000 fbf0 	bl	8003010 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002830:	f000 f990 	bl	8002b54 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002834:	f000 faac 	bl	8002d90 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8002838:	f000 fbbe 	bl	8002fb8 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 800283c:	f000 fb44 	bl	8002ec8 <MX_TIM10_Init>
  MX_I2C3_Init();
 8002840:	f000 f924 	bl	8002a8c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8002844:	f7ff fd06 	bl	8002254 <can_filter_init>
  remote_control_init();
 8002848:	f002 f936 	bl	8004ab8 <remote_control_init>
  usart_Init();
 800284c:	f7ff fae0 	bl	8001e10 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8002850:	f002 f940 	bl	8004ad4 <get_remote_control_point>
 8002854:	4603      	mov	r3, r0
 8002856:	4a14      	ldr	r2, [pc, #80]	@ (80028a8 <main+0xa4>)
 8002858:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800285a:	f009 f82d 	bl	800b8b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 800285e:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <main+0xa8>)
 8002860:	2100      	movs	r1, #0
 8002862:	4813      	ldr	r0, [pc, #76]	@ (80028b0 <main+0xac>)
 8002864:	f009 f872 	bl	800b94c <osThreadNew>
 8002868:	4603      	mov	r3, r0
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <main+0xb0>)
 800286c:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 800286e:	4a12      	ldr	r2, [pc, #72]	@ (80028b8 <main+0xb4>)
 8002870:	2100      	movs	r1, #0
 8002872:	4812      	ldr	r0, [pc, #72]	@ (80028bc <main+0xb8>)
 8002874:	f009 f86a 	bl	800b94c <osThreadNew>
 8002878:	4603      	mov	r3, r0
 800287a:	4a11      	ldr	r2, [pc, #68]	@ (80028c0 <main+0xbc>)
 800287c:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 800287e:	4a11      	ldr	r2, [pc, #68]	@ (80028c4 <main+0xc0>)
 8002880:	2100      	movs	r1, #0
 8002882:	4811      	ldr	r0, [pc, #68]	@ (80028c8 <main+0xc4>)
 8002884:	f009 f862 	bl	800b94c <osThreadNew>
 8002888:	4603      	mov	r3, r0
 800288a:	4a10      	ldr	r2, [pc, #64]	@ (80028cc <main+0xc8>)
 800288c:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 800288e:	4a10      	ldr	r2, [pc, #64]	@ (80028d0 <main+0xcc>)
 8002890:	2100      	movs	r1, #0
 8002892:	4810      	ldr	r0, [pc, #64]	@ (80028d4 <main+0xd0>)
 8002894:	f009 f85a 	bl	800b94c <osThreadNew>
 8002898:	4603      	mov	r3, r0
 800289a:	4a0f      	ldr	r2, [pc, #60]	@ (80028d8 <main+0xd4>)
 800289c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800289e:	f009 f82f 	bl	800b900 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <main+0x9e>
 80028a6:	bf00      	nop
 80028a8:	20000c50 	.word	0x20000c50
 80028ac:	080126d4 	.word	0x080126d4
 80028b0:	08003431 	.word	0x08003431
 80028b4:	20000c40 	.word	0x20000c40
 80028b8:	080126f8 	.word	0x080126f8
 80028bc:	08003481 	.word	0x08003481
 80028c0:	20000c44 	.word	0x20000c44
 80028c4:	0801271c 	.word	0x0801271c
 80028c8:	080023a1 	.word	0x080023a1
 80028cc:	20000c48 	.word	0x20000c48
 80028d0:	08012740 	.word	0x08012740
 80028d4:	0800475d 	.word	0x0800475d
 80028d8:	20000c4c 	.word	0x20000c4c

080028dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b094      	sub	sp, #80	@ 0x50
 80028e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028e2:	f107 0320 	add.w	r3, r7, #32
 80028e6:	2230      	movs	r2, #48	@ 0x30
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00c fcea 	bl	800f2c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028f0:	f107 030c 	add.w	r3, r7, #12
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <SystemClock_Config+0xd0>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <SystemClock_Config+0xd0>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002910:	4b26      	ldr	r3, [pc, #152]	@ (80029ac <SystemClock_Config+0xd0>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	4b23      	ldr	r3, [pc, #140]	@ (80029b0 <SystemClock_Config+0xd4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a22      	ldr	r2, [pc, #136]	@ (80029b0 <SystemClock_Config+0xd4>)
 8002926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <SystemClock_Config+0xd4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002938:	2301      	movs	r3, #1
 800293a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800293c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002942:	2302      	movs	r3, #2
 8002944:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002946:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800294a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800294c:	2306      	movs	r3, #6
 800294e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002950:	23a8      	movs	r3, #168	@ 0xa8
 8002952:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002954:	2302      	movs	r3, #2
 8002956:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002958:	2304      	movs	r3, #4
 800295a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800295c:	f107 0320 	add.w	r3, r7, #32
 8002960:	4618      	mov	r0, r3
 8002962:	f005 feaf 	bl	80086c4 <HAL_RCC_OscConfig>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800296c:	f001 fefe 	bl	800476c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002970:	230f      	movs	r3, #15
 8002972:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002974:	2302      	movs	r3, #2
 8002976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800297c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	2105      	movs	r1, #5
 800298e:	4618      	mov	r0, r3
 8002990:	f006 f910 	bl	8008bb4 <HAL_RCC_ClockConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800299a:	f001 fee7 	bl	800476c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800299e:	f006 f9ef 	bl	8008d80 <HAL_RCC_EnableCSS>
}
 80029a2:	bf00      	nop
 80029a4:	3750      	adds	r7, #80	@ 0x50
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000

080029b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80029b8:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029ba:	4a18      	ldr	r2, [pc, #96]	@ (8002a1c <MX_CAN1_Init+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80029be:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029c0:	2203      	movs	r2, #3
 80029c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80029c4:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029d2:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80029d6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029de:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80029e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80029e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80029ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80029f8:	4b07      	ldr	r3, [pc, #28]	@ (8002a18 <MX_CAN1_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <MX_CAN1_Init+0x64>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002a04:	4804      	ldr	r0, [pc, #16]	@ (8002a18 <MX_CAN1_Init+0x64>)
 8002a06:	f003 f959 	bl	8005cbc <HAL_CAN_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002a10:	f001 feac 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000778 	.word	0x20000778
 8002a1c:	40006400 	.word	0x40006400

08002a20 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002a24:	4b17      	ldr	r3, [pc, #92]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a26:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <MX_CAN2_Init+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002a30:	4b14      	ldr	r3, [pc, #80]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002a36:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a3e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002a42:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a46:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a4a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002a52:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002a58:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002a5e:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002a64:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002a70:	4804      	ldr	r0, [pc, #16]	@ (8002a84 <MX_CAN2_Init+0x64>)
 8002a72:	f003 f923 	bl	8005cbc <HAL_CAN_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002a7c:	f001 fe76 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200007a0 	.word	0x200007a0
 8002a88:	40006800 	.word	0x40006800

08002a8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002a92:	4a13      	ldr	r2, [pc, #76]	@ (8002ae0 <MX_I2C3_Init+0x54>)
 8002a94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002a98:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <MX_I2C3_Init+0x58>)
 8002a9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002aae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002abc:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ac8:	4804      	ldr	r0, [pc, #16]	@ (8002adc <MX_I2C3_Init+0x50>)
 8002aca:	f004 fe3b 	bl	8007744 <HAL_I2C_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002ad4:	f001 fe4a 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200007c8 	.word	0x200007c8
 8002ae0:	40005c00 	.word	0x40005c00
 8002ae4:	00061a80 	.word	0x00061a80

08002ae8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002aec:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002aee:	4a18      	ldr	r2, [pc, #96]	@ (8002b50 <MX_SPI1_Init+0x68>)
 8002af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002af2:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002af4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b00:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b08:	2202      	movs	r2, #2
 8002b0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b1c:	2238      	movs	r2, #56	@ 0x38
 8002b1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b20:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b26:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b34:	220a      	movs	r2, #10
 8002b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b38:	4804      	ldr	r0, [pc, #16]	@ (8002b4c <MX_SPI1_Init+0x64>)
 8002b3a:	f006 fa42 	bl	8008fc2 <HAL_SPI_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b44:	f001 fe12 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	2000081c 	.word	0x2000081c
 8002b50:	40013000 	.word	0x40013000

08002b54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b092      	sub	sp, #72	@ 0x48
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
 8002b74:	615a      	str	r2, [r3, #20]
 8002b76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f00c fba0 	bl	800f2c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b84:	4b45      	ldr	r3, [pc, #276]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002b86:	4a46      	ldr	r2, [pc, #280]	@ (8002ca0 <MX_TIM1_Init+0x14c>)
 8002b88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8002b8a:	4b44      	ldr	r3, [pc, #272]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002b8c:	f240 124f 	movw	r2, #335	@ 0x14f
 8002b90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b92:	4b42      	ldr	r3, [pc, #264]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002b98:	4b40      	ldr	r3, [pc, #256]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002b9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bac:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bb2:	483a      	ldr	r0, [pc, #232]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002bb4:	f006 fdb2 	bl	800971c <HAL_TIM_PWM_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002bbe:	f001 fdd5 	bl	800476c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4832      	ldr	r0, [pc, #200]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002bd2:	f007 fb55 	bl	800a280 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002bdc:	f001 fdc6 	bl	800476c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be0:	2360      	movs	r3, #96	@ 0x60
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bec:	2300      	movs	r3, #0
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c00:	2200      	movs	r2, #0
 8002c02:	4619      	mov	r1, r3
 8002c04:	4825      	ldr	r0, [pc, #148]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002c06:	f006 fea1 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002c10:	f001 fdac 	bl	800476c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c18:	2204      	movs	r2, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	481f      	ldr	r0, [pc, #124]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002c1e:	f006 fe95 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002c28:	f001 fda0 	bl	800476c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c30:	2208      	movs	r2, #8
 8002c32:	4619      	mov	r1, r3
 8002c34:	4819      	ldr	r0, [pc, #100]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002c36:	f006 fe89 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002c40:	f001 fd94 	bl	800476c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c48:	220c      	movs	r2, #12
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4813      	ldr	r0, [pc, #76]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002c4e:	f006 fe7d 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002c58:	f001 fd88 	bl	800476c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4807      	ldr	r0, [pc, #28]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002c80:	f007 fb7a 	bl	800a378 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002c8a:	f001 fd6f 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c8e:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <MX_TIM1_Init+0x148>)
 8002c90:	f002 fb1c 	bl	80052cc <HAL_TIM_MspPostInit>

}
 8002c94:	bf00      	nop
 8002c96:	3748      	adds	r7, #72	@ 0x48
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000874 	.word	0x20000874
 8002ca0:	40010000 	.word	0x40010000

08002ca4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	@ 0x38
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002caa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	f107 0320 	add.w	r3, r7, #32
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
 8002cd0:	615a      	str	r2, [r3, #20]
 8002cd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <MX_TIM4_Init+0xe8>)
 8002cd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002cda:	4b2b      	ldr	r3, [pc, #172]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002cdc:	2253      	movs	r2, #83	@ 0x53
 8002cde:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce0:	4b29      	ldr	r3, [pc, #164]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8002ce6:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002ce8:	22f9      	movs	r2, #249	@ 0xf9
 8002cea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cec:	4b26      	ldr	r3, [pc, #152]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cf2:	4b25      	ldr	r3, [pc, #148]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002cf4:	2280      	movs	r2, #128	@ 0x80
 8002cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cf8:	4823      	ldr	r0, [pc, #140]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002cfa:	f006 fc57 	bl	80095ac <HAL_TIM_Base_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002d04:	f001 fd32 	bl	800476c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d12:	4619      	mov	r1, r3
 8002d14:	481c      	ldr	r0, [pc, #112]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002d16:	f006 fedb 	bl	8009ad0 <HAL_TIM_ConfigClockSource>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002d20:	f001 fd24 	bl	800476c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d24:	4818      	ldr	r0, [pc, #96]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002d26:	f006 fcf9 	bl	800971c <HAL_TIM_PWM_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002d30:	f001 fd1c 	bl	800476c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d3c:	f107 0320 	add.w	r3, r7, #32
 8002d40:	4619      	mov	r1, r3
 8002d42:	4811      	ldr	r0, [pc, #68]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002d44:	f007 fa9c 	bl	800a280 <HAL_TIMEx_MasterConfigSynchronization>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002d4e:	f001 fd0d 	bl	800476c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d52:	2360      	movs	r3, #96	@ 0x60
 8002d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002d56:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	2208      	movs	r2, #8
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4807      	ldr	r0, [pc, #28]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002d6c:	f006 fdee 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002d76:	f001 fcf9 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d7a:	4803      	ldr	r0, [pc, #12]	@ (8002d88 <MX_TIM4_Init+0xe4>)
 8002d7c:	f002 faa6 	bl	80052cc <HAL_TIM_MspPostInit>

}
 8002d80:	bf00      	nop
 8002d82:	3738      	adds	r7, #56	@ 0x38
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200008bc 	.word	0x200008bc
 8002d8c:	40000800 	.word	0x40000800

08002d90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b092      	sub	sp, #72	@ 0x48
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
 8002db0:	615a      	str	r2, [r3, #20]
 8002db2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2220      	movs	r2, #32
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00c fa82 	bl	800f2c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002dc2:	4a40      	ldr	r2, [pc, #256]	@ (8002ec4 <MX_TIM8_Init+0x134>)
 8002dc4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002dc8:	2253      	movs	r2, #83	@ 0x53
 8002dca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002dd4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002dd8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dda:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002de0:	4b37      	ldr	r3, [pc, #220]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002de6:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002de8:	2280      	movs	r2, #128	@ 0x80
 8002dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002dec:	4834      	ldr	r0, [pc, #208]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002dee:	f006 fc95 	bl	800971c <HAL_TIM_PWM_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002df8:	f001 fcb8 	bl	800476c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e08:	4619      	mov	r1, r3
 8002e0a:	482d      	ldr	r0, [pc, #180]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002e0c:	f007 fa38 	bl	800a280 <HAL_TIMEx_MasterConfigSynchronization>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002e16:	f001 fca9 	bl	800476c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1a:	2360      	movs	r3, #96	@ 0x60
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e26:	2300      	movs	r3, #0
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4820      	ldr	r0, [pc, #128]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002e40:	f006 fd84 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002e4a:	f001 fc8f 	bl	800476c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e52:	2204      	movs	r2, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	481a      	ldr	r0, [pc, #104]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002e58:	f006 fd78 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002e62:	f001 fc83 	bl	800476c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4814      	ldr	r0, [pc, #80]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002e70:	f006 fd6c 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002e7a:	f001 fc77 	bl	800476c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4807      	ldr	r0, [pc, #28]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002ea2:	f007 fa69 	bl	800a378 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002eac:	f001 fc5e 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002eb0:	4803      	ldr	r0, [pc, #12]	@ (8002ec0 <MX_TIM8_Init+0x130>)
 8002eb2:	f002 fa0b 	bl	80052cc <HAL_TIM_MspPostInit>

}
 8002eb6:	bf00      	nop
 8002eb8:	3748      	adds	r7, #72	@ 0x48
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000904 	.word	0x20000904
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f60 <MX_TIM10_Init+0x98>)
 8002ee4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002ef4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002ef8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efa:	4b18      	ldr	r3, [pc, #96]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f00:	4b16      	ldr	r3, [pc, #88]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f06:	4815      	ldr	r0, [pc, #84]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002f08:	f006 fb50 	bl	80095ac <HAL_TIM_Base_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002f12:	f001 fc2b 	bl	800476c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002f16:	4811      	ldr	r0, [pc, #68]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002f18:	f006 fc00 	bl	800971c <HAL_TIM_PWM_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002f22:	f001 fc23 	bl	800476c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f26:	2360      	movs	r3, #96	@ 0x60
 8002f28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f36:	1d3b      	adds	r3, r7, #4
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4807      	ldr	r0, [pc, #28]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002f3e:	f006 fd05 	bl	800994c <HAL_TIM_PWM_ConfigChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002f48:	f001 fc10 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002f4c:	4803      	ldr	r0, [pc, #12]	@ (8002f5c <MX_TIM10_Init+0x94>)
 8002f4e:	f002 f9bd 	bl	80052cc <HAL_TIM_MspPostInit>

}
 8002f52:	bf00      	nop
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000094c 	.word	0x2000094c
 8002f60:	40014400 	.word	0x40014400

08002f64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <MX_USART1_UART_Init+0x50>)
 8002f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f82:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f9a:	4805      	ldr	r0, [pc, #20]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f9c:	f007 fa3e 	bl	800a41c <HAL_UART_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fa6:	f001 fbe1 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000994 	.word	0x20000994
 8002fb4:	40011000 	.word	0x40011000

08002fb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002fbe:	4a12      	ldr	r2, [pc, #72]	@ (8003008 <MX_USART3_UART_Init+0x50>)
 8002fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002fc2:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002fc4:	4a11      	ldr	r2, [pc, #68]	@ (800300c <MX_USART3_UART_Init+0x54>)
 8002fc6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fce:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002fd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fdc:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002fde:	220c      	movs	r2, #12
 8002fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe2:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fee:	4805      	ldr	r0, [pc, #20]	@ (8003004 <MX_USART3_UART_Init+0x4c>)
 8002ff0:	f007 fa14 	bl	800a41c <HAL_UART_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002ffa:	f001 fbb7 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200009d8 	.word	0x200009d8
 8003008:	40004800 	.word	0x40004800
 800300c:	000186a0 	.word	0x000186a0

08003010 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003014:	4b11      	ldr	r3, [pc, #68]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 8003016:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <MX_USART6_UART_Init+0x50>)
 8003018:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 800301c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003020:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003022:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800302e:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003034:	4b09      	ldr	r3, [pc, #36]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 8003036:	220c      	movs	r2, #12
 8003038:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303a:	4b08      	ldr	r3, [pc, #32]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003046:	4805      	ldr	r0, [pc, #20]	@ (800305c <MX_USART6_UART_Init+0x4c>)
 8003048:	f007 f9e8 	bl	800a41c <HAL_UART_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003052:	f001 fb8b 	bl	800476c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000a1c 	.word	0x20000a1c
 8003060:	40011400 	.word	0x40011400

08003064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	4b23      	ldr	r3, [pc, #140]	@ (80030fc <MX_DMA_Init+0x98>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	4a22      	ldr	r2, [pc, #136]	@ (80030fc <MX_DMA_Init+0x98>)
 8003074:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003078:	6313      	str	r3, [r2, #48]	@ 0x30
 800307a:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <MX_DMA_Init+0x98>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	4b1c      	ldr	r3, [pc, #112]	@ (80030fc <MX_DMA_Init+0x98>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	4a1b      	ldr	r2, [pc, #108]	@ (80030fc <MX_DMA_Init+0x98>)
 8003090:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003094:	6313      	str	r3, [r2, #48]	@ 0x30
 8003096:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <MX_DMA_Init+0x98>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2105      	movs	r1, #5
 80030a6:	200c      	movs	r0, #12
 80030a8:	f003 fd45 	bl	8006b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80030ac:	200c      	movs	r0, #12
 80030ae:	f003 fd5e 	bl	8006b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2105      	movs	r1, #5
 80030b6:	2039      	movs	r0, #57	@ 0x39
 80030b8:	f003 fd3d 	bl	8006b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80030bc:	2039      	movs	r0, #57	@ 0x39
 80030be:	f003 fd56 	bl	8006b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2105      	movs	r1, #5
 80030c6:	203a      	movs	r0, #58	@ 0x3a
 80030c8:	f003 fd35 	bl	8006b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80030cc:	203a      	movs	r0, #58	@ 0x3a
 80030ce:	f003 fd4e 	bl	8006b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2105      	movs	r1, #5
 80030d6:	2045      	movs	r0, #69	@ 0x45
 80030d8:	f003 fd2d 	bl	8006b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80030dc:	2045      	movs	r0, #69	@ 0x45
 80030de:	f003 fd46 	bl	8006b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80030e2:	2200      	movs	r2, #0
 80030e4:	2105      	movs	r1, #5
 80030e6:	2046      	movs	r0, #70	@ 0x46
 80030e8:	f003 fd25 	bl	8006b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80030ec:	2046      	movs	r0, #70	@ 0x46
 80030ee:	f003 fd3e 	bl	8006b6e <HAL_NVIC_EnableIRQ>

}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	@ 0x38
 8003104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	609a      	str	r2, [r3, #8]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	4b7c      	ldr	r3, [pc, #496]	@ (800330c <MX_GPIO_Init+0x20c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	4a7b      	ldr	r2, [pc, #492]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	6313      	str	r3, [r2, #48]	@ 0x30
 8003126:	4b79      	ldr	r3, [pc, #484]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	4b75      	ldr	r3, [pc, #468]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	4a74      	ldr	r2, [pc, #464]	@ (800330c <MX_GPIO_Init+0x20c>)
 800313c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003140:	6313      	str	r3, [r2, #48]	@ 0x30
 8003142:	4b72      	ldr	r3, [pc, #456]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	4b6e      	ldr	r3, [pc, #440]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a6d      	ldr	r2, [pc, #436]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b6b      	ldr	r3, [pc, #428]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	4b67      	ldr	r3, [pc, #412]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4a66      	ldr	r2, [pc, #408]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
 800317a:	4b64      	ldr	r3, [pc, #400]	@ (800330c <MX_GPIO_Init+0x20c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b60      	ldr	r3, [pc, #384]	@ (800330c <MX_GPIO_Init+0x20c>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4a5f      	ldr	r2, [pc, #380]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	4b59      	ldr	r3, [pc, #356]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	4a58      	ldr	r2, [pc, #352]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b2:	4b56      	ldr	r3, [pc, #344]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	4b52      	ldr	r3, [pc, #328]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4a51      	ldr	r2, [pc, #324]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ce:	4b4f      	ldr	r3, [pc, #316]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	4b4b      	ldr	r3, [pc, #300]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	4a4a      	ldr	r2, [pc, #296]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031e4:	f043 0320 	orr.w	r3, r3, #32
 80031e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ea:	4b48      	ldr	r3, [pc, #288]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	4b44      	ldr	r3, [pc, #272]	@ (800330c <MX_GPIO_Init+0x20c>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a43      	ldr	r2, [pc, #268]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003200:	f043 0310 	orr.w	r3, r3, #16
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b41      	ldr	r3, [pc, #260]	@ (800330c <MX_GPIO_Init+0x20c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003212:	2200      	movs	r2, #0
 8003214:	2140      	movs	r1, #64	@ 0x40
 8003216:	483e      	ldr	r0, [pc, #248]	@ (8003310 <MX_GPIO_Init+0x210>)
 8003218:	f004 fa62 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8003222:	483c      	ldr	r0, [pc, #240]	@ (8003314 <MX_GPIO_Init+0x214>)
 8003224:	f004 fa5c 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003228:	2200      	movs	r2, #0
 800322a:	2110      	movs	r1, #16
 800322c:	483a      	ldr	r0, [pc, #232]	@ (8003318 <MX_GPIO_Init+0x218>)
 800322e:	f004 fa57 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003232:	2200      	movs	r2, #0
 8003234:	2101      	movs	r1, #1
 8003236:	4839      	ldr	r0, [pc, #228]	@ (800331c <MX_GPIO_Init+0x21c>)
 8003238:	f004 fa52 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800323c:	2340      	movs	r3, #64	@ 0x40
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003240:	2301      	movs	r3, #1
 8003242:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003248:	2300      	movs	r3, #0
 800324a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800324c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	482f      	ldr	r0, [pc, #188]	@ (8003310 <MX_GPIO_Init+0x210>)
 8003254:	f004 f8a8 	bl	80073a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8003258:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325e:	2301      	movs	r3, #1
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800326a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800326e:	4619      	mov	r1, r3
 8003270:	4828      	ldr	r0, [pc, #160]	@ (8003314 <MX_GPIO_Init+0x214>)
 8003272:	f004 f899 	bl	80073a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003276:	2308      	movs	r3, #8
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800327a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003288:	4619      	mov	r1, r3
 800328a:	4821      	ldr	r0, [pc, #132]	@ (8003310 <MX_GPIO_Init+0x210>)
 800328c:	f004 f88c 	bl	80073a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003290:	2310      	movs	r3, #16
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003294:	2301      	movs	r3, #1
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a4:	4619      	mov	r1, r3
 80032a6:	481c      	ldr	r0, [pc, #112]	@ (8003318 <MX_GPIO_Init+0x218>)
 80032a8:	f004 f87e 	bl	80073a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80032ac:	2330      	movs	r3, #48	@ 0x30
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032be:	4619      	mov	r1, r3
 80032c0:	4817      	ldr	r0, [pc, #92]	@ (8003320 <MX_GPIO_Init+0x220>)
 80032c2:	f004 f871 	bl	80073a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032c6:	2301      	movs	r3, #1
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ca:	2301      	movs	r3, #1
 80032cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032da:	4619      	mov	r1, r3
 80032dc:	480f      	ldr	r0, [pc, #60]	@ (800331c <MX_GPIO_Init+0x21c>)
 80032de:	f004 f863 	bl	80073a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2105      	movs	r1, #5
 80032e6:	2009      	movs	r0, #9
 80032e8:	f003 fc25 	bl	8006b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80032ec:	2009      	movs	r0, #9
 80032ee:	f003 fc3e 	bl	8006b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2105      	movs	r1, #5
 80032f6:	200a      	movs	r0, #10
 80032f8:	f003 fc1d 	bl	8006b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80032fc:	200a      	movs	r0, #10
 80032fe:	f003 fc36 	bl	8006b6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003302:	bf00      	nop
 8003304:	3738      	adds	r7, #56	@ 0x38
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40021800 	.word	0x40021800
 8003314:	40021c00 	.word	0x40021c00
 8003318:	40020000 	.word	0x40020000
 800331c:	40020400 	.word	0x40020400
 8003320:	40020800 	.word	0x40020800

08003324 <positionPIDByMe>:

/* USER CODE BEGIN 4 */
int16_t positionPIDByMe(int8_t *isNegativeRegion1, int8_t *previousRegion1, int16_t DifferenceBetweenCurrentAndWannabePosition, int16_t *sumI1, float kPu, float kIu, float kDu) {
 8003324:	b480      	push	{r7}
 8003326:	b08b      	sub	sp, #44	@ 0x2c
 8003328:	af00      	add	r7, sp, #0
 800332a:	61f8      	str	r0, [r7, #28]
 800332c:	61b9      	str	r1, [r7, #24]
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	ed87 0a03 	vstr	s0, [r7, #12]
 8003334:	edc7 0a02 	vstr	s1, [r7, #8]
 8003338:	ed87 1a01 	vstr	s2, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	82fb      	strh	r3, [r7, #22]
	if (DifferenceBetweenCurrentAndWannabePosition >= 0) {
 8003340:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db03      	blt.n	8003350 <positionPIDByMe+0x2c>
		*isNegativeRegion1 = -1;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	22ff      	movs	r2, #255	@ 0xff
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e002      	b.n	8003356 <positionPIDByMe+0x32>
	} else {
		*isNegativeRegion1 = 1;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
	}
	if (*isNegativeRegion1 != *previousRegion1) {
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f993 2000 	ldrsb.w	r2, [r3]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f993 3000 	ldrsb.w	r3, [r3]
 8003362:	429a      	cmp	r2, r3
 8003364:	d002      	beq.n	800336c <positionPIDByMe+0x48>
		*sumI1 = 0;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2200      	movs	r2, #0
 800336a:	801a      	strh	r2, [r3, #0]
	}
	*previousRegion1 = *isNegativeRegion1;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f993 2000 	ldrsb.w	r2, [r3]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	701a      	strb	r2, [r3, #0]
	*sumI1 += (int)((float)(DifferenceBetweenCurrentAndWannabePosition)*0.005f);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800337c:	b29a      	uxth	r2, r3
 800337e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800338a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003428 <positionPIDByMe+0x104>
 800338e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003396:	ee17 3a90 	vmov	r3, s15
 800339a:	b29b      	uxth	r3, r3
 800339c:	4413      	add	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	b21a      	sxth	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	801a      	strh	r2, [r3, #0]
	int16_t PositionToGo = (int)(kPu*(float)(DifferenceBetweenCurrentAndWannabePosition));
 80033a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033be:	ee17 3a90 	vmov	r3, s15
 80033c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t IntegralToGo = (int)(kIu*((float)(*sumI1)));
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033de:	ee17 3a90 	vmov	r3, s15
 80033e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t DerivativeToGo = (int)((kDu)*((float)(DifferenceBetweenCurrentAndWannabePosition))*(float)200);
 80033e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800342c <positionPIDByMe+0x108>
 80033fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003404:	ee17 3a90 	vmov	r3, s15
 8003408:	847b      	strh	r3, [r7, #34]	@ 0x22
	return PositionToGo+IntegralToGo+DerivativeToGo;
 800340a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800340c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800340e:	4413      	add	r3, r2
 8003410:	b29a      	uxth	r2, r3
 8003412:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003414:	4413      	add	r3, r2
 8003416:	b29b      	uxth	r3, r3
 8003418:	b21b      	sxth	r3, r3
}
 800341a:	4618      	mov	r0, r3
 800341c:	372c      	adds	r7, #44	@ 0x2c
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	3ba3d70a 	.word	0x3ba3d70a
 800342c:	43480000 	.word	0x43480000

08003430 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8003438:	2201      	movs	r2, #1
 800343a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800343e:	480f      	ldr	r0, [pc, #60]	@ (800347c <TaskMain+0x4c>)
 8003440:	f004 f94e 	bl	80076e0 <HAL_GPIO_WritePin>
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8003444:	f7fd fe26 	bl	8001094 <BMI088_accel_init>
		// usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8003448:	f7fd fedc 	bl	8001204 <BMI088_gyro_init>
		// usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
	}
	if (ist8310_init()) {
 800344c:	f7ff f846 	bl	80024dc <ist8310_init>
	// __HAL_TIM_PRESCALER(&htim4, 0);
	// osDelay(150);
	// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);

	for(;;) {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003456:	4809      	ldr	r0, [pc, #36]	@ (800347c <TaskMain+0x4c>)
 8003458:	f004 f942 	bl	80076e0 <HAL_GPIO_WritePin>
		//set_motor_voltage(5, 4000);
		osDelay(500);
 800345c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003460:	f008 fb06 	bl	800ba70 <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8003464:	2201      	movs	r2, #1
 8003466:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800346a:	4804      	ldr	r0, [pc, #16]	@ (800347c <TaskMain+0x4c>)
 800346c:	f004 f938 	bl	80076e0 <HAL_GPIO_WritePin>
		//set_motor_voltage(5, -4000);
		osDelay(500);
 8003470:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003474:	f008 fafc 	bl	800ba70 <osDelay>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 8003478:	bf00      	nop
 800347a:	e7e9      	b.n	8003450 <TaskMain+0x20>
 800347c:	40021c00 	.word	0x40021c00

08003480 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b0d0      	sub	sp, #320	@ 0x140
 8003486:	af00      	add	r7, sp, #0
 8003488:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800348c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003490:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN TaskChassis */
	/* USER CODE BEGIN TaskChassis */
	int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 8003492:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]
	int16_t rcPitch = 0;                                   // range: 3376 ~ 2132
 800349c:	2300      	movs	r3, #0
 800349e:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
	//int16_t targetRPM[4] = {0,0,0,0};
  /* Infinite loop */

	// Test Code
	HAL_TIM_Base_Start(&htim1);
 80034a2:	4880      	ldr	r0, [pc, #512]	@ (80036a4 <TaskChassis+0x224>)
 80034a4:	f006 f8d2 	bl	800964c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 80034a8:	487f      	ldr	r0, [pc, #508]	@ (80036a8 <TaskChassis+0x228>)
 80034aa:	f006 f8cf 	bl	800964c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80034ae:	2100      	movs	r1, #0
 80034b0:	487c      	ldr	r0, [pc, #496]	@ (80036a4 <TaskChassis+0x224>)
 80034b2:	f006 f983 	bl	80097bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80034b6:	2104      	movs	r1, #4
 80034b8:	487a      	ldr	r0, [pc, #488]	@ (80036a4 <TaskChassis+0x224>)
 80034ba:	f006 f97f 	bl	80097bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80034be:	2108      	movs	r1, #8
 80034c0:	4879      	ldr	r0, [pc, #484]	@ (80036a8 <TaskChassis+0x228>)
 80034c2:	f006 f97b 	bl	80097bc <HAL_TIM_PWM_Start>
	htim4.Instance->CCR3=0;
 80034c6:	4b78      	ldr	r3, [pc, #480]	@ (80036a8 <TaskChassis+0x228>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	int8_t motorOn = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	int8_t switched = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
	int8_t shot1Round = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	//int8_t RNC = 0;
	int16_t sumI1 =0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	int16_t sumI2 =0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	int16_t sumI3 =0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
	int16_t sumI4 =0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
	int8_t isNegativeRegion1 = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int8_t isNegativeRegion2 = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	int8_t isNegativeRegion3 = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
	int8_t isNegativeRegion4 = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	int8_t previousRegion1 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	int8_t previousRegion2 = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	int8_t previousRegion3 = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
	int8_t previousRegion4 = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
	int16_t shooterMotor = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	// int16_t pR = 0;
	//int8_t counter = 0;
	uint16_t testmotor = 6161;
 800352e:	f641 0311 	movw	r3, #6161	@ 0x1811
 8003532:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t pivoter = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	double angle = 0;
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	int16_t xJoystickDirection = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	int16_t yJoystickDirection = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	int16_t rotationOfChassis = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
	// Total Rotation is 1.25 times for 90degrees therefore motor has to rotate
	// PID onto this (This is the hypothetical orientation)
	int16_t chassisOrientation = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
	int16_t chassisPID = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
	int16_t rcVal2 = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

	int16_t randomOrientations[24] = {-380, -202, 462, -114, 240, -210, 150, 170, 248, 106, 118, 538, -260, -288, -120, 86, -264, 452, -592, 390, -410, 414, 54, -542};
 800356c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003570:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003574:	4a4d      	ldr	r2, [pc, #308]	@ (80036ac <TaskChassis+0x22c>)
 8003576:	461c      	mov	r4, r3
 8003578:	4615      	mov	r5, r2
 800357a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800357e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003582:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t startingVal = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
	int8_t started = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	uint8_t increment = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
	int16_t instancesCounter = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118

	int16_t previousVal = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
	int32_t rotationalVal = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	int16_t revolutions = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	int8_t resetPerStart = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
	int32_t rotationTarget = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	int32_t posForGunMotor = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	int8_t burst = 3;
 80035c6:	2303      	movs	r3, #3
 80035c8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

	int8_t customFiringModeSwitcher = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
	int8_t startedChecking = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
	int8_t switchedDown = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
	int8_t finalTHing = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
	int16_t counterForSwitching = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100

	int16_t buzzLengthCounter = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
	int8_t beepingInProgress = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
	int8_t beeped = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd

	float rotationPositionZ = 0;
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	float rotationPositionY = 0;
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	int8_t average = 5;
 800360c:	2305      	movs	r3, #5
 800360e:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
	int16_t averageY[average];
 8003612:	f997 10ca 	ldrsb.w	r1, [r7, #202]	@ 0xca
 8003616:	460b      	mov	r3, r1
 8003618:	3b01      	subs	r3, #1
 800361a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800361e:	460a      	mov	r2, r1
 8003620:	2300      	movs	r3, #0
 8003622:	4692      	mov	sl, r2
 8003624:	469b      	mov	fp, r3
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8003632:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8003636:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800363a:	460a      	mov	r2, r1
 800363c:	2300      	movs	r3, #0
 800363e:	4690      	mov	r8, r2
 8003640:	4699      	mov	r9, r3
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800364e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003652:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003656:	460b      	mov	r3, r1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	3307      	adds	r3, #7
 800365c:	08db      	lsrs	r3, r3, #3
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	ebad 0d03 	sub.w	sp, sp, r3
 8003664:	466b      	mov	r3, sp
 8003666:	3301      	adds	r3, #1
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	for (int i = 0; i < average; i++) {
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003676:	e00b      	b.n	8003690 <TaskChassis+0x210>
		averageY[i] = 0;
 8003678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800367c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8003680:	2100      	movs	r1, #0
 8003682:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < average; i++) {
 8003686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800368a:	3301      	adds	r3, #1
 800368c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003690:	f997 30ca 	ldrsb.w	r3, [r7, #202]	@ 0xca
 8003694:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8003698:	429a      	cmp	r2, r3
 800369a:	dbed      	blt.n	8003678 <TaskChassis+0x1f8>
	}

	for(;;) {
		for (int i = 0; i < 4; i++) {
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80036a2:	e02c      	b.n	80036fe <TaskChassis+0x27e>
 80036a4:	20000874 	.word	0x20000874
 80036a8:	200008bc 	.word	0x200008bc
 80036ac:	08012670 	.word	0x08012670
 80036b0:	415a51ec 	.word	0x415a51ec
 80036b4:	3f70a3d7 	.word	0x3f70a3d7
 80036b8:	452c2000 	.word	0x452c2000
			rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 80036bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fbbc 	bl	8004e40 <getRCchannel>
 80036c8:	4603      	mov	r3, r0
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d2:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 80036b0 <TaskChassis+0x230>
 80036d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036de:	ee17 3a90 	vmov	r3, s15
 80036e2:	b21a      	sxth	r2, r3
 80036e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80036ee:	443b      	add	r3, r7
 80036f0:	f823 2ce8 	strh.w	r2, [r3, #-232]
		for (int i = 0; i < 4; i++) {
 80036f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80036f8:	3301      	adds	r3, #1
 80036fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80036fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003702:	2b03      	cmp	r3, #3
 8003704:	ddda      	ble.n	80036bc <TaskChassis+0x23c>
		}
		rcPitch = getRCchannel(1) * 0.94f + 2754;
 8003706:	2001      	movs	r0, #1
 8003708:	f001 fb9a 	bl	8004e40 <getRCchannel>
 800370c:	4603      	mov	r3, r0
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003716:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80036b4 <TaskChassis+0x234>
 800371a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800371e:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 80036b8 <TaskChassis+0x238>
 8003722:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800372a:	ee17 3a90 	vmov	r3, s15
 800372e:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
		int16_t leftDial = getRCchannel(4);
 8003732:	2004      	movs	r0, #4
 8003734:	f001 fb84 	bl	8004e40 <getRCchannel>
 8003738:	4603      	mov	r3, r0
 800373a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

		int8_t chassisTurning = getRCswitch(1);
 800373e:	2001      	movs	r0, #1
 8003740:	f001 fb92 	bl	8004e68 <getRCswitch>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd

		float funnyKP = 0.022;
 800374a:	4ba2      	ldr	r3, [pc, #648]	@ (80039d4 <TaskChassis+0x554>)
 800374c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
		float funnyKI = -0.02;
 8003750:	4ba1      	ldr	r3, [pc, #644]	@ (80039d8 <TaskChassis+0x558>)
 8003752:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		float funnyKD = 0.00005;
 8003756:	4ba1      	ldr	r3, [pc, #644]	@ (80039dc <TaskChassis+0x55c>)
 8003758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		float rotationScalar = -540; //-540
 800375c:	4ba0      	ldr	r3, [pc, #640]	@ (80039e0 <TaskChassis+0x560>)
 800375e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

		if (counterForSwitching > 200) {
 8003762:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 8003766:	2bc8      	cmp	r3, #200	@ 0xc8
 8003768:	dd0b      	ble.n	8003782 <TaskChassis+0x302>
			startedChecking = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
			switchedDown = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
			finalTHing = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
			counterForSwitching = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
		}

		if (startedChecking == 1) {
 8003782:	f997 3105 	ldrsb.w	r3, [r7, #261]	@ 0x105
 8003786:	2b01      	cmp	r3, #1
 8003788:	d106      	bne.n	8003798 <TaskChassis+0x318>
			counterForSwitching++;
 800378a:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 800378e:	b29b      	uxth	r3, r3
 8003790:	3301      	adds	r3, #1
 8003792:	b29b      	uxth	r3, r3
 8003794:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
		}

		int8_t movementUpOrDown = 5;
 8003798:	2305      	movs	r3, #5
 800379a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
		if (increment == 18) {
 800379e:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 80037a2:	2b12      	cmp	r3, #18
 80037a4:	d102      	bne.n	80037ac <TaskChassis+0x32c>
			increment = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
		}

		if (instancesCounter > 100) {
 80037ac:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 80037b0:	2b64      	cmp	r3, #100	@ 0x64
 80037b2:	dd07      	ble.n	80037c4 <TaskChassis+0x344>
			increment++;
 80037b4:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 80037b8:	3301      	adds	r3, #1
 80037ba:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
			instancesCounter = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
		}

		if (chassisTurning == 1 && startedChecking == 0) {
 80037c4:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d109      	bne.n	80037e0 <TaskChassis+0x360>
 80037cc:	f997 3105 	ldrsb.w	r3, [r7, #261]	@ 0x105
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <TaskChassis+0x360>
			counterForSwitching = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
			startedChecking = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105

		}
		if (chassisTurning == 3 && startedChecking == 1) {
 80037e0:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d106      	bne.n	80037f6 <TaskChassis+0x376>
 80037e8:	f997 3105 	ldrsb.w	r3, [r7, #261]	@ 0x105
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <TaskChassis+0x376>
			switchedDown = 1;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
		}
		if (chassisTurning == 1 && startedChecking == 1 && switchedDown == 1) {
 80037f6:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d10a      	bne.n	8003814 <TaskChassis+0x394>
 80037fe:	f997 3105 	ldrsb.w	r3, [r7, #261]	@ 0x105
 8003802:	2b01      	cmp	r3, #1
 8003804:	d106      	bne.n	8003814 <TaskChassis+0x394>
 8003806:	f997 3104 	ldrsb.w	r3, [r7, #260]	@ 0x104
 800380a:	2b01      	cmp	r3, #1
 800380c:	d102      	bne.n	8003814 <TaskChassis+0x394>
			finalTHing = 1;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
		}

		if (chassisTurning == 3 && startedChecking == 1 && switchedDown == 1 && finalTHing == 1 && counterForSwitching < 200) {
 8003814:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 8003818:	2b03      	cmp	r3, #3
 800381a:	d128      	bne.n	800386e <TaskChassis+0x3ee>
 800381c:	f997 3105 	ldrsb.w	r3, [r7, #261]	@ 0x105
 8003820:	2b01      	cmp	r3, #1
 8003822:	d124      	bne.n	800386e <TaskChassis+0x3ee>
 8003824:	f997 3104 	ldrsb.w	r3, [r7, #260]	@ 0x104
 8003828:	2b01      	cmp	r3, #1
 800382a:	d120      	bne.n	800386e <TaskChassis+0x3ee>
 800382c:	f997 3103 	ldrsb.w	r3, [r7, #259]	@ 0x103
 8003830:	2b01      	cmp	r3, #1
 8003832:	d11c      	bne.n	800386e <TaskChassis+0x3ee>
 8003834:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	@ 0x100
 8003838:	2bc7      	cmp	r3, #199	@ 0xc7
 800383a:	dc18      	bgt.n	800386e <TaskChassis+0x3ee>
			switchedDown = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
			startedChecking = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
			counterForSwitching = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
			finalTHing = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
			customFiringModeSwitcher++;
 8003854:	f997 3106 	ldrsb.w	r3, [r7, #262]	@ 0x106
 8003858:	b2db      	uxtb	r3, r3
 800385a:	3301      	adds	r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
			beeped = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
			buzzLengthCounter = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

		}
		if (customFiringModeSwitcher > 2) {
 800386e:	f997 3106 	ldrsb.w	r3, [r7, #262]	@ 0x106
 8003872:	2b02      	cmp	r3, #2
 8003874:	dd02      	ble.n	800387c <TaskChassis+0x3fc>
			customFiringModeSwitcher = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
		}


		// usart_printf("$%d %d %d %d\r\n;",customFiringModeSwitcher, startedChecking, switchedDown, counterForSwitching);

		if (beeped == 0) {
 800387c:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 8003880:	2b00      	cmp	r3, #0
 8003882:	f040 809f 	bne.w	80039c4 <TaskChassis+0x544>
			switch (customFiringModeSwitcher) {
 8003886:	f997 3106 	ldrsb.w	r3, [r7, #262]	@ 0x106
 800388a:	2b02      	cmp	r3, #2
 800388c:	d057      	beq.n	800393e <TaskChassis+0x4be>
 800388e:	2b02      	cmp	r3, #2
 8003890:	f300 8098 	bgt.w	80039c4 <TaskChassis+0x544>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <TaskChassis+0x41e>
 8003898:	2b01      	cmp	r3, #1
 800389a:	d028      	beq.n	80038ee <TaskChassis+0x46e>
 800389c:	e092      	b.n	80039c4 <TaskChassis+0x544>
			case 0:
				if ((buzzLengthCounter == 0)) {
 800389e:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <TaskChassis+0x43c>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					htim4.Instance->CCR3=150;
 80038a6:	4b4f      	ldr	r3, [pc, #316]	@ (80039e4 <TaskChassis+0x564>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2296      	movs	r2, #150	@ 0x96
 80038ac:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 80038ae:	2201      	movs	r2, #1
 80038b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038b4:	484c      	ldr	r0, [pc, #304]	@ (80039e8 <TaskChassis+0x568>)
 80038b6:	f003 ff13 	bl	80076e0 <HAL_GPIO_WritePin>
 80038ba:	e010      	b.n	80038de <TaskChassis+0x45e>
				}
				else if (buzzLengthCounter >=60) {
 80038bc:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 80038c0:	2b3b      	cmp	r3, #59	@ 0x3b
 80038c2:	dd0c      	ble.n	80038de <TaskChassis+0x45e>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
					htim4.Instance->CCR3=0;
 80038ca:	4b46      	ldr	r3, [pc, #280]	@ (80039e4 <TaskChassis+0x564>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2200      	movs	r2, #0
 80038d0:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038d8:	4843      	ldr	r0, [pc, #268]	@ (80039e8 <TaskChassis+0x568>)
 80038da:	f003 ff01 	bl	80076e0 <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 80038de:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				break;
 80038ec:	e06a      	b.n	80039c4 <TaskChassis+0x544>
			case 1:
				if (buzzLengthCounter == 0) {
 80038ee:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <TaskChassis+0x48c>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					htim4.Instance->CCR3=150;
 80038f6:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <TaskChassis+0x564>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2296      	movs	r2, #150	@ 0x96
 80038fc:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 80038fe:	2201      	movs	r2, #1
 8003900:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003904:	4838      	ldr	r0, [pc, #224]	@ (80039e8 <TaskChassis+0x568>)
 8003906:	f003 feeb 	bl	80076e0 <HAL_GPIO_WritePin>
 800390a:	e010      	b.n	800392e <TaskChassis+0x4ae>
				} else if (buzzLengthCounter >=12) {
 800390c:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8003910:	2b0b      	cmp	r3, #11
 8003912:	dd0c      	ble.n	800392e <TaskChassis+0x4ae>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
					htim4.Instance->CCR3=0;
 800391a:	4b32      	ldr	r3, [pc, #200]	@ (80039e4 <TaskChassis+0x564>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003928:	482f      	ldr	r0, [pc, #188]	@ (80039e8 <TaskChassis+0x568>)
 800392a:	f003 fed9 	bl	80076e0 <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 800392e:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8003932:	b29b      	uxth	r3, r3
 8003934:	3301      	adds	r3, #1
 8003936:	b29b      	uxth	r3, r3
 8003938:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				break;
 800393c:	e042      	b.n	80039c4 <TaskChassis+0x544>
			case 2:
				if ((buzzLengthCounter == 0) || (buzzLengthCounter == 30) || (buzzLengthCounter == 60)) {
 800393e:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <TaskChassis+0x4d6>
 8003946:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 800394a:	2b1e      	cmp	r3, #30
 800394c:	d003      	beq.n	8003956 <TaskChassis+0x4d6>
 800394e:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8003952:	2b3c      	cmp	r3, #60	@ 0x3c
 8003954:	d10a      	bne.n	800396c <TaskChassis+0x4ec>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					htim4.Instance->CCR3=150;
 8003956:	4b23      	ldr	r3, [pc, #140]	@ (80039e4 <TaskChassis+0x564>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2296      	movs	r2, #150	@ 0x96
 800395c:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
 800395e:	2201      	movs	r2, #1
 8003960:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003964:	4820      	ldr	r0, [pc, #128]	@ (80039e8 <TaskChassis+0x568>)
 8003966:	f003 febb 	bl	80076e0 <HAL_GPIO_WritePin>
 800396a:	e023      	b.n	80039b4 <TaskChassis+0x534>
				} else if ((buzzLengthCounter == 15) || (buzzLengthCounter == 45)) {
 800396c:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d003      	beq.n	800397c <TaskChassis+0x4fc>
 8003974:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8003978:	2b2d      	cmp	r3, #45	@ 0x2d
 800397a:	d10a      	bne.n	8003992 <TaskChassis+0x512>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					htim4.Instance->CCR3=0;
 800397c:	4b19      	ldr	r3, [pc, #100]	@ (80039e4 <TaskChassis+0x564>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2200      	movs	r2, #0
 8003982:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 8003984:	2200      	movs	r2, #0
 8003986:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800398a:	4817      	ldr	r0, [pc, #92]	@ (80039e8 <TaskChassis+0x568>)
 800398c:	f003 fea8 	bl	80076e0 <HAL_GPIO_WritePin>
 8003990:	e010      	b.n	80039b4 <TaskChassis+0x534>
				} else if (buzzLengthCounter >=75) {
 8003992:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8003996:	2b4a      	cmp	r3, #74	@ 0x4a
 8003998:	dd0c      	ble.n	80039b4 <TaskChassis+0x534>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
					htim4.Instance->CCR3=0;
 80039a0:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <TaskChassis+0x564>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	63da      	str	r2, [r3, #60]	@ 0x3c
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039ae:	480e      	ldr	r0, [pc, #56]	@ (80039e8 <TaskChassis+0x568>)
 80039b0:	f003 fe96 	bl	80076e0 <HAL_GPIO_WritePin>
				}
				buzzLengthCounter++;
 80039b4:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
				break;
 80039c2:	bf00      	nop
			}
		}



		switch (chassisTurning) {
 80039c4:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d00f      	beq.n	80039ec <TaskChassis+0x56c>
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d07f      	beq.n	8003ad0 <TaskChassis+0x650>
 80039d0:	e1cf      	b.n	8003d72 <TaskChassis+0x8f2>
 80039d2:	bf00      	nop
 80039d4:	3cb43958 	.word	0x3cb43958
 80039d8:	bca3d70a 	.word	0xbca3d70a
 80039dc:	3851b717 	.word	0x3851b717
 80039e0:	c4070000 	.word	0xc4070000
 80039e4:	200008bc 	.word	0x200008bc
 80039e8:	40021c00 	.word	0x40021c00
		case 1:
			xJoystickDirection = rcRPM[2]*cos(angle) - rcRPM[3]*sin(angle);
 80039ec:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc fd97 	bl	8000524 <__aeabi_i2d>
 80039f6:	4604      	mov	r4, r0
 80039f8:	460d      	mov	r5, r1
 80039fa:	ed97 0b4a 	vldr	d0, [r7, #296]	@ 0x128
 80039fe:	f00d fd83 	bl	8011508 <cos>
 8003a02:	ec53 2b10 	vmov	r2, r3, d0
 8003a06:	4620      	mov	r0, r4
 8003a08:	4629      	mov	r1, r5
 8003a0a:	f7fc fdf5 	bl	80005f8 <__aeabi_dmul>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4690      	mov	r8, r2
 8003a14:	4699      	mov	r9, r3
 8003a16:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fd82 	bl	8000524 <__aeabi_i2d>
 8003a20:	4604      	mov	r4, r0
 8003a22:	460d      	mov	r5, r1
 8003a24:	ed97 0b4a 	vldr	d0, [r7, #296]	@ 0x128
 8003a28:	f00d fdc2 	bl	80115b0 <sin>
 8003a2c:	ec53 2b10 	vmov	r2, r3, d0
 8003a30:	4620      	mov	r0, r4
 8003a32:	4629      	mov	r1, r5
 8003a34:	f7fc fde0 	bl	80005f8 <__aeabi_dmul>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	4649      	mov	r1, r9
 8003a40:	f7fc fc22 	bl	8000288 <__aeabi_dsub>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f7fd f884 	bl	8000b58 <__aeabi_d2iz>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
			yJoystickDirection = rcRPM[2]*sin(angle) + rcRPM[3]*cos(angle);
 8003a56:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fd62 	bl	8000524 <__aeabi_i2d>
 8003a60:	4604      	mov	r4, r0
 8003a62:	460d      	mov	r5, r1
 8003a64:	ed97 0b4a 	vldr	d0, [r7, #296]	@ 0x128
 8003a68:	f00d fda2 	bl	80115b0 <sin>
 8003a6c:	ec53 2b10 	vmov	r2, r3, d0
 8003a70:	4620      	mov	r0, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	f7fc fdc0 	bl	80005f8 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4690      	mov	r8, r2
 8003a7e:	4699      	mov	r9, r3
 8003a80:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd4d 	bl	8000524 <__aeabi_i2d>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	ed97 0b4a 	vldr	d0, [r7, #296]	@ 0x128
 8003a92:	f00d fd39 	bl	8011508 <cos>
 8003a96:	ec53 2b10 	vmov	r2, r3, d0
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f7fc fdab 	bl	80005f8 <__aeabi_dmul>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	f7fc fbef 	bl	800028c <__adddf3>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f7fd f84f 	bl	8000b58 <__aeabi_d2iz>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
			rotationOfChassis = rcRPM[0];
 8003ac0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003ac4:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122


			started = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b



			break;
 8003ace:	e15f      	b.n	8003d90 <TaskChassis+0x910>
		case 2:
			int8_t delta = 5;
 8003ad0:	2305      	movs	r3, #5
 8003ad2:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
			if (started == 0) {
 8003ad6:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d105      	bne.n	8003aea <TaskChassis+0x66a>
				startingVal = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				started = 1;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
			}
			if (startingVal >= randomOrientations[increment]-delta && startingVal <= randomOrientations[increment]+delta) {
 8003aea:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	@ 0x11c
 8003aee:	f897 111a 	ldrb.w	r1, [r7, #282]	@ 0x11a
 8003af2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003af6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003afa:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8003afe:	4619      	mov	r1, r3
 8003b00:	f997 30aa 	ldrsb.w	r3, [r7, #170]	@ 0xaa
 8003b04:	1acb      	subs	r3, r1, r3
 8003b06:	429a      	cmp	r2, r3
 8003b08:	db17      	blt.n	8003b3a <TaskChassis+0x6ba>
 8003b0a:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	@ 0x11c
 8003b0e:	f897 111a 	ldrb.w	r1, [r7, #282]	@ 0x11a
 8003b12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b16:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003b1a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f997 30aa 	ldrsb.w	r3, [r7, #170]	@ 0xaa
 8003b24:	440b      	add	r3, r1
 8003b26:	429a      	cmp	r2, r3
 8003b28:	dc07      	bgt.n	8003b3a <TaskChassis+0x6ba>
				instancesCounter++;
 8003b2a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8003b38:	e022      	b.n	8003b80 <TaskChassis+0x700>
			} else if (startingVal > randomOrientations[increment]-delta) {
 8003b3a:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	@ 0x11c
 8003b3e:	f897 111a 	ldrb.w	r1, [r7, #282]	@ 0x11a
 8003b42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003b46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003b4a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f997 30aa 	ldrsb.w	r3, [r7, #170]	@ 0xaa
 8003b54:	1acb      	subs	r3, r1, r3
 8003b56:	429a      	cmp	r2, r3
 8003b58:	dd09      	ble.n	8003b6e <TaskChassis+0x6ee>
				startingVal -= movementUpOrDown;
 8003b5a:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8003b5e:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
 8003b6c:	e008      	b.n	8003b80 <TaskChassis+0x700>
			} else {
				startingVal += movementUpOrDown;
 8003b6e:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8003b78:	4413      	add	r3, r2
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
			}


			xJoystickDirection = rcRPM[2]*cos(angle) - rcRPM[3]*sin(angle);
 8003b80:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fccd 	bl	8000524 <__aeabi_i2d>
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	460d      	mov	r5, r1
 8003b8e:	ed97 0b4a 	vldr	d0, [r7, #296]	@ 0x128
 8003b92:	f00d fcb9 	bl	8011508 <cos>
 8003b96:	ec53 2b10 	vmov	r2, r3, d0
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7fc fd2b 	bl	80005f8 <__aeabi_dmul>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4690      	mov	r8, r2
 8003ba8:	4699      	mov	r9, r3
 8003baa:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fcb8 	bl	8000524 <__aeabi_i2d>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	460d      	mov	r5, r1
 8003bb8:	ed97 0b4a 	vldr	d0, [r7, #296]	@ 0x128
 8003bbc:	f00d fcf8 	bl	80115b0 <sin>
 8003bc0:	ec53 2b10 	vmov	r2, r3, d0
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	f7fc fd16 	bl	80005f8 <__aeabi_dmul>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4640      	mov	r0, r8
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	f7fc fb58 	bl	8000288 <__aeabi_dsub>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fc ffba 	bl	8000b58 <__aeabi_d2iz>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
			yJoystickDirection = rcRPM[2]*sin(angle) + rcRPM[3]*cos(angle);
 8003bea:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fc98 	bl	8000524 <__aeabi_i2d>
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	460d      	mov	r5, r1
 8003bf8:	ed97 0b4a 	vldr	d0, [r7, #296]	@ 0x128
 8003bfc:	f00d fcd8 	bl	80115b0 <sin>
 8003c00:	ec53 2b10 	vmov	r2, r3, d0
 8003c04:	4620      	mov	r0, r4
 8003c06:	4629      	mov	r1, r5
 8003c08:	f7fc fcf6 	bl	80005f8 <__aeabi_dmul>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4690      	mov	r8, r2
 8003c12:	4699      	mov	r9, r3
 8003c14:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fc fc83 	bl	8000524 <__aeabi_i2d>
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460d      	mov	r5, r1
 8003c22:	ed97 0b4a 	vldr	d0, [r7, #296]	@ 0x128
 8003c26:	f00d fc6f 	bl	8011508 <cos>
 8003c2a:	ec53 2b10 	vmov	r2, r3, d0
 8003c2e:	4620      	mov	r0, r4
 8003c30:	4629      	mov	r1, r5
 8003c32:	f7fc fce1 	bl	80005f8 <__aeabi_dmul>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	f7fc fb25 	bl	800028c <__adddf3>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f7fc ff85 	bl	8000b58 <__aeabi_d2iz>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
			int16_t hypotheticalP = funnyKP*(startingVal - chassisOrientation);
 8003c54:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	@ 0x11c
 8003c58:	f9b7 3120 	ldrsh.w	r3, [r7, #288]	@ 0x120
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c66:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c72:	ee17 3a90 	vmov	r3, s15
 8003c76:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
			if (hypotheticalP >= 0) {
 8003c7a:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	db03      	blt.n	8003c8a <TaskChassis+0x80a>
				isNegativeRegion3 = -1;
 8003c82:	23ff      	movs	r3, #255	@ 0xff
 8003c84:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
 8003c88:	e002      	b.n	8003c90 <TaskChassis+0x810>
			} else {
				isNegativeRegion3 = 1;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
			}
			if (hypotheticalP != previousRegion3) {
 8003c90:	f997 3139 	ldrsb.w	r3, [r7, #313]	@ 0x139
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	f9b7 20a8 	ldrsh.w	r2, [r7, #168]	@ 0xa8
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d002      	beq.n	8003ca4 <TaskChassis+0x824>
				sumI3 = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
			}
			previousRegion3 = hypotheticalP;
 8003ca4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8003ca8:	f887 3139 	strb.w	r3, [r7, #313]	@ 0x139
			sumI3 += (startingVal - chassisOrientation)*0.005;
 8003cac:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	@ 0x13c
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fc fc37 	bl	8000524 <__aeabi_i2d>
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	460d      	mov	r5, r1
 8003cba:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	@ 0x11c
 8003cbe:	f9b7 3120 	ldrsh.w	r3, [r7, #288]	@ 0x120
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fc2d 	bl	8000524 <__aeabi_i2d>
 8003cca:	a3c7      	add	r3, pc, #796	@ (adr r3, 8003fe8 <TaskChassis+0xb68>)
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f7fc fc92 	bl	80005f8 <__aeabi_dmul>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4620      	mov	r0, r4
 8003cda:	4629      	mov	r1, r5
 8003cdc:	f7fc fad6 	bl	800028c <__adddf3>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f7fc ff36 	bl	8000b58 <__aeabi_d2iz>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
			int16_t hypotheticalI = funnyKI*(sumI3);
 8003cf2:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	@ 0x13c
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cfe:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d0a:	ee17 3a90 	vmov	r3, s15
 8003d0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
			int16_t hypotheticalD = funnyKD*(startingVal - chassisOrientation)*200;
 8003d12:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	@ 0x11c
 8003d16:	f9b7 3120 	ldrsh.w	r3, [r7, #288]	@ 0x120
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d24:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2c:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8003ff0 <TaskChassis+0xb70>
 8003d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d38:	ee17 3a90 	vmov	r3, s15
 8003d3c:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
			chassisPID = hypotheticalP + hypotheticalI + hypotheticalD;
 8003d40:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	@ 0xa8
 8003d44:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003d48:	4413      	add	r3, r2
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8003d50:	4413      	add	r3, r2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
			chassisOrientation += chassisPID;
 8003d58:	f8b7 2120 	ldrh.w	r2, [r7, #288]	@ 0x120
 8003d5c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8003d60:	4413      	add	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
			//rotationOfChassis = rcRPM[0]+rotationScalar*chassisPID;

			rotationOfChassis = rcRPM[0];
 8003d68:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003d6c:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
			chassisPID = hypotheticalP + hypotheticalI + hypotheticalD;
			chassisOrientation += chassisPID;
			rotationOfChassis = rcRPM[0]+rotationScalar*chassisPID;
			*/

			break;
 8003d70:	e00e      	b.n	8003d90 <TaskChassis+0x910>
		default:
			started = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
			xJoystickDirection = rcRPM[2];
 8003d78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8003d7c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
			yJoystickDirection = rcRPM[3];
 8003d80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003d84:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
			rotationOfChassis = rcRPM[0];
 8003d88:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003d8c:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
		}
		// int16_t chassisConvert = ((-1*(chassisOrientation))*3.32f)+4755;


		chassisTargetRPM.motorRPM[0] = yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003d90:	f8b7 2124 	ldrh.w	r2, [r7, #292]	@ 0x124
 8003d94:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003d98:	4413      	add	r3, r2
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8003da0:	4413      	add	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	b21a      	sxth	r2, r3
 8003da6:	4b93      	ldr	r3, [pc, #588]	@ (8003ff4 <TaskChassis+0xb74>)
 8003da8:	801a      	strh	r2, [r3, #0]
		chassisTargetRPM.motorRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003daa:	f8b7 2124 	ldrh.w	r2, [r7, #292]	@ 0x124
 8003dae:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003db2:	4413      	add	r3, r2
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	b21a      	sxth	r2, r3
 8003dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8003ff4 <TaskChassis+0xb74>)
 8003dc2:	805a      	strh	r2, [r3, #2]
		chassisTargetRPM.motorRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003dc4:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 8003dc8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	b21a      	sxth	r2, r3
 8003dda:	4b86      	ldr	r3, [pc, #536]	@ (8003ff4 <TaskChassis+0xb74>)
 8003ddc:	809a      	strh	r2, [r3, #4]
		chassisTargetRPM.motorRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003dde:	f8b7 2122 	ldrh.w	r2, [r7, #290]	@ 0x122
 8003de2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8003dee:	4413      	add	r3, r2
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	b21a      	sxth	r2, r3
 8003df4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff4 <TaskChassis+0xb74>)
 8003df6:	80da      	strh	r2, [r3, #6]
		//if (calcChassisPower >= 30) {
		//chassisTargetCurrent = applyPowerlimit(chassis, chassisTargetRPM, calcChassisPower);

		//CAN1_cmd_b2b(CAN_b2b_A_ID, 1, 1, 1, 1);

		float kPg = 0.1;
 8003df8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff8 <TaskChassis+0xb78>)
 8003dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		float kIg = 0;
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		float kDg = 0;
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (customFiringModeSwitcher == 1) {
 8003e0e:	f997 3106 	ldrsb.w	r3, [r7, #262]	@ 0x106
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d103      	bne.n	8003e1e <TaskChassis+0x99e>
			burst = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8003e1c:	e006      	b.n	8003e2c <TaskChassis+0x9ac>
		} else if (customFiringModeSwitcher == 2) {
 8003e1e:	f997 3106 	ldrsb.w	r3, [r7, #262]	@ 0x106
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d102      	bne.n	8003e2c <TaskChassis+0x9ac>
			burst = 3;
 8003e26:	2303      	movs	r3, #3
 8003e28:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107





		setM3508RPM(1, chassisTargetRPM.motorRPM[0], chassisPreset);
 8003e2c:	4b71      	ldr	r3, [pc, #452]	@ (8003ff4 <TaskChassis+0xb74>)
 8003e2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e32:	4b72      	ldr	r3, [pc, #456]	@ (8003ffc <TaskChassis+0xb7c>)
 8003e34:	edd3 6a00 	vldr	s13, [r3]
 8003e38:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e40:	eeb0 0a66 	vmov.f32	s0, s13
 8003e44:	eef0 0a47 	vmov.f32	s1, s14
 8003e48:	eeb0 1a67 	vmov.f32	s2, s15
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fd ff5e 	bl	8001d10 <setM3508RPM>
		setM3508RPM(2, chassisTargetRPM.motorRPM[1], chassisPreset);
 8003e54:	4b67      	ldr	r3, [pc, #412]	@ (8003ff4 <TaskChassis+0xb74>)
 8003e56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003e5a:	4b68      	ldr	r3, [pc, #416]	@ (8003ffc <TaskChassis+0xb7c>)
 8003e5c:	edd3 6a00 	vldr	s13, [r3]
 8003e60:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e64:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e68:	eeb0 0a66 	vmov.f32	s0, s13
 8003e6c:	eef0 0a47 	vmov.f32	s1, s14
 8003e70:	eeb0 1a67 	vmov.f32	s2, s15
 8003e74:	4611      	mov	r1, r2
 8003e76:	2002      	movs	r0, #2
 8003e78:	f7fd ff4a 	bl	8001d10 <setM3508RPM>
		setM3508RPM(3, chassisTargetRPM.motorRPM[2], chassisPreset);
 8003e7c:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff4 <TaskChassis+0xb74>)
 8003e7e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003e82:	4b5e      	ldr	r3, [pc, #376]	@ (8003ffc <TaskChassis+0xb7c>)
 8003e84:	edd3 6a00 	vldr	s13, [r3]
 8003e88:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e90:	eeb0 0a66 	vmov.f32	s0, s13
 8003e94:	eef0 0a47 	vmov.f32	s1, s14
 8003e98:	eeb0 1a67 	vmov.f32	s2, s15
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	2003      	movs	r0, #3
 8003ea0:	f7fd ff36 	bl	8001d10 <setM3508RPM>
		setM3508RPM(4, chassisTargetRPM.motorRPM[3], chassisPreset);
 8003ea4:	4b53      	ldr	r3, [pc, #332]	@ (8003ff4 <TaskChassis+0xb74>)
 8003ea6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003eaa:	4b54      	ldr	r3, [pc, #336]	@ (8003ffc <TaskChassis+0xb7c>)
 8003eac:	edd3 6a00 	vldr	s13, [r3]
 8003eb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003eb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003eb8:	eeb0 0a66 	vmov.f32	s0, s13
 8003ebc:	eef0 0a47 	vmov.f32	s1, s14
 8003ec0:	eeb0 1a67 	vmov.f32	s2, s15
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	2004      	movs	r0, #4
 8003ec8:	f7fd ff22 	bl	8001d10 <setM3508RPM>

		int16_t roundsPerSecond = 20;
 8003ecc:	2314      	movs	r3, #20
 8003ece:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
		// Constant SHOULD BE 1.3636, 0.08
		int8_t rcSwitchToShoot = getRCswitch(0);
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f000 ffc8 	bl	8004e68 <getRCswitch>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
		if (rcSwitchToShoot == 1) {
 8003ede:	f997 3095 	ldrsb.w	r3, [r7, #149]	@ 0x95
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	f040 8124 	bne.w	8004130 <TaskChassis+0xcb0>
			if (customFiringModeSwitcher == 0) {
 8003ee8:	f997 3106 	ldrsb.w	r3, [r7, #262]	@ 0x106
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11c      	bne.n	8003f2a <TaskChassis+0xaaa>
				setM3508RPM(5, roundsPerSecond * 270, chassisPreset);
 8003ef0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	00d2      	lsls	r2, r2, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	461a      	mov	r2, r3
 8003efc:	0112      	lsls	r2, r2, #4
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	b21a      	sxth	r2, r3
 8003f06:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <TaskChassis+0xb7c>)
 8003f08:	edd3 6a00 	vldr	s13, [r3]
 8003f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f10:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f14:	eeb0 0a66 	vmov.f32	s0, s13
 8003f18:	eef0 0a47 	vmov.f32	s1, s14
 8003f1c:	eeb0 1a67 	vmov.f32	s2, s15
 8003f20:	4611      	mov	r1, r2
 8003f22:	2005      	movs	r0, #5
 8003f24:	f7fd fef4 	bl	8001d10 <setM3508RPM>
 8003f28:	e0fe      	b.n	8004128 <TaskChassis+0xca8>
			} else {
				shooterMotor = getMotorPosition(5);
 8003f2a:	2005      	movs	r0, #5
 8003f2c:	f7fd ff58 	bl	8001de0 <getMotorPosition>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
				// Resets the total rotationValue to avoid going too high
				if (resetPerStart == 0) {
 8003f36:	f997 310d 	ldrsb.w	r3, [r7, #269]	@ 0x10d
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d119      	bne.n	8003f72 <TaskChassis+0xaf2>
					int32_t rotationTarget1 = (36860 * burst);// + shooterMotor
 8003f3e:	f997 3107 	ldrsb.w	r3, [r7, #263]	@ 0x107
 8003f42:	f648 72fc 	movw	r2, #36860	@ 0x8ffc
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					rotationTarget = rotationTarget1 + shooterMotor;
 8003f4e:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	@ 0xd4
 8003f52:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003f56:	4413      	add	r3, r2
 8003f58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

					revolutions = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
					rotationalVal = shooterMotor;
 8003f62:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	@ 0xd4
 8003f66:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
					previousVal = shooterMotor;
 8003f6a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8003f6e:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
				}
				resetPerStart = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
				posForGunMotor = kPg*(rotationTarget - rotationalVal);
 8003f78:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8003f7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f8a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f96:	ee17 3a90 	vmov	r3, s15
 8003f9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

				// counts the amount of rotations
				if ((shooterMotor - previousVal) < -1000) {
 8003f9e:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	@ 0xd4
 8003fa2:	f9b7 3116 	ldrsh.w	r3, [r7, #278]	@ 0x116
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003fac:	da06      	bge.n	8003fbc <TaskChassis+0xb3c>
					 revolutions++;
 8003fae:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	@ 0x10e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
				} /* else if ((shooterMotor - previousVal) > 4500) {
				revolutions --
				}
				*/
				previousVal = shooterMotor;
 8003fbc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8003fc0:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
				rotationalVal = shooterMotor + (revolutions*8191);
 8003fc4:	f9b7 10d4 	ldrsh.w	r1, [r7, #212]	@ 0xd4
 8003fc8:	f9b7 210e 	ldrsh.w	r2, [r7, #270]	@ 0x10e
 8003fcc:	4613      	mov	r3, r2
 8003fce:	035b      	lsls	r3, r3, #13
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110




				// int16_t PositionToGo = kPu*(rcVal-testmotor);
				if (posForGunMotor >= 0) {
 8003fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	db0f      	blt.n	8004000 <TaskChassis+0xb80>
					isNegativeRegion4 = -1;
 8003fe0:	23ff      	movs	r3, #255	@ 0xff
 8003fe2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003fe6:	e00e      	b.n	8004006 <TaskChassis+0xb86>
 8003fe8:	47ae147b 	.word	0x47ae147b
 8003fec:	3f747ae1 	.word	0x3f747ae1
 8003ff0:	43480000 	.word	0x43480000
 8003ff4:	20000c54 	.word	0x20000c54
 8003ff8:	3dcccccd 	.word	0x3dcccccd
 8003ffc:	20000040 	.word	0x20000040
				} else {
					isNegativeRegion4 = 1;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
				}
				if (posForGunMotor != previousRegion4) {
 8004006:	f997 3138 	ldrsb.w	r3, [r7, #312]	@ 0x138
 800400a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800400e:	429a      	cmp	r2, r3
 8004010:	d002      	beq.n	8004018 <TaskChassis+0xb98>
					sumI4 = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
				}
				previousRegion4 = posForGunMotor;
 8004018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800401c:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
				sumI4 += (rotationTarget-testmotor)*0.005;
 8004020:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	@ 0x13a
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc fa7d 	bl	8000524 <__aeabi_i2d>
 800402a:	4604      	mov	r4, r0
 800402c:	460d      	mov	r5, r1
 800402e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8004032:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	4618      	mov	r0, r3
 800403a:	f7fc fa73 	bl	8000524 <__aeabi_i2d>
 800403e:	a39f      	add	r3, pc, #636	@ (adr r3, 80042bc <TaskChassis+0xe3c>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc fad8 	bl	80005f8 <__aeabi_dmul>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4620      	mov	r0, r4
 800404e:	4629      	mov	r1, r5
 8004050:	f7fc f91c 	bl	800028c <__adddf3>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	f7fc fd7c 	bl	8000b58 <__aeabi_d2iz>
 8004060:	4603      	mov	r3, r0
 8004062:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
				int32_t IntegralToGo4 = kIg*(sumI4);
 8004066:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	@ 0x13a
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004072:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800407e:	ee17 3a90 	vmov	r3, s15
 8004082:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				int32_t DerivativeToGo4 = kDg*(rotationTarget-testmotor)*200;
 8004086:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800408a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004098:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800409c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a0:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8004298 <TaskChassis+0xe18>
 80040a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ac:	ee17 3a90 	vmov	r3, s15
 80040b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

				int32_t finalRPM = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				if ((posForGunMotor+IntegralToGo4+DerivativeToGo4) > (roundsPerSecond * 270)) {
 80040ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80040be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c2:	441a      	add	r2, r3
 80040c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040c8:	441a      	add	r2, r3
 80040ca:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 80040ce:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	429a      	cmp	r2, r3
 80040d8:	dd08      	ble.n	80040ec <TaskChassis+0xc6c>
					finalRPM =roundsPerSecond * 270;
 80040da:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	@ 0x96
 80040de:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040ea:	e009      	b.n	8004100 <TaskChassis+0xc80>
				} else {
					finalRPM = posForGunMotor+IntegralToGo4+DerivativeToGo4;
 80040ec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80040f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f4:	4413      	add	r3, r2
 80040f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80040fa:	4413      	add	r3, r2
 80040fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				}
				setM3508RPM(5, finalRPM, chassisPreset);
 8004100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004104:	b21a      	sxth	r2, r3
 8004106:	4b65      	ldr	r3, [pc, #404]	@ (800429c <TaskChassis+0xe1c>)
 8004108:	edd3 6a00 	vldr	s13, [r3]
 800410c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004110:	edd3 7a02 	vldr	s15, [r3, #8]
 8004114:	eeb0 0a66 	vmov.f32	s0, s13
 8004118:	eef0 0a47 	vmov.f32	s1, s14
 800411c:	eeb0 1a67 	vmov.f32	s2, s15
 8004120:	4611      	mov	r1, r2
 8004122:	2005      	movs	r0, #5
 8004124:	f7fd fdf4 	bl	8001d10 <setM3508RPM>
			}
			switched = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
 800412e:	e013      	b.n	8004158 <TaskChassis+0xcd8>
			setM3508RPM(5, roundsPerSecond * 270, chassisPreset);
			*/
			// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, rcVal + 252);
			// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, rcVal + 252);
		} else {
			resetPerStart = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
			setM3508RPM(5, 0, chassisPreset);
 8004136:	4b59      	ldr	r3, [pc, #356]	@ (800429c <TaskChassis+0xe1c>)
 8004138:	edd3 6a00 	vldr	s13, [r3]
 800413c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004140:	edd3 7a02 	vldr	s15, [r3, #8]
 8004144:	eeb0 0a66 	vmov.f32	s0, s13
 8004148:	eef0 0a47 	vmov.f32	s1, s14
 800414c:	eeb0 1a67 	vmov.f32	s2, s15
 8004150:	2100      	movs	r1, #0
 8004152:	2005      	movs	r0, #5
 8004154:	f7fd fddc 	bl	8001d10 <setM3508RPM>
		}
		if (rcSwitchToShoot == 2 && switched == 0 && motorOn == 0) {
 8004158:	f997 3095 	ldrsb.w	r3, [r7, #149]	@ 0x95
 800415c:	2b02      	cmp	r3, #2
 800415e:	d10e      	bne.n	800417e <TaskChassis+0xcfe>
 8004160:	f997 313e 	ldrsb.w	r3, [r7, #318]	@ 0x13e
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <TaskChassis+0xcfe>
 8004168:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <TaskChassis+0xcfe>
			motorOn = 1;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
			switched = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
 800417c:	e011      	b.n	80041a2 <TaskChassis+0xd22>
		} else if (rcSwitchToShoot == 2 && switched == 0 && motorOn == 1) {
 800417e:	f997 3095 	ldrsb.w	r3, [r7, #149]	@ 0x95
 8004182:	2b02      	cmp	r3, #2
 8004184:	d10d      	bne.n	80041a2 <TaskChassis+0xd22>
 8004186:	f997 313e 	ldrsb.w	r3, [r7, #318]	@ 0x13e
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <TaskChassis+0xd22>
 800418e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8004192:	2b01      	cmp	r3, #1
 8004194:	d105      	bne.n	80041a2 <TaskChassis+0xd22>
			motorOn = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
			switched = 1;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
		}
		if (rcSwitchToShoot == 3) {
 80041a2:	f997 3095 	ldrsb.w	r3, [r7, #149]	@ 0x95
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d102      	bne.n	80041b0 <TaskChassis+0xd30>
			switched = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 313e 	strb.w	r3, [r7, #318]	@ 0x13e
		}


		// int16_t testingMax = getRCchannel(1)*1.15f;
		// MAX SPEED = 759
		htim1.Instance->CCR1=200+(500*motorOn);
 80041b0:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80041b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 80041c0:	4b37      	ldr	r3, [pc, #220]	@ (80042a0 <TaskChassis+0xe20>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2=200+(500*motorOn);
 80041c6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80041ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 80041d6:	4b32      	ldr	r3, [pc, #200]	@ (80042a0 <TaskChassis+0xe20>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	639a      	str	r2, [r3, #56]	@ 0x38

		// int32_t dividedRotation = rotationalVal * 0.01f;
		// usart_printf("$%d %d %d\r\n;",rotationalVal, shooterMotor, rotationTarget);
		testmotor = getMotorPosition(6);
 80041dc:	2006      	movs	r0, #6
 80041de:	f7fd fdff 	bl	8001de0 <getMotorPosition>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
		// min = 5600
		// max = 6700
		//(These are ABSOLUTE MAXES)
		// Difference = 0, 589, 1178

		float kPu =0.005; // 0.005
 80041e8:	4b2e      	ldr	r3, [pc, #184]	@ (80042a4 <TaskChassis+0xe24>)
 80041ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		float kIu =0.0001; // -0.0001
 80041ee:	4b2e      	ldr	r3, [pc, #184]	@ (80042a8 <TaskChassis+0xe28>)
 80041f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		float kDu =0.0005; // 0.0005
 80041f4:	4b2d      	ldr	r3, [pc, #180]	@ (80042ac <TaskChassis+0xe2c>)
 80041f6:	67fb      	str	r3, [r7, #124]	@ 0x7c



		int16_t rcVal = (getRCchannel(1)*0.88f)+6161;
 80041f8:	2001      	movs	r0, #1
 80041fa:	f000 fe21 	bl	8004e40 <getRCchannel>
 80041fe:	4603      	mov	r3, r0
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004208:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80042b0 <TaskChassis+0xe30>
 800420c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004210:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80042b4 <TaskChassis+0xe34>
 8004214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800421c:	ee17 3a90 	vmov	r3, s15
 8004220:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

		int16_t DifferenceBetweenCurrentAndWannabePosition = rcVal-testmotor;
 8004224:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8004228:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	b29b      	uxth	r3, r3
 8004230:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78

		if (testmotor < 5500) {
 8004234:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8004238:	f241 527b 	movw	r2, #5499	@ 0x157b
 800423c:	4293      	cmp	r3, r2
 800423e:	d811      	bhi.n	8004264 <TaskChassis+0xde4>
			setGM6020voltageRPM(6, 5, DONUTMOTOR);
 8004240:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <TaskChassis+0xe38>)
 8004242:	edd3 6a00 	vldr	s13, [r3]
 8004246:	ed93 7a01 	vldr	s14, [r3, #4]
 800424a:	edd3 7a02 	vldr	s15, [r3, #8]
 800424e:	eeb0 0a66 	vmov.f32	s0, s13
 8004252:	eef0 0a47 	vmov.f32	s1, s14
 8004256:	eeb0 1a67 	vmov.f32	s2, s15
 800425a:	2105      	movs	r1, #5
 800425c:	2006      	movs	r0, #6
 800425e:	f7fd fd8b 	bl	8001d78 <setGM6020voltageRPM>
 8004262:	e052      	b.n	800430a <TaskChassis+0xe8a>
		} else if (testmotor > 6800) {
 8004264:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8004268:	f641 2290 	movw	r2, #6800	@ 0x1a90
 800426c:	4293      	cmp	r3, r2
 800426e:	d929      	bls.n	80042c4 <TaskChassis+0xe44>
			setGM6020voltageRPM(6, -5, DONUTMOTOR);
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <TaskChassis+0xe38>)
 8004272:	edd3 6a00 	vldr	s13, [r3]
 8004276:	ed93 7a01 	vldr	s14, [r3, #4]
 800427a:	edd3 7a02 	vldr	s15, [r3, #8]
 800427e:	eeb0 0a66 	vmov.f32	s0, s13
 8004282:	eef0 0a47 	vmov.f32	s1, s14
 8004286:	eeb0 1a67 	vmov.f32	s2, s15
 800428a:	f06f 0104 	mvn.w	r1, #4
 800428e:	2006      	movs	r0, #6
 8004290:	f7fd fd72 	bl	8001d78 <setGM6020voltageRPM>
 8004294:	e039      	b.n	800430a <TaskChassis+0xe8a>
 8004296:	bf00      	nop
 8004298:	43480000 	.word	0x43480000
 800429c:	20000040 	.word	0x20000040
 80042a0:	20000874 	.word	0x20000874
 80042a4:	3ba3d70a 	.word	0x3ba3d70a
 80042a8:	38d1b717 	.word	0x38d1b717
 80042ac:	3a03126f 	.word	0x3a03126f
 80042b0:	3f6147ae 	.word	0x3f6147ae
 80042b4:	45c08800 	.word	0x45c08800
 80042b8:	2000004c 	.word	0x2000004c
 80042bc:	47ae147b 	.word	0x47ae147b
 80042c0:	3f747ae1 	.word	0x3f747ae1
			int16_t PositionToGo = kPu*(DifferenceBetweenCurrentAndWannabePosition);
			int16_t IntegralToGo = kIu*(sumI1);
			int16_t DerivativeToGo = kDu*(DifferenceBetweenCurrentAndWannabePosition)*200;
			*/

			setGM6020voltageRPM(6, positionPIDByMe(&isNegativeRegion1, &previousRegion1, DifferenceBetweenCurrentAndWannabePosition, &sumI1, kPu, kIu, kDu), DONUTMOTOR);
 80042c4:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 80042c8:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	@ 0x78
 80042cc:	f107 0151 	add.w	r1, r7, #81	@ 0x51
 80042d0:	f107 0053 	add.w	r0, r7, #83	@ 0x53
 80042d4:	ed97 1a1f 	vldr	s2, [r7, #124]	@ 0x7c
 80042d8:	edd7 0a20 	vldr	s1, [r7, #128]	@ 0x80
 80042dc:	ed97 0a21 	vldr	s0, [r7, #132]	@ 0x84
 80042e0:	f7ff f820 	bl	8003324 <positionPIDByMe>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	4be1      	ldr	r3, [pc, #900]	@ (8004670 <TaskChassis+0x11f0>)
 80042ea:	edd3 6a00 	vldr	s13, [r3]
 80042ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80042f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80042f6:	eeb0 0a66 	vmov.f32	s0, s13
 80042fa:	eef0 0a47 	vmov.f32	s1, s14
 80042fe:	eeb0 1a67 	vmov.f32	s2, s15
 8004302:	4611      	mov	r1, r2
 8004304:	2006      	movs	r0, #6
 8004306:	f7fd fd37 	bl	8001d78 <setGM6020voltageRPM>
		}


		// 2524-6986
		// 90 degree = 2691, 6799
		pivoter = getMotorPosition(7);
 800430a:	2007      	movs	r0, #7
 800430c:	f7fd fd68 	bl	8001de0 <getMotorPosition>
 8004310:	4603      	mov	r3, r0
 8004312:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
		angle = ((pivoter-4755)*0.00024343f)*3.14159265f;
 8004316:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800431a:	f5a3 5394 	sub.w	r3, r3, #4736	@ 0x1280
 800431e:	3b13      	subs	r3, #19
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004328:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8004674 <TaskChassis+0x11f4>
 800432c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004330:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 8004678 <TaskChassis+0x11f8>
 8004334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004338:	ee17 0a90 	vmov	r0, s15
 800433c:	f7fc f904 	bl	8000548 <__aeabi_f2d>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

		float kPr =0.022; // 0.001
 8004348:	4bcc      	ldr	r3, [pc, #816]	@ (800467c <TaskChassis+0x11fc>)
 800434a:	677b      	str	r3, [r7, #116]	@ 0x74
		float kIr =0.02; // -0.02
 800434c:	4bcc      	ldr	r3, [pc, #816]	@ (8004680 <TaskChassis+0x1200>)
 800434e:	673b      	str	r3, [r7, #112]	@ 0x70
		float kDr =0.00005; // 0.00015
 8004350:	4bcc      	ldr	r3, [pc, #816]	@ (8004684 <TaskChassis+0x1204>)
 8004352:	66fb      	str	r3, [r7, #108]	@ 0x6c

		float gyroPosition[3] = {IMU_get_gyro(x), IMU_get_gyro(y), IMU_get_gyro(z)};
 8004354:	2000      	movs	r0, #0
 8004356:	f7fc ffed 	bl	8001334 <IMU_get_gyro>
 800435a:	eef0 7a40 	vmov.f32	s15, s0
 800435e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004362:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004366:	edc3 7a00 	vstr	s15, [r3]
 800436a:	2001      	movs	r0, #1
 800436c:	f7fc ffe2 	bl	8001334 <IMU_get_gyro>
 8004370:	eef0 7a40 	vmov.f32	s15, s0
 8004374:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004378:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800437c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004380:	2002      	movs	r0, #2
 8004382:	f7fc ffd7 	bl	8001334 <IMU_get_gyro>
 8004386:	eef0 7a40 	vmov.f32	s15, s0
 800438a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800438e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004392:	edc3 7a02 	vstr	s15, [r3, #8]
		int16_t convert[3] = { (int)(gyroPosition[0]*9.549), (int)(gyroPosition[1]*(9.549)), (int)(gyroPosition[2]*(-260))};
 8004396:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800439a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc f8d1 	bl	8000548 <__aeabi_f2d>
 80043a6:	a3ae      	add	r3, pc, #696	@ (adr r3, 8004660 <TaskChassis+0x11e0>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fc f924 	bl	80005f8 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	f7fc fbce 	bl	8000b58 <__aeabi_d2iz>
 80043bc:	4603      	mov	r3, r0
 80043be:	b21a      	sxth	r2, r3
 80043c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80043c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80043ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc f8b7 	bl	8000548 <__aeabi_f2d>
 80043da:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004660 <TaskChassis+0x11e0>)
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f7fc f90a 	bl	80005f8 <__aeabi_dmul>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	f7fc fbb4 	bl	8000b58 <__aeabi_d2iz>
 80043f0:	4603      	mov	r3, r0
 80043f2:	b21a      	sxth	r2, r3
 80043f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80043f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80043fc:	805a      	strh	r2, [r3, #2]
 80043fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004402:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004406:	edd3 7a02 	vldr	s15, [r3, #8]
 800440a:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8004688 <TaskChassis+0x1208>
 800440e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004416:	ee17 3a90 	vmov	r3, s15
 800441a:	b21a      	sxth	r2, r3
 800441c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004420:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004424:	809a      	strh	r2, [r3, #4]
		rotationPositionZ += gyroPosition[2]*0.2864788976;
 8004426:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800442a:	f7fc f88d 	bl	8000548 <__aeabi_f2d>
 800442e:	4604      	mov	r4, r0
 8004430:	460d      	mov	r5, r1
 8004432:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004436:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc f883 	bl	8000548 <__aeabi_f2d>
 8004442:	a389      	add	r3, pc, #548	@ (adr r3, 8004668 <TaskChassis+0x11e8>)
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f7fc f8d6 	bl	80005f8 <__aeabi_dmul>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4620      	mov	r0, r4
 8004452:	4629      	mov	r1, r5
 8004454:	f7fb ff1a 	bl	800028c <__adddf3>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	f7fc fba2 	bl	8000ba8 <__aeabi_d2f>
 8004464:	4603      	mov	r3, r0
 8004466:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
		rotationPositionY += gyroPosition[0]*0.2864788976;
 800446a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800446e:	f7fc f86b 	bl	8000548 <__aeabi_f2d>
 8004472:	4604      	mov	r4, r0
 8004474:	460d      	mov	r5, r1
 8004476:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800447a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fc f861 	bl	8000548 <__aeabi_f2d>
 8004486:	a378      	add	r3, pc, #480	@ (adr r3, 8004668 <TaskChassis+0x11e8>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f7fc f8b4 	bl	80005f8 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4620      	mov	r0, r4
 8004496:	4629      	mov	r1, r5
 8004498:	f7fb fef8 	bl	800028c <__adddf3>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7fc fb80 	bl	8000ba8 <__aeabi_d2f>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
		int16_t convertY = (int)rotationPositionY;
 80044ae:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 80044b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044b6:	ee17 3a90 	vmov	r3, s15
 80044ba:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
		int16_t convertZ = (int)rotationPositionZ;
 80044be:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80044c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c6:	ee17 3a90 	vmov	r3, s15
 80044ca:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68


		if (chassisTurning == 2) {
 80044ce:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d114      	bne.n	8004500 <TaskChassis+0x1080>
			// rcVal2 = ((-1*(leftDial))*3.32f)+4755;
			rcVal2 = (leftDial*3.32f)+4755;
 80044d6:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e2:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800468c <TaskChassis+0x120c>
 80044e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ea:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8004690 <TaskChassis+0x1210>
 80044ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f6:	ee17 3a90 	vmov	r3, s15
 80044fa:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
 80044fe:	e013      	b.n	8004528 <TaskChassis+0x10a8>
		} else {
			rcVal2 = (leftDial*3.32f)+4755;
 8004500:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450c:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800468c <TaskChassis+0x120c>
 8004510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004514:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8004690 <TaskChassis+0x1210>
 8004518:	ee77 7a87 	vadd.f32	s15, s15, s14
 800451c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004520:	ee17 3a90 	vmov	r3, s15
 8004524:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		}

		for (int j = 0; j < average; j++) {
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800452e:	e017      	b.n	8004560 <TaskChassis+0x10e0>
			averageY[average-(j)] = averageY[average-(j+1)];
 8004530:	f997 20ca 	ldrsb.w	r2, [r7, #202]	@ 0xca
 8004534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004538:	3301      	adds	r3, #1
 800453a:	1ad1      	subs	r1, r2, r3
 800453c:	f997 20ca 	ldrsb.w	r2, [r7, #202]	@ 0xca
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800454a:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 800454e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004552:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int j = 0; j < average; j++) {
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455a:	3301      	adds	r3, #1
 800455c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004560:	f997 30ca 	ldrsb.w	r3, [r7, #202]	@ 0xca
 8004564:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004568:	429a      	cmp	r2, r3
 800456a:	dbe1      	blt.n	8004530 <TaskChassis+0x10b0>
		}
		averageY[0] = convert[2];
 800456c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004570:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004574:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004578:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800457c:	801a      	strh	r2, [r3, #0]

		int16_t fullAve = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
		float multiplyFactor = 1/average;
 8004584:	f997 30ca 	ldrsb.w	r3, [r7, #202]	@ 0xca
 8004588:	461a      	mov	r2, r3
 800458a:	3201      	adds	r2, #1
 800458c:	2a02      	cmp	r2, #2
 800458e:	bf94      	ite	ls
 8004590:	2201      	movls	r2, #1
 8004592:	2200      	movhi	r2, #0
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	b252      	sxtb	r2, r2
 8004598:	2a00      	cmp	r2, #0
 800459a:	bf14      	ite	ne
 800459c:	461b      	movne	r3, r3
 800459e:	2300      	moveq	r3, #0
 80045a0:	ee07 3a90 	vmov	s15, r3
 80045a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		for (int i = 0; i < average; i++) {
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045b2:	e011      	b.n	80045d8 <TaskChassis+0x1158>
			fullAve += averageY[i];
 80045b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80045bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 80045c6:	4413      	add	r3, r2
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
		for (int i = 0; i < average; i++) {
 80045ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d2:	3301      	adds	r3, #1
 80045d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80045d8:	f997 30ca 	ldrsb.w	r3, [r7, #202]	@ 0xca
 80045dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80045e0:	429a      	cmp	r2, r3
 80045e2:	dbe7      	blt.n	80045b4 <TaskChassis+0x1134>
		}
		fullAve = fullAve*0.2f;
 80045e4:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	@ 0xe2
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004694 <TaskChassis+0x1214>
 80045f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045fc:	ee17 3a90 	vmov	r3, s15
 8004600:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2

		int16_t DiffOfTurret = rcVal2-pivoter;
 8004604:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8004608:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		usart_printf("$%d %d\r\n;", convert[2], fullAve);
 8004614:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004618:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800461c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004620:	4619      	mov	r1, r3
 8004622:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	@ 0xe2
 8004626:	461a      	mov	r2, r3
 8004628:	481b      	ldr	r0, [pc, #108]	@ (8004698 <TaskChassis+0x1218>)
 800462a:	f7fd fc09 	bl	8001e40 <usart_printf>
		if (pivoter < 2300) {
 800462e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8004632:	f640 02fb 	movw	r2, #2299	@ 0x8fb
 8004636:	4293      	cmp	r3, r2
 8004638:	d830      	bhi.n	800469c <TaskChassis+0x121c>
			setGM6020voltageRPM(7, 5, DONUTMOTOR);
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <TaskChassis+0x11f0>)
 800463c:	edd3 6a00 	vldr	s13, [r3]
 8004640:	ed93 7a01 	vldr	s14, [r3, #4]
 8004644:	edd3 7a02 	vldr	s15, [r3, #8]
 8004648:	eeb0 0a66 	vmov.f32	s0, s13
 800464c:	eef0 0a47 	vmov.f32	s1, s14
 8004650:	eeb0 1a67 	vmov.f32	s2, s15
 8004654:	2105      	movs	r1, #5
 8004656:	2007      	movs	r0, #7
 8004658:	f7fd fb8e 	bl	8001d78 <setGM6020voltageRPM>
 800465c:	e076      	b.n	800474c <TaskChassis+0x12cc>
 800465e:	bf00      	nop
 8004660:	872b020c 	.word	0x872b020c
 8004664:	40231916 	.word	0x40231916
 8004668:	960be99a 	.word	0x960be99a
 800466c:	3fd255ab 	.word	0x3fd255ab
 8004670:	2000004c 	.word	0x2000004c
 8004674:	397f413e 	.word	0x397f413e
 8004678:	40490fdb 	.word	0x40490fdb
 800467c:	3cb43958 	.word	0x3cb43958
 8004680:	3ca3d70a 	.word	0x3ca3d70a
 8004684:	3851b717 	.word	0x3851b717
 8004688:	c3820000 	.word	0xc3820000
 800468c:	40547ae1 	.word	0x40547ae1
 8004690:	45949800 	.word	0x45949800
 8004694:	3e4ccccd 	.word	0x3e4ccccd
 8004698:	08012664 	.word	0x08012664
		} else if (pivoter > 6900) {
 800469c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80046a0:	f641 22f4 	movw	r2, #6900	@ 0x1af4
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d912      	bls.n	80046ce <TaskChassis+0x124e>
			setGM6020voltageRPM(7, -5, DONUTMOTOR);
 80046a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004758 <TaskChassis+0x12d8>)
 80046aa:	edd3 6a00 	vldr	s13, [r3]
 80046ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80046b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80046b6:	eeb0 0a66 	vmov.f32	s0, s13
 80046ba:	eef0 0a47 	vmov.f32	s1, s14
 80046be:	eeb0 1a67 	vmov.f32	s2, s15
 80046c2:	f06f 0104 	mvn.w	r1, #4
 80046c6:	2007      	movs	r0, #7
 80046c8:	f7fd fb56 	bl	8001d78 <setGM6020voltageRPM>
 80046cc:	e03e      	b.n	800474c <TaskChassis+0x12cc>
			sumI2 += (DiffOfTurret)*0.005;
			int16_t PositionToGo2 = kPr*(DiffOfTurret);
			int16_t IntegralToGo2 = kIr*(sumI2);
			int16_t DerivativeToGo2 = kDr*(DiffOfTurret)*200;
			*/
			if (chassisTurning == 2) {
 80046ce:	f997 30bd 	ldrsb.w	r3, [r7, #189]	@ 0xbd
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d117      	bne.n	8004706 <TaskChassis+0x1286>
				setGM6020voltageRPM(7, convert[2], DONUTMOTOR);
 80046d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80046da:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80046de:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80046e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <TaskChassis+0x12d8>)
 80046e4:	edd3 6a00 	vldr	s13, [r3]
 80046e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80046ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80046f0:	eeb0 0a66 	vmov.f32	s0, s13
 80046f4:	eef0 0a47 	vmov.f32	s1, s14
 80046f8:	eeb0 1a67 	vmov.f32	s2, s15
 80046fc:	4611      	mov	r1, r2
 80046fe:	2007      	movs	r0, #7
 8004700:	f7fd fb3a 	bl	8001d78 <setGM6020voltageRPM>
 8004704:	e022      	b.n	800474c <TaskChassis+0x12cc>
			} else {
				setGM6020voltageRPM(7, positionPIDByMe(&isNegativeRegion2, &previousRegion2, DiffOfTurret, &sumI2, kPr, kIr, kDr), DONUTMOTOR);
 8004706:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800470a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	@ 0x62
 800470e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004712:	f107 0052 	add.w	r0, r7, #82	@ 0x52
 8004716:	ed97 1a1b 	vldr	s2, [r7, #108]	@ 0x6c
 800471a:	edd7 0a1c 	vldr	s1, [r7, #112]	@ 0x70
 800471e:	ed97 0a1d 	vldr	s0, [r7, #116]	@ 0x74
 8004722:	f7fe fdff 	bl	8003324 <positionPIDByMe>
 8004726:	4603      	mov	r3, r0
 8004728:	461a      	mov	r2, r3
 800472a:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <TaskChassis+0x12d8>)
 800472c:	edd3 6a00 	vldr	s13, [r3]
 8004730:	ed93 7a01 	vldr	s14, [r3, #4]
 8004734:	edd3 7a02 	vldr	s15, [r3, #8]
 8004738:	eeb0 0a66 	vmov.f32	s0, s13
 800473c:	eef0 0a47 	vmov.f32	s1, s14
 8004740:	eeb0 1a67 	vmov.f32	s2, s15
 8004744:	4611      	mov	r1, r2
 8004746:	2007      	movs	r0, #7
 8004748:	f7fd fb16 	bl	8001d78 <setGM6020voltageRPM>
		//sprintf((char*)txbuf, "%f \r\n", power_heat_data.chassis_power);
		//HAL_UART_Transmit(&huart1, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
		//txbuf = *((float*)&power_heat_data.chassis_power);
		//usart_printf("%f %d\r\n", calcChassisPower, 30);

		osDelay(5);
 800474c:	2005      	movs	r0, #5
 800474e:	f007 f98f 	bl	800ba70 <osDelay>
	for(;;) {
 8004752:	f7fe bfa3 	b.w	800369c <TaskChassis+0x21c>
 8004756:	bf00      	nop
 8004758:	2000004c 	.word	0x2000004c

0800475c <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004764:	2001      	movs	r0, #1
 8004766:	f007 f983 	bl	800ba70 <osDelay>
 800476a:	e7fb      	b.n	8004764 <TaskTurret+0x8>

0800476c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004770:	b672      	cpsid	i
}
 8004772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004774:	bf00      	nop
 8004776:	e7fd      	b.n	8004774 <Error_Handler+0x8>

08004778 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6178      	str	r0, [r7, #20]
 8004780:	460b      	mov	r3, r1
 8004782:	60fa      	str	r2, [r7, #12]
 8004784:	ed87 0a02 	vstr	s0, [r7, #8]
 8004788:	edc7 0a01 	vstr	s1, [r7, #4]
 800478c:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d042      	beq.n	800481a <PID_init+0xa2>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d03f      	beq.n	800481a <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	7cfa      	ldrb	r2, [r7, #19]
 800479e:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3304      	adds	r3, #4
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3308      	adds	r3, #8
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	621a      	str	r2, [r3, #32]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	645a      	str	r2, [r3, #68]	@ 0x44
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004818:	e000      	b.n	800481c <PID_init+0xa4>
        return;
 800481a:	bf00      	nop
}
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004832:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <PID_calc+0x1c>
    {
        return 0.0f;
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e130      	b.n	8004aa4 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800485e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004862:	edd7 7a02 	vldr	s15, [r7, #8]
 8004866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f040 8095 	bne.w	80049a4 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	edd3 6a02 	vldr	s13, [r3, #8]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80048a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80048cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80048f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004900:	dd04      	ble.n	800490c <PID_calc+0xe6>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	629a      	str	r2, [r3, #40]	@ 0x28
 800490a:	e014      	b.n	8004936 <PID_calc+0x110>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	edd3 7a05 	vldr	s15, [r3, #20]
 8004918:	eef1 7a67 	vneg.f32	s15, s15
 800491c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004924:	d507      	bpl.n	8004936 <PID_calc+0x110>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	edd3 7a05 	vldr	s15, [r3, #20]
 800492c:	eef1 7a67 	vneg.f32	s15, s15
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800494c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	ed93 7a08 	vldr	s14, [r3, #32]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	dd04      	ble.n	8004976 <PID_calc+0x150>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	621a      	str	r2, [r3, #32]
 8004974:	e094      	b.n	8004aa0 <PID_calc+0x27a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	ed93 7a08 	vldr	s14, [r3, #32]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004982:	eef1 7a67 	vneg.f32	s15, s15
 8004986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	f140 8087 	bpl.w	8004aa0 <PID_calc+0x27a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	edd3 7a04 	vldr	s15, [r3, #16]
 8004998:	eef1 7a67 	vneg.f32	s15, s15
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	edc3 7a08 	vstr	s15, [r3, #32]
 80049a2:	e07d      	b.n	8004aa0 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d179      	bne.n	8004aa0 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80049be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80049d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80049fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004a3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	dd04      	ble.n	8004a76 <PID_calc+0x250>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	621a      	str	r2, [r3, #32]
 8004a74:	e014      	b.n	8004aa0 <PID_calc+0x27a>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a82:	eef1 7a67 	vneg.f32	s15, s15
 8004a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	d507      	bpl.n	8004aa0 <PID_calc+0x27a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a96:	eef1 7a67 	vneg.f32	s15, s15
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
}
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8004abc:	2224      	movs	r2, #36	@ 0x24
 8004abe:	4903      	ldr	r1, [pc, #12]	@ (8004acc <remote_control_init+0x14>)
 8004ac0:	4803      	ldr	r0, [pc, #12]	@ (8004ad0 <remote_control_init+0x18>)
 8004ac2:	f7fd fc11 	bl	80022e8 <RC_init>
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000ca0 	.word	0x20000ca0
 8004ad0:	20000c7c 	.word	0x20000c7c

08004ad4 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8004ad8:	4b02      	ldr	r3, [pc, #8]	@ (8004ae4 <get_remote_control_point+0x10>)
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000c64 	.word	0x20000c64

08004ae8 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8004aee:	4b44      	ldr	r3, [pc, #272]	@ (8004c00 <USART3_IRQHandler+0x118>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8004afc:	2300      	movs	r3, #0
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	4b3f      	ldr	r3, [pc, #252]	@ (8004c00 <USART3_IRQHandler+0x118>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	4b3d      	ldr	r3, [pc, #244]	@ (8004c00 <USART3_IRQHandler+0x118>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8004b12:	e070      	b.n	8004bf6 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8004b14:	4b3b      	ldr	r3, [pc, #236]	@ (8004c04 <USART3_IRQHandler+0x11c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d06a      	beq.n	8004bf6 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8004b20:	2300      	movs	r3, #0
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4b36      	ldr	r3, [pc, #216]	@ (8004c00 <USART3_IRQHandler+0x118>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4b34      	ldr	r3, [pc, #208]	@ (8004c00 <USART3_IRQHandler+0x118>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8004b36:	4b34      	ldr	r3, [pc, #208]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d12d      	bne.n	8004ba0 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8004b44:	4b30      	ldr	r3, [pc, #192]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8004b54:	4b2c      	ldr	r3, [pc, #176]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	4b2a      	ldr	r3, [pc, #168]	@ (8004c0c <USART3_IRQHandler+0x124>)
 8004b64:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8004b66:	4b28      	ldr	r3, [pc, #160]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2224      	movs	r2, #36	@ 0x24
 8004b6c:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8004b6e:	4b26      	ldr	r3, [pc, #152]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4b24      	ldr	r3, [pc, #144]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004b7c:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8004b7e:	4b22      	ldr	r3, [pc, #136]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c0c <USART3_IRQHandler+0x124>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	2b12      	cmp	r3, #18
 8004b94:	d12f      	bne.n	8004bf6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8004b96:	491e      	ldr	r1, [pc, #120]	@ (8004c10 <USART3_IRQHandler+0x128>)
 8004b98:	481e      	ldr	r0, [pc, #120]	@ (8004c14 <USART3_IRQHandler+0x12c>)
 8004b9a:	f000 f841 	bl	8004c20 <sbus_to_rc>
}
 8004b9e:	e02a      	b.n	8004bf6 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8004ba0:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4b18      	ldr	r3, [pc, #96]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8004bb0:	4b15      	ldr	r3, [pc, #84]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	4b13      	ldr	r3, [pc, #76]	@ (8004c0c <USART3_IRQHandler+0x124>)
 8004bc0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2224      	movs	r2, #36	@ 0x24
 8004bc8:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8004bca:	4b13      	ldr	r3, [pc, #76]	@ (8004c18 <USART3_IRQHandler+0x130>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a12      	ldr	r2, [pc, #72]	@ (8004c18 <USART3_IRQHandler+0x130>)
 8004bd0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004bd4:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <USART3_IRQHandler+0x120>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8004be6:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <USART3_IRQHandler+0x124>)
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	2b12      	cmp	r3, #18
 8004bec:	d103      	bne.n	8004bf6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8004bee:	4908      	ldr	r1, [pc, #32]	@ (8004c10 <USART3_IRQHandler+0x128>)
 8004bf0:	480a      	ldr	r0, [pc, #40]	@ (8004c1c <USART3_IRQHandler+0x134>)
 8004bf2:	f000 f815 	bl	8004c20 <sbus_to_rc>
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	200009d8 	.word	0x200009d8
 8004c04:	40004800 	.word	0x40004800
 8004c08:	20000b20 	.word	0x20000b20
 8004c0c:	20000cc4 	.word	0x20000cc4
 8004c10:	20000c64 	.word	0x20000c64
 8004c14:	20000c7c 	.word	0x20000c7c
 8004c18:	40026028 	.word	0x40026028
 8004c1c:	20000ca0 	.word	0x20000ca0

08004c20 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8101 	beq.w	8004e34 <sbus_to_rc+0x214>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80fd 	beq.w	8004e34 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	b21a      	sxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3301      	adds	r3, #1
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	b21b      	sxth	r3, r3
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	b21b      	sxth	r3, r3
 8004c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c56:	b21a      	sxth	r2, r3
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	08db      	lsrs	r3, r3, #3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	b21a      	sxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	015b      	lsls	r3, r3, #5
 8004c74:	b21b      	sxth	r3, r3
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c7e:	b21a      	sxth	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3302      	adds	r3, #2
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	099b      	lsrs	r3, r3, #6
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	b21a      	sxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3303      	adds	r3, #3
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	b21b      	sxth	r3, r3
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8004cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cb6:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	b21a      	sxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3305      	adds	r3, #5
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	01db      	lsls	r3, r3, #7
 8004cd4:	b21b      	sxth	r3, r3
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	b21b      	sxth	r3, r3
 8004cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cde:	b21a      	sxth	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3305      	adds	r3, #5
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3305      	adds	r3, #5
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	109b      	asrs	r3, r3, #2
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3306      	adds	r3, #6
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	b21a      	sxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3307      	adds	r3, #7
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	b21b      	sxth	r3, r3
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	b21a      	sxth	r2, r3
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3308      	adds	r3, #8
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	b21a      	sxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3309      	adds	r3, #9
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	b21b      	sxth	r3, r3
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	b21a      	sxth	r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	330a      	adds	r3, #10
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	b21a      	sxth	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	330b      	adds	r3, #11
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	b21b      	sxth	r3, r3
 8004d66:	4313      	orrs	r3, r2
 8004d68:	b21a      	sxth	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	330c      	adds	r3, #12
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	330d      	adds	r3, #13
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	330e      	adds	r3, #14
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	b21a      	sxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	330f      	adds	r3, #15
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	b21b      	sxth	r3, r3
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	b21b      	sxth	r3, r3
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3310      	adds	r3, #16
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	b21a      	sxth	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3311      	adds	r3, #17
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	b21b      	sxth	r3, r3
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	b21a      	sxth	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dca:	b21b      	sxth	r3, r3
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b21a      	sxth	r2, r3
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004de0:	b21b      	sxth	r3, r3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b21a      	sxth	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004df6:	b21b      	sxth	r3, r3
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	b21a      	sxth	r2, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004e0c:	b21b      	sxth	r3, r3
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	b21a      	sxth	r2, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e22:	b21b      	sxth	r3, r3
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	b21a      	sxth	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	811a      	strh	r2, [r3, #8]
 8004e32:	e000      	b.n	8004e36 <sbus_to_rc+0x216>
        return;
 8004e34:	bf00      	nop
}
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <getRCchannel+0x24>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004e52:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004e56:	b21b      	sxth	r3, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	2000005c 	.word	0x2000005c

08004e68 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <getRCswitch+0x24>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	7a9b      	ldrb	r3, [r3, #10]
 8004e7e:	b25b      	sxtb	r3, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	2000005c 	.word	0x2000005c

08004e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <HAL_MspInit+0x54>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	4a11      	ldr	r2, [pc, #68]	@ (8004ee4 <HAL_MspInit+0x54>)
 8004ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <HAL_MspInit+0x54>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee4 <HAL_MspInit+0x54>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <HAL_MspInit+0x54>)
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ec2:	4b08      	ldr	r3, [pc, #32]	@ (8004ee4 <HAL_MspInit+0x54>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	210f      	movs	r1, #15
 8004ed2:	f06f 0001 	mvn.w	r0, #1
 8004ed6:	f001 fe2e 	bl	8006b36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800

08004ee8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	@ 0x30
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef0:	f107 031c 	add.w	r3, r7, #28
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a4a      	ldr	r2, [pc, #296]	@ (8005030 <HAL_CAN_MspInit+0x148>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d13d      	bne.n	8004f86 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8005034 <HAL_CAN_MspInit+0x14c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	4a48      	ldr	r2, [pc, #288]	@ (8005034 <HAL_CAN_MspInit+0x14c>)
 8004f12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004f14:	4b47      	ldr	r3, [pc, #284]	@ (8005034 <HAL_CAN_MspInit+0x14c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d10d      	bne.n	8004f38 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	4b45      	ldr	r3, [pc, #276]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	4a44      	ldr	r2, [pc, #272]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004f26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f2c:	4b42      	ldr	r3, [pc, #264]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f40:	4a3d      	ldr	r2, [pc, #244]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004f42:	f043 0308 	orr.w	r3, r3, #8
 8004f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f48:	4b3b      	ldr	r3, [pc, #236]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f54:	2303      	movs	r3, #3
 8004f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f60:	2303      	movs	r3, #3
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004f64:	2309      	movs	r3, #9
 8004f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f68:	f107 031c 	add.w	r3, r7, #28
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4833      	ldr	r0, [pc, #204]	@ (800503c <HAL_CAN_MspInit+0x154>)
 8004f70:	f002 fa1a 	bl	80073a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004f74:	2200      	movs	r2, #0
 8004f76:	2105      	movs	r1, #5
 8004f78:	2014      	movs	r0, #20
 8004f7a:	f001 fddc 	bl	8006b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004f7e:	2014      	movs	r0, #20
 8004f80:	f001 fdf5 	bl	8006b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004f84:	e04f      	b.n	8005026 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005040 <HAL_CAN_MspInit+0x158>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d14a      	bne.n	8005026 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004f90:	2300      	movs	r3, #0
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	4b28      	ldr	r3, [pc, #160]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	4a27      	ldr	r2, [pc, #156]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004f9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fa0:	4b25      	ldr	r3, [pc, #148]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004fac:	4b21      	ldr	r3, [pc, #132]	@ (8005034 <HAL_CAN_MspInit+0x14c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	4a20      	ldr	r2, [pc, #128]	@ (8005034 <HAL_CAN_MspInit+0x14c>)
 8004fb4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005034 <HAL_CAN_MspInit+0x14c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d10d      	bne.n	8004fda <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004fc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fce:	4b1a      	ldr	r3, [pc, #104]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	4b16      	ldr	r3, [pc, #88]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	4a15      	ldr	r2, [pc, #84]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fea:	4b13      	ldr	r3, [pc, #76]	@ (8005038 <HAL_CAN_MspInit+0x150>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004ff6:	2360      	movs	r3, #96	@ 0x60
 8004ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005002:	2303      	movs	r3, #3
 8005004:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8005006:	2309      	movs	r3, #9
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800500a:	f107 031c 	add.w	r3, r7, #28
 800500e:	4619      	mov	r1, r3
 8005010:	480c      	ldr	r0, [pc, #48]	@ (8005044 <HAL_CAN_MspInit+0x15c>)
 8005012:	f002 f9c9 	bl	80073a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8005016:	2200      	movs	r2, #0
 8005018:	2105      	movs	r1, #5
 800501a:	2040      	movs	r0, #64	@ 0x40
 800501c:	f001 fd8b 	bl	8006b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8005020:	2040      	movs	r0, #64	@ 0x40
 8005022:	f001 fda4 	bl	8006b6e <HAL_NVIC_EnableIRQ>
}
 8005026:	bf00      	nop
 8005028:	3730      	adds	r7, #48	@ 0x30
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40006400 	.word	0x40006400
 8005034:	20000cc8 	.word	0x20000cc8
 8005038:	40023800 	.word	0x40023800
 800503c:	40020c00 	.word	0x40020c00
 8005040:	40006800 	.word	0x40006800
 8005044:	40020400 	.word	0x40020400

08005048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	@ 0x28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a29      	ldr	r2, [pc, #164]	@ (800510c <HAL_I2C_MspInit+0xc4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d14b      	bne.n	8005102 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	4a27      	ldr	r2, [pc, #156]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	6313      	str	r3, [r2, #48]	@ 0x30
 800507a:	4b25      	ldr	r3, [pc, #148]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	4b21      	ldr	r3, [pc, #132]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	4a20      	ldr	r2, [pc, #128]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	6313      	str	r3, [r2, #48]	@ 0x30
 8005096:	4b1e      	ldr	r3, [pc, #120]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050a8:	2312      	movs	r3, #18
 80050aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	2303      	movs	r3, #3
 80050b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050b4:	2304      	movs	r3, #4
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	4619      	mov	r1, r3
 80050be:	4815      	ldr	r0, [pc, #84]	@ (8005114 <HAL_I2C_MspInit+0xcc>)
 80050c0:	f002 f972 	bl	80073a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80050c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050ca:	2312      	movs	r3, #18
 80050cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d2:	2303      	movs	r3, #3
 80050d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80050d6:	2304      	movs	r3, #4
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	4619      	mov	r1, r3
 80050e0:	480d      	ldr	r0, [pc, #52]	@ (8005118 <HAL_I2C_MspInit+0xd0>)
 80050e2:	f002 f961 	bl	80073a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	4b09      	ldr	r3, [pc, #36]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	4a08      	ldr	r2, [pc, #32]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 80050f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050f6:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_I2C_MspInit+0xc8>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005102:	bf00      	nop
 8005104:	3728      	adds	r7, #40	@ 0x28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40005c00 	.word	0x40005c00
 8005110:	40023800 	.word	0x40023800
 8005114:	40020800 	.word	0x40020800
 8005118:	40020000 	.word	0x40020000

0800511c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	@ 0x28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005124:	f107 0314 	add.w	r3, r7, #20
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a28      	ldr	r2, [pc, #160]	@ (80051dc <HAL_SPI_MspInit+0xc0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d149      	bne.n	80051d2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	4b27      	ldr	r3, [pc, #156]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	4a26      	ldr	r2, [pc, #152]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 8005148:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800514c:	6453      	str	r3, [r2, #68]	@ 0x44
 800514e:	4b24      	ldr	r3, [pc, #144]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 8005150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	4b20      	ldr	r3, [pc, #128]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	4a1f      	ldr	r2, [pc, #124]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 8005164:	f043 0302 	orr.w	r3, r3, #2
 8005168:	6313      	str	r3, [r2, #48]	@ 0x30
 800516a:	4b1d      	ldr	r3, [pc, #116]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	4b19      	ldr	r3, [pc, #100]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	4a18      	ldr	r2, [pc, #96]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6313      	str	r3, [r2, #48]	@ 0x30
 8005186:	4b16      	ldr	r3, [pc, #88]	@ (80051e0 <HAL_SPI_MspInit+0xc4>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8005192:	2318      	movs	r3, #24
 8005194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519e:	2303      	movs	r3, #3
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051a2:	2305      	movs	r3, #5
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a6:	f107 0314 	add.w	r3, r7, #20
 80051aa:	4619      	mov	r1, r3
 80051ac:	480d      	ldr	r0, [pc, #52]	@ (80051e4 <HAL_SPI_MspInit+0xc8>)
 80051ae:	f002 f8fb 	bl	80073a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80051b2:	2380      	movs	r3, #128	@ 0x80
 80051b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b6:	2302      	movs	r3, #2
 80051b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051be:	2303      	movs	r3, #3
 80051c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051c2:	2305      	movs	r3, #5
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c6:	f107 0314 	add.w	r3, r7, #20
 80051ca:	4619      	mov	r1, r3
 80051cc:	4806      	ldr	r0, [pc, #24]	@ (80051e8 <HAL_SPI_MspInit+0xcc>)
 80051ce:	f002 f8eb 	bl	80073a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80051d2:	bf00      	nop
 80051d4:	3728      	adds	r7, #40	@ 0x28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40013000 	.word	0x40013000
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40020400 	.word	0x40020400
 80051e8:	40020000 	.word	0x40020000

080051ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a15      	ldr	r2, [pc, #84]	@ (8005250 <HAL_TIM_PWM_MspInit+0x64>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10e      	bne.n	800521c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <HAL_TIM_PWM_MspInit+0x68>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005206:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <HAL_TIM_PWM_MspInit+0x68>)
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	6453      	str	r3, [r2, #68]	@ 0x44
 800520e:	4b11      	ldr	r3, [pc, #68]	@ (8005254 <HAL_TIM_PWM_MspInit+0x68>)
 8005210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800521a:	e012      	b.n	8005242 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0d      	ldr	r2, [pc, #52]	@ (8005258 <HAL_TIM_PWM_MspInit+0x6c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d10d      	bne.n	8005242 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005226:	2300      	movs	r3, #0
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <HAL_TIM_PWM_MspInit+0x68>)
 800522c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522e:	4a09      	ldr	r2, [pc, #36]	@ (8005254 <HAL_TIM_PWM_MspInit+0x68>)
 8005230:	f043 0302 	orr.w	r3, r3, #2
 8005234:	6453      	str	r3, [r2, #68]	@ 0x44
 8005236:	4b07      	ldr	r3, [pc, #28]	@ (8005254 <HAL_TIM_PWM_MspInit+0x68>)
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	60bb      	str	r3, [r7, #8]
 8005240:	68bb      	ldr	r3, [r7, #8]
}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000
 8005254:	40023800 	.word	0x40023800
 8005258:	40010400 	.word	0x40010400

0800525c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a15      	ldr	r2, [pc, #84]	@ (80052c0 <HAL_TIM_Base_MspInit+0x64>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d10e      	bne.n	800528c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <HAL_TIM_Base_MspInit+0x68>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	4a13      	ldr	r2, [pc, #76]	@ (80052c4 <HAL_TIM_Base_MspInit+0x68>)
 8005278:	f043 0304 	orr.w	r3, r3, #4
 800527c:	6413      	str	r3, [r2, #64]	@ 0x40
 800527e:	4b11      	ldr	r3, [pc, #68]	@ (80052c4 <HAL_TIM_Base_MspInit+0x68>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800528a:	e012      	b.n	80052b2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0d      	ldr	r2, [pc, #52]	@ (80052c8 <HAL_TIM_Base_MspInit+0x6c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10d      	bne.n	80052b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	4b0a      	ldr	r3, [pc, #40]	@ (80052c4 <HAL_TIM_Base_MspInit+0x68>)
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	4a09      	ldr	r2, [pc, #36]	@ (80052c4 <HAL_TIM_Base_MspInit+0x68>)
 80052a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052a6:	4b07      	ldr	r3, [pc, #28]	@ (80052c4 <HAL_TIM_Base_MspInit+0x68>)
 80052a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	68bb      	ldr	r3, [r7, #8]
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40014400 	.word	0x40014400

080052cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	@ 0x30
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d4:	f107 031c 	add.w	r3, r7, #28
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	609a      	str	r2, [r3, #8]
 80052e0:	60da      	str	r2, [r3, #12]
 80052e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a58      	ldr	r2, [pc, #352]	@ (800544c <HAL_TIM_MspPostInit+0x180>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d11f      	bne.n	800532e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	4b57      	ldr	r3, [pc, #348]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f6:	4a56      	ldr	r2, [pc, #344]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 80052f8:	f043 0310 	orr.w	r3, r3, #16
 80052fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80052fe:	4b54      	ldr	r3, [pc, #336]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	69bb      	ldr	r3, [r7, #24]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 800530a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800530e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005310:	2302      	movs	r3, #2
 8005312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005314:	2300      	movs	r3, #0
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005318:	2300      	movs	r3, #0
 800531a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800531c:	2301      	movs	r3, #1
 800531e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005320:	f107 031c 	add.w	r3, r7, #28
 8005324:	4619      	mov	r1, r3
 8005326:	484b      	ldr	r0, [pc, #300]	@ (8005454 <HAL_TIM_MspPostInit+0x188>)
 8005328:	f002 f83e 	bl	80073a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800532c:	e089      	b.n	8005442 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a49      	ldr	r2, [pc, #292]	@ (8005458 <HAL_TIM_MspPostInit+0x18c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d11f      	bne.n	8005378 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	4b44      	ldr	r3, [pc, #272]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005340:	4a43      	ldr	r2, [pc, #268]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 8005342:	f043 0308 	orr.w	r3, r3, #8
 8005346:	6313      	str	r3, [r2, #48]	@ 0x30
 8005348:	4b41      	ldr	r3, [pc, #260]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005354:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535a:	2302      	movs	r3, #2
 800535c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005362:	2300      	movs	r3, #0
 8005364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005366:	2302      	movs	r3, #2
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800536a:	f107 031c 	add.w	r3, r7, #28
 800536e:	4619      	mov	r1, r3
 8005370:	483a      	ldr	r0, [pc, #232]	@ (800545c <HAL_TIM_MspPostInit+0x190>)
 8005372:	f002 f819 	bl	80073a8 <HAL_GPIO_Init>
}
 8005376:	e064      	b.n	8005442 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM8)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a38      	ldr	r2, [pc, #224]	@ (8005460 <HAL_TIM_MspPostInit+0x194>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d13c      	bne.n	80053fc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	4b32      	ldr	r3, [pc, #200]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538a:	4a31      	ldr	r2, [pc, #196]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 800538c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005390:	6313      	str	r3, [r2, #48]	@ 0x30
 8005392:	4b2f      	ldr	r3, [pc, #188]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 80053a8:	f043 0304 	orr.w	r3, r3, #4
 80053ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80053ae:	4b28      	ldr	r3, [pc, #160]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80053ba:	23c0      	movs	r3, #192	@ 0xc0
 80053bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053be:	2302      	movs	r3, #2
 80053c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c6:	2300      	movs	r3, #0
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80053ca:	2303      	movs	r3, #3
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80053ce:	f107 031c 	add.w	r3, r7, #28
 80053d2:	4619      	mov	r1, r3
 80053d4:	4823      	ldr	r0, [pc, #140]	@ (8005464 <HAL_TIM_MspPostInit+0x198>)
 80053d6:	f001 ffe7 	bl	80073a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053da:	2340      	movs	r3, #64	@ 0x40
 80053dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053de:	2302      	movs	r3, #2
 80053e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e6:	2300      	movs	r3, #0
 80053e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80053ea:	2303      	movs	r3, #3
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053ee:	f107 031c 	add.w	r3, r7, #28
 80053f2:	4619      	mov	r1, r3
 80053f4:	481c      	ldr	r0, [pc, #112]	@ (8005468 <HAL_TIM_MspPostInit+0x19c>)
 80053f6:	f001 ffd7 	bl	80073a8 <HAL_GPIO_Init>
}
 80053fa:	e022      	b.n	8005442 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM10)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1a      	ldr	r2, [pc, #104]	@ (800546c <HAL_TIM_MspPostInit+0x1a0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d11d      	bne.n	8005442 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	4a10      	ldr	r2, [pc, #64]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 8005410:	f043 0320 	orr.w	r3, r3, #32
 8005414:	6313      	str	r3, [r2, #48]	@ 0x30
 8005416:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <HAL_TIM_MspPostInit+0x184>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005422:	2340      	movs	r3, #64	@ 0x40
 8005424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005426:	2302      	movs	r3, #2
 8005428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800542a:	2301      	movs	r3, #1
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800542e:	2302      	movs	r3, #2
 8005430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005432:	2303      	movs	r3, #3
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005436:	f107 031c 	add.w	r3, r7, #28
 800543a:	4619      	mov	r1, r3
 800543c:	480c      	ldr	r0, [pc, #48]	@ (8005470 <HAL_TIM_MspPostInit+0x1a4>)
 800543e:	f001 ffb3 	bl	80073a8 <HAL_GPIO_Init>
}
 8005442:	bf00      	nop
 8005444:	3730      	adds	r7, #48	@ 0x30
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40023800 	.word	0x40023800
 8005454:	40021000 	.word	0x40021000
 8005458:	40000800 	.word	0x40000800
 800545c:	40020c00 	.word	0x40020c00
 8005460:	40010400 	.word	0x40010400
 8005464:	40022000 	.word	0x40022000
 8005468:	40020800 	.word	0x40020800
 800546c:	40014400 	.word	0x40014400
 8005470:	40021400 	.word	0x40021400

08005474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08e      	sub	sp, #56	@ 0x38
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a90      	ldr	r2, [pc, #576]	@ (80056d4 <HAL_UART_MspInit+0x260>)
 8005492:	4293      	cmp	r3, r2
 8005494:	f040 80b2 	bne.w	80055fc <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005498:	2300      	movs	r3, #0
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	4b8e      	ldr	r3, [pc, #568]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 800549e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a0:	4a8d      	ldr	r2, [pc, #564]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 80054a2:	f043 0310 	orr.w	r3, r3, #16
 80054a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80054a8:	4b8b      	ldr	r3, [pc, #556]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 80054aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	623b      	str	r3, [r7, #32]
 80054b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	4b87      	ldr	r3, [pc, #540]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054bc:	4a86      	ldr	r2, [pc, #536]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 80054be:	f043 0302 	orr.w	r3, r3, #2
 80054c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80054c4:	4b84      	ldr	r3, [pc, #528]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d0:	2300      	movs	r3, #0
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	4b80      	ldr	r3, [pc, #512]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 80054d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d8:	4a7f      	ldr	r2, [pc, #508]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	6313      	str	r3, [r2, #48]	@ 0x30
 80054e0:	4b7d      	ldr	r3, [pc, #500]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 80054e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80054ec:	2380      	movs	r3, #128	@ 0x80
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f0:	2302      	movs	r3, #2
 80054f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f8:	2303      	movs	r3, #3
 80054fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054fc:	2307      	movs	r3, #7
 80054fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005504:	4619      	mov	r1, r3
 8005506:	4875      	ldr	r0, [pc, #468]	@ (80056dc <HAL_UART_MspInit+0x268>)
 8005508:	f001 ff4e 	bl	80073a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800550c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	2300      	movs	r3, #0
 8005518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800551a:	2303      	movs	r3, #3
 800551c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800551e:	2307      	movs	r3, #7
 8005520:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005526:	4619      	mov	r1, r3
 8005528:	486d      	ldr	r0, [pc, #436]	@ (80056e0 <HAL_UART_MspInit+0x26c>)
 800552a:	f001 ff3d 	bl	80073a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800552e:	4b6d      	ldr	r3, [pc, #436]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005530:	4a6d      	ldr	r2, [pc, #436]	@ (80056e8 <HAL_UART_MspInit+0x274>)
 8005532:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005534:	4b6b      	ldr	r3, [pc, #428]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005536:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800553a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800553c:	4b69      	ldr	r3, [pc, #420]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 800553e:	2240      	movs	r2, #64	@ 0x40
 8005540:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005542:	4b68      	ldr	r3, [pc, #416]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005544:	2200      	movs	r2, #0
 8005546:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005548:	4b66      	ldr	r3, [pc, #408]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 800554a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800554e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005550:	4b64      	ldr	r3, [pc, #400]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005552:	2200      	movs	r2, #0
 8005554:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005556:	4b63      	ldr	r3, [pc, #396]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005558:	2200      	movs	r2, #0
 800555a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800555c:	4b61      	ldr	r3, [pc, #388]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 800555e:	2200      	movs	r2, #0
 8005560:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005562:	4b60      	ldr	r3, [pc, #384]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005564:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005568:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800556a:	4b5e      	ldr	r3, [pc, #376]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 800556c:	2200      	movs	r2, #0
 800556e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005570:	485c      	ldr	r0, [pc, #368]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005572:	f001 fb17 	bl	8006ba4 <HAL_DMA_Init>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800557c:	f7ff f8f6 	bl	800476c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a58      	ldr	r2, [pc, #352]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005584:	635a      	str	r2, [r3, #52]	@ 0x34
 8005586:	4a57      	ldr	r2, [pc, #348]	@ (80056e4 <HAL_UART_MspInit+0x270>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800558c:	4b57      	ldr	r3, [pc, #348]	@ (80056ec <HAL_UART_MspInit+0x278>)
 800558e:	4a58      	ldr	r2, [pc, #352]	@ (80056f0 <HAL_UART_MspInit+0x27c>)
 8005590:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005592:	4b56      	ldr	r3, [pc, #344]	@ (80056ec <HAL_UART_MspInit+0x278>)
 8005594:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005598:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800559a:	4b54      	ldr	r3, [pc, #336]	@ (80056ec <HAL_UART_MspInit+0x278>)
 800559c:	2200      	movs	r2, #0
 800559e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a0:	4b52      	ldr	r3, [pc, #328]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055a6:	4b51      	ldr	r3, [pc, #324]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055ae:	4b4f      	ldr	r3, [pc, #316]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055b4:	4b4d      	ldr	r3, [pc, #308]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80055ba:	4b4c      	ldr	r3, [pc, #304]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055bc:	2200      	movs	r2, #0
 80055be:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80055c0:	4b4a      	ldr	r3, [pc, #296]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055c2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80055c6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055c8:	4b48      	ldr	r3, [pc, #288]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80055ce:	4847      	ldr	r0, [pc, #284]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055d0:	f001 fae8 	bl	8006ba4 <HAL_DMA_Init>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80055da:	f7ff f8c7 	bl	800476c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a42      	ldr	r2, [pc, #264]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80055e4:	4a41      	ldr	r2, [pc, #260]	@ (80056ec <HAL_UART_MspInit+0x278>)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80055ea:	2200      	movs	r2, #0
 80055ec:	2105      	movs	r1, #5
 80055ee:	2025      	movs	r0, #37	@ 0x25
 80055f0:	f001 faa1 	bl	8006b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80055f4:	2025      	movs	r0, #37	@ 0x25
 80055f6:	f001 faba 	bl	8006b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80055fa:	e11c      	b.n	8005836 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a3c      	ldr	r2, [pc, #240]	@ (80056f4 <HAL_UART_MspInit+0x280>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d17e      	bne.n	8005704 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	4b33      	ldr	r3, [pc, #204]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	4a32      	ldr	r2, [pc, #200]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 8005610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005614:	6413      	str	r3, [r2, #64]	@ 0x40
 8005616:	4b30      	ldr	r3, [pc, #192]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005622:	2300      	movs	r3, #0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	4b2c      	ldr	r3, [pc, #176]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	4a2b      	ldr	r2, [pc, #172]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 800562c:	f043 0304 	orr.w	r3, r3, #4
 8005630:	6313      	str	r3, [r2, #48]	@ 0x30
 8005632:	4b29      	ldr	r3, [pc, #164]	@ (80056d8 <HAL_UART_MspInit+0x264>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800563e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005644:	2302      	movs	r3, #2
 8005646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005648:	2300      	movs	r3, #0
 800564a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564c:	2303      	movs	r3, #3
 800564e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005650:	2307      	movs	r3, #7
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005658:	4619      	mov	r1, r3
 800565a:	4827      	ldr	r0, [pc, #156]	@ (80056f8 <HAL_UART_MspInit+0x284>)
 800565c:	f001 fea4 	bl	80073a8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005660:	4b26      	ldr	r3, [pc, #152]	@ (80056fc <HAL_UART_MspInit+0x288>)
 8005662:	4a27      	ldr	r2, [pc, #156]	@ (8005700 <HAL_UART_MspInit+0x28c>)
 8005664:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005666:	4b25      	ldr	r3, [pc, #148]	@ (80056fc <HAL_UART_MspInit+0x288>)
 8005668:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800566c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800566e:	4b23      	ldr	r3, [pc, #140]	@ (80056fc <HAL_UART_MspInit+0x288>)
 8005670:	2200      	movs	r2, #0
 8005672:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005674:	4b21      	ldr	r3, [pc, #132]	@ (80056fc <HAL_UART_MspInit+0x288>)
 8005676:	2200      	movs	r2, #0
 8005678:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800567a:	4b20      	ldr	r3, [pc, #128]	@ (80056fc <HAL_UART_MspInit+0x288>)
 800567c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005680:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005682:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <HAL_UART_MspInit+0x288>)
 8005684:	2200      	movs	r2, #0
 8005686:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005688:	4b1c      	ldr	r3, [pc, #112]	@ (80056fc <HAL_UART_MspInit+0x288>)
 800568a:	2200      	movs	r2, #0
 800568c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800568e:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <HAL_UART_MspInit+0x288>)
 8005690:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005694:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005696:	4b19      	ldr	r3, [pc, #100]	@ (80056fc <HAL_UART_MspInit+0x288>)
 8005698:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800569c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800569e:	4b17      	ldr	r3, [pc, #92]	@ (80056fc <HAL_UART_MspInit+0x288>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80056a4:	4815      	ldr	r0, [pc, #84]	@ (80056fc <HAL_UART_MspInit+0x288>)
 80056a6:	f001 fa7d 	bl	8006ba4 <HAL_DMA_Init>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80056b0:	f7ff f85c 	bl	800476c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a11      	ldr	r2, [pc, #68]	@ (80056fc <HAL_UART_MspInit+0x288>)
 80056b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80056ba:	4a10      	ldr	r2, [pc, #64]	@ (80056fc <HAL_UART_MspInit+0x288>)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80056c0:	2200      	movs	r2, #0
 80056c2:	2105      	movs	r1, #5
 80056c4:	2027      	movs	r0, #39	@ 0x27
 80056c6:	f001 fa36 	bl	8006b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80056ca:	2027      	movs	r0, #39	@ 0x27
 80056cc:	f001 fa4f 	bl	8006b6e <HAL_NVIC_EnableIRQ>
}
 80056d0:	e0b1      	b.n	8005836 <HAL_UART_MspInit+0x3c2>
 80056d2:	bf00      	nop
 80056d4:	40011000 	.word	0x40011000
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40020400 	.word	0x40020400
 80056e0:	40020000 	.word	0x40020000
 80056e4:	20000a60 	.word	0x20000a60
 80056e8:	400264b8 	.word	0x400264b8
 80056ec:	20000ac0 	.word	0x20000ac0
 80056f0:	40026440 	.word	0x40026440
 80056f4:	40004800 	.word	0x40004800
 80056f8:	40020800 	.word	0x40020800
 80056fc:	20000b20 	.word	0x20000b20
 8005700:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a4d      	ldr	r2, [pc, #308]	@ (8005840 <HAL_UART_MspInit+0x3cc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	f040 8093 	bne.w	8005836 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	4b4b      	ldr	r3, [pc, #300]	@ (8005844 <HAL_UART_MspInit+0x3d0>)
 8005716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005718:	4a4a      	ldr	r2, [pc, #296]	@ (8005844 <HAL_UART_MspInit+0x3d0>)
 800571a:	f043 0320 	orr.w	r3, r3, #32
 800571e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005720:	4b48      	ldr	r3, [pc, #288]	@ (8005844 <HAL_UART_MspInit+0x3d0>)
 8005722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800572c:	2300      	movs	r3, #0
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	4b44      	ldr	r3, [pc, #272]	@ (8005844 <HAL_UART_MspInit+0x3d0>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	4a43      	ldr	r2, [pc, #268]	@ (8005844 <HAL_UART_MspInit+0x3d0>)
 8005736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573a:	6313      	str	r3, [r2, #48]	@ 0x30
 800573c:	4b41      	ldr	r3, [pc, #260]	@ (8005844 <HAL_UART_MspInit+0x3d0>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8005748:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574e:	2302      	movs	r3, #2
 8005750:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005752:	2300      	movs	r3, #0
 8005754:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005756:	2303      	movs	r3, #3
 8005758:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800575a:	2308      	movs	r3, #8
 800575c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800575e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005762:	4619      	mov	r1, r3
 8005764:	4838      	ldr	r0, [pc, #224]	@ (8005848 <HAL_UART_MspInit+0x3d4>)
 8005766:	f001 fe1f 	bl	80073a8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800576a:	4b38      	ldr	r3, [pc, #224]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 800576c:	4a38      	ldr	r2, [pc, #224]	@ (8005850 <HAL_UART_MspInit+0x3dc>)
 800576e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005770:	4b36      	ldr	r3, [pc, #216]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 8005772:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005776:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005778:	4b34      	ldr	r3, [pc, #208]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800577e:	4b33      	ldr	r3, [pc, #204]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 8005780:	2200      	movs	r2, #0
 8005782:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005784:	4b31      	ldr	r3, [pc, #196]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 8005786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800578a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800578c:	4b2f      	ldr	r3, [pc, #188]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 800578e:	2200      	movs	r2, #0
 8005790:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005792:	4b2e      	ldr	r3, [pc, #184]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 8005794:	2200      	movs	r2, #0
 8005796:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8005798:	4b2c      	ldr	r3, [pc, #176]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 800579a:	2200      	movs	r2, #0
 800579c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800579e:	4b2b      	ldr	r3, [pc, #172]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 80057a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80057a4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057a6:	4b29      	ldr	r3, [pc, #164]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80057ac:	4827      	ldr	r0, [pc, #156]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 80057ae:	f001 f9f9 	bl	8006ba4 <HAL_DMA_Init>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_UART_MspInit+0x348>
      Error_Handler();
 80057b8:	f7fe ffd8 	bl	800476c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a23      	ldr	r2, [pc, #140]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 80057c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80057c2:	4a22      	ldr	r2, [pc, #136]	@ (800584c <HAL_UART_MspInit+0x3d8>)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80057c8:	4b22      	ldr	r3, [pc, #136]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057ca:	4a23      	ldr	r2, [pc, #140]	@ (8005858 <HAL_UART_MspInit+0x3e4>)
 80057cc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80057ce:	4b21      	ldr	r3, [pc, #132]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057d0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80057d4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057d8:	2240      	movs	r2, #64	@ 0x40
 80057da:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057de:	2200      	movs	r2, #0
 80057e0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057e8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057f0:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80057f6:	4b17      	ldr	r3, [pc, #92]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80057fc:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 80057fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005802:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005804:	4b13      	ldr	r3, [pc, #76]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 8005806:	2200      	movs	r2, #0
 8005808:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800580a:	4812      	ldr	r0, [pc, #72]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 800580c:	f001 f9ca 	bl	8006ba4 <HAL_DMA_Init>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8005816:	f7fe ffa9 	bl	800476c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a0d      	ldr	r2, [pc, #52]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 800581e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005820:	4a0c      	ldr	r2, [pc, #48]	@ (8005854 <HAL_UART_MspInit+0x3e0>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005826:	2200      	movs	r2, #0
 8005828:	2105      	movs	r1, #5
 800582a:	2047      	movs	r0, #71	@ 0x47
 800582c:	f001 f983 	bl	8006b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005830:	2047      	movs	r0, #71	@ 0x47
 8005832:	f001 f99c 	bl	8006b6e <HAL_NVIC_EnableIRQ>
}
 8005836:	bf00      	nop
 8005838:	3738      	adds	r7, #56	@ 0x38
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40011400 	.word	0x40011400
 8005844:	40023800 	.word	0x40023800
 8005848:	40021800 	.word	0x40021800
 800584c:	20000b80 	.word	0x20000b80
 8005850:	40026428 	.word	0x40026428
 8005854:	20000be0 	.word	0x20000be0
 8005858:	400264a0 	.word	0x400264a0

0800585c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005860:	f003 fb94 	bl	8008f8c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005864:	bf00      	nop
 8005866:	e7fd      	b.n	8005864 <NMI_Handler+0x8>

08005868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <HardFault_Handler+0x4>

08005870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <MemManage_Handler+0x4>

08005878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <BusFault_Handler+0x4>

08005880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <UsageFault_Handler+0x4>

08005888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800589a:	f000 f9cb 	bl	8005c34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800589e:	f007 fe37 	bl	800d510 <xTaskGetSchedulerState>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d001      	beq.n	80058ac <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80058a8:	f008 fd0e 	bl	800e2c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80058b4:	2008      	movs	r0, #8
 80058b6:	f001 ff2d 	bl	8007714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 80058ba:	4802      	ldr	r0, [pc, #8]	@ (80058c4 <EXTI3_IRQHandler+0x14>)
 80058bc:	f7fc fe82 	bl	80025c4 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80058c0:	bf00      	nop
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	2000076c 	.word	0x2000076c

080058c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80058cc:	2010      	movs	r0, #16
 80058ce:	f001 ff21 	bl	8007714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80058d2:	bf00      	nop
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80058dc:	4802      	ldr	r0, [pc, #8]	@ (80058e8 <DMA1_Stream1_IRQHandler+0x10>)
 80058de:	f001 faf9 	bl	8006ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000b20 	.word	0x20000b20

080058ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80058f0:	4802      	ldr	r0, [pc, #8]	@ (80058fc <CAN1_RX0_IRQHandler+0x10>)
 80058f2:	f000 fe16 	bl	8006522 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000778 	.word	0x20000778

08005900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005904:	4802      	ldr	r0, [pc, #8]	@ (8005910 <USART1_IRQHandler+0x10>)
 8005906:	f004 febb 	bl	800a680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000994 	.word	0x20000994

08005914 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005918:	4802      	ldr	r0, [pc, #8]	@ (8005924 <DMA2_Stream1_IRQHandler+0x10>)
 800591a:	f001 fadb 	bl	8006ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000b80 	.word	0x20000b80

08005928 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800592c:	4802      	ldr	r0, [pc, #8]	@ (8005938 <DMA2_Stream2_IRQHandler+0x10>)
 800592e:	f001 fad1 	bl	8006ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000ac0 	.word	0x20000ac0

0800593c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005940:	4802      	ldr	r0, [pc, #8]	@ (800594c <CAN2_RX0_IRQHandler+0x10>)
 8005942:	f000 fdee 	bl	8006522 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200007a0 	.word	0x200007a0

08005950 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005954:	4802      	ldr	r0, [pc, #8]	@ (8005960 <DMA2_Stream6_IRQHandler+0x10>)
 8005956:	f001 fabd 	bl	8006ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800595a:	bf00      	nop
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000be0 	.word	0x20000be0

08005964 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005968:	4802      	ldr	r0, [pc, #8]	@ (8005974 <DMA2_Stream7_IRQHandler+0x10>)
 800596a:	f001 fab3 	bl	8006ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000a60 	.word	0x20000a60

08005978 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800597c:	4802      	ldr	r0, [pc, #8]	@ (8005988 <USART6_IRQHandler+0x10>)
 800597e:	f004 fe7f 	bl	800a680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005982:	bf00      	nop
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000a1c 	.word	0x20000a1c

0800598c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return 1;
 8005990:	2301      	movs	r3, #1
}
 8005992:	4618      	mov	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <_kill>:

int _kill(int pid, int sig)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059a6:	f009 fd35 	bl	800f414 <__errno>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2216      	movs	r2, #22
 80059ae:	601a      	str	r2, [r3, #0]
  return -1;
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_exit>:

void _exit (int status)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059c4:	f04f 31ff 	mov.w	r1, #4294967295
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff ffe7 	bl	800599c <_kill>
  while (1) {}    /* Make sure we hang here */
 80059ce:	bf00      	nop
 80059d0:	e7fd      	b.n	80059ce <_exit+0x12>

080059d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	e00a      	b.n	80059fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059e4:	f3af 8000 	nop.w
 80059e8:	4601      	mov	r1, r0
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	60ba      	str	r2, [r7, #8]
 80059f0:	b2ca      	uxtb	r2, r1
 80059f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	3301      	adds	r3, #1
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	dbf0      	blt.n	80059e4 <_read+0x12>
  }

  return len;
 8005a02:	687b      	ldr	r3, [r7, #4]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e009      	b.n	8005a32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	60ba      	str	r2, [r7, #8]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	dbf1      	blt.n	8005a1e <_write+0x12>
  }
  return len;
 8005a3a:	687b      	ldr	r3, [r7, #4]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <_close>:

int _close(int file)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <_isatty>:

int _isatty(int file)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a84:	2301      	movs	r3, #1
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ab4:	4a14      	ldr	r2, [pc, #80]	@ (8005b08 <_sbrk+0x5c>)
 8005ab6:	4b15      	ldr	r3, [pc, #84]	@ (8005b0c <_sbrk+0x60>)
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ac0:	4b13      	ldr	r3, [pc, #76]	@ (8005b10 <_sbrk+0x64>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d102      	bne.n	8005ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ac8:	4b11      	ldr	r3, [pc, #68]	@ (8005b10 <_sbrk+0x64>)
 8005aca:	4a12      	ldr	r2, [pc, #72]	@ (8005b14 <_sbrk+0x68>)
 8005acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ace:	4b10      	ldr	r3, [pc, #64]	@ (8005b10 <_sbrk+0x64>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d207      	bcs.n	8005aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005adc:	f009 fc9a 	bl	800f414 <__errno>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	220c      	movs	r2, #12
 8005ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aea:	e009      	b.n	8005b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005aec:	4b08      	ldr	r3, [pc, #32]	@ (8005b10 <_sbrk+0x64>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005af2:	4b07      	ldr	r3, [pc, #28]	@ (8005b10 <_sbrk+0x64>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	4a05      	ldr	r2, [pc, #20]	@ (8005b10 <_sbrk+0x64>)
 8005afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005afe:	68fb      	ldr	r3, [r7, #12]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20020000 	.word	0x20020000
 8005b0c:	00000400 	.word	0x00000400
 8005b10:	20000ccc 	.word	0x20000ccc
 8005b14:	20005808 	.word	0x20005808

08005b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <SystemInit+0x20>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	4a05      	ldr	r2, [pc, #20]	@ (8005b38 <SystemInit+0x20>)
 8005b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b2c:	bf00      	nop
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	e000ed00 	.word	0xe000ed00

08005b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b40:	480d      	ldr	r0, [pc, #52]	@ (8005b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b42:	490e      	ldr	r1, [pc, #56]	@ (8005b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b44:	4a0e      	ldr	r2, [pc, #56]	@ (8005b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b48:	e002      	b.n	8005b50 <LoopCopyDataInit>

08005b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b4e:	3304      	adds	r3, #4

08005b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b54:	d3f9      	bcc.n	8005b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b56:	4a0b      	ldr	r2, [pc, #44]	@ (8005b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b58:	4c0b      	ldr	r4, [pc, #44]	@ (8005b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b5c:	e001      	b.n	8005b62 <LoopFillZerobss>

08005b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b60:	3204      	adds	r2, #4

08005b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b64:	d3fb      	bcc.n	8005b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b66:	f7ff ffd7 	bl	8005b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b6a:	f009 fc59 	bl	800f420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b6e:	f7fc fe49 	bl	8002804 <main>
  bx  lr    
 8005b72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005b74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b7c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8005b80:	08012ce0 	.word	0x08012ce0
  ldr r2, =_sbss
 8005b84:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8005b88:	20005808 	.word	0x20005808

08005b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b8c:	e7fe      	b.n	8005b8c <ADC_IRQHandler>
	...

08005b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b94:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd0 <HAL_Init+0x40>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd0 <HAL_Init+0x40>)
 8005b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <HAL_Init+0x40>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd0 <HAL_Init+0x40>)
 8005ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bac:	4b08      	ldr	r3, [pc, #32]	@ (8005bd0 <HAL_Init+0x40>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a07      	ldr	r2, [pc, #28]	@ (8005bd0 <HAL_Init+0x40>)
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bb8:	2003      	movs	r0, #3
 8005bba:	f000 ffb1 	bl	8006b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bbe:	200f      	movs	r0, #15
 8005bc0:	f000 f808 	bl	8005bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bc4:	f7ff f964 	bl	8004e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40023c00 	.word	0x40023c00

08005bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bdc:	4b12      	ldr	r3, [pc, #72]	@ (8005c28 <HAL_InitTick+0x54>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4b12      	ldr	r3, [pc, #72]	@ (8005c2c <HAL_InitTick+0x58>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	4619      	mov	r1, r3
 8005be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 ffc9 	bl	8006b8a <HAL_SYSTICK_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e00e      	b.n	8005c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b0f      	cmp	r3, #15
 8005c06:	d80a      	bhi.n	8005c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c08:	2200      	movs	r2, #0
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	f000 ff91 	bl	8006b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c14:	4a06      	ldr	r2, [pc, #24]	@ (8005c30 <HAL_InitTick+0x5c>)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	e000      	b.n	8005c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000060 	.word	0x20000060
 8005c2c:	20000068 	.word	0x20000068
 8005c30:	20000064 	.word	0x20000064

08005c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <HAL_IncTick+0x20>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <HAL_IncTick+0x24>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4413      	add	r3, r2
 8005c44:	4a04      	ldr	r2, [pc, #16]	@ (8005c58 <HAL_IncTick+0x24>)
 8005c46:	6013      	str	r3, [r2, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000068 	.word	0x20000068
 8005c58:	20000cd0 	.word	0x20000cd0

08005c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8005c60:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <HAL_GetTick+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000cd0 	.word	0x20000cd0

08005c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c7c:	f7ff ffee 	bl	8005c5c <HAL_GetTick>
 8005c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d005      	beq.n	8005c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb8 <HAL_Delay+0x44>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c9a:	bf00      	nop
 8005c9c:	f7ff ffde 	bl	8005c5c <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d8f7      	bhi.n	8005c9c <HAL_Delay+0x28>
  {
  }
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000068 	.word	0x20000068

08005cbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e0ed      	b.n	8005eaa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d102      	bne.n	8005ce0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff f904 	bl	8004ee8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cf0:	f7ff ffb4 	bl	8005c5c <HAL_GetTick>
 8005cf4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005cf6:	e012      	b.n	8005d1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005cf8:	f7ff ffb0 	bl	8005c5c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b0a      	cmp	r3, #10
 8005d04:	d90b      	bls.n	8005d1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2205      	movs	r2, #5
 8005d16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e0c5      	b.n	8005eaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0e5      	beq.n	8005cf8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0202 	bic.w	r2, r2, #2
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d3c:	f7ff ff8e 	bl	8005c5c <HAL_GetTick>
 8005d40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005d42:	e012      	b.n	8005d6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d44:	f7ff ff8a 	bl	8005c5c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b0a      	cmp	r3, #10
 8005d50:	d90b      	bls.n	8005d6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2205      	movs	r2, #5
 8005d62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e09f      	b.n	8005eaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e5      	bne.n	8005d44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	7e1b      	ldrb	r3, [r3, #24]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d108      	bne.n	8005d92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e007      	b.n	8005da2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7e5b      	ldrb	r3, [r3, #25]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d108      	bne.n	8005dbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e007      	b.n	8005dcc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7e9b      	ldrb	r3, [r3, #26]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d108      	bne.n	8005de6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0220 	orr.w	r2, r2, #32
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e007      	b.n	8005df6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0220 	bic.w	r2, r2, #32
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7edb      	ldrb	r3, [r3, #27]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d108      	bne.n	8005e10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0210 	bic.w	r2, r2, #16
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	e007      	b.n	8005e20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0210 	orr.w	r2, r2, #16
 8005e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	7f1b      	ldrb	r3, [r3, #28]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d108      	bne.n	8005e3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0208 	orr.w	r2, r2, #8
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e007      	b.n	8005e4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0208 	bic.w	r2, r2, #8
 8005e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7f5b      	ldrb	r3, [r3, #29]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d108      	bne.n	8005e64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0204 	orr.w	r2, r2, #4
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e007      	b.n	8005e74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0204 	bic.w	r2, r2, #4
 8005e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	ea42 0103 	orr.w	r1, r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	1e5a      	subs	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d003      	beq.n	8005eda <HAL_CAN_ConfigFilter+0x26>
 8005ed2:	7cfb      	ldrb	r3, [r7, #19]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	f040 80be 	bne.w	8006056 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005eda:	4b65      	ldr	r3, [pc, #404]	@ (8006070 <HAL_CAN_ConfigFilter+0x1bc>)
 8005edc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005ee4:	f043 0201 	orr.w	r2, r3, #1
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005ef4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	401a      	ands	r2, r3
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d123      	bne.n	8005f84 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	43db      	mvns	r3, r3
 8005f46:	401a      	ands	r2, r3
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005f5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	3248      	adds	r2, #72	@ 0x48
 8005f64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005f78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005f7a:	6979      	ldr	r1, [r7, #20]
 8005f7c:	3348      	adds	r3, #72	@ 0x48
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	440b      	add	r3, r1
 8005f82:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d122      	bne.n	8005fd2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005fac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	3248      	adds	r2, #72	@ 0x48
 8005fb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005fc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005fc8:	6979      	ldr	r1, [r7, #20]
 8005fca:	3348      	adds	r3, #72	@ 0x48
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	440b      	add	r3, r1
 8005fd0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	401a      	ands	r2, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005fec:	e007      	b.n	8005ffe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	43db      	mvns	r3, r3
 8006010:	401a      	ands	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006018:	e007      	b.n	800602a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	431a      	orrs	r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d107      	bne.n	8006042 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	431a      	orrs	r2, r3
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006048:	f023 0201 	bic.w	r2, r3, #1
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e006      	b.n	8006064 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
  }
}
 8006064:	4618      	mov	r0, r3
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40006400 	.word	0x40006400

08006074 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d12e      	bne.n	80060e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060a0:	f7ff fddc 	bl	8005c5c <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80060a6:	e012      	b.n	80060ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80060a8:	f7ff fdd8 	bl	8005c5c <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b0a      	cmp	r3, #10
 80060b4:	d90b      	bls.n	80060ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2205      	movs	r2, #5
 80060c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e012      	b.n	80060f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e5      	bne.n	80060a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e006      	b.n	80060f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
  }
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b089      	sub	sp, #36	@ 0x24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006110:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800611a:	7ffb      	ldrb	r3, [r7, #31]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d003      	beq.n	8006128 <HAL_CAN_AddTxMessage+0x2c>
 8006120:	7ffb      	ldrb	r3, [r7, #31]
 8006122:	2b02      	cmp	r3, #2
 8006124:	f040 80b8 	bne.w	8006298 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006138:	2b00      	cmp	r3, #0
 800613a:	d105      	bne.n	8006148 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80a0 	beq.w	8006288 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	0e1b      	lsrs	r3, r3, #24
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d907      	bls.n	8006168 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e09e      	b.n	80062a6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006168:	2201      	movs	r2, #1
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	409a      	lsls	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10d      	bne.n	8006196 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006184:	68f9      	ldr	r1, [r7, #12]
 8006186:	6809      	ldr	r1, [r1, #0]
 8006188:	431a      	orrs	r2, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	3318      	adds	r3, #24
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	440b      	add	r3, r1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e00f      	b.n	80061b6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80061a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80061aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	3318      	adds	r3, #24
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	440b      	add	r3, r1
 80061b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6819      	ldr	r1, [r3, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	3318      	adds	r3, #24
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	440b      	add	r3, r1
 80061c6:	3304      	adds	r3, #4
 80061c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	7d1b      	ldrb	r3, [r3, #20]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d111      	bne.n	80061f6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	3318      	adds	r3, #24
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	4413      	add	r3, r2
 80061de:	3304      	adds	r3, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	6811      	ldr	r1, [r2, #0]
 80061e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	3318      	adds	r3, #24
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	440b      	add	r3, r1
 80061f2:	3304      	adds	r3, #4
 80061f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3307      	adds	r3, #7
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	061a      	lsls	r2, r3, #24
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3306      	adds	r3, #6
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3305      	adds	r3, #5
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	4313      	orrs	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	3204      	adds	r2, #4
 8006216:	7812      	ldrb	r2, [r2, #0]
 8006218:	4610      	mov	r0, r2
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	6811      	ldr	r1, [r2, #0]
 800621e:	ea43 0200 	orr.w	r2, r3, r0
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	440b      	add	r3, r1
 8006228:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800622c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3303      	adds	r3, #3
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	061a      	lsls	r2, r3, #24
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3302      	adds	r3, #2
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3301      	adds	r3, #1
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	4313      	orrs	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	7812      	ldrb	r2, [r2, #0]
 800624e:	4610      	mov	r0, r2
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	6811      	ldr	r1, [r2, #0]
 8006254:	ea43 0200 	orr.w	r2, r3, r0
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	440b      	add	r3, r1
 800625e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006262:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	3318      	adds	r3, #24
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	4413      	add	r3, r2
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	6811      	ldr	r1, [r2, #0]
 8006276:	f043 0201 	orr.w	r2, r3, #1
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3318      	adds	r3, #24
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	440b      	add	r3, r1
 8006282:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e00e      	b.n	80062a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e006      	b.n	80062a6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
  }
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3724      	adds	r7, #36	@ 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80062b2:	b480      	push	{r7}
 80062b4:	b087      	sub	sp, #28
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d003      	beq.n	80062d6 <HAL_CAN_GetRxMessage+0x24>
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	f040 80f3 	bne.w	80064bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10e      	bne.n	80062fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d116      	bne.n	8006318 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e0e7      	b.n	80064ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d107      	bne.n	8006318 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e0d8      	b.n	80064ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	331b      	adds	r3, #27
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	4413      	add	r3, r2
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0204 	and.w	r2, r3, #4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	331b      	adds	r3, #27
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	4413      	add	r3, r2
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	0d5b      	lsrs	r3, r3, #21
 8006346:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e00b      	b.n	8006368 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	331b      	adds	r3, #27
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	4413      	add	r3, r2
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	08db      	lsrs	r3, r3, #3
 8006360:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	331b      	adds	r3, #27
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	4413      	add	r3, r2
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0202 	and.w	r2, r3, #2
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	331b      	adds	r3, #27
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	4413      	add	r3, r2
 800638a:	3304      	adds	r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	331b      	adds	r3, #27
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	4413      	add	r3, r2
 80063a2:	3304      	adds	r3, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	0a1b      	lsrs	r3, r3, #8
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	331b      	adds	r3, #27
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	4413      	add	r3, r2
 80063ba:	3304      	adds	r3, #4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	0c1b      	lsrs	r3, r3, #16
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	0a1a      	lsrs	r2, r3, #8
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	4413      	add	r3, r2
 8006400:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	0c1a      	lsrs	r2, r3, #16
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	3302      	adds	r3, #2
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	4413      	add	r3, r2
 800641a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	0e1a      	lsrs	r2, r3, #24
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	3303      	adds	r3, #3
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	4413      	add	r3, r2
 8006434:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	3304      	adds	r3, #4
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	4413      	add	r3, r2
 800644c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	0a1a      	lsrs	r2, r3, #8
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	3305      	adds	r3, #5
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	4413      	add	r3, r2
 8006466:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	0c1a      	lsrs	r2, r3, #16
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	3306      	adds	r3, #6
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	4413      	add	r3, r2
 8006480:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	0e1a      	lsrs	r2, r3, #24
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	3307      	adds	r3, #7
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d108      	bne.n	80064a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0220 	orr.w	r2, r2, #32
 80064a4:	60da      	str	r2, [r3, #12]
 80064a6:	e007      	b.n	80064b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0220 	orr.w	r2, r2, #32
 80064b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e006      	b.n	80064ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d002      	beq.n	80064f4 <HAL_CAN_ActivateNotification+0x1e>
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d109      	bne.n	8006508 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6959      	ldr	r1, [r3, #20]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	e006      	b.n	8006516 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b08a      	sub	sp, #40	@ 0x28
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800652a:	2300      	movs	r3, #0
 800652c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d07c      	beq.n	8006662 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d023      	beq.n	80065ba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2201      	movs	r2, #1
 8006578:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f983 	bl	8006890 <HAL_CAN_TxMailbox0CompleteCallback>
 800658a:	e016      	b.n	80065ba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800659c:	627b      	str	r3, [r7, #36]	@ 0x24
 800659e:	e00c      	b.n	80065ba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b2:	e002      	b.n	80065ba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f989 	bl	80068cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d024      	beq.n	800660e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f963 	bl	80068a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80065de:	e016      	b.n	800660e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f2:	e00c      	b.n	800660e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d004      	beq.n	8006608 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
 8006606:	e002      	b.n	800660e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f969 	bl	80068e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d024      	beq.n	8006662 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006620:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f943 	bl	80068b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8006632:	e016      	b.n	8006662 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
 8006646:	e00c      	b.n	8006662 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d004      	beq.n	800665c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006658:	627b      	str	r3, [r7, #36]	@ 0x24
 800665a:	e002      	b.n	8006662 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f949 	bl	80068f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00c      	beq.n	8006686 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2210      	movs	r2, #16
 8006684:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d006      	beq.n	80066a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2208      	movs	r2, #8
 80066a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f930 	bl	8006908 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fa ffb7 	bl	8001634 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f003 0310 	and.w	r3, r3, #16
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2210      	movs	r2, #16
 80066e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d006      	beq.n	800670c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2208      	movs	r2, #8
 8006704:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f912 	bl	8006930 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f8f9 	bl	800691c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b00      	cmp	r3, #0
 800673c:	d006      	beq.n	800674c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2210      	movs	r2, #16
 8006744:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f8fc 	bl	8006944 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d006      	beq.n	800676e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2208      	movs	r2, #8
 8006766:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8f5 	bl	8006958 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d07b      	beq.n	8006870 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d072      	beq.n	8006868 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	f043 0302 	orr.w	r3, r3, #2
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d043      	beq.n	8006868 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d03e      	beq.n	8006868 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067f0:	2b60      	cmp	r3, #96	@ 0x60
 80067f2:	d02b      	beq.n	800684c <HAL_CAN_IRQHandler+0x32a>
 80067f4:	2b60      	cmp	r3, #96	@ 0x60
 80067f6:	d82e      	bhi.n	8006856 <HAL_CAN_IRQHandler+0x334>
 80067f8:	2b50      	cmp	r3, #80	@ 0x50
 80067fa:	d022      	beq.n	8006842 <HAL_CAN_IRQHandler+0x320>
 80067fc:	2b50      	cmp	r3, #80	@ 0x50
 80067fe:	d82a      	bhi.n	8006856 <HAL_CAN_IRQHandler+0x334>
 8006800:	2b40      	cmp	r3, #64	@ 0x40
 8006802:	d019      	beq.n	8006838 <HAL_CAN_IRQHandler+0x316>
 8006804:	2b40      	cmp	r3, #64	@ 0x40
 8006806:	d826      	bhi.n	8006856 <HAL_CAN_IRQHandler+0x334>
 8006808:	2b30      	cmp	r3, #48	@ 0x30
 800680a:	d010      	beq.n	800682e <HAL_CAN_IRQHandler+0x30c>
 800680c:	2b30      	cmp	r3, #48	@ 0x30
 800680e:	d822      	bhi.n	8006856 <HAL_CAN_IRQHandler+0x334>
 8006810:	2b10      	cmp	r3, #16
 8006812:	d002      	beq.n	800681a <HAL_CAN_IRQHandler+0x2f8>
 8006814:	2b20      	cmp	r3, #32
 8006816:	d005      	beq.n	8006824 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006818:	e01d      	b.n	8006856 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	f043 0308 	orr.w	r3, r3, #8
 8006820:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006822:	e019      	b.n	8006858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	f043 0310 	orr.w	r3, r3, #16
 800682a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800682c:	e014      	b.n	8006858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	f043 0320 	orr.w	r3, r3, #32
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006836:	e00f      	b.n	8006858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006840:	e00a      	b.n	8006858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800684a:	e005      	b.n	8006858 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006852:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006854:	e000      	b.n	8006858 <HAL_CAN_IRQHandler+0x336>
            break;
 8006856:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006866:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2204      	movs	r2, #4
 800686e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f872 	bl	800696c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006888:	bf00      	nop
 800688a:	3728      	adds	r7, #40	@ 0x28
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006990:	4b0c      	ldr	r3, [pc, #48]	@ (80069c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800699c:	4013      	ands	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80069ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069b2:	4a04      	ldr	r2, [pc, #16]	@ (80069c4 <__NVIC_SetPriorityGrouping+0x44>)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	60d3      	str	r3, [r2, #12]
}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069cc:	4b04      	ldr	r3, [pc, #16]	@ (80069e0 <__NVIC_GetPriorityGrouping+0x18>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	0a1b      	lsrs	r3, r3, #8
 80069d2:	f003 0307 	and.w	r3, r3, #7
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	e000ed00 	.word	0xe000ed00

080069e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	db0b      	blt.n	8006a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	f003 021f 	and.w	r2, r3, #31
 80069fc:	4907      	ldr	r1, [pc, #28]	@ (8006a1c <__NVIC_EnableIRQ+0x38>)
 80069fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	2001      	movs	r0, #1
 8006a06:	fa00 f202 	lsl.w	r2, r0, r2
 8006a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	e000e100 	.word	0xe000e100

08006a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	6039      	str	r1, [r7, #0]
 8006a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	db0a      	blt.n	8006a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	490c      	ldr	r1, [pc, #48]	@ (8006a6c <__NVIC_SetPriority+0x4c>)
 8006a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a3e:	0112      	lsls	r2, r2, #4
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	440b      	add	r3, r1
 8006a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a48:	e00a      	b.n	8006a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	4908      	ldr	r1, [pc, #32]	@ (8006a70 <__NVIC_SetPriority+0x50>)
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	3b04      	subs	r3, #4
 8006a58:	0112      	lsls	r2, r2, #4
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	761a      	strb	r2, [r3, #24]
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	e000e100 	.word	0xe000e100
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b089      	sub	sp, #36	@ 0x24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f1c3 0307 	rsb	r3, r3, #7
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	bf28      	it	cs
 8006a92:	2304      	movcs	r3, #4
 8006a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	2b06      	cmp	r3, #6
 8006a9c:	d902      	bls.n	8006aa4 <NVIC_EncodePriority+0x30>
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	3b03      	subs	r3, #3
 8006aa2:	e000      	b.n	8006aa6 <NVIC_EncodePriority+0x32>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43da      	mvns	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006abc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac6:	43d9      	mvns	r1, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006acc:	4313      	orrs	r3, r2
         );
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3724      	adds	r7, #36	@ 0x24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
	...

08006adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aec:	d301      	bcc.n	8006af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aee:	2301      	movs	r3, #1
 8006af0:	e00f      	b.n	8006b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006af2:	4a0a      	ldr	r2, [pc, #40]	@ (8006b1c <SysTick_Config+0x40>)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006afa:	210f      	movs	r1, #15
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	f7ff ff8e 	bl	8006a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b04:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <SysTick_Config+0x40>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b0a:	4b04      	ldr	r3, [pc, #16]	@ (8006b1c <SysTick_Config+0x40>)
 8006b0c:	2207      	movs	r2, #7
 8006b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	e000e010 	.word	0xe000e010

08006b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ff29 	bl	8006980 <__NVIC_SetPriorityGrouping>
}
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b086      	sub	sp, #24
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b48:	f7ff ff3e 	bl	80069c8 <__NVIC_GetPriorityGrouping>
 8006b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	6978      	ldr	r0, [r7, #20]
 8006b54:	f7ff ff8e 	bl	8006a74 <NVIC_EncodePriority>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff ff5d 	bl	8006a20 <__NVIC_SetPriority>
}
 8006b66:	bf00      	nop
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	4603      	mov	r3, r0
 8006b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff ff31 	bl	80069e4 <__NVIC_EnableIRQ>
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff ffa2 	bl	8006adc <SysTick_Config>
 8006b98:	4603      	mov	r3, r0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006bb0:	f7ff f854 	bl	8005c5c <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e099      	b.n	8006cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006be0:	e00f      	b.n	8006c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006be2:	f7ff f83b 	bl	8005c5c <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b05      	cmp	r3, #5
 8006bee:	d908      	bls.n	8006c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e078      	b.n	8006cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e8      	bne.n	8006be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4b38      	ldr	r3, [pc, #224]	@ (8006cfc <HAL_DMA_Init+0x158>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d107      	bne.n	8006c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c64:	4313      	orrs	r3, r2
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f023 0307 	bic.w	r3, r3, #7
 8006c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d117      	bne.n	8006cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb01 	bl	80072b0 <DMA_CheckFifoParam>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2240      	movs	r2, #64	@ 0x40
 8006cb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e016      	b.n	8006cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fab8 	bl	8007244 <DMA_CalcBaseAndBitshift>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cdc:	223f      	movs	r2, #63	@ 0x3f
 8006cde:	409a      	lsls	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	f010803f 	.word	0xf010803f

08006d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_DMA_Start_IT+0x26>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e040      	b.n	8006da8 <HAL_DMA_Start_IT+0xa8>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d12f      	bne.n	8006d9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fa4a 	bl	80071e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d58:	223f      	movs	r2, #63	@ 0x3f
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0216 	orr.w	r2, r2, #22
 8006d6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0208 	orr.w	r2, r2, #8
 8006d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e005      	b.n	8006da6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
 8006da4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006dbe:	f7fe ff4d 	bl	8005c5c <HAL_GetTick>
 8006dc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d008      	beq.n	8006de2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2280      	movs	r2, #128	@ 0x80
 8006dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e052      	b.n	8006e88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0216 	bic.w	r2, r2, #22
 8006df0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	695a      	ldr	r2, [r3, #20]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <HAL_DMA_Abort+0x62>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0208 	bic.w	r2, r2, #8
 8006e20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e32:	e013      	b.n	8006e5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e34:	f7fe ff12 	bl	8005c5c <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	d90c      	bls.n	8006e5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e015      	b.n	8006e88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e4      	bne.n	8006e34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e6e:	223f      	movs	r2, #63	@ 0x3f
 8006e70:	409a      	lsls	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d004      	beq.n	8006eae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2280      	movs	r2, #128	@ 0x80
 8006ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e00c      	b.n	8006ec8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2205      	movs	r2, #5
 8006eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ee0:	4b8e      	ldr	r3, [pc, #568]	@ (800711c <HAL_DMA_IRQHandler+0x248>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a8e      	ldr	r2, [pc, #568]	@ (8007120 <HAL_DMA_IRQHandler+0x24c>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	0a9b      	lsrs	r3, r3, #10
 8006eec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006efe:	2208      	movs	r2, #8
 8006f00:	409a      	lsls	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01a      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d013      	beq.n	8006f40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0204 	bic.w	r2, r2, #4
 8006f26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f38:	f043 0201 	orr.w	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f44:	2201      	movs	r2, #1
 8006f46:	409a      	lsls	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d012      	beq.n	8006f76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f62:	2201      	movs	r2, #1
 8006f64:	409a      	lsls	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6e:	f043 0202 	orr.w	r2, r3, #2
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d012      	beq.n	8006fac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f98:	2204      	movs	r2, #4
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa4:	f043 0204 	orr.w	r2, r3, #4
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb0:	2210      	movs	r2, #16
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d043      	beq.n	8007044 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d03c      	beq.n	8007044 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fce:	2210      	movs	r2, #16
 8006fd0:	409a      	lsls	r2, r3
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d018      	beq.n	8007016 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d108      	bne.n	8007004 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d024      	beq.n	8007044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	e01f      	b.n	8007044 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01b      	beq.n	8007044 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
 8007014:	e016      	b.n	8007044 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0208 	bic.w	r2, r2, #8
 8007032:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007048:	2220      	movs	r2, #32
 800704a:	409a      	lsls	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4013      	ands	r3, r2
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 808f 	beq.w	8007174 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 8087 	beq.w	8007174 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800706a:	2220      	movs	r2, #32
 800706c:	409a      	lsls	r2, r3
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b05      	cmp	r3, #5
 800707c:	d136      	bne.n	80070ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0216 	bic.w	r2, r2, #22
 800708c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800709c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <HAL_DMA_IRQHandler+0x1da>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0208 	bic.w	r2, r2, #8
 80070bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c2:	223f      	movs	r2, #63	@ 0x3f
 80070c4:	409a      	lsls	r2, r3
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d07e      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
        }
        return;
 80070ea:	e079      	b.n	80071e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01d      	beq.n	8007136 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10d      	bne.n	8007124 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710c:	2b00      	cmp	r3, #0
 800710e:	d031      	beq.n	8007174 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
 8007118:	e02c      	b.n	8007174 <HAL_DMA_IRQHandler+0x2a0>
 800711a:	bf00      	nop
 800711c:	20000060 	.word	0x20000060
 8007120:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d023      	beq.n	8007174 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
 8007134:	e01e      	b.n	8007174 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10f      	bne.n	8007164 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0210 	bic.w	r2, r2, #16
 8007152:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007178:	2b00      	cmp	r3, #0
 800717a:	d032      	beq.n	80071e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d022      	beq.n	80071ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2205      	movs	r2, #5
 800718c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d307      	bcc.n	80071bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1f2      	bne.n	80071a0 <HAL_DMA_IRQHandler+0x2cc>
 80071ba:	e000      	b.n	80071be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80071bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	e000      	b.n	80071e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80071e0:	bf00      	nop
    }
  }
}
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007204:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b40      	cmp	r3, #64	@ 0x40
 8007214:	d108      	bne.n	8007228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007226:	e007      	b.n	8007238 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	60da      	str	r2, [r3, #12]
}
 8007238:	bf00      	nop
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	3b10      	subs	r3, #16
 8007254:	4a14      	ldr	r2, [pc, #80]	@ (80072a8 <DMA_CalcBaseAndBitshift+0x64>)
 8007256:	fba2 2303 	umull	r2, r3, r2, r3
 800725a:	091b      	lsrs	r3, r3, #4
 800725c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800725e:	4a13      	ldr	r2, [pc, #76]	@ (80072ac <DMA_CalcBaseAndBitshift+0x68>)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b03      	cmp	r3, #3
 8007270:	d909      	bls.n	8007286 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800727a:	f023 0303 	bic.w	r3, r3, #3
 800727e:	1d1a      	adds	r2, r3, #4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	659a      	str	r2, [r3, #88]	@ 0x58
 8007284:	e007      	b.n	8007296 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	aaaaaaab 	.word	0xaaaaaaab
 80072ac:	0801277c 	.word	0x0801277c

080072b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d11f      	bne.n	800730a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d856      	bhi.n	800737e <DMA_CheckFifoParam+0xce>
 80072d0:	a201      	add	r2, pc, #4	@ (adr r2, 80072d8 <DMA_CheckFifoParam+0x28>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	080072e9 	.word	0x080072e9
 80072dc:	080072fb 	.word	0x080072fb
 80072e0:	080072e9 	.word	0x080072e9
 80072e4:	0800737f 	.word	0x0800737f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d046      	beq.n	8007382 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072f8:	e043      	b.n	8007382 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007302:	d140      	bne.n	8007386 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007308:	e03d      	b.n	8007386 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007312:	d121      	bne.n	8007358 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d837      	bhi.n	800738a <DMA_CheckFifoParam+0xda>
 800731a:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <DMA_CheckFifoParam+0x70>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007331 	.word	0x08007331
 8007324:	08007337 	.word	0x08007337
 8007328:	08007331 	.word	0x08007331
 800732c:	08007349 	.word	0x08007349
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	73fb      	strb	r3, [r7, #15]
      break;
 8007334:	e030      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d025      	beq.n	800738e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007346:	e022      	b.n	800738e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007350:	d11f      	bne.n	8007392 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007356:	e01c      	b.n	8007392 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d903      	bls.n	8007366 <DMA_CheckFifoParam+0xb6>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b03      	cmp	r3, #3
 8007362:	d003      	beq.n	800736c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007364:	e018      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	73fb      	strb	r3, [r7, #15]
      break;
 800736a:	e015      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00e      	beq.n	8007396 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
      break;
 800737c:	e00b      	b.n	8007396 <DMA_CheckFifoParam+0xe6>
      break;
 800737e:	bf00      	nop
 8007380:	e00a      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
      break;
 8007382:	bf00      	nop
 8007384:	e008      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
      break;
 8007386:	bf00      	nop
 8007388:	e006      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
      break;
 800738a:	bf00      	nop
 800738c:	e004      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
      break;
 800738e:	bf00      	nop
 8007390:	e002      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
      break;   
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <DMA_CheckFifoParam+0xe8>
      break;
 8007396:	bf00      	nop
    }
  } 
  
  return status; 
 8007398:	7bfb      	ldrb	r3, [r7, #15]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop

080073a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	@ 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	e16b      	b.n	800769c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073c4:	2201      	movs	r2, #1
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4013      	ands	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	429a      	cmp	r2, r3
 80073de:	f040 815a 	bne.w	8007696 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d005      	beq.n	80073fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d130      	bne.n	800745c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	2203      	movs	r2, #3
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43db      	mvns	r3, r3
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	4013      	ands	r3, r2
 8007410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	4313      	orrs	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007430:	2201      	movs	r2, #1
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	fa02 f303 	lsl.w	r3, r2, r3
 8007438:	43db      	mvns	r3, r3
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	4013      	ands	r3, r2
 800743e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	091b      	lsrs	r3, r3, #4
 8007446:	f003 0201 	and.w	r2, r3, #1
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	fa02 f303 	lsl.w	r3, r2, r3
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	4313      	orrs	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	2b03      	cmp	r3, #3
 8007466:	d017      	beq.n	8007498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	2203      	movs	r2, #3
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	43db      	mvns	r3, r3
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	4013      	ands	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	4313      	orrs	r3, r2
 8007490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f003 0303 	and.w	r3, r3, #3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d123      	bne.n	80074ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	08da      	lsrs	r2, r3, #3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3208      	adds	r2, #8
 80074ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	220f      	movs	r2, #15
 80074bc:	fa02 f303 	lsl.w	r3, r2, r3
 80074c0:	43db      	mvns	r3, r3
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	4013      	ands	r3, r2
 80074c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	691a      	ldr	r2, [r3, #16]
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4313      	orrs	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	08da      	lsrs	r2, r3, #3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3208      	adds	r2, #8
 80074e6:	69b9      	ldr	r1, [r7, #24]
 80074e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	2203      	movs	r2, #3
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	43db      	mvns	r3, r3
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	4013      	ands	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f003 0203 	and.w	r2, r3, #3
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	4313      	orrs	r3, r2
 8007518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 80b4 	beq.w	8007696 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	4b60      	ldr	r3, [pc, #384]	@ (80076b4 <HAL_GPIO_Init+0x30c>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007536:	4a5f      	ldr	r2, [pc, #380]	@ (80076b4 <HAL_GPIO_Init+0x30c>)
 8007538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800753c:	6453      	str	r3, [r2, #68]	@ 0x44
 800753e:	4b5d      	ldr	r3, [pc, #372]	@ (80076b4 <HAL_GPIO_Init+0x30c>)
 8007540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800754a:	4a5b      	ldr	r2, [pc, #364]	@ (80076b8 <HAL_GPIO_Init+0x310>)
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	089b      	lsrs	r3, r3, #2
 8007550:	3302      	adds	r3, #2
 8007552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	220f      	movs	r2, #15
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	43db      	mvns	r3, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a52      	ldr	r2, [pc, #328]	@ (80076bc <HAL_GPIO_Init+0x314>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d02b      	beq.n	80075ce <HAL_GPIO_Init+0x226>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a51      	ldr	r2, [pc, #324]	@ (80076c0 <HAL_GPIO_Init+0x318>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d025      	beq.n	80075ca <HAL_GPIO_Init+0x222>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a50      	ldr	r2, [pc, #320]	@ (80076c4 <HAL_GPIO_Init+0x31c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01f      	beq.n	80075c6 <HAL_GPIO_Init+0x21e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a4f      	ldr	r2, [pc, #316]	@ (80076c8 <HAL_GPIO_Init+0x320>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d019      	beq.n	80075c2 <HAL_GPIO_Init+0x21a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a4e      	ldr	r2, [pc, #312]	@ (80076cc <HAL_GPIO_Init+0x324>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <HAL_GPIO_Init+0x216>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a4d      	ldr	r2, [pc, #308]	@ (80076d0 <HAL_GPIO_Init+0x328>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00d      	beq.n	80075ba <HAL_GPIO_Init+0x212>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a4c      	ldr	r2, [pc, #304]	@ (80076d4 <HAL_GPIO_Init+0x32c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d007      	beq.n	80075b6 <HAL_GPIO_Init+0x20e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a4b      	ldr	r2, [pc, #300]	@ (80076d8 <HAL_GPIO_Init+0x330>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d101      	bne.n	80075b2 <HAL_GPIO_Init+0x20a>
 80075ae:	2307      	movs	r3, #7
 80075b0:	e00e      	b.n	80075d0 <HAL_GPIO_Init+0x228>
 80075b2:	2308      	movs	r3, #8
 80075b4:	e00c      	b.n	80075d0 <HAL_GPIO_Init+0x228>
 80075b6:	2306      	movs	r3, #6
 80075b8:	e00a      	b.n	80075d0 <HAL_GPIO_Init+0x228>
 80075ba:	2305      	movs	r3, #5
 80075bc:	e008      	b.n	80075d0 <HAL_GPIO_Init+0x228>
 80075be:	2304      	movs	r3, #4
 80075c0:	e006      	b.n	80075d0 <HAL_GPIO_Init+0x228>
 80075c2:	2303      	movs	r3, #3
 80075c4:	e004      	b.n	80075d0 <HAL_GPIO_Init+0x228>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e002      	b.n	80075d0 <HAL_GPIO_Init+0x228>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e000      	b.n	80075d0 <HAL_GPIO_Init+0x228>
 80075ce:	2300      	movs	r3, #0
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	f002 0203 	and.w	r2, r2, #3
 80075d6:	0092      	lsls	r2, r2, #2
 80075d8:	4093      	lsls	r3, r2
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	4313      	orrs	r3, r2
 80075de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075e0:	4935      	ldr	r1, [pc, #212]	@ (80076b8 <HAL_GPIO_Init+0x310>)
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	089b      	lsrs	r3, r3, #2
 80075e6:	3302      	adds	r3, #2
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075ee:	4b3b      	ldr	r3, [pc, #236]	@ (80076dc <HAL_GPIO_Init+0x334>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	43db      	mvns	r3, r3
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	4013      	ands	r3, r2
 80075fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	4313      	orrs	r3, r2
 8007610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007612:	4a32      	ldr	r2, [pc, #200]	@ (80076dc <HAL_GPIO_Init+0x334>)
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007618:	4b30      	ldr	r3, [pc, #192]	@ (80076dc <HAL_GPIO_Init+0x334>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	43db      	mvns	r3, r3
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	4013      	ands	r3, r2
 8007626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4313      	orrs	r3, r2
 800763a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800763c:	4a27      	ldr	r2, [pc, #156]	@ (80076dc <HAL_GPIO_Init+0x334>)
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007642:	4b26      	ldr	r3, [pc, #152]	@ (80076dc <HAL_GPIO_Init+0x334>)
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	43db      	mvns	r3, r3
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	4013      	ands	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007666:	4a1d      	ldr	r2, [pc, #116]	@ (80076dc <HAL_GPIO_Init+0x334>)
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800766c:	4b1b      	ldr	r3, [pc, #108]	@ (80076dc <HAL_GPIO_Init+0x334>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	43db      	mvns	r3, r3
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	4013      	ands	r3, r2
 800767a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	4313      	orrs	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007690:	4a12      	ldr	r2, [pc, #72]	@ (80076dc <HAL_GPIO_Init+0x334>)
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	3301      	adds	r3, #1
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	2b0f      	cmp	r3, #15
 80076a0:	f67f ae90 	bls.w	80073c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	3724      	adds	r7, #36	@ 0x24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40023800 	.word	0x40023800
 80076b8:	40013800 	.word	0x40013800
 80076bc:	40020000 	.word	0x40020000
 80076c0:	40020400 	.word	0x40020400
 80076c4:	40020800 	.word	0x40020800
 80076c8:	40020c00 	.word	0x40020c00
 80076cc:	40021000 	.word	0x40021000
 80076d0:	40021400 	.word	0x40021400
 80076d4:	40021800 	.word	0x40021800
 80076d8:	40021c00 	.word	0x40021c00
 80076dc:	40013c00 	.word	0x40013c00

080076e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	807b      	strh	r3, [r7, #2]
 80076ec:	4613      	mov	r3, r2
 80076ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076f0:	787b      	ldrb	r3, [r7, #1]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076f6:	887a      	ldrh	r2, [r7, #2]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80076fc:	e003      	b.n	8007706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80076fe:	887b      	ldrh	r3, [r7, #2]
 8007700:	041a      	lsls	r2, r3, #16
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	619a      	str	r2, [r3, #24]
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
	...

08007714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800771e:	4b08      	ldr	r3, [pc, #32]	@ (8007740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007720:	695a      	ldr	r2, [r3, #20]
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	4013      	ands	r3, r2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d006      	beq.n	8007738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800772a:	4a05      	ldr	r2, [pc, #20]	@ (8007740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800772c:	88fb      	ldrh	r3, [r7, #6]
 800772e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	4618      	mov	r0, r3
 8007734:	f7fa fe9e 	bl	8002474 <HAL_GPIO_EXTI_Callback>
  }
}
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40013c00 	.word	0x40013c00

08007744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e12b      	b.n	80079ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fd fc6c 	bl	8005048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2224      	movs	r2, #36	@ 0x24
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0201 	bic.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80077a8:	f001 fbc8 	bl	8008f3c <HAL_RCC_GetPCLK1Freq>
 80077ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	4a81      	ldr	r2, [pc, #516]	@ (80079b8 <HAL_I2C_Init+0x274>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d807      	bhi.n	80077c8 <HAL_I2C_Init+0x84>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4a80      	ldr	r2, [pc, #512]	@ (80079bc <HAL_I2C_Init+0x278>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	bf94      	ite	ls
 80077c0:	2301      	movls	r3, #1
 80077c2:	2300      	movhi	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	e006      	b.n	80077d6 <HAL_I2C_Init+0x92>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a7d      	ldr	r2, [pc, #500]	@ (80079c0 <HAL_I2C_Init+0x27c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	bf94      	ite	ls
 80077d0:	2301      	movls	r3, #1
 80077d2:	2300      	movhi	r3, #0
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e0e7      	b.n	80079ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4a78      	ldr	r2, [pc, #480]	@ (80079c4 <HAL_I2C_Init+0x280>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	0c9b      	lsrs	r3, r3, #18
 80077e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	4a6a      	ldr	r2, [pc, #424]	@ (80079b8 <HAL_I2C_Init+0x274>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d802      	bhi.n	8007818 <HAL_I2C_Init+0xd4>
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	3301      	adds	r3, #1
 8007816:	e009      	b.n	800782c <HAL_I2C_Init+0xe8>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800781e:	fb02 f303 	mul.w	r3, r2, r3
 8007822:	4a69      	ldr	r2, [pc, #420]	@ (80079c8 <HAL_I2C_Init+0x284>)
 8007824:	fba2 2303 	umull	r2, r3, r2, r3
 8007828:	099b      	lsrs	r3, r3, #6
 800782a:	3301      	adds	r3, #1
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	430b      	orrs	r3, r1
 8007832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800783e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	495c      	ldr	r1, [pc, #368]	@ (80079b8 <HAL_I2C_Init+0x274>)
 8007848:	428b      	cmp	r3, r1
 800784a:	d819      	bhi.n	8007880 <HAL_I2C_Init+0x13c>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1e59      	subs	r1, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	fbb1 f3f3 	udiv	r3, r1, r3
 800785a:	1c59      	adds	r1, r3, #1
 800785c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007860:	400b      	ands	r3, r1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <HAL_I2C_Init+0x138>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1e59      	subs	r1, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	fbb1 f3f3 	udiv	r3, r1, r3
 8007874:	3301      	adds	r3, #1
 8007876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800787a:	e051      	b.n	8007920 <HAL_I2C_Init+0x1dc>
 800787c:	2304      	movs	r3, #4
 800787e:	e04f      	b.n	8007920 <HAL_I2C_Init+0x1dc>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d111      	bne.n	80078ac <HAL_I2C_Init+0x168>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	1e58      	subs	r0, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6859      	ldr	r1, [r3, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	440b      	add	r3, r1
 8007896:	fbb0 f3f3 	udiv	r3, r0, r3
 800789a:	3301      	adds	r3, #1
 800789c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bf0c      	ite	eq
 80078a4:	2301      	moveq	r3, #1
 80078a6:	2300      	movne	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	e012      	b.n	80078d2 <HAL_I2C_Init+0x18e>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	1e58      	subs	r0, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6859      	ldr	r1, [r3, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	0099      	lsls	r1, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	fbb0 f3f3 	udiv	r3, r0, r3
 80078c2:	3301      	adds	r3, #1
 80078c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	bf0c      	ite	eq
 80078cc:	2301      	moveq	r3, #1
 80078ce:	2300      	movne	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_I2C_Init+0x196>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e022      	b.n	8007920 <HAL_I2C_Init+0x1dc>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10e      	bne.n	8007900 <HAL_I2C_Init+0x1bc>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	1e58      	subs	r0, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6859      	ldr	r1, [r3, #4]
 80078ea:	460b      	mov	r3, r1
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	440b      	add	r3, r1
 80078f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80078f4:	3301      	adds	r3, #1
 80078f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078fe:	e00f      	b.n	8007920 <HAL_I2C_Init+0x1dc>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	1e58      	subs	r0, r3, #1
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6859      	ldr	r1, [r3, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	0099      	lsls	r1, r3, #2
 8007910:	440b      	add	r3, r1
 8007912:	fbb0 f3f3 	udiv	r3, r0, r3
 8007916:	3301      	adds	r3, #1
 8007918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800791c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	6809      	ldr	r1, [r1, #0]
 8007924:	4313      	orrs	r3, r2
 8007926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69da      	ldr	r2, [r3, #28]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800794e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6911      	ldr	r1, [r2, #16]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	68d2      	ldr	r2, [r2, #12]
 800795a:	4311      	orrs	r1, r2
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	430b      	orrs	r3, r1
 8007962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695a      	ldr	r2, [r3, #20]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	431a      	orrs	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	000186a0 	.word	0x000186a0
 80079bc:	001e847f 	.word	0x001e847f
 80079c0:	003d08ff 	.word	0x003d08ff
 80079c4:	431bde83 	.word	0x431bde83
 80079c8:	10624dd3 	.word	0x10624dd3

080079cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	4608      	mov	r0, r1
 80079d6:	4611      	mov	r1, r2
 80079d8:	461a      	mov	r2, r3
 80079da:	4603      	mov	r3, r0
 80079dc:	817b      	strh	r3, [r7, #10]
 80079de:	460b      	mov	r3, r1
 80079e0:	813b      	strh	r3, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079e6:	f7fe f939 	bl	8005c5c <HAL_GetTick>
 80079ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	f040 80d9 	bne.w	8007bac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2319      	movs	r3, #25
 8007a00:	2201      	movs	r2, #1
 8007a02:	496d      	ldr	r1, [pc, #436]	@ (8007bb8 <HAL_I2C_Mem_Write+0x1ec>)
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fc7f 	bl	8008308 <I2C_WaitOnFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a10:	2302      	movs	r3, #2
 8007a12:	e0cc      	b.n	8007bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_I2C_Mem_Write+0x56>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e0c5      	b.n	8007bae <HAL_I2C_Mem_Write+0x1e2>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d007      	beq.n	8007a48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0201 	orr.w	r2, r2, #1
 8007a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2221      	movs	r2, #33	@ 0x21
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2240      	movs	r2, #64	@ 0x40
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a3a      	ldr	r2, [r7, #32]
 8007a72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4a4d      	ldr	r2, [pc, #308]	@ (8007bbc <HAL_I2C_Mem_Write+0x1f0>)
 8007a88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a8a:	88f8      	ldrh	r0, [r7, #6]
 8007a8c:	893a      	ldrh	r2, [r7, #8]
 8007a8e:	8979      	ldrh	r1, [r7, #10]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	9301      	str	r3, [sp, #4]
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	4603      	mov	r3, r0
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fab6 	bl	800800c <I2C_RequestMemoryWrite>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d052      	beq.n	8007b4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e081      	b.n	8007bae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fd00 	bl	80084b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00d      	beq.n	8007ad6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d107      	bne.n	8007ad2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e06b      	b.n	8007bae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ada:	781a      	ldrb	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d11b      	bne.n	8007b4c <HAL_I2C_Mem_Write+0x180>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d017      	beq.n	8007b4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1aa      	bne.n	8007aaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fcec 	bl	8008536 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00d      	beq.n	8007b80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d107      	bne.n	8007b7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e016      	b.n	8007bae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	e000      	b.n	8007bae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007bac:	2302      	movs	r3, #2
  }
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	00100002 	.word	0x00100002
 8007bbc:	ffff0000 	.word	0xffff0000

08007bc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08c      	sub	sp, #48	@ 0x30
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	4608      	mov	r0, r1
 8007bca:	4611      	mov	r1, r2
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4603      	mov	r3, r0
 8007bd0:	817b      	strh	r3, [r7, #10]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	813b      	strh	r3, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007bda:	f7fe f83f 	bl	8005c5c <HAL_GetTick>
 8007bde:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	f040 8208 	bne.w	8007ffe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	2319      	movs	r3, #25
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	497b      	ldr	r1, [pc, #492]	@ (8007de4 <HAL_I2C_Mem_Read+0x224>)
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 fb85 	bl	8008308 <I2C_WaitOnFlagUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007c04:	2302      	movs	r3, #2
 8007c06:	e1fb      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d101      	bne.n	8007c16 <HAL_I2C_Mem_Read+0x56>
 8007c12:	2302      	movs	r3, #2
 8007c14:	e1f4      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d007      	beq.n	8007c3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0201 	orr.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2222      	movs	r2, #34	@ 0x22
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2240      	movs	r2, #64	@ 0x40
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8007de8 <HAL_I2C_Mem_Read+0x228>)
 8007c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c7e:	88f8      	ldrh	r0, [r7, #6]
 8007c80:	893a      	ldrh	r2, [r7, #8]
 8007c82:	8979      	ldrh	r1, [r7, #10]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fa52 	bl	8008138 <I2C_RequestMemoryRead>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e1b0      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d113      	bne.n	8007cce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	623b      	str	r3, [r7, #32]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	623b      	str	r3, [r7, #32]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	623b      	str	r3, [r7, #32]
 8007cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	e184      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d11b      	bne.n	8007d0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	61fb      	str	r3, [r7, #28]
 8007cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	e164      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d11b      	bne.n	8007d4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d36:	2300      	movs	r3, #0
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	e144      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007d64:	e138      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	f200 80f1 	bhi.w	8007f52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d123      	bne.n	8007dc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fc1b 	bl	80085b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e139      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691a      	ldr	r2, [r3, #16]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007dbe:	e10b      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d14e      	bne.n	8007e66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4906      	ldr	r1, [pc, #24]	@ (8007dec <HAL_I2C_Mem_Read+0x22c>)
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 fa98 	bl	8008308 <I2C_WaitOnFlagUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d008      	beq.n	8007df0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e10e      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
 8007de2:	bf00      	nop
 8007de4:	00100002 	.word	0x00100002
 8007de8:	ffff0000 	.word	0xffff0000
 8007dec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691a      	ldr	r2, [r3, #16]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e64:	e0b8      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4966      	ldr	r1, [pc, #408]	@ (8008008 <HAL_I2C_Mem_Read+0x448>)
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fa49 	bl	8008308 <I2C_WaitOnFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e0bf      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec8:	2200      	movs	r2, #0
 8007eca:	494f      	ldr	r1, [pc, #316]	@ (8008008 <HAL_I2C_Mem_Read+0x448>)
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fa1b 	bl	8008308 <I2C_WaitOnFlagUntilTimeout>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e091      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f50:	e042      	b.n	8007fd8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 fb2e 	bl	80085b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e04c      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691a      	ldr	r2, [r3, #16]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d118      	bne.n	8007fd8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f47f aec2 	bne.w	8007d66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e000      	b.n	8008000 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ffe:	2302      	movs	r3, #2
  }
}
 8008000:	4618      	mov	r0, r3
 8008002:	3728      	adds	r7, #40	@ 0x28
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	00010004 	.word	0x00010004

0800800c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af02      	add	r7, sp, #8
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	4608      	mov	r0, r1
 8008016:	4611      	mov	r1, r2
 8008018:	461a      	mov	r2, r3
 800801a:	4603      	mov	r3, r0
 800801c:	817b      	strh	r3, [r7, #10]
 800801e:	460b      	mov	r3, r1
 8008020:	813b      	strh	r3, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	2200      	movs	r2, #0
 800803e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f960 	bl	8008308 <I2C_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00d      	beq.n	800806a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800805c:	d103      	bne.n	8008066 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008064:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e05f      	b.n	800812a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800806a:	897b      	ldrh	r3, [r7, #10]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	461a      	mov	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	6a3a      	ldr	r2, [r7, #32]
 800807e:	492d      	ldr	r1, [pc, #180]	@ (8008134 <I2C_RequestMemoryWrite+0x128>)
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f998 	bl	80083b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e04c      	b.n	800812a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a8:	6a39      	ldr	r1, [r7, #32]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fa02 	bl	80084b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00d      	beq.n	80080d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d107      	bne.n	80080ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e02b      	b.n	800812a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d105      	bne.n	80080e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080d8:	893b      	ldrh	r3, [r7, #8]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	611a      	str	r2, [r3, #16]
 80080e2:	e021      	b.n	8008128 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080e4:	893b      	ldrh	r3, [r7, #8]
 80080e6:	0a1b      	lsrs	r3, r3, #8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080f4:	6a39      	ldr	r1, [r7, #32]
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 f9dc 	bl	80084b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00d      	beq.n	800811e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008106:	2b04      	cmp	r3, #4
 8008108:	d107      	bne.n	800811a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e005      	b.n	800812a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800811e:	893b      	ldrh	r3, [r7, #8]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	00010002 	.word	0x00010002

08008138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	4608      	mov	r0, r1
 8008142:	4611      	mov	r1, r2
 8008144:	461a      	mov	r2, r3
 8008146:	4603      	mov	r3, r0
 8008148:	817b      	strh	r3, [r7, #10]
 800814a:	460b      	mov	r3, r1
 800814c:	813b      	strh	r3, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	2200      	movs	r2, #0
 800817a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f8c2 	bl	8008308 <I2C_WaitOnFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00d      	beq.n	80081a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008198:	d103      	bne.n	80081a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e0aa      	b.n	80082fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081a6:	897b      	ldrh	r3, [r7, #10]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	461a      	mov	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80081b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	6a3a      	ldr	r2, [r7, #32]
 80081ba:	4952      	ldr	r1, [pc, #328]	@ (8008304 <I2C_RequestMemoryRead+0x1cc>)
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f8fa 	bl	80083b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e097      	b.n	80082fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081e4:	6a39      	ldr	r1, [r7, #32]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 f964 	bl	80084b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00d      	beq.n	800820e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d107      	bne.n	800820a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e076      	b.n	80082fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d105      	bne.n	8008220 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008214:	893b      	ldrh	r3, [r7, #8]
 8008216:	b2da      	uxtb	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	611a      	str	r2, [r3, #16]
 800821e:	e021      	b.n	8008264 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008220:	893b      	ldrh	r3, [r7, #8]
 8008222:	0a1b      	lsrs	r3, r3, #8
 8008224:	b29b      	uxth	r3, r3
 8008226:	b2da      	uxtb	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800822e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008230:	6a39      	ldr	r1, [r7, #32]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f93e 	bl	80084b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00d      	beq.n	800825a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008242:	2b04      	cmp	r3, #4
 8008244:	d107      	bne.n	8008256 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e050      	b.n	80082fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800825a:	893b      	ldrh	r3, [r7, #8]
 800825c:	b2da      	uxtb	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008266:	6a39      	ldr	r1, [r7, #32]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f923 	bl	80084b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00d      	beq.n	8008290 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008278:	2b04      	cmp	r3, #4
 800827a:	d107      	bne.n	800828c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800828a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e035      	b.n	80082fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800829e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f82b 	bl	8008308 <I2C_WaitOnFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00d      	beq.n	80082d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c6:	d103      	bne.n	80082d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e013      	b.n	80082fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082d4:	897b      	ldrh	r3, [r7, #10]
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	f043 0301 	orr.w	r3, r3, #1
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	6a3a      	ldr	r2, [r7, #32]
 80082e8:	4906      	ldr	r1, [pc, #24]	@ (8008304 <I2C_RequestMemoryRead+0x1cc>)
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 f863 	bl	80083b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e000      	b.n	80082fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	00010002 	.word	0x00010002

08008308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008318:	e025      	b.n	8008366 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008320:	d021      	beq.n	8008366 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008322:	f7fd fc9b 	bl	8005c5c <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d116      	bne.n	8008366 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008352:	f043 0220 	orr.w	r2, r3, #32
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e023      	b.n	80083ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	0c1b      	lsrs	r3, r3, #16
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b01      	cmp	r3, #1
 800836e:	d10d      	bne.n	800838c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	43da      	mvns	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4013      	ands	r3, r2
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	bf0c      	ite	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	2300      	movne	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	e00c      	b.n	80083a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	43da      	mvns	r2, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4013      	ands	r3, r2
 8008398:	b29b      	uxth	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	bf0c      	ite	eq
 800839e:	2301      	moveq	r3, #1
 80083a0:	2300      	movne	r3, #0
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d0b6      	beq.n	800831a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	607a      	str	r2, [r7, #4]
 80083c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083c4:	e051      	b.n	800846a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083d4:	d123      	bne.n	800841e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80083ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840a:	f043 0204 	orr.w	r2, r3, #4
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e046      	b.n	80084ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d021      	beq.n	800846a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008426:	f7fd fc19 	bl	8005c5c <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d116      	bne.n	800846a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008456:	f043 0220 	orr.w	r2, r3, #32
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e020      	b.n	80084ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	d10c      	bne.n	800848e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	43da      	mvns	r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4013      	ands	r3, r2
 8008480:	b29b      	uxth	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	bf14      	ite	ne
 8008486:	2301      	movne	r3, #1
 8008488:	2300      	moveq	r3, #0
 800848a:	b2db      	uxtb	r3, r3
 800848c:	e00b      	b.n	80084a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	43da      	mvns	r2, r3
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4013      	ands	r3, r2
 800849a:	b29b      	uxth	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	bf14      	ite	ne
 80084a0:	2301      	movne	r3, #1
 80084a2:	2300      	moveq	r3, #0
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d18d      	bne.n	80083c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084c0:	e02d      	b.n	800851e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 f8ce 	bl	8008664 <I2C_IsAcknowledgeFailed>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e02d      	b.n	800852e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d8:	d021      	beq.n	800851e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084da:	f7fd fbbf 	bl	8005c5c <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d302      	bcc.n	80084f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d116      	bne.n	800851e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	f043 0220 	orr.w	r2, r3, #32
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e007      	b.n	800852e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008528:	2b80      	cmp	r3, #128	@ 0x80
 800852a:	d1ca      	bne.n	80084c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	60f8      	str	r0, [r7, #12]
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008542:	e02d      	b.n	80085a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 f88d 	bl	8008664 <I2C_IsAcknowledgeFailed>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e02d      	b.n	80085b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	d021      	beq.n	80085a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855c:	f7fd fb7e 	bl	8005c5c <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	429a      	cmp	r2, r3
 800856a:	d302      	bcc.n	8008572 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d116      	bne.n	80085a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2220      	movs	r2, #32
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858c:	f043 0220 	orr.w	r2, r3, #32
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e007      	b.n	80085b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	f003 0304 	and.w	r3, r3, #4
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d1ca      	bne.n	8008544 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085c4:	e042      	b.n	800864c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b10      	cmp	r3, #16
 80085d2:	d119      	bne.n	8008608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0210 	mvn.w	r2, #16
 80085dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e029      	b.n	800865c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008608:	f7fd fb28 	bl	8005c5c <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	d302      	bcc.n	800861e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d116      	bne.n	800864c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2220      	movs	r2, #32
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008638:	f043 0220 	orr.w	r2, r3, #32
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e007      	b.n	800865c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008656:	2b40      	cmp	r3, #64	@ 0x40
 8008658:	d1b5      	bne.n	80085c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800867a:	d11b      	bne.n	80086b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008684:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2220      	movs	r2, #32
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a0:	f043 0204 	orr.w	r2, r3, #4
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e000      	b.n	80086b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
	...

080086c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e267      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d075      	beq.n	80087ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086e2:	4b88      	ldr	r3, [pc, #544]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 030c 	and.w	r3, r3, #12
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d00c      	beq.n	8008708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ee:	4b85      	ldr	r3, [pc, #532]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d112      	bne.n	8008720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086fa:	4b82      	ldr	r3, [pc, #520]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008706:	d10b      	bne.n	8008720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008708:	4b7e      	ldr	r3, [pc, #504]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d05b      	beq.n	80087cc <HAL_RCC_OscConfig+0x108>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d157      	bne.n	80087cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e242      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008728:	d106      	bne.n	8008738 <HAL_RCC_OscConfig+0x74>
 800872a:	4b76      	ldr	r3, [pc, #472]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a75      	ldr	r2, [pc, #468]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	e01d      	b.n	8008774 <HAL_RCC_OscConfig+0xb0>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008740:	d10c      	bne.n	800875c <HAL_RCC_OscConfig+0x98>
 8008742:	4b70      	ldr	r3, [pc, #448]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a6f      	ldr	r2, [pc, #444]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	4b6d      	ldr	r3, [pc, #436]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a6c      	ldr	r2, [pc, #432]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	e00b      	b.n	8008774 <HAL_RCC_OscConfig+0xb0>
 800875c:	4b69      	ldr	r3, [pc, #420]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a68      	ldr	r2, [pc, #416]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	4b66      	ldr	r3, [pc, #408]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a65      	ldr	r2, [pc, #404]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 800876e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d013      	beq.n	80087a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800877c:	f7fd fa6e 	bl	8005c5c <HAL_GetTick>
 8008780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008782:	e008      	b.n	8008796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008784:	f7fd fa6a 	bl	8005c5c <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b64      	cmp	r3, #100	@ 0x64
 8008790:	d901      	bls.n	8008796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e207      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008796:	4b5b      	ldr	r3, [pc, #364]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0f0      	beq.n	8008784 <HAL_RCC_OscConfig+0xc0>
 80087a2:	e014      	b.n	80087ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a4:	f7fd fa5a 	bl	8005c5c <HAL_GetTick>
 80087a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087ac:	f7fd fa56 	bl	8005c5c <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b64      	cmp	r3, #100	@ 0x64
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e1f3      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087be:	4b51      	ldr	r3, [pc, #324]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1f0      	bne.n	80087ac <HAL_RCC_OscConfig+0xe8>
 80087ca:	e000      	b.n	80087ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d063      	beq.n	80088a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087da:	4b4a      	ldr	r3, [pc, #296]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f003 030c 	and.w	r3, r3, #12
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00b      	beq.n	80087fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087e6:	4b47      	ldr	r3, [pc, #284]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087ee:	2b08      	cmp	r3, #8
 80087f0:	d11c      	bne.n	800882c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087f2:	4b44      	ldr	r3, [pc, #272]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d116      	bne.n	800882c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087fe:	4b41      	ldr	r3, [pc, #260]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <HAL_RCC_OscConfig+0x152>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d001      	beq.n	8008816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e1c7      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008816:	4b3b      	ldr	r3, [pc, #236]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	4937      	ldr	r1, [pc, #220]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008826:	4313      	orrs	r3, r2
 8008828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800882a:	e03a      	b.n	80088a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d020      	beq.n	8008876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008834:	4b34      	ldr	r3, [pc, #208]	@ (8008908 <HAL_RCC_OscConfig+0x244>)
 8008836:	2201      	movs	r2, #1
 8008838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883a:	f7fd fa0f 	bl	8005c5c <HAL_GetTick>
 800883e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008840:	e008      	b.n	8008854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008842:	f7fd fa0b 	bl	8005c5c <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d901      	bls.n	8008854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e1a8      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008854:	4b2b      	ldr	r3, [pc, #172]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0f0      	beq.n	8008842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008860:	4b28      	ldr	r3, [pc, #160]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	4925      	ldr	r1, [pc, #148]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008870:	4313      	orrs	r3, r2
 8008872:	600b      	str	r3, [r1, #0]
 8008874:	e015      	b.n	80088a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008876:	4b24      	ldr	r3, [pc, #144]	@ (8008908 <HAL_RCC_OscConfig+0x244>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887c:	f7fd f9ee 	bl	8005c5c <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008884:	f7fd f9ea 	bl	8005c5c <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e187      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008896:	4b1b      	ldr	r3, [pc, #108]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f0      	bne.n	8008884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d036      	beq.n	800891c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d016      	beq.n	80088e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088b6:	4b15      	ldr	r3, [pc, #84]	@ (800890c <HAL_RCC_OscConfig+0x248>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088bc:	f7fd f9ce 	bl	8005c5c <HAL_GetTick>
 80088c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088c2:	e008      	b.n	80088d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088c4:	f7fd f9ca 	bl	8005c5c <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d901      	bls.n	80088d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e167      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008904 <HAL_RCC_OscConfig+0x240>)
 80088d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0f0      	beq.n	80088c4 <HAL_RCC_OscConfig+0x200>
 80088e2:	e01b      	b.n	800891c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088e4:	4b09      	ldr	r3, [pc, #36]	@ (800890c <HAL_RCC_OscConfig+0x248>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ea:	f7fd f9b7 	bl	8005c5c <HAL_GetTick>
 80088ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088f0:	e00e      	b.n	8008910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088f2:	f7fd f9b3 	bl	8005c5c <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d907      	bls.n	8008910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e150      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
 8008904:	40023800 	.word	0x40023800
 8008908:	42470000 	.word	0x42470000
 800890c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008910:	4b88      	ldr	r3, [pc, #544]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1ea      	bne.n	80088f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 8097 	beq.w	8008a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800892a:	2300      	movs	r3, #0
 800892c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800892e:	4b81      	ldr	r3, [pc, #516]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10f      	bne.n	800895a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800893a:	2300      	movs	r3, #0
 800893c:	60bb      	str	r3, [r7, #8]
 800893e:	4b7d      	ldr	r3, [pc, #500]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008942:	4a7c      	ldr	r2, [pc, #496]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008948:	6413      	str	r3, [r2, #64]	@ 0x40
 800894a:	4b7a      	ldr	r3, [pc, #488]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 800894c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008952:	60bb      	str	r3, [r7, #8]
 8008954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008956:	2301      	movs	r3, #1
 8008958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800895a:	4b77      	ldr	r3, [pc, #476]	@ (8008b38 <HAL_RCC_OscConfig+0x474>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008962:	2b00      	cmp	r3, #0
 8008964:	d118      	bne.n	8008998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008966:	4b74      	ldr	r3, [pc, #464]	@ (8008b38 <HAL_RCC_OscConfig+0x474>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a73      	ldr	r2, [pc, #460]	@ (8008b38 <HAL_RCC_OscConfig+0x474>)
 800896c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008972:	f7fd f973 	bl	8005c5c <HAL_GetTick>
 8008976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008978:	e008      	b.n	800898c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897a:	f7fd f96f 	bl	8005c5c <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e10c      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800898c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b38 <HAL_RCC_OscConfig+0x474>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0f0      	beq.n	800897a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d106      	bne.n	80089ae <HAL_RCC_OscConfig+0x2ea>
 80089a0:	4b64      	ldr	r3, [pc, #400]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a4:	4a63      	ldr	r2, [pc, #396]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ac:	e01c      	b.n	80089e8 <HAL_RCC_OscConfig+0x324>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	d10c      	bne.n	80089d0 <HAL_RCC_OscConfig+0x30c>
 80089b6:	4b5f      	ldr	r3, [pc, #380]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ba:	4a5e      	ldr	r2, [pc, #376]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089bc:	f043 0304 	orr.w	r3, r3, #4
 80089c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c6:	4a5b      	ldr	r2, [pc, #364]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ce:	e00b      	b.n	80089e8 <HAL_RCC_OscConfig+0x324>
 80089d0:	4b58      	ldr	r3, [pc, #352]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d4:	4a57      	ldr	r2, [pc, #348]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089d6:	f023 0301 	bic.w	r3, r3, #1
 80089da:	6713      	str	r3, [r2, #112]	@ 0x70
 80089dc:	4b55      	ldr	r3, [pc, #340]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e0:	4a54      	ldr	r2, [pc, #336]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 80089e2:	f023 0304 	bic.w	r3, r3, #4
 80089e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d015      	beq.n	8008a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f0:	f7fd f934 	bl	8005c5c <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089f6:	e00a      	b.n	8008a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089f8:	f7fd f930 	bl	8005c5c <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e0cb      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a0e:	4b49      	ldr	r3, [pc, #292]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0ee      	beq.n	80089f8 <HAL_RCC_OscConfig+0x334>
 8008a1a:	e014      	b.n	8008a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a1c:	f7fd f91e 	bl	8005c5c <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a22:	e00a      	b.n	8008a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a24:	f7fd f91a 	bl	8005c5c <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e0b5      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1ee      	bne.n	8008a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d105      	bne.n	8008a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a4c:	4b39      	ldr	r3, [pc, #228]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a50:	4a38      	ldr	r2, [pc, #224]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80a1 	beq.w	8008ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a62:	4b34      	ldr	r3, [pc, #208]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f003 030c 	and.w	r3, r3, #12
 8008a6a:	2b08      	cmp	r3, #8
 8008a6c:	d05c      	beq.n	8008b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d141      	bne.n	8008afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a76:	4b31      	ldr	r3, [pc, #196]	@ (8008b3c <HAL_RCC_OscConfig+0x478>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a7c:	f7fd f8ee 	bl	8005c5c <HAL_GetTick>
 8008a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a82:	e008      	b.n	8008a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a84:	f7fd f8ea 	bl	8005c5c <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d901      	bls.n	8008a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e087      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a96:	4b27      	ldr	r3, [pc, #156]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1f0      	bne.n	8008a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	69da      	ldr	r2, [r3, #28]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab0:	019b      	lsls	r3, r3, #6
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab8:	085b      	lsrs	r3, r3, #1
 8008aba:	3b01      	subs	r3, #1
 8008abc:	041b      	lsls	r3, r3, #16
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	061b      	lsls	r3, r3, #24
 8008ac6:	491b      	ldr	r1, [pc, #108]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008acc:	4b1b      	ldr	r3, [pc, #108]	@ (8008b3c <HAL_RCC_OscConfig+0x478>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ad2:	f7fd f8c3 	bl	8005c5c <HAL_GetTick>
 8008ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ada:	f7fd f8bf 	bl	8005c5c <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e05c      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aec:	4b11      	ldr	r3, [pc, #68]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <HAL_RCC_OscConfig+0x416>
 8008af8:	e054      	b.n	8008ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008afa:	4b10      	ldr	r3, [pc, #64]	@ (8008b3c <HAL_RCC_OscConfig+0x478>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b00:	f7fd f8ac 	bl	8005c5c <HAL_GetTick>
 8008b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b06:	e008      	b.n	8008b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b08:	f7fd f8a8 	bl	8005c5c <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d901      	bls.n	8008b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e045      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b1a:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <HAL_RCC_OscConfig+0x470>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1f0      	bne.n	8008b08 <HAL_RCC_OscConfig+0x444>
 8008b26:	e03d      	b.n	8008ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d107      	bne.n	8008b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e038      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
 8008b34:	40023800 	.word	0x40023800
 8008b38:	40007000 	.word	0x40007000
 8008b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b40:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb0 <HAL_RCC_OscConfig+0x4ec>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d028      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d121      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d11a      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b70:	4013      	ands	r3, r2
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d111      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d107      	bne.n	8008ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d001      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	40023800 	.word	0x40023800

08008bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e0cc      	b.n	8008d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008bc8:	4b68      	ldr	r3, [pc, #416]	@ (8008d6c <HAL_RCC_ClockConfig+0x1b8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d90c      	bls.n	8008bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bd6:	4b65      	ldr	r3, [pc, #404]	@ (8008d6c <HAL_RCC_ClockConfig+0x1b8>)
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bde:	4b63      	ldr	r3, [pc, #396]	@ (8008d6c <HAL_RCC_ClockConfig+0x1b8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d001      	beq.n	8008bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0b8      	b.n	8008d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d020      	beq.n	8008c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0304 	and.w	r3, r3, #4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c08:	4b59      	ldr	r3, [pc, #356]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	4a58      	ldr	r2, [pc, #352]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0308 	and.w	r3, r3, #8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c20:	4b53      	ldr	r3, [pc, #332]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	4a52      	ldr	r2, [pc, #328]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c2c:	4b50      	ldr	r3, [pc, #320]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	494d      	ldr	r1, [pc, #308]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d044      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d107      	bne.n	8008c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c52:	4b47      	ldr	r3, [pc, #284]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d119      	bne.n	8008c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e07f      	b.n	8008d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d003      	beq.n	8008c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d107      	bne.n	8008c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c72:	4b3f      	ldr	r3, [pc, #252]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d109      	bne.n	8008c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e06f      	b.n	8008d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c82:	4b3b      	ldr	r3, [pc, #236]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e067      	b.n	8008d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c92:	4b37      	ldr	r3, [pc, #220]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f023 0203 	bic.w	r2, r3, #3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	4934      	ldr	r1, [pc, #208]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ca4:	f7fc ffda 	bl	8005c5c <HAL_GetTick>
 8008ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008caa:	e00a      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cac:	f7fc ffd6 	bl	8005c5c <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e04f      	b.n	8008d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f003 020c 	and.w	r2, r3, #12
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d1eb      	bne.n	8008cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cd4:	4b25      	ldr	r3, [pc, #148]	@ (8008d6c <HAL_RCC_ClockConfig+0x1b8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0307 	and.w	r3, r3, #7
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d20c      	bcs.n	8008cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ce2:	4b22      	ldr	r3, [pc, #136]	@ (8008d6c <HAL_RCC_ClockConfig+0x1b8>)
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cea:	4b20      	ldr	r3, [pc, #128]	@ (8008d6c <HAL_RCC_ClockConfig+0x1b8>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d001      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e032      	b.n	8008d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d08:	4b19      	ldr	r3, [pc, #100]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	4916      	ldr	r1, [pc, #88]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d009      	beq.n	8008d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d26:	4b12      	ldr	r3, [pc, #72]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	490e      	ldr	r1, [pc, #56]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d3a:	f000 f82d 	bl	8008d98 <HAL_RCC_GetSysClockFreq>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	4b0b      	ldr	r3, [pc, #44]	@ (8008d70 <HAL_RCC_ClockConfig+0x1bc>)
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	091b      	lsrs	r3, r3, #4
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	490a      	ldr	r1, [pc, #40]	@ (8008d74 <HAL_RCC_ClockConfig+0x1c0>)
 8008d4c:	5ccb      	ldrb	r3, [r1, r3]
 8008d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d52:	4a09      	ldr	r2, [pc, #36]	@ (8008d78 <HAL_RCC_ClockConfig+0x1c4>)
 8008d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d56:	4b09      	ldr	r3, [pc, #36]	@ (8008d7c <HAL_RCC_ClockConfig+0x1c8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fc ff3a 	bl	8005bd4 <HAL_InitTick>

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40023c00 	.word	0x40023c00
 8008d70:	40023800 	.word	0x40023800
 8008d74:	08012764 	.word	0x08012764
 8008d78:	20000060 	.word	0x20000060
 8008d7c:	20000064 	.word	0x20000064

08008d80 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008d84:	4b03      	ldr	r3, [pc, #12]	@ (8008d94 <HAL_RCC_EnableCSS+0x14>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	601a      	str	r2, [r3, #0]
}
 8008d8a:	bf00      	nop
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	4247004c 	.word	0x4247004c

08008d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d9c:	b090      	sub	sp, #64	@ 0x40
 8008d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da4:	2300      	movs	r3, #0
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008da8:	2300      	movs	r3, #0
 8008daa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008db0:	4b59      	ldr	r3, [pc, #356]	@ (8008f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f003 030c 	and.w	r3, r3, #12
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	d00d      	beq.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	f200 80a1 	bhi.w	8008f04 <HAL_RCC_GetSysClockFreq+0x16c>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <HAL_RCC_GetSysClockFreq+0x34>
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d003      	beq.n	8008dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dca:	e09b      	b.n	8008f04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008dcc:	4b53      	ldr	r3, [pc, #332]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8008dce:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008dd0:	e09b      	b.n	8008f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dd2:	4b53      	ldr	r3, [pc, #332]	@ (8008f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dd6:	e098      	b.n	8008f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8008f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008de0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008de2:	4b4d      	ldr	r3, [pc, #308]	@ (8008f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d028      	beq.n	8008e40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dee:	4b4a      	ldr	r3, [pc, #296]	@ (8008f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	099b      	lsrs	r3, r3, #6
 8008df4:	2200      	movs	r2, #0
 8008df6:	623b      	str	r3, [r7, #32]
 8008df8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008e00:	2100      	movs	r1, #0
 8008e02:	4b47      	ldr	r3, [pc, #284]	@ (8008f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e04:	fb03 f201 	mul.w	r2, r3, r1
 8008e08:	2300      	movs	r3, #0
 8008e0a:	fb00 f303 	mul.w	r3, r0, r3
 8008e0e:	4413      	add	r3, r2
 8008e10:	4a43      	ldr	r2, [pc, #268]	@ (8008f20 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e12:	fba0 1202 	umull	r1, r2, r0, r2
 8008e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e18:	460a      	mov	r2, r1
 8008e1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e1e:	4413      	add	r3, r2
 8008e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e24:	2200      	movs	r2, #0
 8008e26:	61bb      	str	r3, [r7, #24]
 8008e28:	61fa      	str	r2, [r7, #28]
 8008e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008e32:	f7f7 ff09 	bl	8000c48 <__aeabi_uldivmod>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e3e:	e053      	b.n	8008ee8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e40:	4b35      	ldr	r3, [pc, #212]	@ (8008f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	099b      	lsrs	r3, r3, #6
 8008e46:	2200      	movs	r2, #0
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	617a      	str	r2, [r7, #20]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e52:	f04f 0b00 	mov.w	fp, #0
 8008e56:	4652      	mov	r2, sl
 8008e58:	465b      	mov	r3, fp
 8008e5a:	f04f 0000 	mov.w	r0, #0
 8008e5e:	f04f 0100 	mov.w	r1, #0
 8008e62:	0159      	lsls	r1, r3, #5
 8008e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e68:	0150      	lsls	r0, r2, #5
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	ebb2 080a 	subs.w	r8, r2, sl
 8008e72:	eb63 090b 	sbc.w	r9, r3, fp
 8008e76:	f04f 0200 	mov.w	r2, #0
 8008e7a:	f04f 0300 	mov.w	r3, #0
 8008e7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e8a:	ebb2 0408 	subs.w	r4, r2, r8
 8008e8e:	eb63 0509 	sbc.w	r5, r3, r9
 8008e92:	f04f 0200 	mov.w	r2, #0
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	00eb      	lsls	r3, r5, #3
 8008e9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ea0:	00e2      	lsls	r2, r4, #3
 8008ea2:	4614      	mov	r4, r2
 8008ea4:	461d      	mov	r5, r3
 8008ea6:	eb14 030a 	adds.w	r3, r4, sl
 8008eaa:	603b      	str	r3, [r7, #0]
 8008eac:	eb45 030b 	adc.w	r3, r5, fp
 8008eb0:	607b      	str	r3, [r7, #4]
 8008eb2:	f04f 0200 	mov.w	r2, #0
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	028b      	lsls	r3, r1, #10
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ec8:	4621      	mov	r1, r4
 8008eca:	028a      	lsls	r2, r1, #10
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	60bb      	str	r3, [r7, #8]
 8008ed6:	60fa      	str	r2, [r7, #12]
 8008ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008edc:	f7f7 feb4 	bl	8000c48 <__aeabi_uldivmod>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f18 <HAL_RCC_GetSysClockFreq+0x180>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	0c1b      	lsrs	r3, r3, #16
 8008eee:	f003 0303 	and.w	r3, r3, #3
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008ef8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f02:	e002      	b.n	8008f0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f04:	4b05      	ldr	r3, [pc, #20]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0x184>)
 8008f06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3740      	adds	r7, #64	@ 0x40
 8008f10:	46bd      	mov	sp, r7
 8008f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f16:	bf00      	nop
 8008f18:	40023800 	.word	0x40023800
 8008f1c:	00f42400 	.word	0x00f42400
 8008f20:	00b71b00 	.word	0x00b71b00

08008f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f28:	4b03      	ldr	r3, [pc, #12]	@ (8008f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20000060 	.word	0x20000060

08008f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f40:	f7ff fff0 	bl	8008f24 <HAL_RCC_GetHCLKFreq>
 8008f44:	4602      	mov	r2, r0
 8008f46:	4b05      	ldr	r3, [pc, #20]	@ (8008f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	0a9b      	lsrs	r3, r3, #10
 8008f4c:	f003 0307 	and.w	r3, r3, #7
 8008f50:	4903      	ldr	r1, [pc, #12]	@ (8008f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f52:	5ccb      	ldrb	r3, [r1, r3]
 8008f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	40023800 	.word	0x40023800
 8008f60:	08012774 	.word	0x08012774

08008f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f68:	f7ff ffdc 	bl	8008f24 <HAL_RCC_GetHCLKFreq>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	0b5b      	lsrs	r3, r3, #13
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	4903      	ldr	r1, [pc, #12]	@ (8008f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f7a:	5ccb      	ldrb	r3, [r1, r3]
 8008f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	40023800 	.word	0x40023800
 8008f88:	08012774 	.word	0x08012774

08008f8c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008f90:	4b06      	ldr	r3, [pc, #24]	@ (8008fac <HAL_RCC_NMI_IRQHandler+0x20>)
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f98:	2b80      	cmp	r3, #128	@ 0x80
 8008f9a:	d104      	bne.n	8008fa6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008f9c:	f000 f80a 	bl	8008fb4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008fa0:	4b03      	ldr	r3, [pc, #12]	@ (8008fb0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008fa2:	2280      	movs	r2, #128	@ 0x80
 8008fa4:	701a      	strb	r2, [r3, #0]
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	4002380e 	.word	0x4002380e

08008fb4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e07b      	b.n	80090cc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d108      	bne.n	8008fee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fe4:	d009      	beq.n	8008ffa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	61da      	str	r2, [r3, #28]
 8008fec:	e005      	b.n	8008ffa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d106      	bne.n	800901a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7fc f881 	bl	800511c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2202      	movs	r2, #2
 800901e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009030:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800904c:	431a      	orrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	431a      	orrs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800907e:	ea42 0103 	orr.w	r1, r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009086:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	f003 0104 	and.w	r1, r3, #4
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a0:	f003 0210 	and.w	r2, r3, #16
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	430a      	orrs	r2, r1
 80090aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69da      	ldr	r2, [r3, #28]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08c      	sub	sp, #48	@ 0x30
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80090e2:	2301      	movs	r3, #1
 80090e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_SPI_TransmitReceive+0x26>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e18a      	b.n	8009410 <HAL_SPI_TransmitReceive+0x33c>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009102:	f7fc fdab 	bl	8005c5c <HAL_GetTick>
 8009106:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800910e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009118:	887b      	ldrh	r3, [r7, #2]
 800911a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800911c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009120:	2b01      	cmp	r3, #1
 8009122:	d00f      	beq.n	8009144 <HAL_SPI_TransmitReceive+0x70>
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800912a:	d107      	bne.n	800913c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <HAL_SPI_TransmitReceive+0x68>
 8009134:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009138:	2b04      	cmp	r3, #4
 800913a:	d003      	beq.n	8009144 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800913c:	2302      	movs	r3, #2
 800913e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009142:	e15b      	b.n	80093fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d005      	beq.n	8009156 <HAL_SPI_TransmitReceive+0x82>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <HAL_SPI_TransmitReceive+0x82>
 8009150:	887b      	ldrh	r3, [r7, #2]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d103      	bne.n	800915e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800915c:	e14e      	b.n	80093fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b04      	cmp	r3, #4
 8009168:	d003      	beq.n	8009172 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2205      	movs	r2, #5
 800916e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	887a      	ldrh	r2, [r7, #2]
 8009182:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	887a      	ldrh	r2, [r7, #2]
 8009188:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	887a      	ldrh	r2, [r7, #2]
 8009194:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	887a      	ldrh	r2, [r7, #2]
 800919a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b2:	2b40      	cmp	r3, #64	@ 0x40
 80091b4:	d007      	beq.n	80091c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091ce:	d178      	bne.n	80092c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <HAL_SPI_TransmitReceive+0x10a>
 80091d8:	8b7b      	ldrh	r3, [r7, #26]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d166      	bne.n	80092ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e2:	881a      	ldrh	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ee:	1c9a      	adds	r2, r3, #2
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	3b01      	subs	r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009202:	e053      	b.n	80092ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b02      	cmp	r3, #2
 8009210:	d11b      	bne.n	800924a <HAL_SPI_TransmitReceive+0x176>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009216:	b29b      	uxth	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	d016      	beq.n	800924a <HAL_SPI_TransmitReceive+0x176>
 800921c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921e:	2b01      	cmp	r3, #1
 8009220:	d113      	bne.n	800924a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009226:	881a      	ldrh	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009232:	1c9a      	adds	r2, r3, #2
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800923c:	b29b      	uxth	r3, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	b29a      	uxth	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	d119      	bne.n	800928c <HAL_SPI_TransmitReceive+0x1b8>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d014      	beq.n	800928c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	b292      	uxth	r2, r2
 800926e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009274:	1c9a      	adds	r2, r3, #2
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009288:	2301      	movs	r3, #1
 800928a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800928c:	f7fc fce6 	bl	8005c5c <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009298:	429a      	cmp	r2, r3
 800929a:	d807      	bhi.n	80092ac <HAL_SPI_TransmitReceive+0x1d8>
 800929c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d003      	beq.n	80092ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80092aa:	e0a7      	b.n	80093fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1a6      	bne.n	8009204 <HAL_SPI_TransmitReceive+0x130>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1a1      	bne.n	8009204 <HAL_SPI_TransmitReceive+0x130>
 80092c0:	e07c      	b.n	80093bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <HAL_SPI_TransmitReceive+0x1fc>
 80092ca:	8b7b      	ldrh	r3, [r7, #26]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d16b      	bne.n	80093a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	330c      	adds	r3, #12
 80092da:	7812      	ldrb	r2, [r2, #0]
 80092dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092f6:	e057      	b.n	80093a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b02      	cmp	r3, #2
 8009304:	d11c      	bne.n	8009340 <HAL_SPI_TransmitReceive+0x26c>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800930a:	b29b      	uxth	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d017      	beq.n	8009340 <HAL_SPI_TransmitReceive+0x26c>
 8009310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009312:	2b01      	cmp	r3, #1
 8009314:	d114      	bne.n	8009340 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	330c      	adds	r3, #12
 8009320:	7812      	ldrb	r2, [r2, #0]
 8009322:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009332:	b29b      	uxth	r3, r3
 8009334:	3b01      	subs	r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b01      	cmp	r3, #1
 800934c:	d119      	bne.n	8009382 <HAL_SPI_TransmitReceive+0x2ae>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009352:	b29b      	uxth	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	d014      	beq.n	8009382 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800937e:	2301      	movs	r3, #1
 8009380:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009382:	f7fc fc6b 	bl	8005c5c <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800938e:	429a      	cmp	r2, r3
 8009390:	d803      	bhi.n	800939a <HAL_SPI_TransmitReceive+0x2c6>
 8009392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d102      	bne.n	80093a0 <HAL_SPI_TransmitReceive+0x2cc>
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	d103      	bne.n	80093a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80093a6:	e029      	b.n	80093fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1a2      	bne.n	80092f8 <HAL_SPI_TransmitReceive+0x224>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d19d      	bne.n	80092f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f8b1 	bl	8009528 <SPI_EndRxTxTransaction>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d006      	beq.n	80093da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2220      	movs	r2, #32
 80093d6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80093d8:	e010      	b.n	80093fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10b      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093e2:	2300      	movs	r3, #0
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	e000      	b.n	80093fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80093fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800940c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009410:	4618      	mov	r0, r3
 8009412:	3730      	adds	r7, #48	@ 0x30
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	4613      	mov	r3, r2
 8009426:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009428:	f7fc fc18 	bl	8005c5c <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	4413      	add	r3, r2
 8009436:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009438:	f7fc fc10 	bl	8005c5c <HAL_GetTick>
 800943c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800943e:	4b39      	ldr	r3, [pc, #228]	@ (8009524 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	015b      	lsls	r3, r3, #5
 8009444:	0d1b      	lsrs	r3, r3, #20
 8009446:	69fa      	ldr	r2, [r7, #28]
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800944e:	e054      	b.n	80094fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d050      	beq.n	80094fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009458:	f7fc fc00 	bl	8005c5c <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	429a      	cmp	r2, r3
 8009466:	d902      	bls.n	800946e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d13d      	bne.n	80094ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800947c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009486:	d111      	bne.n	80094ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009490:	d004      	beq.n	800949c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800949a:	d107      	bne.n	80094ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094b4:	d10f      	bne.n	80094d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80094d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e017      	b.n	800951a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4013      	ands	r3, r2
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	429a      	cmp	r2, r3
 8009508:	bf0c      	ite	eq
 800950a:	2301      	moveq	r3, #1
 800950c:	2300      	movne	r3, #0
 800950e:	b2db      	uxtb	r3, r3
 8009510:	461a      	mov	r2, r3
 8009512:	79fb      	ldrb	r3, [r7, #7]
 8009514:	429a      	cmp	r2, r3
 8009516:	d19b      	bne.n	8009450 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3720      	adds	r7, #32
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20000060 	.word	0x20000060

08009528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af02      	add	r7, sp, #8
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009534:	4b1b      	ldr	r3, [pc, #108]	@ (80095a4 <SPI_EndRxTxTransaction+0x7c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a1b      	ldr	r2, [pc, #108]	@ (80095a8 <SPI_EndRxTxTransaction+0x80>)
 800953a:	fba2 2303 	umull	r2, r3, r2, r3
 800953e:	0d5b      	lsrs	r3, r3, #21
 8009540:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009544:	fb02 f303 	mul.w	r3, r2, r3
 8009548:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009552:	d112      	bne.n	800957a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2200      	movs	r2, #0
 800955c:	2180      	movs	r1, #128	@ 0x80
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7ff ff5a 	bl	8009418 <SPI_WaitFlagStateUntilTimeout>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d016      	beq.n	8009598 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956e:	f043 0220 	orr.w	r2, r3, #32
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e00f      	b.n	800959a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	3b01      	subs	r3, #1
 8009584:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009590:	2b80      	cmp	r3, #128	@ 0x80
 8009592:	d0f2      	beq.n	800957a <SPI_EndRxTxTransaction+0x52>
 8009594:	e000      	b.n	8009598 <SPI_EndRxTxTransaction+0x70>
        break;
 8009596:	bf00      	nop
  }

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20000060 	.word	0x20000060
 80095a8:	165e9f81 	.word	0x165e9f81

080095ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e041      	b.n	8009642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7fb fe42 	bl	800525c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	4619      	mov	r1, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	f000 fb38 	bl	8009c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b01      	cmp	r3, #1
 800965e:	d001      	beq.n	8009664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e046      	b.n	80096f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a23      	ldr	r2, [pc, #140]	@ (8009700 <HAL_TIM_Base_Start+0xb4>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d022      	beq.n	80096bc <HAL_TIM_Base_Start+0x70>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800967e:	d01d      	beq.n	80096bc <HAL_TIM_Base_Start+0x70>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1f      	ldr	r2, [pc, #124]	@ (8009704 <HAL_TIM_Base_Start+0xb8>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d018      	beq.n	80096bc <HAL_TIM_Base_Start+0x70>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a1e      	ldr	r2, [pc, #120]	@ (8009708 <HAL_TIM_Base_Start+0xbc>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d013      	beq.n	80096bc <HAL_TIM_Base_Start+0x70>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a1c      	ldr	r2, [pc, #112]	@ (800970c <HAL_TIM_Base_Start+0xc0>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d00e      	beq.n	80096bc <HAL_TIM_Base_Start+0x70>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009710 <HAL_TIM_Base_Start+0xc4>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d009      	beq.n	80096bc <HAL_TIM_Base_Start+0x70>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a19      	ldr	r2, [pc, #100]	@ (8009714 <HAL_TIM_Base_Start+0xc8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d004      	beq.n	80096bc <HAL_TIM_Base_Start+0x70>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a18      	ldr	r2, [pc, #96]	@ (8009718 <HAL_TIM_Base_Start+0xcc>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d111      	bne.n	80096e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b06      	cmp	r3, #6
 80096cc:	d010      	beq.n	80096f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0201 	orr.w	r2, r2, #1
 80096dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096de:	e007      	b.n	80096f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f042 0201 	orr.w	r2, r2, #1
 80096ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	40010000 	.word	0x40010000
 8009704:	40000400 	.word	0x40000400
 8009708:	40000800 	.word	0x40000800
 800970c:	40000c00 	.word	0x40000c00
 8009710:	40010400 	.word	0x40010400
 8009714:	40014000 	.word	0x40014000
 8009718:	40001800 	.word	0x40001800

0800971c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e041      	b.n	80097b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7fb fd52 	bl	80051ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3304      	adds	r3, #4
 8009758:	4619      	mov	r1, r3
 800975a:	4610      	mov	r0, r2
 800975c:	f000 fa80 	bl	8009c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d109      	bne.n	80097e0 <HAL_TIM_PWM_Start+0x24>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	bf14      	ite	ne
 80097d8:	2301      	movne	r3, #1
 80097da:	2300      	moveq	r3, #0
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	e022      	b.n	8009826 <HAL_TIM_PWM_Start+0x6a>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d109      	bne.n	80097fa <HAL_TIM_PWM_Start+0x3e>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	bf14      	ite	ne
 80097f2:	2301      	movne	r3, #1
 80097f4:	2300      	moveq	r3, #0
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	e015      	b.n	8009826 <HAL_TIM_PWM_Start+0x6a>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b08      	cmp	r3, #8
 80097fe:	d109      	bne.n	8009814 <HAL_TIM_PWM_Start+0x58>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b01      	cmp	r3, #1
 800980a:	bf14      	ite	ne
 800980c:	2301      	movne	r3, #1
 800980e:	2300      	moveq	r3, #0
 8009810:	b2db      	uxtb	r3, r3
 8009812:	e008      	b.n	8009826 <HAL_TIM_PWM_Start+0x6a>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b01      	cmp	r3, #1
 800981e:	bf14      	ite	ne
 8009820:	2301      	movne	r3, #1
 8009822:	2300      	moveq	r3, #0
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e07c      	b.n	8009928 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d104      	bne.n	800983e <HAL_TIM_PWM_Start+0x82>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800983c:	e013      	b.n	8009866 <HAL_TIM_PWM_Start+0xaa>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b04      	cmp	r3, #4
 8009842:	d104      	bne.n	800984e <HAL_TIM_PWM_Start+0x92>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800984c:	e00b      	b.n	8009866 <HAL_TIM_PWM_Start+0xaa>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b08      	cmp	r3, #8
 8009852:	d104      	bne.n	800985e <HAL_TIM_PWM_Start+0xa2>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800985c:	e003      	b.n	8009866 <HAL_TIM_PWM_Start+0xaa>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2202      	movs	r2, #2
 8009862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2201      	movs	r2, #1
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fce0 	bl	800a234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a2d      	ldr	r2, [pc, #180]	@ (8009930 <HAL_TIM_PWM_Start+0x174>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d004      	beq.n	8009888 <HAL_TIM_PWM_Start+0xcc>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a2c      	ldr	r2, [pc, #176]	@ (8009934 <HAL_TIM_PWM_Start+0x178>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d101      	bne.n	800988c <HAL_TIM_PWM_Start+0xd0>
 8009888:	2301      	movs	r3, #1
 800988a:	e000      	b.n	800988e <HAL_TIM_PWM_Start+0xd2>
 800988c:	2300      	movs	r3, #0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d007      	beq.n	80098a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a22      	ldr	r2, [pc, #136]	@ (8009930 <HAL_TIM_PWM_Start+0x174>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d022      	beq.n	80098f2 <HAL_TIM_PWM_Start+0x136>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098b4:	d01d      	beq.n	80098f2 <HAL_TIM_PWM_Start+0x136>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009938 <HAL_TIM_PWM_Start+0x17c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d018      	beq.n	80098f2 <HAL_TIM_PWM_Start+0x136>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a1d      	ldr	r2, [pc, #116]	@ (800993c <HAL_TIM_PWM_Start+0x180>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <HAL_TIM_PWM_Start+0x136>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a1c      	ldr	r2, [pc, #112]	@ (8009940 <HAL_TIM_PWM_Start+0x184>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d00e      	beq.n	80098f2 <HAL_TIM_PWM_Start+0x136>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a16      	ldr	r2, [pc, #88]	@ (8009934 <HAL_TIM_PWM_Start+0x178>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d009      	beq.n	80098f2 <HAL_TIM_PWM_Start+0x136>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a18      	ldr	r2, [pc, #96]	@ (8009944 <HAL_TIM_PWM_Start+0x188>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d004      	beq.n	80098f2 <HAL_TIM_PWM_Start+0x136>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a16      	ldr	r2, [pc, #88]	@ (8009948 <HAL_TIM_PWM_Start+0x18c>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d111      	bne.n	8009916 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b06      	cmp	r3, #6
 8009902:	d010      	beq.n	8009926 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009914:	e007      	b.n	8009926 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0201 	orr.w	r2, r2, #1
 8009924:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	40010000 	.word	0x40010000
 8009934:	40010400 	.word	0x40010400
 8009938:	40000400 	.word	0x40000400
 800993c:	40000800 	.word	0x40000800
 8009940:	40000c00 	.word	0x40000c00
 8009944:	40014000 	.word	0x40014000
 8009948:	40001800 	.word	0x40001800

0800994c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009962:	2b01      	cmp	r3, #1
 8009964:	d101      	bne.n	800996a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009966:	2302      	movs	r3, #2
 8009968:	e0ae      	b.n	8009ac8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b0c      	cmp	r3, #12
 8009976:	f200 809f 	bhi.w	8009ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800997a:	a201      	add	r2, pc, #4	@ (adr r2, 8009980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	080099b5 	.word	0x080099b5
 8009984:	08009ab9 	.word	0x08009ab9
 8009988:	08009ab9 	.word	0x08009ab9
 800998c:	08009ab9 	.word	0x08009ab9
 8009990:	080099f5 	.word	0x080099f5
 8009994:	08009ab9 	.word	0x08009ab9
 8009998:	08009ab9 	.word	0x08009ab9
 800999c:	08009ab9 	.word	0x08009ab9
 80099a0:	08009a37 	.word	0x08009a37
 80099a4:	08009ab9 	.word	0x08009ab9
 80099a8:	08009ab9 	.word	0x08009ab9
 80099ac:	08009ab9 	.word	0x08009ab9
 80099b0:	08009a77 	.word	0x08009a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f9f0 	bl	8009da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	699a      	ldr	r2, [r3, #24]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f042 0208 	orr.w	r2, r2, #8
 80099ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f022 0204 	bic.w	r2, r2, #4
 80099de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6999      	ldr	r1, [r3, #24]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	691a      	ldr	r2, [r3, #16]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	619a      	str	r2, [r3, #24]
      break;
 80099f2:	e064      	b.n	8009abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68b9      	ldr	r1, [r7, #8]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 fa40 	bl	8009e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699a      	ldr	r2, [r3, #24]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6999      	ldr	r1, [r3, #24]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	021a      	lsls	r2, r3, #8
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	430a      	orrs	r2, r1
 8009a32:	619a      	str	r2, [r3, #24]
      break;
 8009a34:	e043      	b.n	8009abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 fa95 	bl	8009f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69da      	ldr	r2, [r3, #28]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f042 0208 	orr.w	r2, r2, #8
 8009a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69da      	ldr	r2, [r3, #28]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f022 0204 	bic.w	r2, r2, #4
 8009a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69d9      	ldr	r1, [r3, #28]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	691a      	ldr	r2, [r3, #16]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	61da      	str	r2, [r3, #28]
      break;
 8009a74:	e023      	b.n	8009abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68b9      	ldr	r1, [r7, #8]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fae9 	bl	800a054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69da      	ldr	r2, [r3, #28]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69da      	ldr	r2, [r3, #28]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69d9      	ldr	r1, [r3, #28]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	021a      	lsls	r2, r3, #8
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	61da      	str	r2, [r3, #28]
      break;
 8009ab6:	e002      	b.n	8009abe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	75fb      	strb	r3, [r7, #23]
      break;
 8009abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d101      	bne.n	8009aec <HAL_TIM_ConfigClockSource+0x1c>
 8009ae8:	2302      	movs	r3, #2
 8009aea:	e0b4      	b.n	8009c56 <HAL_TIM_ConfigClockSource+0x186>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b24:	d03e      	beq.n	8009ba4 <HAL_TIM_ConfigClockSource+0xd4>
 8009b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b2a:	f200 8087 	bhi.w	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
 8009b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b32:	f000 8086 	beq.w	8009c42 <HAL_TIM_ConfigClockSource+0x172>
 8009b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b3a:	d87f      	bhi.n	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
 8009b3c:	2b70      	cmp	r3, #112	@ 0x70
 8009b3e:	d01a      	beq.n	8009b76 <HAL_TIM_ConfigClockSource+0xa6>
 8009b40:	2b70      	cmp	r3, #112	@ 0x70
 8009b42:	d87b      	bhi.n	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
 8009b44:	2b60      	cmp	r3, #96	@ 0x60
 8009b46:	d050      	beq.n	8009bea <HAL_TIM_ConfigClockSource+0x11a>
 8009b48:	2b60      	cmp	r3, #96	@ 0x60
 8009b4a:	d877      	bhi.n	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
 8009b4c:	2b50      	cmp	r3, #80	@ 0x50
 8009b4e:	d03c      	beq.n	8009bca <HAL_TIM_ConfigClockSource+0xfa>
 8009b50:	2b50      	cmp	r3, #80	@ 0x50
 8009b52:	d873      	bhi.n	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
 8009b54:	2b40      	cmp	r3, #64	@ 0x40
 8009b56:	d058      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0x13a>
 8009b58:	2b40      	cmp	r3, #64	@ 0x40
 8009b5a:	d86f      	bhi.n	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
 8009b5c:	2b30      	cmp	r3, #48	@ 0x30
 8009b5e:	d064      	beq.n	8009c2a <HAL_TIM_ConfigClockSource+0x15a>
 8009b60:	2b30      	cmp	r3, #48	@ 0x30
 8009b62:	d86b      	bhi.n	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
 8009b64:	2b20      	cmp	r3, #32
 8009b66:	d060      	beq.n	8009c2a <HAL_TIM_ConfigClockSource+0x15a>
 8009b68:	2b20      	cmp	r3, #32
 8009b6a:	d867      	bhi.n	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d05c      	beq.n	8009c2a <HAL_TIM_ConfigClockSource+0x15a>
 8009b70:	2b10      	cmp	r3, #16
 8009b72:	d05a      	beq.n	8009c2a <HAL_TIM_ConfigClockSource+0x15a>
 8009b74:	e062      	b.n	8009c3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	6899      	ldr	r1, [r3, #8]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f000 fb35 	bl	800a1f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	609a      	str	r2, [r3, #8]
      break;
 8009ba2:	e04f      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	6899      	ldr	r1, [r3, #8]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f000 fb1e 	bl	800a1f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689a      	ldr	r2, [r3, #8]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bc6:	609a      	str	r2, [r3, #8]
      break;
 8009bc8:	e03c      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	6859      	ldr	r1, [r3, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f000 fa92 	bl	800a100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2150      	movs	r1, #80	@ 0x50
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 faeb 	bl	800a1be <TIM_ITRx_SetConfig>
      break;
 8009be8:	e02c      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	6859      	ldr	r1, [r3, #4]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f000 fab1 	bl	800a15e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2160      	movs	r1, #96	@ 0x60
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fadb 	bl	800a1be <TIM_ITRx_SetConfig>
      break;
 8009c08:	e01c      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	6859      	ldr	r1, [r3, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	461a      	mov	r2, r3
 8009c18:	f000 fa72 	bl	800a100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2140      	movs	r1, #64	@ 0x40
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 facb 	bl	800a1be <TIM_ITRx_SetConfig>
      break;
 8009c28:	e00c      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4619      	mov	r1, r3
 8009c34:	4610      	mov	r0, r2
 8009c36:	f000 fac2 	bl	800a1be <TIM_ITRx_SetConfig>
      break;
 8009c3a:	e003      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c40:	e000      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a40      	ldr	r2, [pc, #256]	@ (8009d74 <TIM_Base_SetConfig+0x114>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c7e:	d00f      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a3d      	ldr	r2, [pc, #244]	@ (8009d78 <TIM_Base_SetConfig+0x118>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d00b      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a3c      	ldr	r2, [pc, #240]	@ (8009d7c <TIM_Base_SetConfig+0x11c>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d007      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a3b      	ldr	r2, [pc, #236]	@ (8009d80 <TIM_Base_SetConfig+0x120>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d003      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8009d84 <TIM_Base_SetConfig+0x124>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d108      	bne.n	8009cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8009d74 <TIM_Base_SetConfig+0x114>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d02b      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cc0:	d027      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8009d78 <TIM_Base_SetConfig+0x118>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d023      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8009d7c <TIM_Base_SetConfig+0x11c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d01f      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8009d80 <TIM_Base_SetConfig+0x120>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d01b      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a29      	ldr	r2, [pc, #164]	@ (8009d84 <TIM_Base_SetConfig+0x124>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d017      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a28      	ldr	r2, [pc, #160]	@ (8009d88 <TIM_Base_SetConfig+0x128>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d013      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a27      	ldr	r2, [pc, #156]	@ (8009d8c <TIM_Base_SetConfig+0x12c>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d00f      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a26      	ldr	r2, [pc, #152]	@ (8009d90 <TIM_Base_SetConfig+0x130>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00b      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a25      	ldr	r2, [pc, #148]	@ (8009d94 <TIM_Base_SetConfig+0x134>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d007      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a24      	ldr	r2, [pc, #144]	@ (8009d98 <TIM_Base_SetConfig+0x138>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d003      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a23      	ldr	r2, [pc, #140]	@ (8009d9c <TIM_Base_SetConfig+0x13c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d108      	bne.n	8009d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8009d74 <TIM_Base_SetConfig+0x114>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d003      	beq.n	8009d58 <TIM_Base_SetConfig+0xf8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a0c      	ldr	r2, [pc, #48]	@ (8009d84 <TIM_Base_SetConfig+0x124>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d103      	bne.n	8009d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	615a      	str	r2, [r3, #20]
}
 8009d66:	bf00      	nop
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	40010000 	.word	0x40010000
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40000c00 	.word	0x40000c00
 8009d84:	40010400 	.word	0x40010400
 8009d88:	40014000 	.word	0x40014000
 8009d8c:	40014400 	.word	0x40014400
 8009d90:	40014800 	.word	0x40014800
 8009d94:	40001800 	.word	0x40001800
 8009d98:	40001c00 	.word	0x40001c00
 8009d9c:	40002000 	.word	0x40002000

08009da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f023 0201 	bic.w	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f023 0302 	bic.w	r3, r3, #2
 8009de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a20      	ldr	r2, [pc, #128]	@ (8009e78 <TIM_OC1_SetConfig+0xd8>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_OC1_SetConfig+0x64>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8009e7c <TIM_OC1_SetConfig+0xdc>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10c      	bne.n	8009e1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f023 0308 	bic.w	r3, r3, #8
 8009e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f023 0304 	bic.w	r3, r3, #4
 8009e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a15      	ldr	r2, [pc, #84]	@ (8009e78 <TIM_OC1_SetConfig+0xd8>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d003      	beq.n	8009e2e <TIM_OC1_SetConfig+0x8e>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a14      	ldr	r2, [pc, #80]	@ (8009e7c <TIM_OC1_SetConfig+0xdc>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d111      	bne.n	8009e52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	621a      	str	r2, [r3, #32]
}
 8009e6c:	bf00      	nop
 8009e6e:	371c      	adds	r7, #28
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	40010000 	.word	0x40010000
 8009e7c:	40010400 	.word	0x40010400

08009e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	f023 0210 	bic.w	r2, r3, #16
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	021b      	lsls	r3, r3, #8
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	f023 0320 	bic.w	r3, r3, #32
 8009eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a22      	ldr	r2, [pc, #136]	@ (8009f64 <TIM_OC2_SetConfig+0xe4>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d003      	beq.n	8009ee8 <TIM_OC2_SetConfig+0x68>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a21      	ldr	r2, [pc, #132]	@ (8009f68 <TIM_OC2_SetConfig+0xe8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d10d      	bne.n	8009f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	011b      	lsls	r3, r3, #4
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a17      	ldr	r2, [pc, #92]	@ (8009f64 <TIM_OC2_SetConfig+0xe4>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d003      	beq.n	8009f14 <TIM_OC2_SetConfig+0x94>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a16      	ldr	r2, [pc, #88]	@ (8009f68 <TIM_OC2_SetConfig+0xe8>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d113      	bne.n	8009f3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	621a      	str	r2, [r3, #32]
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	40010000 	.word	0x40010000
 8009f68:	40010400 	.word	0x40010400

08009f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 0303 	bic.w	r3, r3, #3
 8009fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	021b      	lsls	r3, r3, #8
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a21      	ldr	r2, [pc, #132]	@ (800a04c <TIM_OC3_SetConfig+0xe0>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d003      	beq.n	8009fd2 <TIM_OC3_SetConfig+0x66>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a20      	ldr	r2, [pc, #128]	@ (800a050 <TIM_OC3_SetConfig+0xe4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d10d      	bne.n	8009fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a16      	ldr	r2, [pc, #88]	@ (800a04c <TIM_OC3_SetConfig+0xe0>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_OC3_SetConfig+0x92>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a15      	ldr	r2, [pc, #84]	@ (800a050 <TIM_OC3_SetConfig+0xe4>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d113      	bne.n	800a026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4313      	orrs	r3, r2
 800a018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	621a      	str	r2, [r3, #32]
}
 800a040:	bf00      	nop
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	40010000 	.word	0x40010000
 800a050:	40010400 	.word	0x40010400

0800a054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	021b      	lsls	r3, r3, #8
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	031b      	lsls	r3, r3, #12
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a12      	ldr	r2, [pc, #72]	@ (800a0f8 <TIM_OC4_SetConfig+0xa4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_OC4_SetConfig+0x68>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a11      	ldr	r2, [pc, #68]	@ (800a0fc <TIM_OC4_SetConfig+0xa8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d109      	bne.n	800a0d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	019b      	lsls	r3, r3, #6
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	621a      	str	r2, [r3, #32]
}
 800a0ea:	bf00      	nop
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	40010000 	.word	0x40010000
 800a0fc:	40010400 	.word	0x40010400

0800a100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	f023 0201 	bic.w	r2, r3, #1
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a12a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	011b      	lsls	r3, r3, #4
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	4313      	orrs	r3, r2
 800a134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f023 030a 	bic.w	r3, r3, #10
 800a13c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	4313      	orrs	r3, r2
 800a144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	621a      	str	r2, [r3, #32]
}
 800a152:	bf00      	nop
 800a154:	371c      	adds	r7, #28
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a15e:	b480      	push	{r7}
 800a160:	b087      	sub	sp, #28
 800a162:	af00      	add	r7, sp, #0
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	f023 0210 	bic.w	r2, r3, #16
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a188:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	031b      	lsls	r3, r3, #12
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a19a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	011b      	lsls	r3, r3, #4
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	621a      	str	r2, [r3, #32]
}
 800a1b2:	bf00      	nop
 800a1b4:	371c      	adds	r7, #28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b085      	sub	sp, #20
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	f043 0307 	orr.w	r3, r3, #7
 800a1e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	609a      	str	r2, [r3, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a20e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	021a      	lsls	r2, r3, #8
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	431a      	orrs	r2, r3
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	4313      	orrs	r3, r2
 800a220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	609a      	str	r2, [r3, #8]
}
 800a228:	bf00      	nop
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	f003 031f 	and.w	r3, r3, #31
 800a246:	2201      	movs	r2, #1
 800a248:	fa02 f303 	lsl.w	r3, r2, r3
 800a24c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6a1a      	ldr	r2, [r3, #32]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	43db      	mvns	r3, r3
 800a256:	401a      	ands	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6a1a      	ldr	r2, [r3, #32]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f003 031f 	and.w	r3, r3, #31
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	fa01 f303 	lsl.w	r3, r1, r3
 800a26c:	431a      	orrs	r2, r3
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	621a      	str	r2, [r3, #32]
}
 800a272:	bf00      	nop
 800a274:	371c      	adds	r7, #28
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
	...

0800a280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a294:	2302      	movs	r3, #2
 800a296:	e05a      	b.n	800a34e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a21      	ldr	r2, [pc, #132]	@ (800a35c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d022      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2e4:	d01d      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a360 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d018      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a364 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d013      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a368 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d00e      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a18      	ldr	r2, [pc, #96]	@ (800a36c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d009      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a17      	ldr	r2, [pc, #92]	@ (800a370 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d004      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a15      	ldr	r2, [pc, #84]	@ (800a374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d10c      	bne.n	800a33c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a328:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	4313      	orrs	r3, r2
 800a332:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	40010000 	.word	0x40010000
 800a360:	40000400 	.word	0x40000400
 800a364:	40000800 	.word	0x40000800
 800a368:	40000c00 	.word	0x40000c00
 800a36c:	40010400 	.word	0x40010400
 800a370:	40014000 	.word	0x40014000
 800a374:	40001800 	.word	0x40001800

0800a378 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d101      	bne.n	800a394 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a390:	2302      	movs	r3, #2
 800a392:	e03d      	b.n	800a410 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e03f      	b.n	800a4ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7fb f816 	bl	8005474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2224      	movs	r2, #36	@ 0x24
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68da      	ldr	r2, [r3, #12]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a45e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 ff81 	bl	800b368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	691a      	ldr	r2, [r3, #16]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	695a      	ldr	r2, [r3, #20]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68da      	ldr	r2, [r3, #12]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2220      	movs	r2, #32
 800a4a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08c      	sub	sp, #48	@ 0x30
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b20      	cmp	r3, #32
 800a4d0:	d165      	bne.n	800a59e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <HAL_UART_Transmit_DMA+0x26>
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e05e      	b.n	800a5a0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d101      	bne.n	800a4f0 <HAL_UART_Transmit_DMA+0x38>
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	e057      	b.n	800a5a0 <HAL_UART_Transmit_DMA+0xe8>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	88fa      	ldrh	r2, [r7, #6]
 800a502:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	88fa      	ldrh	r2, [r7, #6]
 800a508:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2221      	movs	r2, #33	@ 0x21
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a51c:	4a22      	ldr	r2, [pc, #136]	@ (800a5a8 <HAL_UART_Transmit_DMA+0xf0>)
 800a51e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a524:	4a21      	ldr	r2, [pc, #132]	@ (800a5ac <HAL_UART_Transmit_DMA+0xf4>)
 800a526:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a52c:	4a20      	ldr	r2, [pc, #128]	@ (800a5b0 <HAL_UART_Transmit_DMA+0xf8>)
 800a52e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a534:	2200      	movs	r2, #0
 800a536:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a538:	f107 0308 	add.w	r3, r7, #8
 800a53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a544:	6819      	ldr	r1, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3304      	adds	r3, #4
 800a54c:	461a      	mov	r2, r3
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	f7fc fbd6 	bl	8006d00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a55c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3314      	adds	r3, #20
 800a56c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	e853 3f00 	ldrex	r3, [r3]
 800a574:	617b      	str	r3, [r7, #20]
   return(result);
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a57c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3314      	adds	r3, #20
 800a584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a586:	627a      	str	r2, [r7, #36]	@ 0x24
 800a588:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	6a39      	ldr	r1, [r7, #32]
 800a58c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	61fb      	str	r3, [r7, #28]
   return(result);
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e5      	bne.n	800a566 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	e000      	b.n	800a5a0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a59e:	2302      	movs	r3, #2
  }
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3730      	adds	r7, #48	@ 0x30
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	0800ac01 	.word	0x0800ac01
 800a5ac:	0800ac9b 	.word	0x0800ac9b
 800a5b0:	0800ae13 	.word	0x0800ae13

0800a5b4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08c      	sub	sp, #48	@ 0x30
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b20      	cmp	r3, #32
 800a5cc:	d152      	bne.n	800a674 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a5d4:	88fb      	ldrh	r3, [r7, #6]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e04b      	b.n	800a676 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d101      	bne.n	800a5ec <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e044      	b.n	800a676 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	68b9      	ldr	r1, [r7, #8]
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 fc51 	bl	800aea8 <UART_Start_Receive_DMA>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a60c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a610:	2b00      	cmp	r3, #0
 800a612:	d12c      	bne.n	800a66e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d125      	bne.n	800a668 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a61c:	2300      	movs	r3, #0
 800a61e:	613b      	str	r3, [r7, #16]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	613b      	str	r3, [r7, #16]
 800a630:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	330c      	adds	r3, #12
 800a638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	617b      	str	r3, [r7, #20]
   return(result);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f043 0310 	orr.w	r3, r3, #16
 800a648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	330c      	adds	r3, #12
 800a650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a652:	627a      	str	r2, [r7, #36]	@ 0x24
 800a654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6a39      	ldr	r1, [r7, #32]
 800a658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e5      	bne.n	800a632 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a666:	e002      	b.n	800a66e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a66e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a672:	e000      	b.n	800a676 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a674:	2302      	movs	r3, #2
  }
}
 800a676:	4618      	mov	r0, r3
 800a678:	3730      	adds	r7, #48	@ 0x30
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
	...

0800a680 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b0ba      	sub	sp, #232	@ 0xe8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b6:	f003 030f 	and.w	r3, r3, #15
 800a6ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a6be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10f      	bne.n	800a6e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ca:	f003 0320 	and.w	r3, r3, #32
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d009      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x66>
 800a6d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fd87 	bl	800b1f2 <UART_Receive_IT>
      return;
 800a6e4:	e256      	b.n	800ab94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 80de 	beq.w	800a8ac <HAL_UART_IRQHandler+0x22c>
 800a6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d106      	bne.n	800a70a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a700:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 80d1 	beq.w	800a8ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <HAL_UART_IRQHandler+0xae>
 800a716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a71a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d005      	beq.n	800a72e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a726:	f043 0201 	orr.w	r2, r3, #1
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a732:	f003 0304 	and.w	r3, r3, #4
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00b      	beq.n	800a752 <HAL_UART_IRQHandler+0xd2>
 800a73a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	d005      	beq.n	800a752 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74a:	f043 0202 	orr.w	r2, r3, #2
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a756:	f003 0302 	and.w	r3, r3, #2
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00b      	beq.n	800a776 <HAL_UART_IRQHandler+0xf6>
 800a75e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	d005      	beq.n	800a776 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a76e:	f043 0204 	orr.w	r2, r3, #4
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a77a:	f003 0308 	and.w	r3, r3, #8
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d011      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x126>
 800a782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a786:	f003 0320 	and.w	r3, r3, #32
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d105      	bne.n	800a79a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a78e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79e:	f043 0208 	orr.w	r2, r3, #8
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 81ed 	beq.w	800ab8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d008      	beq.n	800a7ce <HAL_UART_IRQHandler+0x14e>
 800a7bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fd12 	bl	800b1f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d8:	2b40      	cmp	r3, #64	@ 0x40
 800a7da:	bf0c      	ite	eq
 800a7dc:	2301      	moveq	r3, #1
 800a7de:	2300      	movne	r3, #0
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ea:	f003 0308 	and.w	r3, r3, #8
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d103      	bne.n	800a7fa <HAL_UART_IRQHandler+0x17a>
 800a7f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d04f      	beq.n	800a89a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fc1a 	bl	800b034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a80a:	2b40      	cmp	r3, #64	@ 0x40
 800a80c:	d141      	bne.n	800a892 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3314      	adds	r3, #20
 800a814:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a818:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a82c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3314      	adds	r3, #20
 800a836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a83a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a83e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a84a:	e841 2300 	strex	r3, r2, [r1]
 800a84e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1d9      	bne.n	800a80e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d013      	beq.n	800a88a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a866:	4a7d      	ldr	r2, [pc, #500]	@ (800aa5c <HAL_UART_IRQHandler+0x3dc>)
 800a868:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fc fb0e 	bl	8006e90 <HAL_DMA_Abort_IT>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d016      	beq.n	800a8a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a884:	4610      	mov	r0, r2
 800a886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a888:	e00e      	b.n	800a8a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f9ae 	bl	800abec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a890:	e00a      	b.n	800a8a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f9aa 	bl	800abec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a898:	e006      	b.n	800a8a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f9a6 	bl	800abec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800a8a6:	e170      	b.n	800ab8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a8:	bf00      	nop
    return;
 800a8aa:	e16e      	b.n	800ab8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	f040 814a 	bne.w	800ab4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a8b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8ba:	f003 0310 	and.w	r3, r3, #16
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 8143 	beq.w	800ab4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a8c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8c8:	f003 0310 	and.w	r3, r3, #16
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 813c 	beq.w	800ab4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60bb      	str	r3, [r7, #8]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	60bb      	str	r3, [r7, #8]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	60bb      	str	r3, [r7, #8]
 800a8e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f2:	2b40      	cmp	r3, #64	@ 0x40
 800a8f4:	f040 80b4 	bne.w	800aa60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a904:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 8140 	beq.w	800ab8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a916:	429a      	cmp	r2, r3
 800a918:	f080 8139 	bcs.w	800ab8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a922:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a928:	69db      	ldr	r3, [r3, #28]
 800a92a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a92e:	f000 8088 	beq.w	800aa42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	330c      	adds	r3, #12
 800a938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a940:	e853 3f00 	ldrex	r3, [r3]
 800a944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a948:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a94c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	330c      	adds	r3, #12
 800a95a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a95e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a962:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a96a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1d9      	bne.n	800a932 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3314      	adds	r3, #20
 800a984:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a98e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3314      	adds	r3, #20
 800a99e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a9a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a9aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a9ae:	e841 2300 	strex	r3, r2, [r1]
 800a9b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a9b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1e1      	bne.n	800a97e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3314      	adds	r3, #20
 800a9c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a9ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3314      	adds	r3, #20
 800a9da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a9de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a9e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a9e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a9ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e3      	bne.n	800a9ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	330c      	adds	r3, #12
 800aa06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa0a:	e853 3f00 	ldrex	r3, [r3]
 800aa0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa12:	f023 0310 	bic.w	r3, r3, #16
 800aa16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	330c      	adds	r3, #12
 800aa20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800aa24:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e3      	bne.n	800aa00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fc f9b7 	bl	8006db0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7f7 fa1a 	bl	8001e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa58:	e099      	b.n	800ab8e <HAL_UART_IRQHandler+0x50e>
 800aa5a:	bf00      	nop
 800aa5c:	0800b0fb 	.word	0x0800b0fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 808b 	beq.w	800ab92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 8086 	beq.w	800ab92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	330c      	adds	r3, #12
 800aa8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	330c      	adds	r3, #12
 800aaa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800aaaa:	647a      	str	r2, [r7, #68]	@ 0x44
 800aaac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aab2:	e841 2300 	strex	r3, r2, [r1]
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e3      	bne.n	800aa86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3314      	adds	r3, #20
 800aac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac8:	e853 3f00 	ldrex	r3, [r3]
 800aacc:	623b      	str	r3, [r7, #32]
   return(result);
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	f023 0301 	bic.w	r3, r3, #1
 800aad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3314      	adds	r3, #20
 800aade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aae2:	633a      	str	r2, [r7, #48]	@ 0x30
 800aae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaea:	e841 2300 	strex	r3, r2, [r1]
 800aaee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aaf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1e3      	bne.n	800aabe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	330c      	adds	r3, #12
 800ab0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f023 0310 	bic.w	r3, r3, #16
 800ab1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	330c      	adds	r3, #12
 800ab24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ab28:	61fa      	str	r2, [r7, #28]
 800ab2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2c:	69b9      	ldr	r1, [r7, #24]
 800ab2e:	69fa      	ldr	r2, [r7, #28]
 800ab30:	e841 2300 	strex	r3, r2, [r1]
 800ab34:	617b      	str	r3, [r7, #20]
   return(result);
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e3      	bne.n	800ab04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7f7 f9a2 	bl	8001e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab48:	e023      	b.n	800ab92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d009      	beq.n	800ab6a <HAL_UART_IRQHandler+0x4ea>
 800ab56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fadd 	bl	800b122 <UART_Transmit_IT>
    return;
 800ab68:	e014      	b.n	800ab94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00e      	beq.n	800ab94 <HAL_UART_IRQHandler+0x514>
 800ab76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d008      	beq.n	800ab94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fb1d 	bl	800b1c2 <UART_EndTransmit_IT>
    return;
 800ab88:	e004      	b.n	800ab94 <HAL_UART_IRQHandler+0x514>
    return;
 800ab8a:	bf00      	nop
 800ab8c:	e002      	b.n	800ab94 <HAL_UART_IRQHandler+0x514>
      return;
 800ab8e:	bf00      	nop
 800ab90:	e000      	b.n	800ab94 <HAL_UART_IRQHandler+0x514>
      return;
 800ab92:	bf00      	nop
  }
}
 800ab94:	37e8      	adds	r7, #232	@ 0xe8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop

0800ab9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b090      	sub	sp, #64	@ 0x40
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d137      	bne.n	800ac8c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac1e:	2200      	movs	r2, #0
 800ac20:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3314      	adds	r3, #20
 800ac28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	623b      	str	r3, [r7, #32]
   return(result);
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac38:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3314      	adds	r3, #20
 800ac40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac42:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e5      	bne.n	800ac22 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	330c      	adds	r3, #12
 800ac5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	e853 3f00 	ldrex	r3, [r3]
 800ac64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	330c      	adds	r3, #12
 800ac74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac76:	61fa      	str	r2, [r7, #28]
 800ac78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7a:	69b9      	ldr	r1, [r7, #24]
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	617b      	str	r3, [r7, #20]
   return(result);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e5      	bne.n	800ac56 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac8a:	e002      	b.n	800ac92 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ac8c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ac8e:	f7ff ff85 	bl	800ab9c <HAL_UART_TxCpltCallback>
}
 800ac92:	bf00      	nop
 800ac94:	3740      	adds	r7, #64	@ 0x40
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aca6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7ff ff81 	bl	800abb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acae:	bf00      	nop
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b09c      	sub	sp, #112	@ 0x70
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d172      	bne.n	800adb8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800acd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acd4:	2200      	movs	r2, #0
 800acd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	330c      	adds	r3, #12
 800acde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ace2:	e853 3f00 	ldrex	r3, [r3]
 800ace6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ace8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	330c      	adds	r3, #12
 800acf6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800acf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800acfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800acfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e5      	bne.n	800acd8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3314      	adds	r3, #20
 800ad12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad16:	e853 3f00 	ldrex	r3, [r3]
 800ad1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad1e:	f023 0301 	bic.w	r3, r3, #1
 800ad22:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3314      	adds	r3, #20
 800ad2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ad2c:	647a      	str	r2, [r7, #68]	@ 0x44
 800ad2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad34:	e841 2300 	strex	r3, r2, [r1]
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e5      	bne.n	800ad0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3314      	adds	r3, #20
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	e853 3f00 	ldrex	r3, [r3]
 800ad4e:	623b      	str	r3, [r7, #32]
   return(result);
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad56:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3314      	adds	r3, #20
 800ad5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad60:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e5      	bne.n	800ad40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad76:	2220      	movs	r2, #32
 800ad78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d119      	bne.n	800adb8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	330c      	adds	r3, #12
 800ad8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f023 0310 	bic.w	r3, r3, #16
 800ad9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	330c      	adds	r3, #12
 800ada2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ada4:	61fa      	str	r2, [r7, #28]
 800ada6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	69b9      	ldr	r1, [r7, #24]
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	617b      	str	r3, [r7, #20]
   return(result);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e5      	bne.n	800ad84 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d106      	bne.n	800adce <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adc2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800adc4:	4619      	mov	r1, r3
 800adc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800adc8:	f7f7 f860 	bl	8001e8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adcc:	e002      	b.n	800add4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800adce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800add0:	f7ff fef8 	bl	800abc4 <HAL_UART_RxCpltCallback>
}
 800add4:	bf00      	nop
 800add6:	3770      	adds	r7, #112	@ 0x70
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d108      	bne.n	800ae04 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800adf6:	085b      	lsrs	r3, r3, #1
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	4619      	mov	r1, r3
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7f7 f845 	bl	8001e8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae02:	e002      	b.n	800ae0a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f7ff fee7 	bl	800abd8 <HAL_UART_RxHalfCpltCallback>
}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae22:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae2e:	2b80      	cmp	r3, #128	@ 0x80
 800ae30:	bf0c      	ite	eq
 800ae32:	2301      	moveq	r3, #1
 800ae34:	2300      	movne	r3, #0
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b21      	cmp	r3, #33	@ 0x21
 800ae44:	d108      	bne.n	800ae58 <UART_DMAError+0x46>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ae52:	68b8      	ldr	r0, [r7, #8]
 800ae54:	f000 f8c6 	bl	800afe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae62:	2b40      	cmp	r3, #64	@ 0x40
 800ae64:	bf0c      	ite	eq
 800ae66:	2301      	moveq	r3, #1
 800ae68:	2300      	movne	r3, #0
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b22      	cmp	r3, #34	@ 0x22
 800ae78:	d108      	bne.n	800ae8c <UART_DMAError+0x7a>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2200      	movs	r2, #0
 800ae84:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ae86:	68b8      	ldr	r0, [r7, #8]
 800ae88:	f000 f8d4 	bl	800b034 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae90:	f043 0210 	orr.w	r2, r3, #16
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f7ff fea7 	bl	800abec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b098      	sub	sp, #96	@ 0x60
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	88fa      	ldrh	r2, [r7, #6]
 800aec0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2222      	movs	r2, #34	@ 0x22
 800aecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed4:	4a40      	ldr	r2, [pc, #256]	@ (800afd8 <UART_Start_Receive_DMA+0x130>)
 800aed6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aedc:	4a3f      	ldr	r2, [pc, #252]	@ (800afdc <UART_Start_Receive_DMA+0x134>)
 800aede:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee4:	4a3e      	ldr	r2, [pc, #248]	@ (800afe0 <UART_Start_Receive_DMA+0x138>)
 800aee6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeec:	2200      	movs	r2, #0
 800aeee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	3304      	adds	r3, #4
 800af00:	4619      	mov	r1, r3
 800af02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	88fb      	ldrh	r3, [r7, #6]
 800af08:	f7fb fefa 	bl	8006d00 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af0c:	2300      	movs	r3, #0
 800af0e:	613b      	str	r3, [r7, #16]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	613b      	str	r3, [r7, #16]
 800af20:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d019      	beq.n	800af66 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	330c      	adds	r3, #12
 800af38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af3c:	e853 3f00 	ldrex	r3, [r3]
 800af40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af48:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	330c      	adds	r3, #12
 800af50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af52:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800af54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800af58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af5a:	e841 2300 	strex	r3, r2, [r1]
 800af5e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800af60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1e5      	bne.n	800af32 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3314      	adds	r3, #20
 800af6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af70:	e853 3f00 	ldrex	r3, [r3]
 800af74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af78:	f043 0301 	orr.w	r3, r3, #1
 800af7c:	657b      	str	r3, [r7, #84]	@ 0x54
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3314      	adds	r3, #20
 800af84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800af86:	63ba      	str	r2, [r7, #56]	@ 0x38
 800af88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800af8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af8e:	e841 2300 	strex	r3, r2, [r1]
 800af92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1e5      	bne.n	800af66 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3314      	adds	r3, #20
 800afa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	e853 3f00 	ldrex	r3, [r3]
 800afa8:	617b      	str	r3, [r7, #20]
   return(result);
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb0:	653b      	str	r3, [r7, #80]	@ 0x50
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3314      	adds	r3, #20
 800afb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800afba:	627a      	str	r2, [r7, #36]	@ 0x24
 800afbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbe:	6a39      	ldr	r1, [r7, #32]
 800afc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afc2:	e841 2300 	strex	r3, r2, [r1]
 800afc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1e5      	bne.n	800af9a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3760      	adds	r7, #96	@ 0x60
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	0800acb7 	.word	0x0800acb7
 800afdc:	0800addd 	.word	0x0800addd
 800afe0:	0800ae13 	.word	0x0800ae13

0800afe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b089      	sub	sp, #36	@ 0x24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	330c      	adds	r3, #12
 800aff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	e853 3f00 	ldrex	r3, [r3]
 800affa:	60bb      	str	r3, [r7, #8]
   return(result);
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b002:	61fb      	str	r3, [r7, #28]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	330c      	adds	r3, #12
 800b00a:	69fa      	ldr	r2, [r7, #28]
 800b00c:	61ba      	str	r2, [r7, #24]
 800b00e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b010:	6979      	ldr	r1, [r7, #20]
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	e841 2300 	strex	r3, r2, [r1]
 800b018:	613b      	str	r3, [r7, #16]
   return(result);
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e5      	bne.n	800afec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2220      	movs	r2, #32
 800b024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800b028:	bf00      	nop
 800b02a:	3724      	adds	r7, #36	@ 0x24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b034:	b480      	push	{r7}
 800b036:	b095      	sub	sp, #84	@ 0x54
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	330c      	adds	r3, #12
 800b042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b046:	e853 3f00 	ldrex	r3, [r3]
 800b04a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	330c      	adds	r3, #12
 800b05a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b05c:	643a      	str	r2, [r7, #64]	@ 0x40
 800b05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b064:	e841 2300 	strex	r3, r2, [r1]
 800b068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e5      	bne.n	800b03c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3314      	adds	r3, #20
 800b076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	6a3b      	ldr	r3, [r7, #32]
 800b07a:	e853 3f00 	ldrex	r3, [r3]
 800b07e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	f023 0301 	bic.w	r3, r3, #1
 800b086:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3314      	adds	r3, #20
 800b08e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b098:	e841 2300 	strex	r3, r2, [r1]
 800b09c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e5      	bne.n	800b070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d119      	bne.n	800b0e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	e853 3f00 	ldrex	r3, [r3]
 800b0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f023 0310 	bic.w	r3, r3, #16
 800b0c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0cc:	61ba      	str	r2, [r7, #24]
 800b0ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	6979      	ldr	r1, [r7, #20]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e5      	bne.n	800b0ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b0ee:	bf00      	nop
 800b0f0:	3754      	adds	r7, #84	@ 0x54
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b084      	sub	sp, #16
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7ff fd69 	bl	800abec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b122:	b480      	push	{r7}
 800b124:	b085      	sub	sp, #20
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b21      	cmp	r3, #33	@ 0x21
 800b134:	d13e      	bne.n	800b1b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b13e:	d114      	bne.n	800b16a <UART_Transmit_IT+0x48>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d110      	bne.n	800b16a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b15c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	1c9a      	adds	r2, r3, #2
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	621a      	str	r2, [r3, #32]
 800b168:	e008      	b.n	800b17c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	1c59      	adds	r1, r3, #1
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	6211      	str	r1, [r2, #32]
 800b174:	781a      	ldrb	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b180:	b29b      	uxth	r3, r3
 800b182:	3b01      	subs	r3, #1
 800b184:	b29b      	uxth	r3, r3
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	4619      	mov	r1, r3
 800b18a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10f      	bne.n	800b1b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b19e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68da      	ldr	r2, [r3, #12]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e000      	b.n	800b1b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1b4:	2302      	movs	r3, #2
  }
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b1d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2220      	movs	r2, #32
 800b1de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff fcda 	bl	800ab9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b08c      	sub	sp, #48	@ 0x30
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b22      	cmp	r3, #34	@ 0x22
 800b204:	f040 80ab 	bne.w	800b35e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b210:	d117      	bne.n	800b242 <UART_Receive_IT+0x50>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d113      	bne.n	800b242 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b222:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b230:	b29a      	uxth	r2, r3
 800b232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b23a:	1c9a      	adds	r2, r3, #2
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	629a      	str	r2, [r3, #40]	@ 0x28
 800b240:	e026      	b.n	800b290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b248:	2300      	movs	r3, #0
 800b24a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b254:	d007      	beq.n	800b266 <UART_Receive_IT+0x74>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <UART_Receive_IT+0x82>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d106      	bne.n	800b274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b270:	701a      	strb	r2, [r3, #0]
 800b272:	e008      	b.n	800b286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b280:	b2da      	uxtb	r2, r3
 800b282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28a:	1c5a      	adds	r2, r3, #1
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b294:	b29b      	uxth	r3, r3
 800b296:	3b01      	subs	r3, #1
 800b298:	b29b      	uxth	r3, r3
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4619      	mov	r1, r3
 800b29e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d15a      	bne.n	800b35a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68da      	ldr	r2, [r3, #12]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f022 0220 	bic.w	r2, r2, #32
 800b2b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68da      	ldr	r2, [r3, #12]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b2c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	695a      	ldr	r2, [r3, #20]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f022 0201 	bic.w	r2, r2, #1
 800b2d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d135      	bne.n	800b350 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	330c      	adds	r3, #12
 800b2f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	f023 0310 	bic.w	r3, r3, #16
 800b300:	627b      	str	r3, [r7, #36]	@ 0x24
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	330c      	adds	r3, #12
 800b308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b30a:	623a      	str	r2, [r7, #32]
 800b30c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	69f9      	ldr	r1, [r7, #28]
 800b310:	6a3a      	ldr	r2, [r7, #32]
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	61bb      	str	r3, [r7, #24]
   return(result);
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e5      	bne.n	800b2ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0310 	and.w	r3, r3, #16
 800b328:	2b10      	cmp	r3, #16
 800b32a:	d10a      	bne.n	800b342 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b32c:	2300      	movs	r3, #0
 800b32e:	60fb      	str	r3, [r7, #12]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b346:	4619      	mov	r1, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7f6 fd9f 	bl	8001e8c <HAL_UARTEx_RxEventCallback>
 800b34e:	e002      	b.n	800b356 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff fc37 	bl	800abc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	e002      	b.n	800b360 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	e000      	b.n	800b360 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b35e:	2302      	movs	r3, #2
  }
}
 800b360:	4618      	mov	r0, r3
 800b362:	3730      	adds	r7, #48	@ 0x30
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b36c:	b0c0      	sub	sp, #256	@ 0x100
 800b36e:	af00      	add	r7, sp, #0
 800b370:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b384:	68d9      	ldr	r1, [r3, #12]
 800b386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	ea40 0301 	orr.w	r3, r0, r1
 800b390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3ac:	69db      	ldr	r3, [r3, #28]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b3c0:	f021 010c 	bic.w	r1, r1, #12
 800b3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3e2:	6999      	ldr	r1, [r3, #24]
 800b3e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	ea40 0301 	orr.w	r3, r0, r1
 800b3ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	4b8f      	ldr	r3, [pc, #572]	@ (800b634 <UART_SetConfig+0x2cc>)
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d005      	beq.n	800b408 <UART_SetConfig+0xa0>
 800b3fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	4b8d      	ldr	r3, [pc, #564]	@ (800b638 <UART_SetConfig+0x2d0>)
 800b404:	429a      	cmp	r2, r3
 800b406:	d104      	bne.n	800b412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b408:	f7fd fdac 	bl	8008f64 <HAL_RCC_GetPCLK2Freq>
 800b40c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b410:	e003      	b.n	800b41a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b412:	f7fd fd93 	bl	8008f3c <HAL_RCC_GetPCLK1Freq>
 800b416:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b41a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b424:	f040 810c 	bne.w	800b640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b42c:	2200      	movs	r2, #0
 800b42e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b432:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b43a:	4622      	mov	r2, r4
 800b43c:	462b      	mov	r3, r5
 800b43e:	1891      	adds	r1, r2, r2
 800b440:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b442:	415b      	adcs	r3, r3
 800b444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b44a:	4621      	mov	r1, r4
 800b44c:	eb12 0801 	adds.w	r8, r2, r1
 800b450:	4629      	mov	r1, r5
 800b452:	eb43 0901 	adc.w	r9, r3, r1
 800b456:	f04f 0200 	mov.w	r2, #0
 800b45a:	f04f 0300 	mov.w	r3, #0
 800b45e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b46a:	4690      	mov	r8, r2
 800b46c:	4699      	mov	r9, r3
 800b46e:	4623      	mov	r3, r4
 800b470:	eb18 0303 	adds.w	r3, r8, r3
 800b474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b478:	462b      	mov	r3, r5
 800b47a:	eb49 0303 	adc.w	r3, r9, r3
 800b47e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b48e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b496:	460b      	mov	r3, r1
 800b498:	18db      	adds	r3, r3, r3
 800b49a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b49c:	4613      	mov	r3, r2
 800b49e:	eb42 0303 	adc.w	r3, r2, r3
 800b4a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b4a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b4ac:	f7f5 fbcc 	bl	8000c48 <__aeabi_uldivmod>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	4b61      	ldr	r3, [pc, #388]	@ (800b63c <UART_SetConfig+0x2d4>)
 800b4b6:	fba3 2302 	umull	r2, r3, r3, r2
 800b4ba:	095b      	lsrs	r3, r3, #5
 800b4bc:	011c      	lsls	r4, r3, #4
 800b4be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b4c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b4cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	1891      	adds	r1, r2, r2
 800b4d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b4d8:	415b      	adcs	r3, r3
 800b4da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b4e0:	4641      	mov	r1, r8
 800b4e2:	eb12 0a01 	adds.w	sl, r2, r1
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	eb43 0b01 	adc.w	fp, r3, r1
 800b4ec:	f04f 0200 	mov.w	r2, #0
 800b4f0:	f04f 0300 	mov.w	r3, #0
 800b4f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b4f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b4fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b500:	4692      	mov	sl, r2
 800b502:	469b      	mov	fp, r3
 800b504:	4643      	mov	r3, r8
 800b506:	eb1a 0303 	adds.w	r3, sl, r3
 800b50a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b50e:	464b      	mov	r3, r9
 800b510:	eb4b 0303 	adc.w	r3, fp, r3
 800b514:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b524:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b52c:	460b      	mov	r3, r1
 800b52e:	18db      	adds	r3, r3, r3
 800b530:	643b      	str	r3, [r7, #64]	@ 0x40
 800b532:	4613      	mov	r3, r2
 800b534:	eb42 0303 	adc.w	r3, r2, r3
 800b538:	647b      	str	r3, [r7, #68]	@ 0x44
 800b53a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b53e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b542:	f7f5 fb81 	bl	8000c48 <__aeabi_uldivmod>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	4611      	mov	r1, r2
 800b54c:	4b3b      	ldr	r3, [pc, #236]	@ (800b63c <UART_SetConfig+0x2d4>)
 800b54e:	fba3 2301 	umull	r2, r3, r3, r1
 800b552:	095b      	lsrs	r3, r3, #5
 800b554:	2264      	movs	r2, #100	@ 0x64
 800b556:	fb02 f303 	mul.w	r3, r2, r3
 800b55a:	1acb      	subs	r3, r1, r3
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b562:	4b36      	ldr	r3, [pc, #216]	@ (800b63c <UART_SetConfig+0x2d4>)
 800b564:	fba3 2302 	umull	r2, r3, r3, r2
 800b568:	095b      	lsrs	r3, r3, #5
 800b56a:	005b      	lsls	r3, r3, #1
 800b56c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b570:	441c      	add	r4, r3
 800b572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b576:	2200      	movs	r2, #0
 800b578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b57c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b584:	4642      	mov	r2, r8
 800b586:	464b      	mov	r3, r9
 800b588:	1891      	adds	r1, r2, r2
 800b58a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b58c:	415b      	adcs	r3, r3
 800b58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b594:	4641      	mov	r1, r8
 800b596:	1851      	adds	r1, r2, r1
 800b598:	6339      	str	r1, [r7, #48]	@ 0x30
 800b59a:	4649      	mov	r1, r9
 800b59c:	414b      	adcs	r3, r1
 800b59e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5a0:	f04f 0200 	mov.w	r2, #0
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b5ac:	4659      	mov	r1, fp
 800b5ae:	00cb      	lsls	r3, r1, #3
 800b5b0:	4651      	mov	r1, sl
 800b5b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5b6:	4651      	mov	r1, sl
 800b5b8:	00ca      	lsls	r2, r1, #3
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	4619      	mov	r1, r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	4642      	mov	r2, r8
 800b5c2:	189b      	adds	r3, r3, r2
 800b5c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	460a      	mov	r2, r1
 800b5cc:	eb42 0303 	adc.w	r3, r2, r3
 800b5d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b5d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b5e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b5e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	18db      	adds	r3, r3, r3
 800b5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	eb42 0303 	adc.w	r3, r2, r3
 800b5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b5fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b5fe:	f7f5 fb23 	bl	8000c48 <__aeabi_uldivmod>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4b0d      	ldr	r3, [pc, #52]	@ (800b63c <UART_SetConfig+0x2d4>)
 800b608:	fba3 1302 	umull	r1, r3, r3, r2
 800b60c:	095b      	lsrs	r3, r3, #5
 800b60e:	2164      	movs	r1, #100	@ 0x64
 800b610:	fb01 f303 	mul.w	r3, r1, r3
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	3332      	adds	r3, #50	@ 0x32
 800b61a:	4a08      	ldr	r2, [pc, #32]	@ (800b63c <UART_SetConfig+0x2d4>)
 800b61c:	fba2 2303 	umull	r2, r3, r2, r3
 800b620:	095b      	lsrs	r3, r3, #5
 800b622:	f003 0207 	and.w	r2, r3, #7
 800b626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4422      	add	r2, r4
 800b62e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b630:	e106      	b.n	800b840 <UART_SetConfig+0x4d8>
 800b632:	bf00      	nop
 800b634:	40011000 	.word	0x40011000
 800b638:	40011400 	.word	0x40011400
 800b63c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b644:	2200      	movs	r2, #0
 800b646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b64a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b64e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b652:	4642      	mov	r2, r8
 800b654:	464b      	mov	r3, r9
 800b656:	1891      	adds	r1, r2, r2
 800b658:	6239      	str	r1, [r7, #32]
 800b65a:	415b      	adcs	r3, r3
 800b65c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b65e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b662:	4641      	mov	r1, r8
 800b664:	1854      	adds	r4, r2, r1
 800b666:	4649      	mov	r1, r9
 800b668:	eb43 0501 	adc.w	r5, r3, r1
 800b66c:	f04f 0200 	mov.w	r2, #0
 800b670:	f04f 0300 	mov.w	r3, #0
 800b674:	00eb      	lsls	r3, r5, #3
 800b676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b67a:	00e2      	lsls	r2, r4, #3
 800b67c:	4614      	mov	r4, r2
 800b67e:	461d      	mov	r5, r3
 800b680:	4643      	mov	r3, r8
 800b682:	18e3      	adds	r3, r4, r3
 800b684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b688:	464b      	mov	r3, r9
 800b68a:	eb45 0303 	adc.w	r3, r5, r3
 800b68e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b69e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b6a2:	f04f 0200 	mov.w	r2, #0
 800b6a6:	f04f 0300 	mov.w	r3, #0
 800b6aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	008b      	lsls	r3, r1, #2
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	008a      	lsls	r2, r1, #2
 800b6bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b6c0:	f7f5 fac2 	bl	8000c48 <__aeabi_uldivmod>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4b60      	ldr	r3, [pc, #384]	@ (800b84c <UART_SetConfig+0x4e4>)
 800b6ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b6ce:	095b      	lsrs	r3, r3, #5
 800b6d0:	011c      	lsls	r4, r3, #4
 800b6d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b6dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b6e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b6e4:	4642      	mov	r2, r8
 800b6e6:	464b      	mov	r3, r9
 800b6e8:	1891      	adds	r1, r2, r2
 800b6ea:	61b9      	str	r1, [r7, #24]
 800b6ec:	415b      	adcs	r3, r3
 800b6ee:	61fb      	str	r3, [r7, #28]
 800b6f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6f4:	4641      	mov	r1, r8
 800b6f6:	1851      	adds	r1, r2, r1
 800b6f8:	6139      	str	r1, [r7, #16]
 800b6fa:	4649      	mov	r1, r9
 800b6fc:	414b      	adcs	r3, r1
 800b6fe:	617b      	str	r3, [r7, #20]
 800b700:	f04f 0200 	mov.w	r2, #0
 800b704:	f04f 0300 	mov.w	r3, #0
 800b708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b70c:	4659      	mov	r1, fp
 800b70e:	00cb      	lsls	r3, r1, #3
 800b710:	4651      	mov	r1, sl
 800b712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b716:	4651      	mov	r1, sl
 800b718:	00ca      	lsls	r2, r1, #3
 800b71a:	4610      	mov	r0, r2
 800b71c:	4619      	mov	r1, r3
 800b71e:	4603      	mov	r3, r0
 800b720:	4642      	mov	r2, r8
 800b722:	189b      	adds	r3, r3, r2
 800b724:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b728:	464b      	mov	r3, r9
 800b72a:	460a      	mov	r2, r1
 800b72c:	eb42 0303 	adc.w	r3, r2, r3
 800b730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b73e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b740:	f04f 0200 	mov.w	r2, #0
 800b744:	f04f 0300 	mov.w	r3, #0
 800b748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b74c:	4649      	mov	r1, r9
 800b74e:	008b      	lsls	r3, r1, #2
 800b750:	4641      	mov	r1, r8
 800b752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b756:	4641      	mov	r1, r8
 800b758:	008a      	lsls	r2, r1, #2
 800b75a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b75e:	f7f5 fa73 	bl	8000c48 <__aeabi_uldivmod>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4611      	mov	r1, r2
 800b768:	4b38      	ldr	r3, [pc, #224]	@ (800b84c <UART_SetConfig+0x4e4>)
 800b76a:	fba3 2301 	umull	r2, r3, r3, r1
 800b76e:	095b      	lsrs	r3, r3, #5
 800b770:	2264      	movs	r2, #100	@ 0x64
 800b772:	fb02 f303 	mul.w	r3, r2, r3
 800b776:	1acb      	subs	r3, r1, r3
 800b778:	011b      	lsls	r3, r3, #4
 800b77a:	3332      	adds	r3, #50	@ 0x32
 800b77c:	4a33      	ldr	r2, [pc, #204]	@ (800b84c <UART_SetConfig+0x4e4>)
 800b77e:	fba2 2303 	umull	r2, r3, r2, r3
 800b782:	095b      	lsrs	r3, r3, #5
 800b784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b788:	441c      	add	r4, r3
 800b78a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b78e:	2200      	movs	r2, #0
 800b790:	673b      	str	r3, [r7, #112]	@ 0x70
 800b792:	677a      	str	r2, [r7, #116]	@ 0x74
 800b794:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b798:	4642      	mov	r2, r8
 800b79a:	464b      	mov	r3, r9
 800b79c:	1891      	adds	r1, r2, r2
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	415b      	adcs	r3, r3
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7a8:	4641      	mov	r1, r8
 800b7aa:	1851      	adds	r1, r2, r1
 800b7ac:	6039      	str	r1, [r7, #0]
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	414b      	adcs	r3, r1
 800b7b2:	607b      	str	r3, [r7, #4]
 800b7b4:	f04f 0200 	mov.w	r2, #0
 800b7b8:	f04f 0300 	mov.w	r3, #0
 800b7bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	00cb      	lsls	r3, r1, #3
 800b7c4:	4651      	mov	r1, sl
 800b7c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7ca:	4651      	mov	r1, sl
 800b7cc:	00ca      	lsls	r2, r1, #3
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	189b      	adds	r3, r3, r2
 800b7d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b7da:	464b      	mov	r3, r9
 800b7dc:	460a      	mov	r2, r1
 800b7de:	eb42 0303 	adc.w	r3, r2, r3
 800b7e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800b7ee:	667a      	str	r2, [r7, #100]	@ 0x64
 800b7f0:	f04f 0200 	mov.w	r2, #0
 800b7f4:	f04f 0300 	mov.w	r3, #0
 800b7f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	008b      	lsls	r3, r1, #2
 800b800:	4641      	mov	r1, r8
 800b802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b806:	4641      	mov	r1, r8
 800b808:	008a      	lsls	r2, r1, #2
 800b80a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b80e:	f7f5 fa1b 	bl	8000c48 <__aeabi_uldivmod>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4b0d      	ldr	r3, [pc, #52]	@ (800b84c <UART_SetConfig+0x4e4>)
 800b818:	fba3 1302 	umull	r1, r3, r3, r2
 800b81c:	095b      	lsrs	r3, r3, #5
 800b81e:	2164      	movs	r1, #100	@ 0x64
 800b820:	fb01 f303 	mul.w	r3, r1, r3
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	3332      	adds	r3, #50	@ 0x32
 800b82a:	4a08      	ldr	r2, [pc, #32]	@ (800b84c <UART_SetConfig+0x4e4>)
 800b82c:	fba2 2303 	umull	r2, r3, r2, r3
 800b830:	095b      	lsrs	r3, r3, #5
 800b832:	f003 020f 	and.w	r2, r3, #15
 800b836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4422      	add	r2, r4
 800b83e:	609a      	str	r2, [r3, #8]
}
 800b840:	bf00      	nop
 800b842:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b846:	46bd      	mov	sp, r7
 800b848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b84c:	51eb851f 	.word	0x51eb851f

0800b850 <__NVIC_SetPriority>:
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	6039      	str	r1, [r7, #0]
 800b85a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b85c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b860:	2b00      	cmp	r3, #0
 800b862:	db0a      	blt.n	800b87a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	b2da      	uxtb	r2, r3
 800b868:	490c      	ldr	r1, [pc, #48]	@ (800b89c <__NVIC_SetPriority+0x4c>)
 800b86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b86e:	0112      	lsls	r2, r2, #4
 800b870:	b2d2      	uxtb	r2, r2
 800b872:	440b      	add	r3, r1
 800b874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b878:	e00a      	b.n	800b890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	4908      	ldr	r1, [pc, #32]	@ (800b8a0 <__NVIC_SetPriority+0x50>)
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	f003 030f 	and.w	r3, r3, #15
 800b886:	3b04      	subs	r3, #4
 800b888:	0112      	lsls	r2, r2, #4
 800b88a:	b2d2      	uxtb	r2, r2
 800b88c:	440b      	add	r3, r1
 800b88e:	761a      	strb	r2, [r3, #24]
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	e000e100 	.word	0xe000e100
 800b8a0:	e000ed00 	.word	0xe000ed00

0800b8a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	f06f 0004 	mvn.w	r0, #4
 800b8ae:	f7ff ffcf 	bl	800b850 <__NVIC_SetPriority>
#endif
}
 800b8b2:	bf00      	nop
 800b8b4:	bd80      	pop	{r7, pc}
	...

0800b8b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8be:	f3ef 8305 	mrs	r3, IPSR
 800b8c2:	603b      	str	r3, [r7, #0]
  return(result);
 800b8c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d003      	beq.n	800b8d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b8ca:	f06f 0305 	mvn.w	r3, #5
 800b8ce:	607b      	str	r3, [r7, #4]
 800b8d0:	e00c      	b.n	800b8ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8fc <osKernelInitialize+0x44>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d105      	bne.n	800b8e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b8da:	4b08      	ldr	r3, [pc, #32]	@ (800b8fc <osKernelInitialize+0x44>)
 800b8dc:	2201      	movs	r2, #1
 800b8de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	607b      	str	r3, [r7, #4]
 800b8e4:	e002      	b.n	800b8ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b8ec:	687b      	ldr	r3, [r7, #4]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	20000cd4 	.word	0x20000cd4

0800b900 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b906:	f3ef 8305 	mrs	r3, IPSR
 800b90a:	603b      	str	r3, [r7, #0]
  return(result);
 800b90c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b912:	f06f 0305 	mvn.w	r3, #5
 800b916:	607b      	str	r3, [r7, #4]
 800b918:	e010      	b.n	800b93c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b91a:	4b0b      	ldr	r3, [pc, #44]	@ (800b948 <osKernelStart+0x48>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d109      	bne.n	800b936 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b922:	f7ff ffbf 	bl	800b8a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b926:	4b08      	ldr	r3, [pc, #32]	@ (800b948 <osKernelStart+0x48>)
 800b928:	2202      	movs	r2, #2
 800b92a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b92c:	f001 f892 	bl	800ca54 <vTaskStartScheduler>
      stat = osOK;
 800b930:	2300      	movs	r3, #0
 800b932:	607b      	str	r3, [r7, #4]
 800b934:	e002      	b.n	800b93c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295
 800b93a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b93c:	687b      	ldr	r3, [r7, #4]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20000cd4 	.word	0x20000cd4

0800b94c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08e      	sub	sp, #56	@ 0x38
 800b950:	af04      	add	r7, sp, #16
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b95c:	f3ef 8305 	mrs	r3, IPSR
 800b960:	617b      	str	r3, [r7, #20]
  return(result);
 800b962:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b964:	2b00      	cmp	r3, #0
 800b966:	d17e      	bne.n	800ba66 <osThreadNew+0x11a>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d07b      	beq.n	800ba66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b96e:	2380      	movs	r3, #128	@ 0x80
 800b970:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b972:	2318      	movs	r3, #24
 800b974:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b976:	2300      	movs	r3, #0
 800b978:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b97a:	f04f 33ff 	mov.w	r3, #4294967295
 800b97e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d045      	beq.n	800ba12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <osThreadNew+0x48>
        name = attr->name;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d008      	beq.n	800b9ba <osThreadNew+0x6e>
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	2b38      	cmp	r3, #56	@ 0x38
 800b9ac:	d805      	bhi.n	800b9ba <osThreadNew+0x6e>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <osThreadNew+0x72>
        return (NULL);
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	e054      	b.n	800ba68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	089b      	lsrs	r3, r3, #2
 800b9cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00e      	beq.n	800b9f4 <osThreadNew+0xa8>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	2ba7      	cmp	r3, #167	@ 0xa7
 800b9dc:	d90a      	bls.n	800b9f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d006      	beq.n	800b9f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d002      	beq.n	800b9f4 <osThreadNew+0xa8>
        mem = 1;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	61bb      	str	r3, [r7, #24]
 800b9f2:	e010      	b.n	800ba16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10c      	bne.n	800ba16 <osThreadNew+0xca>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d108      	bne.n	800ba16 <osThreadNew+0xca>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	691b      	ldr	r3, [r3, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d104      	bne.n	800ba16 <osThreadNew+0xca>
          mem = 0;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	61bb      	str	r3, [r7, #24]
 800ba10:	e001      	b.n	800ba16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d110      	bne.n	800ba3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ba24:	9202      	str	r2, [sp, #8]
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6a3a      	ldr	r2, [r7, #32]
 800ba30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f000 fe1a 	bl	800c66c <xTaskCreateStatic>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	613b      	str	r3, [r7, #16]
 800ba3c:	e013      	b.n	800ba66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d110      	bne.n	800ba66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	f107 0310 	add.w	r3, r7, #16
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 fe68 	bl	800c72c <xTaskCreate>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d001      	beq.n	800ba66 <osThreadNew+0x11a>
            hTask = NULL;
 800ba62:	2300      	movs	r3, #0
 800ba64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ba66:	693b      	ldr	r3, [r7, #16]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3728      	adds	r7, #40	@ 0x28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba78:	f3ef 8305 	mrs	r3, IPSR
 800ba7c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <osDelay+0x1c>
    stat = osErrorISR;
 800ba84:	f06f 0305 	mvn.w	r3, #5
 800ba88:	60fb      	str	r3, [r7, #12]
 800ba8a:	e007      	b.n	800ba9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 ffa6 	bl	800c9e8 <vTaskDelay>
    }
  }

  return (stat);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	4a07      	ldr	r2, [pc, #28]	@ (800bad4 <vApplicationGetIdleTaskMemory+0x2c>)
 800bab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	4a06      	ldr	r2, [pc, #24]	@ (800bad8 <vApplicationGetIdleTaskMemory+0x30>)
 800babe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2280      	movs	r2, #128	@ 0x80
 800bac4:	601a      	str	r2, [r3, #0]
}
 800bac6:	bf00      	nop
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	20000cd8 	.word	0x20000cd8
 800bad8:	20000d80 	.word	0x20000d80

0800badc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	4a07      	ldr	r2, [pc, #28]	@ (800bb08 <vApplicationGetTimerTaskMemory+0x2c>)
 800baec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	4a06      	ldr	r2, [pc, #24]	@ (800bb0c <vApplicationGetTimerTaskMemory+0x30>)
 800baf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bafa:	601a      	str	r2, [r3, #0]
}
 800bafc:	bf00      	nop
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	20000f80 	.word	0x20000f80
 800bb0c:	20001028 	.word	0x20001028

0800bb10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f103 0208 	add.w	r2, r3, #8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f103 0208 	add.w	r2, r3, #8
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f103 0208 	add.w	r2, r3, #8
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b085      	sub	sp, #20
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	689a      	ldr	r2, [r3, #8]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	1c5a      	adds	r2, r3, #1
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	601a      	str	r2, [r3, #0]
}
 800bba6:	bf00      	nop
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b085      	sub	sp, #20
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc8:	d103      	bne.n	800bbd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	60fb      	str	r3, [r7, #12]
 800bbd0:	e00c      	b.n	800bbec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	e002      	b.n	800bbe0 <vListInsert+0x2e>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	60fb      	str	r3, [r7, #12]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d2f6      	bcs.n	800bbda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	1c5a      	adds	r2, r3, #1
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]
}
 800bc18:	bf00      	nop
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	6892      	ldr	r2, [r2, #8]
 800bc3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	6852      	ldr	r2, [r2, #4]
 800bc44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d103      	bne.n	800bc58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	1e5a      	subs	r2, r3, #1
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10b      	bne.n	800bca4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	e7fd      	b.n	800bca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bca4:	f002 fa80 	bl	800e1a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcb0:	68f9      	ldr	r1, [r7, #12]
 800bcb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bcb4:	fb01 f303 	mul.w	r3, r1, r3
 800bcb8:	441a      	add	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	68f9      	ldr	r1, [r7, #12]
 800bcd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bcda:	fb01 f303 	mul.w	r3, r1, r3
 800bcde:	441a      	add	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	22ff      	movs	r2, #255	@ 0xff
 800bce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	22ff      	movs	r2, #255	@ 0xff
 800bcf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d114      	bne.n	800bd24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d01a      	beq.n	800bd38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3310      	adds	r3, #16
 800bd06:	4618      	mov	r0, r3
 800bd08:	f001 fa3c 	bl	800d184 <xTaskRemoveFromEventList>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d012      	beq.n	800bd38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd12:	4b0d      	ldr	r3, [pc, #52]	@ (800bd48 <xQueueGenericReset+0xd0>)
 800bd14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	e009      	b.n	800bd38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3310      	adds	r3, #16
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff fef1 	bl	800bb10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3324      	adds	r3, #36	@ 0x24
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff feec 	bl	800bb10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd38:	f002 fa68 	bl	800e20c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd3c:	2301      	movs	r3, #1
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08e      	sub	sp, #56	@ 0x38
 800bd50:	af02      	add	r7, sp, #8
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10b      	bne.n	800bd78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bd72:	bf00      	nop
 800bd74:	bf00      	nop
 800bd76:	e7fd      	b.n	800bd74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10b      	bne.n	800bd96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	e7fd      	b.n	800bd92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <xQueueGenericCreateStatic+0x56>
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <xQueueGenericCreateStatic+0x5a>
 800bda2:	2301      	movs	r3, #1
 800bda4:	e000      	b.n	800bda8 <xQueueGenericCreateStatic+0x5c>
 800bda6:	2300      	movs	r3, #0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10b      	bne.n	800bdc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	623b      	str	r3, [r7, #32]
}
 800bdbe:	bf00      	nop
 800bdc0:	bf00      	nop
 800bdc2:	e7fd      	b.n	800bdc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d102      	bne.n	800bdd0 <xQueueGenericCreateStatic+0x84>
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <xQueueGenericCreateStatic+0x88>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e000      	b.n	800bdd6 <xQueueGenericCreateStatic+0x8a>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10b      	bne.n	800bdf2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	61fb      	str	r3, [r7, #28]
}
 800bdec:	bf00      	nop
 800bdee:	bf00      	nop
 800bdf0:	e7fd      	b.n	800bdee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bdf2:	2350      	movs	r3, #80	@ 0x50
 800bdf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	2b50      	cmp	r3, #80	@ 0x50
 800bdfa:	d00b      	beq.n	800be14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	61bb      	str	r3, [r7, #24]
}
 800be0e:	bf00      	nop
 800be10:	bf00      	nop
 800be12:	e7fd      	b.n	800be10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800be1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00d      	beq.n	800be3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800be2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	4613      	mov	r3, r2
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	68b9      	ldr	r1, [r7, #8]
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f000 f805 	bl	800be46 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800be3e:	4618      	mov	r0, r3
 800be40:	3730      	adds	r7, #48	@ 0x30
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b084      	sub	sp, #16
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607a      	str	r2, [r7, #4]
 800be52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d103      	bne.n	800be62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	69ba      	ldr	r2, [r7, #24]
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	e002      	b.n	800be68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be74:	2101      	movs	r1, #1
 800be76:	69b8      	ldr	r0, [r7, #24]
 800be78:	f7ff fefe 	bl	800bc78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	78fa      	ldrb	r2, [r7, #3]
 800be80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be84:	bf00      	nop
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08e      	sub	sp, #56	@ 0x38
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
 800be98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be9a:	2300      	movs	r3, #0
 800be9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10b      	bne.n	800bec0 <xQueueGenericSend+0x34>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800beba:	bf00      	nop
 800bebc:	bf00      	nop
 800bebe:	e7fd      	b.n	800bebc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d103      	bne.n	800bece <xQueueGenericSend+0x42>
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <xQueueGenericSend+0x46>
 800bece:	2301      	movs	r3, #1
 800bed0:	e000      	b.n	800bed4 <xQueueGenericSend+0x48>
 800bed2:	2300      	movs	r3, #0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d10b      	bne.n	800bef0 <xQueueGenericSend+0x64>
	__asm volatile
 800bed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bedc:	f383 8811 	msr	BASEPRI, r3
 800bee0:	f3bf 8f6f 	isb	sy
 800bee4:	f3bf 8f4f 	dsb	sy
 800bee8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	e7fd      	b.n	800beec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d103      	bne.n	800befe <xQueueGenericSend+0x72>
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800befa:	2b01      	cmp	r3, #1
 800befc:	d101      	bne.n	800bf02 <xQueueGenericSend+0x76>
 800befe:	2301      	movs	r3, #1
 800bf00:	e000      	b.n	800bf04 <xQueueGenericSend+0x78>
 800bf02:	2300      	movs	r3, #0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10b      	bne.n	800bf20 <xQueueGenericSend+0x94>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	623b      	str	r3, [r7, #32]
}
 800bf1a:	bf00      	nop
 800bf1c:	bf00      	nop
 800bf1e:	e7fd      	b.n	800bf1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf20:	f001 faf6 	bl	800d510 <xTaskGetSchedulerState>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <xQueueGenericSend+0xa4>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <xQueueGenericSend+0xa8>
 800bf30:	2301      	movs	r3, #1
 800bf32:	e000      	b.n	800bf36 <xQueueGenericSend+0xaa>
 800bf34:	2300      	movs	r3, #0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10b      	bne.n	800bf52 <xQueueGenericSend+0xc6>
	__asm volatile
 800bf3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3e:	f383 8811 	msr	BASEPRI, r3
 800bf42:	f3bf 8f6f 	isb	sy
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	61fb      	str	r3, [r7, #28]
}
 800bf4c:	bf00      	nop
 800bf4e:	bf00      	nop
 800bf50:	e7fd      	b.n	800bf4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf52:	f002 f929 	bl	800e1a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d302      	bcc.n	800bf68 <xQueueGenericSend+0xdc>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d129      	bne.n	800bfbc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf6e:	f000 fa0f 	bl	800c390 <prvCopyDataToQueue>
 800bf72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d010      	beq.n	800bf9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7e:	3324      	adds	r3, #36	@ 0x24
 800bf80:	4618      	mov	r0, r3
 800bf82:	f001 f8ff 	bl	800d184 <xTaskRemoveFromEventList>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d013      	beq.n	800bfb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf8c:	4b3f      	ldr	r3, [pc, #252]	@ (800c08c <xQueueGenericSend+0x200>)
 800bf8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	e00a      	b.n	800bfb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d007      	beq.n	800bfb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bfa4:	4b39      	ldr	r3, [pc, #228]	@ (800c08c <xQueueGenericSend+0x200>)
 800bfa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfaa:	601a      	str	r2, [r3, #0]
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bfb4:	f002 f92a 	bl	800e20c <vPortExitCritical>
				return pdPASS;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	e063      	b.n	800c084 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d103      	bne.n	800bfca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfc2:	f002 f923 	bl	800e20c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e05c      	b.n	800c084 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d106      	bne.n	800bfde <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfd0:	f107 0314 	add.w	r3, r7, #20
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f001 f939 	bl	800d24c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfde:	f002 f915 	bl	800e20c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfe2:	f000 fda7 	bl	800cb34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfe6:	f002 f8df 	bl	800e1a8 <vPortEnterCritical>
 800bfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bff0:	b25b      	sxtb	r3, r3
 800bff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff6:	d103      	bne.n	800c000 <xQueueGenericSend+0x174>
 800bff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c006:	b25b      	sxtb	r3, r3
 800c008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00c:	d103      	bne.n	800c016 <xQueueGenericSend+0x18a>
 800c00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c016:	f002 f8f9 	bl	800e20c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c01a:	1d3a      	adds	r2, r7, #4
 800c01c:	f107 0314 	add.w	r3, r7, #20
 800c020:	4611      	mov	r1, r2
 800c022:	4618      	mov	r0, r3
 800c024:	f001 f928 	bl	800d278 <xTaskCheckForTimeOut>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d124      	bne.n	800c078 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c02e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c030:	f000 faa6 	bl	800c580 <prvIsQueueFull>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d018      	beq.n	800c06c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03c:	3310      	adds	r3, #16
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f001 f84c 	bl	800d0e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c048:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c04a:	f000 fa31 	bl	800c4b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c04e:	f000 fd7f 	bl	800cb50 <xTaskResumeAll>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	f47f af7c 	bne.w	800bf52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c05a:	4b0c      	ldr	r3, [pc, #48]	@ (800c08c <xQueueGenericSend+0x200>)
 800c05c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	e772      	b.n	800bf52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c06c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c06e:	f000 fa1f 	bl	800c4b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c072:	f000 fd6d 	bl	800cb50 <xTaskResumeAll>
 800c076:	e76c      	b.n	800bf52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c07a:	f000 fa19 	bl	800c4b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c07e:	f000 fd67 	bl	800cb50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c082:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c084:	4618      	mov	r0, r3
 800c086:	3738      	adds	r7, #56	@ 0x38
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	e000ed04 	.word	0xe000ed04

0800c090 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b090      	sub	sp, #64	@ 0x40
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10b      	bne.n	800c0c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c0ba:	bf00      	nop
 800c0bc:	bf00      	nop
 800c0be:	e7fd      	b.n	800c0bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d103      	bne.n	800c0ce <xQueueGenericSendFromISR+0x3e>
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <xQueueGenericSendFromISR+0x42>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e000      	b.n	800c0d4 <xQueueGenericSendFromISR+0x44>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10b      	bne.n	800c0f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	e7fd      	b.n	800c0ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d103      	bne.n	800c0fe <xQueueGenericSendFromISR+0x6e>
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <xQueueGenericSendFromISR+0x72>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e000      	b.n	800c104 <xQueueGenericSendFromISR+0x74>
 800c102:	2300      	movs	r3, #0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10b      	bne.n	800c120 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	623b      	str	r3, [r7, #32]
}
 800c11a:	bf00      	nop
 800c11c:	bf00      	nop
 800c11e:	e7fd      	b.n	800c11c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c120:	f002 f922 	bl	800e368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c124:	f3ef 8211 	mrs	r2, BASEPRI
 800c128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	61fa      	str	r2, [r7, #28]
 800c13a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c13c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c13e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c148:	429a      	cmp	r2, r3
 800c14a:	d302      	bcc.n	800c152 <xQueueGenericSendFromISR+0xc2>
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d12f      	bne.n	800c1b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c158:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c160:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	68b9      	ldr	r1, [r7, #8]
 800c166:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c168:	f000 f912 	bl	800c390 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c16c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c174:	d112      	bne.n	800c19c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d016      	beq.n	800c1ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c180:	3324      	adds	r3, #36	@ 0x24
 800c182:	4618      	mov	r0, r3
 800c184:	f000 fffe 	bl	800d184 <xTaskRemoveFromEventList>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00e      	beq.n	800c1ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00b      	beq.n	800c1ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	e007      	b.n	800c1ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c19c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	b25a      	sxtb	r2, r3
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c1b0:	e001      	b.n	800c1b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c1c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3740      	adds	r7, #64	@ 0x40
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08c      	sub	sp, #48	@ 0x30
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10b      	bne.n	800c1fe <xQueueReceive+0x32>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	623b      	str	r3, [r7, #32]
}
 800c1f8:	bf00      	nop
 800c1fa:	bf00      	nop
 800c1fc:	e7fd      	b.n	800c1fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d103      	bne.n	800c20c <xQueueReceive+0x40>
 800c204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d101      	bne.n	800c210 <xQueueReceive+0x44>
 800c20c:	2301      	movs	r3, #1
 800c20e:	e000      	b.n	800c212 <xQueueReceive+0x46>
 800c210:	2300      	movs	r3, #0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10b      	bne.n	800c22e <xQueueReceive+0x62>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	61fb      	str	r3, [r7, #28]
}
 800c228:	bf00      	nop
 800c22a:	bf00      	nop
 800c22c:	e7fd      	b.n	800c22a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c22e:	f001 f96f 	bl	800d510 <xTaskGetSchedulerState>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d102      	bne.n	800c23e <xQueueReceive+0x72>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <xQueueReceive+0x76>
 800c23e:	2301      	movs	r3, #1
 800c240:	e000      	b.n	800c244 <xQueueReceive+0x78>
 800c242:	2300      	movs	r3, #0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10b      	bne.n	800c260 <xQueueReceive+0x94>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	61bb      	str	r3, [r7, #24]
}
 800c25a:	bf00      	nop
 800c25c:	bf00      	nop
 800c25e:	e7fd      	b.n	800c25c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c260:	f001 ffa2 	bl	800e1a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c268:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d01f      	beq.n	800c2b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c270:	68b9      	ldr	r1, [r7, #8]
 800c272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c274:	f000 f8f6 	bl	800c464 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27a:	1e5a      	subs	r2, r3, #1
 800c27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00f      	beq.n	800c2a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c28a:	3310      	adds	r3, #16
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 ff79 	bl	800d184 <xTaskRemoveFromEventList>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d007      	beq.n	800c2a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c298:	4b3c      	ldr	r3, [pc, #240]	@ (800c38c <xQueueReceive+0x1c0>)
 800c29a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2a8:	f001 ffb0 	bl	800e20c <vPortExitCritical>
				return pdPASS;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e069      	b.n	800c384 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d103      	bne.n	800c2be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2b6:	f001 ffa9 	bl	800e20c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e062      	b.n	800c384 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d106      	bne.n	800c2d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2c4:	f107 0310 	add.w	r3, r7, #16
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 ffbf 	bl	800d24c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2d2:	f001 ff9b 	bl	800e20c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2d6:	f000 fc2d 	bl	800cb34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2da:	f001 ff65 	bl	800e1a8 <vPortEnterCritical>
 800c2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2e4:	b25b      	sxtb	r3, r3
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ea:	d103      	bne.n	800c2f4 <xQueueReceive+0x128>
 800c2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2fa:	b25b      	sxtb	r3, r3
 800c2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c300:	d103      	bne.n	800c30a <xQueueReceive+0x13e>
 800c302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c304:	2200      	movs	r2, #0
 800c306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c30a:	f001 ff7f 	bl	800e20c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c30e:	1d3a      	adds	r2, r7, #4
 800c310:	f107 0310 	add.w	r3, r7, #16
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f000 ffae 	bl	800d278 <xTaskCheckForTimeOut>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d123      	bne.n	800c36a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c324:	f000 f916 	bl	800c554 <prvIsQueueEmpty>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d017      	beq.n	800c35e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c330:	3324      	adds	r3, #36	@ 0x24
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f000 fed2 	bl	800d0e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c33c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c33e:	f000 f8b7 	bl	800c4b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c342:	f000 fc05 	bl	800cb50 <xTaskResumeAll>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d189      	bne.n	800c260 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c34c:	4b0f      	ldr	r3, [pc, #60]	@ (800c38c <xQueueReceive+0x1c0>)
 800c34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	e780      	b.n	800c260 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c35e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c360:	f000 f8a6 	bl	800c4b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c364:	f000 fbf4 	bl	800cb50 <xTaskResumeAll>
 800c368:	e77a      	b.n	800c260 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c36a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c36c:	f000 f8a0 	bl	800c4b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c370:	f000 fbee 	bl	800cb50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c376:	f000 f8ed 	bl	800c554 <prvIsQueueEmpty>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f43f af6f 	beq.w	800c260 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c382:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c384:	4618      	mov	r0, r3
 800c386:	3730      	adds	r7, #48	@ 0x30
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	e000ed04 	.word	0xe000ed04

0800c390 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c39c:	2300      	movs	r3, #0
 800c39e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10d      	bne.n	800c3ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d14d      	bne.n	800c452 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f001 f8c6 	bl	800d54c <xTaskPriorityDisinherit>
 800c3c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	609a      	str	r2, [r3, #8]
 800c3c8:	e043      	b.n	800c452 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d119      	bne.n	800c404 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6858      	ldr	r0, [r3, #4]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3d8:	461a      	mov	r2, r3
 800c3da:	68b9      	ldr	r1, [r7, #8]
 800c3dc:	f003 f847 	bl	800f46e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3e8:	441a      	add	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d32b      	bcc.n	800c452 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	605a      	str	r2, [r3, #4]
 800c402:	e026      	b.n	800c452 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	68d8      	ldr	r0, [r3, #12]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c40c:	461a      	mov	r2, r3
 800c40e:	68b9      	ldr	r1, [r7, #8]
 800c410:	f003 f82d 	bl	800f46e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	68da      	ldr	r2, [r3, #12]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c41c:	425b      	negs	r3, r3
 800c41e:	441a      	add	r2, r3
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	68da      	ldr	r2, [r3, #12]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d207      	bcs.n	800c440 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	689a      	ldr	r2, [r3, #8]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c438:	425b      	negs	r3, r3
 800c43a:	441a      	add	r2, r3
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b02      	cmp	r3, #2
 800c444:	d105      	bne.n	800c452 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	3b01      	subs	r3, #1
 800c450:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	1c5a      	adds	r2, r3, #1
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c45a:	697b      	ldr	r3, [r7, #20]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c472:	2b00      	cmp	r3, #0
 800c474:	d018      	beq.n	800c4a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	68da      	ldr	r2, [r3, #12]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c47e:	441a      	add	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68da      	ldr	r2, [r3, #12]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d303      	bcc.n	800c498 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	68d9      	ldr	r1, [r3, #12]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	6838      	ldr	r0, [r7, #0]
 800c4a4:	f002 ffe3 	bl	800f46e <memcpy>
	}
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c4b8:	f001 fe76 	bl	800e1a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4c4:	e011      	b.n	800c4ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d012      	beq.n	800c4f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	3324      	adds	r3, #36	@ 0x24
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 fe56 	bl	800d184 <xTaskRemoveFromEventList>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c4de:	f000 ff2f 	bl	800d340 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	dce9      	bgt.n	800c4c6 <prvUnlockQueue+0x16>
 800c4f2:	e000      	b.n	800c4f6 <prvUnlockQueue+0x46>
					break;
 800c4f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	22ff      	movs	r2, #255	@ 0xff
 800c4fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c4fe:	f001 fe85 	bl	800e20c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c502:	f001 fe51 	bl	800e1a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c50c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c50e:	e011      	b.n	800c534 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d012      	beq.n	800c53e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3310      	adds	r3, #16
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 fe31 	bl	800d184 <xTaskRemoveFromEventList>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c528:	f000 ff0a 	bl	800d340 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	3b01      	subs	r3, #1
 800c530:	b2db      	uxtb	r3, r3
 800c532:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dce9      	bgt.n	800c510 <prvUnlockQueue+0x60>
 800c53c:	e000      	b.n	800c540 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c53e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	22ff      	movs	r2, #255	@ 0xff
 800c544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c548:	f001 fe60 	bl	800e20c <vPortExitCritical>
}
 800c54c:	bf00      	nop
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c55c:	f001 fe24 	bl	800e1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c568:	2301      	movs	r3, #1
 800c56a:	60fb      	str	r3, [r7, #12]
 800c56c:	e001      	b.n	800c572 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c56e:	2300      	movs	r3, #0
 800c570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c572:	f001 fe4b 	bl	800e20c <vPortExitCritical>

	return xReturn;
 800c576:	68fb      	ldr	r3, [r7, #12]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c588:	f001 fe0e 	bl	800e1a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c594:	429a      	cmp	r2, r3
 800c596:	d102      	bne.n	800c59e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c598:	2301      	movs	r3, #1
 800c59a:	60fb      	str	r3, [r7, #12]
 800c59c:	e001      	b.n	800c5a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c5a2:	f001 fe33 	bl	800e20c <vPortExitCritical>

	return xReturn;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60fb      	str	r3, [r7, #12]
 800c5be:	e014      	b.n	800c5ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c5c0:	4a0f      	ldr	r2, [pc, #60]	@ (800c600 <vQueueAddToRegistry+0x50>)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10b      	bne.n	800c5e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c5cc:	490c      	ldr	r1, [pc, #48]	@ (800c600 <vQueueAddToRegistry+0x50>)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c5d6:	4a0a      	ldr	r2, [pc, #40]	@ (800c600 <vQueueAddToRegistry+0x50>)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	00db      	lsls	r3, r3, #3
 800c5dc:	4413      	add	r3, r2
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c5e2:	e006      	b.n	800c5f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	60fb      	str	r3, [r7, #12]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b07      	cmp	r3, #7
 800c5ee:	d9e7      	bls.n	800c5c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c5f0:	bf00      	nop
 800c5f2:	bf00      	nop
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	20001428 	.word	0x20001428

0800c604 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c614:	f001 fdc8 	bl	800e1a8 <vPortEnterCritical>
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c61e:	b25b      	sxtb	r3, r3
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c624:	d103      	bne.n	800c62e <vQueueWaitForMessageRestricted+0x2a>
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c634:	b25b      	sxtb	r3, r3
 800c636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63a:	d103      	bne.n	800c644 <vQueueWaitForMessageRestricted+0x40>
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c644:	f001 fde2 	bl	800e20c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d106      	bne.n	800c65e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	3324      	adds	r3, #36	@ 0x24
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	68b9      	ldr	r1, [r7, #8]
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 fd67 	bl	800d12c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c65e:	6978      	ldr	r0, [r7, #20]
 800c660:	f7ff ff26 	bl	800c4b0 <prvUnlockQueue>
	}
 800c664:	bf00      	nop
 800c666:	3718      	adds	r7, #24
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08e      	sub	sp, #56	@ 0x38
 800c670:	af04      	add	r7, sp, #16
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
 800c678:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10b      	bne.n	800c698 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	623b      	str	r3, [r7, #32]
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	e7fd      	b.n	800c694 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10b      	bne.n	800c6b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	61fb      	str	r3, [r7, #28]
}
 800c6b0:	bf00      	nop
 800c6b2:	bf00      	nop
 800c6b4:	e7fd      	b.n	800c6b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c6b6:	23a8      	movs	r3, #168	@ 0xa8
 800c6b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	2ba8      	cmp	r3, #168	@ 0xa8
 800c6be:	d00b      	beq.n	800c6d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	61bb      	str	r3, [r7, #24]
}
 800c6d2:	bf00      	nop
 800c6d4:	bf00      	nop
 800c6d6:	e7fd      	b.n	800c6d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c6d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d01e      	beq.n	800c71e <xTaskCreateStatic+0xb2>
 800c6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d01b      	beq.n	800c71e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	9303      	str	r3, [sp, #12]
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	9302      	str	r3, [sp, #8]
 800c700:	f107 0314 	add.w	r3, r7, #20
 800c704:	9301      	str	r3, [sp, #4]
 800c706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	68b9      	ldr	r1, [r7, #8]
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f000 f851 	bl	800c7b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c716:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c718:	f000 f8f6 	bl	800c908 <prvAddNewTaskToReadyList>
 800c71c:	e001      	b.n	800c722 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c71e:	2300      	movs	r3, #0
 800c720:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c722:	697b      	ldr	r3, [r7, #20]
	}
 800c724:	4618      	mov	r0, r3
 800c726:	3728      	adds	r7, #40	@ 0x28
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08c      	sub	sp, #48	@ 0x30
 800c730:	af04      	add	r7, sp, #16
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	603b      	str	r3, [r7, #0]
 800c738:	4613      	mov	r3, r2
 800c73a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c73c:	88fb      	ldrh	r3, [r7, #6]
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4618      	mov	r0, r3
 800c742:	f001 fe53 	bl	800e3ec <pvPortMalloc>
 800c746:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00e      	beq.n	800c76c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c74e:	20a8      	movs	r0, #168	@ 0xa8
 800c750:	f001 fe4c 	bl	800e3ec <pvPortMalloc>
 800c754:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	631a      	str	r2, [r3, #48]	@ 0x30
 800c762:	e005      	b.n	800c770 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c764:	6978      	ldr	r0, [r7, #20]
 800c766:	f001 ff0f 	bl	800e588 <vPortFree>
 800c76a:	e001      	b.n	800c770 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c76c:	2300      	movs	r3, #0
 800c76e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d017      	beq.n	800c7a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	2200      	movs	r2, #0
 800c77a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c77e:	88fa      	ldrh	r2, [r7, #6]
 800c780:	2300      	movs	r3, #0
 800c782:	9303      	str	r3, [sp, #12]
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	9302      	str	r3, [sp, #8]
 800c788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c78a:	9301      	str	r3, [sp, #4]
 800c78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	68b9      	ldr	r1, [r7, #8]
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f000 f80f 	bl	800c7b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c79a:	69f8      	ldr	r0, [r7, #28]
 800c79c:	f000 f8b4 	bl	800c908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	61bb      	str	r3, [r7, #24]
 800c7a4:	e002      	b.n	800c7ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c7ac:	69bb      	ldr	r3, [r7, #24]
	}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3720      	adds	r7, #32
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b088      	sub	sp, #32
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
 800c7c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	21a5      	movs	r1, #165	@ 0xa5
 800c7d2:	f002 fd77 	bl	800f2c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	f023 0307 	bic.w	r3, r3, #7
 800c7ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	f003 0307 	and.w	r3, r3, #7
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d00b      	beq.n	800c812 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	617b      	str	r3, [r7, #20]
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	e7fd      	b.n	800c80e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d01f      	beq.n	800c858 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c818:	2300      	movs	r3, #0
 800c81a:	61fb      	str	r3, [r7, #28]
 800c81c:	e012      	b.n	800c844 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	4413      	add	r3, r2
 800c824:	7819      	ldrb	r1, [r3, #0]
 800c826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	4413      	add	r3, r2
 800c82c:	3334      	adds	r3, #52	@ 0x34
 800c82e:	460a      	mov	r2, r1
 800c830:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	4413      	add	r3, r2
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d006      	beq.n	800c84c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	3301      	adds	r3, #1
 800c842:	61fb      	str	r3, [r7, #28]
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	2b0f      	cmp	r3, #15
 800c848:	d9e9      	bls.n	800c81e <prvInitialiseNewTask+0x66>
 800c84a:	e000      	b.n	800c84e <prvInitialiseNewTask+0x96>
			{
				break;
 800c84c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c850:	2200      	movs	r2, #0
 800c852:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c856:	e003      	b.n	800c860 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c862:	2b37      	cmp	r3, #55	@ 0x37
 800c864:	d901      	bls.n	800c86a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c866:	2337      	movs	r3, #55	@ 0x37
 800c868:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c86c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c86e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c874:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c878:	2200      	movs	r2, #0
 800c87a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c87e:	3304      	adds	r3, #4
 800c880:	4618      	mov	r0, r3
 800c882:	f7ff f965 	bl	800bb50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c888:	3318      	adds	r3, #24
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7ff f960 	bl	800bb50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c894:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c898:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	3354      	adds	r3, #84	@ 0x54
 800c8ba:	224c      	movs	r2, #76	@ 0x4c
 800c8bc:	2100      	movs	r1, #0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f002 fd00 	bl	800f2c4 <memset>
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c6:	4a0d      	ldr	r2, [pc, #52]	@ (800c8fc <prvInitialiseNewTask+0x144>)
 800c8c8:	659a      	str	r2, [r3, #88]	@ 0x58
 800c8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c900 <prvInitialiseNewTask+0x148>)
 800c8ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d2:	4a0c      	ldr	r2, [pc, #48]	@ (800c904 <prvInitialiseNewTask+0x14c>)
 800c8d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	68f9      	ldr	r1, [r7, #12]
 800c8da:	69b8      	ldr	r0, [r7, #24]
 800c8dc:	f001 fb36 	bl	800df4c <pxPortInitialiseStack>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d002      	beq.n	800c8f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8f2:	bf00      	nop
 800c8f4:	3720      	adds	r7, #32
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	200056bc 	.word	0x200056bc
 800c900:	20005724 	.word	0x20005724
 800c904:	2000578c 	.word	0x2000578c

0800c908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c910:	f001 fc4a 	bl	800e1a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c914:	4b2d      	ldr	r3, [pc, #180]	@ (800c9cc <prvAddNewTaskToReadyList+0xc4>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	3301      	adds	r3, #1
 800c91a:	4a2c      	ldr	r2, [pc, #176]	@ (800c9cc <prvAddNewTaskToReadyList+0xc4>)
 800c91c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c91e:	4b2c      	ldr	r3, [pc, #176]	@ (800c9d0 <prvAddNewTaskToReadyList+0xc8>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d109      	bne.n	800c93a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c926:	4a2a      	ldr	r2, [pc, #168]	@ (800c9d0 <prvAddNewTaskToReadyList+0xc8>)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c92c:	4b27      	ldr	r3, [pc, #156]	@ (800c9cc <prvAddNewTaskToReadyList+0xc4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d110      	bne.n	800c956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c934:	f000 fd28 	bl	800d388 <prvInitialiseTaskLists>
 800c938:	e00d      	b.n	800c956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c93a:	4b26      	ldr	r3, [pc, #152]	@ (800c9d4 <prvAddNewTaskToReadyList+0xcc>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d109      	bne.n	800c956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c942:	4b23      	ldr	r3, [pc, #140]	@ (800c9d0 <prvAddNewTaskToReadyList+0xc8>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d802      	bhi.n	800c956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c950:	4a1f      	ldr	r2, [pc, #124]	@ (800c9d0 <prvAddNewTaskToReadyList+0xc8>)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c956:	4b20      	ldr	r3, [pc, #128]	@ (800c9d8 <prvAddNewTaskToReadyList+0xd0>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3301      	adds	r3, #1
 800c95c:	4a1e      	ldr	r2, [pc, #120]	@ (800c9d8 <prvAddNewTaskToReadyList+0xd0>)
 800c95e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c960:	4b1d      	ldr	r3, [pc, #116]	@ (800c9d8 <prvAddNewTaskToReadyList+0xd0>)
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c96c:	4b1b      	ldr	r3, [pc, #108]	@ (800c9dc <prvAddNewTaskToReadyList+0xd4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	429a      	cmp	r2, r3
 800c972:	d903      	bls.n	800c97c <prvAddNewTaskToReadyList+0x74>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c978:	4a18      	ldr	r2, [pc, #96]	@ (800c9dc <prvAddNewTaskToReadyList+0xd4>)
 800c97a:	6013      	str	r3, [r2, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c980:	4613      	mov	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	4413      	add	r3, r2
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	4a15      	ldr	r2, [pc, #84]	@ (800c9e0 <prvAddNewTaskToReadyList+0xd8>)
 800c98a:	441a      	add	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3304      	adds	r3, #4
 800c990:	4619      	mov	r1, r3
 800c992:	4610      	mov	r0, r2
 800c994:	f7ff f8e9 	bl	800bb6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c998:	f001 fc38 	bl	800e20c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c99c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9d4 <prvAddNewTaskToReadyList+0xcc>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00e      	beq.n	800c9c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c9d0 <prvAddNewTaskToReadyList+0xc8>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d207      	bcs.n	800c9c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c9b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9e4 <prvAddNewTaskToReadyList+0xdc>)
 800c9b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	2000193c 	.word	0x2000193c
 800c9d0:	20001468 	.word	0x20001468
 800c9d4:	20001948 	.word	0x20001948
 800c9d8:	20001958 	.word	0x20001958
 800c9dc:	20001944 	.word	0x20001944
 800c9e0:	2000146c 	.word	0x2000146c
 800c9e4:	e000ed04 	.word	0xe000ed04

0800c9e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d018      	beq.n	800ca2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c9fa:	4b14      	ldr	r3, [pc, #80]	@ (800ca4c <vTaskDelay+0x64>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <vTaskDelay+0x32>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	60bb      	str	r3, [r7, #8]
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop
 800ca18:	e7fd      	b.n	800ca16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ca1a:	f000 f88b 	bl	800cb34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ca1e:	2100      	movs	r1, #0
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fee5 	bl	800d7f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca26:	f000 f893 	bl	800cb50 <xTaskResumeAll>
 800ca2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d107      	bne.n	800ca42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ca32:	4b07      	ldr	r3, [pc, #28]	@ (800ca50 <vTaskDelay+0x68>)
 800ca34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca42:	bf00      	nop
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	20001964 	.word	0x20001964
 800ca50:	e000ed04 	.word	0xe000ed04

0800ca54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	@ 0x28
 800ca58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca62:	463a      	mov	r2, r7
 800ca64:	1d39      	adds	r1, r7, #4
 800ca66:	f107 0308 	add.w	r3, r7, #8
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff f81c 	bl	800baa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	9202      	str	r2, [sp, #8]
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	2300      	movs	r3, #0
 800ca80:	460a      	mov	r2, r1
 800ca82:	4924      	ldr	r1, [pc, #144]	@ (800cb14 <vTaskStartScheduler+0xc0>)
 800ca84:	4824      	ldr	r0, [pc, #144]	@ (800cb18 <vTaskStartScheduler+0xc4>)
 800ca86:	f7ff fdf1 	bl	800c66c <xTaskCreateStatic>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	4a23      	ldr	r2, [pc, #140]	@ (800cb1c <vTaskStartScheduler+0xc8>)
 800ca8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca90:	4b22      	ldr	r3, [pc, #136]	@ (800cb1c <vTaskStartScheduler+0xc8>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	617b      	str	r3, [r7, #20]
 800ca9c:	e001      	b.n	800caa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d102      	bne.n	800caae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800caa8:	f000 fef6 	bl	800d898 <xTimerCreateTimerTask>
 800caac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d11b      	bne.n	800caec <vTaskStartScheduler+0x98>
	__asm volatile
 800cab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	613b      	str	r3, [r7, #16]
}
 800cac6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cac8:	4b15      	ldr	r3, [pc, #84]	@ (800cb20 <vTaskStartScheduler+0xcc>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	3354      	adds	r3, #84	@ 0x54
 800cace:	4a15      	ldr	r2, [pc, #84]	@ (800cb24 <vTaskStartScheduler+0xd0>)
 800cad0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cad2:	4b15      	ldr	r3, [pc, #84]	@ (800cb28 <vTaskStartScheduler+0xd4>)
 800cad4:	f04f 32ff 	mov.w	r2, #4294967295
 800cad8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cada:	4b14      	ldr	r3, [pc, #80]	@ (800cb2c <vTaskStartScheduler+0xd8>)
 800cadc:	2201      	movs	r2, #1
 800cade:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cae0:	4b13      	ldr	r3, [pc, #76]	@ (800cb30 <vTaskStartScheduler+0xdc>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cae6:	f001 fabb 	bl	800e060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800caea:	e00f      	b.n	800cb0c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf2:	d10b      	bne.n	800cb0c <vTaskStartScheduler+0xb8>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	60fb      	str	r3, [r7, #12]
}
 800cb06:	bf00      	nop
 800cb08:	bf00      	nop
 800cb0a:	e7fd      	b.n	800cb08 <vTaskStartScheduler+0xb4>
}
 800cb0c:	bf00      	nop
 800cb0e:	3718      	adds	r7, #24
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	080126a0 	.word	0x080126a0
 800cb18:	0800d359 	.word	0x0800d359
 800cb1c:	20001960 	.word	0x20001960
 800cb20:	20001468 	.word	0x20001468
 800cb24:	2000007c 	.word	0x2000007c
 800cb28:	2000195c 	.word	0x2000195c
 800cb2c:	20001948 	.word	0x20001948
 800cb30:	20001940 	.word	0x20001940

0800cb34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb34:	b480      	push	{r7}
 800cb36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cb38:	4b04      	ldr	r3, [pc, #16]	@ (800cb4c <vTaskSuspendAll+0x18>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	4a03      	ldr	r2, [pc, #12]	@ (800cb4c <vTaskSuspendAll+0x18>)
 800cb40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cb42:	bf00      	nop
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr
 800cb4c:	20001964 	.word	0x20001964

0800cb50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb56:	2300      	movs	r3, #0
 800cb58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb5e:	4b42      	ldr	r3, [pc, #264]	@ (800cc68 <xTaskResumeAll+0x118>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10b      	bne.n	800cb7e <xTaskResumeAll+0x2e>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	603b      	str	r3, [r7, #0]
}
 800cb78:	bf00      	nop
 800cb7a:	bf00      	nop
 800cb7c:	e7fd      	b.n	800cb7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb7e:	f001 fb13 	bl	800e1a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb82:	4b39      	ldr	r3, [pc, #228]	@ (800cc68 <xTaskResumeAll+0x118>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	4a37      	ldr	r2, [pc, #220]	@ (800cc68 <xTaskResumeAll+0x118>)
 800cb8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb8c:	4b36      	ldr	r3, [pc, #216]	@ (800cc68 <xTaskResumeAll+0x118>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d162      	bne.n	800cc5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb94:	4b35      	ldr	r3, [pc, #212]	@ (800cc6c <xTaskResumeAll+0x11c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d05e      	beq.n	800cc5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb9c:	e02f      	b.n	800cbfe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb9e:	4b34      	ldr	r3, [pc, #208]	@ (800cc70 <xTaskResumeAll+0x120>)
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	3318      	adds	r3, #24
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff f83a 	bl	800bc24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff f835 	bl	800bc24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbbe:	4b2d      	ldr	r3, [pc, #180]	@ (800cc74 <xTaskResumeAll+0x124>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d903      	bls.n	800cbce <xTaskResumeAll+0x7e>
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbca:	4a2a      	ldr	r2, [pc, #168]	@ (800cc74 <xTaskResumeAll+0x124>)
 800cbcc:	6013      	str	r3, [r2, #0]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4413      	add	r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4a27      	ldr	r2, [pc, #156]	@ (800cc78 <xTaskResumeAll+0x128>)
 800cbdc:	441a      	add	r2, r3
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	f7fe ffc0 	bl	800bb6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbee:	4b23      	ldr	r3, [pc, #140]	@ (800cc7c <xTaskResumeAll+0x12c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d302      	bcc.n	800cbfe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cbf8:	4b21      	ldr	r3, [pc, #132]	@ (800cc80 <xTaskResumeAll+0x130>)
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbfe:	4b1c      	ldr	r3, [pc, #112]	@ (800cc70 <xTaskResumeAll+0x120>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1cb      	bne.n	800cb9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d001      	beq.n	800cc10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc0c:	f000 fc60 	bl	800d4d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cc10:	4b1c      	ldr	r3, [pc, #112]	@ (800cc84 <xTaskResumeAll+0x134>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d010      	beq.n	800cc3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc1c:	f000 f940 	bl	800cea0 <xTaskIncrementTick>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cc26:	4b16      	ldr	r3, [pc, #88]	@ (800cc80 <xTaskResumeAll+0x130>)
 800cc28:	2201      	movs	r2, #1
 800cc2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1f1      	bne.n	800cc1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cc38:	4b12      	ldr	r3, [pc, #72]	@ (800cc84 <xTaskResumeAll+0x134>)
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc3e:	4b10      	ldr	r3, [pc, #64]	@ (800cc80 <xTaskResumeAll+0x130>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d009      	beq.n	800cc5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc46:	2301      	movs	r3, #1
 800cc48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc88 <xTaskResumeAll+0x138>)
 800cc4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc5a:	f001 fad7 	bl	800e20c <vPortExitCritical>

	return xAlreadyYielded;
 800cc5e:	68bb      	ldr	r3, [r7, #8]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	20001964 	.word	0x20001964
 800cc6c:	2000193c 	.word	0x2000193c
 800cc70:	200018fc 	.word	0x200018fc
 800cc74:	20001944 	.word	0x20001944
 800cc78:	2000146c 	.word	0x2000146c
 800cc7c:	20001468 	.word	0x20001468
 800cc80:	20001950 	.word	0x20001950
 800cc84:	2000194c 	.word	0x2000194c
 800cc88:	e000ed04 	.word	0xe000ed04

0800cc8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc92:	4b05      	ldr	r3, [pc, #20]	@ (800cca8 <xTaskGetTickCount+0x1c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc98:	687b      	ldr	r3, [r7, #4]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	370c      	adds	r7, #12
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	20001940 	.word	0x20001940

0800ccac <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d102      	bne.n	800ccc0 <pcTaskGetName+0x14>
 800ccba:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf4 <pcTaskGetName+0x48>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	e000      	b.n	800ccc2 <pcTaskGetName+0x16>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10b      	bne.n	800cce2 <pcTaskGetName+0x36>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	60bb      	str	r3, [r7, #8]
}
 800ccdc:	bf00      	nop
 800ccde:	bf00      	nop
 800cce0:	e7fd      	b.n	800ccde <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3334      	adds	r3, #52	@ 0x34
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3714      	adds	r7, #20
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	20001468 	.word	0x20001468

0800ccf8 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b08b      	sub	sp, #44	@ 0x2c
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800cd02:	2300      	movs	r3, #0
 800cd04:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d05b      	beq.n	800cdc6 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	61bb      	str	r3, [r7, #24]
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	605a      	str	r2, [r3, #4]
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	3308      	adds	r3, #8
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d104      	bne.n	800cd32 <prvSearchForNameWithinSingleList+0x3a>
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	605a      	str	r2, [r3, #4]
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	613b      	str	r3, [r7, #16]
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	685a      	ldr	r2, [r3, #4]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	605a      	str	r2, [r3, #4]
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	3308      	adds	r3, #8
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d104      	bne.n	800cd5e <prvSearchForNameWithinSingleList+0x66>
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	685a      	ldr	r2, [r3, #4]
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	605a      	str	r2, [r3, #4]
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800cd66:	2300      	movs	r3, #0
 800cd68:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	623b      	str	r3, [r7, #32]
 800cd6e:	e01c      	b.n	800cdaa <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	6a3b      	ldr	r3, [r7, #32]
 800cd74:	4413      	add	r3, r2
 800cd76:	3334      	adds	r3, #52	@ 0x34
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	4413      	add	r3, r2
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	7afa      	ldrb	r2, [r7, #11]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d002      	beq.n	800cd90 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	61fb      	str	r3, [r7, #28]
 800cd8e:	e006      	b.n	800cd9e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800cd90:	7afb      	ldrb	r3, [r7, #11]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d103      	bne.n	800cd9e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d106      	bne.n	800cdb2 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	3301      	adds	r3, #1
 800cda8:	623b      	str	r3, [r7, #32]
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	2b0f      	cmp	r3, #15
 800cdae:	d9df      	bls.n	800cd70 <prvSearchForNameWithinSingleList+0x78>
 800cdb0:	e000      	b.n	800cdb4 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800cdb2:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d104      	bne.n	800cdc4 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d1bb      	bne.n	800cd3a <prvSearchForNameWithinSingleList+0x42>
 800cdc2:	e000      	b.n	800cdc6 <prvSearchForNameWithinSingleList+0xce>
					break;
 800cdc4:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	372c      	adds	r7, #44	@ 0x2c
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800cddc:	2338      	movs	r3, #56	@ 0x38
 800cdde:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7f3 fa45 	bl	8000270 <strlen>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b0f      	cmp	r3, #15
 800cdea:	d90b      	bls.n	800ce04 <xTaskGetHandle+0x30>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	60fb      	str	r3, [r7, #12]
}
 800cdfe:	bf00      	nop
 800ce00:	bf00      	nop
 800ce02:	e7fd      	b.n	800ce00 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800ce04:	f7ff fe96 	bl	800cb34 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800ce0e:	697a      	ldr	r2, [r7, #20]
 800ce10:	4613      	mov	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4a1c      	ldr	r2, [pc, #112]	@ (800ce8c <xTaskGetHandle+0xb8>)
 800ce1a:	4413      	add	r3, r2
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7ff ff6a 	bl	800ccf8 <prvSearchForNameWithinSingleList>
 800ce24:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d103      	bne.n	800ce34 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1ea      	bne.n	800ce08 <xTaskGetHandle+0x34>
 800ce32:	e000      	b.n	800ce36 <xTaskGetHandle+0x62>
					break;
 800ce34:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d106      	bne.n	800ce4a <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800ce3c:	4b14      	ldr	r3, [pc, #80]	@ (800ce90 <xTaskGetHandle+0xbc>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff ff58 	bl	800ccf8 <prvSearchForNameWithinSingleList>
 800ce48:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d106      	bne.n	800ce5e <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800ce50:	4b10      	ldr	r3, [pc, #64]	@ (800ce94 <xTaskGetHandle+0xc0>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	6879      	ldr	r1, [r7, #4]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff ff4e 	bl	800ccf8 <prvSearchForNameWithinSingleList>
 800ce5c:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d104      	bne.n	800ce6e <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800ce64:	6879      	ldr	r1, [r7, #4]
 800ce66:	480c      	ldr	r0, [pc, #48]	@ (800ce98 <xTaskGetHandle+0xc4>)
 800ce68:	f7ff ff46 	bl	800ccf8 <prvSearchForNameWithinSingleList>
 800ce6c:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d104      	bne.n	800ce7e <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4809      	ldr	r0, [pc, #36]	@ (800ce9c <xTaskGetHandle+0xc8>)
 800ce78:	f7ff ff3e 	bl	800ccf8 <prvSearchForNameWithinSingleList>
 800ce7c:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800ce7e:	f7ff fe67 	bl	800cb50 <xTaskResumeAll>

		return pxTCB;
 800ce82:	693b      	ldr	r3, [r7, #16]
	}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	2000146c 	.word	0x2000146c
 800ce90:	200018f4 	.word	0x200018f4
 800ce94:	200018f8 	.word	0x200018f8
 800ce98:	20001928 	.word	0x20001928
 800ce9c:	20001910 	.word	0x20001910

0800cea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cea6:	2300      	movs	r3, #0
 800cea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceaa:	4b4f      	ldr	r3, [pc, #316]	@ (800cfe8 <xTaskIncrementTick+0x148>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f040 8090 	bne.w	800cfd4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ceb4:	4b4d      	ldr	r3, [pc, #308]	@ (800cfec <xTaskIncrementTick+0x14c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cebc:	4a4b      	ldr	r2, [pc, #300]	@ (800cfec <xTaskIncrementTick+0x14c>)
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d121      	bne.n	800cf0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cec8:	4b49      	ldr	r3, [pc, #292]	@ (800cff0 <xTaskIncrementTick+0x150>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00b      	beq.n	800ceea <xTaskIncrementTick+0x4a>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced6:	f383 8811 	msr	BASEPRI, r3
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	f3bf 8f4f 	dsb	sy
 800cee2:	603b      	str	r3, [r7, #0]
}
 800cee4:	bf00      	nop
 800cee6:	bf00      	nop
 800cee8:	e7fd      	b.n	800cee6 <xTaskIncrementTick+0x46>
 800ceea:	4b41      	ldr	r3, [pc, #260]	@ (800cff0 <xTaskIncrementTick+0x150>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	60fb      	str	r3, [r7, #12]
 800cef0:	4b40      	ldr	r3, [pc, #256]	@ (800cff4 <xTaskIncrementTick+0x154>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a3e      	ldr	r2, [pc, #248]	@ (800cff0 <xTaskIncrementTick+0x150>)
 800cef6:	6013      	str	r3, [r2, #0]
 800cef8:	4a3e      	ldr	r2, [pc, #248]	@ (800cff4 <xTaskIncrementTick+0x154>)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	4b3e      	ldr	r3, [pc, #248]	@ (800cff8 <xTaskIncrementTick+0x158>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3301      	adds	r3, #1
 800cf04:	4a3c      	ldr	r2, [pc, #240]	@ (800cff8 <xTaskIncrementTick+0x158>)
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	f000 fae2 	bl	800d4d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf0c:	4b3b      	ldr	r3, [pc, #236]	@ (800cffc <xTaskIncrementTick+0x15c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d349      	bcc.n	800cfaa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf16:	4b36      	ldr	r3, [pc, #216]	@ (800cff0 <xTaskIncrementTick+0x150>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d104      	bne.n	800cf2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf20:	4b36      	ldr	r3, [pc, #216]	@ (800cffc <xTaskIncrementTick+0x15c>)
 800cf22:	f04f 32ff 	mov.w	r2, #4294967295
 800cf26:	601a      	str	r2, [r3, #0]
					break;
 800cf28:	e03f      	b.n	800cfaa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf2a:	4b31      	ldr	r3, [pc, #196]	@ (800cff0 <xTaskIncrementTick+0x150>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf3a:	693a      	ldr	r2, [r7, #16]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d203      	bcs.n	800cf4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf42:	4a2e      	ldr	r2, [pc, #184]	@ (800cffc <xTaskIncrementTick+0x15c>)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf48:	e02f      	b.n	800cfaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fe fe68 	bl	800bc24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	3318      	adds	r3, #24
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fe fe5f 	bl	800bc24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf6a:	4b25      	ldr	r3, [pc, #148]	@ (800d000 <xTaskIncrementTick+0x160>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d903      	bls.n	800cf7a <xTaskIncrementTick+0xda>
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf76:	4a22      	ldr	r2, [pc, #136]	@ (800d000 <xTaskIncrementTick+0x160>)
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf7e:	4613      	mov	r3, r2
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	4a1f      	ldr	r2, [pc, #124]	@ (800d004 <xTaskIncrementTick+0x164>)
 800cf88:	441a      	add	r2, r3
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4610      	mov	r0, r2
 800cf92:	f7fe fdea 	bl	800bb6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf9a:	4b1b      	ldr	r3, [pc, #108]	@ (800d008 <xTaskIncrementTick+0x168>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d3b8      	bcc.n	800cf16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfa8:	e7b5      	b.n	800cf16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfaa:	4b17      	ldr	r3, [pc, #92]	@ (800d008 <xTaskIncrementTick+0x168>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfb0:	4914      	ldr	r1, [pc, #80]	@ (800d004 <xTaskIncrementTick+0x164>)
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	440b      	add	r3, r1
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d901      	bls.n	800cfc6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cfc6:	4b11      	ldr	r3, [pc, #68]	@ (800d00c <xTaskIncrementTick+0x16c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d007      	beq.n	800cfde <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	617b      	str	r3, [r7, #20]
 800cfd2:	e004      	b.n	800cfde <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfd4:	4b0e      	ldr	r3, [pc, #56]	@ (800d010 <xTaskIncrementTick+0x170>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	4a0d      	ldr	r2, [pc, #52]	@ (800d010 <xTaskIncrementTick+0x170>)
 800cfdc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfde:	697b      	ldr	r3, [r7, #20]
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3718      	adds	r7, #24
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	20001964 	.word	0x20001964
 800cfec:	20001940 	.word	0x20001940
 800cff0:	200018f4 	.word	0x200018f4
 800cff4:	200018f8 	.word	0x200018f8
 800cff8:	20001954 	.word	0x20001954
 800cffc:	2000195c 	.word	0x2000195c
 800d000:	20001944 	.word	0x20001944
 800d004:	2000146c 	.word	0x2000146c
 800d008:	20001468 	.word	0x20001468
 800d00c:	20001950 	.word	0x20001950
 800d010:	2000194c 	.word	0x2000194c

0800d014 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d01a:	4b2b      	ldr	r3, [pc, #172]	@ (800d0c8 <vTaskSwitchContext+0xb4>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d003      	beq.n	800d02a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d022:	4b2a      	ldr	r3, [pc, #168]	@ (800d0cc <vTaskSwitchContext+0xb8>)
 800d024:	2201      	movs	r2, #1
 800d026:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d028:	e047      	b.n	800d0ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d02a:	4b28      	ldr	r3, [pc, #160]	@ (800d0cc <vTaskSwitchContext+0xb8>)
 800d02c:	2200      	movs	r2, #0
 800d02e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d030:	4b27      	ldr	r3, [pc, #156]	@ (800d0d0 <vTaskSwitchContext+0xbc>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	60fb      	str	r3, [r7, #12]
 800d036:	e011      	b.n	800d05c <vTaskSwitchContext+0x48>
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10b      	bne.n	800d056 <vTaskSwitchContext+0x42>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	607b      	str	r3, [r7, #4]
}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	e7fd      	b.n	800d052 <vTaskSwitchContext+0x3e>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	3b01      	subs	r3, #1
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	491d      	ldr	r1, [pc, #116]	@ (800d0d4 <vTaskSwitchContext+0xc0>)
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	4613      	mov	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	440b      	add	r3, r1
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0e3      	beq.n	800d038 <vTaskSwitchContext+0x24>
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4a16      	ldr	r2, [pc, #88]	@ (800d0d4 <vTaskSwitchContext+0xc0>)
 800d07c:	4413      	add	r3, r2
 800d07e:	60bb      	str	r3, [r7, #8]
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	605a      	str	r2, [r3, #4]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	3308      	adds	r3, #8
 800d092:	429a      	cmp	r2, r3
 800d094:	d104      	bne.n	800d0a0 <vTaskSwitchContext+0x8c>
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	605a      	str	r2, [r3, #4]
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d0d8 <vTaskSwitchContext+0xc4>)
 800d0a8:	6013      	str	r3, [r2, #0]
 800d0aa:	4a09      	ldr	r2, [pc, #36]	@ (800d0d0 <vTaskSwitchContext+0xbc>)
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d0b0:	4b09      	ldr	r3, [pc, #36]	@ (800d0d8 <vTaskSwitchContext+0xc4>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	3354      	adds	r3, #84	@ 0x54
 800d0b6:	4a09      	ldr	r2, [pc, #36]	@ (800d0dc <vTaskSwitchContext+0xc8>)
 800d0b8:	6013      	str	r3, [r2, #0]
}
 800d0ba:	bf00      	nop
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	20001964 	.word	0x20001964
 800d0cc:	20001950 	.word	0x20001950
 800d0d0:	20001944 	.word	0x20001944
 800d0d4:	2000146c 	.word	0x2000146c
 800d0d8:	20001468 	.word	0x20001468
 800d0dc:	2000007c 	.word	0x2000007c

0800d0e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10b      	bne.n	800d108 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	60fb      	str	r3, [r7, #12]
}
 800d102:	bf00      	nop
 800d104:	bf00      	nop
 800d106:	e7fd      	b.n	800d104 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d108:	4b07      	ldr	r3, [pc, #28]	@ (800d128 <vTaskPlaceOnEventList+0x48>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3318      	adds	r3, #24
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7fe fd4e 	bl	800bbb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d116:	2101      	movs	r1, #1
 800d118:	6838      	ldr	r0, [r7, #0]
 800d11a:	f000 fb69 	bl	800d7f0 <prvAddCurrentTaskToDelayedList>
}
 800d11e:	bf00      	nop
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20001468 	.word	0x20001468

0800d12c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10b      	bne.n	800d156 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	617b      	str	r3, [r7, #20]
}
 800d150:	bf00      	nop
 800d152:	bf00      	nop
 800d154:	e7fd      	b.n	800d152 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d156:	4b0a      	ldr	r3, [pc, #40]	@ (800d180 <vTaskPlaceOnEventListRestricted+0x54>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	3318      	adds	r3, #24
 800d15c:	4619      	mov	r1, r3
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f7fe fd03 	bl	800bb6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d002      	beq.n	800d170 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d16a:	f04f 33ff 	mov.w	r3, #4294967295
 800d16e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d170:	6879      	ldr	r1, [r7, #4]
 800d172:	68b8      	ldr	r0, [r7, #8]
 800d174:	f000 fb3c 	bl	800d7f0 <prvAddCurrentTaskToDelayedList>
	}
 800d178:	bf00      	nop
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	20001468 	.word	0x20001468

0800d184 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10b      	bne.n	800d1b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	60fb      	str	r3, [r7, #12]
}
 800d1ac:	bf00      	nop
 800d1ae:	bf00      	nop
 800d1b0:	e7fd      	b.n	800d1ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	3318      	adds	r3, #24
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe fd34 	bl	800bc24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1bc:	4b1d      	ldr	r3, [pc, #116]	@ (800d234 <xTaskRemoveFromEventList+0xb0>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d11d      	bne.n	800d200 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fe fd2b 	bl	800bc24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1d2:	4b19      	ldr	r3, [pc, #100]	@ (800d238 <xTaskRemoveFromEventList+0xb4>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d903      	bls.n	800d1e2 <xTaskRemoveFromEventList+0x5e>
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1de:	4a16      	ldr	r2, [pc, #88]	@ (800d238 <xTaskRemoveFromEventList+0xb4>)
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	4413      	add	r3, r2
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	4a13      	ldr	r2, [pc, #76]	@ (800d23c <xTaskRemoveFromEventList+0xb8>)
 800d1f0:	441a      	add	r2, r3
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	f7fe fcb6 	bl	800bb6a <vListInsertEnd>
 800d1fe:	e005      	b.n	800d20c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	3318      	adds	r3, #24
 800d204:	4619      	mov	r1, r3
 800d206:	480e      	ldr	r0, [pc, #56]	@ (800d240 <xTaskRemoveFromEventList+0xbc>)
 800d208:	f7fe fcaf 	bl	800bb6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d210:	4b0c      	ldr	r3, [pc, #48]	@ (800d244 <xTaskRemoveFromEventList+0xc0>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d216:	429a      	cmp	r2, r3
 800d218:	d905      	bls.n	800d226 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d21a:	2301      	movs	r3, #1
 800d21c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d21e:	4b0a      	ldr	r3, [pc, #40]	@ (800d248 <xTaskRemoveFromEventList+0xc4>)
 800d220:	2201      	movs	r2, #1
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	e001      	b.n	800d22a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d226:	2300      	movs	r3, #0
 800d228:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d22a:	697b      	ldr	r3, [r7, #20]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3718      	adds	r7, #24
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	20001964 	.word	0x20001964
 800d238:	20001944 	.word	0x20001944
 800d23c:	2000146c 	.word	0x2000146c
 800d240:	200018fc 	.word	0x200018fc
 800d244:	20001468 	.word	0x20001468
 800d248:	20001950 	.word	0x20001950

0800d24c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d254:	4b06      	ldr	r3, [pc, #24]	@ (800d270 <vTaskInternalSetTimeOutState+0x24>)
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d25c:	4b05      	ldr	r3, [pc, #20]	@ (800d274 <vTaskInternalSetTimeOutState+0x28>)
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	605a      	str	r2, [r3, #4]
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr
 800d270:	20001954 	.word	0x20001954
 800d274:	20001940 	.word	0x20001940

0800d278 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d10b      	bne.n	800d2a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	613b      	str	r3, [r7, #16]
}
 800d29a:	bf00      	nop
 800d29c:	bf00      	nop
 800d29e:	e7fd      	b.n	800d29c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10b      	bne.n	800d2be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2aa:	f383 8811 	msr	BASEPRI, r3
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	60fb      	str	r3, [r7, #12]
}
 800d2b8:	bf00      	nop
 800d2ba:	bf00      	nop
 800d2bc:	e7fd      	b.n	800d2ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d2be:	f000 ff73 	bl	800e1a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d2c2:	4b1d      	ldr	r3, [pc, #116]	@ (800d338 <xTaskCheckForTimeOut+0xc0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	69ba      	ldr	r2, [r7, #24]
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2da:	d102      	bne.n	800d2e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	61fb      	str	r3, [r7, #28]
 800d2e0:	e023      	b.n	800d32a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	4b15      	ldr	r3, [pc, #84]	@ (800d33c <xTaskCheckForTimeOut+0xc4>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d007      	beq.n	800d2fe <xTaskCheckForTimeOut+0x86>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	69ba      	ldr	r2, [r7, #24]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d302      	bcc.n	800d2fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	61fb      	str	r3, [r7, #28]
 800d2fc:	e015      	b.n	800d32a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	429a      	cmp	r2, r3
 800d306:	d20b      	bcs.n	800d320 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	1ad2      	subs	r2, r2, r3
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7ff ff99 	bl	800d24c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d31a:	2300      	movs	r3, #0
 800d31c:	61fb      	str	r3, [r7, #28]
 800d31e:	e004      	b.n	800d32a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	2200      	movs	r2, #0
 800d324:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d326:	2301      	movs	r3, #1
 800d328:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d32a:	f000 ff6f 	bl	800e20c <vPortExitCritical>

	return xReturn;
 800d32e:	69fb      	ldr	r3, [r7, #28]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3720      	adds	r7, #32
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	20001940 	.word	0x20001940
 800d33c:	20001954 	.word	0x20001954

0800d340 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d340:	b480      	push	{r7}
 800d342:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d344:	4b03      	ldr	r3, [pc, #12]	@ (800d354 <vTaskMissedYield+0x14>)
 800d346:	2201      	movs	r2, #1
 800d348:	601a      	str	r2, [r3, #0]
}
 800d34a:	bf00      	nop
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr
 800d354:	20001950 	.word	0x20001950

0800d358 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d360:	f000 f852 	bl	800d408 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d364:	4b06      	ldr	r3, [pc, #24]	@ (800d380 <prvIdleTask+0x28>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d9f9      	bls.n	800d360 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d36c:	4b05      	ldr	r3, [pc, #20]	@ (800d384 <prvIdleTask+0x2c>)
 800d36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d37c:	e7f0      	b.n	800d360 <prvIdleTask+0x8>
 800d37e:	bf00      	nop
 800d380:	2000146c 	.word	0x2000146c
 800d384:	e000ed04 	.word	0xe000ed04

0800d388 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d38e:	2300      	movs	r3, #0
 800d390:	607b      	str	r3, [r7, #4]
 800d392:	e00c      	b.n	800d3ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	4613      	mov	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4a12      	ldr	r2, [pc, #72]	@ (800d3e8 <prvInitialiseTaskLists+0x60>)
 800d3a0:	4413      	add	r3, r2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fe fbb4 	bl	800bb10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	607b      	str	r3, [r7, #4]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b37      	cmp	r3, #55	@ 0x37
 800d3b2:	d9ef      	bls.n	800d394 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d3b4:	480d      	ldr	r0, [pc, #52]	@ (800d3ec <prvInitialiseTaskLists+0x64>)
 800d3b6:	f7fe fbab 	bl	800bb10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d3ba:	480d      	ldr	r0, [pc, #52]	@ (800d3f0 <prvInitialiseTaskLists+0x68>)
 800d3bc:	f7fe fba8 	bl	800bb10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d3c0:	480c      	ldr	r0, [pc, #48]	@ (800d3f4 <prvInitialiseTaskLists+0x6c>)
 800d3c2:	f7fe fba5 	bl	800bb10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d3c6:	480c      	ldr	r0, [pc, #48]	@ (800d3f8 <prvInitialiseTaskLists+0x70>)
 800d3c8:	f7fe fba2 	bl	800bb10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d3cc:	480b      	ldr	r0, [pc, #44]	@ (800d3fc <prvInitialiseTaskLists+0x74>)
 800d3ce:	f7fe fb9f 	bl	800bb10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d400 <prvInitialiseTaskLists+0x78>)
 800d3d4:	4a05      	ldr	r2, [pc, #20]	@ (800d3ec <prvInitialiseTaskLists+0x64>)
 800d3d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d404 <prvInitialiseTaskLists+0x7c>)
 800d3da:	4a05      	ldr	r2, [pc, #20]	@ (800d3f0 <prvInitialiseTaskLists+0x68>)
 800d3dc:	601a      	str	r2, [r3, #0]
}
 800d3de:	bf00      	nop
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	2000146c 	.word	0x2000146c
 800d3ec:	200018cc 	.word	0x200018cc
 800d3f0:	200018e0 	.word	0x200018e0
 800d3f4:	200018fc 	.word	0x200018fc
 800d3f8:	20001910 	.word	0x20001910
 800d3fc:	20001928 	.word	0x20001928
 800d400:	200018f4 	.word	0x200018f4
 800d404:	200018f8 	.word	0x200018f8

0800d408 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d40e:	e019      	b.n	800d444 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d410:	f000 feca 	bl	800e1a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d414:	4b10      	ldr	r3, [pc, #64]	@ (800d458 <prvCheckTasksWaitingTermination+0x50>)
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3304      	adds	r3, #4
 800d420:	4618      	mov	r0, r3
 800d422:	f7fe fbff 	bl	800bc24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d426:	4b0d      	ldr	r3, [pc, #52]	@ (800d45c <prvCheckTasksWaitingTermination+0x54>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	3b01      	subs	r3, #1
 800d42c:	4a0b      	ldr	r2, [pc, #44]	@ (800d45c <prvCheckTasksWaitingTermination+0x54>)
 800d42e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d430:	4b0b      	ldr	r3, [pc, #44]	@ (800d460 <prvCheckTasksWaitingTermination+0x58>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3b01      	subs	r3, #1
 800d436:	4a0a      	ldr	r2, [pc, #40]	@ (800d460 <prvCheckTasksWaitingTermination+0x58>)
 800d438:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d43a:	f000 fee7 	bl	800e20c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f810 	bl	800d464 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d444:	4b06      	ldr	r3, [pc, #24]	@ (800d460 <prvCheckTasksWaitingTermination+0x58>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1e1      	bne.n	800d410 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d44c:	bf00      	nop
 800d44e:	bf00      	nop
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20001910 	.word	0x20001910
 800d45c:	2000193c 	.word	0x2000193c
 800d460:	20001924 	.word	0x20001924

0800d464 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3354      	adds	r3, #84	@ 0x54
 800d470:	4618      	mov	r0, r3
 800d472:	f001 ff43 	bl	800f2fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d108      	bne.n	800d492 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d484:	4618      	mov	r0, r3
 800d486:	f001 f87f 	bl	800e588 <vPortFree>
				vPortFree( pxTCB );
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f001 f87c 	bl	800e588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d490:	e019      	b.n	800d4c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d103      	bne.n	800d4a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f001 f873 	bl	800e588 <vPortFree>
	}
 800d4a2:	e010      	b.n	800d4c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d4aa:	2b02      	cmp	r3, #2
 800d4ac:	d00b      	beq.n	800d4c6 <prvDeleteTCB+0x62>
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	60fb      	str	r3, [r7, #12]
}
 800d4c0:	bf00      	nop
 800d4c2:	bf00      	nop
 800d4c4:	e7fd      	b.n	800d4c2 <prvDeleteTCB+0x5e>
	}
 800d4c6:	bf00      	nop
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
	...

0800d4d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d508 <prvResetNextTaskUnblockTime+0x38>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d104      	bne.n	800d4ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d50c <prvResetNextTaskUnblockTime+0x3c>)
 800d4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4e8:	e008      	b.n	800d4fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ea:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <prvResetNextTaskUnblockTime+0x38>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	4a04      	ldr	r2, [pc, #16]	@ (800d50c <prvResetNextTaskUnblockTime+0x3c>)
 800d4fa:	6013      	str	r3, [r2, #0]
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	200018f4 	.word	0x200018f4
 800d50c:	2000195c 	.word	0x2000195c

0800d510 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d516:	4b0b      	ldr	r3, [pc, #44]	@ (800d544 <xTaskGetSchedulerState+0x34>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d102      	bne.n	800d524 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d51e:	2301      	movs	r3, #1
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	e008      	b.n	800d536 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d524:	4b08      	ldr	r3, [pc, #32]	@ (800d548 <xTaskGetSchedulerState+0x38>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d102      	bne.n	800d532 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d52c:	2302      	movs	r3, #2
 800d52e:	607b      	str	r3, [r7, #4]
 800d530:	e001      	b.n	800d536 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d532:	2300      	movs	r3, #0
 800d534:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d536:	687b      	ldr	r3, [r7, #4]
	}
 800d538:	4618      	mov	r0, r3
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	20001948 	.word	0x20001948
 800d548:	20001964 	.word	0x20001964

0800d54c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b086      	sub	sp, #24
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d558:	2300      	movs	r3, #0
 800d55a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d058      	beq.n	800d614 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d562:	4b2f      	ldr	r3, [pc, #188]	@ (800d620 <xTaskPriorityDisinherit+0xd4>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d00b      	beq.n	800d584 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	60fb      	str	r3, [r7, #12]
}
 800d57e:	bf00      	nop
 800d580:	bf00      	nop
 800d582:	e7fd      	b.n	800d580 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10b      	bne.n	800d5a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	60bb      	str	r3, [r7, #8]
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	e7fd      	b.n	800d5a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5a8:	1e5a      	subs	r2, r3, #1
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d02c      	beq.n	800d614 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d128      	bne.n	800d614 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fe fb2c 	bl	800bc24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d624 <xTaskPriorityDisinherit+0xd8>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d903      	bls.n	800d5f4 <xTaskPriorityDisinherit+0xa8>
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f0:	4a0c      	ldr	r2, [pc, #48]	@ (800d624 <xTaskPriorityDisinherit+0xd8>)
 800d5f2:	6013      	str	r3, [r2, #0]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4413      	add	r3, r2
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4a09      	ldr	r2, [pc, #36]	@ (800d628 <xTaskPriorityDisinherit+0xdc>)
 800d602:	441a      	add	r2, r3
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	3304      	adds	r3, #4
 800d608:	4619      	mov	r1, r3
 800d60a:	4610      	mov	r0, r2
 800d60c:	f7fe faad 	bl	800bb6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d610:	2301      	movs	r3, #1
 800d612:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d614:	697b      	ldr	r3, [r7, #20]
	}
 800d616:	4618      	mov	r0, r3
 800d618:	3718      	adds	r7, #24
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	20001468 	.word	0x20001468
 800d624:	20001944 	.word	0x20001944
 800d628:	2000146c 	.word	0x2000146c

0800d62c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d636:	f000 fdb7 	bl	800e1a8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d63a:	4b20      	ldr	r3, [pc, #128]	@ (800d6bc <ulTaskNotifyTake+0x90>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d642:	2b00      	cmp	r3, #0
 800d644:	d113      	bne.n	800d66e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d646:	4b1d      	ldr	r3, [pc, #116]	@ (800d6bc <ulTaskNotifyTake+0x90>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00b      	beq.n	800d66e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d656:	2101      	movs	r1, #1
 800d658:	6838      	ldr	r0, [r7, #0]
 800d65a:	f000 f8c9 	bl	800d7f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d65e:	4b18      	ldr	r3, [pc, #96]	@ (800d6c0 <ulTaskNotifyTake+0x94>)
 800d660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d66e:	f000 fdcd 	bl	800e20c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d672:	f000 fd99 	bl	800e1a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d676:	4b11      	ldr	r3, [pc, #68]	@ (800d6bc <ulTaskNotifyTake+0x90>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d67e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00e      	beq.n	800d6a4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d005      	beq.n	800d698 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d68c:	4b0b      	ldr	r3, [pc, #44]	@ (800d6bc <ulTaskNotifyTake+0x90>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2200      	movs	r2, #0
 800d692:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800d696:	e005      	b.n	800d6a4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d698:	4b08      	ldr	r3, [pc, #32]	@ (800d6bc <ulTaskNotifyTake+0x90>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68fa      	ldr	r2, [r7, #12]
 800d69e:	3a01      	subs	r2, #1
 800d6a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d6a4:	4b05      	ldr	r3, [pc, #20]	@ (800d6bc <ulTaskNotifyTake+0x90>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800d6ae:	f000 fdad 	bl	800e20c <vPortExitCritical>

		return ulReturn;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
	}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20001468 	.word	0x20001468
 800d6c0:	e000ed04 	.word	0xe000ed04

0800d6c4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08a      	sub	sp, #40	@ 0x28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10b      	bne.n	800d6ec <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	61bb      	str	r3, [r7, #24]
}
 800d6e6:	bf00      	nop
 800d6e8:	bf00      	nop
 800d6ea:	e7fd      	b.n	800d6e8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6ec:	f000 fe3c 	bl	800e368 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800d6f4:	f3ef 8211 	mrs	r2, BASEPRI
 800d6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	617a      	str	r2, [r7, #20]
 800d70a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d70c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d70e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800d716:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71a:	2202      	movs	r2, #2
 800d71c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d722:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d72e:	7ffb      	ldrb	r3, [r7, #31]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d147      	bne.n	800d7c4 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00b      	beq.n	800d754 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	60fb      	str	r3, [r7, #12]
}
 800d74e:	bf00      	nop
 800d750:	bf00      	nop
 800d752:	e7fd      	b.n	800d750 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d754:	4b20      	ldr	r3, [pc, #128]	@ (800d7d8 <vTaskNotifyGiveFromISR+0x114>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d11d      	bne.n	800d798 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75e:	3304      	adds	r3, #4
 800d760:	4618      	mov	r0, r3
 800d762:	f7fe fa5f 	bl	800bc24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d76a:	4b1c      	ldr	r3, [pc, #112]	@ (800d7dc <vTaskNotifyGiveFromISR+0x118>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d903      	bls.n	800d77a <vTaskNotifyGiveFromISR+0xb6>
 800d772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d776:	4a19      	ldr	r2, [pc, #100]	@ (800d7dc <vTaskNotifyGiveFromISR+0x118>)
 800d778:	6013      	str	r3, [r2, #0]
 800d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d77e:	4613      	mov	r3, r2
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	4413      	add	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4a16      	ldr	r2, [pc, #88]	@ (800d7e0 <vTaskNotifyGiveFromISR+0x11c>)
 800d788:	441a      	add	r2, r3
 800d78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78c:	3304      	adds	r3, #4
 800d78e:	4619      	mov	r1, r3
 800d790:	4610      	mov	r0, r2
 800d792:	f7fe f9ea 	bl	800bb6a <vListInsertEnd>
 800d796:	e005      	b.n	800d7a4 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79a:	3318      	adds	r3, #24
 800d79c:	4619      	mov	r1, r3
 800d79e:	4811      	ldr	r0, [pc, #68]	@ (800d7e4 <vTaskNotifyGiveFromISR+0x120>)
 800d7a0:	f7fe f9e3 	bl	800bb6a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d7e8 <vTaskNotifyGiveFromISR+0x124>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d908      	bls.n	800d7c4 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d002      	beq.n	800d7be <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d7be:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <vTaskNotifyGiveFromISR+0x128>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	601a      	str	r2, [r3, #0]
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	f383 8811 	msr	BASEPRI, r3
}
 800d7ce:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d7d0:	bf00      	nop
 800d7d2:	3728      	adds	r7, #40	@ 0x28
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	20001964 	.word	0x20001964
 800d7dc:	20001944 	.word	0x20001944
 800d7e0:	2000146c 	.word	0x2000146c
 800d7e4:	200018fc 	.word	0x200018fc
 800d7e8:	20001468 	.word	0x20001468
 800d7ec:	20001950 	.word	0x20001950

0800d7f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7fa:	4b21      	ldr	r3, [pc, #132]	@ (800d880 <prvAddCurrentTaskToDelayedList+0x90>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d800:	4b20      	ldr	r3, [pc, #128]	@ (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	3304      	adds	r3, #4
 800d806:	4618      	mov	r0, r3
 800d808:	f7fe fa0c 	bl	800bc24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d812:	d10a      	bne.n	800d82a <prvAddCurrentTaskToDelayedList+0x3a>
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d007      	beq.n	800d82a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d81a:	4b1a      	ldr	r3, [pc, #104]	@ (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	3304      	adds	r3, #4
 800d820:	4619      	mov	r1, r3
 800d822:	4819      	ldr	r0, [pc, #100]	@ (800d888 <prvAddCurrentTaskToDelayedList+0x98>)
 800d824:	f7fe f9a1 	bl	800bb6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d828:	e026      	b.n	800d878 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4413      	add	r3, r2
 800d830:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d832:	4b14      	ldr	r3, [pc, #80]	@ (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d209      	bcs.n	800d856 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d842:	4b12      	ldr	r3, [pc, #72]	@ (800d88c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	4b0f      	ldr	r3, [pc, #60]	@ (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3304      	adds	r3, #4
 800d84c:	4619      	mov	r1, r3
 800d84e:	4610      	mov	r0, r2
 800d850:	f7fe f9af 	bl	800bbb2 <vListInsert>
}
 800d854:	e010      	b.n	800d878 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d856:	4b0e      	ldr	r3, [pc, #56]	@ (800d890 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	4b0a      	ldr	r3, [pc, #40]	@ (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	3304      	adds	r3, #4
 800d860:	4619      	mov	r1, r3
 800d862:	4610      	mov	r0, r2
 800d864:	f7fe f9a5 	bl	800bbb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d868:	4b0a      	ldr	r3, [pc, #40]	@ (800d894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d202      	bcs.n	800d878 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d872:	4a08      	ldr	r2, [pc, #32]	@ (800d894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	6013      	str	r3, [r2, #0]
}
 800d878:	bf00      	nop
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	20001940 	.word	0x20001940
 800d884:	20001468 	.word	0x20001468
 800d888:	20001928 	.word	0x20001928
 800d88c:	200018f8 	.word	0x200018f8
 800d890:	200018f4 	.word	0x200018f4
 800d894:	2000195c 	.word	0x2000195c

0800d898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08a      	sub	sp, #40	@ 0x28
 800d89c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8a2:	f000 fb13 	bl	800decc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8a6:	4b1d      	ldr	r3, [pc, #116]	@ (800d91c <xTimerCreateTimerTask+0x84>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d021      	beq.n	800d8f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8b6:	1d3a      	adds	r2, r7, #4
 800d8b8:	f107 0108 	add.w	r1, r7, #8
 800d8bc:	f107 030c 	add.w	r3, r7, #12
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fe f90b 	bl	800badc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d8c6:	6879      	ldr	r1, [r7, #4]
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	9202      	str	r2, [sp, #8]
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	4911      	ldr	r1, [pc, #68]	@ (800d920 <xTimerCreateTimerTask+0x88>)
 800d8da:	4812      	ldr	r0, [pc, #72]	@ (800d924 <xTimerCreateTimerTask+0x8c>)
 800d8dc:	f7fe fec6 	bl	800c66c <xTaskCreateStatic>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	4a11      	ldr	r2, [pc, #68]	@ (800d928 <xTimerCreateTimerTask+0x90>)
 800d8e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d8e6:	4b10      	ldr	r3, [pc, #64]	@ (800d928 <xTimerCreateTimerTask+0x90>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10b      	bne.n	800d910 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	613b      	str	r3, [r7, #16]
}
 800d90a:	bf00      	nop
 800d90c:	bf00      	nop
 800d90e:	e7fd      	b.n	800d90c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d910:	697b      	ldr	r3, [r7, #20]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	20001998 	.word	0x20001998
 800d920:	080126a8 	.word	0x080126a8
 800d924:	0800da65 	.word	0x0800da65
 800d928:	2000199c 	.word	0x2000199c

0800d92c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08a      	sub	sp, #40	@ 0x28
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
 800d938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d93a:	2300      	movs	r3, #0
 800d93c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10b      	bne.n	800d95c <xTimerGenericCommand+0x30>
	__asm volatile
 800d944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d948:	f383 8811 	msr	BASEPRI, r3
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	623b      	str	r3, [r7, #32]
}
 800d956:	bf00      	nop
 800d958:	bf00      	nop
 800d95a:	e7fd      	b.n	800d958 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d95c:	4b19      	ldr	r3, [pc, #100]	@ (800d9c4 <xTimerGenericCommand+0x98>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d02a      	beq.n	800d9ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	2b05      	cmp	r3, #5
 800d974:	dc18      	bgt.n	800d9a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d976:	f7ff fdcb 	bl	800d510 <xTaskGetSchedulerState>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d109      	bne.n	800d994 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d980:	4b10      	ldr	r3, [pc, #64]	@ (800d9c4 <xTimerGenericCommand+0x98>)
 800d982:	6818      	ldr	r0, [r3, #0]
 800d984:	f107 0110 	add.w	r1, r7, #16
 800d988:	2300      	movs	r3, #0
 800d98a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d98c:	f7fe fa7e 	bl	800be8c <xQueueGenericSend>
 800d990:	6278      	str	r0, [r7, #36]	@ 0x24
 800d992:	e012      	b.n	800d9ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d994:	4b0b      	ldr	r3, [pc, #44]	@ (800d9c4 <xTimerGenericCommand+0x98>)
 800d996:	6818      	ldr	r0, [r3, #0]
 800d998:	f107 0110 	add.w	r1, r7, #16
 800d99c:	2300      	movs	r3, #0
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f7fe fa74 	bl	800be8c <xQueueGenericSend>
 800d9a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d9a6:	e008      	b.n	800d9ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9a8:	4b06      	ldr	r3, [pc, #24]	@ (800d9c4 <xTimerGenericCommand+0x98>)
 800d9aa:	6818      	ldr	r0, [r3, #0]
 800d9ac:	f107 0110 	add.w	r1, r7, #16
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	f7fe fb6c 	bl	800c090 <xQueueGenericSendFromISR>
 800d9b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3728      	adds	r7, #40	@ 0x28
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	20001998 	.word	0x20001998

0800d9c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b088      	sub	sp, #32
 800d9cc:	af02      	add	r7, sp, #8
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9d2:	4b23      	ldr	r3, [pc, #140]	@ (800da60 <prvProcessExpiredTimer+0x98>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	3304      	adds	r3, #4
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fe f91f 	bl	800bc24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9ec:	f003 0304 	and.w	r3, r3, #4
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d023      	beq.n	800da3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	699a      	ldr	r2, [r3, #24]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	18d1      	adds	r1, r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	683a      	ldr	r2, [r7, #0]
 800da00:	6978      	ldr	r0, [r7, #20]
 800da02:	f000 f8d5 	bl	800dbb0 <prvInsertTimerInActiveList>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d020      	beq.n	800da4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da0c:	2300      	movs	r3, #0
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	2300      	movs	r3, #0
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	2100      	movs	r1, #0
 800da16:	6978      	ldr	r0, [r7, #20]
 800da18:	f7ff ff88 	bl	800d92c <xTimerGenericCommand>
 800da1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d114      	bne.n	800da4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	60fb      	str	r3, [r7, #12]
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	e7fd      	b.n	800da38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da42:	f023 0301 	bic.w	r3, r3, #1
 800da46:	b2da      	uxtb	r2, r3
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	6978      	ldr	r0, [r7, #20]
 800da54:	4798      	blx	r3
}
 800da56:	bf00      	nop
 800da58:	3718      	adds	r7, #24
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	20001990 	.word	0x20001990

0800da64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da6c:	f107 0308 	add.w	r3, r7, #8
 800da70:	4618      	mov	r0, r3
 800da72:	f000 f859 	bl	800db28 <prvGetNextExpireTime>
 800da76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	4619      	mov	r1, r3
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 f805 	bl	800da8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da82:	f000 f8d7 	bl	800dc34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da86:	bf00      	nop
 800da88:	e7f0      	b.n	800da6c <prvTimerTask+0x8>
	...

0800da8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da96:	f7ff f84d 	bl	800cb34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da9a:	f107 0308 	add.w	r3, r7, #8
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f866 	bl	800db70 <prvSampleTimeNow>
 800daa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d130      	bne.n	800db0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d10a      	bne.n	800dac8 <prvProcessTimerOrBlockTask+0x3c>
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d806      	bhi.n	800dac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800daba:	f7ff f849 	bl	800cb50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7ff ff81 	bl	800d9c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dac6:	e024      	b.n	800db12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d008      	beq.n	800dae0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dace:	4b13      	ldr	r3, [pc, #76]	@ (800db1c <prvProcessTimerOrBlockTask+0x90>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d101      	bne.n	800dadc <prvProcessTimerOrBlockTask+0x50>
 800dad8:	2301      	movs	r3, #1
 800dada:	e000      	b.n	800dade <prvProcessTimerOrBlockTask+0x52>
 800dadc:	2300      	movs	r3, #0
 800dade:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dae0:	4b0f      	ldr	r3, [pc, #60]	@ (800db20 <prvProcessTimerOrBlockTask+0x94>)
 800dae2:	6818      	ldr	r0, [r3, #0]
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	683a      	ldr	r2, [r7, #0]
 800daec:	4619      	mov	r1, r3
 800daee:	f7fe fd89 	bl	800c604 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800daf2:	f7ff f82d 	bl	800cb50 <xTaskResumeAll>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10a      	bne.n	800db12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dafc:	4b09      	ldr	r3, [pc, #36]	@ (800db24 <prvProcessTimerOrBlockTask+0x98>)
 800dafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db02:	601a      	str	r2, [r3, #0]
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	f3bf 8f6f 	isb	sy
}
 800db0c:	e001      	b.n	800db12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db0e:	f7ff f81f 	bl	800cb50 <xTaskResumeAll>
}
 800db12:	bf00      	nop
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	20001994 	.word	0x20001994
 800db20:	20001998 	.word	0x20001998
 800db24:	e000ed04 	.word	0xe000ed04

0800db28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db30:	4b0e      	ldr	r3, [pc, #56]	@ (800db6c <prvGetNextExpireTime+0x44>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <prvGetNextExpireTime+0x16>
 800db3a:	2201      	movs	r2, #1
 800db3c:	e000      	b.n	800db40 <prvGetNextExpireTime+0x18>
 800db3e:	2200      	movs	r2, #0
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d105      	bne.n	800db58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db4c:	4b07      	ldr	r3, [pc, #28]	@ (800db6c <prvGetNextExpireTime+0x44>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	e001      	b.n	800db5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db58:	2300      	movs	r3, #0
 800db5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db5c:	68fb      	ldr	r3, [r7, #12]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3714      	adds	r7, #20
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	20001990 	.word	0x20001990

0800db70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db78:	f7ff f888 	bl	800cc8c <xTaskGetTickCount>
 800db7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db7e:	4b0b      	ldr	r3, [pc, #44]	@ (800dbac <prvSampleTimeNow+0x3c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	429a      	cmp	r2, r3
 800db86:	d205      	bcs.n	800db94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db88:	f000 f93a 	bl	800de00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	601a      	str	r2, [r3, #0]
 800db92:	e002      	b.n	800db9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db9a:	4a04      	ldr	r2, [pc, #16]	@ (800dbac <prvSampleTimeNow+0x3c>)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dba0:	68fb      	ldr	r3, [r7, #12]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	200019a0 	.word	0x200019a0

0800dbb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
 800dbbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d812      	bhi.n	800dbfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	1ad2      	subs	r2, r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d302      	bcc.n	800dbea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	617b      	str	r3, [r7, #20]
 800dbe8:	e01b      	b.n	800dc22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbea:	4b10      	ldr	r3, [pc, #64]	@ (800dc2c <prvInsertTimerInActiveList+0x7c>)
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	f7fd ffdc 	bl	800bbb2 <vListInsert>
 800dbfa:	e012      	b.n	800dc22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d206      	bcs.n	800dc12 <prvInsertTimerInActiveList+0x62>
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d302      	bcc.n	800dc12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	617b      	str	r3, [r7, #20]
 800dc10:	e007      	b.n	800dc22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc12:	4b07      	ldr	r3, [pc, #28]	@ (800dc30 <prvInsertTimerInActiveList+0x80>)
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	f7fd ffc8 	bl	800bbb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc22:	697b      	ldr	r3, [r7, #20]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3718      	adds	r7, #24
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	20001994 	.word	0x20001994
 800dc30:	20001990 	.word	0x20001990

0800dc34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08e      	sub	sp, #56	@ 0x38
 800dc38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc3a:	e0ce      	b.n	800ddda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	da19      	bge.n	800dc76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc42:	1d3b      	adds	r3, r7, #4
 800dc44:	3304      	adds	r3, #4
 800dc46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d10b      	bne.n	800dc66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dc4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc52:	f383 8811 	msr	BASEPRI, r3
 800dc56:	f3bf 8f6f 	isb	sy
 800dc5a:	f3bf 8f4f 	dsb	sy
 800dc5e:	61fb      	str	r3, [r7, #28]
}
 800dc60:	bf00      	nop
 800dc62:	bf00      	nop
 800dc64:	e7fd      	b.n	800dc62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc6c:	6850      	ldr	r0, [r2, #4]
 800dc6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc70:	6892      	ldr	r2, [r2, #8]
 800dc72:	4611      	mov	r1, r2
 800dc74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f2c0 80ae 	blt.w	800ddda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc84:	695b      	ldr	r3, [r3, #20]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d004      	beq.n	800dc94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fd ffc8 	bl	800bc24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc94:	463b      	mov	r3, r7
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff ff6a 	bl	800db70 <prvSampleTimeNow>
 800dc9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2b09      	cmp	r3, #9
 800dca2:	f200 8097 	bhi.w	800ddd4 <prvProcessReceivedCommands+0x1a0>
 800dca6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcac <prvProcessReceivedCommands+0x78>)
 800dca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcac:	0800dcd5 	.word	0x0800dcd5
 800dcb0:	0800dcd5 	.word	0x0800dcd5
 800dcb4:	0800dcd5 	.word	0x0800dcd5
 800dcb8:	0800dd4b 	.word	0x0800dd4b
 800dcbc:	0800dd5f 	.word	0x0800dd5f
 800dcc0:	0800ddab 	.word	0x0800ddab
 800dcc4:	0800dcd5 	.word	0x0800dcd5
 800dcc8:	0800dcd5 	.word	0x0800dcd5
 800dccc:	0800dd4b 	.word	0x0800dd4b
 800dcd0:	0800dd5f 	.word	0x0800dd5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcda:	f043 0301 	orr.w	r3, r3, #1
 800dcde:	b2da      	uxtb	r2, r3
 800dce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcea:	699b      	ldr	r3, [r3, #24]
 800dcec:	18d1      	adds	r1, r2, r3
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcf4:	f7ff ff5c 	bl	800dbb0 <prvInsertTimerInActiveList>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d06c      	beq.n	800ddd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd00:	6a1b      	ldr	r3, [r3, #32]
 800dd02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d061      	beq.n	800ddd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd18:	699b      	ldr	r3, [r3, #24]
 800dd1a:	441a      	add	r2, r3
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	2300      	movs	r3, #0
 800dd22:	2100      	movs	r1, #0
 800dd24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd26:	f7ff fe01 	bl	800d92c <xTimerGenericCommand>
 800dd2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d152      	bne.n	800ddd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	61bb      	str	r3, [r7, #24]
}
 800dd44:	bf00      	nop
 800dd46:	bf00      	nop
 800dd48:	e7fd      	b.n	800dd46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd50:	f023 0301 	bic.w	r3, r3, #1
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dd5c:	e03d      	b.n	800ddda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd64:	f043 0301 	orr.w	r3, r3, #1
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd78:	699b      	ldr	r3, [r3, #24]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10b      	bne.n	800dd96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	617b      	str	r3, [r7, #20]
}
 800dd90:	bf00      	nop
 800dd92:	bf00      	nop
 800dd94:	e7fd      	b.n	800dd92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd98:	699a      	ldr	r2, [r3, #24]
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9c:	18d1      	adds	r1, r2, r3
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dda2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dda4:	f7ff ff04 	bl	800dbb0 <prvInsertTimerInActiveList>
					break;
 800dda8:	e017      	b.n	800ddda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddb0:	f003 0302 	and.w	r3, r3, #2
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d103      	bne.n	800ddc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ddb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddba:	f000 fbe5 	bl	800e588 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ddbe:	e00c      	b.n	800ddda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddc6:	f023 0301 	bic.w	r3, r3, #1
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ddd2:	e002      	b.n	800ddda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ddd4:	bf00      	nop
 800ddd6:	e000      	b.n	800ddda <prvProcessReceivedCommands+0x1a6>
					break;
 800ddd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddda:	4b08      	ldr	r3, [pc, #32]	@ (800ddfc <prvProcessReceivedCommands+0x1c8>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	1d39      	adds	r1, r7, #4
 800dde0:	2200      	movs	r2, #0
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fe f9f2 	bl	800c1cc <xQueueReceive>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f47f af26 	bne.w	800dc3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ddf0:	bf00      	nop
 800ddf2:	bf00      	nop
 800ddf4:	3730      	adds	r7, #48	@ 0x30
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	20001998 	.word	0x20001998

0800de00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de06:	e049      	b.n	800de9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de08:	4b2e      	ldr	r3, [pc, #184]	@ (800dec4 <prvSwitchTimerLists+0xc4>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de12:	4b2c      	ldr	r3, [pc, #176]	@ (800dec4 <prvSwitchTimerLists+0xc4>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3304      	adds	r3, #4
 800de20:	4618      	mov	r0, r3
 800de22:	f7fd feff 	bl	800bc24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d02f      	beq.n	800de9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	4413      	add	r3, r2
 800de44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d90e      	bls.n	800de6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de5a:	4b1a      	ldr	r3, [pc, #104]	@ (800dec4 <prvSwitchTimerLists+0xc4>)
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	3304      	adds	r3, #4
 800de62:	4619      	mov	r1, r3
 800de64:	4610      	mov	r0, r2
 800de66:	f7fd fea4 	bl	800bbb2 <vListInsert>
 800de6a:	e017      	b.n	800de9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de6c:	2300      	movs	r3, #0
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	2300      	movs	r3, #0
 800de72:	693a      	ldr	r2, [r7, #16]
 800de74:	2100      	movs	r1, #0
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	f7ff fd58 	bl	800d92c <xTimerGenericCommand>
 800de7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10b      	bne.n	800de9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800de84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de88:	f383 8811 	msr	BASEPRI, r3
 800de8c:	f3bf 8f6f 	isb	sy
 800de90:	f3bf 8f4f 	dsb	sy
 800de94:	603b      	str	r3, [r7, #0]
}
 800de96:	bf00      	nop
 800de98:	bf00      	nop
 800de9a:	e7fd      	b.n	800de98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de9c:	4b09      	ldr	r3, [pc, #36]	@ (800dec4 <prvSwitchTimerLists+0xc4>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1b0      	bne.n	800de08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dea6:	4b07      	ldr	r3, [pc, #28]	@ (800dec4 <prvSwitchTimerLists+0xc4>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800deac:	4b06      	ldr	r3, [pc, #24]	@ (800dec8 <prvSwitchTimerLists+0xc8>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a04      	ldr	r2, [pc, #16]	@ (800dec4 <prvSwitchTimerLists+0xc4>)
 800deb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800deb4:	4a04      	ldr	r2, [pc, #16]	@ (800dec8 <prvSwitchTimerLists+0xc8>)
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	6013      	str	r3, [r2, #0]
}
 800deba:	bf00      	nop
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	20001990 	.word	0x20001990
 800dec8:	20001994 	.word	0x20001994

0800decc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ded2:	f000 f969 	bl	800e1a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ded6:	4b15      	ldr	r3, [pc, #84]	@ (800df2c <prvCheckForValidListAndQueue+0x60>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d120      	bne.n	800df20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dede:	4814      	ldr	r0, [pc, #80]	@ (800df30 <prvCheckForValidListAndQueue+0x64>)
 800dee0:	f7fd fe16 	bl	800bb10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dee4:	4813      	ldr	r0, [pc, #76]	@ (800df34 <prvCheckForValidListAndQueue+0x68>)
 800dee6:	f7fd fe13 	bl	800bb10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800deea:	4b13      	ldr	r3, [pc, #76]	@ (800df38 <prvCheckForValidListAndQueue+0x6c>)
 800deec:	4a10      	ldr	r2, [pc, #64]	@ (800df30 <prvCheckForValidListAndQueue+0x64>)
 800deee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800def0:	4b12      	ldr	r3, [pc, #72]	@ (800df3c <prvCheckForValidListAndQueue+0x70>)
 800def2:	4a10      	ldr	r2, [pc, #64]	@ (800df34 <prvCheckForValidListAndQueue+0x68>)
 800def4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800def6:	2300      	movs	r3, #0
 800def8:	9300      	str	r3, [sp, #0]
 800defa:	4b11      	ldr	r3, [pc, #68]	@ (800df40 <prvCheckForValidListAndQueue+0x74>)
 800defc:	4a11      	ldr	r2, [pc, #68]	@ (800df44 <prvCheckForValidListAndQueue+0x78>)
 800defe:	2110      	movs	r1, #16
 800df00:	200a      	movs	r0, #10
 800df02:	f7fd ff23 	bl	800bd4c <xQueueGenericCreateStatic>
 800df06:	4603      	mov	r3, r0
 800df08:	4a08      	ldr	r2, [pc, #32]	@ (800df2c <prvCheckForValidListAndQueue+0x60>)
 800df0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df0c:	4b07      	ldr	r3, [pc, #28]	@ (800df2c <prvCheckForValidListAndQueue+0x60>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d005      	beq.n	800df20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df14:	4b05      	ldr	r3, [pc, #20]	@ (800df2c <prvCheckForValidListAndQueue+0x60>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	490b      	ldr	r1, [pc, #44]	@ (800df48 <prvCheckForValidListAndQueue+0x7c>)
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe fb48 	bl	800c5b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df20:	f000 f974 	bl	800e20c <vPortExitCritical>
}
 800df24:	bf00      	nop
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	20001998 	.word	0x20001998
 800df30:	20001968 	.word	0x20001968
 800df34:	2000197c 	.word	0x2000197c
 800df38:	20001990 	.word	0x20001990
 800df3c:	20001994 	.word	0x20001994
 800df40:	20001a44 	.word	0x20001a44
 800df44:	200019a4 	.word	0x200019a4
 800df48:	080126b0 	.word	0x080126b0

0800df4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	3b04      	subs	r3, #4
 800df5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800df64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3b04      	subs	r3, #4
 800df6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	f023 0201 	bic.w	r2, r3, #1
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3b04      	subs	r3, #4
 800df7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df7c:	4a0c      	ldr	r2, [pc, #48]	@ (800dfb0 <pxPortInitialiseStack+0x64>)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	3b14      	subs	r3, #20
 800df86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3b04      	subs	r3, #4
 800df92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f06f 0202 	mvn.w	r2, #2
 800df9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	3b20      	subs	r3, #32
 800dfa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3714      	adds	r7, #20
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr
 800dfb0:	0800dfb5 	.word	0x0800dfb5

0800dfb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfbe:	4b13      	ldr	r3, [pc, #76]	@ (800e00c <prvTaskExitError+0x58>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc6:	d00b      	beq.n	800dfe0 <prvTaskExitError+0x2c>
	__asm volatile
 800dfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfcc:	f383 8811 	msr	BASEPRI, r3
 800dfd0:	f3bf 8f6f 	isb	sy
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	60fb      	str	r3, [r7, #12]
}
 800dfda:	bf00      	nop
 800dfdc:	bf00      	nop
 800dfde:	e7fd      	b.n	800dfdc <prvTaskExitError+0x28>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe4:	f383 8811 	msr	BASEPRI, r3
 800dfe8:	f3bf 8f6f 	isb	sy
 800dfec:	f3bf 8f4f 	dsb	sy
 800dff0:	60bb      	str	r3, [r7, #8]
}
 800dff2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dff4:	bf00      	nop
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d0fc      	beq.n	800dff6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dffc:	bf00      	nop
 800dffe:	bf00      	nop
 800e000:	3714      	adds	r7, #20
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	2000006c 	.word	0x2000006c

0800e010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e010:	4b07      	ldr	r3, [pc, #28]	@ (800e030 <pxCurrentTCBConst2>)
 800e012:	6819      	ldr	r1, [r3, #0]
 800e014:	6808      	ldr	r0, [r1, #0]
 800e016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01a:	f380 8809 	msr	PSP, r0
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	f04f 0000 	mov.w	r0, #0
 800e026:	f380 8811 	msr	BASEPRI, r0
 800e02a:	4770      	bx	lr
 800e02c:	f3af 8000 	nop.w

0800e030 <pxCurrentTCBConst2>:
 800e030:	20001468 	.word	0x20001468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e034:	bf00      	nop
 800e036:	bf00      	nop

0800e038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e038:	4808      	ldr	r0, [pc, #32]	@ (800e05c <prvPortStartFirstTask+0x24>)
 800e03a:	6800      	ldr	r0, [r0, #0]
 800e03c:	6800      	ldr	r0, [r0, #0]
 800e03e:	f380 8808 	msr	MSP, r0
 800e042:	f04f 0000 	mov.w	r0, #0
 800e046:	f380 8814 	msr	CONTROL, r0
 800e04a:	b662      	cpsie	i
 800e04c:	b661      	cpsie	f
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	df00      	svc	0
 800e058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e05a:	bf00      	nop
 800e05c:	e000ed08 	.word	0xe000ed08

0800e060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b086      	sub	sp, #24
 800e064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e066:	4b47      	ldr	r3, [pc, #284]	@ (800e184 <xPortStartScheduler+0x124>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a47      	ldr	r2, [pc, #284]	@ (800e188 <xPortStartScheduler+0x128>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d10b      	bne.n	800e088 <xPortStartScheduler+0x28>
	__asm volatile
 800e070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e074:	f383 8811 	msr	BASEPRI, r3
 800e078:	f3bf 8f6f 	isb	sy
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	613b      	str	r3, [r7, #16]
}
 800e082:	bf00      	nop
 800e084:	bf00      	nop
 800e086:	e7fd      	b.n	800e084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e088:	4b3e      	ldr	r3, [pc, #248]	@ (800e184 <xPortStartScheduler+0x124>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a3f      	ldr	r2, [pc, #252]	@ (800e18c <xPortStartScheduler+0x12c>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d10b      	bne.n	800e0aa <xPortStartScheduler+0x4a>
	__asm volatile
 800e092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e096:	f383 8811 	msr	BASEPRI, r3
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	f3bf 8f4f 	dsb	sy
 800e0a2:	60fb      	str	r3, [r7, #12]
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop
 800e0a8:	e7fd      	b.n	800e0a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0aa:	4b39      	ldr	r3, [pc, #228]	@ (800e190 <xPortStartScheduler+0x130>)
 800e0ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	22ff      	movs	r2, #255	@ 0xff
 800e0ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0c4:	78fb      	ldrb	r3, [r7, #3]
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	4b31      	ldr	r3, [pc, #196]	@ (800e194 <xPortStartScheduler+0x134>)
 800e0d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0d2:	4b31      	ldr	r3, [pc, #196]	@ (800e198 <xPortStartScheduler+0x138>)
 800e0d4:	2207      	movs	r2, #7
 800e0d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0d8:	e009      	b.n	800e0ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e0da:	4b2f      	ldr	r3, [pc, #188]	@ (800e198 <xPortStartScheduler+0x138>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	4a2d      	ldr	r2, [pc, #180]	@ (800e198 <xPortStartScheduler+0x138>)
 800e0e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e0e4:	78fb      	ldrb	r3, [r7, #3]
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	005b      	lsls	r3, r3, #1
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0ee:	78fb      	ldrb	r3, [r7, #3]
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0f6:	2b80      	cmp	r3, #128	@ 0x80
 800e0f8:	d0ef      	beq.n	800e0da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e0fa:	4b27      	ldr	r3, [pc, #156]	@ (800e198 <xPortStartScheduler+0x138>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f1c3 0307 	rsb	r3, r3, #7
 800e102:	2b04      	cmp	r3, #4
 800e104:	d00b      	beq.n	800e11e <xPortStartScheduler+0xbe>
	__asm volatile
 800e106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	60bb      	str	r3, [r7, #8]
}
 800e118:	bf00      	nop
 800e11a:	bf00      	nop
 800e11c:	e7fd      	b.n	800e11a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e11e:	4b1e      	ldr	r3, [pc, #120]	@ (800e198 <xPortStartScheduler+0x138>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	021b      	lsls	r3, r3, #8
 800e124:	4a1c      	ldr	r2, [pc, #112]	@ (800e198 <xPortStartScheduler+0x138>)
 800e126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e128:	4b1b      	ldr	r3, [pc, #108]	@ (800e198 <xPortStartScheduler+0x138>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e130:	4a19      	ldr	r2, [pc, #100]	@ (800e198 <xPortStartScheduler+0x138>)
 800e132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	b2da      	uxtb	r2, r3
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e13c:	4b17      	ldr	r3, [pc, #92]	@ (800e19c <xPortStartScheduler+0x13c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4a16      	ldr	r2, [pc, #88]	@ (800e19c <xPortStartScheduler+0x13c>)
 800e142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e148:	4b14      	ldr	r3, [pc, #80]	@ (800e19c <xPortStartScheduler+0x13c>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a13      	ldr	r2, [pc, #76]	@ (800e19c <xPortStartScheduler+0x13c>)
 800e14e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e154:	f000 f8da 	bl	800e30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e158:	4b11      	ldr	r3, [pc, #68]	@ (800e1a0 <xPortStartScheduler+0x140>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e15e:	f000 f8f9 	bl	800e354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e162:	4b10      	ldr	r3, [pc, #64]	@ (800e1a4 <xPortStartScheduler+0x144>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a0f      	ldr	r2, [pc, #60]	@ (800e1a4 <xPortStartScheduler+0x144>)
 800e168:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e16c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e16e:	f7ff ff63 	bl	800e038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e172:	f7fe ff4f 	bl	800d014 <vTaskSwitchContext>
	prvTaskExitError();
 800e176:	f7ff ff1d 	bl	800dfb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3718      	adds	r7, #24
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	e000ed00 	.word	0xe000ed00
 800e188:	410fc271 	.word	0x410fc271
 800e18c:	410fc270 	.word	0x410fc270
 800e190:	e000e400 	.word	0xe000e400
 800e194:	20001a94 	.word	0x20001a94
 800e198:	20001a98 	.word	0x20001a98
 800e19c:	e000ed20 	.word	0xe000ed20
 800e1a0:	2000006c 	.word	0x2000006c
 800e1a4:	e000ef34 	.word	0xe000ef34

0800e1a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b2:	f383 8811 	msr	BASEPRI, r3
 800e1b6:	f3bf 8f6f 	isb	sy
 800e1ba:	f3bf 8f4f 	dsb	sy
 800e1be:	607b      	str	r3, [r7, #4]
}
 800e1c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1c2:	4b10      	ldr	r3, [pc, #64]	@ (800e204 <vPortEnterCritical+0x5c>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	4a0e      	ldr	r2, [pc, #56]	@ (800e204 <vPortEnterCritical+0x5c>)
 800e1ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800e204 <vPortEnterCritical+0x5c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d110      	bne.n	800e1f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e208 <vPortEnterCritical+0x60>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00b      	beq.n	800e1f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	603b      	str	r3, [r7, #0]
}
 800e1f0:	bf00      	nop
 800e1f2:	bf00      	nop
 800e1f4:	e7fd      	b.n	800e1f2 <vPortEnterCritical+0x4a>
	}
}
 800e1f6:	bf00      	nop
 800e1f8:	370c      	adds	r7, #12
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	2000006c 	.word	0x2000006c
 800e208:	e000ed04 	.word	0xe000ed04

0800e20c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e212:	4b12      	ldr	r3, [pc, #72]	@ (800e25c <vPortExitCritical+0x50>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10b      	bne.n	800e232 <vPortExitCritical+0x26>
	__asm volatile
 800e21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21e:	f383 8811 	msr	BASEPRI, r3
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	607b      	str	r3, [r7, #4]
}
 800e22c:	bf00      	nop
 800e22e:	bf00      	nop
 800e230:	e7fd      	b.n	800e22e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e232:	4b0a      	ldr	r3, [pc, #40]	@ (800e25c <vPortExitCritical+0x50>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3b01      	subs	r3, #1
 800e238:	4a08      	ldr	r2, [pc, #32]	@ (800e25c <vPortExitCritical+0x50>)
 800e23a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e23c:	4b07      	ldr	r3, [pc, #28]	@ (800e25c <vPortExitCritical+0x50>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d105      	bne.n	800e250 <vPortExitCritical+0x44>
 800e244:	2300      	movs	r3, #0
 800e246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	f383 8811 	msr	BASEPRI, r3
}
 800e24e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e250:	bf00      	nop
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr
 800e25c:	2000006c 	.word	0x2000006c

0800e260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e260:	f3ef 8009 	mrs	r0, PSP
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	4b15      	ldr	r3, [pc, #84]	@ (800e2c0 <pxCurrentTCBConst>)
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	f01e 0f10 	tst.w	lr, #16
 800e270:	bf08      	it	eq
 800e272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27a:	6010      	str	r0, [r2, #0]
 800e27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e280:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e284:	f380 8811 	msr	BASEPRI, r0
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f7fe fec0 	bl	800d014 <vTaskSwitchContext>
 800e294:	f04f 0000 	mov.w	r0, #0
 800e298:	f380 8811 	msr	BASEPRI, r0
 800e29c:	bc09      	pop	{r0, r3}
 800e29e:	6819      	ldr	r1, [r3, #0]
 800e2a0:	6808      	ldr	r0, [r1, #0]
 800e2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a6:	f01e 0f10 	tst.w	lr, #16
 800e2aa:	bf08      	it	eq
 800e2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2b0:	f380 8809 	msr	PSP, r0
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	f3af 8000 	nop.w

0800e2c0 <pxCurrentTCBConst>:
 800e2c0:	20001468 	.word	0x20001468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2c4:	bf00      	nop
 800e2c6:	bf00      	nop

0800e2c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	607b      	str	r3, [r7, #4]
}
 800e2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e2e2:	f7fe fddd 	bl	800cea0 <xTaskIncrementTick>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d003      	beq.n	800e2f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e2ec:	4b06      	ldr	r3, [pc, #24]	@ (800e308 <xPortSysTickHandler+0x40>)
 800e2ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	f383 8811 	msr	BASEPRI, r3
}
 800e2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e300:	bf00      	nop
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e30c:	b480      	push	{r7}
 800e30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e310:	4b0b      	ldr	r3, [pc, #44]	@ (800e340 <vPortSetupTimerInterrupt+0x34>)
 800e312:	2200      	movs	r2, #0
 800e314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e316:	4b0b      	ldr	r3, [pc, #44]	@ (800e344 <vPortSetupTimerInterrupt+0x38>)
 800e318:	2200      	movs	r2, #0
 800e31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e31c:	4b0a      	ldr	r3, [pc, #40]	@ (800e348 <vPortSetupTimerInterrupt+0x3c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a0a      	ldr	r2, [pc, #40]	@ (800e34c <vPortSetupTimerInterrupt+0x40>)
 800e322:	fba2 2303 	umull	r2, r3, r2, r3
 800e326:	099b      	lsrs	r3, r3, #6
 800e328:	4a09      	ldr	r2, [pc, #36]	@ (800e350 <vPortSetupTimerInterrupt+0x44>)
 800e32a:	3b01      	subs	r3, #1
 800e32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e32e:	4b04      	ldr	r3, [pc, #16]	@ (800e340 <vPortSetupTimerInterrupt+0x34>)
 800e330:	2207      	movs	r2, #7
 800e332:	601a      	str	r2, [r3, #0]
}
 800e334:	bf00      	nop
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	e000e010 	.word	0xe000e010
 800e344:	e000e018 	.word	0xe000e018
 800e348:	20000060 	.word	0x20000060
 800e34c:	10624dd3 	.word	0x10624dd3
 800e350:	e000e014 	.word	0xe000e014

0800e354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e354:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e364 <vPortEnableVFP+0x10>
 800e358:	6801      	ldr	r1, [r0, #0]
 800e35a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e35e:	6001      	str	r1, [r0, #0]
 800e360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e362:	bf00      	nop
 800e364:	e000ed88 	.word	0xe000ed88

0800e368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e36e:	f3ef 8305 	mrs	r3, IPSR
 800e372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2b0f      	cmp	r3, #15
 800e378:	d915      	bls.n	800e3a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e37a:	4a18      	ldr	r2, [pc, #96]	@ (800e3dc <vPortValidateInterruptPriority+0x74>)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	4413      	add	r3, r2
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e384:	4b16      	ldr	r3, [pc, #88]	@ (800e3e0 <vPortValidateInterruptPriority+0x78>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	7afa      	ldrb	r2, [r7, #11]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d20b      	bcs.n	800e3a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	607b      	str	r3, [r7, #4]
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	e7fd      	b.n	800e3a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e3e4 <vPortValidateInterruptPriority+0x7c>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e3e8 <vPortValidateInterruptPriority+0x80>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d90b      	bls.n	800e3ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ba:	f383 8811 	msr	BASEPRI, r3
 800e3be:	f3bf 8f6f 	isb	sy
 800e3c2:	f3bf 8f4f 	dsb	sy
 800e3c6:	603b      	str	r3, [r7, #0]
}
 800e3c8:	bf00      	nop
 800e3ca:	bf00      	nop
 800e3cc:	e7fd      	b.n	800e3ca <vPortValidateInterruptPriority+0x62>
	}
 800e3ce:	bf00      	nop
 800e3d0:	3714      	adds	r7, #20
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	e000e3f0 	.word	0xe000e3f0
 800e3e0:	20001a94 	.word	0x20001a94
 800e3e4:	e000ed0c 	.word	0xe000ed0c
 800e3e8:	20001a98 	.word	0x20001a98

0800e3ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08a      	sub	sp, #40	@ 0x28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3f8:	f7fe fb9c 	bl	800cb34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3fc:	4b5c      	ldr	r3, [pc, #368]	@ (800e570 <pvPortMalloc+0x184>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d101      	bne.n	800e408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e404:	f000 f924 	bl	800e650 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e408:	4b5a      	ldr	r3, [pc, #360]	@ (800e574 <pvPortMalloc+0x188>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4013      	ands	r3, r2
 800e410:	2b00      	cmp	r3, #0
 800e412:	f040 8095 	bne.w	800e540 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d01e      	beq.n	800e45a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e41c:	2208      	movs	r2, #8
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4413      	add	r3, r2
 800e422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f003 0307 	and.w	r3, r3, #7
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d015      	beq.n	800e45a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f023 0307 	bic.w	r3, r3, #7
 800e434:	3308      	adds	r3, #8
 800e436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f003 0307 	and.w	r3, r3, #7
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00b      	beq.n	800e45a <pvPortMalloc+0x6e>
	__asm volatile
 800e442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e446:	f383 8811 	msr	BASEPRI, r3
 800e44a:	f3bf 8f6f 	isb	sy
 800e44e:	f3bf 8f4f 	dsb	sy
 800e452:	617b      	str	r3, [r7, #20]
}
 800e454:	bf00      	nop
 800e456:	bf00      	nop
 800e458:	e7fd      	b.n	800e456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d06f      	beq.n	800e540 <pvPortMalloc+0x154>
 800e460:	4b45      	ldr	r3, [pc, #276]	@ (800e578 <pvPortMalloc+0x18c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	429a      	cmp	r2, r3
 800e468:	d86a      	bhi.n	800e540 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e46a:	4b44      	ldr	r3, [pc, #272]	@ (800e57c <pvPortMalloc+0x190>)
 800e46c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e46e:	4b43      	ldr	r3, [pc, #268]	@ (800e57c <pvPortMalloc+0x190>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e474:	e004      	b.n	800e480 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	429a      	cmp	r2, r3
 800e488:	d903      	bls.n	800e492 <pvPortMalloc+0xa6>
 800e48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1f1      	bne.n	800e476 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e492:	4b37      	ldr	r3, [pc, #220]	@ (800e570 <pvPortMalloc+0x184>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e498:	429a      	cmp	r2, r3
 800e49a:	d051      	beq.n	800e540 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e49c:	6a3b      	ldr	r3, [r7, #32]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2208      	movs	r2, #8
 800e4a2:	4413      	add	r3, r2
 800e4a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	1ad2      	subs	r2, r2, r3
 800e4b6:	2308      	movs	r3, #8
 800e4b8:	005b      	lsls	r3, r3, #1
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d920      	bls.n	800e500 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	f003 0307 	and.w	r3, r3, #7
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00b      	beq.n	800e4e8 <pvPortMalloc+0xfc>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	613b      	str	r3, [r7, #16]
}
 800e4e2:	bf00      	nop
 800e4e4:	bf00      	nop
 800e4e6:	e7fd      	b.n	800e4e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ea:	685a      	ldr	r2, [r3, #4]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	1ad2      	subs	r2, r2, r3
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4fa:	69b8      	ldr	r0, [r7, #24]
 800e4fc:	f000 f90a 	bl	800e714 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e500:	4b1d      	ldr	r3, [pc, #116]	@ (800e578 <pvPortMalloc+0x18c>)
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	4a1b      	ldr	r2, [pc, #108]	@ (800e578 <pvPortMalloc+0x18c>)
 800e50c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e50e:	4b1a      	ldr	r3, [pc, #104]	@ (800e578 <pvPortMalloc+0x18c>)
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	4b1b      	ldr	r3, [pc, #108]	@ (800e580 <pvPortMalloc+0x194>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	429a      	cmp	r2, r3
 800e518:	d203      	bcs.n	800e522 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e51a:	4b17      	ldr	r3, [pc, #92]	@ (800e578 <pvPortMalloc+0x18c>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4a18      	ldr	r2, [pc, #96]	@ (800e580 <pvPortMalloc+0x194>)
 800e520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e524:	685a      	ldr	r2, [r3, #4]
 800e526:	4b13      	ldr	r3, [pc, #76]	@ (800e574 <pvPortMalloc+0x188>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	431a      	orrs	r2, r3
 800e52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e536:	4b13      	ldr	r3, [pc, #76]	@ (800e584 <pvPortMalloc+0x198>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3301      	adds	r3, #1
 800e53c:	4a11      	ldr	r2, [pc, #68]	@ (800e584 <pvPortMalloc+0x198>)
 800e53e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e540:	f7fe fb06 	bl	800cb50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00b      	beq.n	800e566 <pvPortMalloc+0x17a>
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	60fb      	str	r3, [r7, #12]
}
 800e560:	bf00      	nop
 800e562:	bf00      	nop
 800e564:	e7fd      	b.n	800e562 <pvPortMalloc+0x176>
	return pvReturn;
 800e566:	69fb      	ldr	r3, [r7, #28]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3728      	adds	r7, #40	@ 0x28
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	200056a4 	.word	0x200056a4
 800e574:	200056b8 	.word	0x200056b8
 800e578:	200056a8 	.word	0x200056a8
 800e57c:	2000569c 	.word	0x2000569c
 800e580:	200056ac 	.word	0x200056ac
 800e584:	200056b0 	.word	0x200056b0

0800e588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d04f      	beq.n	800e63a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e59a:	2308      	movs	r3, #8
 800e59c:	425b      	negs	r3, r3
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	4b25      	ldr	r3, [pc, #148]	@ (800e644 <vPortFree+0xbc>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d10b      	bne.n	800e5ce <vPortFree+0x46>
	__asm volatile
 800e5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ba:	f383 8811 	msr	BASEPRI, r3
 800e5be:	f3bf 8f6f 	isb	sy
 800e5c2:	f3bf 8f4f 	dsb	sy
 800e5c6:	60fb      	str	r3, [r7, #12]
}
 800e5c8:	bf00      	nop
 800e5ca:	bf00      	nop
 800e5cc:	e7fd      	b.n	800e5ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00b      	beq.n	800e5ee <vPortFree+0x66>
	__asm volatile
 800e5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	60bb      	str	r3, [r7, #8]
}
 800e5e8:	bf00      	nop
 800e5ea:	bf00      	nop
 800e5ec:	e7fd      	b.n	800e5ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	4b14      	ldr	r3, [pc, #80]	@ (800e644 <vPortFree+0xbc>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4013      	ands	r3, r2
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d01e      	beq.n	800e63a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d11a      	bne.n	800e63a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	685a      	ldr	r2, [r3, #4]
 800e608:	4b0e      	ldr	r3, [pc, #56]	@ (800e644 <vPortFree+0xbc>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	43db      	mvns	r3, r3
 800e60e:	401a      	ands	r2, r3
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e614:	f7fe fa8e 	bl	800cb34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	685a      	ldr	r2, [r3, #4]
 800e61c:	4b0a      	ldr	r3, [pc, #40]	@ (800e648 <vPortFree+0xc0>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4413      	add	r3, r2
 800e622:	4a09      	ldr	r2, [pc, #36]	@ (800e648 <vPortFree+0xc0>)
 800e624:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e626:	6938      	ldr	r0, [r7, #16]
 800e628:	f000 f874 	bl	800e714 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e62c:	4b07      	ldr	r3, [pc, #28]	@ (800e64c <vPortFree+0xc4>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	3301      	adds	r3, #1
 800e632:	4a06      	ldr	r2, [pc, #24]	@ (800e64c <vPortFree+0xc4>)
 800e634:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e636:	f7fe fa8b 	bl	800cb50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e63a:	bf00      	nop
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	200056b8 	.word	0x200056b8
 800e648:	200056a8 	.word	0x200056a8
 800e64c:	200056b4 	.word	0x200056b4

0800e650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e656:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e65a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e65c:	4b27      	ldr	r3, [pc, #156]	@ (800e6fc <prvHeapInit+0xac>)
 800e65e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f003 0307 	and.w	r3, r3, #7
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00c      	beq.n	800e684 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	3307      	adds	r3, #7
 800e66e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f023 0307 	bic.w	r3, r3, #7
 800e676:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e678:	68ba      	ldr	r2, [r7, #8]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6fc <prvHeapInit+0xac>)
 800e680:	4413      	add	r3, r2
 800e682:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e688:	4a1d      	ldr	r2, [pc, #116]	@ (800e700 <prvHeapInit+0xb0>)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e68e:	4b1c      	ldr	r3, [pc, #112]	@ (800e700 <prvHeapInit+0xb0>)
 800e690:	2200      	movs	r2, #0
 800e692:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	4413      	add	r3, r2
 800e69a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e69c:	2208      	movs	r2, #8
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	1a9b      	subs	r3, r3, r2
 800e6a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f023 0307 	bic.w	r3, r3, #7
 800e6aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	4a15      	ldr	r2, [pc, #84]	@ (800e704 <prvHeapInit+0xb4>)
 800e6b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6b2:	4b14      	ldr	r3, [pc, #80]	@ (800e704 <prvHeapInit+0xb4>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6ba:	4b12      	ldr	r3, [pc, #72]	@ (800e704 <prvHeapInit+0xb4>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	1ad2      	subs	r2, r2, r3
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e704 <prvHeapInit+0xb4>)
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	4a0a      	ldr	r2, [pc, #40]	@ (800e708 <prvHeapInit+0xb8>)
 800e6de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	4a09      	ldr	r2, [pc, #36]	@ (800e70c <prvHeapInit+0xbc>)
 800e6e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6e8:	4b09      	ldr	r3, [pc, #36]	@ (800e710 <prvHeapInit+0xc0>)
 800e6ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e6ee:	601a      	str	r2, [r3, #0]
}
 800e6f0:	bf00      	nop
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	20001a9c 	.word	0x20001a9c
 800e700:	2000569c 	.word	0x2000569c
 800e704:	200056a4 	.word	0x200056a4
 800e708:	200056ac 	.word	0x200056ac
 800e70c:	200056a8 	.word	0x200056a8
 800e710:	200056b8 	.word	0x200056b8

0800e714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e714:	b480      	push	{r7}
 800e716:	b085      	sub	sp, #20
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e71c:	4b28      	ldr	r3, [pc, #160]	@ (800e7c0 <prvInsertBlockIntoFreeList+0xac>)
 800e71e:	60fb      	str	r3, [r7, #12]
 800e720:	e002      	b.n	800e728 <prvInsertBlockIntoFreeList+0x14>
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	60fb      	str	r3, [r7, #12]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d8f7      	bhi.n	800e722 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	4413      	add	r3, r2
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	429a      	cmp	r2, r3
 800e742:	d108      	bne.n	800e756 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	685a      	ldr	r2, [r3, #4]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	441a      	add	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	68ba      	ldr	r2, [r7, #8]
 800e760:	441a      	add	r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	429a      	cmp	r2, r3
 800e768:	d118      	bne.n	800e79c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	4b15      	ldr	r3, [pc, #84]	@ (800e7c4 <prvInsertBlockIntoFreeList+0xb0>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	429a      	cmp	r2, r3
 800e774:	d00d      	beq.n	800e792 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	685a      	ldr	r2, [r3, #4]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	441a      	add	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	601a      	str	r2, [r3, #0]
 800e790:	e008      	b.n	800e7a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e792:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c4 <prvInsertBlockIntoFreeList+0xb0>)
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	601a      	str	r2, [r3, #0]
 800e79a:	e003      	b.n	800e7a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681a      	ldr	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d002      	beq.n	800e7b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7b2:	bf00      	nop
 800e7b4:	3714      	adds	r7, #20
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	2000569c 	.word	0x2000569c
 800e7c4:	200056a4 	.word	0x200056a4

0800e7c8 <__cvt>:
 800e7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7cc:	ec57 6b10 	vmov	r6, r7, d0
 800e7d0:	2f00      	cmp	r7, #0
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	463b      	mov	r3, r7
 800e7d8:	bfbb      	ittet	lt
 800e7da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e7de:	461f      	movlt	r7, r3
 800e7e0:	2300      	movge	r3, #0
 800e7e2:	232d      	movlt	r3, #45	@ 0x2d
 800e7e4:	700b      	strb	r3, [r1, #0]
 800e7e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e7ec:	4691      	mov	r9, r2
 800e7ee:	f023 0820 	bic.w	r8, r3, #32
 800e7f2:	bfbc      	itt	lt
 800e7f4:	4632      	movlt	r2, r6
 800e7f6:	4616      	movlt	r6, r2
 800e7f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7fc:	d005      	beq.n	800e80a <__cvt+0x42>
 800e7fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e802:	d100      	bne.n	800e806 <__cvt+0x3e>
 800e804:	3401      	adds	r4, #1
 800e806:	2102      	movs	r1, #2
 800e808:	e000      	b.n	800e80c <__cvt+0x44>
 800e80a:	2103      	movs	r1, #3
 800e80c:	ab03      	add	r3, sp, #12
 800e80e:	9301      	str	r3, [sp, #4]
 800e810:	ab02      	add	r3, sp, #8
 800e812:	9300      	str	r3, [sp, #0]
 800e814:	ec47 6b10 	vmov	d0, r6, r7
 800e818:	4653      	mov	r3, sl
 800e81a:	4622      	mov	r2, r4
 800e81c:	f000 fec0 	bl	800f5a0 <_dtoa_r>
 800e820:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e824:	4605      	mov	r5, r0
 800e826:	d119      	bne.n	800e85c <__cvt+0x94>
 800e828:	f019 0f01 	tst.w	r9, #1
 800e82c:	d00e      	beq.n	800e84c <__cvt+0x84>
 800e82e:	eb00 0904 	add.w	r9, r0, r4
 800e832:	2200      	movs	r2, #0
 800e834:	2300      	movs	r3, #0
 800e836:	4630      	mov	r0, r6
 800e838:	4639      	mov	r1, r7
 800e83a:	f7f2 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800e83e:	b108      	cbz	r0, 800e844 <__cvt+0x7c>
 800e840:	f8cd 900c 	str.w	r9, [sp, #12]
 800e844:	2230      	movs	r2, #48	@ 0x30
 800e846:	9b03      	ldr	r3, [sp, #12]
 800e848:	454b      	cmp	r3, r9
 800e84a:	d31e      	bcc.n	800e88a <__cvt+0xc2>
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e850:	1b5b      	subs	r3, r3, r5
 800e852:	4628      	mov	r0, r5
 800e854:	6013      	str	r3, [r2, #0]
 800e856:	b004      	add	sp, #16
 800e858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e85c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e860:	eb00 0904 	add.w	r9, r0, r4
 800e864:	d1e5      	bne.n	800e832 <__cvt+0x6a>
 800e866:	7803      	ldrb	r3, [r0, #0]
 800e868:	2b30      	cmp	r3, #48	@ 0x30
 800e86a:	d10a      	bne.n	800e882 <__cvt+0xba>
 800e86c:	2200      	movs	r2, #0
 800e86e:	2300      	movs	r3, #0
 800e870:	4630      	mov	r0, r6
 800e872:	4639      	mov	r1, r7
 800e874:	f7f2 f928 	bl	8000ac8 <__aeabi_dcmpeq>
 800e878:	b918      	cbnz	r0, 800e882 <__cvt+0xba>
 800e87a:	f1c4 0401 	rsb	r4, r4, #1
 800e87e:	f8ca 4000 	str.w	r4, [sl]
 800e882:	f8da 3000 	ldr.w	r3, [sl]
 800e886:	4499      	add	r9, r3
 800e888:	e7d3      	b.n	800e832 <__cvt+0x6a>
 800e88a:	1c59      	adds	r1, r3, #1
 800e88c:	9103      	str	r1, [sp, #12]
 800e88e:	701a      	strb	r2, [r3, #0]
 800e890:	e7d9      	b.n	800e846 <__cvt+0x7e>

0800e892 <__exponent>:
 800e892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e894:	2900      	cmp	r1, #0
 800e896:	bfba      	itte	lt
 800e898:	4249      	neglt	r1, r1
 800e89a:	232d      	movlt	r3, #45	@ 0x2d
 800e89c:	232b      	movge	r3, #43	@ 0x2b
 800e89e:	2909      	cmp	r1, #9
 800e8a0:	7002      	strb	r2, [r0, #0]
 800e8a2:	7043      	strb	r3, [r0, #1]
 800e8a4:	dd29      	ble.n	800e8fa <__exponent+0x68>
 800e8a6:	f10d 0307 	add.w	r3, sp, #7
 800e8aa:	461d      	mov	r5, r3
 800e8ac:	270a      	movs	r7, #10
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	fbb1 f6f7 	udiv	r6, r1, r7
 800e8b4:	fb07 1416 	mls	r4, r7, r6, r1
 800e8b8:	3430      	adds	r4, #48	@ 0x30
 800e8ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e8be:	460c      	mov	r4, r1
 800e8c0:	2c63      	cmp	r4, #99	@ 0x63
 800e8c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	dcf1      	bgt.n	800e8ae <__exponent+0x1c>
 800e8ca:	3130      	adds	r1, #48	@ 0x30
 800e8cc:	1e94      	subs	r4, r2, #2
 800e8ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e8d2:	1c41      	adds	r1, r0, #1
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	42ab      	cmp	r3, r5
 800e8d8:	d30a      	bcc.n	800e8f0 <__exponent+0x5e>
 800e8da:	f10d 0309 	add.w	r3, sp, #9
 800e8de:	1a9b      	subs	r3, r3, r2
 800e8e0:	42ac      	cmp	r4, r5
 800e8e2:	bf88      	it	hi
 800e8e4:	2300      	movhi	r3, #0
 800e8e6:	3302      	adds	r3, #2
 800e8e8:	4403      	add	r3, r0
 800e8ea:	1a18      	subs	r0, r3, r0
 800e8ec:	b003      	add	sp, #12
 800e8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e8f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e8f8:	e7ed      	b.n	800e8d6 <__exponent+0x44>
 800e8fa:	2330      	movs	r3, #48	@ 0x30
 800e8fc:	3130      	adds	r1, #48	@ 0x30
 800e8fe:	7083      	strb	r3, [r0, #2]
 800e900:	70c1      	strb	r1, [r0, #3]
 800e902:	1d03      	adds	r3, r0, #4
 800e904:	e7f1      	b.n	800e8ea <__exponent+0x58>
	...

0800e908 <_printf_float>:
 800e908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e90c:	b08d      	sub	sp, #52	@ 0x34
 800e90e:	460c      	mov	r4, r1
 800e910:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e914:	4616      	mov	r6, r2
 800e916:	461f      	mov	r7, r3
 800e918:	4605      	mov	r5, r0
 800e91a:	f000 fcdb 	bl	800f2d4 <_localeconv_r>
 800e91e:	6803      	ldr	r3, [r0, #0]
 800e920:	9304      	str	r3, [sp, #16]
 800e922:	4618      	mov	r0, r3
 800e924:	f7f1 fca4 	bl	8000270 <strlen>
 800e928:	2300      	movs	r3, #0
 800e92a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e92c:	f8d8 3000 	ldr.w	r3, [r8]
 800e930:	9005      	str	r0, [sp, #20]
 800e932:	3307      	adds	r3, #7
 800e934:	f023 0307 	bic.w	r3, r3, #7
 800e938:	f103 0208 	add.w	r2, r3, #8
 800e93c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e940:	f8d4 b000 	ldr.w	fp, [r4]
 800e944:	f8c8 2000 	str.w	r2, [r8]
 800e948:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e94c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e950:	9307      	str	r3, [sp, #28]
 800e952:	f8cd 8018 	str.w	r8, [sp, #24]
 800e956:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e95a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e95e:	4b9c      	ldr	r3, [pc, #624]	@ (800ebd0 <_printf_float+0x2c8>)
 800e960:	f04f 32ff 	mov.w	r2, #4294967295
 800e964:	f7f2 f8e2 	bl	8000b2c <__aeabi_dcmpun>
 800e968:	bb70      	cbnz	r0, 800e9c8 <_printf_float+0xc0>
 800e96a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e96e:	4b98      	ldr	r3, [pc, #608]	@ (800ebd0 <_printf_float+0x2c8>)
 800e970:	f04f 32ff 	mov.w	r2, #4294967295
 800e974:	f7f2 f8bc 	bl	8000af0 <__aeabi_dcmple>
 800e978:	bb30      	cbnz	r0, 800e9c8 <_printf_float+0xc0>
 800e97a:	2200      	movs	r2, #0
 800e97c:	2300      	movs	r3, #0
 800e97e:	4640      	mov	r0, r8
 800e980:	4649      	mov	r1, r9
 800e982:	f7f2 f8ab 	bl	8000adc <__aeabi_dcmplt>
 800e986:	b110      	cbz	r0, 800e98e <_printf_float+0x86>
 800e988:	232d      	movs	r3, #45	@ 0x2d
 800e98a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e98e:	4a91      	ldr	r2, [pc, #580]	@ (800ebd4 <_printf_float+0x2cc>)
 800e990:	4b91      	ldr	r3, [pc, #580]	@ (800ebd8 <_printf_float+0x2d0>)
 800e992:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e996:	bf94      	ite	ls
 800e998:	4690      	movls	r8, r2
 800e99a:	4698      	movhi	r8, r3
 800e99c:	2303      	movs	r3, #3
 800e99e:	6123      	str	r3, [r4, #16]
 800e9a0:	f02b 0304 	bic.w	r3, fp, #4
 800e9a4:	6023      	str	r3, [r4, #0]
 800e9a6:	f04f 0900 	mov.w	r9, #0
 800e9aa:	9700      	str	r7, [sp, #0]
 800e9ac:	4633      	mov	r3, r6
 800e9ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f000 f9d2 	bl	800ed5c <_printf_common>
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	f040 808d 	bne.w	800ead8 <_printf_float+0x1d0>
 800e9be:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c2:	b00d      	add	sp, #52	@ 0x34
 800e9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c8:	4642      	mov	r2, r8
 800e9ca:	464b      	mov	r3, r9
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	f7f2 f8ac 	bl	8000b2c <__aeabi_dcmpun>
 800e9d4:	b140      	cbz	r0, 800e9e8 <_printf_float+0xe0>
 800e9d6:	464b      	mov	r3, r9
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	bfbc      	itt	lt
 800e9dc:	232d      	movlt	r3, #45	@ 0x2d
 800e9de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e9e2:	4a7e      	ldr	r2, [pc, #504]	@ (800ebdc <_printf_float+0x2d4>)
 800e9e4:	4b7e      	ldr	r3, [pc, #504]	@ (800ebe0 <_printf_float+0x2d8>)
 800e9e6:	e7d4      	b.n	800e992 <_printf_float+0x8a>
 800e9e8:	6863      	ldr	r3, [r4, #4]
 800e9ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e9ee:	9206      	str	r2, [sp, #24]
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	d13b      	bne.n	800ea6c <_printf_float+0x164>
 800e9f4:	2306      	movs	r3, #6
 800e9f6:	6063      	str	r3, [r4, #4]
 800e9f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	6022      	str	r2, [r4, #0]
 800ea00:	9303      	str	r3, [sp, #12]
 800ea02:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea04:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ea08:	ab09      	add	r3, sp, #36	@ 0x24
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	6861      	ldr	r1, [r4, #4]
 800ea0e:	ec49 8b10 	vmov	d0, r8, r9
 800ea12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ea16:	4628      	mov	r0, r5
 800ea18:	f7ff fed6 	bl	800e7c8 <__cvt>
 800ea1c:	9b06      	ldr	r3, [sp, #24]
 800ea1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea20:	2b47      	cmp	r3, #71	@ 0x47
 800ea22:	4680      	mov	r8, r0
 800ea24:	d129      	bne.n	800ea7a <_printf_float+0x172>
 800ea26:	1cc8      	adds	r0, r1, #3
 800ea28:	db02      	blt.n	800ea30 <_printf_float+0x128>
 800ea2a:	6863      	ldr	r3, [r4, #4]
 800ea2c:	4299      	cmp	r1, r3
 800ea2e:	dd41      	ble.n	800eab4 <_printf_float+0x1ac>
 800ea30:	f1aa 0a02 	sub.w	sl, sl, #2
 800ea34:	fa5f fa8a 	uxtb.w	sl, sl
 800ea38:	3901      	subs	r1, #1
 800ea3a:	4652      	mov	r2, sl
 800ea3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ea40:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea42:	f7ff ff26 	bl	800e892 <__exponent>
 800ea46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea48:	1813      	adds	r3, r2, r0
 800ea4a:	2a01      	cmp	r2, #1
 800ea4c:	4681      	mov	r9, r0
 800ea4e:	6123      	str	r3, [r4, #16]
 800ea50:	dc02      	bgt.n	800ea58 <_printf_float+0x150>
 800ea52:	6822      	ldr	r2, [r4, #0]
 800ea54:	07d2      	lsls	r2, r2, #31
 800ea56:	d501      	bpl.n	800ea5c <_printf_float+0x154>
 800ea58:	3301      	adds	r3, #1
 800ea5a:	6123      	str	r3, [r4, #16]
 800ea5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d0a2      	beq.n	800e9aa <_printf_float+0xa2>
 800ea64:	232d      	movs	r3, #45	@ 0x2d
 800ea66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea6a:	e79e      	b.n	800e9aa <_printf_float+0xa2>
 800ea6c:	9a06      	ldr	r2, [sp, #24]
 800ea6e:	2a47      	cmp	r2, #71	@ 0x47
 800ea70:	d1c2      	bne.n	800e9f8 <_printf_float+0xf0>
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1c0      	bne.n	800e9f8 <_printf_float+0xf0>
 800ea76:	2301      	movs	r3, #1
 800ea78:	e7bd      	b.n	800e9f6 <_printf_float+0xee>
 800ea7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea7e:	d9db      	bls.n	800ea38 <_printf_float+0x130>
 800ea80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea84:	d118      	bne.n	800eab8 <_printf_float+0x1b0>
 800ea86:	2900      	cmp	r1, #0
 800ea88:	6863      	ldr	r3, [r4, #4]
 800ea8a:	dd0b      	ble.n	800eaa4 <_printf_float+0x19c>
 800ea8c:	6121      	str	r1, [r4, #16]
 800ea8e:	b913      	cbnz	r3, 800ea96 <_printf_float+0x18e>
 800ea90:	6822      	ldr	r2, [r4, #0]
 800ea92:	07d0      	lsls	r0, r2, #31
 800ea94:	d502      	bpl.n	800ea9c <_printf_float+0x194>
 800ea96:	3301      	adds	r3, #1
 800ea98:	440b      	add	r3, r1
 800ea9a:	6123      	str	r3, [r4, #16]
 800ea9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea9e:	f04f 0900 	mov.w	r9, #0
 800eaa2:	e7db      	b.n	800ea5c <_printf_float+0x154>
 800eaa4:	b913      	cbnz	r3, 800eaac <_printf_float+0x1a4>
 800eaa6:	6822      	ldr	r2, [r4, #0]
 800eaa8:	07d2      	lsls	r2, r2, #31
 800eaaa:	d501      	bpl.n	800eab0 <_printf_float+0x1a8>
 800eaac:	3302      	adds	r3, #2
 800eaae:	e7f4      	b.n	800ea9a <_printf_float+0x192>
 800eab0:	2301      	movs	r3, #1
 800eab2:	e7f2      	b.n	800ea9a <_printf_float+0x192>
 800eab4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800eab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaba:	4299      	cmp	r1, r3
 800eabc:	db05      	blt.n	800eaca <_printf_float+0x1c2>
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	6121      	str	r1, [r4, #16]
 800eac2:	07d8      	lsls	r0, r3, #31
 800eac4:	d5ea      	bpl.n	800ea9c <_printf_float+0x194>
 800eac6:	1c4b      	adds	r3, r1, #1
 800eac8:	e7e7      	b.n	800ea9a <_printf_float+0x192>
 800eaca:	2900      	cmp	r1, #0
 800eacc:	bfd4      	ite	le
 800eace:	f1c1 0202 	rsble	r2, r1, #2
 800ead2:	2201      	movgt	r2, #1
 800ead4:	4413      	add	r3, r2
 800ead6:	e7e0      	b.n	800ea9a <_printf_float+0x192>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	055a      	lsls	r2, r3, #21
 800eadc:	d407      	bmi.n	800eaee <_printf_float+0x1e6>
 800eade:	6923      	ldr	r3, [r4, #16]
 800eae0:	4642      	mov	r2, r8
 800eae2:	4631      	mov	r1, r6
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b8      	blx	r7
 800eae8:	3001      	adds	r0, #1
 800eaea:	d12b      	bne.n	800eb44 <_printf_float+0x23c>
 800eaec:	e767      	b.n	800e9be <_printf_float+0xb6>
 800eaee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eaf2:	f240 80dd 	bls.w	800ecb0 <_printf_float+0x3a8>
 800eaf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eafa:	2200      	movs	r2, #0
 800eafc:	2300      	movs	r3, #0
 800eafe:	f7f1 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d033      	beq.n	800eb6e <_printf_float+0x266>
 800eb06:	4a37      	ldr	r2, [pc, #220]	@ (800ebe4 <_printf_float+0x2dc>)
 800eb08:	2301      	movs	r3, #1
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	47b8      	blx	r7
 800eb10:	3001      	adds	r0, #1
 800eb12:	f43f af54 	beq.w	800e9be <_printf_float+0xb6>
 800eb16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800eb1a:	4543      	cmp	r3, r8
 800eb1c:	db02      	blt.n	800eb24 <_printf_float+0x21c>
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	07d8      	lsls	r0, r3, #31
 800eb22:	d50f      	bpl.n	800eb44 <_printf_float+0x23c>
 800eb24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb28:	4631      	mov	r1, r6
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	47b8      	blx	r7
 800eb2e:	3001      	adds	r0, #1
 800eb30:	f43f af45 	beq.w	800e9be <_printf_float+0xb6>
 800eb34:	f04f 0900 	mov.w	r9, #0
 800eb38:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb3c:	f104 0a1a 	add.w	sl, r4, #26
 800eb40:	45c8      	cmp	r8, r9
 800eb42:	dc09      	bgt.n	800eb58 <_printf_float+0x250>
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	079b      	lsls	r3, r3, #30
 800eb48:	f100 8103 	bmi.w	800ed52 <_printf_float+0x44a>
 800eb4c:	68e0      	ldr	r0, [r4, #12]
 800eb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb50:	4298      	cmp	r0, r3
 800eb52:	bfb8      	it	lt
 800eb54:	4618      	movlt	r0, r3
 800eb56:	e734      	b.n	800e9c2 <_printf_float+0xba>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	4652      	mov	r2, sl
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	4628      	mov	r0, r5
 800eb60:	47b8      	blx	r7
 800eb62:	3001      	adds	r0, #1
 800eb64:	f43f af2b 	beq.w	800e9be <_printf_float+0xb6>
 800eb68:	f109 0901 	add.w	r9, r9, #1
 800eb6c:	e7e8      	b.n	800eb40 <_printf_float+0x238>
 800eb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	dc39      	bgt.n	800ebe8 <_printf_float+0x2e0>
 800eb74:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe4 <_printf_float+0x2dc>)
 800eb76:	2301      	movs	r3, #1
 800eb78:	4631      	mov	r1, r6
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	47b8      	blx	r7
 800eb7e:	3001      	adds	r0, #1
 800eb80:	f43f af1d 	beq.w	800e9be <_printf_float+0xb6>
 800eb84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eb88:	ea59 0303 	orrs.w	r3, r9, r3
 800eb8c:	d102      	bne.n	800eb94 <_printf_float+0x28c>
 800eb8e:	6823      	ldr	r3, [r4, #0]
 800eb90:	07d9      	lsls	r1, r3, #31
 800eb92:	d5d7      	bpl.n	800eb44 <_printf_float+0x23c>
 800eb94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb98:	4631      	mov	r1, r6
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	47b8      	blx	r7
 800eb9e:	3001      	adds	r0, #1
 800eba0:	f43f af0d 	beq.w	800e9be <_printf_float+0xb6>
 800eba4:	f04f 0a00 	mov.w	sl, #0
 800eba8:	f104 0b1a 	add.w	fp, r4, #26
 800ebac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebae:	425b      	negs	r3, r3
 800ebb0:	4553      	cmp	r3, sl
 800ebb2:	dc01      	bgt.n	800ebb8 <_printf_float+0x2b0>
 800ebb4:	464b      	mov	r3, r9
 800ebb6:	e793      	b.n	800eae0 <_printf_float+0x1d8>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	465a      	mov	r2, fp
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	47b8      	blx	r7
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	f43f aefb 	beq.w	800e9be <_printf_float+0xb6>
 800ebc8:	f10a 0a01 	add.w	sl, sl, #1
 800ebcc:	e7ee      	b.n	800ebac <_printf_float+0x2a4>
 800ebce:	bf00      	nop
 800ebd0:	7fefffff 	.word	0x7fefffff
 800ebd4:	08012784 	.word	0x08012784
 800ebd8:	08012788 	.word	0x08012788
 800ebdc:	0801278c 	.word	0x0801278c
 800ebe0:	08012790 	.word	0x08012790
 800ebe4:	08012794 	.word	0x08012794
 800ebe8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ebea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ebee:	4553      	cmp	r3, sl
 800ebf0:	bfa8      	it	ge
 800ebf2:	4653      	movge	r3, sl
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	4699      	mov	r9, r3
 800ebf8:	dc36      	bgt.n	800ec68 <_printf_float+0x360>
 800ebfa:	f04f 0b00 	mov.w	fp, #0
 800ebfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec02:	f104 021a 	add.w	r2, r4, #26
 800ec06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ec08:	9306      	str	r3, [sp, #24]
 800ec0a:	eba3 0309 	sub.w	r3, r3, r9
 800ec0e:	455b      	cmp	r3, fp
 800ec10:	dc31      	bgt.n	800ec76 <_printf_float+0x36e>
 800ec12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec14:	459a      	cmp	sl, r3
 800ec16:	dc3a      	bgt.n	800ec8e <_printf_float+0x386>
 800ec18:	6823      	ldr	r3, [r4, #0]
 800ec1a:	07da      	lsls	r2, r3, #31
 800ec1c:	d437      	bmi.n	800ec8e <_printf_float+0x386>
 800ec1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec20:	ebaa 0903 	sub.w	r9, sl, r3
 800ec24:	9b06      	ldr	r3, [sp, #24]
 800ec26:	ebaa 0303 	sub.w	r3, sl, r3
 800ec2a:	4599      	cmp	r9, r3
 800ec2c:	bfa8      	it	ge
 800ec2e:	4699      	movge	r9, r3
 800ec30:	f1b9 0f00 	cmp.w	r9, #0
 800ec34:	dc33      	bgt.n	800ec9e <_printf_float+0x396>
 800ec36:	f04f 0800 	mov.w	r8, #0
 800ec3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec3e:	f104 0b1a 	add.w	fp, r4, #26
 800ec42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec44:	ebaa 0303 	sub.w	r3, sl, r3
 800ec48:	eba3 0309 	sub.w	r3, r3, r9
 800ec4c:	4543      	cmp	r3, r8
 800ec4e:	f77f af79 	ble.w	800eb44 <_printf_float+0x23c>
 800ec52:	2301      	movs	r3, #1
 800ec54:	465a      	mov	r2, fp
 800ec56:	4631      	mov	r1, r6
 800ec58:	4628      	mov	r0, r5
 800ec5a:	47b8      	blx	r7
 800ec5c:	3001      	adds	r0, #1
 800ec5e:	f43f aeae 	beq.w	800e9be <_printf_float+0xb6>
 800ec62:	f108 0801 	add.w	r8, r8, #1
 800ec66:	e7ec      	b.n	800ec42 <_printf_float+0x33a>
 800ec68:	4642      	mov	r2, r8
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	47b8      	blx	r7
 800ec70:	3001      	adds	r0, #1
 800ec72:	d1c2      	bne.n	800ebfa <_printf_float+0x2f2>
 800ec74:	e6a3      	b.n	800e9be <_printf_float+0xb6>
 800ec76:	2301      	movs	r3, #1
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	9206      	str	r2, [sp, #24]
 800ec7e:	47b8      	blx	r7
 800ec80:	3001      	adds	r0, #1
 800ec82:	f43f ae9c 	beq.w	800e9be <_printf_float+0xb6>
 800ec86:	9a06      	ldr	r2, [sp, #24]
 800ec88:	f10b 0b01 	add.w	fp, fp, #1
 800ec8c:	e7bb      	b.n	800ec06 <_printf_float+0x2fe>
 800ec8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec92:	4631      	mov	r1, r6
 800ec94:	4628      	mov	r0, r5
 800ec96:	47b8      	blx	r7
 800ec98:	3001      	adds	r0, #1
 800ec9a:	d1c0      	bne.n	800ec1e <_printf_float+0x316>
 800ec9c:	e68f      	b.n	800e9be <_printf_float+0xb6>
 800ec9e:	9a06      	ldr	r2, [sp, #24]
 800eca0:	464b      	mov	r3, r9
 800eca2:	4442      	add	r2, r8
 800eca4:	4631      	mov	r1, r6
 800eca6:	4628      	mov	r0, r5
 800eca8:	47b8      	blx	r7
 800ecaa:	3001      	adds	r0, #1
 800ecac:	d1c3      	bne.n	800ec36 <_printf_float+0x32e>
 800ecae:	e686      	b.n	800e9be <_printf_float+0xb6>
 800ecb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ecb4:	f1ba 0f01 	cmp.w	sl, #1
 800ecb8:	dc01      	bgt.n	800ecbe <_printf_float+0x3b6>
 800ecba:	07db      	lsls	r3, r3, #31
 800ecbc:	d536      	bpl.n	800ed2c <_printf_float+0x424>
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	4642      	mov	r2, r8
 800ecc2:	4631      	mov	r1, r6
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	47b8      	blx	r7
 800ecc8:	3001      	adds	r0, #1
 800ecca:	f43f ae78 	beq.w	800e9be <_printf_float+0xb6>
 800ecce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecd2:	4631      	mov	r1, r6
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	47b8      	blx	r7
 800ecd8:	3001      	adds	r0, #1
 800ecda:	f43f ae70 	beq.w	800e9be <_printf_float+0xb6>
 800ecde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ece2:	2200      	movs	r2, #0
 800ece4:	2300      	movs	r3, #0
 800ece6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecea:	f7f1 feed 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecee:	b9c0      	cbnz	r0, 800ed22 <_printf_float+0x41a>
 800ecf0:	4653      	mov	r3, sl
 800ecf2:	f108 0201 	add.w	r2, r8, #1
 800ecf6:	4631      	mov	r1, r6
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	47b8      	blx	r7
 800ecfc:	3001      	adds	r0, #1
 800ecfe:	d10c      	bne.n	800ed1a <_printf_float+0x412>
 800ed00:	e65d      	b.n	800e9be <_printf_float+0xb6>
 800ed02:	2301      	movs	r3, #1
 800ed04:	465a      	mov	r2, fp
 800ed06:	4631      	mov	r1, r6
 800ed08:	4628      	mov	r0, r5
 800ed0a:	47b8      	blx	r7
 800ed0c:	3001      	adds	r0, #1
 800ed0e:	f43f ae56 	beq.w	800e9be <_printf_float+0xb6>
 800ed12:	f108 0801 	add.w	r8, r8, #1
 800ed16:	45d0      	cmp	r8, sl
 800ed18:	dbf3      	blt.n	800ed02 <_printf_float+0x3fa>
 800ed1a:	464b      	mov	r3, r9
 800ed1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ed20:	e6df      	b.n	800eae2 <_printf_float+0x1da>
 800ed22:	f04f 0800 	mov.w	r8, #0
 800ed26:	f104 0b1a 	add.w	fp, r4, #26
 800ed2a:	e7f4      	b.n	800ed16 <_printf_float+0x40e>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	4642      	mov	r2, r8
 800ed30:	e7e1      	b.n	800ecf6 <_printf_float+0x3ee>
 800ed32:	2301      	movs	r3, #1
 800ed34:	464a      	mov	r2, r9
 800ed36:	4631      	mov	r1, r6
 800ed38:	4628      	mov	r0, r5
 800ed3a:	47b8      	blx	r7
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	f43f ae3e 	beq.w	800e9be <_printf_float+0xb6>
 800ed42:	f108 0801 	add.w	r8, r8, #1
 800ed46:	68e3      	ldr	r3, [r4, #12]
 800ed48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed4a:	1a5b      	subs	r3, r3, r1
 800ed4c:	4543      	cmp	r3, r8
 800ed4e:	dcf0      	bgt.n	800ed32 <_printf_float+0x42a>
 800ed50:	e6fc      	b.n	800eb4c <_printf_float+0x244>
 800ed52:	f04f 0800 	mov.w	r8, #0
 800ed56:	f104 0919 	add.w	r9, r4, #25
 800ed5a:	e7f4      	b.n	800ed46 <_printf_float+0x43e>

0800ed5c <_printf_common>:
 800ed5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed60:	4616      	mov	r6, r2
 800ed62:	4698      	mov	r8, r3
 800ed64:	688a      	ldr	r2, [r1, #8]
 800ed66:	690b      	ldr	r3, [r1, #16]
 800ed68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	bfb8      	it	lt
 800ed70:	4613      	movlt	r3, r2
 800ed72:	6033      	str	r3, [r6, #0]
 800ed74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed78:	4607      	mov	r7, r0
 800ed7a:	460c      	mov	r4, r1
 800ed7c:	b10a      	cbz	r2, 800ed82 <_printf_common+0x26>
 800ed7e:	3301      	adds	r3, #1
 800ed80:	6033      	str	r3, [r6, #0]
 800ed82:	6823      	ldr	r3, [r4, #0]
 800ed84:	0699      	lsls	r1, r3, #26
 800ed86:	bf42      	ittt	mi
 800ed88:	6833      	ldrmi	r3, [r6, #0]
 800ed8a:	3302      	addmi	r3, #2
 800ed8c:	6033      	strmi	r3, [r6, #0]
 800ed8e:	6825      	ldr	r5, [r4, #0]
 800ed90:	f015 0506 	ands.w	r5, r5, #6
 800ed94:	d106      	bne.n	800eda4 <_printf_common+0x48>
 800ed96:	f104 0a19 	add.w	sl, r4, #25
 800ed9a:	68e3      	ldr	r3, [r4, #12]
 800ed9c:	6832      	ldr	r2, [r6, #0]
 800ed9e:	1a9b      	subs	r3, r3, r2
 800eda0:	42ab      	cmp	r3, r5
 800eda2:	dc26      	bgt.n	800edf2 <_printf_common+0x96>
 800eda4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eda8:	6822      	ldr	r2, [r4, #0]
 800edaa:	3b00      	subs	r3, #0
 800edac:	bf18      	it	ne
 800edae:	2301      	movne	r3, #1
 800edb0:	0692      	lsls	r2, r2, #26
 800edb2:	d42b      	bmi.n	800ee0c <_printf_common+0xb0>
 800edb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800edb8:	4641      	mov	r1, r8
 800edba:	4638      	mov	r0, r7
 800edbc:	47c8      	blx	r9
 800edbe:	3001      	adds	r0, #1
 800edc0:	d01e      	beq.n	800ee00 <_printf_common+0xa4>
 800edc2:	6823      	ldr	r3, [r4, #0]
 800edc4:	6922      	ldr	r2, [r4, #16]
 800edc6:	f003 0306 	and.w	r3, r3, #6
 800edca:	2b04      	cmp	r3, #4
 800edcc:	bf02      	ittt	eq
 800edce:	68e5      	ldreq	r5, [r4, #12]
 800edd0:	6833      	ldreq	r3, [r6, #0]
 800edd2:	1aed      	subeq	r5, r5, r3
 800edd4:	68a3      	ldr	r3, [r4, #8]
 800edd6:	bf0c      	ite	eq
 800edd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eddc:	2500      	movne	r5, #0
 800edde:	4293      	cmp	r3, r2
 800ede0:	bfc4      	itt	gt
 800ede2:	1a9b      	subgt	r3, r3, r2
 800ede4:	18ed      	addgt	r5, r5, r3
 800ede6:	2600      	movs	r6, #0
 800ede8:	341a      	adds	r4, #26
 800edea:	42b5      	cmp	r5, r6
 800edec:	d11a      	bne.n	800ee24 <_printf_common+0xc8>
 800edee:	2000      	movs	r0, #0
 800edf0:	e008      	b.n	800ee04 <_printf_common+0xa8>
 800edf2:	2301      	movs	r3, #1
 800edf4:	4652      	mov	r2, sl
 800edf6:	4641      	mov	r1, r8
 800edf8:	4638      	mov	r0, r7
 800edfa:	47c8      	blx	r9
 800edfc:	3001      	adds	r0, #1
 800edfe:	d103      	bne.n	800ee08 <_printf_common+0xac>
 800ee00:	f04f 30ff 	mov.w	r0, #4294967295
 800ee04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee08:	3501      	adds	r5, #1
 800ee0a:	e7c6      	b.n	800ed9a <_printf_common+0x3e>
 800ee0c:	18e1      	adds	r1, r4, r3
 800ee0e:	1c5a      	adds	r2, r3, #1
 800ee10:	2030      	movs	r0, #48	@ 0x30
 800ee12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ee16:	4422      	add	r2, r4
 800ee18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ee1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ee20:	3302      	adds	r3, #2
 800ee22:	e7c7      	b.n	800edb4 <_printf_common+0x58>
 800ee24:	2301      	movs	r3, #1
 800ee26:	4622      	mov	r2, r4
 800ee28:	4641      	mov	r1, r8
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	47c8      	blx	r9
 800ee2e:	3001      	adds	r0, #1
 800ee30:	d0e6      	beq.n	800ee00 <_printf_common+0xa4>
 800ee32:	3601      	adds	r6, #1
 800ee34:	e7d9      	b.n	800edea <_printf_common+0x8e>
	...

0800ee38 <_printf_i>:
 800ee38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee3c:	7e0f      	ldrb	r7, [r1, #24]
 800ee3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee40:	2f78      	cmp	r7, #120	@ 0x78
 800ee42:	4691      	mov	r9, r2
 800ee44:	4680      	mov	r8, r0
 800ee46:	460c      	mov	r4, r1
 800ee48:	469a      	mov	sl, r3
 800ee4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee4e:	d807      	bhi.n	800ee60 <_printf_i+0x28>
 800ee50:	2f62      	cmp	r7, #98	@ 0x62
 800ee52:	d80a      	bhi.n	800ee6a <_printf_i+0x32>
 800ee54:	2f00      	cmp	r7, #0
 800ee56:	f000 80d2 	beq.w	800effe <_printf_i+0x1c6>
 800ee5a:	2f58      	cmp	r7, #88	@ 0x58
 800ee5c:	f000 80b9 	beq.w	800efd2 <_printf_i+0x19a>
 800ee60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee68:	e03a      	b.n	800eee0 <_printf_i+0xa8>
 800ee6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee6e:	2b15      	cmp	r3, #21
 800ee70:	d8f6      	bhi.n	800ee60 <_printf_i+0x28>
 800ee72:	a101      	add	r1, pc, #4	@ (adr r1, 800ee78 <_printf_i+0x40>)
 800ee74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee78:	0800eed1 	.word	0x0800eed1
 800ee7c:	0800eee5 	.word	0x0800eee5
 800ee80:	0800ee61 	.word	0x0800ee61
 800ee84:	0800ee61 	.word	0x0800ee61
 800ee88:	0800ee61 	.word	0x0800ee61
 800ee8c:	0800ee61 	.word	0x0800ee61
 800ee90:	0800eee5 	.word	0x0800eee5
 800ee94:	0800ee61 	.word	0x0800ee61
 800ee98:	0800ee61 	.word	0x0800ee61
 800ee9c:	0800ee61 	.word	0x0800ee61
 800eea0:	0800ee61 	.word	0x0800ee61
 800eea4:	0800efe5 	.word	0x0800efe5
 800eea8:	0800ef0f 	.word	0x0800ef0f
 800eeac:	0800ef9f 	.word	0x0800ef9f
 800eeb0:	0800ee61 	.word	0x0800ee61
 800eeb4:	0800ee61 	.word	0x0800ee61
 800eeb8:	0800f007 	.word	0x0800f007
 800eebc:	0800ee61 	.word	0x0800ee61
 800eec0:	0800ef0f 	.word	0x0800ef0f
 800eec4:	0800ee61 	.word	0x0800ee61
 800eec8:	0800ee61 	.word	0x0800ee61
 800eecc:	0800efa7 	.word	0x0800efa7
 800eed0:	6833      	ldr	r3, [r6, #0]
 800eed2:	1d1a      	adds	r2, r3, #4
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6032      	str	r2, [r6, #0]
 800eed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eedc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eee0:	2301      	movs	r3, #1
 800eee2:	e09d      	b.n	800f020 <_printf_i+0x1e8>
 800eee4:	6833      	ldr	r3, [r6, #0]
 800eee6:	6820      	ldr	r0, [r4, #0]
 800eee8:	1d19      	adds	r1, r3, #4
 800eeea:	6031      	str	r1, [r6, #0]
 800eeec:	0606      	lsls	r6, r0, #24
 800eeee:	d501      	bpl.n	800eef4 <_printf_i+0xbc>
 800eef0:	681d      	ldr	r5, [r3, #0]
 800eef2:	e003      	b.n	800eefc <_printf_i+0xc4>
 800eef4:	0645      	lsls	r5, r0, #25
 800eef6:	d5fb      	bpl.n	800eef0 <_printf_i+0xb8>
 800eef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eefc:	2d00      	cmp	r5, #0
 800eefe:	da03      	bge.n	800ef08 <_printf_i+0xd0>
 800ef00:	232d      	movs	r3, #45	@ 0x2d
 800ef02:	426d      	negs	r5, r5
 800ef04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef08:	4859      	ldr	r0, [pc, #356]	@ (800f070 <_printf_i+0x238>)
 800ef0a:	230a      	movs	r3, #10
 800ef0c:	e011      	b.n	800ef32 <_printf_i+0xfa>
 800ef0e:	6821      	ldr	r1, [r4, #0]
 800ef10:	6833      	ldr	r3, [r6, #0]
 800ef12:	0608      	lsls	r0, r1, #24
 800ef14:	f853 5b04 	ldr.w	r5, [r3], #4
 800ef18:	d402      	bmi.n	800ef20 <_printf_i+0xe8>
 800ef1a:	0649      	lsls	r1, r1, #25
 800ef1c:	bf48      	it	mi
 800ef1e:	b2ad      	uxthmi	r5, r5
 800ef20:	2f6f      	cmp	r7, #111	@ 0x6f
 800ef22:	4853      	ldr	r0, [pc, #332]	@ (800f070 <_printf_i+0x238>)
 800ef24:	6033      	str	r3, [r6, #0]
 800ef26:	bf14      	ite	ne
 800ef28:	230a      	movne	r3, #10
 800ef2a:	2308      	moveq	r3, #8
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ef32:	6866      	ldr	r6, [r4, #4]
 800ef34:	60a6      	str	r6, [r4, #8]
 800ef36:	2e00      	cmp	r6, #0
 800ef38:	bfa2      	ittt	ge
 800ef3a:	6821      	ldrge	r1, [r4, #0]
 800ef3c:	f021 0104 	bicge.w	r1, r1, #4
 800ef40:	6021      	strge	r1, [r4, #0]
 800ef42:	b90d      	cbnz	r5, 800ef48 <_printf_i+0x110>
 800ef44:	2e00      	cmp	r6, #0
 800ef46:	d04b      	beq.n	800efe0 <_printf_i+0x1a8>
 800ef48:	4616      	mov	r6, r2
 800ef4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef4e:	fb03 5711 	mls	r7, r3, r1, r5
 800ef52:	5dc7      	ldrb	r7, [r0, r7]
 800ef54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef58:	462f      	mov	r7, r5
 800ef5a:	42bb      	cmp	r3, r7
 800ef5c:	460d      	mov	r5, r1
 800ef5e:	d9f4      	bls.n	800ef4a <_printf_i+0x112>
 800ef60:	2b08      	cmp	r3, #8
 800ef62:	d10b      	bne.n	800ef7c <_printf_i+0x144>
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	07df      	lsls	r7, r3, #31
 800ef68:	d508      	bpl.n	800ef7c <_printf_i+0x144>
 800ef6a:	6923      	ldr	r3, [r4, #16]
 800ef6c:	6861      	ldr	r1, [r4, #4]
 800ef6e:	4299      	cmp	r1, r3
 800ef70:	bfde      	ittt	le
 800ef72:	2330      	movle	r3, #48	@ 0x30
 800ef74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef78:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef7c:	1b92      	subs	r2, r2, r6
 800ef7e:	6122      	str	r2, [r4, #16]
 800ef80:	f8cd a000 	str.w	sl, [sp]
 800ef84:	464b      	mov	r3, r9
 800ef86:	aa03      	add	r2, sp, #12
 800ef88:	4621      	mov	r1, r4
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	f7ff fee6 	bl	800ed5c <_printf_common>
 800ef90:	3001      	adds	r0, #1
 800ef92:	d14a      	bne.n	800f02a <_printf_i+0x1f2>
 800ef94:	f04f 30ff 	mov.w	r0, #4294967295
 800ef98:	b004      	add	sp, #16
 800ef9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	f043 0320 	orr.w	r3, r3, #32
 800efa4:	6023      	str	r3, [r4, #0]
 800efa6:	4833      	ldr	r0, [pc, #204]	@ (800f074 <_printf_i+0x23c>)
 800efa8:	2778      	movs	r7, #120	@ 0x78
 800efaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	6831      	ldr	r1, [r6, #0]
 800efb2:	061f      	lsls	r7, r3, #24
 800efb4:	f851 5b04 	ldr.w	r5, [r1], #4
 800efb8:	d402      	bmi.n	800efc0 <_printf_i+0x188>
 800efba:	065f      	lsls	r7, r3, #25
 800efbc:	bf48      	it	mi
 800efbe:	b2ad      	uxthmi	r5, r5
 800efc0:	6031      	str	r1, [r6, #0]
 800efc2:	07d9      	lsls	r1, r3, #31
 800efc4:	bf44      	itt	mi
 800efc6:	f043 0320 	orrmi.w	r3, r3, #32
 800efca:	6023      	strmi	r3, [r4, #0]
 800efcc:	b11d      	cbz	r5, 800efd6 <_printf_i+0x19e>
 800efce:	2310      	movs	r3, #16
 800efd0:	e7ac      	b.n	800ef2c <_printf_i+0xf4>
 800efd2:	4827      	ldr	r0, [pc, #156]	@ (800f070 <_printf_i+0x238>)
 800efd4:	e7e9      	b.n	800efaa <_printf_i+0x172>
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	f023 0320 	bic.w	r3, r3, #32
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	e7f6      	b.n	800efce <_printf_i+0x196>
 800efe0:	4616      	mov	r6, r2
 800efe2:	e7bd      	b.n	800ef60 <_printf_i+0x128>
 800efe4:	6833      	ldr	r3, [r6, #0]
 800efe6:	6825      	ldr	r5, [r4, #0]
 800efe8:	6961      	ldr	r1, [r4, #20]
 800efea:	1d18      	adds	r0, r3, #4
 800efec:	6030      	str	r0, [r6, #0]
 800efee:	062e      	lsls	r6, r5, #24
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	d501      	bpl.n	800eff8 <_printf_i+0x1c0>
 800eff4:	6019      	str	r1, [r3, #0]
 800eff6:	e002      	b.n	800effe <_printf_i+0x1c6>
 800eff8:	0668      	lsls	r0, r5, #25
 800effa:	d5fb      	bpl.n	800eff4 <_printf_i+0x1bc>
 800effc:	8019      	strh	r1, [r3, #0]
 800effe:	2300      	movs	r3, #0
 800f000:	6123      	str	r3, [r4, #16]
 800f002:	4616      	mov	r6, r2
 800f004:	e7bc      	b.n	800ef80 <_printf_i+0x148>
 800f006:	6833      	ldr	r3, [r6, #0]
 800f008:	1d1a      	adds	r2, r3, #4
 800f00a:	6032      	str	r2, [r6, #0]
 800f00c:	681e      	ldr	r6, [r3, #0]
 800f00e:	6862      	ldr	r2, [r4, #4]
 800f010:	2100      	movs	r1, #0
 800f012:	4630      	mov	r0, r6
 800f014:	f7f1 f8dc 	bl	80001d0 <memchr>
 800f018:	b108      	cbz	r0, 800f01e <_printf_i+0x1e6>
 800f01a:	1b80      	subs	r0, r0, r6
 800f01c:	6060      	str	r0, [r4, #4]
 800f01e:	6863      	ldr	r3, [r4, #4]
 800f020:	6123      	str	r3, [r4, #16]
 800f022:	2300      	movs	r3, #0
 800f024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f028:	e7aa      	b.n	800ef80 <_printf_i+0x148>
 800f02a:	6923      	ldr	r3, [r4, #16]
 800f02c:	4632      	mov	r2, r6
 800f02e:	4649      	mov	r1, r9
 800f030:	4640      	mov	r0, r8
 800f032:	47d0      	blx	sl
 800f034:	3001      	adds	r0, #1
 800f036:	d0ad      	beq.n	800ef94 <_printf_i+0x15c>
 800f038:	6823      	ldr	r3, [r4, #0]
 800f03a:	079b      	lsls	r3, r3, #30
 800f03c:	d413      	bmi.n	800f066 <_printf_i+0x22e>
 800f03e:	68e0      	ldr	r0, [r4, #12]
 800f040:	9b03      	ldr	r3, [sp, #12]
 800f042:	4298      	cmp	r0, r3
 800f044:	bfb8      	it	lt
 800f046:	4618      	movlt	r0, r3
 800f048:	e7a6      	b.n	800ef98 <_printf_i+0x160>
 800f04a:	2301      	movs	r3, #1
 800f04c:	4632      	mov	r2, r6
 800f04e:	4649      	mov	r1, r9
 800f050:	4640      	mov	r0, r8
 800f052:	47d0      	blx	sl
 800f054:	3001      	adds	r0, #1
 800f056:	d09d      	beq.n	800ef94 <_printf_i+0x15c>
 800f058:	3501      	adds	r5, #1
 800f05a:	68e3      	ldr	r3, [r4, #12]
 800f05c:	9903      	ldr	r1, [sp, #12]
 800f05e:	1a5b      	subs	r3, r3, r1
 800f060:	42ab      	cmp	r3, r5
 800f062:	dcf2      	bgt.n	800f04a <_printf_i+0x212>
 800f064:	e7eb      	b.n	800f03e <_printf_i+0x206>
 800f066:	2500      	movs	r5, #0
 800f068:	f104 0619 	add.w	r6, r4, #25
 800f06c:	e7f5      	b.n	800f05a <_printf_i+0x222>
 800f06e:	bf00      	nop
 800f070:	08012796 	.word	0x08012796
 800f074:	080127a7 	.word	0x080127a7

0800f078 <std>:
 800f078:	2300      	movs	r3, #0
 800f07a:	b510      	push	{r4, lr}
 800f07c:	4604      	mov	r4, r0
 800f07e:	e9c0 3300 	strd	r3, r3, [r0]
 800f082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f086:	6083      	str	r3, [r0, #8]
 800f088:	8181      	strh	r1, [r0, #12]
 800f08a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f08c:	81c2      	strh	r2, [r0, #14]
 800f08e:	6183      	str	r3, [r0, #24]
 800f090:	4619      	mov	r1, r3
 800f092:	2208      	movs	r2, #8
 800f094:	305c      	adds	r0, #92	@ 0x5c
 800f096:	f000 f915 	bl	800f2c4 <memset>
 800f09a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d0 <std+0x58>)
 800f09c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f09e:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d4 <std+0x5c>)
 800f0a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d8 <std+0x60>)
 800f0a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f0dc <std+0x64>)
 800f0a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e0 <std+0x68>)
 800f0ac:	6224      	str	r4, [r4, #32]
 800f0ae:	429c      	cmp	r4, r3
 800f0b0:	d006      	beq.n	800f0c0 <std+0x48>
 800f0b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f0b6:	4294      	cmp	r4, r2
 800f0b8:	d002      	beq.n	800f0c0 <std+0x48>
 800f0ba:	33d0      	adds	r3, #208	@ 0xd0
 800f0bc:	429c      	cmp	r4, r3
 800f0be:	d105      	bne.n	800f0cc <std+0x54>
 800f0c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0c8:	f000 b9ce 	b.w	800f468 <__retarget_lock_init_recursive>
 800f0cc:	bd10      	pop	{r4, pc}
 800f0ce:	bf00      	nop
 800f0d0:	0800f1fd 	.word	0x0800f1fd
 800f0d4:	0800f21f 	.word	0x0800f21f
 800f0d8:	0800f257 	.word	0x0800f257
 800f0dc:	0800f27b 	.word	0x0800f27b
 800f0e0:	200056bc 	.word	0x200056bc

0800f0e4 <stdio_exit_handler>:
 800f0e4:	4a02      	ldr	r2, [pc, #8]	@ (800f0f0 <stdio_exit_handler+0xc>)
 800f0e6:	4903      	ldr	r1, [pc, #12]	@ (800f0f4 <stdio_exit_handler+0x10>)
 800f0e8:	4803      	ldr	r0, [pc, #12]	@ (800f0f8 <stdio_exit_handler+0x14>)
 800f0ea:	f000 b869 	b.w	800f1c0 <_fwalk_sglue>
 800f0ee:	bf00      	nop
 800f0f0:	20000070 	.word	0x20000070
 800f0f4:	08010de5 	.word	0x08010de5
 800f0f8:	20000080 	.word	0x20000080

0800f0fc <cleanup_stdio>:
 800f0fc:	6841      	ldr	r1, [r0, #4]
 800f0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f130 <cleanup_stdio+0x34>)
 800f100:	4299      	cmp	r1, r3
 800f102:	b510      	push	{r4, lr}
 800f104:	4604      	mov	r4, r0
 800f106:	d001      	beq.n	800f10c <cleanup_stdio+0x10>
 800f108:	f001 fe6c 	bl	8010de4 <_fflush_r>
 800f10c:	68a1      	ldr	r1, [r4, #8]
 800f10e:	4b09      	ldr	r3, [pc, #36]	@ (800f134 <cleanup_stdio+0x38>)
 800f110:	4299      	cmp	r1, r3
 800f112:	d002      	beq.n	800f11a <cleanup_stdio+0x1e>
 800f114:	4620      	mov	r0, r4
 800f116:	f001 fe65 	bl	8010de4 <_fflush_r>
 800f11a:	68e1      	ldr	r1, [r4, #12]
 800f11c:	4b06      	ldr	r3, [pc, #24]	@ (800f138 <cleanup_stdio+0x3c>)
 800f11e:	4299      	cmp	r1, r3
 800f120:	d004      	beq.n	800f12c <cleanup_stdio+0x30>
 800f122:	4620      	mov	r0, r4
 800f124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f128:	f001 be5c 	b.w	8010de4 <_fflush_r>
 800f12c:	bd10      	pop	{r4, pc}
 800f12e:	bf00      	nop
 800f130:	200056bc 	.word	0x200056bc
 800f134:	20005724 	.word	0x20005724
 800f138:	2000578c 	.word	0x2000578c

0800f13c <global_stdio_init.part.0>:
 800f13c:	b510      	push	{r4, lr}
 800f13e:	4b0b      	ldr	r3, [pc, #44]	@ (800f16c <global_stdio_init.part.0+0x30>)
 800f140:	4c0b      	ldr	r4, [pc, #44]	@ (800f170 <global_stdio_init.part.0+0x34>)
 800f142:	4a0c      	ldr	r2, [pc, #48]	@ (800f174 <global_stdio_init.part.0+0x38>)
 800f144:	601a      	str	r2, [r3, #0]
 800f146:	4620      	mov	r0, r4
 800f148:	2200      	movs	r2, #0
 800f14a:	2104      	movs	r1, #4
 800f14c:	f7ff ff94 	bl	800f078 <std>
 800f150:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f154:	2201      	movs	r2, #1
 800f156:	2109      	movs	r1, #9
 800f158:	f7ff ff8e 	bl	800f078 <std>
 800f15c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f160:	2202      	movs	r2, #2
 800f162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f166:	2112      	movs	r1, #18
 800f168:	f7ff bf86 	b.w	800f078 <std>
 800f16c:	200057f4 	.word	0x200057f4
 800f170:	200056bc 	.word	0x200056bc
 800f174:	0800f0e5 	.word	0x0800f0e5

0800f178 <__sfp_lock_acquire>:
 800f178:	4801      	ldr	r0, [pc, #4]	@ (800f180 <__sfp_lock_acquire+0x8>)
 800f17a:	f000 b976 	b.w	800f46a <__retarget_lock_acquire_recursive>
 800f17e:	bf00      	nop
 800f180:	200057fd 	.word	0x200057fd

0800f184 <__sfp_lock_release>:
 800f184:	4801      	ldr	r0, [pc, #4]	@ (800f18c <__sfp_lock_release+0x8>)
 800f186:	f000 b971 	b.w	800f46c <__retarget_lock_release_recursive>
 800f18a:	bf00      	nop
 800f18c:	200057fd 	.word	0x200057fd

0800f190 <__sinit>:
 800f190:	b510      	push	{r4, lr}
 800f192:	4604      	mov	r4, r0
 800f194:	f7ff fff0 	bl	800f178 <__sfp_lock_acquire>
 800f198:	6a23      	ldr	r3, [r4, #32]
 800f19a:	b11b      	cbz	r3, 800f1a4 <__sinit+0x14>
 800f19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1a0:	f7ff bff0 	b.w	800f184 <__sfp_lock_release>
 800f1a4:	4b04      	ldr	r3, [pc, #16]	@ (800f1b8 <__sinit+0x28>)
 800f1a6:	6223      	str	r3, [r4, #32]
 800f1a8:	4b04      	ldr	r3, [pc, #16]	@ (800f1bc <__sinit+0x2c>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d1f5      	bne.n	800f19c <__sinit+0xc>
 800f1b0:	f7ff ffc4 	bl	800f13c <global_stdio_init.part.0>
 800f1b4:	e7f2      	b.n	800f19c <__sinit+0xc>
 800f1b6:	bf00      	nop
 800f1b8:	0800f0fd 	.word	0x0800f0fd
 800f1bc:	200057f4 	.word	0x200057f4

0800f1c0 <_fwalk_sglue>:
 800f1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c4:	4607      	mov	r7, r0
 800f1c6:	4688      	mov	r8, r1
 800f1c8:	4614      	mov	r4, r2
 800f1ca:	2600      	movs	r6, #0
 800f1cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1d0:	f1b9 0901 	subs.w	r9, r9, #1
 800f1d4:	d505      	bpl.n	800f1e2 <_fwalk_sglue+0x22>
 800f1d6:	6824      	ldr	r4, [r4, #0]
 800f1d8:	2c00      	cmp	r4, #0
 800f1da:	d1f7      	bne.n	800f1cc <_fwalk_sglue+0xc>
 800f1dc:	4630      	mov	r0, r6
 800f1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1e2:	89ab      	ldrh	r3, [r5, #12]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d907      	bls.n	800f1f8 <_fwalk_sglue+0x38>
 800f1e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	d003      	beq.n	800f1f8 <_fwalk_sglue+0x38>
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	4638      	mov	r0, r7
 800f1f4:	47c0      	blx	r8
 800f1f6:	4306      	orrs	r6, r0
 800f1f8:	3568      	adds	r5, #104	@ 0x68
 800f1fa:	e7e9      	b.n	800f1d0 <_fwalk_sglue+0x10>

0800f1fc <__sread>:
 800f1fc:	b510      	push	{r4, lr}
 800f1fe:	460c      	mov	r4, r1
 800f200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f204:	f000 f8e2 	bl	800f3cc <_read_r>
 800f208:	2800      	cmp	r0, #0
 800f20a:	bfab      	itete	ge
 800f20c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f20e:	89a3      	ldrhlt	r3, [r4, #12]
 800f210:	181b      	addge	r3, r3, r0
 800f212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f216:	bfac      	ite	ge
 800f218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f21a:	81a3      	strhlt	r3, [r4, #12]
 800f21c:	bd10      	pop	{r4, pc}

0800f21e <__swrite>:
 800f21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f222:	461f      	mov	r7, r3
 800f224:	898b      	ldrh	r3, [r1, #12]
 800f226:	05db      	lsls	r3, r3, #23
 800f228:	4605      	mov	r5, r0
 800f22a:	460c      	mov	r4, r1
 800f22c:	4616      	mov	r6, r2
 800f22e:	d505      	bpl.n	800f23c <__swrite+0x1e>
 800f230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f234:	2302      	movs	r3, #2
 800f236:	2200      	movs	r2, #0
 800f238:	f000 f8b6 	bl	800f3a8 <_lseek_r>
 800f23c:	89a3      	ldrh	r3, [r4, #12]
 800f23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f246:	81a3      	strh	r3, [r4, #12]
 800f248:	4632      	mov	r2, r6
 800f24a:	463b      	mov	r3, r7
 800f24c:	4628      	mov	r0, r5
 800f24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f252:	f000 b8cd 	b.w	800f3f0 <_write_r>

0800f256 <__sseek>:
 800f256:	b510      	push	{r4, lr}
 800f258:	460c      	mov	r4, r1
 800f25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f25e:	f000 f8a3 	bl	800f3a8 <_lseek_r>
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	89a3      	ldrh	r3, [r4, #12]
 800f266:	bf15      	itete	ne
 800f268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f26a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f26e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f272:	81a3      	strheq	r3, [r4, #12]
 800f274:	bf18      	it	ne
 800f276:	81a3      	strhne	r3, [r4, #12]
 800f278:	bd10      	pop	{r4, pc}

0800f27a <__sclose>:
 800f27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f27e:	f000 b82d 	b.w	800f2dc <_close_r>
	...

0800f284 <_vsiprintf_r>:
 800f284:	b500      	push	{lr}
 800f286:	b09b      	sub	sp, #108	@ 0x6c
 800f288:	9100      	str	r1, [sp, #0]
 800f28a:	9104      	str	r1, [sp, #16]
 800f28c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f290:	9105      	str	r1, [sp, #20]
 800f292:	9102      	str	r1, [sp, #8]
 800f294:	4905      	ldr	r1, [pc, #20]	@ (800f2ac <_vsiprintf_r+0x28>)
 800f296:	9103      	str	r1, [sp, #12]
 800f298:	4669      	mov	r1, sp
 800f29a:	f001 fc23 	bl	8010ae4 <_svfiprintf_r>
 800f29e:	9b00      	ldr	r3, [sp, #0]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	701a      	strb	r2, [r3, #0]
 800f2a4:	b01b      	add	sp, #108	@ 0x6c
 800f2a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2aa:	bf00      	nop
 800f2ac:	ffff0208 	.word	0xffff0208

0800f2b0 <vsiprintf>:
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	460a      	mov	r2, r1
 800f2b4:	4601      	mov	r1, r0
 800f2b6:	4802      	ldr	r0, [pc, #8]	@ (800f2c0 <vsiprintf+0x10>)
 800f2b8:	6800      	ldr	r0, [r0, #0]
 800f2ba:	f7ff bfe3 	b.w	800f284 <_vsiprintf_r>
 800f2be:	bf00      	nop
 800f2c0:	2000007c 	.word	0x2000007c

0800f2c4 <memset>:
 800f2c4:	4402      	add	r2, r0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d100      	bne.n	800f2ce <memset+0xa>
 800f2cc:	4770      	bx	lr
 800f2ce:	f803 1b01 	strb.w	r1, [r3], #1
 800f2d2:	e7f9      	b.n	800f2c8 <memset+0x4>

0800f2d4 <_localeconv_r>:
 800f2d4:	4800      	ldr	r0, [pc, #0]	@ (800f2d8 <_localeconv_r+0x4>)
 800f2d6:	4770      	bx	lr
 800f2d8:	200001bc 	.word	0x200001bc

0800f2dc <_close_r>:
 800f2dc:	b538      	push	{r3, r4, r5, lr}
 800f2de:	4d06      	ldr	r5, [pc, #24]	@ (800f2f8 <_close_r+0x1c>)
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	4608      	mov	r0, r1
 800f2e6:	602b      	str	r3, [r5, #0]
 800f2e8:	f7f6 fbac 	bl	8005a44 <_close>
 800f2ec:	1c43      	adds	r3, r0, #1
 800f2ee:	d102      	bne.n	800f2f6 <_close_r+0x1a>
 800f2f0:	682b      	ldr	r3, [r5, #0]
 800f2f2:	b103      	cbz	r3, 800f2f6 <_close_r+0x1a>
 800f2f4:	6023      	str	r3, [r4, #0]
 800f2f6:	bd38      	pop	{r3, r4, r5, pc}
 800f2f8:	200057f8 	.word	0x200057f8

0800f2fc <_reclaim_reent>:
 800f2fc:	4b29      	ldr	r3, [pc, #164]	@ (800f3a4 <_reclaim_reent+0xa8>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4283      	cmp	r3, r0
 800f302:	b570      	push	{r4, r5, r6, lr}
 800f304:	4604      	mov	r4, r0
 800f306:	d04b      	beq.n	800f3a0 <_reclaim_reent+0xa4>
 800f308:	69c3      	ldr	r3, [r0, #28]
 800f30a:	b1ab      	cbz	r3, 800f338 <_reclaim_reent+0x3c>
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	b16b      	cbz	r3, 800f32c <_reclaim_reent+0x30>
 800f310:	2500      	movs	r5, #0
 800f312:	69e3      	ldr	r3, [r4, #28]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	5959      	ldr	r1, [r3, r5]
 800f318:	2900      	cmp	r1, #0
 800f31a:	d13b      	bne.n	800f394 <_reclaim_reent+0x98>
 800f31c:	3504      	adds	r5, #4
 800f31e:	2d80      	cmp	r5, #128	@ 0x80
 800f320:	d1f7      	bne.n	800f312 <_reclaim_reent+0x16>
 800f322:	69e3      	ldr	r3, [r4, #28]
 800f324:	4620      	mov	r0, r4
 800f326:	68d9      	ldr	r1, [r3, #12]
 800f328:	f000 fefe 	bl	8010128 <_free_r>
 800f32c:	69e3      	ldr	r3, [r4, #28]
 800f32e:	6819      	ldr	r1, [r3, #0]
 800f330:	b111      	cbz	r1, 800f338 <_reclaim_reent+0x3c>
 800f332:	4620      	mov	r0, r4
 800f334:	f000 fef8 	bl	8010128 <_free_r>
 800f338:	6961      	ldr	r1, [r4, #20]
 800f33a:	b111      	cbz	r1, 800f342 <_reclaim_reent+0x46>
 800f33c:	4620      	mov	r0, r4
 800f33e:	f000 fef3 	bl	8010128 <_free_r>
 800f342:	69e1      	ldr	r1, [r4, #28]
 800f344:	b111      	cbz	r1, 800f34c <_reclaim_reent+0x50>
 800f346:	4620      	mov	r0, r4
 800f348:	f000 feee 	bl	8010128 <_free_r>
 800f34c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f34e:	b111      	cbz	r1, 800f356 <_reclaim_reent+0x5a>
 800f350:	4620      	mov	r0, r4
 800f352:	f000 fee9 	bl	8010128 <_free_r>
 800f356:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f358:	b111      	cbz	r1, 800f360 <_reclaim_reent+0x64>
 800f35a:	4620      	mov	r0, r4
 800f35c:	f000 fee4 	bl	8010128 <_free_r>
 800f360:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f362:	b111      	cbz	r1, 800f36a <_reclaim_reent+0x6e>
 800f364:	4620      	mov	r0, r4
 800f366:	f000 fedf 	bl	8010128 <_free_r>
 800f36a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f36c:	b111      	cbz	r1, 800f374 <_reclaim_reent+0x78>
 800f36e:	4620      	mov	r0, r4
 800f370:	f000 feda 	bl	8010128 <_free_r>
 800f374:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f376:	b111      	cbz	r1, 800f37e <_reclaim_reent+0x82>
 800f378:	4620      	mov	r0, r4
 800f37a:	f000 fed5 	bl	8010128 <_free_r>
 800f37e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f380:	b111      	cbz	r1, 800f388 <_reclaim_reent+0x8c>
 800f382:	4620      	mov	r0, r4
 800f384:	f000 fed0 	bl	8010128 <_free_r>
 800f388:	6a23      	ldr	r3, [r4, #32]
 800f38a:	b14b      	cbz	r3, 800f3a0 <_reclaim_reent+0xa4>
 800f38c:	4620      	mov	r0, r4
 800f38e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f392:	4718      	bx	r3
 800f394:	680e      	ldr	r6, [r1, #0]
 800f396:	4620      	mov	r0, r4
 800f398:	f000 fec6 	bl	8010128 <_free_r>
 800f39c:	4631      	mov	r1, r6
 800f39e:	e7bb      	b.n	800f318 <_reclaim_reent+0x1c>
 800f3a0:	bd70      	pop	{r4, r5, r6, pc}
 800f3a2:	bf00      	nop
 800f3a4:	2000007c 	.word	0x2000007c

0800f3a8 <_lseek_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	4d07      	ldr	r5, [pc, #28]	@ (800f3c8 <_lseek_r+0x20>)
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	4608      	mov	r0, r1
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	602a      	str	r2, [r5, #0]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	f7f6 fb6b 	bl	8005a92 <_lseek>
 800f3bc:	1c43      	adds	r3, r0, #1
 800f3be:	d102      	bne.n	800f3c6 <_lseek_r+0x1e>
 800f3c0:	682b      	ldr	r3, [r5, #0]
 800f3c2:	b103      	cbz	r3, 800f3c6 <_lseek_r+0x1e>
 800f3c4:	6023      	str	r3, [r4, #0]
 800f3c6:	bd38      	pop	{r3, r4, r5, pc}
 800f3c8:	200057f8 	.word	0x200057f8

0800f3cc <_read_r>:
 800f3cc:	b538      	push	{r3, r4, r5, lr}
 800f3ce:	4d07      	ldr	r5, [pc, #28]	@ (800f3ec <_read_r+0x20>)
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	4608      	mov	r0, r1
 800f3d4:	4611      	mov	r1, r2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	602a      	str	r2, [r5, #0]
 800f3da:	461a      	mov	r2, r3
 800f3dc:	f7f6 faf9 	bl	80059d2 <_read>
 800f3e0:	1c43      	adds	r3, r0, #1
 800f3e2:	d102      	bne.n	800f3ea <_read_r+0x1e>
 800f3e4:	682b      	ldr	r3, [r5, #0]
 800f3e6:	b103      	cbz	r3, 800f3ea <_read_r+0x1e>
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	200057f8 	.word	0x200057f8

0800f3f0 <_write_r>:
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4d07      	ldr	r5, [pc, #28]	@ (800f410 <_write_r+0x20>)
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	4608      	mov	r0, r1
 800f3f8:	4611      	mov	r1, r2
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	602a      	str	r2, [r5, #0]
 800f3fe:	461a      	mov	r2, r3
 800f400:	f7f6 fb04 	bl	8005a0c <_write>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d102      	bne.n	800f40e <_write_r+0x1e>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	b103      	cbz	r3, 800f40e <_write_r+0x1e>
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	200057f8 	.word	0x200057f8

0800f414 <__errno>:
 800f414:	4b01      	ldr	r3, [pc, #4]	@ (800f41c <__errno+0x8>)
 800f416:	6818      	ldr	r0, [r3, #0]
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	2000007c 	.word	0x2000007c

0800f420 <__libc_init_array>:
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	4d0d      	ldr	r5, [pc, #52]	@ (800f458 <__libc_init_array+0x38>)
 800f424:	4c0d      	ldr	r4, [pc, #52]	@ (800f45c <__libc_init_array+0x3c>)
 800f426:	1b64      	subs	r4, r4, r5
 800f428:	10a4      	asrs	r4, r4, #2
 800f42a:	2600      	movs	r6, #0
 800f42c:	42a6      	cmp	r6, r4
 800f42e:	d109      	bne.n	800f444 <__libc_init_array+0x24>
 800f430:	4d0b      	ldr	r5, [pc, #44]	@ (800f460 <__libc_init_array+0x40>)
 800f432:	4c0c      	ldr	r4, [pc, #48]	@ (800f464 <__libc_init_array+0x44>)
 800f434:	f003 f8ec 	bl	8012610 <_init>
 800f438:	1b64      	subs	r4, r4, r5
 800f43a:	10a4      	asrs	r4, r4, #2
 800f43c:	2600      	movs	r6, #0
 800f43e:	42a6      	cmp	r6, r4
 800f440:	d105      	bne.n	800f44e <__libc_init_array+0x2e>
 800f442:	bd70      	pop	{r4, r5, r6, pc}
 800f444:	f855 3b04 	ldr.w	r3, [r5], #4
 800f448:	4798      	blx	r3
 800f44a:	3601      	adds	r6, #1
 800f44c:	e7ee      	b.n	800f42c <__libc_init_array+0xc>
 800f44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f452:	4798      	blx	r3
 800f454:	3601      	adds	r6, #1
 800f456:	e7f2      	b.n	800f43e <__libc_init_array+0x1e>
 800f458:	08012cd8 	.word	0x08012cd8
 800f45c:	08012cd8 	.word	0x08012cd8
 800f460:	08012cd8 	.word	0x08012cd8
 800f464:	08012cdc 	.word	0x08012cdc

0800f468 <__retarget_lock_init_recursive>:
 800f468:	4770      	bx	lr

0800f46a <__retarget_lock_acquire_recursive>:
 800f46a:	4770      	bx	lr

0800f46c <__retarget_lock_release_recursive>:
 800f46c:	4770      	bx	lr

0800f46e <memcpy>:
 800f46e:	440a      	add	r2, r1
 800f470:	4291      	cmp	r1, r2
 800f472:	f100 33ff 	add.w	r3, r0, #4294967295
 800f476:	d100      	bne.n	800f47a <memcpy+0xc>
 800f478:	4770      	bx	lr
 800f47a:	b510      	push	{r4, lr}
 800f47c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f480:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f484:	4291      	cmp	r1, r2
 800f486:	d1f9      	bne.n	800f47c <memcpy+0xe>
 800f488:	bd10      	pop	{r4, pc}

0800f48a <quorem>:
 800f48a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48e:	6903      	ldr	r3, [r0, #16]
 800f490:	690c      	ldr	r4, [r1, #16]
 800f492:	42a3      	cmp	r3, r4
 800f494:	4607      	mov	r7, r0
 800f496:	db7e      	blt.n	800f596 <quorem+0x10c>
 800f498:	3c01      	subs	r4, #1
 800f49a:	f101 0814 	add.w	r8, r1, #20
 800f49e:	00a3      	lsls	r3, r4, #2
 800f4a0:	f100 0514 	add.w	r5, r0, #20
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4aa:	9301      	str	r3, [sp, #4]
 800f4ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4c0:	d32e      	bcc.n	800f520 <quorem+0x96>
 800f4c2:	f04f 0a00 	mov.w	sl, #0
 800f4c6:	46c4      	mov	ip, r8
 800f4c8:	46ae      	mov	lr, r5
 800f4ca:	46d3      	mov	fp, sl
 800f4cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f4d0:	b298      	uxth	r0, r3
 800f4d2:	fb06 a000 	mla	r0, r6, r0, sl
 800f4d6:	0c02      	lsrs	r2, r0, #16
 800f4d8:	0c1b      	lsrs	r3, r3, #16
 800f4da:	fb06 2303 	mla	r3, r6, r3, r2
 800f4de:	f8de 2000 	ldr.w	r2, [lr]
 800f4e2:	b280      	uxth	r0, r0
 800f4e4:	b292      	uxth	r2, r2
 800f4e6:	1a12      	subs	r2, r2, r0
 800f4e8:	445a      	add	r2, fp
 800f4ea:	f8de 0000 	ldr.w	r0, [lr]
 800f4ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f4f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f4fc:	b292      	uxth	r2, r2
 800f4fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f502:	45e1      	cmp	r9, ip
 800f504:	f84e 2b04 	str.w	r2, [lr], #4
 800f508:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f50c:	d2de      	bcs.n	800f4cc <quorem+0x42>
 800f50e:	9b00      	ldr	r3, [sp, #0]
 800f510:	58eb      	ldr	r3, [r5, r3]
 800f512:	b92b      	cbnz	r3, 800f520 <quorem+0x96>
 800f514:	9b01      	ldr	r3, [sp, #4]
 800f516:	3b04      	subs	r3, #4
 800f518:	429d      	cmp	r5, r3
 800f51a:	461a      	mov	r2, r3
 800f51c:	d32f      	bcc.n	800f57e <quorem+0xf4>
 800f51e:	613c      	str	r4, [r7, #16]
 800f520:	4638      	mov	r0, r7
 800f522:	f001 f97b 	bl	801081c <__mcmp>
 800f526:	2800      	cmp	r0, #0
 800f528:	db25      	blt.n	800f576 <quorem+0xec>
 800f52a:	4629      	mov	r1, r5
 800f52c:	2000      	movs	r0, #0
 800f52e:	f858 2b04 	ldr.w	r2, [r8], #4
 800f532:	f8d1 c000 	ldr.w	ip, [r1]
 800f536:	fa1f fe82 	uxth.w	lr, r2
 800f53a:	fa1f f38c 	uxth.w	r3, ip
 800f53e:	eba3 030e 	sub.w	r3, r3, lr
 800f542:	4403      	add	r3, r0
 800f544:	0c12      	lsrs	r2, r2, #16
 800f546:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f54a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f54e:	b29b      	uxth	r3, r3
 800f550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f554:	45c1      	cmp	r9, r8
 800f556:	f841 3b04 	str.w	r3, [r1], #4
 800f55a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f55e:	d2e6      	bcs.n	800f52e <quorem+0xa4>
 800f560:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f568:	b922      	cbnz	r2, 800f574 <quorem+0xea>
 800f56a:	3b04      	subs	r3, #4
 800f56c:	429d      	cmp	r5, r3
 800f56e:	461a      	mov	r2, r3
 800f570:	d30b      	bcc.n	800f58a <quorem+0x100>
 800f572:	613c      	str	r4, [r7, #16]
 800f574:	3601      	adds	r6, #1
 800f576:	4630      	mov	r0, r6
 800f578:	b003      	add	sp, #12
 800f57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f57e:	6812      	ldr	r2, [r2, #0]
 800f580:	3b04      	subs	r3, #4
 800f582:	2a00      	cmp	r2, #0
 800f584:	d1cb      	bne.n	800f51e <quorem+0x94>
 800f586:	3c01      	subs	r4, #1
 800f588:	e7c6      	b.n	800f518 <quorem+0x8e>
 800f58a:	6812      	ldr	r2, [r2, #0]
 800f58c:	3b04      	subs	r3, #4
 800f58e:	2a00      	cmp	r2, #0
 800f590:	d1ef      	bne.n	800f572 <quorem+0xe8>
 800f592:	3c01      	subs	r4, #1
 800f594:	e7ea      	b.n	800f56c <quorem+0xe2>
 800f596:	2000      	movs	r0, #0
 800f598:	e7ee      	b.n	800f578 <quorem+0xee>
 800f59a:	0000      	movs	r0, r0
 800f59c:	0000      	movs	r0, r0
	...

0800f5a0 <_dtoa_r>:
 800f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	69c7      	ldr	r7, [r0, #28]
 800f5a6:	b099      	sub	sp, #100	@ 0x64
 800f5a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f5ac:	ec55 4b10 	vmov	r4, r5, d0
 800f5b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f5b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5b4:	4683      	mov	fp, r0
 800f5b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f5b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5ba:	b97f      	cbnz	r7, 800f5dc <_dtoa_r+0x3c>
 800f5bc:	2010      	movs	r0, #16
 800f5be:	f000 fdfd 	bl	80101bc <malloc>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800f5c8:	b920      	cbnz	r0, 800f5d4 <_dtoa_r+0x34>
 800f5ca:	4ba7      	ldr	r3, [pc, #668]	@ (800f868 <_dtoa_r+0x2c8>)
 800f5cc:	21ef      	movs	r1, #239	@ 0xef
 800f5ce:	48a7      	ldr	r0, [pc, #668]	@ (800f86c <_dtoa_r+0x2cc>)
 800f5d0:	f001 fc5a 	bl	8010e88 <__assert_func>
 800f5d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f5d8:	6007      	str	r7, [r0, #0]
 800f5da:	60c7      	str	r7, [r0, #12]
 800f5dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f5e0:	6819      	ldr	r1, [r3, #0]
 800f5e2:	b159      	cbz	r1, 800f5fc <_dtoa_r+0x5c>
 800f5e4:	685a      	ldr	r2, [r3, #4]
 800f5e6:	604a      	str	r2, [r1, #4]
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	4093      	lsls	r3, r2
 800f5ec:	608b      	str	r3, [r1, #8]
 800f5ee:	4658      	mov	r0, fp
 800f5f0:	f000 feda 	bl	80103a8 <_Bfree>
 800f5f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	1e2b      	subs	r3, r5, #0
 800f5fe:	bfb9      	ittee	lt
 800f600:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f604:	9303      	strlt	r3, [sp, #12]
 800f606:	2300      	movge	r3, #0
 800f608:	6033      	strge	r3, [r6, #0]
 800f60a:	9f03      	ldr	r7, [sp, #12]
 800f60c:	4b98      	ldr	r3, [pc, #608]	@ (800f870 <_dtoa_r+0x2d0>)
 800f60e:	bfbc      	itt	lt
 800f610:	2201      	movlt	r2, #1
 800f612:	6032      	strlt	r2, [r6, #0]
 800f614:	43bb      	bics	r3, r7
 800f616:	d112      	bne.n	800f63e <_dtoa_r+0x9e>
 800f618:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f61a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f61e:	6013      	str	r3, [r2, #0]
 800f620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f624:	4323      	orrs	r3, r4
 800f626:	f000 854d 	beq.w	80100c4 <_dtoa_r+0xb24>
 800f62a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f62c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f884 <_dtoa_r+0x2e4>
 800f630:	2b00      	cmp	r3, #0
 800f632:	f000 854f 	beq.w	80100d4 <_dtoa_r+0xb34>
 800f636:	f10a 0303 	add.w	r3, sl, #3
 800f63a:	f000 bd49 	b.w	80100d0 <_dtoa_r+0xb30>
 800f63e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f642:	2200      	movs	r2, #0
 800f644:	ec51 0b17 	vmov	r0, r1, d7
 800f648:	2300      	movs	r3, #0
 800f64a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f64e:	f7f1 fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f652:	4680      	mov	r8, r0
 800f654:	b158      	cbz	r0, 800f66e <_dtoa_r+0xce>
 800f656:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f658:	2301      	movs	r3, #1
 800f65a:	6013      	str	r3, [r2, #0]
 800f65c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f65e:	b113      	cbz	r3, 800f666 <_dtoa_r+0xc6>
 800f660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f662:	4b84      	ldr	r3, [pc, #528]	@ (800f874 <_dtoa_r+0x2d4>)
 800f664:	6013      	str	r3, [r2, #0]
 800f666:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f888 <_dtoa_r+0x2e8>
 800f66a:	f000 bd33 	b.w	80100d4 <_dtoa_r+0xb34>
 800f66e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f672:	aa16      	add	r2, sp, #88	@ 0x58
 800f674:	a917      	add	r1, sp, #92	@ 0x5c
 800f676:	4658      	mov	r0, fp
 800f678:	f001 f980 	bl	801097c <__d2b>
 800f67c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f680:	4681      	mov	r9, r0
 800f682:	2e00      	cmp	r6, #0
 800f684:	d077      	beq.n	800f776 <_dtoa_r+0x1d6>
 800f686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f688:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f68c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f694:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f698:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f69c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	4b74      	ldr	r3, [pc, #464]	@ (800f878 <_dtoa_r+0x2d8>)
 800f6a6:	f7f0 fdef 	bl	8000288 <__aeabi_dsub>
 800f6aa:	a369      	add	r3, pc, #420	@ (adr r3, 800f850 <_dtoa_r+0x2b0>)
 800f6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b0:	f7f0 ffa2 	bl	80005f8 <__aeabi_dmul>
 800f6b4:	a368      	add	r3, pc, #416	@ (adr r3, 800f858 <_dtoa_r+0x2b8>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	f7f0 fde7 	bl	800028c <__adddf3>
 800f6be:	4604      	mov	r4, r0
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	460d      	mov	r5, r1
 800f6c4:	f7f0 ff2e 	bl	8000524 <__aeabi_i2d>
 800f6c8:	a365      	add	r3, pc, #404	@ (adr r3, 800f860 <_dtoa_r+0x2c0>)
 800f6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ce:	f7f0 ff93 	bl	80005f8 <__aeabi_dmul>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	4629      	mov	r1, r5
 800f6da:	f7f0 fdd7 	bl	800028c <__adddf3>
 800f6de:	4604      	mov	r4, r0
 800f6e0:	460d      	mov	r5, r1
 800f6e2:	f7f1 fa39 	bl	8000b58 <__aeabi_d2iz>
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	4607      	mov	r7, r0
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	f7f1 f9f4 	bl	8000adc <__aeabi_dcmplt>
 800f6f4:	b140      	cbz	r0, 800f708 <_dtoa_r+0x168>
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	f7f0 ff14 	bl	8000524 <__aeabi_i2d>
 800f6fc:	4622      	mov	r2, r4
 800f6fe:	462b      	mov	r3, r5
 800f700:	f7f1 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800f704:	b900      	cbnz	r0, 800f708 <_dtoa_r+0x168>
 800f706:	3f01      	subs	r7, #1
 800f708:	2f16      	cmp	r7, #22
 800f70a:	d851      	bhi.n	800f7b0 <_dtoa_r+0x210>
 800f70c:	4b5b      	ldr	r3, [pc, #364]	@ (800f87c <_dtoa_r+0x2dc>)
 800f70e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f716:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f71a:	f7f1 f9df 	bl	8000adc <__aeabi_dcmplt>
 800f71e:	2800      	cmp	r0, #0
 800f720:	d048      	beq.n	800f7b4 <_dtoa_r+0x214>
 800f722:	3f01      	subs	r7, #1
 800f724:	2300      	movs	r3, #0
 800f726:	9312      	str	r3, [sp, #72]	@ 0x48
 800f728:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f72a:	1b9b      	subs	r3, r3, r6
 800f72c:	1e5a      	subs	r2, r3, #1
 800f72e:	bf44      	itt	mi
 800f730:	f1c3 0801 	rsbmi	r8, r3, #1
 800f734:	2300      	movmi	r3, #0
 800f736:	9208      	str	r2, [sp, #32]
 800f738:	bf54      	ite	pl
 800f73a:	f04f 0800 	movpl.w	r8, #0
 800f73e:	9308      	strmi	r3, [sp, #32]
 800f740:	2f00      	cmp	r7, #0
 800f742:	db39      	blt.n	800f7b8 <_dtoa_r+0x218>
 800f744:	9b08      	ldr	r3, [sp, #32]
 800f746:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f748:	443b      	add	r3, r7
 800f74a:	9308      	str	r3, [sp, #32]
 800f74c:	2300      	movs	r3, #0
 800f74e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f752:	2b09      	cmp	r3, #9
 800f754:	d864      	bhi.n	800f820 <_dtoa_r+0x280>
 800f756:	2b05      	cmp	r3, #5
 800f758:	bfc4      	itt	gt
 800f75a:	3b04      	subgt	r3, #4
 800f75c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f760:	f1a3 0302 	sub.w	r3, r3, #2
 800f764:	bfcc      	ite	gt
 800f766:	2400      	movgt	r4, #0
 800f768:	2401      	movle	r4, #1
 800f76a:	2b03      	cmp	r3, #3
 800f76c:	d863      	bhi.n	800f836 <_dtoa_r+0x296>
 800f76e:	e8df f003 	tbb	[pc, r3]
 800f772:	372a      	.short	0x372a
 800f774:	5535      	.short	0x5535
 800f776:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f77a:	441e      	add	r6, r3
 800f77c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f780:	2b20      	cmp	r3, #32
 800f782:	bfc1      	itttt	gt
 800f784:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f788:	409f      	lslgt	r7, r3
 800f78a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f78e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f792:	bfd6      	itet	le
 800f794:	f1c3 0320 	rsble	r3, r3, #32
 800f798:	ea47 0003 	orrgt.w	r0, r7, r3
 800f79c:	fa04 f003 	lslle.w	r0, r4, r3
 800f7a0:	f7f0 feb0 	bl	8000504 <__aeabi_ui2d>
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f7aa:	3e01      	subs	r6, #1
 800f7ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800f7ae:	e777      	b.n	800f6a0 <_dtoa_r+0x100>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e7b8      	b.n	800f726 <_dtoa_r+0x186>
 800f7b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f7b6:	e7b7      	b.n	800f728 <_dtoa_r+0x188>
 800f7b8:	427b      	negs	r3, r7
 800f7ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7bc:	2300      	movs	r3, #0
 800f7be:	eba8 0807 	sub.w	r8, r8, r7
 800f7c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f7c4:	e7c4      	b.n	800f750 <_dtoa_r+0x1b0>
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	dc35      	bgt.n	800f83c <_dtoa_r+0x29c>
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	9300      	str	r3, [sp, #0]
 800f7d4:	9307      	str	r3, [sp, #28]
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7da:	e00b      	b.n	800f7f4 <_dtoa_r+0x254>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e7f3      	b.n	800f7c8 <_dtoa_r+0x228>
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7e6:	18fb      	adds	r3, r7, r3
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	9307      	str	r3, [sp, #28]
 800f7f0:	bfb8      	it	lt
 800f7f2:	2301      	movlt	r3, #1
 800f7f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	2204      	movs	r2, #4
 800f7fc:	f102 0514 	add.w	r5, r2, #20
 800f800:	429d      	cmp	r5, r3
 800f802:	d91f      	bls.n	800f844 <_dtoa_r+0x2a4>
 800f804:	6041      	str	r1, [r0, #4]
 800f806:	4658      	mov	r0, fp
 800f808:	f000 fd8e 	bl	8010328 <_Balloc>
 800f80c:	4682      	mov	sl, r0
 800f80e:	2800      	cmp	r0, #0
 800f810:	d13c      	bne.n	800f88c <_dtoa_r+0x2ec>
 800f812:	4b1b      	ldr	r3, [pc, #108]	@ (800f880 <_dtoa_r+0x2e0>)
 800f814:	4602      	mov	r2, r0
 800f816:	f240 11af 	movw	r1, #431	@ 0x1af
 800f81a:	e6d8      	b.n	800f5ce <_dtoa_r+0x2e>
 800f81c:	2301      	movs	r3, #1
 800f81e:	e7e0      	b.n	800f7e2 <_dtoa_r+0x242>
 800f820:	2401      	movs	r4, #1
 800f822:	2300      	movs	r3, #0
 800f824:	9309      	str	r3, [sp, #36]	@ 0x24
 800f826:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f828:	f04f 33ff 	mov.w	r3, #4294967295
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	9307      	str	r3, [sp, #28]
 800f830:	2200      	movs	r2, #0
 800f832:	2312      	movs	r3, #18
 800f834:	e7d0      	b.n	800f7d8 <_dtoa_r+0x238>
 800f836:	2301      	movs	r3, #1
 800f838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f83a:	e7f5      	b.n	800f828 <_dtoa_r+0x288>
 800f83c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	9307      	str	r3, [sp, #28]
 800f842:	e7d7      	b.n	800f7f4 <_dtoa_r+0x254>
 800f844:	3101      	adds	r1, #1
 800f846:	0052      	lsls	r2, r2, #1
 800f848:	e7d8      	b.n	800f7fc <_dtoa_r+0x25c>
 800f84a:	bf00      	nop
 800f84c:	f3af 8000 	nop.w
 800f850:	636f4361 	.word	0x636f4361
 800f854:	3fd287a7 	.word	0x3fd287a7
 800f858:	8b60c8b3 	.word	0x8b60c8b3
 800f85c:	3fc68a28 	.word	0x3fc68a28
 800f860:	509f79fb 	.word	0x509f79fb
 800f864:	3fd34413 	.word	0x3fd34413
 800f868:	080127c5 	.word	0x080127c5
 800f86c:	080127dc 	.word	0x080127dc
 800f870:	7ff00000 	.word	0x7ff00000
 800f874:	08012795 	.word	0x08012795
 800f878:	3ff80000 	.word	0x3ff80000
 800f87c:	080128d8 	.word	0x080128d8
 800f880:	08012834 	.word	0x08012834
 800f884:	080127c1 	.word	0x080127c1
 800f888:	08012794 	.word	0x08012794
 800f88c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f890:	6018      	str	r0, [r3, #0]
 800f892:	9b07      	ldr	r3, [sp, #28]
 800f894:	2b0e      	cmp	r3, #14
 800f896:	f200 80a4 	bhi.w	800f9e2 <_dtoa_r+0x442>
 800f89a:	2c00      	cmp	r4, #0
 800f89c:	f000 80a1 	beq.w	800f9e2 <_dtoa_r+0x442>
 800f8a0:	2f00      	cmp	r7, #0
 800f8a2:	dd33      	ble.n	800f90c <_dtoa_r+0x36c>
 800f8a4:	4bad      	ldr	r3, [pc, #692]	@ (800fb5c <_dtoa_r+0x5bc>)
 800f8a6:	f007 020f 	and.w	r2, r7, #15
 800f8aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8ae:	ed93 7b00 	vldr	d7, [r3]
 800f8b2:	05f8      	lsls	r0, r7, #23
 800f8b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f8b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f8bc:	d516      	bpl.n	800f8ec <_dtoa_r+0x34c>
 800f8be:	4ba8      	ldr	r3, [pc, #672]	@ (800fb60 <_dtoa_r+0x5c0>)
 800f8c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f8c8:	f7f0 ffc0 	bl	800084c <__aeabi_ddiv>
 800f8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8d0:	f004 040f 	and.w	r4, r4, #15
 800f8d4:	2603      	movs	r6, #3
 800f8d6:	4da2      	ldr	r5, [pc, #648]	@ (800fb60 <_dtoa_r+0x5c0>)
 800f8d8:	b954      	cbnz	r4, 800f8f0 <_dtoa_r+0x350>
 800f8da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8e2:	f7f0 ffb3 	bl	800084c <__aeabi_ddiv>
 800f8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8ea:	e028      	b.n	800f93e <_dtoa_r+0x39e>
 800f8ec:	2602      	movs	r6, #2
 800f8ee:	e7f2      	b.n	800f8d6 <_dtoa_r+0x336>
 800f8f0:	07e1      	lsls	r1, r4, #31
 800f8f2:	d508      	bpl.n	800f906 <_dtoa_r+0x366>
 800f8f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f8fc:	f7f0 fe7c 	bl	80005f8 <__aeabi_dmul>
 800f900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f904:	3601      	adds	r6, #1
 800f906:	1064      	asrs	r4, r4, #1
 800f908:	3508      	adds	r5, #8
 800f90a:	e7e5      	b.n	800f8d8 <_dtoa_r+0x338>
 800f90c:	f000 80d2 	beq.w	800fab4 <_dtoa_r+0x514>
 800f910:	427c      	negs	r4, r7
 800f912:	4b92      	ldr	r3, [pc, #584]	@ (800fb5c <_dtoa_r+0x5bc>)
 800f914:	4d92      	ldr	r5, [pc, #584]	@ (800fb60 <_dtoa_r+0x5c0>)
 800f916:	f004 020f 	and.w	r2, r4, #15
 800f91a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f922:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f926:	f7f0 fe67 	bl	80005f8 <__aeabi_dmul>
 800f92a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f92e:	1124      	asrs	r4, r4, #4
 800f930:	2300      	movs	r3, #0
 800f932:	2602      	movs	r6, #2
 800f934:	2c00      	cmp	r4, #0
 800f936:	f040 80b2 	bne.w	800fa9e <_dtoa_r+0x4fe>
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1d3      	bne.n	800f8e6 <_dtoa_r+0x346>
 800f93e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f940:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f944:	2b00      	cmp	r3, #0
 800f946:	f000 80b7 	beq.w	800fab8 <_dtoa_r+0x518>
 800f94a:	4b86      	ldr	r3, [pc, #536]	@ (800fb64 <_dtoa_r+0x5c4>)
 800f94c:	2200      	movs	r2, #0
 800f94e:	4620      	mov	r0, r4
 800f950:	4629      	mov	r1, r5
 800f952:	f7f1 f8c3 	bl	8000adc <__aeabi_dcmplt>
 800f956:	2800      	cmp	r0, #0
 800f958:	f000 80ae 	beq.w	800fab8 <_dtoa_r+0x518>
 800f95c:	9b07      	ldr	r3, [sp, #28]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f000 80aa 	beq.w	800fab8 <_dtoa_r+0x518>
 800f964:	9b00      	ldr	r3, [sp, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	dd37      	ble.n	800f9da <_dtoa_r+0x43a>
 800f96a:	1e7b      	subs	r3, r7, #1
 800f96c:	9304      	str	r3, [sp, #16]
 800f96e:	4620      	mov	r0, r4
 800f970:	4b7d      	ldr	r3, [pc, #500]	@ (800fb68 <_dtoa_r+0x5c8>)
 800f972:	2200      	movs	r2, #0
 800f974:	4629      	mov	r1, r5
 800f976:	f7f0 fe3f 	bl	80005f8 <__aeabi_dmul>
 800f97a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f97e:	9c00      	ldr	r4, [sp, #0]
 800f980:	3601      	adds	r6, #1
 800f982:	4630      	mov	r0, r6
 800f984:	f7f0 fdce 	bl	8000524 <__aeabi_i2d>
 800f988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f98c:	f7f0 fe34 	bl	80005f8 <__aeabi_dmul>
 800f990:	4b76      	ldr	r3, [pc, #472]	@ (800fb6c <_dtoa_r+0x5cc>)
 800f992:	2200      	movs	r2, #0
 800f994:	f7f0 fc7a 	bl	800028c <__adddf3>
 800f998:	4605      	mov	r5, r0
 800f99a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f99e:	2c00      	cmp	r4, #0
 800f9a0:	f040 808d 	bne.w	800fabe <_dtoa_r+0x51e>
 800f9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9a8:	4b71      	ldr	r3, [pc, #452]	@ (800fb70 <_dtoa_r+0x5d0>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f7f0 fc6c 	bl	8000288 <__aeabi_dsub>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9b8:	462a      	mov	r2, r5
 800f9ba:	4633      	mov	r3, r6
 800f9bc:	f7f1 f8ac 	bl	8000b18 <__aeabi_dcmpgt>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	f040 828b 	bne.w	800fedc <_dtoa_r+0x93c>
 800f9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9ca:	462a      	mov	r2, r5
 800f9cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f9d0:	f7f1 f884 	bl	8000adc <__aeabi_dcmplt>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	f040 8128 	bne.w	800fc2a <_dtoa_r+0x68a>
 800f9da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f9de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f9e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f2c0 815a 	blt.w	800fc9e <_dtoa_r+0x6fe>
 800f9ea:	2f0e      	cmp	r7, #14
 800f9ec:	f300 8157 	bgt.w	800fc9e <_dtoa_r+0x6fe>
 800f9f0:	4b5a      	ldr	r3, [pc, #360]	@ (800fb5c <_dtoa_r+0x5bc>)
 800f9f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f9f6:	ed93 7b00 	vldr	d7, [r3]
 800f9fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	ed8d 7b00 	vstr	d7, [sp]
 800fa02:	da03      	bge.n	800fa0c <_dtoa_r+0x46c>
 800fa04:	9b07      	ldr	r3, [sp, #28]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f340 8101 	ble.w	800fc0e <_dtoa_r+0x66e>
 800fa0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fa10:	4656      	mov	r6, sl
 800fa12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa16:	4620      	mov	r0, r4
 800fa18:	4629      	mov	r1, r5
 800fa1a:	f7f0 ff17 	bl	800084c <__aeabi_ddiv>
 800fa1e:	f7f1 f89b 	bl	8000b58 <__aeabi_d2iz>
 800fa22:	4680      	mov	r8, r0
 800fa24:	f7f0 fd7e 	bl	8000524 <__aeabi_i2d>
 800fa28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa2c:	f7f0 fde4 	bl	80005f8 <__aeabi_dmul>
 800fa30:	4602      	mov	r2, r0
 800fa32:	460b      	mov	r3, r1
 800fa34:	4620      	mov	r0, r4
 800fa36:	4629      	mov	r1, r5
 800fa38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fa3c:	f7f0 fc24 	bl	8000288 <__aeabi_dsub>
 800fa40:	f806 4b01 	strb.w	r4, [r6], #1
 800fa44:	9d07      	ldr	r5, [sp, #28]
 800fa46:	eba6 040a 	sub.w	r4, r6, sl
 800fa4a:	42a5      	cmp	r5, r4
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	460b      	mov	r3, r1
 800fa50:	f040 8117 	bne.w	800fc82 <_dtoa_r+0x6e2>
 800fa54:	f7f0 fc1a 	bl	800028c <__adddf3>
 800fa58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	460d      	mov	r5, r1
 800fa60:	f7f1 f85a 	bl	8000b18 <__aeabi_dcmpgt>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	f040 80f9 	bne.w	800fc5c <_dtoa_r+0x6bc>
 800fa6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa6e:	4620      	mov	r0, r4
 800fa70:	4629      	mov	r1, r5
 800fa72:	f7f1 f829 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa76:	b118      	cbz	r0, 800fa80 <_dtoa_r+0x4e0>
 800fa78:	f018 0f01 	tst.w	r8, #1
 800fa7c:	f040 80ee 	bne.w	800fc5c <_dtoa_r+0x6bc>
 800fa80:	4649      	mov	r1, r9
 800fa82:	4658      	mov	r0, fp
 800fa84:	f000 fc90 	bl	80103a8 <_Bfree>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	7033      	strb	r3, [r6, #0]
 800fa8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa8e:	3701      	adds	r7, #1
 800fa90:	601f      	str	r7, [r3, #0]
 800fa92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f000 831d 	beq.w	80100d4 <_dtoa_r+0xb34>
 800fa9a:	601e      	str	r6, [r3, #0]
 800fa9c:	e31a      	b.n	80100d4 <_dtoa_r+0xb34>
 800fa9e:	07e2      	lsls	r2, r4, #31
 800faa0:	d505      	bpl.n	800faae <_dtoa_r+0x50e>
 800faa2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800faa6:	f7f0 fda7 	bl	80005f8 <__aeabi_dmul>
 800faaa:	3601      	adds	r6, #1
 800faac:	2301      	movs	r3, #1
 800faae:	1064      	asrs	r4, r4, #1
 800fab0:	3508      	adds	r5, #8
 800fab2:	e73f      	b.n	800f934 <_dtoa_r+0x394>
 800fab4:	2602      	movs	r6, #2
 800fab6:	e742      	b.n	800f93e <_dtoa_r+0x39e>
 800fab8:	9c07      	ldr	r4, [sp, #28]
 800faba:	9704      	str	r7, [sp, #16]
 800fabc:	e761      	b.n	800f982 <_dtoa_r+0x3e2>
 800fabe:	4b27      	ldr	r3, [pc, #156]	@ (800fb5c <_dtoa_r+0x5bc>)
 800fac0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fac2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fac6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800faca:	4454      	add	r4, sl
 800facc:	2900      	cmp	r1, #0
 800face:	d053      	beq.n	800fb78 <_dtoa_r+0x5d8>
 800fad0:	4928      	ldr	r1, [pc, #160]	@ (800fb74 <_dtoa_r+0x5d4>)
 800fad2:	2000      	movs	r0, #0
 800fad4:	f7f0 feba 	bl	800084c <__aeabi_ddiv>
 800fad8:	4633      	mov	r3, r6
 800fada:	462a      	mov	r2, r5
 800fadc:	f7f0 fbd4 	bl	8000288 <__aeabi_dsub>
 800fae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fae4:	4656      	mov	r6, sl
 800fae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800faea:	f7f1 f835 	bl	8000b58 <__aeabi_d2iz>
 800faee:	4605      	mov	r5, r0
 800faf0:	f7f0 fd18 	bl	8000524 <__aeabi_i2d>
 800faf4:	4602      	mov	r2, r0
 800faf6:	460b      	mov	r3, r1
 800faf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fafc:	f7f0 fbc4 	bl	8000288 <__aeabi_dsub>
 800fb00:	3530      	adds	r5, #48	@ 0x30
 800fb02:	4602      	mov	r2, r0
 800fb04:	460b      	mov	r3, r1
 800fb06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fb0a:	f806 5b01 	strb.w	r5, [r6], #1
 800fb0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb12:	f7f0 ffe3 	bl	8000adc <__aeabi_dcmplt>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	d171      	bne.n	800fbfe <_dtoa_r+0x65e>
 800fb1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb1e:	4911      	ldr	r1, [pc, #68]	@ (800fb64 <_dtoa_r+0x5c4>)
 800fb20:	2000      	movs	r0, #0
 800fb22:	f7f0 fbb1 	bl	8000288 <__aeabi_dsub>
 800fb26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fb2a:	f7f0 ffd7 	bl	8000adc <__aeabi_dcmplt>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	f040 8095 	bne.w	800fc5e <_dtoa_r+0x6be>
 800fb34:	42a6      	cmp	r6, r4
 800fb36:	f43f af50 	beq.w	800f9da <_dtoa_r+0x43a>
 800fb3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fb3e:	4b0a      	ldr	r3, [pc, #40]	@ (800fb68 <_dtoa_r+0x5c8>)
 800fb40:	2200      	movs	r2, #0
 800fb42:	f7f0 fd59 	bl	80005f8 <__aeabi_dmul>
 800fb46:	4b08      	ldr	r3, [pc, #32]	@ (800fb68 <_dtoa_r+0x5c8>)
 800fb48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb52:	f7f0 fd51 	bl	80005f8 <__aeabi_dmul>
 800fb56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb5a:	e7c4      	b.n	800fae6 <_dtoa_r+0x546>
 800fb5c:	080128d8 	.word	0x080128d8
 800fb60:	080128b0 	.word	0x080128b0
 800fb64:	3ff00000 	.word	0x3ff00000
 800fb68:	40240000 	.word	0x40240000
 800fb6c:	401c0000 	.word	0x401c0000
 800fb70:	40140000 	.word	0x40140000
 800fb74:	3fe00000 	.word	0x3fe00000
 800fb78:	4631      	mov	r1, r6
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	f7f0 fd3c 	bl	80005f8 <__aeabi_dmul>
 800fb80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fb84:	9415      	str	r4, [sp, #84]	@ 0x54
 800fb86:	4656      	mov	r6, sl
 800fb88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb8c:	f7f0 ffe4 	bl	8000b58 <__aeabi_d2iz>
 800fb90:	4605      	mov	r5, r0
 800fb92:	f7f0 fcc7 	bl	8000524 <__aeabi_i2d>
 800fb96:	4602      	mov	r2, r0
 800fb98:	460b      	mov	r3, r1
 800fb9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb9e:	f7f0 fb73 	bl	8000288 <__aeabi_dsub>
 800fba2:	3530      	adds	r5, #48	@ 0x30
 800fba4:	f806 5b01 	strb.w	r5, [r6], #1
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	42a6      	cmp	r6, r4
 800fbae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fbb2:	f04f 0200 	mov.w	r2, #0
 800fbb6:	d124      	bne.n	800fc02 <_dtoa_r+0x662>
 800fbb8:	4bac      	ldr	r3, [pc, #688]	@ (800fe6c <_dtoa_r+0x8cc>)
 800fbba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fbbe:	f7f0 fb65 	bl	800028c <__adddf3>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbca:	f7f0 ffa5 	bl	8000b18 <__aeabi_dcmpgt>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d145      	bne.n	800fc5e <_dtoa_r+0x6be>
 800fbd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fbd6:	49a5      	ldr	r1, [pc, #660]	@ (800fe6c <_dtoa_r+0x8cc>)
 800fbd8:	2000      	movs	r0, #0
 800fbda:	f7f0 fb55 	bl	8000288 <__aeabi_dsub>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbe6:	f7f0 ff79 	bl	8000adc <__aeabi_dcmplt>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	f43f aef5 	beq.w	800f9da <_dtoa_r+0x43a>
 800fbf0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fbf2:	1e73      	subs	r3, r6, #1
 800fbf4:	9315      	str	r3, [sp, #84]	@ 0x54
 800fbf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fbfa:	2b30      	cmp	r3, #48	@ 0x30
 800fbfc:	d0f8      	beq.n	800fbf0 <_dtoa_r+0x650>
 800fbfe:	9f04      	ldr	r7, [sp, #16]
 800fc00:	e73e      	b.n	800fa80 <_dtoa_r+0x4e0>
 800fc02:	4b9b      	ldr	r3, [pc, #620]	@ (800fe70 <_dtoa_r+0x8d0>)
 800fc04:	f7f0 fcf8 	bl	80005f8 <__aeabi_dmul>
 800fc08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc0c:	e7bc      	b.n	800fb88 <_dtoa_r+0x5e8>
 800fc0e:	d10c      	bne.n	800fc2a <_dtoa_r+0x68a>
 800fc10:	4b98      	ldr	r3, [pc, #608]	@ (800fe74 <_dtoa_r+0x8d4>)
 800fc12:	2200      	movs	r2, #0
 800fc14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc18:	f7f0 fcee 	bl	80005f8 <__aeabi_dmul>
 800fc1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc20:	f7f0 ff70 	bl	8000b04 <__aeabi_dcmpge>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	f000 8157 	beq.w	800fed8 <_dtoa_r+0x938>
 800fc2a:	2400      	movs	r4, #0
 800fc2c:	4625      	mov	r5, r4
 800fc2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc30:	43db      	mvns	r3, r3
 800fc32:	9304      	str	r3, [sp, #16]
 800fc34:	4656      	mov	r6, sl
 800fc36:	2700      	movs	r7, #0
 800fc38:	4621      	mov	r1, r4
 800fc3a:	4658      	mov	r0, fp
 800fc3c:	f000 fbb4 	bl	80103a8 <_Bfree>
 800fc40:	2d00      	cmp	r5, #0
 800fc42:	d0dc      	beq.n	800fbfe <_dtoa_r+0x65e>
 800fc44:	b12f      	cbz	r7, 800fc52 <_dtoa_r+0x6b2>
 800fc46:	42af      	cmp	r7, r5
 800fc48:	d003      	beq.n	800fc52 <_dtoa_r+0x6b2>
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	4658      	mov	r0, fp
 800fc4e:	f000 fbab 	bl	80103a8 <_Bfree>
 800fc52:	4629      	mov	r1, r5
 800fc54:	4658      	mov	r0, fp
 800fc56:	f000 fba7 	bl	80103a8 <_Bfree>
 800fc5a:	e7d0      	b.n	800fbfe <_dtoa_r+0x65e>
 800fc5c:	9704      	str	r7, [sp, #16]
 800fc5e:	4633      	mov	r3, r6
 800fc60:	461e      	mov	r6, r3
 800fc62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc66:	2a39      	cmp	r2, #57	@ 0x39
 800fc68:	d107      	bne.n	800fc7a <_dtoa_r+0x6da>
 800fc6a:	459a      	cmp	sl, r3
 800fc6c:	d1f8      	bne.n	800fc60 <_dtoa_r+0x6c0>
 800fc6e:	9a04      	ldr	r2, [sp, #16]
 800fc70:	3201      	adds	r2, #1
 800fc72:	9204      	str	r2, [sp, #16]
 800fc74:	2230      	movs	r2, #48	@ 0x30
 800fc76:	f88a 2000 	strb.w	r2, [sl]
 800fc7a:	781a      	ldrb	r2, [r3, #0]
 800fc7c:	3201      	adds	r2, #1
 800fc7e:	701a      	strb	r2, [r3, #0]
 800fc80:	e7bd      	b.n	800fbfe <_dtoa_r+0x65e>
 800fc82:	4b7b      	ldr	r3, [pc, #492]	@ (800fe70 <_dtoa_r+0x8d0>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	f7f0 fcb7 	bl	80005f8 <__aeabi_dmul>
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	4604      	mov	r4, r0
 800fc90:	460d      	mov	r5, r1
 800fc92:	f7f0 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc96:	2800      	cmp	r0, #0
 800fc98:	f43f aebb 	beq.w	800fa12 <_dtoa_r+0x472>
 800fc9c:	e6f0      	b.n	800fa80 <_dtoa_r+0x4e0>
 800fc9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fca0:	2a00      	cmp	r2, #0
 800fca2:	f000 80db 	beq.w	800fe5c <_dtoa_r+0x8bc>
 800fca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fca8:	2a01      	cmp	r2, #1
 800fcaa:	f300 80bf 	bgt.w	800fe2c <_dtoa_r+0x88c>
 800fcae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fcb0:	2a00      	cmp	r2, #0
 800fcb2:	f000 80b7 	beq.w	800fe24 <_dtoa_r+0x884>
 800fcb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fcba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fcbc:	4646      	mov	r6, r8
 800fcbe:	9a08      	ldr	r2, [sp, #32]
 800fcc0:	2101      	movs	r1, #1
 800fcc2:	441a      	add	r2, r3
 800fcc4:	4658      	mov	r0, fp
 800fcc6:	4498      	add	r8, r3
 800fcc8:	9208      	str	r2, [sp, #32]
 800fcca:	f000 fc21 	bl	8010510 <__i2b>
 800fcce:	4605      	mov	r5, r0
 800fcd0:	b15e      	cbz	r6, 800fcea <_dtoa_r+0x74a>
 800fcd2:	9b08      	ldr	r3, [sp, #32]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	dd08      	ble.n	800fcea <_dtoa_r+0x74a>
 800fcd8:	42b3      	cmp	r3, r6
 800fcda:	9a08      	ldr	r2, [sp, #32]
 800fcdc:	bfa8      	it	ge
 800fcde:	4633      	movge	r3, r6
 800fce0:	eba8 0803 	sub.w	r8, r8, r3
 800fce4:	1af6      	subs	r6, r6, r3
 800fce6:	1ad3      	subs	r3, r2, r3
 800fce8:	9308      	str	r3, [sp, #32]
 800fcea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcec:	b1f3      	cbz	r3, 800fd2c <_dtoa_r+0x78c>
 800fcee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f000 80b7 	beq.w	800fe64 <_dtoa_r+0x8c4>
 800fcf6:	b18c      	cbz	r4, 800fd1c <_dtoa_r+0x77c>
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	4622      	mov	r2, r4
 800fcfc:	4658      	mov	r0, fp
 800fcfe:	f000 fcc7 	bl	8010690 <__pow5mult>
 800fd02:	464a      	mov	r2, r9
 800fd04:	4601      	mov	r1, r0
 800fd06:	4605      	mov	r5, r0
 800fd08:	4658      	mov	r0, fp
 800fd0a:	f000 fc17 	bl	801053c <__multiply>
 800fd0e:	4649      	mov	r1, r9
 800fd10:	9004      	str	r0, [sp, #16]
 800fd12:	4658      	mov	r0, fp
 800fd14:	f000 fb48 	bl	80103a8 <_Bfree>
 800fd18:	9b04      	ldr	r3, [sp, #16]
 800fd1a:	4699      	mov	r9, r3
 800fd1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd1e:	1b1a      	subs	r2, r3, r4
 800fd20:	d004      	beq.n	800fd2c <_dtoa_r+0x78c>
 800fd22:	4649      	mov	r1, r9
 800fd24:	4658      	mov	r0, fp
 800fd26:	f000 fcb3 	bl	8010690 <__pow5mult>
 800fd2a:	4681      	mov	r9, r0
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	4658      	mov	r0, fp
 800fd30:	f000 fbee 	bl	8010510 <__i2b>
 800fd34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd36:	4604      	mov	r4, r0
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	f000 81cf 	beq.w	80100dc <_dtoa_r+0xb3c>
 800fd3e:	461a      	mov	r2, r3
 800fd40:	4601      	mov	r1, r0
 800fd42:	4658      	mov	r0, fp
 800fd44:	f000 fca4 	bl	8010690 <__pow5mult>
 800fd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd4a:	2b01      	cmp	r3, #1
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	f300 8095 	bgt.w	800fe7c <_dtoa_r+0x8dc>
 800fd52:	9b02      	ldr	r3, [sp, #8]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f040 8087 	bne.w	800fe68 <_dtoa_r+0x8c8>
 800fd5a:	9b03      	ldr	r3, [sp, #12]
 800fd5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f040 8089 	bne.w	800fe78 <_dtoa_r+0x8d8>
 800fd66:	9b03      	ldr	r3, [sp, #12]
 800fd68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd6c:	0d1b      	lsrs	r3, r3, #20
 800fd6e:	051b      	lsls	r3, r3, #20
 800fd70:	b12b      	cbz	r3, 800fd7e <_dtoa_r+0x7de>
 800fd72:	9b08      	ldr	r3, [sp, #32]
 800fd74:	3301      	adds	r3, #1
 800fd76:	9308      	str	r3, [sp, #32]
 800fd78:	f108 0801 	add.w	r8, r8, #1
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	f000 81b0 	beq.w	80100e8 <_dtoa_r+0xb48>
 800fd88:	6923      	ldr	r3, [r4, #16]
 800fd8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd8e:	6918      	ldr	r0, [r3, #16]
 800fd90:	f000 fb72 	bl	8010478 <__hi0bits>
 800fd94:	f1c0 0020 	rsb	r0, r0, #32
 800fd98:	9b08      	ldr	r3, [sp, #32]
 800fd9a:	4418      	add	r0, r3
 800fd9c:	f010 001f 	ands.w	r0, r0, #31
 800fda0:	d077      	beq.n	800fe92 <_dtoa_r+0x8f2>
 800fda2:	f1c0 0320 	rsb	r3, r0, #32
 800fda6:	2b04      	cmp	r3, #4
 800fda8:	dd6b      	ble.n	800fe82 <_dtoa_r+0x8e2>
 800fdaa:	9b08      	ldr	r3, [sp, #32]
 800fdac:	f1c0 001c 	rsb	r0, r0, #28
 800fdb0:	4403      	add	r3, r0
 800fdb2:	4480      	add	r8, r0
 800fdb4:	4406      	add	r6, r0
 800fdb6:	9308      	str	r3, [sp, #32]
 800fdb8:	f1b8 0f00 	cmp.w	r8, #0
 800fdbc:	dd05      	ble.n	800fdca <_dtoa_r+0x82a>
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	4642      	mov	r2, r8
 800fdc2:	4658      	mov	r0, fp
 800fdc4:	f000 fcbe 	bl	8010744 <__lshift>
 800fdc8:	4681      	mov	r9, r0
 800fdca:	9b08      	ldr	r3, [sp, #32]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	dd05      	ble.n	800fddc <_dtoa_r+0x83c>
 800fdd0:	4621      	mov	r1, r4
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	4658      	mov	r0, fp
 800fdd6:	f000 fcb5 	bl	8010744 <__lshift>
 800fdda:	4604      	mov	r4, r0
 800fddc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d059      	beq.n	800fe96 <_dtoa_r+0x8f6>
 800fde2:	4621      	mov	r1, r4
 800fde4:	4648      	mov	r0, r9
 800fde6:	f000 fd19 	bl	801081c <__mcmp>
 800fdea:	2800      	cmp	r0, #0
 800fdec:	da53      	bge.n	800fe96 <_dtoa_r+0x8f6>
 800fdee:	1e7b      	subs	r3, r7, #1
 800fdf0:	9304      	str	r3, [sp, #16]
 800fdf2:	4649      	mov	r1, r9
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	220a      	movs	r2, #10
 800fdf8:	4658      	mov	r0, fp
 800fdfa:	f000 faf7 	bl	80103ec <__multadd>
 800fdfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe00:	4681      	mov	r9, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f000 8172 	beq.w	80100ec <_dtoa_r+0xb4c>
 800fe08:	2300      	movs	r3, #0
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	220a      	movs	r2, #10
 800fe0e:	4658      	mov	r0, fp
 800fe10:	f000 faec 	bl	80103ec <__multadd>
 800fe14:	9b00      	ldr	r3, [sp, #0]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	4605      	mov	r5, r0
 800fe1a:	dc67      	bgt.n	800feec <_dtoa_r+0x94c>
 800fe1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	dc41      	bgt.n	800fea6 <_dtoa_r+0x906>
 800fe22:	e063      	b.n	800feec <_dtoa_r+0x94c>
 800fe24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fe2a:	e746      	b.n	800fcba <_dtoa_r+0x71a>
 800fe2c:	9b07      	ldr	r3, [sp, #28]
 800fe2e:	1e5c      	subs	r4, r3, #1
 800fe30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe32:	42a3      	cmp	r3, r4
 800fe34:	bfbf      	itttt	lt
 800fe36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fe38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fe3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fe3c:	1ae3      	sublt	r3, r4, r3
 800fe3e:	bfb4      	ite	lt
 800fe40:	18d2      	addlt	r2, r2, r3
 800fe42:	1b1c      	subge	r4, r3, r4
 800fe44:	9b07      	ldr	r3, [sp, #28]
 800fe46:	bfbc      	itt	lt
 800fe48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fe4a:	2400      	movlt	r4, #0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	bfb5      	itete	lt
 800fe50:	eba8 0603 	sublt.w	r6, r8, r3
 800fe54:	9b07      	ldrge	r3, [sp, #28]
 800fe56:	2300      	movlt	r3, #0
 800fe58:	4646      	movge	r6, r8
 800fe5a:	e730      	b.n	800fcbe <_dtoa_r+0x71e>
 800fe5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fe5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fe60:	4646      	mov	r6, r8
 800fe62:	e735      	b.n	800fcd0 <_dtoa_r+0x730>
 800fe64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe66:	e75c      	b.n	800fd22 <_dtoa_r+0x782>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e788      	b.n	800fd7e <_dtoa_r+0x7de>
 800fe6c:	3fe00000 	.word	0x3fe00000
 800fe70:	40240000 	.word	0x40240000
 800fe74:	40140000 	.word	0x40140000
 800fe78:	9b02      	ldr	r3, [sp, #8]
 800fe7a:	e780      	b.n	800fd7e <_dtoa_r+0x7de>
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe80:	e782      	b.n	800fd88 <_dtoa_r+0x7e8>
 800fe82:	d099      	beq.n	800fdb8 <_dtoa_r+0x818>
 800fe84:	9a08      	ldr	r2, [sp, #32]
 800fe86:	331c      	adds	r3, #28
 800fe88:	441a      	add	r2, r3
 800fe8a:	4498      	add	r8, r3
 800fe8c:	441e      	add	r6, r3
 800fe8e:	9208      	str	r2, [sp, #32]
 800fe90:	e792      	b.n	800fdb8 <_dtoa_r+0x818>
 800fe92:	4603      	mov	r3, r0
 800fe94:	e7f6      	b.n	800fe84 <_dtoa_r+0x8e4>
 800fe96:	9b07      	ldr	r3, [sp, #28]
 800fe98:	9704      	str	r7, [sp, #16]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	dc20      	bgt.n	800fee0 <_dtoa_r+0x940>
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	dd1e      	ble.n	800fee4 <_dtoa_r+0x944>
 800fea6:	9b00      	ldr	r3, [sp, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	f47f aec0 	bne.w	800fc2e <_dtoa_r+0x68e>
 800feae:	4621      	mov	r1, r4
 800feb0:	2205      	movs	r2, #5
 800feb2:	4658      	mov	r0, fp
 800feb4:	f000 fa9a 	bl	80103ec <__multadd>
 800feb8:	4601      	mov	r1, r0
 800feba:	4604      	mov	r4, r0
 800febc:	4648      	mov	r0, r9
 800febe:	f000 fcad 	bl	801081c <__mcmp>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	f77f aeb3 	ble.w	800fc2e <_dtoa_r+0x68e>
 800fec8:	4656      	mov	r6, sl
 800feca:	2331      	movs	r3, #49	@ 0x31
 800fecc:	f806 3b01 	strb.w	r3, [r6], #1
 800fed0:	9b04      	ldr	r3, [sp, #16]
 800fed2:	3301      	adds	r3, #1
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	e6ae      	b.n	800fc36 <_dtoa_r+0x696>
 800fed8:	9c07      	ldr	r4, [sp, #28]
 800feda:	9704      	str	r7, [sp, #16]
 800fedc:	4625      	mov	r5, r4
 800fede:	e7f3      	b.n	800fec8 <_dtoa_r+0x928>
 800fee0:	9b07      	ldr	r3, [sp, #28]
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	f000 8104 	beq.w	80100f4 <_dtoa_r+0xb54>
 800feec:	2e00      	cmp	r6, #0
 800feee:	dd05      	ble.n	800fefc <_dtoa_r+0x95c>
 800fef0:	4629      	mov	r1, r5
 800fef2:	4632      	mov	r2, r6
 800fef4:	4658      	mov	r0, fp
 800fef6:	f000 fc25 	bl	8010744 <__lshift>
 800fefa:	4605      	mov	r5, r0
 800fefc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d05a      	beq.n	800ffb8 <_dtoa_r+0xa18>
 800ff02:	6869      	ldr	r1, [r5, #4]
 800ff04:	4658      	mov	r0, fp
 800ff06:	f000 fa0f 	bl	8010328 <_Balloc>
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	b928      	cbnz	r0, 800ff1a <_dtoa_r+0x97a>
 800ff0e:	4b84      	ldr	r3, [pc, #528]	@ (8010120 <_dtoa_r+0xb80>)
 800ff10:	4602      	mov	r2, r0
 800ff12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ff16:	f7ff bb5a 	b.w	800f5ce <_dtoa_r+0x2e>
 800ff1a:	692a      	ldr	r2, [r5, #16]
 800ff1c:	3202      	adds	r2, #2
 800ff1e:	0092      	lsls	r2, r2, #2
 800ff20:	f105 010c 	add.w	r1, r5, #12
 800ff24:	300c      	adds	r0, #12
 800ff26:	f7ff faa2 	bl	800f46e <memcpy>
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	4631      	mov	r1, r6
 800ff2e:	4658      	mov	r0, fp
 800ff30:	f000 fc08 	bl	8010744 <__lshift>
 800ff34:	f10a 0301 	add.w	r3, sl, #1
 800ff38:	9307      	str	r3, [sp, #28]
 800ff3a:	9b00      	ldr	r3, [sp, #0]
 800ff3c:	4453      	add	r3, sl
 800ff3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff40:	9b02      	ldr	r3, [sp, #8]
 800ff42:	f003 0301 	and.w	r3, r3, #1
 800ff46:	462f      	mov	r7, r5
 800ff48:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	9b07      	ldr	r3, [sp, #28]
 800ff4e:	4621      	mov	r1, r4
 800ff50:	3b01      	subs	r3, #1
 800ff52:	4648      	mov	r0, r9
 800ff54:	9300      	str	r3, [sp, #0]
 800ff56:	f7ff fa98 	bl	800f48a <quorem>
 800ff5a:	4639      	mov	r1, r7
 800ff5c:	9002      	str	r0, [sp, #8]
 800ff5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ff62:	4648      	mov	r0, r9
 800ff64:	f000 fc5a 	bl	801081c <__mcmp>
 800ff68:	462a      	mov	r2, r5
 800ff6a:	9008      	str	r0, [sp, #32]
 800ff6c:	4621      	mov	r1, r4
 800ff6e:	4658      	mov	r0, fp
 800ff70:	f000 fc70 	bl	8010854 <__mdiff>
 800ff74:	68c2      	ldr	r2, [r0, #12]
 800ff76:	4606      	mov	r6, r0
 800ff78:	bb02      	cbnz	r2, 800ffbc <_dtoa_r+0xa1c>
 800ff7a:	4601      	mov	r1, r0
 800ff7c:	4648      	mov	r0, r9
 800ff7e:	f000 fc4d 	bl	801081c <__mcmp>
 800ff82:	4602      	mov	r2, r0
 800ff84:	4631      	mov	r1, r6
 800ff86:	4658      	mov	r0, fp
 800ff88:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff8a:	f000 fa0d 	bl	80103a8 <_Bfree>
 800ff8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff92:	9e07      	ldr	r6, [sp, #28]
 800ff94:	ea43 0102 	orr.w	r1, r3, r2
 800ff98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff9a:	4319      	orrs	r1, r3
 800ff9c:	d110      	bne.n	800ffc0 <_dtoa_r+0xa20>
 800ff9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ffa2:	d029      	beq.n	800fff8 <_dtoa_r+0xa58>
 800ffa4:	9b08      	ldr	r3, [sp, #32]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	dd02      	ble.n	800ffb0 <_dtoa_r+0xa10>
 800ffaa:	9b02      	ldr	r3, [sp, #8]
 800ffac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ffb0:	9b00      	ldr	r3, [sp, #0]
 800ffb2:	f883 8000 	strb.w	r8, [r3]
 800ffb6:	e63f      	b.n	800fc38 <_dtoa_r+0x698>
 800ffb8:	4628      	mov	r0, r5
 800ffba:	e7bb      	b.n	800ff34 <_dtoa_r+0x994>
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	e7e1      	b.n	800ff84 <_dtoa_r+0x9e4>
 800ffc0:	9b08      	ldr	r3, [sp, #32]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	db04      	blt.n	800ffd0 <_dtoa_r+0xa30>
 800ffc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ffc8:	430b      	orrs	r3, r1
 800ffca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ffcc:	430b      	orrs	r3, r1
 800ffce:	d120      	bne.n	8010012 <_dtoa_r+0xa72>
 800ffd0:	2a00      	cmp	r2, #0
 800ffd2:	dded      	ble.n	800ffb0 <_dtoa_r+0xa10>
 800ffd4:	4649      	mov	r1, r9
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	4658      	mov	r0, fp
 800ffda:	f000 fbb3 	bl	8010744 <__lshift>
 800ffde:	4621      	mov	r1, r4
 800ffe0:	4681      	mov	r9, r0
 800ffe2:	f000 fc1b 	bl	801081c <__mcmp>
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	dc03      	bgt.n	800fff2 <_dtoa_r+0xa52>
 800ffea:	d1e1      	bne.n	800ffb0 <_dtoa_r+0xa10>
 800ffec:	f018 0f01 	tst.w	r8, #1
 800fff0:	d0de      	beq.n	800ffb0 <_dtoa_r+0xa10>
 800fff2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fff6:	d1d8      	bne.n	800ffaa <_dtoa_r+0xa0a>
 800fff8:	9a00      	ldr	r2, [sp, #0]
 800fffa:	2339      	movs	r3, #57	@ 0x39
 800fffc:	7013      	strb	r3, [r2, #0]
 800fffe:	4633      	mov	r3, r6
 8010000:	461e      	mov	r6, r3
 8010002:	3b01      	subs	r3, #1
 8010004:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010008:	2a39      	cmp	r2, #57	@ 0x39
 801000a:	d052      	beq.n	80100b2 <_dtoa_r+0xb12>
 801000c:	3201      	adds	r2, #1
 801000e:	701a      	strb	r2, [r3, #0]
 8010010:	e612      	b.n	800fc38 <_dtoa_r+0x698>
 8010012:	2a00      	cmp	r2, #0
 8010014:	dd07      	ble.n	8010026 <_dtoa_r+0xa86>
 8010016:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801001a:	d0ed      	beq.n	800fff8 <_dtoa_r+0xa58>
 801001c:	9a00      	ldr	r2, [sp, #0]
 801001e:	f108 0301 	add.w	r3, r8, #1
 8010022:	7013      	strb	r3, [r2, #0]
 8010024:	e608      	b.n	800fc38 <_dtoa_r+0x698>
 8010026:	9b07      	ldr	r3, [sp, #28]
 8010028:	9a07      	ldr	r2, [sp, #28]
 801002a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801002e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010030:	4293      	cmp	r3, r2
 8010032:	d028      	beq.n	8010086 <_dtoa_r+0xae6>
 8010034:	4649      	mov	r1, r9
 8010036:	2300      	movs	r3, #0
 8010038:	220a      	movs	r2, #10
 801003a:	4658      	mov	r0, fp
 801003c:	f000 f9d6 	bl	80103ec <__multadd>
 8010040:	42af      	cmp	r7, r5
 8010042:	4681      	mov	r9, r0
 8010044:	f04f 0300 	mov.w	r3, #0
 8010048:	f04f 020a 	mov.w	r2, #10
 801004c:	4639      	mov	r1, r7
 801004e:	4658      	mov	r0, fp
 8010050:	d107      	bne.n	8010062 <_dtoa_r+0xac2>
 8010052:	f000 f9cb 	bl	80103ec <__multadd>
 8010056:	4607      	mov	r7, r0
 8010058:	4605      	mov	r5, r0
 801005a:	9b07      	ldr	r3, [sp, #28]
 801005c:	3301      	adds	r3, #1
 801005e:	9307      	str	r3, [sp, #28]
 8010060:	e774      	b.n	800ff4c <_dtoa_r+0x9ac>
 8010062:	f000 f9c3 	bl	80103ec <__multadd>
 8010066:	4629      	mov	r1, r5
 8010068:	4607      	mov	r7, r0
 801006a:	2300      	movs	r3, #0
 801006c:	220a      	movs	r2, #10
 801006e:	4658      	mov	r0, fp
 8010070:	f000 f9bc 	bl	80103ec <__multadd>
 8010074:	4605      	mov	r5, r0
 8010076:	e7f0      	b.n	801005a <_dtoa_r+0xaba>
 8010078:	9b00      	ldr	r3, [sp, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	bfcc      	ite	gt
 801007e:	461e      	movgt	r6, r3
 8010080:	2601      	movle	r6, #1
 8010082:	4456      	add	r6, sl
 8010084:	2700      	movs	r7, #0
 8010086:	4649      	mov	r1, r9
 8010088:	2201      	movs	r2, #1
 801008a:	4658      	mov	r0, fp
 801008c:	f000 fb5a 	bl	8010744 <__lshift>
 8010090:	4621      	mov	r1, r4
 8010092:	4681      	mov	r9, r0
 8010094:	f000 fbc2 	bl	801081c <__mcmp>
 8010098:	2800      	cmp	r0, #0
 801009a:	dcb0      	bgt.n	800fffe <_dtoa_r+0xa5e>
 801009c:	d102      	bne.n	80100a4 <_dtoa_r+0xb04>
 801009e:	f018 0f01 	tst.w	r8, #1
 80100a2:	d1ac      	bne.n	800fffe <_dtoa_r+0xa5e>
 80100a4:	4633      	mov	r3, r6
 80100a6:	461e      	mov	r6, r3
 80100a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100ac:	2a30      	cmp	r2, #48	@ 0x30
 80100ae:	d0fa      	beq.n	80100a6 <_dtoa_r+0xb06>
 80100b0:	e5c2      	b.n	800fc38 <_dtoa_r+0x698>
 80100b2:	459a      	cmp	sl, r3
 80100b4:	d1a4      	bne.n	8010000 <_dtoa_r+0xa60>
 80100b6:	9b04      	ldr	r3, [sp, #16]
 80100b8:	3301      	adds	r3, #1
 80100ba:	9304      	str	r3, [sp, #16]
 80100bc:	2331      	movs	r3, #49	@ 0x31
 80100be:	f88a 3000 	strb.w	r3, [sl]
 80100c2:	e5b9      	b.n	800fc38 <_dtoa_r+0x698>
 80100c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80100c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010124 <_dtoa_r+0xb84>
 80100ca:	b11b      	cbz	r3, 80100d4 <_dtoa_r+0xb34>
 80100cc:	f10a 0308 	add.w	r3, sl, #8
 80100d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80100d2:	6013      	str	r3, [r2, #0]
 80100d4:	4650      	mov	r0, sl
 80100d6:	b019      	add	sp, #100	@ 0x64
 80100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100de:	2b01      	cmp	r3, #1
 80100e0:	f77f ae37 	ble.w	800fd52 <_dtoa_r+0x7b2>
 80100e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80100e8:	2001      	movs	r0, #1
 80100ea:	e655      	b.n	800fd98 <_dtoa_r+0x7f8>
 80100ec:	9b00      	ldr	r3, [sp, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	f77f aed6 	ble.w	800fea0 <_dtoa_r+0x900>
 80100f4:	4656      	mov	r6, sl
 80100f6:	4621      	mov	r1, r4
 80100f8:	4648      	mov	r0, r9
 80100fa:	f7ff f9c6 	bl	800f48a <quorem>
 80100fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010102:	f806 8b01 	strb.w	r8, [r6], #1
 8010106:	9b00      	ldr	r3, [sp, #0]
 8010108:	eba6 020a 	sub.w	r2, r6, sl
 801010c:	4293      	cmp	r3, r2
 801010e:	ddb3      	ble.n	8010078 <_dtoa_r+0xad8>
 8010110:	4649      	mov	r1, r9
 8010112:	2300      	movs	r3, #0
 8010114:	220a      	movs	r2, #10
 8010116:	4658      	mov	r0, fp
 8010118:	f000 f968 	bl	80103ec <__multadd>
 801011c:	4681      	mov	r9, r0
 801011e:	e7ea      	b.n	80100f6 <_dtoa_r+0xb56>
 8010120:	08012834 	.word	0x08012834
 8010124:	080127b8 	.word	0x080127b8

08010128 <_free_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4605      	mov	r5, r0
 801012c:	2900      	cmp	r1, #0
 801012e:	d041      	beq.n	80101b4 <_free_r+0x8c>
 8010130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010134:	1f0c      	subs	r4, r1, #4
 8010136:	2b00      	cmp	r3, #0
 8010138:	bfb8      	it	lt
 801013a:	18e4      	addlt	r4, r4, r3
 801013c:	f000 f8e8 	bl	8010310 <__malloc_lock>
 8010140:	4a1d      	ldr	r2, [pc, #116]	@ (80101b8 <_free_r+0x90>)
 8010142:	6813      	ldr	r3, [r2, #0]
 8010144:	b933      	cbnz	r3, 8010154 <_free_r+0x2c>
 8010146:	6063      	str	r3, [r4, #4]
 8010148:	6014      	str	r4, [r2, #0]
 801014a:	4628      	mov	r0, r5
 801014c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010150:	f000 b8e4 	b.w	801031c <__malloc_unlock>
 8010154:	42a3      	cmp	r3, r4
 8010156:	d908      	bls.n	801016a <_free_r+0x42>
 8010158:	6820      	ldr	r0, [r4, #0]
 801015a:	1821      	adds	r1, r4, r0
 801015c:	428b      	cmp	r3, r1
 801015e:	bf01      	itttt	eq
 8010160:	6819      	ldreq	r1, [r3, #0]
 8010162:	685b      	ldreq	r3, [r3, #4]
 8010164:	1809      	addeq	r1, r1, r0
 8010166:	6021      	streq	r1, [r4, #0]
 8010168:	e7ed      	b.n	8010146 <_free_r+0x1e>
 801016a:	461a      	mov	r2, r3
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	b10b      	cbz	r3, 8010174 <_free_r+0x4c>
 8010170:	42a3      	cmp	r3, r4
 8010172:	d9fa      	bls.n	801016a <_free_r+0x42>
 8010174:	6811      	ldr	r1, [r2, #0]
 8010176:	1850      	adds	r0, r2, r1
 8010178:	42a0      	cmp	r0, r4
 801017a:	d10b      	bne.n	8010194 <_free_r+0x6c>
 801017c:	6820      	ldr	r0, [r4, #0]
 801017e:	4401      	add	r1, r0
 8010180:	1850      	adds	r0, r2, r1
 8010182:	4283      	cmp	r3, r0
 8010184:	6011      	str	r1, [r2, #0]
 8010186:	d1e0      	bne.n	801014a <_free_r+0x22>
 8010188:	6818      	ldr	r0, [r3, #0]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	6053      	str	r3, [r2, #4]
 801018e:	4408      	add	r0, r1
 8010190:	6010      	str	r0, [r2, #0]
 8010192:	e7da      	b.n	801014a <_free_r+0x22>
 8010194:	d902      	bls.n	801019c <_free_r+0x74>
 8010196:	230c      	movs	r3, #12
 8010198:	602b      	str	r3, [r5, #0]
 801019a:	e7d6      	b.n	801014a <_free_r+0x22>
 801019c:	6820      	ldr	r0, [r4, #0]
 801019e:	1821      	adds	r1, r4, r0
 80101a0:	428b      	cmp	r3, r1
 80101a2:	bf04      	itt	eq
 80101a4:	6819      	ldreq	r1, [r3, #0]
 80101a6:	685b      	ldreq	r3, [r3, #4]
 80101a8:	6063      	str	r3, [r4, #4]
 80101aa:	bf04      	itt	eq
 80101ac:	1809      	addeq	r1, r1, r0
 80101ae:	6021      	streq	r1, [r4, #0]
 80101b0:	6054      	str	r4, [r2, #4]
 80101b2:	e7ca      	b.n	801014a <_free_r+0x22>
 80101b4:	bd38      	pop	{r3, r4, r5, pc}
 80101b6:	bf00      	nop
 80101b8:	20005804 	.word	0x20005804

080101bc <malloc>:
 80101bc:	4b02      	ldr	r3, [pc, #8]	@ (80101c8 <malloc+0xc>)
 80101be:	4601      	mov	r1, r0
 80101c0:	6818      	ldr	r0, [r3, #0]
 80101c2:	f000 b825 	b.w	8010210 <_malloc_r>
 80101c6:	bf00      	nop
 80101c8:	2000007c 	.word	0x2000007c

080101cc <sbrk_aligned>:
 80101cc:	b570      	push	{r4, r5, r6, lr}
 80101ce:	4e0f      	ldr	r6, [pc, #60]	@ (801020c <sbrk_aligned+0x40>)
 80101d0:	460c      	mov	r4, r1
 80101d2:	6831      	ldr	r1, [r6, #0]
 80101d4:	4605      	mov	r5, r0
 80101d6:	b911      	cbnz	r1, 80101de <sbrk_aligned+0x12>
 80101d8:	f000 fe46 	bl	8010e68 <_sbrk_r>
 80101dc:	6030      	str	r0, [r6, #0]
 80101de:	4621      	mov	r1, r4
 80101e0:	4628      	mov	r0, r5
 80101e2:	f000 fe41 	bl	8010e68 <_sbrk_r>
 80101e6:	1c43      	adds	r3, r0, #1
 80101e8:	d103      	bne.n	80101f2 <sbrk_aligned+0x26>
 80101ea:	f04f 34ff 	mov.w	r4, #4294967295
 80101ee:	4620      	mov	r0, r4
 80101f0:	bd70      	pop	{r4, r5, r6, pc}
 80101f2:	1cc4      	adds	r4, r0, #3
 80101f4:	f024 0403 	bic.w	r4, r4, #3
 80101f8:	42a0      	cmp	r0, r4
 80101fa:	d0f8      	beq.n	80101ee <sbrk_aligned+0x22>
 80101fc:	1a21      	subs	r1, r4, r0
 80101fe:	4628      	mov	r0, r5
 8010200:	f000 fe32 	bl	8010e68 <_sbrk_r>
 8010204:	3001      	adds	r0, #1
 8010206:	d1f2      	bne.n	80101ee <sbrk_aligned+0x22>
 8010208:	e7ef      	b.n	80101ea <sbrk_aligned+0x1e>
 801020a:	bf00      	nop
 801020c:	20005800 	.word	0x20005800

08010210 <_malloc_r>:
 8010210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010214:	1ccd      	adds	r5, r1, #3
 8010216:	f025 0503 	bic.w	r5, r5, #3
 801021a:	3508      	adds	r5, #8
 801021c:	2d0c      	cmp	r5, #12
 801021e:	bf38      	it	cc
 8010220:	250c      	movcc	r5, #12
 8010222:	2d00      	cmp	r5, #0
 8010224:	4606      	mov	r6, r0
 8010226:	db01      	blt.n	801022c <_malloc_r+0x1c>
 8010228:	42a9      	cmp	r1, r5
 801022a:	d904      	bls.n	8010236 <_malloc_r+0x26>
 801022c:	230c      	movs	r3, #12
 801022e:	6033      	str	r3, [r6, #0]
 8010230:	2000      	movs	r0, #0
 8010232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010236:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801030c <_malloc_r+0xfc>
 801023a:	f000 f869 	bl	8010310 <__malloc_lock>
 801023e:	f8d8 3000 	ldr.w	r3, [r8]
 8010242:	461c      	mov	r4, r3
 8010244:	bb44      	cbnz	r4, 8010298 <_malloc_r+0x88>
 8010246:	4629      	mov	r1, r5
 8010248:	4630      	mov	r0, r6
 801024a:	f7ff ffbf 	bl	80101cc <sbrk_aligned>
 801024e:	1c43      	adds	r3, r0, #1
 8010250:	4604      	mov	r4, r0
 8010252:	d158      	bne.n	8010306 <_malloc_r+0xf6>
 8010254:	f8d8 4000 	ldr.w	r4, [r8]
 8010258:	4627      	mov	r7, r4
 801025a:	2f00      	cmp	r7, #0
 801025c:	d143      	bne.n	80102e6 <_malloc_r+0xd6>
 801025e:	2c00      	cmp	r4, #0
 8010260:	d04b      	beq.n	80102fa <_malloc_r+0xea>
 8010262:	6823      	ldr	r3, [r4, #0]
 8010264:	4639      	mov	r1, r7
 8010266:	4630      	mov	r0, r6
 8010268:	eb04 0903 	add.w	r9, r4, r3
 801026c:	f000 fdfc 	bl	8010e68 <_sbrk_r>
 8010270:	4581      	cmp	r9, r0
 8010272:	d142      	bne.n	80102fa <_malloc_r+0xea>
 8010274:	6821      	ldr	r1, [r4, #0]
 8010276:	1a6d      	subs	r5, r5, r1
 8010278:	4629      	mov	r1, r5
 801027a:	4630      	mov	r0, r6
 801027c:	f7ff ffa6 	bl	80101cc <sbrk_aligned>
 8010280:	3001      	adds	r0, #1
 8010282:	d03a      	beq.n	80102fa <_malloc_r+0xea>
 8010284:	6823      	ldr	r3, [r4, #0]
 8010286:	442b      	add	r3, r5
 8010288:	6023      	str	r3, [r4, #0]
 801028a:	f8d8 3000 	ldr.w	r3, [r8]
 801028e:	685a      	ldr	r2, [r3, #4]
 8010290:	bb62      	cbnz	r2, 80102ec <_malloc_r+0xdc>
 8010292:	f8c8 7000 	str.w	r7, [r8]
 8010296:	e00f      	b.n	80102b8 <_malloc_r+0xa8>
 8010298:	6822      	ldr	r2, [r4, #0]
 801029a:	1b52      	subs	r2, r2, r5
 801029c:	d420      	bmi.n	80102e0 <_malloc_r+0xd0>
 801029e:	2a0b      	cmp	r2, #11
 80102a0:	d917      	bls.n	80102d2 <_malloc_r+0xc2>
 80102a2:	1961      	adds	r1, r4, r5
 80102a4:	42a3      	cmp	r3, r4
 80102a6:	6025      	str	r5, [r4, #0]
 80102a8:	bf18      	it	ne
 80102aa:	6059      	strne	r1, [r3, #4]
 80102ac:	6863      	ldr	r3, [r4, #4]
 80102ae:	bf08      	it	eq
 80102b0:	f8c8 1000 	streq.w	r1, [r8]
 80102b4:	5162      	str	r2, [r4, r5]
 80102b6:	604b      	str	r3, [r1, #4]
 80102b8:	4630      	mov	r0, r6
 80102ba:	f000 f82f 	bl	801031c <__malloc_unlock>
 80102be:	f104 000b 	add.w	r0, r4, #11
 80102c2:	1d23      	adds	r3, r4, #4
 80102c4:	f020 0007 	bic.w	r0, r0, #7
 80102c8:	1ac2      	subs	r2, r0, r3
 80102ca:	bf1c      	itt	ne
 80102cc:	1a1b      	subne	r3, r3, r0
 80102ce:	50a3      	strne	r3, [r4, r2]
 80102d0:	e7af      	b.n	8010232 <_malloc_r+0x22>
 80102d2:	6862      	ldr	r2, [r4, #4]
 80102d4:	42a3      	cmp	r3, r4
 80102d6:	bf0c      	ite	eq
 80102d8:	f8c8 2000 	streq.w	r2, [r8]
 80102dc:	605a      	strne	r2, [r3, #4]
 80102de:	e7eb      	b.n	80102b8 <_malloc_r+0xa8>
 80102e0:	4623      	mov	r3, r4
 80102e2:	6864      	ldr	r4, [r4, #4]
 80102e4:	e7ae      	b.n	8010244 <_malloc_r+0x34>
 80102e6:	463c      	mov	r4, r7
 80102e8:	687f      	ldr	r7, [r7, #4]
 80102ea:	e7b6      	b.n	801025a <_malloc_r+0x4a>
 80102ec:	461a      	mov	r2, r3
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	42a3      	cmp	r3, r4
 80102f2:	d1fb      	bne.n	80102ec <_malloc_r+0xdc>
 80102f4:	2300      	movs	r3, #0
 80102f6:	6053      	str	r3, [r2, #4]
 80102f8:	e7de      	b.n	80102b8 <_malloc_r+0xa8>
 80102fa:	230c      	movs	r3, #12
 80102fc:	6033      	str	r3, [r6, #0]
 80102fe:	4630      	mov	r0, r6
 8010300:	f000 f80c 	bl	801031c <__malloc_unlock>
 8010304:	e794      	b.n	8010230 <_malloc_r+0x20>
 8010306:	6005      	str	r5, [r0, #0]
 8010308:	e7d6      	b.n	80102b8 <_malloc_r+0xa8>
 801030a:	bf00      	nop
 801030c:	20005804 	.word	0x20005804

08010310 <__malloc_lock>:
 8010310:	4801      	ldr	r0, [pc, #4]	@ (8010318 <__malloc_lock+0x8>)
 8010312:	f7ff b8aa 	b.w	800f46a <__retarget_lock_acquire_recursive>
 8010316:	bf00      	nop
 8010318:	200057fc 	.word	0x200057fc

0801031c <__malloc_unlock>:
 801031c:	4801      	ldr	r0, [pc, #4]	@ (8010324 <__malloc_unlock+0x8>)
 801031e:	f7ff b8a5 	b.w	800f46c <__retarget_lock_release_recursive>
 8010322:	bf00      	nop
 8010324:	200057fc 	.word	0x200057fc

08010328 <_Balloc>:
 8010328:	b570      	push	{r4, r5, r6, lr}
 801032a:	69c6      	ldr	r6, [r0, #28]
 801032c:	4604      	mov	r4, r0
 801032e:	460d      	mov	r5, r1
 8010330:	b976      	cbnz	r6, 8010350 <_Balloc+0x28>
 8010332:	2010      	movs	r0, #16
 8010334:	f7ff ff42 	bl	80101bc <malloc>
 8010338:	4602      	mov	r2, r0
 801033a:	61e0      	str	r0, [r4, #28]
 801033c:	b920      	cbnz	r0, 8010348 <_Balloc+0x20>
 801033e:	4b18      	ldr	r3, [pc, #96]	@ (80103a0 <_Balloc+0x78>)
 8010340:	4818      	ldr	r0, [pc, #96]	@ (80103a4 <_Balloc+0x7c>)
 8010342:	216b      	movs	r1, #107	@ 0x6b
 8010344:	f000 fda0 	bl	8010e88 <__assert_func>
 8010348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801034c:	6006      	str	r6, [r0, #0]
 801034e:	60c6      	str	r6, [r0, #12]
 8010350:	69e6      	ldr	r6, [r4, #28]
 8010352:	68f3      	ldr	r3, [r6, #12]
 8010354:	b183      	cbz	r3, 8010378 <_Balloc+0x50>
 8010356:	69e3      	ldr	r3, [r4, #28]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801035e:	b9b8      	cbnz	r0, 8010390 <_Balloc+0x68>
 8010360:	2101      	movs	r1, #1
 8010362:	fa01 f605 	lsl.w	r6, r1, r5
 8010366:	1d72      	adds	r2, r6, #5
 8010368:	0092      	lsls	r2, r2, #2
 801036a:	4620      	mov	r0, r4
 801036c:	f000 fdaa 	bl	8010ec4 <_calloc_r>
 8010370:	b160      	cbz	r0, 801038c <_Balloc+0x64>
 8010372:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010376:	e00e      	b.n	8010396 <_Balloc+0x6e>
 8010378:	2221      	movs	r2, #33	@ 0x21
 801037a:	2104      	movs	r1, #4
 801037c:	4620      	mov	r0, r4
 801037e:	f000 fda1 	bl	8010ec4 <_calloc_r>
 8010382:	69e3      	ldr	r3, [r4, #28]
 8010384:	60f0      	str	r0, [r6, #12]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1e4      	bne.n	8010356 <_Balloc+0x2e>
 801038c:	2000      	movs	r0, #0
 801038e:	bd70      	pop	{r4, r5, r6, pc}
 8010390:	6802      	ldr	r2, [r0, #0]
 8010392:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010396:	2300      	movs	r3, #0
 8010398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801039c:	e7f7      	b.n	801038e <_Balloc+0x66>
 801039e:	bf00      	nop
 80103a0:	080127c5 	.word	0x080127c5
 80103a4:	08012845 	.word	0x08012845

080103a8 <_Bfree>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	69c6      	ldr	r6, [r0, #28]
 80103ac:	4605      	mov	r5, r0
 80103ae:	460c      	mov	r4, r1
 80103b0:	b976      	cbnz	r6, 80103d0 <_Bfree+0x28>
 80103b2:	2010      	movs	r0, #16
 80103b4:	f7ff ff02 	bl	80101bc <malloc>
 80103b8:	4602      	mov	r2, r0
 80103ba:	61e8      	str	r0, [r5, #28]
 80103bc:	b920      	cbnz	r0, 80103c8 <_Bfree+0x20>
 80103be:	4b09      	ldr	r3, [pc, #36]	@ (80103e4 <_Bfree+0x3c>)
 80103c0:	4809      	ldr	r0, [pc, #36]	@ (80103e8 <_Bfree+0x40>)
 80103c2:	218f      	movs	r1, #143	@ 0x8f
 80103c4:	f000 fd60 	bl	8010e88 <__assert_func>
 80103c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103cc:	6006      	str	r6, [r0, #0]
 80103ce:	60c6      	str	r6, [r0, #12]
 80103d0:	b13c      	cbz	r4, 80103e2 <_Bfree+0x3a>
 80103d2:	69eb      	ldr	r3, [r5, #28]
 80103d4:	6862      	ldr	r2, [r4, #4]
 80103d6:	68db      	ldr	r3, [r3, #12]
 80103d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103dc:	6021      	str	r1, [r4, #0]
 80103de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80103e2:	bd70      	pop	{r4, r5, r6, pc}
 80103e4:	080127c5 	.word	0x080127c5
 80103e8:	08012845 	.word	0x08012845

080103ec <__multadd>:
 80103ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f0:	690d      	ldr	r5, [r1, #16]
 80103f2:	4607      	mov	r7, r0
 80103f4:	460c      	mov	r4, r1
 80103f6:	461e      	mov	r6, r3
 80103f8:	f101 0c14 	add.w	ip, r1, #20
 80103fc:	2000      	movs	r0, #0
 80103fe:	f8dc 3000 	ldr.w	r3, [ip]
 8010402:	b299      	uxth	r1, r3
 8010404:	fb02 6101 	mla	r1, r2, r1, r6
 8010408:	0c1e      	lsrs	r6, r3, #16
 801040a:	0c0b      	lsrs	r3, r1, #16
 801040c:	fb02 3306 	mla	r3, r2, r6, r3
 8010410:	b289      	uxth	r1, r1
 8010412:	3001      	adds	r0, #1
 8010414:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010418:	4285      	cmp	r5, r0
 801041a:	f84c 1b04 	str.w	r1, [ip], #4
 801041e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010422:	dcec      	bgt.n	80103fe <__multadd+0x12>
 8010424:	b30e      	cbz	r6, 801046a <__multadd+0x7e>
 8010426:	68a3      	ldr	r3, [r4, #8]
 8010428:	42ab      	cmp	r3, r5
 801042a:	dc19      	bgt.n	8010460 <__multadd+0x74>
 801042c:	6861      	ldr	r1, [r4, #4]
 801042e:	4638      	mov	r0, r7
 8010430:	3101      	adds	r1, #1
 8010432:	f7ff ff79 	bl	8010328 <_Balloc>
 8010436:	4680      	mov	r8, r0
 8010438:	b928      	cbnz	r0, 8010446 <__multadd+0x5a>
 801043a:	4602      	mov	r2, r0
 801043c:	4b0c      	ldr	r3, [pc, #48]	@ (8010470 <__multadd+0x84>)
 801043e:	480d      	ldr	r0, [pc, #52]	@ (8010474 <__multadd+0x88>)
 8010440:	21ba      	movs	r1, #186	@ 0xba
 8010442:	f000 fd21 	bl	8010e88 <__assert_func>
 8010446:	6922      	ldr	r2, [r4, #16]
 8010448:	3202      	adds	r2, #2
 801044a:	f104 010c 	add.w	r1, r4, #12
 801044e:	0092      	lsls	r2, r2, #2
 8010450:	300c      	adds	r0, #12
 8010452:	f7ff f80c 	bl	800f46e <memcpy>
 8010456:	4621      	mov	r1, r4
 8010458:	4638      	mov	r0, r7
 801045a:	f7ff ffa5 	bl	80103a8 <_Bfree>
 801045e:	4644      	mov	r4, r8
 8010460:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010464:	3501      	adds	r5, #1
 8010466:	615e      	str	r6, [r3, #20]
 8010468:	6125      	str	r5, [r4, #16]
 801046a:	4620      	mov	r0, r4
 801046c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010470:	08012834 	.word	0x08012834
 8010474:	08012845 	.word	0x08012845

08010478 <__hi0bits>:
 8010478:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801047c:	4603      	mov	r3, r0
 801047e:	bf36      	itet	cc
 8010480:	0403      	lslcc	r3, r0, #16
 8010482:	2000      	movcs	r0, #0
 8010484:	2010      	movcc	r0, #16
 8010486:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801048a:	bf3c      	itt	cc
 801048c:	021b      	lslcc	r3, r3, #8
 801048e:	3008      	addcc	r0, #8
 8010490:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010494:	bf3c      	itt	cc
 8010496:	011b      	lslcc	r3, r3, #4
 8010498:	3004      	addcc	r0, #4
 801049a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801049e:	bf3c      	itt	cc
 80104a0:	009b      	lslcc	r3, r3, #2
 80104a2:	3002      	addcc	r0, #2
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	db05      	blt.n	80104b4 <__hi0bits+0x3c>
 80104a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80104ac:	f100 0001 	add.w	r0, r0, #1
 80104b0:	bf08      	it	eq
 80104b2:	2020      	moveq	r0, #32
 80104b4:	4770      	bx	lr

080104b6 <__lo0bits>:
 80104b6:	6803      	ldr	r3, [r0, #0]
 80104b8:	4602      	mov	r2, r0
 80104ba:	f013 0007 	ands.w	r0, r3, #7
 80104be:	d00b      	beq.n	80104d8 <__lo0bits+0x22>
 80104c0:	07d9      	lsls	r1, r3, #31
 80104c2:	d421      	bmi.n	8010508 <__lo0bits+0x52>
 80104c4:	0798      	lsls	r0, r3, #30
 80104c6:	bf49      	itett	mi
 80104c8:	085b      	lsrmi	r3, r3, #1
 80104ca:	089b      	lsrpl	r3, r3, #2
 80104cc:	2001      	movmi	r0, #1
 80104ce:	6013      	strmi	r3, [r2, #0]
 80104d0:	bf5c      	itt	pl
 80104d2:	6013      	strpl	r3, [r2, #0]
 80104d4:	2002      	movpl	r0, #2
 80104d6:	4770      	bx	lr
 80104d8:	b299      	uxth	r1, r3
 80104da:	b909      	cbnz	r1, 80104e0 <__lo0bits+0x2a>
 80104dc:	0c1b      	lsrs	r3, r3, #16
 80104de:	2010      	movs	r0, #16
 80104e0:	b2d9      	uxtb	r1, r3
 80104e2:	b909      	cbnz	r1, 80104e8 <__lo0bits+0x32>
 80104e4:	3008      	adds	r0, #8
 80104e6:	0a1b      	lsrs	r3, r3, #8
 80104e8:	0719      	lsls	r1, r3, #28
 80104ea:	bf04      	itt	eq
 80104ec:	091b      	lsreq	r3, r3, #4
 80104ee:	3004      	addeq	r0, #4
 80104f0:	0799      	lsls	r1, r3, #30
 80104f2:	bf04      	itt	eq
 80104f4:	089b      	lsreq	r3, r3, #2
 80104f6:	3002      	addeq	r0, #2
 80104f8:	07d9      	lsls	r1, r3, #31
 80104fa:	d403      	bmi.n	8010504 <__lo0bits+0x4e>
 80104fc:	085b      	lsrs	r3, r3, #1
 80104fe:	f100 0001 	add.w	r0, r0, #1
 8010502:	d003      	beq.n	801050c <__lo0bits+0x56>
 8010504:	6013      	str	r3, [r2, #0]
 8010506:	4770      	bx	lr
 8010508:	2000      	movs	r0, #0
 801050a:	4770      	bx	lr
 801050c:	2020      	movs	r0, #32
 801050e:	4770      	bx	lr

08010510 <__i2b>:
 8010510:	b510      	push	{r4, lr}
 8010512:	460c      	mov	r4, r1
 8010514:	2101      	movs	r1, #1
 8010516:	f7ff ff07 	bl	8010328 <_Balloc>
 801051a:	4602      	mov	r2, r0
 801051c:	b928      	cbnz	r0, 801052a <__i2b+0x1a>
 801051e:	4b05      	ldr	r3, [pc, #20]	@ (8010534 <__i2b+0x24>)
 8010520:	4805      	ldr	r0, [pc, #20]	@ (8010538 <__i2b+0x28>)
 8010522:	f240 1145 	movw	r1, #325	@ 0x145
 8010526:	f000 fcaf 	bl	8010e88 <__assert_func>
 801052a:	2301      	movs	r3, #1
 801052c:	6144      	str	r4, [r0, #20]
 801052e:	6103      	str	r3, [r0, #16]
 8010530:	bd10      	pop	{r4, pc}
 8010532:	bf00      	nop
 8010534:	08012834 	.word	0x08012834
 8010538:	08012845 	.word	0x08012845

0801053c <__multiply>:
 801053c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010540:	4614      	mov	r4, r2
 8010542:	690a      	ldr	r2, [r1, #16]
 8010544:	6923      	ldr	r3, [r4, #16]
 8010546:	429a      	cmp	r2, r3
 8010548:	bfa8      	it	ge
 801054a:	4623      	movge	r3, r4
 801054c:	460f      	mov	r7, r1
 801054e:	bfa4      	itt	ge
 8010550:	460c      	movge	r4, r1
 8010552:	461f      	movge	r7, r3
 8010554:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010558:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801055c:	68a3      	ldr	r3, [r4, #8]
 801055e:	6861      	ldr	r1, [r4, #4]
 8010560:	eb0a 0609 	add.w	r6, sl, r9
 8010564:	42b3      	cmp	r3, r6
 8010566:	b085      	sub	sp, #20
 8010568:	bfb8      	it	lt
 801056a:	3101      	addlt	r1, #1
 801056c:	f7ff fedc 	bl	8010328 <_Balloc>
 8010570:	b930      	cbnz	r0, 8010580 <__multiply+0x44>
 8010572:	4602      	mov	r2, r0
 8010574:	4b44      	ldr	r3, [pc, #272]	@ (8010688 <__multiply+0x14c>)
 8010576:	4845      	ldr	r0, [pc, #276]	@ (801068c <__multiply+0x150>)
 8010578:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801057c:	f000 fc84 	bl	8010e88 <__assert_func>
 8010580:	f100 0514 	add.w	r5, r0, #20
 8010584:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010588:	462b      	mov	r3, r5
 801058a:	2200      	movs	r2, #0
 801058c:	4543      	cmp	r3, r8
 801058e:	d321      	bcc.n	80105d4 <__multiply+0x98>
 8010590:	f107 0114 	add.w	r1, r7, #20
 8010594:	f104 0214 	add.w	r2, r4, #20
 8010598:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801059c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80105a0:	9302      	str	r3, [sp, #8]
 80105a2:	1b13      	subs	r3, r2, r4
 80105a4:	3b15      	subs	r3, #21
 80105a6:	f023 0303 	bic.w	r3, r3, #3
 80105aa:	3304      	adds	r3, #4
 80105ac:	f104 0715 	add.w	r7, r4, #21
 80105b0:	42ba      	cmp	r2, r7
 80105b2:	bf38      	it	cc
 80105b4:	2304      	movcc	r3, #4
 80105b6:	9301      	str	r3, [sp, #4]
 80105b8:	9b02      	ldr	r3, [sp, #8]
 80105ba:	9103      	str	r1, [sp, #12]
 80105bc:	428b      	cmp	r3, r1
 80105be:	d80c      	bhi.n	80105da <__multiply+0x9e>
 80105c0:	2e00      	cmp	r6, #0
 80105c2:	dd03      	ble.n	80105cc <__multiply+0x90>
 80105c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d05b      	beq.n	8010684 <__multiply+0x148>
 80105cc:	6106      	str	r6, [r0, #16]
 80105ce:	b005      	add	sp, #20
 80105d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d4:	f843 2b04 	str.w	r2, [r3], #4
 80105d8:	e7d8      	b.n	801058c <__multiply+0x50>
 80105da:	f8b1 a000 	ldrh.w	sl, [r1]
 80105de:	f1ba 0f00 	cmp.w	sl, #0
 80105e2:	d024      	beq.n	801062e <__multiply+0xf2>
 80105e4:	f104 0e14 	add.w	lr, r4, #20
 80105e8:	46a9      	mov	r9, r5
 80105ea:	f04f 0c00 	mov.w	ip, #0
 80105ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80105f2:	f8d9 3000 	ldr.w	r3, [r9]
 80105f6:	fa1f fb87 	uxth.w	fp, r7
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8010600:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010604:	f8d9 7000 	ldr.w	r7, [r9]
 8010608:	4463      	add	r3, ip
 801060a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801060e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010612:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010616:	b29b      	uxth	r3, r3
 8010618:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801061c:	4572      	cmp	r2, lr
 801061e:	f849 3b04 	str.w	r3, [r9], #4
 8010622:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010626:	d8e2      	bhi.n	80105ee <__multiply+0xb2>
 8010628:	9b01      	ldr	r3, [sp, #4]
 801062a:	f845 c003 	str.w	ip, [r5, r3]
 801062e:	9b03      	ldr	r3, [sp, #12]
 8010630:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010634:	3104      	adds	r1, #4
 8010636:	f1b9 0f00 	cmp.w	r9, #0
 801063a:	d021      	beq.n	8010680 <__multiply+0x144>
 801063c:	682b      	ldr	r3, [r5, #0]
 801063e:	f104 0c14 	add.w	ip, r4, #20
 8010642:	46ae      	mov	lr, r5
 8010644:	f04f 0a00 	mov.w	sl, #0
 8010648:	f8bc b000 	ldrh.w	fp, [ip]
 801064c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010650:	fb09 770b 	mla	r7, r9, fp, r7
 8010654:	4457      	add	r7, sl
 8010656:	b29b      	uxth	r3, r3
 8010658:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801065c:	f84e 3b04 	str.w	r3, [lr], #4
 8010660:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010664:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010668:	f8be 3000 	ldrh.w	r3, [lr]
 801066c:	fb09 330a 	mla	r3, r9, sl, r3
 8010670:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010674:	4562      	cmp	r2, ip
 8010676:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801067a:	d8e5      	bhi.n	8010648 <__multiply+0x10c>
 801067c:	9f01      	ldr	r7, [sp, #4]
 801067e:	51eb      	str	r3, [r5, r7]
 8010680:	3504      	adds	r5, #4
 8010682:	e799      	b.n	80105b8 <__multiply+0x7c>
 8010684:	3e01      	subs	r6, #1
 8010686:	e79b      	b.n	80105c0 <__multiply+0x84>
 8010688:	08012834 	.word	0x08012834
 801068c:	08012845 	.word	0x08012845

08010690 <__pow5mult>:
 8010690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010694:	4615      	mov	r5, r2
 8010696:	f012 0203 	ands.w	r2, r2, #3
 801069a:	4607      	mov	r7, r0
 801069c:	460e      	mov	r6, r1
 801069e:	d007      	beq.n	80106b0 <__pow5mult+0x20>
 80106a0:	4c25      	ldr	r4, [pc, #148]	@ (8010738 <__pow5mult+0xa8>)
 80106a2:	3a01      	subs	r2, #1
 80106a4:	2300      	movs	r3, #0
 80106a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106aa:	f7ff fe9f 	bl	80103ec <__multadd>
 80106ae:	4606      	mov	r6, r0
 80106b0:	10ad      	asrs	r5, r5, #2
 80106b2:	d03d      	beq.n	8010730 <__pow5mult+0xa0>
 80106b4:	69fc      	ldr	r4, [r7, #28]
 80106b6:	b97c      	cbnz	r4, 80106d8 <__pow5mult+0x48>
 80106b8:	2010      	movs	r0, #16
 80106ba:	f7ff fd7f 	bl	80101bc <malloc>
 80106be:	4602      	mov	r2, r0
 80106c0:	61f8      	str	r0, [r7, #28]
 80106c2:	b928      	cbnz	r0, 80106d0 <__pow5mult+0x40>
 80106c4:	4b1d      	ldr	r3, [pc, #116]	@ (801073c <__pow5mult+0xac>)
 80106c6:	481e      	ldr	r0, [pc, #120]	@ (8010740 <__pow5mult+0xb0>)
 80106c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80106cc:	f000 fbdc 	bl	8010e88 <__assert_func>
 80106d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106d4:	6004      	str	r4, [r0, #0]
 80106d6:	60c4      	str	r4, [r0, #12]
 80106d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80106dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106e0:	b94c      	cbnz	r4, 80106f6 <__pow5mult+0x66>
 80106e2:	f240 2171 	movw	r1, #625	@ 0x271
 80106e6:	4638      	mov	r0, r7
 80106e8:	f7ff ff12 	bl	8010510 <__i2b>
 80106ec:	2300      	movs	r3, #0
 80106ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80106f2:	4604      	mov	r4, r0
 80106f4:	6003      	str	r3, [r0, #0]
 80106f6:	f04f 0900 	mov.w	r9, #0
 80106fa:	07eb      	lsls	r3, r5, #31
 80106fc:	d50a      	bpl.n	8010714 <__pow5mult+0x84>
 80106fe:	4631      	mov	r1, r6
 8010700:	4622      	mov	r2, r4
 8010702:	4638      	mov	r0, r7
 8010704:	f7ff ff1a 	bl	801053c <__multiply>
 8010708:	4631      	mov	r1, r6
 801070a:	4680      	mov	r8, r0
 801070c:	4638      	mov	r0, r7
 801070e:	f7ff fe4b 	bl	80103a8 <_Bfree>
 8010712:	4646      	mov	r6, r8
 8010714:	106d      	asrs	r5, r5, #1
 8010716:	d00b      	beq.n	8010730 <__pow5mult+0xa0>
 8010718:	6820      	ldr	r0, [r4, #0]
 801071a:	b938      	cbnz	r0, 801072c <__pow5mult+0x9c>
 801071c:	4622      	mov	r2, r4
 801071e:	4621      	mov	r1, r4
 8010720:	4638      	mov	r0, r7
 8010722:	f7ff ff0b 	bl	801053c <__multiply>
 8010726:	6020      	str	r0, [r4, #0]
 8010728:	f8c0 9000 	str.w	r9, [r0]
 801072c:	4604      	mov	r4, r0
 801072e:	e7e4      	b.n	80106fa <__pow5mult+0x6a>
 8010730:	4630      	mov	r0, r6
 8010732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010736:	bf00      	nop
 8010738:	080128a0 	.word	0x080128a0
 801073c:	080127c5 	.word	0x080127c5
 8010740:	08012845 	.word	0x08012845

08010744 <__lshift>:
 8010744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010748:	460c      	mov	r4, r1
 801074a:	6849      	ldr	r1, [r1, #4]
 801074c:	6923      	ldr	r3, [r4, #16]
 801074e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010752:	68a3      	ldr	r3, [r4, #8]
 8010754:	4607      	mov	r7, r0
 8010756:	4691      	mov	r9, r2
 8010758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801075c:	f108 0601 	add.w	r6, r8, #1
 8010760:	42b3      	cmp	r3, r6
 8010762:	db0b      	blt.n	801077c <__lshift+0x38>
 8010764:	4638      	mov	r0, r7
 8010766:	f7ff fddf 	bl	8010328 <_Balloc>
 801076a:	4605      	mov	r5, r0
 801076c:	b948      	cbnz	r0, 8010782 <__lshift+0x3e>
 801076e:	4602      	mov	r2, r0
 8010770:	4b28      	ldr	r3, [pc, #160]	@ (8010814 <__lshift+0xd0>)
 8010772:	4829      	ldr	r0, [pc, #164]	@ (8010818 <__lshift+0xd4>)
 8010774:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010778:	f000 fb86 	bl	8010e88 <__assert_func>
 801077c:	3101      	adds	r1, #1
 801077e:	005b      	lsls	r3, r3, #1
 8010780:	e7ee      	b.n	8010760 <__lshift+0x1c>
 8010782:	2300      	movs	r3, #0
 8010784:	f100 0114 	add.w	r1, r0, #20
 8010788:	f100 0210 	add.w	r2, r0, #16
 801078c:	4618      	mov	r0, r3
 801078e:	4553      	cmp	r3, sl
 8010790:	db33      	blt.n	80107fa <__lshift+0xb6>
 8010792:	6920      	ldr	r0, [r4, #16]
 8010794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010798:	f104 0314 	add.w	r3, r4, #20
 801079c:	f019 091f 	ands.w	r9, r9, #31
 80107a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80107a8:	d02b      	beq.n	8010802 <__lshift+0xbe>
 80107aa:	f1c9 0e20 	rsb	lr, r9, #32
 80107ae:	468a      	mov	sl, r1
 80107b0:	2200      	movs	r2, #0
 80107b2:	6818      	ldr	r0, [r3, #0]
 80107b4:	fa00 f009 	lsl.w	r0, r0, r9
 80107b8:	4310      	orrs	r0, r2
 80107ba:	f84a 0b04 	str.w	r0, [sl], #4
 80107be:	f853 2b04 	ldr.w	r2, [r3], #4
 80107c2:	459c      	cmp	ip, r3
 80107c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80107c8:	d8f3      	bhi.n	80107b2 <__lshift+0x6e>
 80107ca:	ebac 0304 	sub.w	r3, ip, r4
 80107ce:	3b15      	subs	r3, #21
 80107d0:	f023 0303 	bic.w	r3, r3, #3
 80107d4:	3304      	adds	r3, #4
 80107d6:	f104 0015 	add.w	r0, r4, #21
 80107da:	4584      	cmp	ip, r0
 80107dc:	bf38      	it	cc
 80107de:	2304      	movcc	r3, #4
 80107e0:	50ca      	str	r2, [r1, r3]
 80107e2:	b10a      	cbz	r2, 80107e8 <__lshift+0xa4>
 80107e4:	f108 0602 	add.w	r6, r8, #2
 80107e8:	3e01      	subs	r6, #1
 80107ea:	4638      	mov	r0, r7
 80107ec:	612e      	str	r6, [r5, #16]
 80107ee:	4621      	mov	r1, r4
 80107f0:	f7ff fdda 	bl	80103a8 <_Bfree>
 80107f4:	4628      	mov	r0, r5
 80107f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80107fe:	3301      	adds	r3, #1
 8010800:	e7c5      	b.n	801078e <__lshift+0x4a>
 8010802:	3904      	subs	r1, #4
 8010804:	f853 2b04 	ldr.w	r2, [r3], #4
 8010808:	f841 2f04 	str.w	r2, [r1, #4]!
 801080c:	459c      	cmp	ip, r3
 801080e:	d8f9      	bhi.n	8010804 <__lshift+0xc0>
 8010810:	e7ea      	b.n	80107e8 <__lshift+0xa4>
 8010812:	bf00      	nop
 8010814:	08012834 	.word	0x08012834
 8010818:	08012845 	.word	0x08012845

0801081c <__mcmp>:
 801081c:	690a      	ldr	r2, [r1, #16]
 801081e:	4603      	mov	r3, r0
 8010820:	6900      	ldr	r0, [r0, #16]
 8010822:	1a80      	subs	r0, r0, r2
 8010824:	b530      	push	{r4, r5, lr}
 8010826:	d10e      	bne.n	8010846 <__mcmp+0x2a>
 8010828:	3314      	adds	r3, #20
 801082a:	3114      	adds	r1, #20
 801082c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010830:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010834:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010838:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801083c:	4295      	cmp	r5, r2
 801083e:	d003      	beq.n	8010848 <__mcmp+0x2c>
 8010840:	d205      	bcs.n	801084e <__mcmp+0x32>
 8010842:	f04f 30ff 	mov.w	r0, #4294967295
 8010846:	bd30      	pop	{r4, r5, pc}
 8010848:	42a3      	cmp	r3, r4
 801084a:	d3f3      	bcc.n	8010834 <__mcmp+0x18>
 801084c:	e7fb      	b.n	8010846 <__mcmp+0x2a>
 801084e:	2001      	movs	r0, #1
 8010850:	e7f9      	b.n	8010846 <__mcmp+0x2a>
	...

08010854 <__mdiff>:
 8010854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010858:	4689      	mov	r9, r1
 801085a:	4606      	mov	r6, r0
 801085c:	4611      	mov	r1, r2
 801085e:	4648      	mov	r0, r9
 8010860:	4614      	mov	r4, r2
 8010862:	f7ff ffdb 	bl	801081c <__mcmp>
 8010866:	1e05      	subs	r5, r0, #0
 8010868:	d112      	bne.n	8010890 <__mdiff+0x3c>
 801086a:	4629      	mov	r1, r5
 801086c:	4630      	mov	r0, r6
 801086e:	f7ff fd5b 	bl	8010328 <_Balloc>
 8010872:	4602      	mov	r2, r0
 8010874:	b928      	cbnz	r0, 8010882 <__mdiff+0x2e>
 8010876:	4b3f      	ldr	r3, [pc, #252]	@ (8010974 <__mdiff+0x120>)
 8010878:	f240 2137 	movw	r1, #567	@ 0x237
 801087c:	483e      	ldr	r0, [pc, #248]	@ (8010978 <__mdiff+0x124>)
 801087e:	f000 fb03 	bl	8010e88 <__assert_func>
 8010882:	2301      	movs	r3, #1
 8010884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010888:	4610      	mov	r0, r2
 801088a:	b003      	add	sp, #12
 801088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010890:	bfbc      	itt	lt
 8010892:	464b      	movlt	r3, r9
 8010894:	46a1      	movlt	r9, r4
 8010896:	4630      	mov	r0, r6
 8010898:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801089c:	bfba      	itte	lt
 801089e:	461c      	movlt	r4, r3
 80108a0:	2501      	movlt	r5, #1
 80108a2:	2500      	movge	r5, #0
 80108a4:	f7ff fd40 	bl	8010328 <_Balloc>
 80108a8:	4602      	mov	r2, r0
 80108aa:	b918      	cbnz	r0, 80108b4 <__mdiff+0x60>
 80108ac:	4b31      	ldr	r3, [pc, #196]	@ (8010974 <__mdiff+0x120>)
 80108ae:	f240 2145 	movw	r1, #581	@ 0x245
 80108b2:	e7e3      	b.n	801087c <__mdiff+0x28>
 80108b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80108b8:	6926      	ldr	r6, [r4, #16]
 80108ba:	60c5      	str	r5, [r0, #12]
 80108bc:	f109 0310 	add.w	r3, r9, #16
 80108c0:	f109 0514 	add.w	r5, r9, #20
 80108c4:	f104 0e14 	add.w	lr, r4, #20
 80108c8:	f100 0b14 	add.w	fp, r0, #20
 80108cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80108d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	46d9      	mov	r9, fp
 80108d8:	f04f 0c00 	mov.w	ip, #0
 80108dc:	9b01      	ldr	r3, [sp, #4]
 80108de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80108e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80108e6:	9301      	str	r3, [sp, #4]
 80108e8:	fa1f f38a 	uxth.w	r3, sl
 80108ec:	4619      	mov	r1, r3
 80108ee:	b283      	uxth	r3, r0
 80108f0:	1acb      	subs	r3, r1, r3
 80108f2:	0c00      	lsrs	r0, r0, #16
 80108f4:	4463      	add	r3, ip
 80108f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80108fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80108fe:	b29b      	uxth	r3, r3
 8010900:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010904:	4576      	cmp	r6, lr
 8010906:	f849 3b04 	str.w	r3, [r9], #4
 801090a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801090e:	d8e5      	bhi.n	80108dc <__mdiff+0x88>
 8010910:	1b33      	subs	r3, r6, r4
 8010912:	3b15      	subs	r3, #21
 8010914:	f023 0303 	bic.w	r3, r3, #3
 8010918:	3415      	adds	r4, #21
 801091a:	3304      	adds	r3, #4
 801091c:	42a6      	cmp	r6, r4
 801091e:	bf38      	it	cc
 8010920:	2304      	movcc	r3, #4
 8010922:	441d      	add	r5, r3
 8010924:	445b      	add	r3, fp
 8010926:	461e      	mov	r6, r3
 8010928:	462c      	mov	r4, r5
 801092a:	4544      	cmp	r4, r8
 801092c:	d30e      	bcc.n	801094c <__mdiff+0xf8>
 801092e:	f108 0103 	add.w	r1, r8, #3
 8010932:	1b49      	subs	r1, r1, r5
 8010934:	f021 0103 	bic.w	r1, r1, #3
 8010938:	3d03      	subs	r5, #3
 801093a:	45a8      	cmp	r8, r5
 801093c:	bf38      	it	cc
 801093e:	2100      	movcc	r1, #0
 8010940:	440b      	add	r3, r1
 8010942:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010946:	b191      	cbz	r1, 801096e <__mdiff+0x11a>
 8010948:	6117      	str	r7, [r2, #16]
 801094a:	e79d      	b.n	8010888 <__mdiff+0x34>
 801094c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010950:	46e6      	mov	lr, ip
 8010952:	0c08      	lsrs	r0, r1, #16
 8010954:	fa1c fc81 	uxtah	ip, ip, r1
 8010958:	4471      	add	r1, lr
 801095a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801095e:	b289      	uxth	r1, r1
 8010960:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010964:	f846 1b04 	str.w	r1, [r6], #4
 8010968:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801096c:	e7dd      	b.n	801092a <__mdiff+0xd6>
 801096e:	3f01      	subs	r7, #1
 8010970:	e7e7      	b.n	8010942 <__mdiff+0xee>
 8010972:	bf00      	nop
 8010974:	08012834 	.word	0x08012834
 8010978:	08012845 	.word	0x08012845

0801097c <__d2b>:
 801097c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010980:	460f      	mov	r7, r1
 8010982:	2101      	movs	r1, #1
 8010984:	ec59 8b10 	vmov	r8, r9, d0
 8010988:	4616      	mov	r6, r2
 801098a:	f7ff fccd 	bl	8010328 <_Balloc>
 801098e:	4604      	mov	r4, r0
 8010990:	b930      	cbnz	r0, 80109a0 <__d2b+0x24>
 8010992:	4602      	mov	r2, r0
 8010994:	4b23      	ldr	r3, [pc, #140]	@ (8010a24 <__d2b+0xa8>)
 8010996:	4824      	ldr	r0, [pc, #144]	@ (8010a28 <__d2b+0xac>)
 8010998:	f240 310f 	movw	r1, #783	@ 0x30f
 801099c:	f000 fa74 	bl	8010e88 <__assert_func>
 80109a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80109a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80109a8:	b10d      	cbz	r5, 80109ae <__d2b+0x32>
 80109aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80109ae:	9301      	str	r3, [sp, #4]
 80109b0:	f1b8 0300 	subs.w	r3, r8, #0
 80109b4:	d023      	beq.n	80109fe <__d2b+0x82>
 80109b6:	4668      	mov	r0, sp
 80109b8:	9300      	str	r3, [sp, #0]
 80109ba:	f7ff fd7c 	bl	80104b6 <__lo0bits>
 80109be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80109c2:	b1d0      	cbz	r0, 80109fa <__d2b+0x7e>
 80109c4:	f1c0 0320 	rsb	r3, r0, #32
 80109c8:	fa02 f303 	lsl.w	r3, r2, r3
 80109cc:	430b      	orrs	r3, r1
 80109ce:	40c2      	lsrs	r2, r0
 80109d0:	6163      	str	r3, [r4, #20]
 80109d2:	9201      	str	r2, [sp, #4]
 80109d4:	9b01      	ldr	r3, [sp, #4]
 80109d6:	61a3      	str	r3, [r4, #24]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	bf0c      	ite	eq
 80109dc:	2201      	moveq	r2, #1
 80109de:	2202      	movne	r2, #2
 80109e0:	6122      	str	r2, [r4, #16]
 80109e2:	b1a5      	cbz	r5, 8010a0e <__d2b+0x92>
 80109e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80109e8:	4405      	add	r5, r0
 80109ea:	603d      	str	r5, [r7, #0]
 80109ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80109f0:	6030      	str	r0, [r6, #0]
 80109f2:	4620      	mov	r0, r4
 80109f4:	b003      	add	sp, #12
 80109f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109fa:	6161      	str	r1, [r4, #20]
 80109fc:	e7ea      	b.n	80109d4 <__d2b+0x58>
 80109fe:	a801      	add	r0, sp, #4
 8010a00:	f7ff fd59 	bl	80104b6 <__lo0bits>
 8010a04:	9b01      	ldr	r3, [sp, #4]
 8010a06:	6163      	str	r3, [r4, #20]
 8010a08:	3020      	adds	r0, #32
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	e7e8      	b.n	80109e0 <__d2b+0x64>
 8010a0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010a16:	6038      	str	r0, [r7, #0]
 8010a18:	6918      	ldr	r0, [r3, #16]
 8010a1a:	f7ff fd2d 	bl	8010478 <__hi0bits>
 8010a1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a22:	e7e5      	b.n	80109f0 <__d2b+0x74>
 8010a24:	08012834 	.word	0x08012834
 8010a28:	08012845 	.word	0x08012845

08010a2c <__ssputs_r>:
 8010a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a30:	688e      	ldr	r6, [r1, #8]
 8010a32:	461f      	mov	r7, r3
 8010a34:	42be      	cmp	r6, r7
 8010a36:	680b      	ldr	r3, [r1, #0]
 8010a38:	4682      	mov	sl, r0
 8010a3a:	460c      	mov	r4, r1
 8010a3c:	4690      	mov	r8, r2
 8010a3e:	d82d      	bhi.n	8010a9c <__ssputs_r+0x70>
 8010a40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a48:	d026      	beq.n	8010a98 <__ssputs_r+0x6c>
 8010a4a:	6965      	ldr	r5, [r4, #20]
 8010a4c:	6909      	ldr	r1, [r1, #16]
 8010a4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a52:	eba3 0901 	sub.w	r9, r3, r1
 8010a56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a5a:	1c7b      	adds	r3, r7, #1
 8010a5c:	444b      	add	r3, r9
 8010a5e:	106d      	asrs	r5, r5, #1
 8010a60:	429d      	cmp	r5, r3
 8010a62:	bf38      	it	cc
 8010a64:	461d      	movcc	r5, r3
 8010a66:	0553      	lsls	r3, r2, #21
 8010a68:	d527      	bpl.n	8010aba <__ssputs_r+0x8e>
 8010a6a:	4629      	mov	r1, r5
 8010a6c:	f7ff fbd0 	bl	8010210 <_malloc_r>
 8010a70:	4606      	mov	r6, r0
 8010a72:	b360      	cbz	r0, 8010ace <__ssputs_r+0xa2>
 8010a74:	6921      	ldr	r1, [r4, #16]
 8010a76:	464a      	mov	r2, r9
 8010a78:	f7fe fcf9 	bl	800f46e <memcpy>
 8010a7c:	89a3      	ldrh	r3, [r4, #12]
 8010a7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a86:	81a3      	strh	r3, [r4, #12]
 8010a88:	6126      	str	r6, [r4, #16]
 8010a8a:	6165      	str	r5, [r4, #20]
 8010a8c:	444e      	add	r6, r9
 8010a8e:	eba5 0509 	sub.w	r5, r5, r9
 8010a92:	6026      	str	r6, [r4, #0]
 8010a94:	60a5      	str	r5, [r4, #8]
 8010a96:	463e      	mov	r6, r7
 8010a98:	42be      	cmp	r6, r7
 8010a9a:	d900      	bls.n	8010a9e <__ssputs_r+0x72>
 8010a9c:	463e      	mov	r6, r7
 8010a9e:	6820      	ldr	r0, [r4, #0]
 8010aa0:	4632      	mov	r2, r6
 8010aa2:	4641      	mov	r1, r8
 8010aa4:	f000 f9c6 	bl	8010e34 <memmove>
 8010aa8:	68a3      	ldr	r3, [r4, #8]
 8010aaa:	1b9b      	subs	r3, r3, r6
 8010aac:	60a3      	str	r3, [r4, #8]
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	4433      	add	r3, r6
 8010ab2:	6023      	str	r3, [r4, #0]
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aba:	462a      	mov	r2, r5
 8010abc:	f000 fa28 	bl	8010f10 <_realloc_r>
 8010ac0:	4606      	mov	r6, r0
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d1e0      	bne.n	8010a88 <__ssputs_r+0x5c>
 8010ac6:	6921      	ldr	r1, [r4, #16]
 8010ac8:	4650      	mov	r0, sl
 8010aca:	f7ff fb2d 	bl	8010128 <_free_r>
 8010ace:	230c      	movs	r3, #12
 8010ad0:	f8ca 3000 	str.w	r3, [sl]
 8010ad4:	89a3      	ldrh	r3, [r4, #12]
 8010ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ada:	81a3      	strh	r3, [r4, #12]
 8010adc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae0:	e7e9      	b.n	8010ab6 <__ssputs_r+0x8a>
	...

08010ae4 <_svfiprintf_r>:
 8010ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae8:	4698      	mov	r8, r3
 8010aea:	898b      	ldrh	r3, [r1, #12]
 8010aec:	061b      	lsls	r3, r3, #24
 8010aee:	b09d      	sub	sp, #116	@ 0x74
 8010af0:	4607      	mov	r7, r0
 8010af2:	460d      	mov	r5, r1
 8010af4:	4614      	mov	r4, r2
 8010af6:	d510      	bpl.n	8010b1a <_svfiprintf_r+0x36>
 8010af8:	690b      	ldr	r3, [r1, #16]
 8010afa:	b973      	cbnz	r3, 8010b1a <_svfiprintf_r+0x36>
 8010afc:	2140      	movs	r1, #64	@ 0x40
 8010afe:	f7ff fb87 	bl	8010210 <_malloc_r>
 8010b02:	6028      	str	r0, [r5, #0]
 8010b04:	6128      	str	r0, [r5, #16]
 8010b06:	b930      	cbnz	r0, 8010b16 <_svfiprintf_r+0x32>
 8010b08:	230c      	movs	r3, #12
 8010b0a:	603b      	str	r3, [r7, #0]
 8010b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b10:	b01d      	add	sp, #116	@ 0x74
 8010b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b16:	2340      	movs	r3, #64	@ 0x40
 8010b18:	616b      	str	r3, [r5, #20]
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b1e:	2320      	movs	r3, #32
 8010b20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b28:	2330      	movs	r3, #48	@ 0x30
 8010b2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010cc8 <_svfiprintf_r+0x1e4>
 8010b2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b32:	f04f 0901 	mov.w	r9, #1
 8010b36:	4623      	mov	r3, r4
 8010b38:	469a      	mov	sl, r3
 8010b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b3e:	b10a      	cbz	r2, 8010b44 <_svfiprintf_r+0x60>
 8010b40:	2a25      	cmp	r2, #37	@ 0x25
 8010b42:	d1f9      	bne.n	8010b38 <_svfiprintf_r+0x54>
 8010b44:	ebba 0b04 	subs.w	fp, sl, r4
 8010b48:	d00b      	beq.n	8010b62 <_svfiprintf_r+0x7e>
 8010b4a:	465b      	mov	r3, fp
 8010b4c:	4622      	mov	r2, r4
 8010b4e:	4629      	mov	r1, r5
 8010b50:	4638      	mov	r0, r7
 8010b52:	f7ff ff6b 	bl	8010a2c <__ssputs_r>
 8010b56:	3001      	adds	r0, #1
 8010b58:	f000 80a7 	beq.w	8010caa <_svfiprintf_r+0x1c6>
 8010b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b5e:	445a      	add	r2, fp
 8010b60:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b62:	f89a 3000 	ldrb.w	r3, [sl]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f000 809f 	beq.w	8010caa <_svfiprintf_r+0x1c6>
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b76:	f10a 0a01 	add.w	sl, sl, #1
 8010b7a:	9304      	str	r3, [sp, #16]
 8010b7c:	9307      	str	r3, [sp, #28]
 8010b7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b82:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b84:	4654      	mov	r4, sl
 8010b86:	2205      	movs	r2, #5
 8010b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b8c:	484e      	ldr	r0, [pc, #312]	@ (8010cc8 <_svfiprintf_r+0x1e4>)
 8010b8e:	f7ef fb1f 	bl	80001d0 <memchr>
 8010b92:	9a04      	ldr	r2, [sp, #16]
 8010b94:	b9d8      	cbnz	r0, 8010bce <_svfiprintf_r+0xea>
 8010b96:	06d0      	lsls	r0, r2, #27
 8010b98:	bf44      	itt	mi
 8010b9a:	2320      	movmi	r3, #32
 8010b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ba0:	0711      	lsls	r1, r2, #28
 8010ba2:	bf44      	itt	mi
 8010ba4:	232b      	movmi	r3, #43	@ 0x2b
 8010ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010baa:	f89a 3000 	ldrb.w	r3, [sl]
 8010bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bb0:	d015      	beq.n	8010bde <_svfiprintf_r+0xfa>
 8010bb2:	9a07      	ldr	r2, [sp, #28]
 8010bb4:	4654      	mov	r4, sl
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	f04f 0c0a 	mov.w	ip, #10
 8010bbc:	4621      	mov	r1, r4
 8010bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bc2:	3b30      	subs	r3, #48	@ 0x30
 8010bc4:	2b09      	cmp	r3, #9
 8010bc6:	d94b      	bls.n	8010c60 <_svfiprintf_r+0x17c>
 8010bc8:	b1b0      	cbz	r0, 8010bf8 <_svfiprintf_r+0x114>
 8010bca:	9207      	str	r2, [sp, #28]
 8010bcc:	e014      	b.n	8010bf8 <_svfiprintf_r+0x114>
 8010bce:	eba0 0308 	sub.w	r3, r0, r8
 8010bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	9304      	str	r3, [sp, #16]
 8010bda:	46a2      	mov	sl, r4
 8010bdc:	e7d2      	b.n	8010b84 <_svfiprintf_r+0xa0>
 8010bde:	9b03      	ldr	r3, [sp, #12]
 8010be0:	1d19      	adds	r1, r3, #4
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	9103      	str	r1, [sp, #12]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	bfbb      	ittet	lt
 8010bea:	425b      	neglt	r3, r3
 8010bec:	f042 0202 	orrlt.w	r2, r2, #2
 8010bf0:	9307      	strge	r3, [sp, #28]
 8010bf2:	9307      	strlt	r3, [sp, #28]
 8010bf4:	bfb8      	it	lt
 8010bf6:	9204      	strlt	r2, [sp, #16]
 8010bf8:	7823      	ldrb	r3, [r4, #0]
 8010bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bfc:	d10a      	bne.n	8010c14 <_svfiprintf_r+0x130>
 8010bfe:	7863      	ldrb	r3, [r4, #1]
 8010c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c02:	d132      	bne.n	8010c6a <_svfiprintf_r+0x186>
 8010c04:	9b03      	ldr	r3, [sp, #12]
 8010c06:	1d1a      	adds	r2, r3, #4
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	9203      	str	r2, [sp, #12]
 8010c0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c10:	3402      	adds	r4, #2
 8010c12:	9305      	str	r3, [sp, #20]
 8010c14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010cd8 <_svfiprintf_r+0x1f4>
 8010c18:	7821      	ldrb	r1, [r4, #0]
 8010c1a:	2203      	movs	r2, #3
 8010c1c:	4650      	mov	r0, sl
 8010c1e:	f7ef fad7 	bl	80001d0 <memchr>
 8010c22:	b138      	cbz	r0, 8010c34 <_svfiprintf_r+0x150>
 8010c24:	9b04      	ldr	r3, [sp, #16]
 8010c26:	eba0 000a 	sub.w	r0, r0, sl
 8010c2a:	2240      	movs	r2, #64	@ 0x40
 8010c2c:	4082      	lsls	r2, r0
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	3401      	adds	r4, #1
 8010c32:	9304      	str	r3, [sp, #16]
 8010c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c38:	4824      	ldr	r0, [pc, #144]	@ (8010ccc <_svfiprintf_r+0x1e8>)
 8010c3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c3e:	2206      	movs	r2, #6
 8010c40:	f7ef fac6 	bl	80001d0 <memchr>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d036      	beq.n	8010cb6 <_svfiprintf_r+0x1d2>
 8010c48:	4b21      	ldr	r3, [pc, #132]	@ (8010cd0 <_svfiprintf_r+0x1ec>)
 8010c4a:	bb1b      	cbnz	r3, 8010c94 <_svfiprintf_r+0x1b0>
 8010c4c:	9b03      	ldr	r3, [sp, #12]
 8010c4e:	3307      	adds	r3, #7
 8010c50:	f023 0307 	bic.w	r3, r3, #7
 8010c54:	3308      	adds	r3, #8
 8010c56:	9303      	str	r3, [sp, #12]
 8010c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c5a:	4433      	add	r3, r6
 8010c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c5e:	e76a      	b.n	8010b36 <_svfiprintf_r+0x52>
 8010c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c64:	460c      	mov	r4, r1
 8010c66:	2001      	movs	r0, #1
 8010c68:	e7a8      	b.n	8010bbc <_svfiprintf_r+0xd8>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	3401      	adds	r4, #1
 8010c6e:	9305      	str	r3, [sp, #20]
 8010c70:	4619      	mov	r1, r3
 8010c72:	f04f 0c0a 	mov.w	ip, #10
 8010c76:	4620      	mov	r0, r4
 8010c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c7c:	3a30      	subs	r2, #48	@ 0x30
 8010c7e:	2a09      	cmp	r2, #9
 8010c80:	d903      	bls.n	8010c8a <_svfiprintf_r+0x1a6>
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d0c6      	beq.n	8010c14 <_svfiprintf_r+0x130>
 8010c86:	9105      	str	r1, [sp, #20]
 8010c88:	e7c4      	b.n	8010c14 <_svfiprintf_r+0x130>
 8010c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c8e:	4604      	mov	r4, r0
 8010c90:	2301      	movs	r3, #1
 8010c92:	e7f0      	b.n	8010c76 <_svfiprintf_r+0x192>
 8010c94:	ab03      	add	r3, sp, #12
 8010c96:	9300      	str	r3, [sp, #0]
 8010c98:	462a      	mov	r2, r5
 8010c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8010cd4 <_svfiprintf_r+0x1f0>)
 8010c9c:	a904      	add	r1, sp, #16
 8010c9e:	4638      	mov	r0, r7
 8010ca0:	f7fd fe32 	bl	800e908 <_printf_float>
 8010ca4:	1c42      	adds	r2, r0, #1
 8010ca6:	4606      	mov	r6, r0
 8010ca8:	d1d6      	bne.n	8010c58 <_svfiprintf_r+0x174>
 8010caa:	89ab      	ldrh	r3, [r5, #12]
 8010cac:	065b      	lsls	r3, r3, #25
 8010cae:	f53f af2d 	bmi.w	8010b0c <_svfiprintf_r+0x28>
 8010cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010cb4:	e72c      	b.n	8010b10 <_svfiprintf_r+0x2c>
 8010cb6:	ab03      	add	r3, sp, #12
 8010cb8:	9300      	str	r3, [sp, #0]
 8010cba:	462a      	mov	r2, r5
 8010cbc:	4b05      	ldr	r3, [pc, #20]	@ (8010cd4 <_svfiprintf_r+0x1f0>)
 8010cbe:	a904      	add	r1, sp, #16
 8010cc0:	4638      	mov	r0, r7
 8010cc2:	f7fe f8b9 	bl	800ee38 <_printf_i>
 8010cc6:	e7ed      	b.n	8010ca4 <_svfiprintf_r+0x1c0>
 8010cc8:	080129a0 	.word	0x080129a0
 8010ccc:	080129aa 	.word	0x080129aa
 8010cd0:	0800e909 	.word	0x0800e909
 8010cd4:	08010a2d 	.word	0x08010a2d
 8010cd8:	080129a6 	.word	0x080129a6

08010cdc <__sflush_r>:
 8010cdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce4:	0716      	lsls	r6, r2, #28
 8010ce6:	4605      	mov	r5, r0
 8010ce8:	460c      	mov	r4, r1
 8010cea:	d454      	bmi.n	8010d96 <__sflush_r+0xba>
 8010cec:	684b      	ldr	r3, [r1, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	dc02      	bgt.n	8010cf8 <__sflush_r+0x1c>
 8010cf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	dd48      	ble.n	8010d8a <__sflush_r+0xae>
 8010cf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010cfa:	2e00      	cmp	r6, #0
 8010cfc:	d045      	beq.n	8010d8a <__sflush_r+0xae>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d04:	682f      	ldr	r7, [r5, #0]
 8010d06:	6a21      	ldr	r1, [r4, #32]
 8010d08:	602b      	str	r3, [r5, #0]
 8010d0a:	d030      	beq.n	8010d6e <__sflush_r+0x92>
 8010d0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d0e:	89a3      	ldrh	r3, [r4, #12]
 8010d10:	0759      	lsls	r1, r3, #29
 8010d12:	d505      	bpl.n	8010d20 <__sflush_r+0x44>
 8010d14:	6863      	ldr	r3, [r4, #4]
 8010d16:	1ad2      	subs	r2, r2, r3
 8010d18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d1a:	b10b      	cbz	r3, 8010d20 <__sflush_r+0x44>
 8010d1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d1e:	1ad2      	subs	r2, r2, r3
 8010d20:	2300      	movs	r3, #0
 8010d22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d24:	6a21      	ldr	r1, [r4, #32]
 8010d26:	4628      	mov	r0, r5
 8010d28:	47b0      	blx	r6
 8010d2a:	1c43      	adds	r3, r0, #1
 8010d2c:	89a3      	ldrh	r3, [r4, #12]
 8010d2e:	d106      	bne.n	8010d3e <__sflush_r+0x62>
 8010d30:	6829      	ldr	r1, [r5, #0]
 8010d32:	291d      	cmp	r1, #29
 8010d34:	d82b      	bhi.n	8010d8e <__sflush_r+0xb2>
 8010d36:	4a2a      	ldr	r2, [pc, #168]	@ (8010de0 <__sflush_r+0x104>)
 8010d38:	410a      	asrs	r2, r1
 8010d3a:	07d6      	lsls	r6, r2, #31
 8010d3c:	d427      	bmi.n	8010d8e <__sflush_r+0xb2>
 8010d3e:	2200      	movs	r2, #0
 8010d40:	6062      	str	r2, [r4, #4]
 8010d42:	04d9      	lsls	r1, r3, #19
 8010d44:	6922      	ldr	r2, [r4, #16]
 8010d46:	6022      	str	r2, [r4, #0]
 8010d48:	d504      	bpl.n	8010d54 <__sflush_r+0x78>
 8010d4a:	1c42      	adds	r2, r0, #1
 8010d4c:	d101      	bne.n	8010d52 <__sflush_r+0x76>
 8010d4e:	682b      	ldr	r3, [r5, #0]
 8010d50:	b903      	cbnz	r3, 8010d54 <__sflush_r+0x78>
 8010d52:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d56:	602f      	str	r7, [r5, #0]
 8010d58:	b1b9      	cbz	r1, 8010d8a <__sflush_r+0xae>
 8010d5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d5e:	4299      	cmp	r1, r3
 8010d60:	d002      	beq.n	8010d68 <__sflush_r+0x8c>
 8010d62:	4628      	mov	r0, r5
 8010d64:	f7ff f9e0 	bl	8010128 <_free_r>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d6c:	e00d      	b.n	8010d8a <__sflush_r+0xae>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	4628      	mov	r0, r5
 8010d72:	47b0      	blx	r6
 8010d74:	4602      	mov	r2, r0
 8010d76:	1c50      	adds	r0, r2, #1
 8010d78:	d1c9      	bne.n	8010d0e <__sflush_r+0x32>
 8010d7a:	682b      	ldr	r3, [r5, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d0c6      	beq.n	8010d0e <__sflush_r+0x32>
 8010d80:	2b1d      	cmp	r3, #29
 8010d82:	d001      	beq.n	8010d88 <__sflush_r+0xac>
 8010d84:	2b16      	cmp	r3, #22
 8010d86:	d11e      	bne.n	8010dc6 <__sflush_r+0xea>
 8010d88:	602f      	str	r7, [r5, #0]
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	e022      	b.n	8010dd4 <__sflush_r+0xf8>
 8010d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d92:	b21b      	sxth	r3, r3
 8010d94:	e01b      	b.n	8010dce <__sflush_r+0xf2>
 8010d96:	690f      	ldr	r7, [r1, #16]
 8010d98:	2f00      	cmp	r7, #0
 8010d9a:	d0f6      	beq.n	8010d8a <__sflush_r+0xae>
 8010d9c:	0793      	lsls	r3, r2, #30
 8010d9e:	680e      	ldr	r6, [r1, #0]
 8010da0:	bf08      	it	eq
 8010da2:	694b      	ldreq	r3, [r1, #20]
 8010da4:	600f      	str	r7, [r1, #0]
 8010da6:	bf18      	it	ne
 8010da8:	2300      	movne	r3, #0
 8010daa:	eba6 0807 	sub.w	r8, r6, r7
 8010dae:	608b      	str	r3, [r1, #8]
 8010db0:	f1b8 0f00 	cmp.w	r8, #0
 8010db4:	dde9      	ble.n	8010d8a <__sflush_r+0xae>
 8010db6:	6a21      	ldr	r1, [r4, #32]
 8010db8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010dba:	4643      	mov	r3, r8
 8010dbc:	463a      	mov	r2, r7
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	47b0      	blx	r6
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	dc08      	bgt.n	8010dd8 <__sflush_r+0xfc>
 8010dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dce:	81a3      	strh	r3, [r4, #12]
 8010dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd8:	4407      	add	r7, r0
 8010dda:	eba8 0800 	sub.w	r8, r8, r0
 8010dde:	e7e7      	b.n	8010db0 <__sflush_r+0xd4>
 8010de0:	dfbffffe 	.word	0xdfbffffe

08010de4 <_fflush_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	690b      	ldr	r3, [r1, #16]
 8010de8:	4605      	mov	r5, r0
 8010dea:	460c      	mov	r4, r1
 8010dec:	b913      	cbnz	r3, 8010df4 <_fflush_r+0x10>
 8010dee:	2500      	movs	r5, #0
 8010df0:	4628      	mov	r0, r5
 8010df2:	bd38      	pop	{r3, r4, r5, pc}
 8010df4:	b118      	cbz	r0, 8010dfe <_fflush_r+0x1a>
 8010df6:	6a03      	ldr	r3, [r0, #32]
 8010df8:	b90b      	cbnz	r3, 8010dfe <_fflush_r+0x1a>
 8010dfa:	f7fe f9c9 	bl	800f190 <__sinit>
 8010dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d0f3      	beq.n	8010dee <_fflush_r+0xa>
 8010e06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e08:	07d0      	lsls	r0, r2, #31
 8010e0a:	d404      	bmi.n	8010e16 <_fflush_r+0x32>
 8010e0c:	0599      	lsls	r1, r3, #22
 8010e0e:	d402      	bmi.n	8010e16 <_fflush_r+0x32>
 8010e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e12:	f7fe fb2a 	bl	800f46a <__retarget_lock_acquire_recursive>
 8010e16:	4628      	mov	r0, r5
 8010e18:	4621      	mov	r1, r4
 8010e1a:	f7ff ff5f 	bl	8010cdc <__sflush_r>
 8010e1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e20:	07da      	lsls	r2, r3, #31
 8010e22:	4605      	mov	r5, r0
 8010e24:	d4e4      	bmi.n	8010df0 <_fflush_r+0xc>
 8010e26:	89a3      	ldrh	r3, [r4, #12]
 8010e28:	059b      	lsls	r3, r3, #22
 8010e2a:	d4e1      	bmi.n	8010df0 <_fflush_r+0xc>
 8010e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e2e:	f7fe fb1d 	bl	800f46c <__retarget_lock_release_recursive>
 8010e32:	e7dd      	b.n	8010df0 <_fflush_r+0xc>

08010e34 <memmove>:
 8010e34:	4288      	cmp	r0, r1
 8010e36:	b510      	push	{r4, lr}
 8010e38:	eb01 0402 	add.w	r4, r1, r2
 8010e3c:	d902      	bls.n	8010e44 <memmove+0x10>
 8010e3e:	4284      	cmp	r4, r0
 8010e40:	4623      	mov	r3, r4
 8010e42:	d807      	bhi.n	8010e54 <memmove+0x20>
 8010e44:	1e43      	subs	r3, r0, #1
 8010e46:	42a1      	cmp	r1, r4
 8010e48:	d008      	beq.n	8010e5c <memmove+0x28>
 8010e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e52:	e7f8      	b.n	8010e46 <memmove+0x12>
 8010e54:	4402      	add	r2, r0
 8010e56:	4601      	mov	r1, r0
 8010e58:	428a      	cmp	r2, r1
 8010e5a:	d100      	bne.n	8010e5e <memmove+0x2a>
 8010e5c:	bd10      	pop	{r4, pc}
 8010e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e66:	e7f7      	b.n	8010e58 <memmove+0x24>

08010e68 <_sbrk_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4d06      	ldr	r5, [pc, #24]	@ (8010e84 <_sbrk_r+0x1c>)
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	4604      	mov	r4, r0
 8010e70:	4608      	mov	r0, r1
 8010e72:	602b      	str	r3, [r5, #0]
 8010e74:	f7f4 fe1a 	bl	8005aac <_sbrk>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d102      	bne.n	8010e82 <_sbrk_r+0x1a>
 8010e7c:	682b      	ldr	r3, [r5, #0]
 8010e7e:	b103      	cbz	r3, 8010e82 <_sbrk_r+0x1a>
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	200057f8 	.word	0x200057f8

08010e88 <__assert_func>:
 8010e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e8a:	4614      	mov	r4, r2
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	4b09      	ldr	r3, [pc, #36]	@ (8010eb4 <__assert_func+0x2c>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4605      	mov	r5, r0
 8010e94:	68d8      	ldr	r0, [r3, #12]
 8010e96:	b954      	cbnz	r4, 8010eae <__assert_func+0x26>
 8010e98:	4b07      	ldr	r3, [pc, #28]	@ (8010eb8 <__assert_func+0x30>)
 8010e9a:	461c      	mov	r4, r3
 8010e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ea0:	9100      	str	r1, [sp, #0]
 8010ea2:	462b      	mov	r3, r5
 8010ea4:	4905      	ldr	r1, [pc, #20]	@ (8010ebc <__assert_func+0x34>)
 8010ea6:	f000 f86f 	bl	8010f88 <fiprintf>
 8010eaa:	f000 f87f 	bl	8010fac <abort>
 8010eae:	4b04      	ldr	r3, [pc, #16]	@ (8010ec0 <__assert_func+0x38>)
 8010eb0:	e7f4      	b.n	8010e9c <__assert_func+0x14>
 8010eb2:	bf00      	nop
 8010eb4:	2000007c 	.word	0x2000007c
 8010eb8:	080129f6 	.word	0x080129f6
 8010ebc:	080129c8 	.word	0x080129c8
 8010ec0:	080129bb 	.word	0x080129bb

08010ec4 <_calloc_r>:
 8010ec4:	b570      	push	{r4, r5, r6, lr}
 8010ec6:	fba1 5402 	umull	r5, r4, r1, r2
 8010eca:	b93c      	cbnz	r4, 8010edc <_calloc_r+0x18>
 8010ecc:	4629      	mov	r1, r5
 8010ece:	f7ff f99f 	bl	8010210 <_malloc_r>
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	b928      	cbnz	r0, 8010ee2 <_calloc_r+0x1e>
 8010ed6:	2600      	movs	r6, #0
 8010ed8:	4630      	mov	r0, r6
 8010eda:	bd70      	pop	{r4, r5, r6, pc}
 8010edc:	220c      	movs	r2, #12
 8010ede:	6002      	str	r2, [r0, #0]
 8010ee0:	e7f9      	b.n	8010ed6 <_calloc_r+0x12>
 8010ee2:	462a      	mov	r2, r5
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	f7fe f9ed 	bl	800f2c4 <memset>
 8010eea:	e7f5      	b.n	8010ed8 <_calloc_r+0x14>

08010eec <__ascii_mbtowc>:
 8010eec:	b082      	sub	sp, #8
 8010eee:	b901      	cbnz	r1, 8010ef2 <__ascii_mbtowc+0x6>
 8010ef0:	a901      	add	r1, sp, #4
 8010ef2:	b142      	cbz	r2, 8010f06 <__ascii_mbtowc+0x1a>
 8010ef4:	b14b      	cbz	r3, 8010f0a <__ascii_mbtowc+0x1e>
 8010ef6:	7813      	ldrb	r3, [r2, #0]
 8010ef8:	600b      	str	r3, [r1, #0]
 8010efa:	7812      	ldrb	r2, [r2, #0]
 8010efc:	1e10      	subs	r0, r2, #0
 8010efe:	bf18      	it	ne
 8010f00:	2001      	movne	r0, #1
 8010f02:	b002      	add	sp, #8
 8010f04:	4770      	bx	lr
 8010f06:	4610      	mov	r0, r2
 8010f08:	e7fb      	b.n	8010f02 <__ascii_mbtowc+0x16>
 8010f0a:	f06f 0001 	mvn.w	r0, #1
 8010f0e:	e7f8      	b.n	8010f02 <__ascii_mbtowc+0x16>

08010f10 <_realloc_r>:
 8010f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f14:	4680      	mov	r8, r0
 8010f16:	4615      	mov	r5, r2
 8010f18:	460c      	mov	r4, r1
 8010f1a:	b921      	cbnz	r1, 8010f26 <_realloc_r+0x16>
 8010f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f20:	4611      	mov	r1, r2
 8010f22:	f7ff b975 	b.w	8010210 <_malloc_r>
 8010f26:	b92a      	cbnz	r2, 8010f34 <_realloc_r+0x24>
 8010f28:	f7ff f8fe 	bl	8010128 <_free_r>
 8010f2c:	2400      	movs	r4, #0
 8010f2e:	4620      	mov	r0, r4
 8010f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f34:	f000 f841 	bl	8010fba <_malloc_usable_size_r>
 8010f38:	4285      	cmp	r5, r0
 8010f3a:	4606      	mov	r6, r0
 8010f3c:	d802      	bhi.n	8010f44 <_realloc_r+0x34>
 8010f3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010f42:	d8f4      	bhi.n	8010f2e <_realloc_r+0x1e>
 8010f44:	4629      	mov	r1, r5
 8010f46:	4640      	mov	r0, r8
 8010f48:	f7ff f962 	bl	8010210 <_malloc_r>
 8010f4c:	4607      	mov	r7, r0
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d0ec      	beq.n	8010f2c <_realloc_r+0x1c>
 8010f52:	42b5      	cmp	r5, r6
 8010f54:	462a      	mov	r2, r5
 8010f56:	4621      	mov	r1, r4
 8010f58:	bf28      	it	cs
 8010f5a:	4632      	movcs	r2, r6
 8010f5c:	f7fe fa87 	bl	800f46e <memcpy>
 8010f60:	4621      	mov	r1, r4
 8010f62:	4640      	mov	r0, r8
 8010f64:	f7ff f8e0 	bl	8010128 <_free_r>
 8010f68:	463c      	mov	r4, r7
 8010f6a:	e7e0      	b.n	8010f2e <_realloc_r+0x1e>

08010f6c <__ascii_wctomb>:
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	4608      	mov	r0, r1
 8010f70:	b141      	cbz	r1, 8010f84 <__ascii_wctomb+0x18>
 8010f72:	2aff      	cmp	r2, #255	@ 0xff
 8010f74:	d904      	bls.n	8010f80 <__ascii_wctomb+0x14>
 8010f76:	228a      	movs	r2, #138	@ 0x8a
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f7e:	4770      	bx	lr
 8010f80:	700a      	strb	r2, [r1, #0]
 8010f82:	2001      	movs	r0, #1
 8010f84:	4770      	bx	lr
	...

08010f88 <fiprintf>:
 8010f88:	b40e      	push	{r1, r2, r3}
 8010f8a:	b503      	push	{r0, r1, lr}
 8010f8c:	4601      	mov	r1, r0
 8010f8e:	ab03      	add	r3, sp, #12
 8010f90:	4805      	ldr	r0, [pc, #20]	@ (8010fa8 <fiprintf+0x20>)
 8010f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f96:	6800      	ldr	r0, [r0, #0]
 8010f98:	9301      	str	r3, [sp, #4]
 8010f9a:	f000 f83f 	bl	801101c <_vfiprintf_r>
 8010f9e:	b002      	add	sp, #8
 8010fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fa4:	b003      	add	sp, #12
 8010fa6:	4770      	bx	lr
 8010fa8:	2000007c 	.word	0x2000007c

08010fac <abort>:
 8010fac:	b508      	push	{r3, lr}
 8010fae:	2006      	movs	r0, #6
 8010fb0:	f000 fa08 	bl	80113c4 <raise>
 8010fb4:	2001      	movs	r0, #1
 8010fb6:	f7f4 fd01 	bl	80059bc <_exit>

08010fba <_malloc_usable_size_r>:
 8010fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fbe:	1f18      	subs	r0, r3, #4
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	bfbc      	itt	lt
 8010fc4:	580b      	ldrlt	r3, [r1, r0]
 8010fc6:	18c0      	addlt	r0, r0, r3
 8010fc8:	4770      	bx	lr

08010fca <__sfputc_r>:
 8010fca:	6893      	ldr	r3, [r2, #8]
 8010fcc:	3b01      	subs	r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	b410      	push	{r4}
 8010fd2:	6093      	str	r3, [r2, #8]
 8010fd4:	da08      	bge.n	8010fe8 <__sfputc_r+0x1e>
 8010fd6:	6994      	ldr	r4, [r2, #24]
 8010fd8:	42a3      	cmp	r3, r4
 8010fda:	db01      	blt.n	8010fe0 <__sfputc_r+0x16>
 8010fdc:	290a      	cmp	r1, #10
 8010fde:	d103      	bne.n	8010fe8 <__sfputc_r+0x1e>
 8010fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fe4:	f000 b932 	b.w	801124c <__swbuf_r>
 8010fe8:	6813      	ldr	r3, [r2, #0]
 8010fea:	1c58      	adds	r0, r3, #1
 8010fec:	6010      	str	r0, [r2, #0]
 8010fee:	7019      	strb	r1, [r3, #0]
 8010ff0:	4608      	mov	r0, r1
 8010ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <__sfputs_r>:
 8010ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	460f      	mov	r7, r1
 8010ffe:	4614      	mov	r4, r2
 8011000:	18d5      	adds	r5, r2, r3
 8011002:	42ac      	cmp	r4, r5
 8011004:	d101      	bne.n	801100a <__sfputs_r+0x12>
 8011006:	2000      	movs	r0, #0
 8011008:	e007      	b.n	801101a <__sfputs_r+0x22>
 801100a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801100e:	463a      	mov	r2, r7
 8011010:	4630      	mov	r0, r6
 8011012:	f7ff ffda 	bl	8010fca <__sfputc_r>
 8011016:	1c43      	adds	r3, r0, #1
 8011018:	d1f3      	bne.n	8011002 <__sfputs_r+0xa>
 801101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801101c <_vfiprintf_r>:
 801101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011020:	460d      	mov	r5, r1
 8011022:	b09d      	sub	sp, #116	@ 0x74
 8011024:	4614      	mov	r4, r2
 8011026:	4698      	mov	r8, r3
 8011028:	4606      	mov	r6, r0
 801102a:	b118      	cbz	r0, 8011034 <_vfiprintf_r+0x18>
 801102c:	6a03      	ldr	r3, [r0, #32]
 801102e:	b90b      	cbnz	r3, 8011034 <_vfiprintf_r+0x18>
 8011030:	f7fe f8ae 	bl	800f190 <__sinit>
 8011034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011036:	07d9      	lsls	r1, r3, #31
 8011038:	d405      	bmi.n	8011046 <_vfiprintf_r+0x2a>
 801103a:	89ab      	ldrh	r3, [r5, #12]
 801103c:	059a      	lsls	r2, r3, #22
 801103e:	d402      	bmi.n	8011046 <_vfiprintf_r+0x2a>
 8011040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011042:	f7fe fa12 	bl	800f46a <__retarget_lock_acquire_recursive>
 8011046:	89ab      	ldrh	r3, [r5, #12]
 8011048:	071b      	lsls	r3, r3, #28
 801104a:	d501      	bpl.n	8011050 <_vfiprintf_r+0x34>
 801104c:	692b      	ldr	r3, [r5, #16]
 801104e:	b99b      	cbnz	r3, 8011078 <_vfiprintf_r+0x5c>
 8011050:	4629      	mov	r1, r5
 8011052:	4630      	mov	r0, r6
 8011054:	f000 f938 	bl	80112c8 <__swsetup_r>
 8011058:	b170      	cbz	r0, 8011078 <_vfiprintf_r+0x5c>
 801105a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801105c:	07dc      	lsls	r4, r3, #31
 801105e:	d504      	bpl.n	801106a <_vfiprintf_r+0x4e>
 8011060:	f04f 30ff 	mov.w	r0, #4294967295
 8011064:	b01d      	add	sp, #116	@ 0x74
 8011066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106a:	89ab      	ldrh	r3, [r5, #12]
 801106c:	0598      	lsls	r0, r3, #22
 801106e:	d4f7      	bmi.n	8011060 <_vfiprintf_r+0x44>
 8011070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011072:	f7fe f9fb 	bl	800f46c <__retarget_lock_release_recursive>
 8011076:	e7f3      	b.n	8011060 <_vfiprintf_r+0x44>
 8011078:	2300      	movs	r3, #0
 801107a:	9309      	str	r3, [sp, #36]	@ 0x24
 801107c:	2320      	movs	r3, #32
 801107e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011082:	f8cd 800c 	str.w	r8, [sp, #12]
 8011086:	2330      	movs	r3, #48	@ 0x30
 8011088:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011238 <_vfiprintf_r+0x21c>
 801108c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011090:	f04f 0901 	mov.w	r9, #1
 8011094:	4623      	mov	r3, r4
 8011096:	469a      	mov	sl, r3
 8011098:	f813 2b01 	ldrb.w	r2, [r3], #1
 801109c:	b10a      	cbz	r2, 80110a2 <_vfiprintf_r+0x86>
 801109e:	2a25      	cmp	r2, #37	@ 0x25
 80110a0:	d1f9      	bne.n	8011096 <_vfiprintf_r+0x7a>
 80110a2:	ebba 0b04 	subs.w	fp, sl, r4
 80110a6:	d00b      	beq.n	80110c0 <_vfiprintf_r+0xa4>
 80110a8:	465b      	mov	r3, fp
 80110aa:	4622      	mov	r2, r4
 80110ac:	4629      	mov	r1, r5
 80110ae:	4630      	mov	r0, r6
 80110b0:	f7ff ffa2 	bl	8010ff8 <__sfputs_r>
 80110b4:	3001      	adds	r0, #1
 80110b6:	f000 80a7 	beq.w	8011208 <_vfiprintf_r+0x1ec>
 80110ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110bc:	445a      	add	r2, fp
 80110be:	9209      	str	r2, [sp, #36]	@ 0x24
 80110c0:	f89a 3000 	ldrb.w	r3, [sl]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f000 809f 	beq.w	8011208 <_vfiprintf_r+0x1ec>
 80110ca:	2300      	movs	r3, #0
 80110cc:	f04f 32ff 	mov.w	r2, #4294967295
 80110d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110d4:	f10a 0a01 	add.w	sl, sl, #1
 80110d8:	9304      	str	r3, [sp, #16]
 80110da:	9307      	str	r3, [sp, #28]
 80110dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80110e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80110e2:	4654      	mov	r4, sl
 80110e4:	2205      	movs	r2, #5
 80110e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ea:	4853      	ldr	r0, [pc, #332]	@ (8011238 <_vfiprintf_r+0x21c>)
 80110ec:	f7ef f870 	bl	80001d0 <memchr>
 80110f0:	9a04      	ldr	r2, [sp, #16]
 80110f2:	b9d8      	cbnz	r0, 801112c <_vfiprintf_r+0x110>
 80110f4:	06d1      	lsls	r1, r2, #27
 80110f6:	bf44      	itt	mi
 80110f8:	2320      	movmi	r3, #32
 80110fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110fe:	0713      	lsls	r3, r2, #28
 8011100:	bf44      	itt	mi
 8011102:	232b      	movmi	r3, #43	@ 0x2b
 8011104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011108:	f89a 3000 	ldrb.w	r3, [sl]
 801110c:	2b2a      	cmp	r3, #42	@ 0x2a
 801110e:	d015      	beq.n	801113c <_vfiprintf_r+0x120>
 8011110:	9a07      	ldr	r2, [sp, #28]
 8011112:	4654      	mov	r4, sl
 8011114:	2000      	movs	r0, #0
 8011116:	f04f 0c0a 	mov.w	ip, #10
 801111a:	4621      	mov	r1, r4
 801111c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011120:	3b30      	subs	r3, #48	@ 0x30
 8011122:	2b09      	cmp	r3, #9
 8011124:	d94b      	bls.n	80111be <_vfiprintf_r+0x1a2>
 8011126:	b1b0      	cbz	r0, 8011156 <_vfiprintf_r+0x13a>
 8011128:	9207      	str	r2, [sp, #28]
 801112a:	e014      	b.n	8011156 <_vfiprintf_r+0x13a>
 801112c:	eba0 0308 	sub.w	r3, r0, r8
 8011130:	fa09 f303 	lsl.w	r3, r9, r3
 8011134:	4313      	orrs	r3, r2
 8011136:	9304      	str	r3, [sp, #16]
 8011138:	46a2      	mov	sl, r4
 801113a:	e7d2      	b.n	80110e2 <_vfiprintf_r+0xc6>
 801113c:	9b03      	ldr	r3, [sp, #12]
 801113e:	1d19      	adds	r1, r3, #4
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	9103      	str	r1, [sp, #12]
 8011144:	2b00      	cmp	r3, #0
 8011146:	bfbb      	ittet	lt
 8011148:	425b      	neglt	r3, r3
 801114a:	f042 0202 	orrlt.w	r2, r2, #2
 801114e:	9307      	strge	r3, [sp, #28]
 8011150:	9307      	strlt	r3, [sp, #28]
 8011152:	bfb8      	it	lt
 8011154:	9204      	strlt	r2, [sp, #16]
 8011156:	7823      	ldrb	r3, [r4, #0]
 8011158:	2b2e      	cmp	r3, #46	@ 0x2e
 801115a:	d10a      	bne.n	8011172 <_vfiprintf_r+0x156>
 801115c:	7863      	ldrb	r3, [r4, #1]
 801115e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011160:	d132      	bne.n	80111c8 <_vfiprintf_r+0x1ac>
 8011162:	9b03      	ldr	r3, [sp, #12]
 8011164:	1d1a      	adds	r2, r3, #4
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	9203      	str	r2, [sp, #12]
 801116a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801116e:	3402      	adds	r4, #2
 8011170:	9305      	str	r3, [sp, #20]
 8011172:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011248 <_vfiprintf_r+0x22c>
 8011176:	7821      	ldrb	r1, [r4, #0]
 8011178:	2203      	movs	r2, #3
 801117a:	4650      	mov	r0, sl
 801117c:	f7ef f828 	bl	80001d0 <memchr>
 8011180:	b138      	cbz	r0, 8011192 <_vfiprintf_r+0x176>
 8011182:	9b04      	ldr	r3, [sp, #16]
 8011184:	eba0 000a 	sub.w	r0, r0, sl
 8011188:	2240      	movs	r2, #64	@ 0x40
 801118a:	4082      	lsls	r2, r0
 801118c:	4313      	orrs	r3, r2
 801118e:	3401      	adds	r4, #1
 8011190:	9304      	str	r3, [sp, #16]
 8011192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011196:	4829      	ldr	r0, [pc, #164]	@ (801123c <_vfiprintf_r+0x220>)
 8011198:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801119c:	2206      	movs	r2, #6
 801119e:	f7ef f817 	bl	80001d0 <memchr>
 80111a2:	2800      	cmp	r0, #0
 80111a4:	d03f      	beq.n	8011226 <_vfiprintf_r+0x20a>
 80111a6:	4b26      	ldr	r3, [pc, #152]	@ (8011240 <_vfiprintf_r+0x224>)
 80111a8:	bb1b      	cbnz	r3, 80111f2 <_vfiprintf_r+0x1d6>
 80111aa:	9b03      	ldr	r3, [sp, #12]
 80111ac:	3307      	adds	r3, #7
 80111ae:	f023 0307 	bic.w	r3, r3, #7
 80111b2:	3308      	adds	r3, #8
 80111b4:	9303      	str	r3, [sp, #12]
 80111b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111b8:	443b      	add	r3, r7
 80111ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80111bc:	e76a      	b.n	8011094 <_vfiprintf_r+0x78>
 80111be:	fb0c 3202 	mla	r2, ip, r2, r3
 80111c2:	460c      	mov	r4, r1
 80111c4:	2001      	movs	r0, #1
 80111c6:	e7a8      	b.n	801111a <_vfiprintf_r+0xfe>
 80111c8:	2300      	movs	r3, #0
 80111ca:	3401      	adds	r4, #1
 80111cc:	9305      	str	r3, [sp, #20]
 80111ce:	4619      	mov	r1, r3
 80111d0:	f04f 0c0a 	mov.w	ip, #10
 80111d4:	4620      	mov	r0, r4
 80111d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111da:	3a30      	subs	r2, #48	@ 0x30
 80111dc:	2a09      	cmp	r2, #9
 80111de:	d903      	bls.n	80111e8 <_vfiprintf_r+0x1cc>
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d0c6      	beq.n	8011172 <_vfiprintf_r+0x156>
 80111e4:	9105      	str	r1, [sp, #20]
 80111e6:	e7c4      	b.n	8011172 <_vfiprintf_r+0x156>
 80111e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80111ec:	4604      	mov	r4, r0
 80111ee:	2301      	movs	r3, #1
 80111f0:	e7f0      	b.n	80111d4 <_vfiprintf_r+0x1b8>
 80111f2:	ab03      	add	r3, sp, #12
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	462a      	mov	r2, r5
 80111f8:	4b12      	ldr	r3, [pc, #72]	@ (8011244 <_vfiprintf_r+0x228>)
 80111fa:	a904      	add	r1, sp, #16
 80111fc:	4630      	mov	r0, r6
 80111fe:	f7fd fb83 	bl	800e908 <_printf_float>
 8011202:	4607      	mov	r7, r0
 8011204:	1c78      	adds	r0, r7, #1
 8011206:	d1d6      	bne.n	80111b6 <_vfiprintf_r+0x19a>
 8011208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801120a:	07d9      	lsls	r1, r3, #31
 801120c:	d405      	bmi.n	801121a <_vfiprintf_r+0x1fe>
 801120e:	89ab      	ldrh	r3, [r5, #12]
 8011210:	059a      	lsls	r2, r3, #22
 8011212:	d402      	bmi.n	801121a <_vfiprintf_r+0x1fe>
 8011214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011216:	f7fe f929 	bl	800f46c <__retarget_lock_release_recursive>
 801121a:	89ab      	ldrh	r3, [r5, #12]
 801121c:	065b      	lsls	r3, r3, #25
 801121e:	f53f af1f 	bmi.w	8011060 <_vfiprintf_r+0x44>
 8011222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011224:	e71e      	b.n	8011064 <_vfiprintf_r+0x48>
 8011226:	ab03      	add	r3, sp, #12
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	462a      	mov	r2, r5
 801122c:	4b05      	ldr	r3, [pc, #20]	@ (8011244 <_vfiprintf_r+0x228>)
 801122e:	a904      	add	r1, sp, #16
 8011230:	4630      	mov	r0, r6
 8011232:	f7fd fe01 	bl	800ee38 <_printf_i>
 8011236:	e7e4      	b.n	8011202 <_vfiprintf_r+0x1e6>
 8011238:	080129a0 	.word	0x080129a0
 801123c:	080129aa 	.word	0x080129aa
 8011240:	0800e909 	.word	0x0800e909
 8011244:	08010ff9 	.word	0x08010ff9
 8011248:	080129a6 	.word	0x080129a6

0801124c <__swbuf_r>:
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124e:	460e      	mov	r6, r1
 8011250:	4614      	mov	r4, r2
 8011252:	4605      	mov	r5, r0
 8011254:	b118      	cbz	r0, 801125e <__swbuf_r+0x12>
 8011256:	6a03      	ldr	r3, [r0, #32]
 8011258:	b90b      	cbnz	r3, 801125e <__swbuf_r+0x12>
 801125a:	f7fd ff99 	bl	800f190 <__sinit>
 801125e:	69a3      	ldr	r3, [r4, #24]
 8011260:	60a3      	str	r3, [r4, #8]
 8011262:	89a3      	ldrh	r3, [r4, #12]
 8011264:	071a      	lsls	r2, r3, #28
 8011266:	d501      	bpl.n	801126c <__swbuf_r+0x20>
 8011268:	6923      	ldr	r3, [r4, #16]
 801126a:	b943      	cbnz	r3, 801127e <__swbuf_r+0x32>
 801126c:	4621      	mov	r1, r4
 801126e:	4628      	mov	r0, r5
 8011270:	f000 f82a 	bl	80112c8 <__swsetup_r>
 8011274:	b118      	cbz	r0, 801127e <__swbuf_r+0x32>
 8011276:	f04f 37ff 	mov.w	r7, #4294967295
 801127a:	4638      	mov	r0, r7
 801127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801127e:	6823      	ldr	r3, [r4, #0]
 8011280:	6922      	ldr	r2, [r4, #16]
 8011282:	1a98      	subs	r0, r3, r2
 8011284:	6963      	ldr	r3, [r4, #20]
 8011286:	b2f6      	uxtb	r6, r6
 8011288:	4283      	cmp	r3, r0
 801128a:	4637      	mov	r7, r6
 801128c:	dc05      	bgt.n	801129a <__swbuf_r+0x4e>
 801128e:	4621      	mov	r1, r4
 8011290:	4628      	mov	r0, r5
 8011292:	f7ff fda7 	bl	8010de4 <_fflush_r>
 8011296:	2800      	cmp	r0, #0
 8011298:	d1ed      	bne.n	8011276 <__swbuf_r+0x2a>
 801129a:	68a3      	ldr	r3, [r4, #8]
 801129c:	3b01      	subs	r3, #1
 801129e:	60a3      	str	r3, [r4, #8]
 80112a0:	6823      	ldr	r3, [r4, #0]
 80112a2:	1c5a      	adds	r2, r3, #1
 80112a4:	6022      	str	r2, [r4, #0]
 80112a6:	701e      	strb	r6, [r3, #0]
 80112a8:	6962      	ldr	r2, [r4, #20]
 80112aa:	1c43      	adds	r3, r0, #1
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d004      	beq.n	80112ba <__swbuf_r+0x6e>
 80112b0:	89a3      	ldrh	r3, [r4, #12]
 80112b2:	07db      	lsls	r3, r3, #31
 80112b4:	d5e1      	bpl.n	801127a <__swbuf_r+0x2e>
 80112b6:	2e0a      	cmp	r6, #10
 80112b8:	d1df      	bne.n	801127a <__swbuf_r+0x2e>
 80112ba:	4621      	mov	r1, r4
 80112bc:	4628      	mov	r0, r5
 80112be:	f7ff fd91 	bl	8010de4 <_fflush_r>
 80112c2:	2800      	cmp	r0, #0
 80112c4:	d0d9      	beq.n	801127a <__swbuf_r+0x2e>
 80112c6:	e7d6      	b.n	8011276 <__swbuf_r+0x2a>

080112c8 <__swsetup_r>:
 80112c8:	b538      	push	{r3, r4, r5, lr}
 80112ca:	4b29      	ldr	r3, [pc, #164]	@ (8011370 <__swsetup_r+0xa8>)
 80112cc:	4605      	mov	r5, r0
 80112ce:	6818      	ldr	r0, [r3, #0]
 80112d0:	460c      	mov	r4, r1
 80112d2:	b118      	cbz	r0, 80112dc <__swsetup_r+0x14>
 80112d4:	6a03      	ldr	r3, [r0, #32]
 80112d6:	b90b      	cbnz	r3, 80112dc <__swsetup_r+0x14>
 80112d8:	f7fd ff5a 	bl	800f190 <__sinit>
 80112dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112e0:	0719      	lsls	r1, r3, #28
 80112e2:	d422      	bmi.n	801132a <__swsetup_r+0x62>
 80112e4:	06da      	lsls	r2, r3, #27
 80112e6:	d407      	bmi.n	80112f8 <__swsetup_r+0x30>
 80112e8:	2209      	movs	r2, #9
 80112ea:	602a      	str	r2, [r5, #0]
 80112ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112f0:	81a3      	strh	r3, [r4, #12]
 80112f2:	f04f 30ff 	mov.w	r0, #4294967295
 80112f6:	e033      	b.n	8011360 <__swsetup_r+0x98>
 80112f8:	0758      	lsls	r0, r3, #29
 80112fa:	d512      	bpl.n	8011322 <__swsetup_r+0x5a>
 80112fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112fe:	b141      	cbz	r1, 8011312 <__swsetup_r+0x4a>
 8011300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011304:	4299      	cmp	r1, r3
 8011306:	d002      	beq.n	801130e <__swsetup_r+0x46>
 8011308:	4628      	mov	r0, r5
 801130a:	f7fe ff0d 	bl	8010128 <_free_r>
 801130e:	2300      	movs	r3, #0
 8011310:	6363      	str	r3, [r4, #52]	@ 0x34
 8011312:	89a3      	ldrh	r3, [r4, #12]
 8011314:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011318:	81a3      	strh	r3, [r4, #12]
 801131a:	2300      	movs	r3, #0
 801131c:	6063      	str	r3, [r4, #4]
 801131e:	6923      	ldr	r3, [r4, #16]
 8011320:	6023      	str	r3, [r4, #0]
 8011322:	89a3      	ldrh	r3, [r4, #12]
 8011324:	f043 0308 	orr.w	r3, r3, #8
 8011328:	81a3      	strh	r3, [r4, #12]
 801132a:	6923      	ldr	r3, [r4, #16]
 801132c:	b94b      	cbnz	r3, 8011342 <__swsetup_r+0x7a>
 801132e:	89a3      	ldrh	r3, [r4, #12]
 8011330:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011338:	d003      	beq.n	8011342 <__swsetup_r+0x7a>
 801133a:	4621      	mov	r1, r4
 801133c:	4628      	mov	r0, r5
 801133e:	f000 f883 	bl	8011448 <__smakebuf_r>
 8011342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011346:	f013 0201 	ands.w	r2, r3, #1
 801134a:	d00a      	beq.n	8011362 <__swsetup_r+0x9a>
 801134c:	2200      	movs	r2, #0
 801134e:	60a2      	str	r2, [r4, #8]
 8011350:	6962      	ldr	r2, [r4, #20]
 8011352:	4252      	negs	r2, r2
 8011354:	61a2      	str	r2, [r4, #24]
 8011356:	6922      	ldr	r2, [r4, #16]
 8011358:	b942      	cbnz	r2, 801136c <__swsetup_r+0xa4>
 801135a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801135e:	d1c5      	bne.n	80112ec <__swsetup_r+0x24>
 8011360:	bd38      	pop	{r3, r4, r5, pc}
 8011362:	0799      	lsls	r1, r3, #30
 8011364:	bf58      	it	pl
 8011366:	6962      	ldrpl	r2, [r4, #20]
 8011368:	60a2      	str	r2, [r4, #8]
 801136a:	e7f4      	b.n	8011356 <__swsetup_r+0x8e>
 801136c:	2000      	movs	r0, #0
 801136e:	e7f7      	b.n	8011360 <__swsetup_r+0x98>
 8011370:	2000007c 	.word	0x2000007c

08011374 <_raise_r>:
 8011374:	291f      	cmp	r1, #31
 8011376:	b538      	push	{r3, r4, r5, lr}
 8011378:	4605      	mov	r5, r0
 801137a:	460c      	mov	r4, r1
 801137c:	d904      	bls.n	8011388 <_raise_r+0x14>
 801137e:	2316      	movs	r3, #22
 8011380:	6003      	str	r3, [r0, #0]
 8011382:	f04f 30ff 	mov.w	r0, #4294967295
 8011386:	bd38      	pop	{r3, r4, r5, pc}
 8011388:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801138a:	b112      	cbz	r2, 8011392 <_raise_r+0x1e>
 801138c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011390:	b94b      	cbnz	r3, 80113a6 <_raise_r+0x32>
 8011392:	4628      	mov	r0, r5
 8011394:	f000 f830 	bl	80113f8 <_getpid_r>
 8011398:	4622      	mov	r2, r4
 801139a:	4601      	mov	r1, r0
 801139c:	4628      	mov	r0, r5
 801139e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113a2:	f000 b817 	b.w	80113d4 <_kill_r>
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d00a      	beq.n	80113c0 <_raise_r+0x4c>
 80113aa:	1c59      	adds	r1, r3, #1
 80113ac:	d103      	bne.n	80113b6 <_raise_r+0x42>
 80113ae:	2316      	movs	r3, #22
 80113b0:	6003      	str	r3, [r0, #0]
 80113b2:	2001      	movs	r0, #1
 80113b4:	e7e7      	b.n	8011386 <_raise_r+0x12>
 80113b6:	2100      	movs	r1, #0
 80113b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80113bc:	4620      	mov	r0, r4
 80113be:	4798      	blx	r3
 80113c0:	2000      	movs	r0, #0
 80113c2:	e7e0      	b.n	8011386 <_raise_r+0x12>

080113c4 <raise>:
 80113c4:	4b02      	ldr	r3, [pc, #8]	@ (80113d0 <raise+0xc>)
 80113c6:	4601      	mov	r1, r0
 80113c8:	6818      	ldr	r0, [r3, #0]
 80113ca:	f7ff bfd3 	b.w	8011374 <_raise_r>
 80113ce:	bf00      	nop
 80113d0:	2000007c 	.word	0x2000007c

080113d4 <_kill_r>:
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	4d07      	ldr	r5, [pc, #28]	@ (80113f4 <_kill_r+0x20>)
 80113d8:	2300      	movs	r3, #0
 80113da:	4604      	mov	r4, r0
 80113dc:	4608      	mov	r0, r1
 80113de:	4611      	mov	r1, r2
 80113e0:	602b      	str	r3, [r5, #0]
 80113e2:	f7f4 fadb 	bl	800599c <_kill>
 80113e6:	1c43      	adds	r3, r0, #1
 80113e8:	d102      	bne.n	80113f0 <_kill_r+0x1c>
 80113ea:	682b      	ldr	r3, [r5, #0]
 80113ec:	b103      	cbz	r3, 80113f0 <_kill_r+0x1c>
 80113ee:	6023      	str	r3, [r4, #0]
 80113f0:	bd38      	pop	{r3, r4, r5, pc}
 80113f2:	bf00      	nop
 80113f4:	200057f8 	.word	0x200057f8

080113f8 <_getpid_r>:
 80113f8:	f7f4 bac8 	b.w	800598c <_getpid>

080113fc <__swhatbuf_r>:
 80113fc:	b570      	push	{r4, r5, r6, lr}
 80113fe:	460c      	mov	r4, r1
 8011400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011404:	2900      	cmp	r1, #0
 8011406:	b096      	sub	sp, #88	@ 0x58
 8011408:	4615      	mov	r5, r2
 801140a:	461e      	mov	r6, r3
 801140c:	da0d      	bge.n	801142a <__swhatbuf_r+0x2e>
 801140e:	89a3      	ldrh	r3, [r4, #12]
 8011410:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011414:	f04f 0100 	mov.w	r1, #0
 8011418:	bf14      	ite	ne
 801141a:	2340      	movne	r3, #64	@ 0x40
 801141c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011420:	2000      	movs	r0, #0
 8011422:	6031      	str	r1, [r6, #0]
 8011424:	602b      	str	r3, [r5, #0]
 8011426:	b016      	add	sp, #88	@ 0x58
 8011428:	bd70      	pop	{r4, r5, r6, pc}
 801142a:	466a      	mov	r2, sp
 801142c:	f000 f848 	bl	80114c0 <_fstat_r>
 8011430:	2800      	cmp	r0, #0
 8011432:	dbec      	blt.n	801140e <__swhatbuf_r+0x12>
 8011434:	9901      	ldr	r1, [sp, #4]
 8011436:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801143a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801143e:	4259      	negs	r1, r3
 8011440:	4159      	adcs	r1, r3
 8011442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011446:	e7eb      	b.n	8011420 <__swhatbuf_r+0x24>

08011448 <__smakebuf_r>:
 8011448:	898b      	ldrh	r3, [r1, #12]
 801144a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801144c:	079d      	lsls	r5, r3, #30
 801144e:	4606      	mov	r6, r0
 8011450:	460c      	mov	r4, r1
 8011452:	d507      	bpl.n	8011464 <__smakebuf_r+0x1c>
 8011454:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	6123      	str	r3, [r4, #16]
 801145c:	2301      	movs	r3, #1
 801145e:	6163      	str	r3, [r4, #20]
 8011460:	b003      	add	sp, #12
 8011462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011464:	ab01      	add	r3, sp, #4
 8011466:	466a      	mov	r2, sp
 8011468:	f7ff ffc8 	bl	80113fc <__swhatbuf_r>
 801146c:	9f00      	ldr	r7, [sp, #0]
 801146e:	4605      	mov	r5, r0
 8011470:	4639      	mov	r1, r7
 8011472:	4630      	mov	r0, r6
 8011474:	f7fe fecc 	bl	8010210 <_malloc_r>
 8011478:	b948      	cbnz	r0, 801148e <__smakebuf_r+0x46>
 801147a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801147e:	059a      	lsls	r2, r3, #22
 8011480:	d4ee      	bmi.n	8011460 <__smakebuf_r+0x18>
 8011482:	f023 0303 	bic.w	r3, r3, #3
 8011486:	f043 0302 	orr.w	r3, r3, #2
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	e7e2      	b.n	8011454 <__smakebuf_r+0xc>
 801148e:	89a3      	ldrh	r3, [r4, #12]
 8011490:	6020      	str	r0, [r4, #0]
 8011492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011496:	81a3      	strh	r3, [r4, #12]
 8011498:	9b01      	ldr	r3, [sp, #4]
 801149a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801149e:	b15b      	cbz	r3, 80114b8 <__smakebuf_r+0x70>
 80114a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114a4:	4630      	mov	r0, r6
 80114a6:	f000 f81d 	bl	80114e4 <_isatty_r>
 80114aa:	b128      	cbz	r0, 80114b8 <__smakebuf_r+0x70>
 80114ac:	89a3      	ldrh	r3, [r4, #12]
 80114ae:	f023 0303 	bic.w	r3, r3, #3
 80114b2:	f043 0301 	orr.w	r3, r3, #1
 80114b6:	81a3      	strh	r3, [r4, #12]
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	431d      	orrs	r5, r3
 80114bc:	81a5      	strh	r5, [r4, #12]
 80114be:	e7cf      	b.n	8011460 <__smakebuf_r+0x18>

080114c0 <_fstat_r>:
 80114c0:	b538      	push	{r3, r4, r5, lr}
 80114c2:	4d07      	ldr	r5, [pc, #28]	@ (80114e0 <_fstat_r+0x20>)
 80114c4:	2300      	movs	r3, #0
 80114c6:	4604      	mov	r4, r0
 80114c8:	4608      	mov	r0, r1
 80114ca:	4611      	mov	r1, r2
 80114cc:	602b      	str	r3, [r5, #0]
 80114ce:	f7f4 fac5 	bl	8005a5c <_fstat>
 80114d2:	1c43      	adds	r3, r0, #1
 80114d4:	d102      	bne.n	80114dc <_fstat_r+0x1c>
 80114d6:	682b      	ldr	r3, [r5, #0]
 80114d8:	b103      	cbz	r3, 80114dc <_fstat_r+0x1c>
 80114da:	6023      	str	r3, [r4, #0]
 80114dc:	bd38      	pop	{r3, r4, r5, pc}
 80114de:	bf00      	nop
 80114e0:	200057f8 	.word	0x200057f8

080114e4 <_isatty_r>:
 80114e4:	b538      	push	{r3, r4, r5, lr}
 80114e6:	4d06      	ldr	r5, [pc, #24]	@ (8011500 <_isatty_r+0x1c>)
 80114e8:	2300      	movs	r3, #0
 80114ea:	4604      	mov	r4, r0
 80114ec:	4608      	mov	r0, r1
 80114ee:	602b      	str	r3, [r5, #0]
 80114f0:	f7f4 fac4 	bl	8005a7c <_isatty>
 80114f4:	1c43      	adds	r3, r0, #1
 80114f6:	d102      	bne.n	80114fe <_isatty_r+0x1a>
 80114f8:	682b      	ldr	r3, [r5, #0]
 80114fa:	b103      	cbz	r3, 80114fe <_isatty_r+0x1a>
 80114fc:	6023      	str	r3, [r4, #0]
 80114fe:	bd38      	pop	{r3, r4, r5, pc}
 8011500:	200057f8 	.word	0x200057f8
 8011504:	00000000 	.word	0x00000000

08011508 <cos>:
 8011508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801150a:	ec53 2b10 	vmov	r2, r3, d0
 801150e:	4826      	ldr	r0, [pc, #152]	@ (80115a8 <cos+0xa0>)
 8011510:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011514:	4281      	cmp	r1, r0
 8011516:	d806      	bhi.n	8011526 <cos+0x1e>
 8011518:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80115a0 <cos+0x98>
 801151c:	b005      	add	sp, #20
 801151e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011522:	f000 b899 	b.w	8011658 <__kernel_cos>
 8011526:	4821      	ldr	r0, [pc, #132]	@ (80115ac <cos+0xa4>)
 8011528:	4281      	cmp	r1, r0
 801152a:	d908      	bls.n	801153e <cos+0x36>
 801152c:	4610      	mov	r0, r2
 801152e:	4619      	mov	r1, r3
 8011530:	f7ee feaa 	bl	8000288 <__aeabi_dsub>
 8011534:	ec41 0b10 	vmov	d0, r0, r1
 8011538:	b005      	add	sp, #20
 801153a:	f85d fb04 	ldr.w	pc, [sp], #4
 801153e:	4668      	mov	r0, sp
 8011540:	f000 fa0e 	bl	8011960 <__ieee754_rem_pio2>
 8011544:	f000 0003 	and.w	r0, r0, #3
 8011548:	2801      	cmp	r0, #1
 801154a:	d00b      	beq.n	8011564 <cos+0x5c>
 801154c:	2802      	cmp	r0, #2
 801154e:	d015      	beq.n	801157c <cos+0x74>
 8011550:	b9d8      	cbnz	r0, 801158a <cos+0x82>
 8011552:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011556:	ed9d 0b00 	vldr	d0, [sp]
 801155a:	f000 f87d 	bl	8011658 <__kernel_cos>
 801155e:	ec51 0b10 	vmov	r0, r1, d0
 8011562:	e7e7      	b.n	8011534 <cos+0x2c>
 8011564:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011568:	ed9d 0b00 	vldr	d0, [sp]
 801156c:	f000 f93c 	bl	80117e8 <__kernel_sin>
 8011570:	ec53 2b10 	vmov	r2, r3, d0
 8011574:	4610      	mov	r0, r2
 8011576:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801157a:	e7db      	b.n	8011534 <cos+0x2c>
 801157c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011580:	ed9d 0b00 	vldr	d0, [sp]
 8011584:	f000 f868 	bl	8011658 <__kernel_cos>
 8011588:	e7f2      	b.n	8011570 <cos+0x68>
 801158a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801158e:	ed9d 0b00 	vldr	d0, [sp]
 8011592:	2001      	movs	r0, #1
 8011594:	f000 f928 	bl	80117e8 <__kernel_sin>
 8011598:	e7e1      	b.n	801155e <cos+0x56>
 801159a:	bf00      	nop
 801159c:	f3af 8000 	nop.w
	...
 80115a8:	3fe921fb 	.word	0x3fe921fb
 80115ac:	7fefffff 	.word	0x7fefffff

080115b0 <sin>:
 80115b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115b2:	ec53 2b10 	vmov	r2, r3, d0
 80115b6:	4826      	ldr	r0, [pc, #152]	@ (8011650 <sin+0xa0>)
 80115b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80115bc:	4281      	cmp	r1, r0
 80115be:	d807      	bhi.n	80115d0 <sin+0x20>
 80115c0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011648 <sin+0x98>
 80115c4:	2000      	movs	r0, #0
 80115c6:	b005      	add	sp, #20
 80115c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115cc:	f000 b90c 	b.w	80117e8 <__kernel_sin>
 80115d0:	4820      	ldr	r0, [pc, #128]	@ (8011654 <sin+0xa4>)
 80115d2:	4281      	cmp	r1, r0
 80115d4:	d908      	bls.n	80115e8 <sin+0x38>
 80115d6:	4610      	mov	r0, r2
 80115d8:	4619      	mov	r1, r3
 80115da:	f7ee fe55 	bl	8000288 <__aeabi_dsub>
 80115de:	ec41 0b10 	vmov	d0, r0, r1
 80115e2:	b005      	add	sp, #20
 80115e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80115e8:	4668      	mov	r0, sp
 80115ea:	f000 f9b9 	bl	8011960 <__ieee754_rem_pio2>
 80115ee:	f000 0003 	and.w	r0, r0, #3
 80115f2:	2801      	cmp	r0, #1
 80115f4:	d00c      	beq.n	8011610 <sin+0x60>
 80115f6:	2802      	cmp	r0, #2
 80115f8:	d011      	beq.n	801161e <sin+0x6e>
 80115fa:	b9e8      	cbnz	r0, 8011638 <sin+0x88>
 80115fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011600:	ed9d 0b00 	vldr	d0, [sp]
 8011604:	2001      	movs	r0, #1
 8011606:	f000 f8ef 	bl	80117e8 <__kernel_sin>
 801160a:	ec51 0b10 	vmov	r0, r1, d0
 801160e:	e7e6      	b.n	80115de <sin+0x2e>
 8011610:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011614:	ed9d 0b00 	vldr	d0, [sp]
 8011618:	f000 f81e 	bl	8011658 <__kernel_cos>
 801161c:	e7f5      	b.n	801160a <sin+0x5a>
 801161e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011622:	ed9d 0b00 	vldr	d0, [sp]
 8011626:	2001      	movs	r0, #1
 8011628:	f000 f8de 	bl	80117e8 <__kernel_sin>
 801162c:	ec53 2b10 	vmov	r2, r3, d0
 8011630:	4610      	mov	r0, r2
 8011632:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011636:	e7d2      	b.n	80115de <sin+0x2e>
 8011638:	ed9d 1b02 	vldr	d1, [sp, #8]
 801163c:	ed9d 0b00 	vldr	d0, [sp]
 8011640:	f000 f80a 	bl	8011658 <__kernel_cos>
 8011644:	e7f2      	b.n	801162c <sin+0x7c>
 8011646:	bf00      	nop
	...
 8011650:	3fe921fb 	.word	0x3fe921fb
 8011654:	7fefffff 	.word	0x7fefffff

08011658 <__kernel_cos>:
 8011658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165c:	ec57 6b10 	vmov	r6, r7, d0
 8011660:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011664:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011668:	ed8d 1b00 	vstr	d1, [sp]
 801166c:	d206      	bcs.n	801167c <__kernel_cos+0x24>
 801166e:	4630      	mov	r0, r6
 8011670:	4639      	mov	r1, r7
 8011672:	f7ef fa71 	bl	8000b58 <__aeabi_d2iz>
 8011676:	2800      	cmp	r0, #0
 8011678:	f000 8088 	beq.w	801178c <__kernel_cos+0x134>
 801167c:	4632      	mov	r2, r6
 801167e:	463b      	mov	r3, r7
 8011680:	4630      	mov	r0, r6
 8011682:	4639      	mov	r1, r7
 8011684:	f7ee ffb8 	bl	80005f8 <__aeabi_dmul>
 8011688:	4b51      	ldr	r3, [pc, #324]	@ (80117d0 <__kernel_cos+0x178>)
 801168a:	2200      	movs	r2, #0
 801168c:	4604      	mov	r4, r0
 801168e:	460d      	mov	r5, r1
 8011690:	f7ee ffb2 	bl	80005f8 <__aeabi_dmul>
 8011694:	a340      	add	r3, pc, #256	@ (adr r3, 8011798 <__kernel_cos+0x140>)
 8011696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169a:	4682      	mov	sl, r0
 801169c:	468b      	mov	fp, r1
 801169e:	4620      	mov	r0, r4
 80116a0:	4629      	mov	r1, r5
 80116a2:	f7ee ffa9 	bl	80005f8 <__aeabi_dmul>
 80116a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80117a0 <__kernel_cos+0x148>)
 80116a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ac:	f7ee fdee 	bl	800028c <__adddf3>
 80116b0:	4622      	mov	r2, r4
 80116b2:	462b      	mov	r3, r5
 80116b4:	f7ee ffa0 	bl	80005f8 <__aeabi_dmul>
 80116b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80117a8 <__kernel_cos+0x150>)
 80116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116be:	f7ee fde3 	bl	8000288 <__aeabi_dsub>
 80116c2:	4622      	mov	r2, r4
 80116c4:	462b      	mov	r3, r5
 80116c6:	f7ee ff97 	bl	80005f8 <__aeabi_dmul>
 80116ca:	a339      	add	r3, pc, #228	@ (adr r3, 80117b0 <__kernel_cos+0x158>)
 80116cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d0:	f7ee fddc 	bl	800028c <__adddf3>
 80116d4:	4622      	mov	r2, r4
 80116d6:	462b      	mov	r3, r5
 80116d8:	f7ee ff8e 	bl	80005f8 <__aeabi_dmul>
 80116dc:	a336      	add	r3, pc, #216	@ (adr r3, 80117b8 <__kernel_cos+0x160>)
 80116de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e2:	f7ee fdd1 	bl	8000288 <__aeabi_dsub>
 80116e6:	4622      	mov	r2, r4
 80116e8:	462b      	mov	r3, r5
 80116ea:	f7ee ff85 	bl	80005f8 <__aeabi_dmul>
 80116ee:	a334      	add	r3, pc, #208	@ (adr r3, 80117c0 <__kernel_cos+0x168>)
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	f7ee fdca 	bl	800028c <__adddf3>
 80116f8:	4622      	mov	r2, r4
 80116fa:	462b      	mov	r3, r5
 80116fc:	f7ee ff7c 	bl	80005f8 <__aeabi_dmul>
 8011700:	4622      	mov	r2, r4
 8011702:	462b      	mov	r3, r5
 8011704:	f7ee ff78 	bl	80005f8 <__aeabi_dmul>
 8011708:	e9dd 2300 	ldrd	r2, r3, [sp]
 801170c:	4604      	mov	r4, r0
 801170e:	460d      	mov	r5, r1
 8011710:	4630      	mov	r0, r6
 8011712:	4639      	mov	r1, r7
 8011714:	f7ee ff70 	bl	80005f8 <__aeabi_dmul>
 8011718:	460b      	mov	r3, r1
 801171a:	4602      	mov	r2, r0
 801171c:	4629      	mov	r1, r5
 801171e:	4620      	mov	r0, r4
 8011720:	f7ee fdb2 	bl	8000288 <__aeabi_dsub>
 8011724:	4b2b      	ldr	r3, [pc, #172]	@ (80117d4 <__kernel_cos+0x17c>)
 8011726:	4598      	cmp	r8, r3
 8011728:	4606      	mov	r6, r0
 801172a:	460f      	mov	r7, r1
 801172c:	d810      	bhi.n	8011750 <__kernel_cos+0xf8>
 801172e:	4602      	mov	r2, r0
 8011730:	460b      	mov	r3, r1
 8011732:	4650      	mov	r0, sl
 8011734:	4659      	mov	r1, fp
 8011736:	f7ee fda7 	bl	8000288 <__aeabi_dsub>
 801173a:	460b      	mov	r3, r1
 801173c:	4926      	ldr	r1, [pc, #152]	@ (80117d8 <__kernel_cos+0x180>)
 801173e:	4602      	mov	r2, r0
 8011740:	2000      	movs	r0, #0
 8011742:	f7ee fda1 	bl	8000288 <__aeabi_dsub>
 8011746:	ec41 0b10 	vmov	d0, r0, r1
 801174a:	b003      	add	sp, #12
 801174c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011750:	4b22      	ldr	r3, [pc, #136]	@ (80117dc <__kernel_cos+0x184>)
 8011752:	4921      	ldr	r1, [pc, #132]	@ (80117d8 <__kernel_cos+0x180>)
 8011754:	4598      	cmp	r8, r3
 8011756:	bf8c      	ite	hi
 8011758:	4d21      	ldrhi	r5, [pc, #132]	@ (80117e0 <__kernel_cos+0x188>)
 801175a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801175e:	2400      	movs	r4, #0
 8011760:	4622      	mov	r2, r4
 8011762:	462b      	mov	r3, r5
 8011764:	2000      	movs	r0, #0
 8011766:	f7ee fd8f 	bl	8000288 <__aeabi_dsub>
 801176a:	4622      	mov	r2, r4
 801176c:	4680      	mov	r8, r0
 801176e:	4689      	mov	r9, r1
 8011770:	462b      	mov	r3, r5
 8011772:	4650      	mov	r0, sl
 8011774:	4659      	mov	r1, fp
 8011776:	f7ee fd87 	bl	8000288 <__aeabi_dsub>
 801177a:	4632      	mov	r2, r6
 801177c:	463b      	mov	r3, r7
 801177e:	f7ee fd83 	bl	8000288 <__aeabi_dsub>
 8011782:	4602      	mov	r2, r0
 8011784:	460b      	mov	r3, r1
 8011786:	4640      	mov	r0, r8
 8011788:	4649      	mov	r1, r9
 801178a:	e7da      	b.n	8011742 <__kernel_cos+0xea>
 801178c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80117c8 <__kernel_cos+0x170>
 8011790:	e7db      	b.n	801174a <__kernel_cos+0xf2>
 8011792:	bf00      	nop
 8011794:	f3af 8000 	nop.w
 8011798:	be8838d4 	.word	0xbe8838d4
 801179c:	bda8fae9 	.word	0xbda8fae9
 80117a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80117a4:	3e21ee9e 	.word	0x3e21ee9e
 80117a8:	809c52ad 	.word	0x809c52ad
 80117ac:	3e927e4f 	.word	0x3e927e4f
 80117b0:	19cb1590 	.word	0x19cb1590
 80117b4:	3efa01a0 	.word	0x3efa01a0
 80117b8:	16c15177 	.word	0x16c15177
 80117bc:	3f56c16c 	.word	0x3f56c16c
 80117c0:	5555554c 	.word	0x5555554c
 80117c4:	3fa55555 	.word	0x3fa55555
 80117c8:	00000000 	.word	0x00000000
 80117cc:	3ff00000 	.word	0x3ff00000
 80117d0:	3fe00000 	.word	0x3fe00000
 80117d4:	3fd33332 	.word	0x3fd33332
 80117d8:	3ff00000 	.word	0x3ff00000
 80117dc:	3fe90000 	.word	0x3fe90000
 80117e0:	3fd20000 	.word	0x3fd20000
 80117e4:	00000000 	.word	0x00000000

080117e8 <__kernel_sin>:
 80117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	ec55 4b10 	vmov	r4, r5, d0
 80117f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80117f4:	b085      	sub	sp, #20
 80117f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80117fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80117fe:	4680      	mov	r8, r0
 8011800:	d205      	bcs.n	801180e <__kernel_sin+0x26>
 8011802:	4620      	mov	r0, r4
 8011804:	4629      	mov	r1, r5
 8011806:	f7ef f9a7 	bl	8000b58 <__aeabi_d2iz>
 801180a:	2800      	cmp	r0, #0
 801180c:	d052      	beq.n	80118b4 <__kernel_sin+0xcc>
 801180e:	4622      	mov	r2, r4
 8011810:	462b      	mov	r3, r5
 8011812:	4620      	mov	r0, r4
 8011814:	4629      	mov	r1, r5
 8011816:	f7ee feef 	bl	80005f8 <__aeabi_dmul>
 801181a:	4682      	mov	sl, r0
 801181c:	468b      	mov	fp, r1
 801181e:	4602      	mov	r2, r0
 8011820:	460b      	mov	r3, r1
 8011822:	4620      	mov	r0, r4
 8011824:	4629      	mov	r1, r5
 8011826:	f7ee fee7 	bl	80005f8 <__aeabi_dmul>
 801182a:	a342      	add	r3, pc, #264	@ (adr r3, 8011934 <__kernel_sin+0x14c>)
 801182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011830:	e9cd 0100 	strd	r0, r1, [sp]
 8011834:	4650      	mov	r0, sl
 8011836:	4659      	mov	r1, fp
 8011838:	f7ee fede 	bl	80005f8 <__aeabi_dmul>
 801183c:	a33f      	add	r3, pc, #252	@ (adr r3, 801193c <__kernel_sin+0x154>)
 801183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011842:	f7ee fd21 	bl	8000288 <__aeabi_dsub>
 8011846:	4652      	mov	r2, sl
 8011848:	465b      	mov	r3, fp
 801184a:	f7ee fed5 	bl	80005f8 <__aeabi_dmul>
 801184e:	a33d      	add	r3, pc, #244	@ (adr r3, 8011944 <__kernel_sin+0x15c>)
 8011850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011854:	f7ee fd1a 	bl	800028c <__adddf3>
 8011858:	4652      	mov	r2, sl
 801185a:	465b      	mov	r3, fp
 801185c:	f7ee fecc 	bl	80005f8 <__aeabi_dmul>
 8011860:	a33a      	add	r3, pc, #232	@ (adr r3, 801194c <__kernel_sin+0x164>)
 8011862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011866:	f7ee fd0f 	bl	8000288 <__aeabi_dsub>
 801186a:	4652      	mov	r2, sl
 801186c:	465b      	mov	r3, fp
 801186e:	f7ee fec3 	bl	80005f8 <__aeabi_dmul>
 8011872:	a338      	add	r3, pc, #224	@ (adr r3, 8011954 <__kernel_sin+0x16c>)
 8011874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011878:	f7ee fd08 	bl	800028c <__adddf3>
 801187c:	4606      	mov	r6, r0
 801187e:	460f      	mov	r7, r1
 8011880:	f1b8 0f00 	cmp.w	r8, #0
 8011884:	d11b      	bne.n	80118be <__kernel_sin+0xd6>
 8011886:	4602      	mov	r2, r0
 8011888:	460b      	mov	r3, r1
 801188a:	4650      	mov	r0, sl
 801188c:	4659      	mov	r1, fp
 801188e:	f7ee feb3 	bl	80005f8 <__aeabi_dmul>
 8011892:	a325      	add	r3, pc, #148	@ (adr r3, 8011928 <__kernel_sin+0x140>)
 8011894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011898:	f7ee fcf6 	bl	8000288 <__aeabi_dsub>
 801189c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118a0:	f7ee feaa 	bl	80005f8 <__aeabi_dmul>
 80118a4:	4602      	mov	r2, r0
 80118a6:	460b      	mov	r3, r1
 80118a8:	4620      	mov	r0, r4
 80118aa:	4629      	mov	r1, r5
 80118ac:	f7ee fcee 	bl	800028c <__adddf3>
 80118b0:	4604      	mov	r4, r0
 80118b2:	460d      	mov	r5, r1
 80118b4:	ec45 4b10 	vmov	d0, r4, r5
 80118b8:	b005      	add	sp, #20
 80118ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118c2:	4b1b      	ldr	r3, [pc, #108]	@ (8011930 <__kernel_sin+0x148>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	f7ee fe97 	bl	80005f8 <__aeabi_dmul>
 80118ca:	4632      	mov	r2, r6
 80118cc:	4680      	mov	r8, r0
 80118ce:	4689      	mov	r9, r1
 80118d0:	463b      	mov	r3, r7
 80118d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118d6:	f7ee fe8f 	bl	80005f8 <__aeabi_dmul>
 80118da:	4602      	mov	r2, r0
 80118dc:	460b      	mov	r3, r1
 80118de:	4640      	mov	r0, r8
 80118e0:	4649      	mov	r1, r9
 80118e2:	f7ee fcd1 	bl	8000288 <__aeabi_dsub>
 80118e6:	4652      	mov	r2, sl
 80118e8:	465b      	mov	r3, fp
 80118ea:	f7ee fe85 	bl	80005f8 <__aeabi_dmul>
 80118ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118f2:	f7ee fcc9 	bl	8000288 <__aeabi_dsub>
 80118f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8011928 <__kernel_sin+0x140>)
 80118f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fc:	4606      	mov	r6, r0
 80118fe:	460f      	mov	r7, r1
 8011900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011904:	f7ee fe78 	bl	80005f8 <__aeabi_dmul>
 8011908:	4602      	mov	r2, r0
 801190a:	460b      	mov	r3, r1
 801190c:	4630      	mov	r0, r6
 801190e:	4639      	mov	r1, r7
 8011910:	f7ee fcbc 	bl	800028c <__adddf3>
 8011914:	4602      	mov	r2, r0
 8011916:	460b      	mov	r3, r1
 8011918:	4620      	mov	r0, r4
 801191a:	4629      	mov	r1, r5
 801191c:	f7ee fcb4 	bl	8000288 <__aeabi_dsub>
 8011920:	e7c6      	b.n	80118b0 <__kernel_sin+0xc8>
 8011922:	bf00      	nop
 8011924:	f3af 8000 	nop.w
 8011928:	55555549 	.word	0x55555549
 801192c:	3fc55555 	.word	0x3fc55555
 8011930:	3fe00000 	.word	0x3fe00000
 8011934:	5acfd57c 	.word	0x5acfd57c
 8011938:	3de5d93a 	.word	0x3de5d93a
 801193c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011940:	3e5ae5e6 	.word	0x3e5ae5e6
 8011944:	57b1fe7d 	.word	0x57b1fe7d
 8011948:	3ec71de3 	.word	0x3ec71de3
 801194c:	19c161d5 	.word	0x19c161d5
 8011950:	3f2a01a0 	.word	0x3f2a01a0
 8011954:	1110f8a6 	.word	0x1110f8a6
 8011958:	3f811111 	.word	0x3f811111
 801195c:	00000000 	.word	0x00000000

08011960 <__ieee754_rem_pio2>:
 8011960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011964:	ec57 6b10 	vmov	r6, r7, d0
 8011968:	4bc5      	ldr	r3, [pc, #788]	@ (8011c80 <__ieee754_rem_pio2+0x320>)
 801196a:	b08d      	sub	sp, #52	@ 0x34
 801196c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011970:	4598      	cmp	r8, r3
 8011972:	4604      	mov	r4, r0
 8011974:	9704      	str	r7, [sp, #16]
 8011976:	d807      	bhi.n	8011988 <__ieee754_rem_pio2+0x28>
 8011978:	2200      	movs	r2, #0
 801197a:	2300      	movs	r3, #0
 801197c:	ed80 0b00 	vstr	d0, [r0]
 8011980:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011984:	2500      	movs	r5, #0
 8011986:	e028      	b.n	80119da <__ieee754_rem_pio2+0x7a>
 8011988:	4bbe      	ldr	r3, [pc, #760]	@ (8011c84 <__ieee754_rem_pio2+0x324>)
 801198a:	4598      	cmp	r8, r3
 801198c:	d878      	bhi.n	8011a80 <__ieee754_rem_pio2+0x120>
 801198e:	9b04      	ldr	r3, [sp, #16]
 8011990:	4dbd      	ldr	r5, [pc, #756]	@ (8011c88 <__ieee754_rem_pio2+0x328>)
 8011992:	2b00      	cmp	r3, #0
 8011994:	4630      	mov	r0, r6
 8011996:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011c48 <__ieee754_rem_pio2+0x2e8>)
 8011998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199c:	4639      	mov	r1, r7
 801199e:	dd38      	ble.n	8011a12 <__ieee754_rem_pio2+0xb2>
 80119a0:	f7ee fc72 	bl	8000288 <__aeabi_dsub>
 80119a4:	45a8      	cmp	r8, r5
 80119a6:	4606      	mov	r6, r0
 80119a8:	460f      	mov	r7, r1
 80119aa:	d01a      	beq.n	80119e2 <__ieee754_rem_pio2+0x82>
 80119ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011c50 <__ieee754_rem_pio2+0x2f0>)
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	f7ee fc69 	bl	8000288 <__aeabi_dsub>
 80119b6:	4602      	mov	r2, r0
 80119b8:	460b      	mov	r3, r1
 80119ba:	4680      	mov	r8, r0
 80119bc:	4689      	mov	r9, r1
 80119be:	4630      	mov	r0, r6
 80119c0:	4639      	mov	r1, r7
 80119c2:	f7ee fc61 	bl	8000288 <__aeabi_dsub>
 80119c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011c50 <__ieee754_rem_pio2+0x2f0>)
 80119c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119cc:	f7ee fc5c 	bl	8000288 <__aeabi_dsub>
 80119d0:	e9c4 8900 	strd	r8, r9, [r4]
 80119d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80119d8:	2501      	movs	r5, #1
 80119da:	4628      	mov	r0, r5
 80119dc:	b00d      	add	sp, #52	@ 0x34
 80119de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e2:	a39d      	add	r3, pc, #628	@ (adr r3, 8011c58 <__ieee754_rem_pio2+0x2f8>)
 80119e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e8:	f7ee fc4e 	bl	8000288 <__aeabi_dsub>
 80119ec:	a39c      	add	r3, pc, #624	@ (adr r3, 8011c60 <__ieee754_rem_pio2+0x300>)
 80119ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f2:	4606      	mov	r6, r0
 80119f4:	460f      	mov	r7, r1
 80119f6:	f7ee fc47 	bl	8000288 <__aeabi_dsub>
 80119fa:	4602      	mov	r2, r0
 80119fc:	460b      	mov	r3, r1
 80119fe:	4680      	mov	r8, r0
 8011a00:	4689      	mov	r9, r1
 8011a02:	4630      	mov	r0, r6
 8011a04:	4639      	mov	r1, r7
 8011a06:	f7ee fc3f 	bl	8000288 <__aeabi_dsub>
 8011a0a:	a395      	add	r3, pc, #596	@ (adr r3, 8011c60 <__ieee754_rem_pio2+0x300>)
 8011a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a10:	e7dc      	b.n	80119cc <__ieee754_rem_pio2+0x6c>
 8011a12:	f7ee fc3b 	bl	800028c <__adddf3>
 8011a16:	45a8      	cmp	r8, r5
 8011a18:	4606      	mov	r6, r0
 8011a1a:	460f      	mov	r7, r1
 8011a1c:	d018      	beq.n	8011a50 <__ieee754_rem_pio2+0xf0>
 8011a1e:	a38c      	add	r3, pc, #560	@ (adr r3, 8011c50 <__ieee754_rem_pio2+0x2f0>)
 8011a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a24:	f7ee fc32 	bl	800028c <__adddf3>
 8011a28:	4602      	mov	r2, r0
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	4680      	mov	r8, r0
 8011a2e:	4689      	mov	r9, r1
 8011a30:	4630      	mov	r0, r6
 8011a32:	4639      	mov	r1, r7
 8011a34:	f7ee fc28 	bl	8000288 <__aeabi_dsub>
 8011a38:	a385      	add	r3, pc, #532	@ (adr r3, 8011c50 <__ieee754_rem_pio2+0x2f0>)
 8011a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3e:	f7ee fc25 	bl	800028c <__adddf3>
 8011a42:	f04f 35ff 	mov.w	r5, #4294967295
 8011a46:	e9c4 8900 	strd	r8, r9, [r4]
 8011a4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011a4e:	e7c4      	b.n	80119da <__ieee754_rem_pio2+0x7a>
 8011a50:	a381      	add	r3, pc, #516	@ (adr r3, 8011c58 <__ieee754_rem_pio2+0x2f8>)
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	f7ee fc19 	bl	800028c <__adddf3>
 8011a5a:	a381      	add	r3, pc, #516	@ (adr r3, 8011c60 <__ieee754_rem_pio2+0x300>)
 8011a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a60:	4606      	mov	r6, r0
 8011a62:	460f      	mov	r7, r1
 8011a64:	f7ee fc12 	bl	800028c <__adddf3>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	4680      	mov	r8, r0
 8011a6e:	4689      	mov	r9, r1
 8011a70:	4630      	mov	r0, r6
 8011a72:	4639      	mov	r1, r7
 8011a74:	f7ee fc08 	bl	8000288 <__aeabi_dsub>
 8011a78:	a379      	add	r3, pc, #484	@ (adr r3, 8011c60 <__ieee754_rem_pio2+0x300>)
 8011a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7e:	e7de      	b.n	8011a3e <__ieee754_rem_pio2+0xde>
 8011a80:	4b82      	ldr	r3, [pc, #520]	@ (8011c8c <__ieee754_rem_pio2+0x32c>)
 8011a82:	4598      	cmp	r8, r3
 8011a84:	f200 80d1 	bhi.w	8011c2a <__ieee754_rem_pio2+0x2ca>
 8011a88:	f000 f966 	bl	8011d58 <fabs>
 8011a8c:	ec57 6b10 	vmov	r6, r7, d0
 8011a90:	a375      	add	r3, pc, #468	@ (adr r3, 8011c68 <__ieee754_rem_pio2+0x308>)
 8011a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a96:	4630      	mov	r0, r6
 8011a98:	4639      	mov	r1, r7
 8011a9a:	f7ee fdad 	bl	80005f8 <__aeabi_dmul>
 8011a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8011c90 <__ieee754_rem_pio2+0x330>)
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f7ee fbf3 	bl	800028c <__adddf3>
 8011aa6:	f7ef f857 	bl	8000b58 <__aeabi_d2iz>
 8011aaa:	4605      	mov	r5, r0
 8011aac:	f7ee fd3a 	bl	8000524 <__aeabi_i2d>
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011ab8:	a363      	add	r3, pc, #396	@ (adr r3, 8011c48 <__ieee754_rem_pio2+0x2e8>)
 8011aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abe:	f7ee fd9b 	bl	80005f8 <__aeabi_dmul>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	4639      	mov	r1, r7
 8011aca:	f7ee fbdd 	bl	8000288 <__aeabi_dsub>
 8011ace:	a360      	add	r3, pc, #384	@ (adr r3, 8011c50 <__ieee754_rem_pio2+0x2f0>)
 8011ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad4:	4682      	mov	sl, r0
 8011ad6:	468b      	mov	fp, r1
 8011ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011adc:	f7ee fd8c 	bl	80005f8 <__aeabi_dmul>
 8011ae0:	2d1f      	cmp	r5, #31
 8011ae2:	4606      	mov	r6, r0
 8011ae4:	460f      	mov	r7, r1
 8011ae6:	dc0c      	bgt.n	8011b02 <__ieee754_rem_pio2+0x1a2>
 8011ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8011c94 <__ieee754_rem_pio2+0x334>)
 8011aea:	1e6a      	subs	r2, r5, #1
 8011aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011af0:	4543      	cmp	r3, r8
 8011af2:	d006      	beq.n	8011b02 <__ieee754_rem_pio2+0x1a2>
 8011af4:	4632      	mov	r2, r6
 8011af6:	463b      	mov	r3, r7
 8011af8:	4650      	mov	r0, sl
 8011afa:	4659      	mov	r1, fp
 8011afc:	f7ee fbc4 	bl	8000288 <__aeabi_dsub>
 8011b00:	e00e      	b.n	8011b20 <__ieee754_rem_pio2+0x1c0>
 8011b02:	463b      	mov	r3, r7
 8011b04:	4632      	mov	r2, r6
 8011b06:	4650      	mov	r0, sl
 8011b08:	4659      	mov	r1, fp
 8011b0a:	f7ee fbbd 	bl	8000288 <__aeabi_dsub>
 8011b0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011b12:	9305      	str	r3, [sp, #20]
 8011b14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011b18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011b1c:	2b10      	cmp	r3, #16
 8011b1e:	dc02      	bgt.n	8011b26 <__ieee754_rem_pio2+0x1c6>
 8011b20:	e9c4 0100 	strd	r0, r1, [r4]
 8011b24:	e039      	b.n	8011b9a <__ieee754_rem_pio2+0x23a>
 8011b26:	a34c      	add	r3, pc, #304	@ (adr r3, 8011c58 <__ieee754_rem_pio2+0x2f8>)
 8011b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b30:	f7ee fd62 	bl	80005f8 <__aeabi_dmul>
 8011b34:	4606      	mov	r6, r0
 8011b36:	460f      	mov	r7, r1
 8011b38:	4602      	mov	r2, r0
 8011b3a:	460b      	mov	r3, r1
 8011b3c:	4650      	mov	r0, sl
 8011b3e:	4659      	mov	r1, fp
 8011b40:	f7ee fba2 	bl	8000288 <__aeabi_dsub>
 8011b44:	4602      	mov	r2, r0
 8011b46:	460b      	mov	r3, r1
 8011b48:	4680      	mov	r8, r0
 8011b4a:	4689      	mov	r9, r1
 8011b4c:	4650      	mov	r0, sl
 8011b4e:	4659      	mov	r1, fp
 8011b50:	f7ee fb9a 	bl	8000288 <__aeabi_dsub>
 8011b54:	4632      	mov	r2, r6
 8011b56:	463b      	mov	r3, r7
 8011b58:	f7ee fb96 	bl	8000288 <__aeabi_dsub>
 8011b5c:	a340      	add	r3, pc, #256	@ (adr r3, 8011c60 <__ieee754_rem_pio2+0x300>)
 8011b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b62:	4606      	mov	r6, r0
 8011b64:	460f      	mov	r7, r1
 8011b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b6a:	f7ee fd45 	bl	80005f8 <__aeabi_dmul>
 8011b6e:	4632      	mov	r2, r6
 8011b70:	463b      	mov	r3, r7
 8011b72:	f7ee fb89 	bl	8000288 <__aeabi_dsub>
 8011b76:	4602      	mov	r2, r0
 8011b78:	460b      	mov	r3, r1
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	460f      	mov	r7, r1
 8011b7e:	4640      	mov	r0, r8
 8011b80:	4649      	mov	r1, r9
 8011b82:	f7ee fb81 	bl	8000288 <__aeabi_dsub>
 8011b86:	9a05      	ldr	r2, [sp, #20]
 8011b88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011b8c:	1ad3      	subs	r3, r2, r3
 8011b8e:	2b31      	cmp	r3, #49	@ 0x31
 8011b90:	dc20      	bgt.n	8011bd4 <__ieee754_rem_pio2+0x274>
 8011b92:	e9c4 0100 	strd	r0, r1, [r4]
 8011b96:	46c2      	mov	sl, r8
 8011b98:	46cb      	mov	fp, r9
 8011b9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011b9e:	4650      	mov	r0, sl
 8011ba0:	4642      	mov	r2, r8
 8011ba2:	464b      	mov	r3, r9
 8011ba4:	4659      	mov	r1, fp
 8011ba6:	f7ee fb6f 	bl	8000288 <__aeabi_dsub>
 8011baa:	463b      	mov	r3, r7
 8011bac:	4632      	mov	r2, r6
 8011bae:	f7ee fb6b 	bl	8000288 <__aeabi_dsub>
 8011bb2:	9b04      	ldr	r3, [sp, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011bba:	f6bf af0e 	bge.w	80119da <__ieee754_rem_pio2+0x7a>
 8011bbe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8011bc2:	6063      	str	r3, [r4, #4]
 8011bc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011bc8:	f8c4 8000 	str.w	r8, [r4]
 8011bcc:	60a0      	str	r0, [r4, #8]
 8011bce:	60e3      	str	r3, [r4, #12]
 8011bd0:	426d      	negs	r5, r5
 8011bd2:	e702      	b.n	80119da <__ieee754_rem_pio2+0x7a>
 8011bd4:	a326      	add	r3, pc, #152	@ (adr r3, 8011c70 <__ieee754_rem_pio2+0x310>)
 8011bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bde:	f7ee fd0b 	bl	80005f8 <__aeabi_dmul>
 8011be2:	4606      	mov	r6, r0
 8011be4:	460f      	mov	r7, r1
 8011be6:	4602      	mov	r2, r0
 8011be8:	460b      	mov	r3, r1
 8011bea:	4640      	mov	r0, r8
 8011bec:	4649      	mov	r1, r9
 8011bee:	f7ee fb4b 	bl	8000288 <__aeabi_dsub>
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	4682      	mov	sl, r0
 8011bf8:	468b      	mov	fp, r1
 8011bfa:	4640      	mov	r0, r8
 8011bfc:	4649      	mov	r1, r9
 8011bfe:	f7ee fb43 	bl	8000288 <__aeabi_dsub>
 8011c02:	4632      	mov	r2, r6
 8011c04:	463b      	mov	r3, r7
 8011c06:	f7ee fb3f 	bl	8000288 <__aeabi_dsub>
 8011c0a:	a31b      	add	r3, pc, #108	@ (adr r3, 8011c78 <__ieee754_rem_pio2+0x318>)
 8011c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c10:	4606      	mov	r6, r0
 8011c12:	460f      	mov	r7, r1
 8011c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c18:	f7ee fcee 	bl	80005f8 <__aeabi_dmul>
 8011c1c:	4632      	mov	r2, r6
 8011c1e:	463b      	mov	r3, r7
 8011c20:	f7ee fb32 	bl	8000288 <__aeabi_dsub>
 8011c24:	4606      	mov	r6, r0
 8011c26:	460f      	mov	r7, r1
 8011c28:	e764      	b.n	8011af4 <__ieee754_rem_pio2+0x194>
 8011c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8011c98 <__ieee754_rem_pio2+0x338>)
 8011c2c:	4598      	cmp	r8, r3
 8011c2e:	d935      	bls.n	8011c9c <__ieee754_rem_pio2+0x33c>
 8011c30:	4632      	mov	r2, r6
 8011c32:	463b      	mov	r3, r7
 8011c34:	4630      	mov	r0, r6
 8011c36:	4639      	mov	r1, r7
 8011c38:	f7ee fb26 	bl	8000288 <__aeabi_dsub>
 8011c3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c40:	e9c4 0100 	strd	r0, r1, [r4]
 8011c44:	e69e      	b.n	8011984 <__ieee754_rem_pio2+0x24>
 8011c46:	bf00      	nop
 8011c48:	54400000 	.word	0x54400000
 8011c4c:	3ff921fb 	.word	0x3ff921fb
 8011c50:	1a626331 	.word	0x1a626331
 8011c54:	3dd0b461 	.word	0x3dd0b461
 8011c58:	1a600000 	.word	0x1a600000
 8011c5c:	3dd0b461 	.word	0x3dd0b461
 8011c60:	2e037073 	.word	0x2e037073
 8011c64:	3ba3198a 	.word	0x3ba3198a
 8011c68:	6dc9c883 	.word	0x6dc9c883
 8011c6c:	3fe45f30 	.word	0x3fe45f30
 8011c70:	2e000000 	.word	0x2e000000
 8011c74:	3ba3198a 	.word	0x3ba3198a
 8011c78:	252049c1 	.word	0x252049c1
 8011c7c:	397b839a 	.word	0x397b839a
 8011c80:	3fe921fb 	.word	0x3fe921fb
 8011c84:	4002d97b 	.word	0x4002d97b
 8011c88:	3ff921fb 	.word	0x3ff921fb
 8011c8c:	413921fb 	.word	0x413921fb
 8011c90:	3fe00000 	.word	0x3fe00000
 8011c94:	08012af8 	.word	0x08012af8
 8011c98:	7fefffff 	.word	0x7fefffff
 8011c9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011ca0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8011ca4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011ca8:	4630      	mov	r0, r6
 8011caa:	460f      	mov	r7, r1
 8011cac:	f7ee ff54 	bl	8000b58 <__aeabi_d2iz>
 8011cb0:	f7ee fc38 	bl	8000524 <__aeabi_i2d>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	4630      	mov	r0, r6
 8011cba:	4639      	mov	r1, r7
 8011cbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011cc0:	f7ee fae2 	bl	8000288 <__aeabi_dsub>
 8011cc4:	4b22      	ldr	r3, [pc, #136]	@ (8011d50 <__ieee754_rem_pio2+0x3f0>)
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f7ee fc96 	bl	80005f8 <__aeabi_dmul>
 8011ccc:	460f      	mov	r7, r1
 8011cce:	4606      	mov	r6, r0
 8011cd0:	f7ee ff42 	bl	8000b58 <__aeabi_d2iz>
 8011cd4:	f7ee fc26 	bl	8000524 <__aeabi_i2d>
 8011cd8:	4602      	mov	r2, r0
 8011cda:	460b      	mov	r3, r1
 8011cdc:	4630      	mov	r0, r6
 8011cde:	4639      	mov	r1, r7
 8011ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011ce4:	f7ee fad0 	bl	8000288 <__aeabi_dsub>
 8011ce8:	4b19      	ldr	r3, [pc, #100]	@ (8011d50 <__ieee754_rem_pio2+0x3f0>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	f7ee fc84 	bl	80005f8 <__aeabi_dmul>
 8011cf0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8011cf4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011cf8:	f04f 0803 	mov.w	r8, #3
 8011cfc:	2600      	movs	r6, #0
 8011cfe:	2700      	movs	r7, #0
 8011d00:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011d04:	4632      	mov	r2, r6
 8011d06:	463b      	mov	r3, r7
 8011d08:	46c2      	mov	sl, r8
 8011d0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d0e:	f7ee fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d1f4      	bne.n	8011d00 <__ieee754_rem_pio2+0x3a0>
 8011d16:	4b0f      	ldr	r3, [pc, #60]	@ (8011d54 <__ieee754_rem_pio2+0x3f4>)
 8011d18:	9301      	str	r3, [sp, #4]
 8011d1a:	2302      	movs	r3, #2
 8011d1c:	9300      	str	r3, [sp, #0]
 8011d1e:	462a      	mov	r2, r5
 8011d20:	4653      	mov	r3, sl
 8011d22:	4621      	mov	r1, r4
 8011d24:	a806      	add	r0, sp, #24
 8011d26:	f000 f81f 	bl	8011d68 <__kernel_rem_pio2>
 8011d2a:	9b04      	ldr	r3, [sp, #16]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	4605      	mov	r5, r0
 8011d30:	f6bf ae53 	bge.w	80119da <__ieee754_rem_pio2+0x7a>
 8011d34:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011d38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8011d40:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8011d44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d48:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011d4c:	e740      	b.n	8011bd0 <__ieee754_rem_pio2+0x270>
 8011d4e:	bf00      	nop
 8011d50:	41700000 	.word	0x41700000
 8011d54:	08012b78 	.word	0x08012b78

08011d58 <fabs>:
 8011d58:	ec51 0b10 	vmov	r0, r1, d0
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011d62:	ec43 2b10 	vmov	d0, r2, r3
 8011d66:	4770      	bx	lr

08011d68 <__kernel_rem_pio2>:
 8011d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6c:	ed2d 8b02 	vpush	{d8}
 8011d70:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011d74:	f112 0f14 	cmn.w	r2, #20
 8011d78:	9306      	str	r3, [sp, #24]
 8011d7a:	9104      	str	r1, [sp, #16]
 8011d7c:	4bbe      	ldr	r3, [pc, #760]	@ (8012078 <__kernel_rem_pio2+0x310>)
 8011d7e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011d80:	9008      	str	r0, [sp, #32]
 8011d82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d86:	9300      	str	r3, [sp, #0]
 8011d88:	9b06      	ldr	r3, [sp, #24]
 8011d8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011d8e:	bfa8      	it	ge
 8011d90:	1ed4      	subge	r4, r2, #3
 8011d92:	9305      	str	r3, [sp, #20]
 8011d94:	bfb2      	itee	lt
 8011d96:	2400      	movlt	r4, #0
 8011d98:	2318      	movge	r3, #24
 8011d9a:	fb94 f4f3 	sdivge	r4, r4, r3
 8011d9e:	f06f 0317 	mvn.w	r3, #23
 8011da2:	fb04 3303 	mla	r3, r4, r3, r3
 8011da6:	eb03 0b02 	add.w	fp, r3, r2
 8011daa:	9b00      	ldr	r3, [sp, #0]
 8011dac:	9a05      	ldr	r2, [sp, #20]
 8011dae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8012068 <__kernel_rem_pio2+0x300>
 8011db2:	eb03 0802 	add.w	r8, r3, r2
 8011db6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011db8:	1aa7      	subs	r7, r4, r2
 8011dba:	ae20      	add	r6, sp, #128	@ 0x80
 8011dbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011dc0:	2500      	movs	r5, #0
 8011dc2:	4545      	cmp	r5, r8
 8011dc4:	dd13      	ble.n	8011dee <__kernel_rem_pio2+0x86>
 8011dc6:	9b06      	ldr	r3, [sp, #24]
 8011dc8:	aa20      	add	r2, sp, #128	@ 0x80
 8011dca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011dce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011dd2:	f04f 0800 	mov.w	r8, #0
 8011dd6:	9b00      	ldr	r3, [sp, #0]
 8011dd8:	4598      	cmp	r8, r3
 8011dda:	dc31      	bgt.n	8011e40 <__kernel_rem_pio2+0xd8>
 8011ddc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8012068 <__kernel_rem_pio2+0x300>
 8011de0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011de4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011de8:	462f      	mov	r7, r5
 8011dea:	2600      	movs	r6, #0
 8011dec:	e01b      	b.n	8011e26 <__kernel_rem_pio2+0xbe>
 8011dee:	42ef      	cmn	r7, r5
 8011df0:	d407      	bmi.n	8011e02 <__kernel_rem_pio2+0x9a>
 8011df2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011df6:	f7ee fb95 	bl	8000524 <__aeabi_i2d>
 8011dfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011dfe:	3501      	adds	r5, #1
 8011e00:	e7df      	b.n	8011dc2 <__kernel_rem_pio2+0x5a>
 8011e02:	ec51 0b18 	vmov	r0, r1, d8
 8011e06:	e7f8      	b.n	8011dfa <__kernel_rem_pio2+0x92>
 8011e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011e10:	f7ee fbf2 	bl	80005f8 <__aeabi_dmul>
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e1c:	f7ee fa36 	bl	800028c <__adddf3>
 8011e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e24:	3601      	adds	r6, #1
 8011e26:	9b05      	ldr	r3, [sp, #20]
 8011e28:	429e      	cmp	r6, r3
 8011e2a:	f1a7 0708 	sub.w	r7, r7, #8
 8011e2e:	ddeb      	ble.n	8011e08 <__kernel_rem_pio2+0xa0>
 8011e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e34:	f108 0801 	add.w	r8, r8, #1
 8011e38:	ecaa 7b02 	vstmia	sl!, {d7}
 8011e3c:	3508      	adds	r5, #8
 8011e3e:	e7ca      	b.n	8011dd6 <__kernel_rem_pio2+0x6e>
 8011e40:	9b00      	ldr	r3, [sp, #0]
 8011e42:	f8dd 8000 	ldr.w	r8, [sp]
 8011e46:	aa0c      	add	r2, sp, #48	@ 0x30
 8011e48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011e50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e56:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e5c:	ab98      	add	r3, sp, #608	@ 0x260
 8011e5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011e62:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011e66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e6a:	ac0c      	add	r4, sp, #48	@ 0x30
 8011e6c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011e6e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011e72:	46a1      	mov	r9, r4
 8011e74:	46c2      	mov	sl, r8
 8011e76:	f1ba 0f00 	cmp.w	sl, #0
 8011e7a:	f1a5 0508 	sub.w	r5, r5, #8
 8011e7e:	dc77      	bgt.n	8011f70 <__kernel_rem_pio2+0x208>
 8011e80:	4658      	mov	r0, fp
 8011e82:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011e86:	f000 fac7 	bl	8012418 <scalbn>
 8011e8a:	ec57 6b10 	vmov	r6, r7, d0
 8011e8e:	2200      	movs	r2, #0
 8011e90:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011e94:	4630      	mov	r0, r6
 8011e96:	4639      	mov	r1, r7
 8011e98:	f7ee fbae 	bl	80005f8 <__aeabi_dmul>
 8011e9c:	ec41 0b10 	vmov	d0, r0, r1
 8011ea0:	f000 fb3a 	bl	8012518 <floor>
 8011ea4:	4b75      	ldr	r3, [pc, #468]	@ (801207c <__kernel_rem_pio2+0x314>)
 8011ea6:	ec51 0b10 	vmov	r0, r1, d0
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f7ee fba4 	bl	80005f8 <__aeabi_dmul>
 8011eb0:	4602      	mov	r2, r0
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	4639      	mov	r1, r7
 8011eb8:	f7ee f9e6 	bl	8000288 <__aeabi_dsub>
 8011ebc:	460f      	mov	r7, r1
 8011ebe:	4606      	mov	r6, r0
 8011ec0:	f7ee fe4a 	bl	8000b58 <__aeabi_d2iz>
 8011ec4:	9002      	str	r0, [sp, #8]
 8011ec6:	f7ee fb2d 	bl	8000524 <__aeabi_i2d>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	460b      	mov	r3, r1
 8011ece:	4630      	mov	r0, r6
 8011ed0:	4639      	mov	r1, r7
 8011ed2:	f7ee f9d9 	bl	8000288 <__aeabi_dsub>
 8011ed6:	f1bb 0f00 	cmp.w	fp, #0
 8011eda:	4606      	mov	r6, r0
 8011edc:	460f      	mov	r7, r1
 8011ede:	dd6c      	ble.n	8011fba <__kernel_rem_pio2+0x252>
 8011ee0:	f108 31ff 	add.w	r1, r8, #4294967295
 8011ee4:	ab0c      	add	r3, sp, #48	@ 0x30
 8011ee6:	9d02      	ldr	r5, [sp, #8]
 8011ee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011eec:	f1cb 0018 	rsb	r0, fp, #24
 8011ef0:	fa43 f200 	asr.w	r2, r3, r0
 8011ef4:	4415      	add	r5, r2
 8011ef6:	4082      	lsls	r2, r0
 8011ef8:	1a9b      	subs	r3, r3, r2
 8011efa:	aa0c      	add	r2, sp, #48	@ 0x30
 8011efc:	9502      	str	r5, [sp, #8]
 8011efe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011f02:	f1cb 0217 	rsb	r2, fp, #23
 8011f06:	fa43 f902 	asr.w	r9, r3, r2
 8011f0a:	f1b9 0f00 	cmp.w	r9, #0
 8011f0e:	dd64      	ble.n	8011fda <__kernel_rem_pio2+0x272>
 8011f10:	9b02      	ldr	r3, [sp, #8]
 8011f12:	2200      	movs	r2, #0
 8011f14:	3301      	adds	r3, #1
 8011f16:	9302      	str	r3, [sp, #8]
 8011f18:	4615      	mov	r5, r2
 8011f1a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011f1e:	4590      	cmp	r8, r2
 8011f20:	f300 80b8 	bgt.w	8012094 <__kernel_rem_pio2+0x32c>
 8011f24:	f1bb 0f00 	cmp.w	fp, #0
 8011f28:	dd07      	ble.n	8011f3a <__kernel_rem_pio2+0x1d2>
 8011f2a:	f1bb 0f01 	cmp.w	fp, #1
 8011f2e:	f000 80bf 	beq.w	80120b0 <__kernel_rem_pio2+0x348>
 8011f32:	f1bb 0f02 	cmp.w	fp, #2
 8011f36:	f000 80c6 	beq.w	80120c6 <__kernel_rem_pio2+0x35e>
 8011f3a:	f1b9 0f02 	cmp.w	r9, #2
 8011f3e:	d14c      	bne.n	8011fda <__kernel_rem_pio2+0x272>
 8011f40:	4632      	mov	r2, r6
 8011f42:	463b      	mov	r3, r7
 8011f44:	494e      	ldr	r1, [pc, #312]	@ (8012080 <__kernel_rem_pio2+0x318>)
 8011f46:	2000      	movs	r0, #0
 8011f48:	f7ee f99e 	bl	8000288 <__aeabi_dsub>
 8011f4c:	4606      	mov	r6, r0
 8011f4e:	460f      	mov	r7, r1
 8011f50:	2d00      	cmp	r5, #0
 8011f52:	d042      	beq.n	8011fda <__kernel_rem_pio2+0x272>
 8011f54:	4658      	mov	r0, fp
 8011f56:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8012070 <__kernel_rem_pio2+0x308>
 8011f5a:	f000 fa5d 	bl	8012418 <scalbn>
 8011f5e:	4630      	mov	r0, r6
 8011f60:	4639      	mov	r1, r7
 8011f62:	ec53 2b10 	vmov	r2, r3, d0
 8011f66:	f7ee f98f 	bl	8000288 <__aeabi_dsub>
 8011f6a:	4606      	mov	r6, r0
 8011f6c:	460f      	mov	r7, r1
 8011f6e:	e034      	b.n	8011fda <__kernel_rem_pio2+0x272>
 8011f70:	4b44      	ldr	r3, [pc, #272]	@ (8012084 <__kernel_rem_pio2+0x31c>)
 8011f72:	2200      	movs	r2, #0
 8011f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f78:	f7ee fb3e 	bl	80005f8 <__aeabi_dmul>
 8011f7c:	f7ee fdec 	bl	8000b58 <__aeabi_d2iz>
 8011f80:	f7ee fad0 	bl	8000524 <__aeabi_i2d>
 8011f84:	4b40      	ldr	r3, [pc, #256]	@ (8012088 <__kernel_rem_pio2+0x320>)
 8011f86:	2200      	movs	r2, #0
 8011f88:	4606      	mov	r6, r0
 8011f8a:	460f      	mov	r7, r1
 8011f8c:	f7ee fb34 	bl	80005f8 <__aeabi_dmul>
 8011f90:	4602      	mov	r2, r0
 8011f92:	460b      	mov	r3, r1
 8011f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f98:	f7ee f976 	bl	8000288 <__aeabi_dsub>
 8011f9c:	f7ee fddc 	bl	8000b58 <__aeabi_d2iz>
 8011fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011fa4:	f849 0b04 	str.w	r0, [r9], #4
 8011fa8:	4639      	mov	r1, r7
 8011faa:	4630      	mov	r0, r6
 8011fac:	f7ee f96e 	bl	800028c <__adddf3>
 8011fb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fb8:	e75d      	b.n	8011e76 <__kernel_rem_pio2+0x10e>
 8011fba:	d107      	bne.n	8011fcc <__kernel_rem_pio2+0x264>
 8011fbc:	f108 33ff 	add.w	r3, r8, #4294967295
 8011fc0:	aa0c      	add	r2, sp, #48	@ 0x30
 8011fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fc6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011fca:	e79e      	b.n	8011f0a <__kernel_rem_pio2+0x1a2>
 8011fcc:	4b2f      	ldr	r3, [pc, #188]	@ (801208c <__kernel_rem_pio2+0x324>)
 8011fce:	2200      	movs	r2, #0
 8011fd0:	f7ee fd98 	bl	8000b04 <__aeabi_dcmpge>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	d143      	bne.n	8012060 <__kernel_rem_pio2+0x2f8>
 8011fd8:	4681      	mov	r9, r0
 8011fda:	2200      	movs	r2, #0
 8011fdc:	2300      	movs	r3, #0
 8011fde:	4630      	mov	r0, r6
 8011fe0:	4639      	mov	r1, r7
 8011fe2:	f7ee fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	f000 80bf 	beq.w	801216a <__kernel_rem_pio2+0x402>
 8011fec:	f108 33ff 	add.w	r3, r8, #4294967295
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	9900      	ldr	r1, [sp, #0]
 8011ff4:	428b      	cmp	r3, r1
 8011ff6:	da6e      	bge.n	80120d6 <__kernel_rem_pio2+0x36e>
 8011ff8:	2a00      	cmp	r2, #0
 8011ffa:	f000 8089 	beq.w	8012110 <__kernel_rem_pio2+0x3a8>
 8011ffe:	f108 38ff 	add.w	r8, r8, #4294967295
 8012002:	ab0c      	add	r3, sp, #48	@ 0x30
 8012004:	f1ab 0b18 	sub.w	fp, fp, #24
 8012008:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d0f6      	beq.n	8011ffe <__kernel_rem_pio2+0x296>
 8012010:	4658      	mov	r0, fp
 8012012:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8012070 <__kernel_rem_pio2+0x308>
 8012016:	f000 f9ff 	bl	8012418 <scalbn>
 801201a:	f108 0301 	add.w	r3, r8, #1
 801201e:	00da      	lsls	r2, r3, #3
 8012020:	9205      	str	r2, [sp, #20]
 8012022:	ec55 4b10 	vmov	r4, r5, d0
 8012026:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012028:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8012084 <__kernel_rem_pio2+0x31c>
 801202c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012030:	4646      	mov	r6, r8
 8012032:	f04f 0a00 	mov.w	sl, #0
 8012036:	2e00      	cmp	r6, #0
 8012038:	f280 80cf 	bge.w	80121da <__kernel_rem_pio2+0x472>
 801203c:	4644      	mov	r4, r8
 801203e:	2c00      	cmp	r4, #0
 8012040:	f2c0 80fd 	blt.w	801223e <__kernel_rem_pio2+0x4d6>
 8012044:	4b12      	ldr	r3, [pc, #72]	@ (8012090 <__kernel_rem_pio2+0x328>)
 8012046:	461f      	mov	r7, r3
 8012048:	ab70      	add	r3, sp, #448	@ 0x1c0
 801204a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801204e:	9306      	str	r3, [sp, #24]
 8012050:	f04f 0a00 	mov.w	sl, #0
 8012054:	f04f 0b00 	mov.w	fp, #0
 8012058:	2600      	movs	r6, #0
 801205a:	eba8 0504 	sub.w	r5, r8, r4
 801205e:	e0e2      	b.n	8012226 <__kernel_rem_pio2+0x4be>
 8012060:	f04f 0902 	mov.w	r9, #2
 8012064:	e754      	b.n	8011f10 <__kernel_rem_pio2+0x1a8>
 8012066:	bf00      	nop
	...
 8012074:	3ff00000 	.word	0x3ff00000
 8012078:	08012cc0 	.word	0x08012cc0
 801207c:	40200000 	.word	0x40200000
 8012080:	3ff00000 	.word	0x3ff00000
 8012084:	3e700000 	.word	0x3e700000
 8012088:	41700000 	.word	0x41700000
 801208c:	3fe00000 	.word	0x3fe00000
 8012090:	08012c80 	.word	0x08012c80
 8012094:	f854 3b04 	ldr.w	r3, [r4], #4
 8012098:	b945      	cbnz	r5, 80120ac <__kernel_rem_pio2+0x344>
 801209a:	b123      	cbz	r3, 80120a6 <__kernel_rem_pio2+0x33e>
 801209c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80120a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80120a4:	2301      	movs	r3, #1
 80120a6:	3201      	adds	r2, #1
 80120a8:	461d      	mov	r5, r3
 80120aa:	e738      	b.n	8011f1e <__kernel_rem_pio2+0x1b6>
 80120ac:	1acb      	subs	r3, r1, r3
 80120ae:	e7f7      	b.n	80120a0 <__kernel_rem_pio2+0x338>
 80120b0:	f108 32ff 	add.w	r2, r8, #4294967295
 80120b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80120b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80120be:	a90c      	add	r1, sp, #48	@ 0x30
 80120c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80120c4:	e739      	b.n	8011f3a <__kernel_rem_pio2+0x1d2>
 80120c6:	f108 32ff 	add.w	r2, r8, #4294967295
 80120ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80120cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80120d4:	e7f3      	b.n	80120be <__kernel_rem_pio2+0x356>
 80120d6:	a90c      	add	r1, sp, #48	@ 0x30
 80120d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80120dc:	3b01      	subs	r3, #1
 80120de:	430a      	orrs	r2, r1
 80120e0:	e787      	b.n	8011ff2 <__kernel_rem_pio2+0x28a>
 80120e2:	3401      	adds	r4, #1
 80120e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	d0fa      	beq.n	80120e2 <__kernel_rem_pio2+0x37a>
 80120ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80120f2:	eb0d 0503 	add.w	r5, sp, r3
 80120f6:	9b06      	ldr	r3, [sp, #24]
 80120f8:	aa20      	add	r2, sp, #128	@ 0x80
 80120fa:	4443      	add	r3, r8
 80120fc:	f108 0701 	add.w	r7, r8, #1
 8012100:	3d98      	subs	r5, #152	@ 0x98
 8012102:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8012106:	4444      	add	r4, r8
 8012108:	42bc      	cmp	r4, r7
 801210a:	da04      	bge.n	8012116 <__kernel_rem_pio2+0x3ae>
 801210c:	46a0      	mov	r8, r4
 801210e:	e6a2      	b.n	8011e56 <__kernel_rem_pio2+0xee>
 8012110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012112:	2401      	movs	r4, #1
 8012114:	e7e6      	b.n	80120e4 <__kernel_rem_pio2+0x37c>
 8012116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012118:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801211c:	f7ee fa02 	bl	8000524 <__aeabi_i2d>
 8012120:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80123e8 <__kernel_rem_pio2+0x680>
 8012124:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012128:	ed8d 7b02 	vstr	d7, [sp, #8]
 801212c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012130:	46b2      	mov	sl, r6
 8012132:	f04f 0800 	mov.w	r8, #0
 8012136:	9b05      	ldr	r3, [sp, #20]
 8012138:	4598      	cmp	r8, r3
 801213a:	dd05      	ble.n	8012148 <__kernel_rem_pio2+0x3e0>
 801213c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012140:	3701      	adds	r7, #1
 8012142:	eca5 7b02 	vstmia	r5!, {d7}
 8012146:	e7df      	b.n	8012108 <__kernel_rem_pio2+0x3a0>
 8012148:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801214c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012150:	f7ee fa52 	bl	80005f8 <__aeabi_dmul>
 8012154:	4602      	mov	r2, r0
 8012156:	460b      	mov	r3, r1
 8012158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801215c:	f7ee f896 	bl	800028c <__adddf3>
 8012160:	f108 0801 	add.w	r8, r8, #1
 8012164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012168:	e7e5      	b.n	8012136 <__kernel_rem_pio2+0x3ce>
 801216a:	f1cb 0000 	rsb	r0, fp, #0
 801216e:	ec47 6b10 	vmov	d0, r6, r7
 8012172:	f000 f951 	bl	8012418 <scalbn>
 8012176:	ec55 4b10 	vmov	r4, r5, d0
 801217a:	4b9d      	ldr	r3, [pc, #628]	@ (80123f0 <__kernel_rem_pio2+0x688>)
 801217c:	2200      	movs	r2, #0
 801217e:	4620      	mov	r0, r4
 8012180:	4629      	mov	r1, r5
 8012182:	f7ee fcbf 	bl	8000b04 <__aeabi_dcmpge>
 8012186:	b300      	cbz	r0, 80121ca <__kernel_rem_pio2+0x462>
 8012188:	4b9a      	ldr	r3, [pc, #616]	@ (80123f4 <__kernel_rem_pio2+0x68c>)
 801218a:	2200      	movs	r2, #0
 801218c:	4620      	mov	r0, r4
 801218e:	4629      	mov	r1, r5
 8012190:	f7ee fa32 	bl	80005f8 <__aeabi_dmul>
 8012194:	f7ee fce0 	bl	8000b58 <__aeabi_d2iz>
 8012198:	4606      	mov	r6, r0
 801219a:	f7ee f9c3 	bl	8000524 <__aeabi_i2d>
 801219e:	4b94      	ldr	r3, [pc, #592]	@ (80123f0 <__kernel_rem_pio2+0x688>)
 80121a0:	2200      	movs	r2, #0
 80121a2:	f7ee fa29 	bl	80005f8 <__aeabi_dmul>
 80121a6:	460b      	mov	r3, r1
 80121a8:	4602      	mov	r2, r0
 80121aa:	4629      	mov	r1, r5
 80121ac:	4620      	mov	r0, r4
 80121ae:	f7ee f86b 	bl	8000288 <__aeabi_dsub>
 80121b2:	f7ee fcd1 	bl	8000b58 <__aeabi_d2iz>
 80121b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80121b8:	f10b 0b18 	add.w	fp, fp, #24
 80121bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80121c0:	f108 0801 	add.w	r8, r8, #1
 80121c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80121c8:	e722      	b.n	8012010 <__kernel_rem_pio2+0x2a8>
 80121ca:	4620      	mov	r0, r4
 80121cc:	4629      	mov	r1, r5
 80121ce:	f7ee fcc3 	bl	8000b58 <__aeabi_d2iz>
 80121d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80121d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80121d8:	e71a      	b.n	8012010 <__kernel_rem_pio2+0x2a8>
 80121da:	ab0c      	add	r3, sp, #48	@ 0x30
 80121dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80121e0:	f7ee f9a0 	bl	8000524 <__aeabi_i2d>
 80121e4:	4622      	mov	r2, r4
 80121e6:	462b      	mov	r3, r5
 80121e8:	f7ee fa06 	bl	80005f8 <__aeabi_dmul>
 80121ec:	4652      	mov	r2, sl
 80121ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80121f2:	465b      	mov	r3, fp
 80121f4:	4620      	mov	r0, r4
 80121f6:	4629      	mov	r1, r5
 80121f8:	f7ee f9fe 	bl	80005f8 <__aeabi_dmul>
 80121fc:	3e01      	subs	r6, #1
 80121fe:	4604      	mov	r4, r0
 8012200:	460d      	mov	r5, r1
 8012202:	e718      	b.n	8012036 <__kernel_rem_pio2+0x2ce>
 8012204:	9906      	ldr	r1, [sp, #24]
 8012206:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801220a:	9106      	str	r1, [sp, #24]
 801220c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8012210:	f7ee f9f2 	bl	80005f8 <__aeabi_dmul>
 8012214:	4602      	mov	r2, r0
 8012216:	460b      	mov	r3, r1
 8012218:	4650      	mov	r0, sl
 801221a:	4659      	mov	r1, fp
 801221c:	f7ee f836 	bl	800028c <__adddf3>
 8012220:	3601      	adds	r6, #1
 8012222:	4682      	mov	sl, r0
 8012224:	468b      	mov	fp, r1
 8012226:	9b00      	ldr	r3, [sp, #0]
 8012228:	429e      	cmp	r6, r3
 801222a:	dc01      	bgt.n	8012230 <__kernel_rem_pio2+0x4c8>
 801222c:	42b5      	cmp	r5, r6
 801222e:	dae9      	bge.n	8012204 <__kernel_rem_pio2+0x49c>
 8012230:	ab48      	add	r3, sp, #288	@ 0x120
 8012232:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012236:	e9c5 ab00 	strd	sl, fp, [r5]
 801223a:	3c01      	subs	r4, #1
 801223c:	e6ff      	b.n	801203e <__kernel_rem_pio2+0x2d6>
 801223e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012240:	2b02      	cmp	r3, #2
 8012242:	dc0b      	bgt.n	801225c <__kernel_rem_pio2+0x4f4>
 8012244:	2b00      	cmp	r3, #0
 8012246:	dc39      	bgt.n	80122bc <__kernel_rem_pio2+0x554>
 8012248:	d05d      	beq.n	8012306 <__kernel_rem_pio2+0x59e>
 801224a:	9b02      	ldr	r3, [sp, #8]
 801224c:	f003 0007 	and.w	r0, r3, #7
 8012250:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8012254:	ecbd 8b02 	vpop	{d8}
 8012258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801225c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801225e:	2b03      	cmp	r3, #3
 8012260:	d1f3      	bne.n	801224a <__kernel_rem_pio2+0x4e2>
 8012262:	9b05      	ldr	r3, [sp, #20]
 8012264:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012268:	eb0d 0403 	add.w	r4, sp, r3
 801226c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8012270:	4625      	mov	r5, r4
 8012272:	46c2      	mov	sl, r8
 8012274:	f1ba 0f00 	cmp.w	sl, #0
 8012278:	f1a5 0508 	sub.w	r5, r5, #8
 801227c:	dc6b      	bgt.n	8012356 <__kernel_rem_pio2+0x5ee>
 801227e:	4645      	mov	r5, r8
 8012280:	2d01      	cmp	r5, #1
 8012282:	f1a4 0408 	sub.w	r4, r4, #8
 8012286:	f300 8087 	bgt.w	8012398 <__kernel_rem_pio2+0x630>
 801228a:	9c05      	ldr	r4, [sp, #20]
 801228c:	ab48      	add	r3, sp, #288	@ 0x120
 801228e:	441c      	add	r4, r3
 8012290:	2000      	movs	r0, #0
 8012292:	2100      	movs	r1, #0
 8012294:	f1b8 0f01 	cmp.w	r8, #1
 8012298:	f300 809c 	bgt.w	80123d4 <__kernel_rem_pio2+0x66c>
 801229c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80122a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80122a4:	f1b9 0f00 	cmp.w	r9, #0
 80122a8:	f040 80a6 	bne.w	80123f8 <__kernel_rem_pio2+0x690>
 80122ac:	9b04      	ldr	r3, [sp, #16]
 80122ae:	e9c3 7800 	strd	r7, r8, [r3]
 80122b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80122b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80122ba:	e7c6      	b.n	801224a <__kernel_rem_pio2+0x4e2>
 80122bc:	9d05      	ldr	r5, [sp, #20]
 80122be:	ab48      	add	r3, sp, #288	@ 0x120
 80122c0:	441d      	add	r5, r3
 80122c2:	4644      	mov	r4, r8
 80122c4:	2000      	movs	r0, #0
 80122c6:	2100      	movs	r1, #0
 80122c8:	2c00      	cmp	r4, #0
 80122ca:	da35      	bge.n	8012338 <__kernel_rem_pio2+0x5d0>
 80122cc:	f1b9 0f00 	cmp.w	r9, #0
 80122d0:	d038      	beq.n	8012344 <__kernel_rem_pio2+0x5dc>
 80122d2:	4602      	mov	r2, r0
 80122d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80122d8:	9c04      	ldr	r4, [sp, #16]
 80122da:	e9c4 2300 	strd	r2, r3, [r4]
 80122de:	4602      	mov	r2, r0
 80122e0:	460b      	mov	r3, r1
 80122e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80122e6:	f7ed ffcf 	bl	8000288 <__aeabi_dsub>
 80122ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80122ec:	2401      	movs	r4, #1
 80122ee:	45a0      	cmp	r8, r4
 80122f0:	da2b      	bge.n	801234a <__kernel_rem_pio2+0x5e2>
 80122f2:	f1b9 0f00 	cmp.w	r9, #0
 80122f6:	d002      	beq.n	80122fe <__kernel_rem_pio2+0x596>
 80122f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80122fc:	4619      	mov	r1, r3
 80122fe:	9b04      	ldr	r3, [sp, #16]
 8012300:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012304:	e7a1      	b.n	801224a <__kernel_rem_pio2+0x4e2>
 8012306:	9c05      	ldr	r4, [sp, #20]
 8012308:	ab48      	add	r3, sp, #288	@ 0x120
 801230a:	441c      	add	r4, r3
 801230c:	2000      	movs	r0, #0
 801230e:	2100      	movs	r1, #0
 8012310:	f1b8 0f00 	cmp.w	r8, #0
 8012314:	da09      	bge.n	801232a <__kernel_rem_pio2+0x5c2>
 8012316:	f1b9 0f00 	cmp.w	r9, #0
 801231a:	d002      	beq.n	8012322 <__kernel_rem_pio2+0x5ba>
 801231c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012320:	4619      	mov	r1, r3
 8012322:	9b04      	ldr	r3, [sp, #16]
 8012324:	e9c3 0100 	strd	r0, r1, [r3]
 8012328:	e78f      	b.n	801224a <__kernel_rem_pio2+0x4e2>
 801232a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801232e:	f7ed ffad 	bl	800028c <__adddf3>
 8012332:	f108 38ff 	add.w	r8, r8, #4294967295
 8012336:	e7eb      	b.n	8012310 <__kernel_rem_pio2+0x5a8>
 8012338:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801233c:	f7ed ffa6 	bl	800028c <__adddf3>
 8012340:	3c01      	subs	r4, #1
 8012342:	e7c1      	b.n	80122c8 <__kernel_rem_pio2+0x560>
 8012344:	4602      	mov	r2, r0
 8012346:	460b      	mov	r3, r1
 8012348:	e7c6      	b.n	80122d8 <__kernel_rem_pio2+0x570>
 801234a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801234e:	f7ed ff9d 	bl	800028c <__adddf3>
 8012352:	3401      	adds	r4, #1
 8012354:	e7cb      	b.n	80122ee <__kernel_rem_pio2+0x586>
 8012356:	ed95 7b00 	vldr	d7, [r5]
 801235a:	ed8d 7b00 	vstr	d7, [sp]
 801235e:	ed95 7b02 	vldr	d7, [r5, #8]
 8012362:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012366:	ec53 2b17 	vmov	r2, r3, d7
 801236a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801236e:	f7ed ff8d 	bl	800028c <__adddf3>
 8012372:	4602      	mov	r2, r0
 8012374:	460b      	mov	r3, r1
 8012376:	4606      	mov	r6, r0
 8012378:	460f      	mov	r7, r1
 801237a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801237e:	f7ed ff83 	bl	8000288 <__aeabi_dsub>
 8012382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012386:	f7ed ff81 	bl	800028c <__adddf3>
 801238a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801238e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8012392:	e9c5 6700 	strd	r6, r7, [r5]
 8012396:	e76d      	b.n	8012274 <__kernel_rem_pio2+0x50c>
 8012398:	ed94 7b00 	vldr	d7, [r4]
 801239c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80123a0:	ec51 0b17 	vmov	r0, r1, d7
 80123a4:	4652      	mov	r2, sl
 80123a6:	465b      	mov	r3, fp
 80123a8:	ed8d 7b00 	vstr	d7, [sp]
 80123ac:	f7ed ff6e 	bl	800028c <__adddf3>
 80123b0:	4602      	mov	r2, r0
 80123b2:	460b      	mov	r3, r1
 80123b4:	4606      	mov	r6, r0
 80123b6:	460f      	mov	r7, r1
 80123b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123bc:	f7ed ff64 	bl	8000288 <__aeabi_dsub>
 80123c0:	4652      	mov	r2, sl
 80123c2:	465b      	mov	r3, fp
 80123c4:	f7ed ff62 	bl	800028c <__adddf3>
 80123c8:	3d01      	subs	r5, #1
 80123ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80123ce:	e9c4 6700 	strd	r6, r7, [r4]
 80123d2:	e755      	b.n	8012280 <__kernel_rem_pio2+0x518>
 80123d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80123d8:	f7ed ff58 	bl	800028c <__adddf3>
 80123dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80123e0:	e758      	b.n	8012294 <__kernel_rem_pio2+0x52c>
 80123e2:	bf00      	nop
 80123e4:	f3af 8000 	nop.w
	...
 80123f0:	41700000 	.word	0x41700000
 80123f4:	3e700000 	.word	0x3e700000
 80123f8:	9b04      	ldr	r3, [sp, #16]
 80123fa:	9a04      	ldr	r2, [sp, #16]
 80123fc:	601f      	str	r7, [r3, #0]
 80123fe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8012402:	605c      	str	r4, [r3, #4]
 8012404:	609d      	str	r5, [r3, #8]
 8012406:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801240a:	60d3      	str	r3, [r2, #12]
 801240c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012410:	6110      	str	r0, [r2, #16]
 8012412:	6153      	str	r3, [r2, #20]
 8012414:	e719      	b.n	801224a <__kernel_rem_pio2+0x4e2>
 8012416:	bf00      	nop

08012418 <scalbn>:
 8012418:	b570      	push	{r4, r5, r6, lr}
 801241a:	ec55 4b10 	vmov	r4, r5, d0
 801241e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012422:	4606      	mov	r6, r0
 8012424:	462b      	mov	r3, r5
 8012426:	b991      	cbnz	r1, 801244e <scalbn+0x36>
 8012428:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801242c:	4323      	orrs	r3, r4
 801242e:	d03d      	beq.n	80124ac <scalbn+0x94>
 8012430:	4b35      	ldr	r3, [pc, #212]	@ (8012508 <scalbn+0xf0>)
 8012432:	4620      	mov	r0, r4
 8012434:	4629      	mov	r1, r5
 8012436:	2200      	movs	r2, #0
 8012438:	f7ee f8de 	bl	80005f8 <__aeabi_dmul>
 801243c:	4b33      	ldr	r3, [pc, #204]	@ (801250c <scalbn+0xf4>)
 801243e:	429e      	cmp	r6, r3
 8012440:	4604      	mov	r4, r0
 8012442:	460d      	mov	r5, r1
 8012444:	da0f      	bge.n	8012466 <scalbn+0x4e>
 8012446:	a328      	add	r3, pc, #160	@ (adr r3, 80124e8 <scalbn+0xd0>)
 8012448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244c:	e01e      	b.n	801248c <scalbn+0x74>
 801244e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012452:	4291      	cmp	r1, r2
 8012454:	d10b      	bne.n	801246e <scalbn+0x56>
 8012456:	4622      	mov	r2, r4
 8012458:	4620      	mov	r0, r4
 801245a:	4629      	mov	r1, r5
 801245c:	f7ed ff16 	bl	800028c <__adddf3>
 8012460:	4604      	mov	r4, r0
 8012462:	460d      	mov	r5, r1
 8012464:	e022      	b.n	80124ac <scalbn+0x94>
 8012466:	460b      	mov	r3, r1
 8012468:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801246c:	3936      	subs	r1, #54	@ 0x36
 801246e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012472:	4296      	cmp	r6, r2
 8012474:	dd0d      	ble.n	8012492 <scalbn+0x7a>
 8012476:	2d00      	cmp	r5, #0
 8012478:	a11d      	add	r1, pc, #116	@ (adr r1, 80124f0 <scalbn+0xd8>)
 801247a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801247e:	da02      	bge.n	8012486 <scalbn+0x6e>
 8012480:	a11d      	add	r1, pc, #116	@ (adr r1, 80124f8 <scalbn+0xe0>)
 8012482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012486:	a31a      	add	r3, pc, #104	@ (adr r3, 80124f0 <scalbn+0xd8>)
 8012488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248c:	f7ee f8b4 	bl	80005f8 <__aeabi_dmul>
 8012490:	e7e6      	b.n	8012460 <scalbn+0x48>
 8012492:	1872      	adds	r2, r6, r1
 8012494:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012498:	428a      	cmp	r2, r1
 801249a:	dcec      	bgt.n	8012476 <scalbn+0x5e>
 801249c:	2a00      	cmp	r2, #0
 801249e:	dd08      	ble.n	80124b2 <scalbn+0x9a>
 80124a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80124a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80124a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80124ac:	ec45 4b10 	vmov	d0, r4, r5
 80124b0:	bd70      	pop	{r4, r5, r6, pc}
 80124b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80124b6:	da08      	bge.n	80124ca <scalbn+0xb2>
 80124b8:	2d00      	cmp	r5, #0
 80124ba:	a10b      	add	r1, pc, #44	@ (adr r1, 80124e8 <scalbn+0xd0>)
 80124bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124c0:	dac1      	bge.n	8012446 <scalbn+0x2e>
 80124c2:	a10f      	add	r1, pc, #60	@ (adr r1, 8012500 <scalbn+0xe8>)
 80124c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124c8:	e7bd      	b.n	8012446 <scalbn+0x2e>
 80124ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80124ce:	3236      	adds	r2, #54	@ 0x36
 80124d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80124d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80124d8:	4620      	mov	r0, r4
 80124da:	4b0d      	ldr	r3, [pc, #52]	@ (8012510 <scalbn+0xf8>)
 80124dc:	4629      	mov	r1, r5
 80124de:	2200      	movs	r2, #0
 80124e0:	e7d4      	b.n	801248c <scalbn+0x74>
 80124e2:	bf00      	nop
 80124e4:	f3af 8000 	nop.w
 80124e8:	c2f8f359 	.word	0xc2f8f359
 80124ec:	01a56e1f 	.word	0x01a56e1f
 80124f0:	8800759c 	.word	0x8800759c
 80124f4:	7e37e43c 	.word	0x7e37e43c
 80124f8:	8800759c 	.word	0x8800759c
 80124fc:	fe37e43c 	.word	0xfe37e43c
 8012500:	c2f8f359 	.word	0xc2f8f359
 8012504:	81a56e1f 	.word	0x81a56e1f
 8012508:	43500000 	.word	0x43500000
 801250c:	ffff3cb0 	.word	0xffff3cb0
 8012510:	3c900000 	.word	0x3c900000
 8012514:	00000000 	.word	0x00000000

08012518 <floor>:
 8012518:	ec51 0b10 	vmov	r0, r1, d0
 801251c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012524:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012528:	2e13      	cmp	r6, #19
 801252a:	460c      	mov	r4, r1
 801252c:	4605      	mov	r5, r0
 801252e:	4680      	mov	r8, r0
 8012530:	dc34      	bgt.n	801259c <floor+0x84>
 8012532:	2e00      	cmp	r6, #0
 8012534:	da17      	bge.n	8012566 <floor+0x4e>
 8012536:	a332      	add	r3, pc, #200	@ (adr r3, 8012600 <floor+0xe8>)
 8012538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801253c:	f7ed fea6 	bl	800028c <__adddf3>
 8012540:	2200      	movs	r2, #0
 8012542:	2300      	movs	r3, #0
 8012544:	f7ee fae8 	bl	8000b18 <__aeabi_dcmpgt>
 8012548:	b150      	cbz	r0, 8012560 <floor+0x48>
 801254a:	2c00      	cmp	r4, #0
 801254c:	da55      	bge.n	80125fa <floor+0xe2>
 801254e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8012552:	432c      	orrs	r4, r5
 8012554:	2500      	movs	r5, #0
 8012556:	42ac      	cmp	r4, r5
 8012558:	4c2b      	ldr	r4, [pc, #172]	@ (8012608 <floor+0xf0>)
 801255a:	bf08      	it	eq
 801255c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8012560:	4621      	mov	r1, r4
 8012562:	4628      	mov	r0, r5
 8012564:	e023      	b.n	80125ae <floor+0x96>
 8012566:	4f29      	ldr	r7, [pc, #164]	@ (801260c <floor+0xf4>)
 8012568:	4137      	asrs	r7, r6
 801256a:	ea01 0307 	and.w	r3, r1, r7
 801256e:	4303      	orrs	r3, r0
 8012570:	d01d      	beq.n	80125ae <floor+0x96>
 8012572:	a323      	add	r3, pc, #140	@ (adr r3, 8012600 <floor+0xe8>)
 8012574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012578:	f7ed fe88 	bl	800028c <__adddf3>
 801257c:	2200      	movs	r2, #0
 801257e:	2300      	movs	r3, #0
 8012580:	f7ee faca 	bl	8000b18 <__aeabi_dcmpgt>
 8012584:	2800      	cmp	r0, #0
 8012586:	d0eb      	beq.n	8012560 <floor+0x48>
 8012588:	2c00      	cmp	r4, #0
 801258a:	bfbe      	ittt	lt
 801258c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012590:	4133      	asrlt	r3, r6
 8012592:	18e4      	addlt	r4, r4, r3
 8012594:	ea24 0407 	bic.w	r4, r4, r7
 8012598:	2500      	movs	r5, #0
 801259a:	e7e1      	b.n	8012560 <floor+0x48>
 801259c:	2e33      	cmp	r6, #51	@ 0x33
 801259e:	dd0a      	ble.n	80125b6 <floor+0x9e>
 80125a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80125a4:	d103      	bne.n	80125ae <floor+0x96>
 80125a6:	4602      	mov	r2, r0
 80125a8:	460b      	mov	r3, r1
 80125aa:	f7ed fe6f 	bl	800028c <__adddf3>
 80125ae:	ec41 0b10 	vmov	d0, r0, r1
 80125b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80125ba:	f04f 37ff 	mov.w	r7, #4294967295
 80125be:	40df      	lsrs	r7, r3
 80125c0:	4207      	tst	r7, r0
 80125c2:	d0f4      	beq.n	80125ae <floor+0x96>
 80125c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8012600 <floor+0xe8>)
 80125c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ca:	f7ed fe5f 	bl	800028c <__adddf3>
 80125ce:	2200      	movs	r2, #0
 80125d0:	2300      	movs	r3, #0
 80125d2:	f7ee faa1 	bl	8000b18 <__aeabi_dcmpgt>
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d0c2      	beq.n	8012560 <floor+0x48>
 80125da:	2c00      	cmp	r4, #0
 80125dc:	da0a      	bge.n	80125f4 <floor+0xdc>
 80125de:	2e14      	cmp	r6, #20
 80125e0:	d101      	bne.n	80125e6 <floor+0xce>
 80125e2:	3401      	adds	r4, #1
 80125e4:	e006      	b.n	80125f4 <floor+0xdc>
 80125e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80125ea:	2301      	movs	r3, #1
 80125ec:	40b3      	lsls	r3, r6
 80125ee:	441d      	add	r5, r3
 80125f0:	4545      	cmp	r5, r8
 80125f2:	d3f6      	bcc.n	80125e2 <floor+0xca>
 80125f4:	ea25 0507 	bic.w	r5, r5, r7
 80125f8:	e7b2      	b.n	8012560 <floor+0x48>
 80125fa:	2500      	movs	r5, #0
 80125fc:	462c      	mov	r4, r5
 80125fe:	e7af      	b.n	8012560 <floor+0x48>
 8012600:	8800759c 	.word	0x8800759c
 8012604:	7e37e43c 	.word	0x7e37e43c
 8012608:	bff00000 	.word	0xbff00000
 801260c:	000fffff 	.word	0x000fffff

08012610 <_init>:
 8012610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012612:	bf00      	nop
 8012614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012616:	bc08      	pop	{r3}
 8012618:	469e      	mov	lr, r3
 801261a:	4770      	bx	lr

0801261c <_fini>:
 801261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801261e:	bf00      	nop
 8012620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012622:	bc08      	pop	{r3}
 8012624:	469e      	mov	lr, r3
 8012626:	4770      	bx	lr
