
RMTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800d4c8  0800d4c8  0001d4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8dc  0800d8dc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8dc  0800d8dc  0001d8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8e4  0800d8e4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8e4  0800d8e4  0001d8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8e8  0800d8e8  0001d8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d8ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00005448  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005630  20005630  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ec82  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004476  00000000  00000000  0003eedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019d8  00000000  00000000  00043358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001414  00000000  00000000  00044d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024cef  00000000  00000000  00046144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cf48  00000000  00000000  0006ae33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dcafa  00000000  00000000  00087d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007e0c  00000000  00000000  00164878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0016c684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d4b0 	.word	0x0800d4b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800d4b0 	.word	0x0800d4b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	f107 0214 	add.w	r2, r7, #20
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f002 fd73 	bl	80039a2 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000ec2:	d203      	bcs.n	8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 8000ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec8:	d804      	bhi.n	8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
        case CAN_b2b_ID: {
            get_b2b_feedback(&b2b, rx_data);                             // add back numbering code for extra CAN input lines
            break;
         }
        default: {
            break;
 8000eca:	e08a      	b.n	8000fe2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
    switch (rx_header.StdId) {
 8000ecc:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000ed0:	d062      	beq.n	8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
            break;
 8000ed2:	e086      	b.n	8000fe2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000ede:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 8000ee0:	4b42      	ldr	r3, [pc, #264]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4a42      	ldr	r2, [pc, #264]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000ee8:	460b      	mov	r3, r1
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	b210      	sxth	r0, r2
 8000efc:	4a3c      	ldr	r2, [pc, #240]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000efe:	460b      	mov	r3, r1
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	3308      	adds	r3, #8
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	801a      	strh	r2, [r3, #0]
 8000f0e:	7b3b      	ldrb	r3, [r7, #12]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	7b7b      	ldrb	r3, [r7, #13]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	b290      	uxth	r0, r2
 8000f24:	4a32      	ldr	r2, [pc, #200]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000f26:	460b      	mov	r3, r1
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	4602      	mov	r2, r0
 8000f32:	801a      	strh	r2, [r3, #0]
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	492b      	ldr	r1, [pc, #172]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000f40:	7809      	ldrb	r1, [r1, #0]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b218      	sxth	r0, r3
 8000f46:	4a2a      	ldr	r2, [pc, #168]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000f48:	460b      	mov	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	3302      	adds	r3, #2
 8000f54:	4602      	mov	r2, r0
 8000f56:	801a      	strh	r2, [r3, #0]
 8000f58:	7c3b      	ldrb	r3, [r7, #16]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	7c7b      	ldrb	r3, [r7, #17]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4922      	ldr	r1, [pc, #136]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000f64:	7809      	ldrb	r1, [r1, #0]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b218      	sxth	r0, r3
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	3304      	adds	r3, #4
 8000f78:	4602      	mov	r2, r0
 8000f7a:	801a      	strh	r2, [r3, #0]
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	7cb8      	ldrb	r0, [r7, #18]
 8000f84:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000f86:	460b      	mov	r3, r1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	3306      	adds	r3, #6
 8000f92:	4602      	mov	r2, r0
 8000f94:	701a      	strb	r2, [r3, #0]
            break;
 8000f96:	e024      	b.n	8000fe2 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
            get_b2b_feedback(&b2b, rx_data);                             // add back numbering code for extra CAN input lines
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	7b7b      	ldrb	r3, [r7, #13]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000fa8:	801a      	strh	r2, [r3, #0]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000fba:	805a      	strh	r2, [r3, #2]
 8000fbc:	7c3b      	ldrb	r3, [r7, #16]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	7c7b      	ldrb	r3, [r7, #17]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000fcc:	809a      	strh	r2, [r3, #4]
 8000fce:	7cbb      	ldrb	r3, [r7, #18]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	7cfb      	ldrb	r3, [r7, #19]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000fde:	80da      	strh	r2, [r3, #6]
            break;
 8000fe0:	bf00      	nop
        }
    }
}
 8000fe2:	bf00      	nop
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000314 	.word	0x20000314
 8000ff0:	2000021c 	.word	0x2000021c
 8000ff4:	2000028c 	.word	0x2000028c

08000ff8 <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	4611      	mov	r1, r2
 8001004:	461a      	mov	r2, r3
 8001006:	4623      	mov	r3, r4
 8001008:	80fb      	strh	r3, [r7, #6]
 800100a:	4603      	mov	r3, r0
 800100c:	80bb      	strh	r3, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]
 8001012:	4613      	mov	r3, r2
 8001014:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4a20      	ldr	r2, [pc, #128]	; (800109c <CAN2_cmd_motors+0xa4>)
 800101a:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <CAN2_cmd_motors+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <CAN2_cmd_motors+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <CAN2_cmd_motors+0xa4>)
 800102a:	2208      	movs	r2, #8
 800102c:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 800102e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001032:	121b      	asrs	r3, r3, #8
 8001034:	b21b      	sxth	r3, r3
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 800103a:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 8001042:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 8001044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001048:	121b      	asrs	r3, r3, #8
 800104a:	b21b      	sxth	r3, r3
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 8001050:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 8001058:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 800105a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800105e:	121b      	asrs	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 8001066:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 8001068:	883b      	ldrh	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 800106e:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 8001070:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001074:	121b      	asrs	r3, r3, #8
 8001076:	b21b      	sxth	r3, r3
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 800107c:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 800107e:	8c3b      	ldrh	r3, [r7, #32]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 8001084:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <CAN2_cmd_motors+0xa8>)
 800108c:	4903      	ldr	r1, [pc, #12]	; (800109c <CAN2_cmd_motors+0xa4>)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <CAN2_cmd_motors+0xac>)
 8001090:	f002 fbac 	bl	80037ec <HAL_CAN_AddTxMessage>
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}
 800109c:	200002f4 	.word	0x200002f4
 80010a0:	2000030c 	.word	0x2000030c
 80010a4:	20000678 	.word	0x20000678

080010a8 <set_motor_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_motor_current(int8_t motorID, int16_t setCurrent) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	80bb      	strh	r3, [r7, #4]
	motorCurrent[motorID-1] = setCurrent;
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	3b01      	subs	r3, #1
 80010be:	4925      	ldr	r1, [pc, #148]	; (8001154 <set_motor_current+0xac>)
 80010c0:	88ba      	ldrh	r2, [r7, #4]
 80010c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b0b      	cmp	r3, #11
 80010cc:	dc3d      	bgt.n	800114a <set_motor_current+0xa2>
 80010ce:	2b09      	cmp	r3, #9
 80010d0:	da2c      	bge.n	800112c <set_motor_current+0x84>
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	dc02      	bgt.n	80010dc <set_motor_current+0x34>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dc04      	bgt.n	80010e4 <set_motor_current+0x3c>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCurrent[8], motorCurrent[9], motorCurrent[10], 0);
		}
		default: {
	        break;
 80010da:	e036      	b.n	800114a <set_motor_current+0xa2>
 80010dc:	3b05      	subs	r3, #5
	switch(motorID) {
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d833      	bhi.n	800114a <set_motor_current+0xa2>
 80010e2:	e011      	b.n	8001108 <set_motor_current+0x60>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCurrent[0], motorCurrent[1], motorCurrent[2], motorCurrent[3]);
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <set_motor_current+0xac>)
 80010e6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <set_motor_current+0xac>)
 80010ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <set_motor_current+0xac>)
 80010f2:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <set_motor_current+0xac>)
 80010f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4603      	mov	r3, r0
 8001100:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001104:	f7ff ff78 	bl	8000ff8 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCurrent[4], motorCurrent[5], motorCurrent[6], motorCurrent[7]);
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <set_motor_current+0xac>)
 800110a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <set_motor_current+0xac>)
 8001110:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <set_motor_current+0xac>)
 8001116:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <set_motor_current+0xac>)
 800111c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4603      	mov	r3, r0
 8001124:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001128:	f7ff ff66 	bl	8000ff8 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCurrent[8], motorCurrent[9], motorCurrent[10], 0);
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <set_motor_current+0xac>)
 800112e:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <set_motor_current+0xac>)
 8001134:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <set_motor_current+0xac>)
 800113a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800113e:	2000      	movs	r0, #0
 8001140:	9000      	str	r0, [sp, #0]
 8001142:	f240 20fe 	movw	r0, #766	; 0x2fe
 8001146:	f7ff ff57 	bl	8000ff8 <CAN2_cmd_motors>
	        break;
 800114a:	bf00      	nop
	    }
	}
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000204 	.word	0x20000204

08001158 <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int16_t calc_current2RPM_PID(int8_t motorID, PID_preset_t preset) {
 8001158:	b490      	push	{r4, r7}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	eef0 6a40 	vmov.f32	s13, s0
 8001164:	eeb0 7a60 	vmov.f32	s14, s1
 8001168:	eef0 7a41 	vmov.f32	s15, s2
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	edc7 6a00 	vstr	s13, [r7]
 8001172:	ed87 7a01 	vstr	s14, [r7, #4]
 8001176:	edc7 7a02 	vstr	s15, [r7, #8]
	int16_t return_current_val = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	82fb      	strh	r3, [r7, #22]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	3b01      	subs	r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	757b      	strb	r3, [r7, #21]
	iRPM[ID] += targetRPM[ID] - motor_feedback[ID].speed_rpm;      // add to integral term
 8001186:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800118a:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <calc_current2RPM_PID+0x148>)
 800118c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001190:	b299      	uxth	r1, r3
 8001192:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001196:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <calc_current2RPM_PID+0x14c>)
 8001198:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800119c:	b298      	uxth	r0, r3
 800119e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80011a2:	4c41      	ldr	r4, [pc, #260]	; (80012a8 <calc_current2RPM_PID+0x150>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4423      	add	r3, r4
 80011ae:	3302      	adds	r3, #2
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	1ac3      	subs	r3, r0, r3
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	440b      	add	r3, r1
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011c2:	b211      	sxth	r1, r2
 80011c4:	4a36      	ldr	r2, [pc, #216]	; (80012a0 <calc_current2RPM_PID+0x148>)
 80011c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	dRPM[ID] = targetRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 80011ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011ce:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <calc_current2RPM_PID+0x14c>)
 80011d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80011d4:	b299      	uxth	r1, r3
 80011d6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80011da:	4833      	ldr	r0, [pc, #204]	; (80012a8 <calc_current2RPM_PID+0x150>)
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4403      	add	r3, r0
 80011e6:	3302      	adds	r3, #2
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	1acb      	subs	r3, r1, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011f6:	b211      	sxth	r1, r2
 80011f8:	4a2c      	ldr	r2, [pc, #176]	; (80012ac <calc_current2RPM_PID+0x154>)
 80011fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	errRPM[ID] = targetRPM[ID] - motor_feedback[ID].speed_rpm;     // update proportional term
 80011fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <calc_current2RPM_PID+0x14c>)
 8001204:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001208:	b299      	uxth	r1, r3
 800120a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800120e:	4826      	ldr	r0, [pc, #152]	; (80012a8 <calc_current2RPM_PID+0x150>)
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4403      	add	r3, r0
 800121a:	3302      	adds	r3, #2
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	b29b      	uxth	r3, r3
 8001222:	1acb      	subs	r3, r1, r3
 8001224:	b29a      	uxth	r2, r3
 8001226:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800122a:	b211      	sxth	r1, r2
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <calc_current2RPM_PID+0x158>)
 800122e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001232:	ed97 7a00 	vldr	s14, [r7]
 8001236:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800123a:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <calc_current2RPM_PID+0x158>)
 800123c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001250:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <calc_current2RPM_PID+0x148>)
 8001256:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126a:	edd7 6a02 	vldr	s13, [r7, #8]
 800126e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <calc_current2RPM_PID+0x154>)
 8001274:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128c:	ee17 3a90 	vmov	r3, s15
 8001290:	82fb      	strh	r3, [r7, #22]
	return return_current_val;
 8001292:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bc90      	pop	{r4, r7}
 800129e:	4770      	bx	lr
 80012a0:	200002c4 	.word	0x200002c4
 80012a4:	20000294 	.word	0x20000294
 80012a8:	2000021c 	.word	0x2000021c
 80012ac:	200002ac 	.word	0x200002ac
 80012b0:	200002dc 	.word	0x200002dc

080012b4 <setMotorRPM>:

void setMotorRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	eef0 6a40 	vmov.f32	s13, s0
 80012c2:	eeb0 7a60 	vmov.f32	s14, s1
 80012c6:	eef0 7a41 	vmov.f32	s15, s2
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	4613      	mov	r3, r2
 80012ce:	81bb      	strh	r3, [r7, #12]
 80012d0:	edc7 6a00 	vstr	s13, [r7]
 80012d4:	ed87 7a01 	vstr	s14, [r7, #4]
 80012d8:	edc7 7a02 	vstr	s15, [r7, #8]
	targetRPM[motorID-1] = RPMtarget;
 80012dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	4910      	ldr	r1, [pc, #64]	; (8001324 <setMotorRPM+0x70>)
 80012e4:	89ba      	ldrh	r2, [r7, #12]
 80012e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	set_motor_current(motorID, calc_current2RPM_PID(motorID, preset));
 80012ea:	edd7 6a00 	vldr	s13, [r7]
 80012ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	eeb0 0a66 	vmov.f32	s0, s13
 80012fe:	eef0 0a47 	vmov.f32	s1, s14
 8001302:	eeb0 1a67 	vmov.f32	s2, s15
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff26 	bl	8001158 <calc_current2RPM_PID>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fec6 	bl	80010a8 <set_motor_current>
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000294 	.word	0x20000294

08001328 <usart_Init>:
power_heat_data_t power_heat_data;
robot_status_t robot_status;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 800132c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001330:	4905      	ldr	r1, [pc, #20]	; (8001348 <usart_Init+0x20>)
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <usart_Init+0x24>)
 8001334:	f005 fae2 	bl	80068fc <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <usart_Init+0x28>)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <usart_Init+0x2c>)
 8001340:	f005 fadc 	bl	80068fc <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000318 	.word	0x20000318
 800134c:	200007d0 	.word	0x200007d0
 8001350:	20000418 	.word	0x20000418
 8001354:	20000858 	.word	0x20000858

08001358 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8001358:	b40f      	push	{r0, r1, r2, r3}
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <usart_printf+0x3c>)
 8001364:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <usart_printf+0x3c>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68b9      	ldr	r1, [r7, #8]
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <usart_printf+0x40>)
 800136e:	f009 ff03 	bl	800b178 <vsiprintf>
 8001372:	4603      	mov	r3, r0
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <usart_printf+0x44>)
 8001378:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <usart_printf+0x44>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4905      	ldr	r1, [pc, #20]	; (8001398 <usart_printf+0x40>)
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <usart_printf+0x48>)
 8001384:	f005 fa3c 	bl	8006800 <HAL_UART_Transmit_DMA>
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001390:	b004      	add	sp, #16
 8001392:	4770      	bx	lr
 8001394:	20000548 	.word	0x20000548
 8001398:	2000054c 	.word	0x2000054c
 800139c:	2000064c 	.word	0x2000064c
 80013a0:	200007d0 	.word	0x200007d0

080013a4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80013a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a8:	b09f      	sub	sp, #124	; 0x7c
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	66f8      	str	r0, [r7, #108]	; 0x6c
 80013ae:	460b      	mov	r3, r1
 80013b0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	if (huart == &huart6) {
 80013b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 81a7 	bne.w	800170c <HAL_UARTEx_RxEventCallback+0x368>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80013be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c2:	4970      	ldr	r1, [pc, #448]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80013c4:	486e      	ldr	r0, [pc, #440]	; (8001580 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80013c6:	f005 fa99 	bl	80068fc <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 80013ca:	4b6e      	ldr	r3, [pc, #440]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80013cc:	795b      	ldrb	r3, [r3, #5]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b6c      	ldr	r3, [pc, #432]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80013d4:	799b      	ldrb	r3, [r3, #6]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 80013e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80013e4:	f240 2302 	movw	r3, #514	; 0x202
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f000 8131 	beq.w	8001650 <HAL_UARTEx_RxEventCallback+0x2ac>
 80013ee:	f240 2302 	movw	r3, #514	; 0x202
 80013f2:	429a      	cmp	r2, r3
 80013f4:	f300 8189 	bgt.w	800170a <HAL_UARTEx_RxEventCallback+0x366>
 80013f8:	2a01      	cmp	r2, #1
 80013fa:	d005      	beq.n	8001408 <HAL_UARTEx_RxEventCallback+0x64>
 80013fc:	f240 2301 	movw	r3, #513	; 0x201
 8001400:	429a      	cmp	r2, r3
 8001402:	f000 80c3 	beq.w	800158c <HAL_UARTEx_RxEventCallback+0x1e8>
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];

		    }
		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 8001406:	e180      	b.n	800170a <HAL_UARTEx_RxEventCallback+0x366>
		    	game_status.game_type = RxBuff_2[7];
 8001408:	4b5e      	ldr	r3, [pc, #376]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800140a:	79db      	ldrb	r3, [r3, #7]
 800140c:	4a5e      	ldr	r2, [pc, #376]	; (8001588 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800140e:	7013      	strb	r3, [r2, #0]
		    	game_status.game_progress = RxBuff_2[8];
 8001410:	4b5c      	ldr	r3, [pc, #368]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001412:	7a1b      	ldrb	r3, [r3, #8]
 8001414:	4a5c      	ldr	r2, [pc, #368]	; (8001588 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001416:	7053      	strb	r3, [r2, #1]
		    	game_status.stage_remain_time = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 8001418:	4b5a      	ldr	r3, [pc, #360]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800141a:	7a5b      	ldrb	r3, [r3, #9]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21a      	sxth	r2, r3
 8001420:	4b58      	ldr	r3, [pc, #352]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001422:	7a9b      	ldrb	r3, [r3, #10]
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21b      	sxth	r3, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	4a56      	ldr	r2, [pc, #344]	; (8001588 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800142e:	8053      	strh	r3, [r2, #2]
		    		((uint64_t) RxBuff_2[11] << 56) |
 8001430:	4b54      	ldr	r3, [pc, #336]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001432:	7adb      	ldrb	r3, [r3, #11]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2200      	movs	r2, #0
 8001438:	663b      	str	r3, [r7, #96]	; 0x60
 800143a:	667a      	str	r2, [r7, #100]	; 0x64
 800143c:	f04f 0000 	mov.w	r0, #0
 8001440:	f04f 0100 	mov.w	r1, #0
 8001444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001446:	0619      	lsls	r1, r3, #24
 8001448:	2000      	movs	r0, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 800144a:	4b4e      	ldr	r3, [pc, #312]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800144c:	7b1b      	ldrb	r3, [r3, #12]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2200      	movs	r2, #0
 8001452:	65bb      	str	r3, [r7, #88]	; 0x58
 8001454:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8001460:	0433      	lsls	r3, r6, #16
 8001462:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[11] << 56) |
 8001464:	ea40 0402 	orr.w	r4, r0, r2
 8001468:	ea41 0503 	orr.w	r5, r1, r3
		    		((uint64_t) RxBuff_2[13] << 40) |
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800146e:	7b5b      	ldrb	r3, [r3, #13]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2200      	movs	r2, #0
 8001474:	653b      	str	r3, [r7, #80]	; 0x50
 8001476:	657a      	str	r2, [r7, #84]	; 0x54
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001482:	020b      	lsls	r3, r1, #8
 8001484:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 8001486:	ea44 0802 	orr.w	r8, r4, r2
 800148a:	ea45 0903 	orr.w	r9, r5, r3
		    		((uint64_t) RxBuff_2[14] << 32) |
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001490:	7b9b      	ldrb	r3, [r3, #14]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2200      	movs	r2, #0
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
 8001498:	64fa      	str	r2, [r7, #76]	; 0x4c
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80014a4:	000b      	movs	r3, r1
 80014a6:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[13] << 40) |
 80014a8:	ea48 0102 	orr.w	r1, r8, r2
 80014ac:	6439      	str	r1, [r7, #64]	; 0x40
 80014ae:	ea49 0303 	orr.w	r3, r9, r3
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
		    		((uint64_t) RxBuff_2[15] << 24) |
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80014b6:	7bdb      	ldrb	r3, [r3, #15]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80014be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80014c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80014c4:	460b      	mov	r3, r1
 80014c6:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 80014ca:	460b      	mov	r3, r1
 80014cc:	ea4f 6a03 	mov.w	sl, r3, lsl #24
		    		((uint64_t) RxBuff_2[14] << 32) |
 80014d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80014d4:	460b      	mov	r3, r1
 80014d6:	ea43 030a 	orr.w	r3, r3, sl
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
 80014dc:	4613      	mov	r3, r2
 80014de:	ea43 030b 	orr.w	r3, r3, fp
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
		    		((uint64_t) RxBuff_2[16] << 16) |
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80014e6:	7c1b      	ldrb	r3, [r3, #16]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2200      	movs	r2, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80014fc:	4629      	mov	r1, r5
 80014fe:	040b      	lsls	r3, r1, #16
 8001500:	4621      	mov	r1, r4
 8001502:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001506:	4621      	mov	r1, r4
 8001508:	040a      	lsls	r2, r1, #16
		    		((uint64_t) RxBuff_2[15] << 24) |
 800150a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800150e:	4621      	mov	r1, r4
 8001510:	4311      	orrs	r1, r2
 8001512:	6239      	str	r1, [r7, #32]
 8001514:	4629      	mov	r1, r5
 8001516:	4319      	orrs	r1, r3
 8001518:	6279      	str	r1, [r7, #36]	; 0x24
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800151c:	7c5b      	ldrb	r3, [r3, #17]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2200      	movs	r2, #0
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	61fa      	str	r2, [r7, #28]
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001532:	4629      	mov	r1, r5
 8001534:	020b      	lsls	r3, r1, #8
 8001536:	4621      	mov	r1, r4
 8001538:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800153c:	4621      	mov	r1, r4
 800153e:	020a      	lsls	r2, r1, #8
		    		((uint64_t) RxBuff_2[16] << 16) |
 8001540:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001544:	4621      	mov	r1, r4
 8001546:	4311      	orrs	r1, r2
 8001548:	6139      	str	r1, [r7, #16]
 800154a:	4629      	mov	r1, r5
 800154c:	4319      	orrs	r1, r3
 800154e:	6179      	str	r1, [r7, #20]
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001552:	7c9b      	ldrb	r3, [r3, #18]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2200      	movs	r2, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	60fa      	str	r2, [r7, #12]
 800155c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001560:	4623      	mov	r3, r4
 8001562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001566:	4602      	mov	r2, r0
 8001568:	4313      	orrs	r3, r2
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	462b      	mov	r3, r5
 800156e:	460a      	mov	r2, r1
 8001570:	4313      	orrs	r3, r2
 8001572:	607b      	str	r3, [r7, #4]
		    	game_status.SyncTimeStamp =
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001576:	e9d7 1200 	ldrd	r1, r2, [r7]
 800157a:	e9c3 1202 	strd	r1, r2, [r3, #8]
		    	break;
 800157e:	e0c5      	b.n	800170c <HAL_UARTEx_RxEventCallback+0x368>
 8001580:	20000858 	.word	0x20000858
 8001584:	20000418 	.word	0x20000418
 8001588:	20000518 	.word	0x20000518
		    	robot_status.robot_id = RxBuff_2[7];
 800158c:	4b62      	ldr	r3, [pc, #392]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 800158e:	79da      	ldrb	r2, [r3, #7]
 8001590:	4b62      	ldr	r3, [pc, #392]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 8001592:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_level = RxBuff_2[8];
 8001594:	4b60      	ldr	r3, [pc, #384]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001596:	7a1a      	ldrb	r2, [r3, #8]
 8001598:	4b60      	ldr	r3, [pc, #384]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 800159a:	705a      	strb	r2, [r3, #1]
		    	robot_status.current_HP = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 800159c:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 800159e:	7a5b      	ldrb	r3, [r3, #9]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80015a6:	7a9b      	ldrb	r3, [r3, #10]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b5a      	ldr	r3, [pc, #360]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 80015b2:	805a      	strh	r2, [r3, #2]
		    	robot_status.maximum_HP = ((uint16_t) RxBuff_2[11] << 8) | RxBuff_2[12];
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80015b6:	7adb      	ldrb	r3, [r3, #11]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80015be:	7b1b      	ldrb	r3, [r3, #12]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b54      	ldr	r3, [pc, #336]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 80015ca:	809a      	strh	r2, [r3, #4]
		    	robot_status.shooter_barrel_cooling_value = ((uint16_t) RxBuff_2[13] << 8) | RxBuff_2[14];
 80015cc:	4b52      	ldr	r3, [pc, #328]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80015ce:	7b5b      	ldrb	r3, [r3, #13]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80015d6:	7b9b      	ldrb	r3, [r3, #14]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b4e      	ldr	r3, [pc, #312]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 80015e2:	80da      	strh	r2, [r3, #6]
		    	robot_status.shooter_barrel_heat_limit = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 80015e4:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80015e6:	7bdb      	ldrb	r3, [r3, #15]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80015ee:	7c1b      	ldrb	r3, [r3, #16]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b48      	ldr	r3, [pc, #288]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 80015fa:	811a      	strh	r2, [r3, #8]
		    	robot_status.chassis_power_limit = ((uint16_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 80015fc:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80015fe:	7c5b      	ldrb	r3, [r3, #17]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001606:	7c9b      	ldrb	r3, [r3, #18]
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21b      	sxth	r3, r3
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 8001612:	815a      	strh	r2, [r3, #10]
		    	robot_status.power_management_gimbal_output = RxBuff_2[19];
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001616:	7cdb      	ldrb	r3, [r3, #19]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	b2d9      	uxtb	r1, r3
 800161e:	4a3f      	ldr	r2, [pc, #252]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 8001620:	7b13      	ldrb	r3, [r2, #12]
 8001622:	f361 0300 	bfi	r3, r1, #0, #1
 8001626:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_chassis_output = RxBuff_2[20];
 8001628:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 800162a:	7d1b      	ldrb	r3, [r3, #20]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	b2d9      	uxtb	r1, r3
 8001632:	4a3a      	ldr	r2, [pc, #232]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 8001634:	7b13      	ldrb	r3, [r2, #12]
 8001636:	f361 0341 	bfi	r3, r1, #1, #1
 800163a:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_shooter_output = RxBuff_2[21];
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 800163e:	7d5b      	ldrb	r3, [r3, #21]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	b2d9      	uxtb	r1, r3
 8001646:	4a35      	ldr	r2, [pc, #212]	; (800171c <HAL_UARTEx_RxEventCallback+0x378>)
 8001648:	7b13      	ldrb	r3, [r2, #12]
 800164a:	f361 0382 	bfi	r3, r1, #2, #1
 800164e:	7313      	strb	r3, [r2, #12]
		    	power_heat_data.chassis_voltage = ((uint16_t) RxBuff_2[8] << 8) | RxBuff_2[7];
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001652:	7a1b      	ldrb	r3, [r3, #8]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 800165a:	79db      	ldrb	r3, [r3, #7]
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_UARTEx_RxEventCallback+0x37c>)
 8001666:	801a      	strh	r2, [r3, #0]
		    	power_heat_data.chassis_current = ((uint16_t) RxBuff_2[10] << 8) | RxBuff_2[9];
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 800166a:	7a9b      	ldrb	r3, [r3, #10]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b21a      	sxth	r2, r3
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001672:	7a5b      	ldrb	r3, [r3, #9]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21b      	sxth	r3, r3
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <HAL_UARTEx_RxEventCallback+0x37c>)
 800167e:	805a      	strh	r2, [r3, #2]
		    	power_heat_data.chassis_power = ((uint32_t) RxBuff_2[14] << 24) | ((uint32_t) RxBuff_2[13] << 16) | ((uint32_t) RxBuff_2[12] << 8) | RxBuff_2[11];
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001682:	7b9b      	ldrb	r3, [r3, #14]
 8001684:	061a      	lsls	r2, r3, #24
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001688:	7b5b      	ldrb	r3, [r3, #13]
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	431a      	orrs	r2, r3
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001690:	7b1b      	ldrb	r3, [r3, #12]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	4313      	orrs	r3, r2
 8001696:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 8001698:	7ad2      	ldrb	r2, [r2, #11]
 800169a:	4313      	orrs	r3, r2
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_UARTEx_RxEventCallback+0x37c>)
 80016a6:	edc3 7a01 	vstr	s15, [r3, #4]
		    	power_heat_data.buffer_energy = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80016ac:	7bdb      	ldrb	r3, [r3, #15]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80016b4:	7c1b      	ldrb	r3, [r3, #16]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_UARTEx_RxEventCallback+0x37c>)
 80016c0:	811a      	strh	r2, [r3, #8]
		    	power_heat_data.shooter_17mm_1_barrel_heat = ((uint16_t) RxBuff_2[18] << 8) | RxBuff_2[17];
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80016c4:	7c9b      	ldrb	r3, [r3, #18]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80016cc:	7c5b      	ldrb	r3, [r3, #17]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_UARTEx_RxEventCallback+0x37c>)
 80016d8:	815a      	strh	r2, [r3, #10]
		    	power_heat_data.shooter_17mm_2_barrel_heat = ((uint16_t) RxBuff_2[20] << 8) | RxBuff_2[19];
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80016dc:	7d1b      	ldrb	r3, [r3, #20]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80016e4:	7cdb      	ldrb	r3, [r3, #19]
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_UARTEx_RxEventCallback+0x37c>)
 80016f0:	819a      	strh	r2, [r3, #12]
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80016f4:	7d9b      	ldrb	r3, [r3, #22]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <HAL_UARTEx_RxEventCallback+0x374>)
 80016fc:	7d5b      	ldrb	r3, [r3, #21]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_UARTEx_RxEventCallback+0x37c>)
 8001708:	81da      	strh	r2, [r3, #14]
		        break;
 800170a:	bf00      	nop
		    }
		}
	}
}
 800170c:	bf00      	nop
 800170e:	377c      	adds	r7, #124	; 0x7c
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001716:	bf00      	nop
 8001718:	20000418 	.word	0x20000418
 800171c:	20000538 	.word	0x20000538
 8001720:	20000528 	.word	0x20000528

08001724 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001732:	2301      	movs	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800174e:	463b      	mov	r3, r7
 8001750:	4619      	mov	r1, r3
 8001752:	480f      	ldr	r0, [pc, #60]	; (8001790 <can_filter_init+0x6c>)
 8001754:	f001 ff26 	bl	80035a4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <can_filter_init+0x6c>)
 800175a:	f002 f803 	bl	8003764 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800175e:	2102      	movs	r1, #2
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <can_filter_init+0x6c>)
 8001762:	f002 fa30 	bl	8003bc6 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8001766:	230e      	movs	r3, #14
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    can_filter_st.FilterBank = 14;
 800176a:	230e      	movs	r3, #14
 800176c:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <can_filter_init+0x70>)
 8001774:	f001 ff16 	bl	80035a4 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <can_filter_init+0x70>)
 800177a:	f001 fff3 	bl	8003764 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800177e:	2102      	movs	r1, #2
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <can_filter_init+0x70>)
 8001782:	f002 fa20 	bl	8003bc6 <HAL_CAN_ActivateNotification>
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000650 	.word	0x20000650
 8001794:	20000678 	.word	0x20000678

08001798 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	4613      	mov	r3, r2
 80017a4:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <RC_init+0xac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <RC_init+0xac>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b4:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <RC_init+0xac>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <RC_init+0xac>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0210 	orr.w	r2, r2, #16
 80017c4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <RC_init+0xb0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <RC_init+0xb0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80017d6:	e007      	b.n	80017e8 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <RC_init+0xb0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <RC_init+0xb0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <RC_init+0xb0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <RC_init+0xb0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <RC_init+0xb4>)
 80017fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <RC_init+0xb0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <RC_init+0xb0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <RC_init+0xb0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <RC_init+0xb0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <RC_init+0xb0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001824:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <RC_init+0xb0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <RC_init+0xb0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000814 	.word	0x20000814
 8001848:	2000095c 	.word	0x2000095c
 800184c:	40004804 	.word	0x40004804

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001854:	f001 fd38 	bl	80032c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001858:	f000 f844 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185c:	f000 fbda 	bl	8002014 <MX_GPIO_Init>
  MX_DMA_Init();
 8001860:	f000 fb8a 	bl	8001f78 <MX_DMA_Init>
  MX_CAN1_Init();
 8001864:	f000 f8aa 	bl	80019bc <MX_CAN1_Init>
  MX_CAN2_Init();
 8001868:	f000 f8de 	bl	8001a28 <MX_CAN2_Init>
  MX_SPI1_Init();
 800186c:	f000 f912 	bl	8001a94 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001870:	f000 f9ee 	bl	8001c50 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001874:	f000 fb00 	bl	8001e78 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001878:	f000 fb54 	bl	8001f24 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800187c:	f000 f940 	bl	8001b00 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001880:	f000 fa5e 	bl	8001d40 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001884:	f000 fb22 	bl	8001ecc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8001888:	f7ff ff4c 	bl	8001724 <can_filter_init>
  remote_control_init();
 800188c:	f000 fd84 	bl	8002398 <remote_control_init>
  usart_Init();
 8001890:	f7ff fd4a 	bl	8001328 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8001894:	f000 fd8e 	bl	80023b4 <get_remote_control_point>
 8001898:	4603      	mov	r3, r0
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <main+0x78>)
 800189c:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800189e:	f006 f9af 	bl	8007c00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <main+0x7c>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <main+0x80>)
 80018a8:	f006 f9f4 	bl	8007c94 <osThreadNew>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <main+0x84>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <main+0x88>)
 80018b4:	2100      	movs	r1, #0
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <main+0x8c>)
 80018b8:	f006 f9ec 	bl	8007c94 <osThreadNew>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <main+0x90>)
 80018c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018c2:	f006 f9c1 	bl	8007c48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <main+0x76>
 80018c8:	20000a84 	.word	0x20000a84
 80018cc:	0800d500 	.word	0x0800d500
 80018d0:	08002169 	.word	0x08002169
 80018d4:	20000a7c 	.word	0x20000a7c
 80018d8:	0800d524 	.word	0x0800d524
 80018dc:	080021e1 	.word	0x080021e1
 80018e0:	20000a80 	.word	0x20000a80

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	; 0x50
 80018e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	2230      	movs	r2, #48	; 0x30
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f009 fc4a 	bl	800b18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <SystemClock_Config+0xd0>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <SystemClock_Config+0xd0>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <SystemClock_Config+0xd0>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <SystemClock_Config+0xd4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <SystemClock_Config+0xd4>)
 800192e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <SystemClock_Config+0xd4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001940:	2301      	movs	r3, #1
 8001942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194a:	2302      	movs	r3, #2
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001954:	2306      	movs	r3, #6
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001958:	23a8      	movs	r3, #168	; 0xa8
 800195a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800195c:	2302      	movs	r3, #2
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001960:	2304      	movs	r3, #4
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fa4b 	bl	8004e04 <HAL_RCC_OscConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001974:	f000 fd0a 	bl	800238c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001978:	230f      	movs	r3, #15
 800197a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197c:	2302      	movs	r3, #2
 800197e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001984:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2105      	movs	r1, #5
 8001996:	4618      	mov	r0, r3
 8001998:	f003 fcac 	bl	80052f4 <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019a2:	f000 fcf3 	bl	800238c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80019a6:	f003 fd8b 	bl	80054c0 <HAL_RCC_EnableCSS>
}
 80019aa:	bf00      	nop
 80019ac:	3750      	adds	r7, #80	; 0x50
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <MX_CAN1_Init+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019c8:	2203      	movs	r2, #3
 80019ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019da:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80019de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_CAN1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_CAN1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_CAN1_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_CAN1_Init+0x64>)
 8001a0e:	f001 fccd 	bl	80033ac <HAL_CAN_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001a18:	f000 fcb8 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000650 	.word	0x20000650
 8001a24:	40006400 	.word	0x40006400

08001a28 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <MX_CAN2_Init+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a34:	2203      	movs	r2, #3
 8001a36:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a46:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001a4a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a52:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_CAN2_Init+0x64>)
 8001a7a:	f001 fc97 	bl	80033ac <HAL_CAN_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001a84:	f000 fc82 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000678 	.word	0x20000678
 8001a90:	40006800 	.word	0x40006800

08001a94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <MX_SPI1_Init+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001ae0:	220a      	movs	r2, #10
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_SPI1_Init+0x64>)
 8001ae6:	f003 fe0c 	bl	8005702 <HAL_SPI_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001af0:	f000 fc4c 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200006a0 	.word	0x200006a0
 8001afc:	40013000 	.word	0x40013000

08001b00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b092      	sub	sp, #72	; 0x48
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	615a      	str	r2, [r3, #20]
 8001b22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2220      	movs	r2, #32
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f009 fb2e 	bl	800b18c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b30:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b32:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <MX_TIM1_Init+0x14c>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b38:	2253      	movs	r2, #83	; 0x53
 8001b3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b42      	ldr	r3, [pc, #264]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b44:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b50:	4b3d      	ldr	r3, [pc, #244]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b3c      	ldr	r3, [pc, #240]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b5c:	483a      	ldr	r0, [pc, #232]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b5e:	f003 ff11 	bl	8005984 <HAL_TIM_PWM_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b68:	f000 fc10 	bl	800238c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4833      	ldr	r0, [pc, #204]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001b7c:	f004 fd24 	bl	80065c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b86:	f000 fc01 	bl	800238c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8a:	2360      	movs	r3, #96	; 0x60
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	4826      	ldr	r0, [pc, #152]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001bb0:	f004 f870 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001bba:	f000 fbe7 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4820      	ldr	r0, [pc, #128]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001bc8:	f004 f864 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001bd2:	f000 fbdb 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	2208      	movs	r2, #8
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481a      	ldr	r0, [pc, #104]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001be0:	f004 f858 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001bea:	f000 fbcf 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001bf8:	f004 f84c 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001c02:	f000 fbc3 	bl	800238c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001c2a:	f004 fd49 	bl	80066c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001c34:	f000 fbaa 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM1_Init+0x148>)
 8001c3a:	f000 ff23 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8001c3e:	bf00      	nop
 8001c40:	3748      	adds	r7, #72	; 0x48
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200006f8 	.word	0x200006f8
 8001c4c:	40010000 	.word	0x40010000

08001c50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08e      	sub	sp, #56	; 0x38
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	615a      	str	r2, [r3, #20]
 8001c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001c82:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <MX_TIM4_Init+0xec>)
 8001c84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001c94:	f245 2207 	movw	r2, #20999	; 0x5207
 8001c98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ca6:	4824      	ldr	r0, [pc, #144]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001ca8:	f003 fdb4 	bl	8005814 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001cb2:	f000 fb6b 	bl	800238c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	481d      	ldr	r0, [pc, #116]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001cc4:	f004 f8a8 	bl	8005e18 <HAL_TIM_ConfigClockSource>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001cce:	f000 fb5d 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001cd4:	f003 fe56 	bl	8005984 <HAL_TIM_PWM_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001cde:	f000 fb55 	bl	800238c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4811      	ldr	r0, [pc, #68]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001cf2:	f004 fc69 	bl	80065c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001cfc:	f000 fb46 	bl	800238c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8001d04:	f642 1303 	movw	r3, #10499	; 0x2903
 8001d08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2208      	movs	r2, #8
 8001d16:	4619      	mov	r1, r3
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001d1a:	f003 ffbb 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001d24:	f000 fb32 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <MX_TIM4_Init+0xe8>)
 8001d2a:	f000 feab 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8001d2e:	bf00      	nop
 8001d30:	3738      	adds	r7, #56	; 0x38
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000740 	.word	0x20000740
 8001d3c:	40000800 	.word	0x40000800

08001d40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b092      	sub	sp, #72	; 0x48
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2220      	movs	r2, #32
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f009 fa0e 	bl	800b18c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d70:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001d72:	4a40      	ldr	r2, [pc, #256]	; (8001e74 <MX_TIM8_Init+0x134>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8001d76:	4b3e      	ldr	r3, [pc, #248]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001d78:	2253      	movs	r2, #83	; 0x53
 8001d7a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001d84:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d90:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d9c:	4834      	ldr	r0, [pc, #208]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001d9e:	f003 fdf1 	bl	8005984 <HAL_TIM_PWM_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001da8:	f000 faf0 	bl	800238c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001db4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001db8:	4619      	mov	r1, r3
 8001dba:	482d      	ldr	r0, [pc, #180]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001dbc:	f004 fc04 	bl	80065c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001dc6:	f000 fae1 	bl	800238c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dca:	2360      	movs	r3, #96	; 0x60
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	2200      	movs	r2, #0
 8001dec:	4619      	mov	r1, r3
 8001dee:	4820      	ldr	r0, [pc, #128]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001df0:	f003 ff50 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001dfa:	f000 fac7 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	2204      	movs	r2, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	481a      	ldr	r0, [pc, #104]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001e08:	f003 ff44 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001e12:	f000 fabb 	bl	800238c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4814      	ldr	r0, [pc, #80]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001e20:	f003 ff38 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8001e2a:	f000 faaf 	bl	800238c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4807      	ldr	r0, [pc, #28]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001e52:	f004 fc35 	bl	80066c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8001e5c:	f000 fa96 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <MX_TIM8_Init+0x130>)
 8001e62:	f000 fe0f 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8001e66:	bf00      	nop
 8001e68:	3748      	adds	r7, #72	; 0x48
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000788 	.word	0x20000788
 8001e74:	40010400 	.word	0x40010400

08001e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART1_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	f004 fc58 	bl	8006764 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eba:	f000 fa67 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200007d0 	.word	0x200007d0
 8001ec8:	40011000 	.word	0x40011000

08001ecc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART3_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ed8:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <MX_USART3_UART_Init+0x54>)
 8001eda:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001f04:	f004 fc2e 	bl	8006764 <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f000 fa3d 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000814 	.word	0x20000814
 8001f1c:	40004800 	.word	0x40004800
 8001f20:	000186a0 	.word	0x000186a0

08001f24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <MX_USART6_UART_Init+0x50>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f5c:	f004 fc02 	bl	8006764 <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f66:	f000 fa11 	bl	800238c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000858 	.word	0x20000858
 8001f74:	40011400 	.word	0x40011400

08001f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <MX_DMA_Init+0x98>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a22      	ldr	r2, [pc, #136]	; (8002010 <MX_DMA_Init+0x98>)
 8001f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <MX_DMA_Init+0x98>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <MX_DMA_Init+0x98>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <MX_DMA_Init+0x98>)
 8001fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <MX_DMA_Init+0x98>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	200c      	movs	r0, #12
 8001fbc:	f002 f933 	bl	8004226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fc0:	200c      	movs	r0, #12
 8001fc2:	f002 f94c 	bl	800425e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2105      	movs	r1, #5
 8001fca:	2039      	movs	r0, #57	; 0x39
 8001fcc:	f002 f92b 	bl	8004226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001fd0:	2039      	movs	r0, #57	; 0x39
 8001fd2:	f002 f944 	bl	800425e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	203a      	movs	r0, #58	; 0x3a
 8001fdc:	f002 f923 	bl	8004226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001fe0:	203a      	movs	r0, #58	; 0x3a
 8001fe2:	f002 f93c 	bl	800425e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2105      	movs	r1, #5
 8001fea:	2045      	movs	r0, #69	; 0x45
 8001fec:	f002 f91b 	bl	8004226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001ff0:	2045      	movs	r0, #69	; 0x45
 8001ff2:	f002 f934 	bl	800425e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	2046      	movs	r0, #70	; 0x46
 8001ffc:	f002 f913 	bl	8004226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002000:	2046      	movs	r0, #70	; 0x46
 8002002:	f002 f92c 	bl	800425e <HAL_NVIC_EnableIRQ>

}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	; 0x38
 8002018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
 800202e:	4b4b      	ldr	r3, [pc, #300]	; (800215c <MX_GPIO_Init+0x148>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a4a      	ldr	r2, [pc, #296]	; (800215c <MX_GPIO_Init+0x148>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <MX_GPIO_Init+0x148>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	623b      	str	r3, [r7, #32]
 8002044:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	4b44      	ldr	r3, [pc, #272]	; (800215c <MX_GPIO_Init+0x148>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a43      	ldr	r2, [pc, #268]	; (800215c <MX_GPIO_Init+0x148>)
 8002050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <MX_GPIO_Init+0x148>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <MX_GPIO_Init+0x148>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a3c      	ldr	r2, [pc, #240]	; (800215c <MX_GPIO_Init+0x148>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <MX_GPIO_Init+0x148>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <MX_GPIO_Init+0x148>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a35      	ldr	r2, [pc, #212]	; (800215c <MX_GPIO_Init+0x148>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <MX_GPIO_Init+0x148>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <MX_GPIO_Init+0x148>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a2e      	ldr	r2, [pc, #184]	; (800215c <MX_GPIO_Init+0x148>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <MX_GPIO_Init+0x148>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <MX_GPIO_Init+0x148>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a27      	ldr	r2, [pc, #156]	; (800215c <MX_GPIO_Init+0x148>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <MX_GPIO_Init+0x148>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <MX_GPIO_Init+0x148>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <MX_GPIO_Init+0x148>)
 80020dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <MX_GPIO_Init+0x148>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <MX_GPIO_Init+0x148>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a19      	ldr	r2, [pc, #100]	; (800215c <MX_GPIO_Init+0x148>)
 80020f8:	f043 0310 	orr.w	r3, r3, #16
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_GPIO_Init+0x148>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002110:	4813      	ldr	r0, [pc, #76]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002112:	f002 fe5d 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8002116:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	480c      	ldr	r0, [pc, #48]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002130:	f002 fcb2 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002134:	2330      	movs	r3, #48	; 0x30
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 8002144:	230f      	movs	r3, #15
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_GPIO_Init+0x150>)
 8002150:	f002 fca2 	bl	8004a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002154:	bf00      	nop
 8002156:	3738      	adds	r7, #56	; 0x38
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	40021c00 	.word	0x40021c00
 8002164:	40020800 	.word	0x40020800

08002168 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 8002170:	2201      	movs	r2, #1
 8002172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002176:	4818      	ldr	r0, [pc, #96]	; (80021d8 <TaskMain+0x70>)
 8002178:	f002 fe2a 	bl	8004dd0 <HAL_GPIO_WritePin>
	__HAL_TIM_PRESCALER(&htim4, 2);
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <TaskMain+0x74>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2202      	movs	r2, #2
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002184:	2108      	movs	r1, #8
 8002186:	4815      	ldr	r0, [pc, #84]	; (80021dc <TaskMain+0x74>)
 8002188:	f003 fc4c 	bl	8005a24 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim4);
 800218c:	4813      	ldr	r0, [pc, #76]	; (80021dc <TaskMain+0x74>)
 800218e:	f003 fb91 	bl	80058b4 <HAL_TIM_Base_Start>
	osDelay(150);
 8002192:	2096      	movs	r0, #150	; 0x96
 8002194:	f005 fe10 	bl	8007db8 <osDelay>
	__HAL_TIM_PRESCALER(&htim4, 0);
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <TaskMain+0x74>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
	osDelay(150);
 80021a0:	2096      	movs	r0, #150	; 0x96
 80021a2:	f005 fe09 	bl	8007db8 <osDelay>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80021a6:	2108      	movs	r1, #8
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <TaskMain+0x74>)
 80021aa:	f003 fd03 	bl	8005bb4 <HAL_TIM_PWM_Stop>

	for(;;) {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <TaskMain+0x70>)
 80021b6:	f002 fe0b 	bl	8004dd0 <HAL_GPIO_WritePin>
		osDelay(500);
 80021ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021be:	f005 fdfb 	bl	8007db8 <osDelay>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <TaskMain+0x70>)
 80021ca:	f002 fe01 	bl	8004dd0 <HAL_GPIO_WritePin>
		osDelay(500);
 80021ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021d2:	f005 fdf1 	bl	8007db8 <osDelay>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 0);
 80021d6:	e7ea      	b.n	80021ae <TaskMain+0x46>
 80021d8:	40021c00 	.word	0x40021c00
 80021dc:	20000740 	.word	0x20000740

080021e0 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b096      	sub	sp, #88	; 0x58
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 80021e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
    char txbuf[64];
  /* Infinite loop */
    for(;;) {
	    for (int i = 0; i < 4; i++) {
 80021f2:	2300      	movs	r3, #0
 80021f4:	657b      	str	r3, [r7, #84]	; 0x54
 80021f6:	e01b      	b.n	8002230 <TaskChassis+0x50>
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 80021f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021fa:	b25b      	sxtb	r3, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fa8f 	bl	8002720 <getRCchannel>
 8002202:	4603      	mov	r3, r0
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002374 <TaskChassis+0x194>
 8002210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002218:	ee17 3a90 	vmov	r3, s15
 800221c:	b21a      	sxth	r2, r3
 800221e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	3358      	adds	r3, #88	; 0x58
 8002224:	443b      	add	r3, r7
 8002226:	f823 2c0c 	strh.w	r2, [r3, #-12]
	    for (int i = 0; i < 4; i++) {
 800222a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222c:	3301      	adds	r3, #1
 800222e:	657b      	str	r3, [r7, #84]	; 0x54
 8002230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002232:	2b03      	cmp	r3, #3
 8002234:	dde0      	ble.n	80021f8 <TaskChassis+0x18>
	    }
	    setMotorRPM(1, rcRPM[3] + rcRPM[0] + rcRPM[2], chassisPreset);
 8002236:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800223a:	b29a      	uxth	r2, r3
 800223c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002240:	b29b      	uxth	r3, r3
 8002242:	4413      	add	r3, r2
 8002244:	b29a      	uxth	r2, r3
 8002246:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800224a:	b29b      	uxth	r3, r3
 800224c:	4413      	add	r3, r2
 800224e:	b29b      	uxth	r3, r3
 8002250:	b21a      	sxth	r2, r3
 8002252:	4b49      	ldr	r3, [pc, #292]	; (8002378 <TaskChassis+0x198>)
 8002254:	edd3 6a00 	vldr	s13, [r3]
 8002258:	ed93 7a01 	vldr	s14, [r3, #4]
 800225c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002260:	eeb0 0a66 	vmov.f32	s0, s13
 8002264:	eef0 0a47 	vmov.f32	s1, s14
 8002268:	eeb0 1a67 	vmov.f32	s2, s15
 800226c:	4611      	mov	r1, r2
 800226e:	2001      	movs	r0, #1
 8002270:	f7ff f820 	bl	80012b4 <setMotorRPM>
	    setMotorRPM(2, rcRPM[3] + rcRPM[0] - rcRPM[2], chassisPreset);
 8002274:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002278:	b29a      	uxth	r2, r3
 800227a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800227e:	b29b      	uxth	r3, r3
 8002280:	4413      	add	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002288:	b29b      	uxth	r3, r3
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	b29b      	uxth	r3, r3
 800228e:	b21a      	sxth	r2, r3
 8002290:	4b39      	ldr	r3, [pc, #228]	; (8002378 <TaskChassis+0x198>)
 8002292:	edd3 6a00 	vldr	s13, [r3]
 8002296:	ed93 7a01 	vldr	s14, [r3, #4]
 800229a:	edd3 7a02 	vldr	s15, [r3, #8]
 800229e:	eeb0 0a66 	vmov.f32	s0, s13
 80022a2:	eef0 0a47 	vmov.f32	s1, s14
 80022a6:	eeb0 1a67 	vmov.f32	s2, s15
 80022aa:	4611      	mov	r1, r2
 80022ac:	2002      	movs	r0, #2
 80022ae:	f7ff f801 	bl	80012b4 <setMotorRPM>
	    setMotorRPM(3, -rcRPM[3] + rcRPM[0] - rcRPM[2], chassisPreset);
 80022b2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80022bc:	b29b      	uxth	r3, r3
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b21a      	sxth	r2, r3
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <TaskChassis+0x198>)
 80022d0:	edd3 6a00 	vldr	s13, [r3]
 80022d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80022d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80022dc:	eeb0 0a66 	vmov.f32	s0, s13
 80022e0:	eef0 0a47 	vmov.f32	s1, s14
 80022e4:	eeb0 1a67 	vmov.f32	s2, s15
 80022e8:	4611      	mov	r1, r2
 80022ea:	2003      	movs	r0, #3
 80022ec:	f7fe ffe2 	bl	80012b4 <setMotorRPM>
	    setMotorRPM(4, -rcRPM[3] + rcRPM[0] + rcRPM[2], chassisPreset);
 80022f0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002304:	b29b      	uxth	r3, r3
 8002306:	4413      	add	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	b21a      	sxth	r2, r3
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <TaskChassis+0x198>)
 800230e:	edd3 6a00 	vldr	s13, [r3]
 8002312:	ed93 7a01 	vldr	s14, [r3, #4]
 8002316:	edd3 7a02 	vldr	s15, [r3, #8]
 800231a:	eeb0 0a66 	vmov.f32	s0, s13
 800231e:	eef0 0a47 	vmov.f32	s1, s14
 8002322:	eeb0 1a67 	vmov.f32	s2, s15
 8002326:	4611      	mov	r1, r2
 8002328:	2004      	movs	r0, #4
 800232a:	f7fe ffc3 	bl	80012b4 <setMotorRPM>
	    selfCalcChassisPower = (float)power_heat_data.chassis_voltage * (float)power_heat_data.chassis_current / (float)1000000;
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <TaskChassis+0x19c>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <TaskChassis+0x19c>)
 800233c:	885b      	ldrh	r3, [r3, #2]
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002380 <TaskChassis+0x1a0>
 800234e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <TaskChassis+0x1a4>)
 8002354:	edc3 7a00 	vstr	s15, [r3]
	    //usart_printf("%d\r\n", getRCchannel(1, local_rc_ctrl));
	    //usart_printRC();
	    //sprintf((char*)txbuf, "%f \r\n", power_heat_data.chassis_power);
	    //HAL_UART_Transmit(&huart1, txbuf, strlen((char*)txbuf), HAL_MAX_DELAY);
	    //txbuf = *((float*)&power_heat_data.chassis_power);
	    usart_printf("%.3f\r\n", selfCalcChassisPower);
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <TaskChassis+0x1a4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f8f3 	bl	8000548 <__aeabi_f2d>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4808      	ldr	r0, [pc, #32]	; (8002388 <TaskChassis+0x1a8>)
 8002368:	f7fe fff6 	bl	8001358 <usart_printf>
        osDelay(5);
 800236c:	2005      	movs	r0, #5
 800236e:	f005 fd23 	bl	8007db8 <osDelay>
	    for (int i = 0; i < 4; i++) {
 8002372:	e73e      	b.n	80021f2 <TaskChassis+0x12>
 8002374:	415a51ec 	.word	0x415a51ec
 8002378:	20000000 	.word	0x20000000
 800237c:	20000528 	.word	0x20000528
 8002380:	49742400 	.word	0x49742400
 8002384:	20000a88 	.word	0x20000a88
 8002388:	0800d4e0 	.word	0x0800d4e0

0800238c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002390:	b672      	cpsid	i
}
 8002392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002394:	e7fe      	b.n	8002394 <Error_Handler+0x8>
	...

08002398 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 800239c:	2224      	movs	r2, #36	; 0x24
 800239e:	4903      	ldr	r1, [pc, #12]	; (80023ac <remote_control_init+0x14>)
 80023a0:	4803      	ldr	r0, [pc, #12]	; (80023b0 <remote_control_init+0x18>)
 80023a2:	f7ff f9f9 	bl	8001798 <RC_init>
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000ac8 	.word	0x20000ac8
 80023b0:	20000aa4 	.word	0x20000aa4

080023b4 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80023b8:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <get_remote_control_point+0x10>)
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	20000a8c 	.word	0x20000a8c

080023c8 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 80023ce:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <USART3_IRQHandler+0x118>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <USART3_IRQHandler+0x118>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <USART3_IRQHandler+0x118>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 80023f2:	e070      	b.n	80024d6 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 80023f4:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <USART3_IRQHandler+0x11c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d06a      	beq.n	80024d6 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8002400:	2300      	movs	r3, #0
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <USART3_IRQHandler+0x118>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <USART3_IRQHandler+0x118>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d12d      	bne.n	8002480 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002424:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <USART3_IRQHandler+0x120>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8002440:	b29a      	uxth	r2, r3
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <USART3_IRQHandler+0x124>)
 8002444:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8002446:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2224      	movs	r2, #36	; 0x24
 800244c:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800245c:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 800246e:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <USART3_IRQHandler+0x124>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	2b12      	cmp	r3, #18
 8002474:	d12f      	bne.n	80024d6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8002476:	491e      	ldr	r1, [pc, #120]	; (80024f0 <USART3_IRQHandler+0x128>)
 8002478:	481e      	ldr	r0, [pc, #120]	; (80024f4 <USART3_IRQHandler+0x12c>)
 800247a:	f000 f841 	bl	8002500 <sbus_to_rc>
}
 800247e:	e02a      	b.n	80024d6 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <USART3_IRQHandler+0x120>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800249c:	b29a      	uxth	r2, r3
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <USART3_IRQHandler+0x124>)
 80024a0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <USART3_IRQHandler+0x120>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <USART3_IRQHandler+0x130>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <USART3_IRQHandler+0x130>)
 80024b0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80024b4:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <USART3_IRQHandler+0x120>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <USART3_IRQHandler+0x120>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <USART3_IRQHandler+0x124>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d103      	bne.n	80024d6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80024ce:	4908      	ldr	r1, [pc, #32]	; (80024f0 <USART3_IRQHandler+0x128>)
 80024d0:	480a      	ldr	r0, [pc, #40]	; (80024fc <USART3_IRQHandler+0x134>)
 80024d2:	f000 f815 	bl	8002500 <sbus_to_rc>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000814 	.word	0x20000814
 80024e4:	40004800 	.word	0x40004800
 80024e8:	2000095c 	.word	0x2000095c
 80024ec:	20000aec 	.word	0x20000aec
 80024f0:	20000a8c 	.word	0x20000a8c
 80024f4:	20000aa4 	.word	0x20000aa4
 80024f8:	40026028 	.word	0x40026028
 80024fc:	20000ac8 	.word	0x20000ac8

08002500 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8101 	beq.w	8002714 <sbus_to_rc+0x214>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80fd 	beq.w	8002714 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	b21a      	sxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3301      	adds	r3, #1
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	b21b      	sxth	r3, r3
 800252e:	4313      	orrs	r3, r2
 8002530:	b21b      	sxth	r3, r3
 8002532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002536:	b21a      	sxth	r2, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3301      	adds	r3, #1
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	b21a      	sxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3302      	adds	r3, #2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	b21b      	sxth	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b21b      	sxth	r3, r3
 800255a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800255e:	b21a      	sxth	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3302      	adds	r3, #2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	b2db      	uxtb	r3, r3
 8002570:	b21a      	sxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3303      	adds	r3, #3
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	b21b      	sxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 800258c:	b21b      	sxth	r3, r3
 800258e:	4313      	orrs	r3, r2
 8002590:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8002592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002596:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3305      	adds	r3, #5
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	01db      	lsls	r3, r3, #7
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025be:	b21a      	sxth	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3305      	adds	r3, #5
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3305      	adds	r3, #5
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	109b      	asrs	r3, r3, #2
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3306      	adds	r3, #6
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	b21a      	sxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3307      	adds	r3, #7
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	b21b      	sxth	r3, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	b21a      	sxth	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3308      	adds	r3, #8
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	b21a      	sxth	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3309      	adds	r3, #9
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	b21b      	sxth	r3, r3
 8002628:	4313      	orrs	r3, r2
 800262a:	b21a      	sxth	r2, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	330a      	adds	r3, #10
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	b21a      	sxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	330b      	adds	r3, #11
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	b21a      	sxth	r2, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	330c      	adds	r3, #12
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	330d      	adds	r3, #13
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	330e      	adds	r3, #14
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	b21a      	sxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	330f      	adds	r3, #15
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	b21b      	sxth	r3, r3
 800267c:	4313      	orrs	r3, r2
 800267e:	b21b      	sxth	r3, r3
 8002680:	b29a      	uxth	r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3310      	adds	r3, #16
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	b21a      	sxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3311      	adds	r3, #17
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b21b      	sxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b21a      	sxth	r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026aa:	b21b      	sxth	r3, r3
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002702:	b21b      	sxth	r3, r3
 8002704:	b29b      	uxth	r3, r3
 8002706:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800270a:	b29b      	uxth	r3, r3
 800270c:	b21a      	sxth	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	811a      	strh	r2, [r3, #8]
 8002712:	e000      	b.n	8002716 <sbus_to_rc+0x216>
        return;
 8002714:	bf00      	nop
}
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <getRCchannel+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002732:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002736:	b21b      	sxth	r3, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	2000000c 	.word	0x2000000c

08002748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_MspInit+0x54>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_MspInit+0x54>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_MspInit+0x54>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_MspInit+0x54>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_MspInit+0x54>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_MspInit+0x54>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	210f      	movs	r1, #15
 800278a:	f06f 0001 	mvn.w	r0, #1
 800278e:	f001 fd4a 	bl	8004226 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800

080027a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a4a      	ldr	r2, [pc, #296]	; (80028e8 <HAL_CAN_MspInit+0x148>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d13d      	bne.n	800283e <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80027c2:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_CAN_MspInit+0x14c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	4a48      	ldr	r2, [pc, #288]	; (80028ec <HAL_CAN_MspInit+0x14c>)
 80027ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80027cc:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_CAN_MspInit+0x14c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d10d      	bne.n	80027f0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	4a44      	ldr	r2, [pc, #272]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 80027de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e2:	6413      	str	r3, [r2, #64]	; 0x40
 80027e4:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	4a3d      	ldr	r2, [pc, #244]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 80027fa:	f043 0308 	orr.w	r3, r3, #8
 80027fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800280c:	2303      	movs	r3, #3
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800281c:	2309      	movs	r3, #9
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	4833      	ldr	r0, [pc, #204]	; (80028f4 <HAL_CAN_MspInit+0x154>)
 8002828:	f002 f936 	bl	8004a98 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2105      	movs	r1, #5
 8002830:	2014      	movs	r0, #20
 8002832:	f001 fcf8 	bl	8004226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002836:	2014      	movs	r0, #20
 8002838:	f001 fd11 	bl	800425e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800283c:	e04f      	b.n	80028de <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <HAL_CAN_MspInit+0x158>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d14a      	bne.n	80028de <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 8002852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002856:	6413      	str	r3, [r2, #64]	; 0x40
 8002858:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_CAN_MspInit+0x14c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_CAN_MspInit+0x14c>)
 800286c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <HAL_CAN_MspInit+0x14c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d10d      	bne.n	8002892 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 8002880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_CAN_MspInit+0x150>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028ae:	2360      	movs	r3, #96	; 0x60
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80028be:	2309      	movs	r3, #9
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	4619      	mov	r1, r3
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <HAL_CAN_MspInit+0x15c>)
 80028ca:	f002 f8e5 	bl	8004a98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2105      	movs	r1, #5
 80028d2:	2040      	movs	r0, #64	; 0x40
 80028d4:	f001 fca7 	bl	8004226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80028d8:	2040      	movs	r0, #64	; 0x40
 80028da:	f001 fcc0 	bl	800425e <HAL_NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3730      	adds	r7, #48	; 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40006400 	.word	0x40006400
 80028ec:	20000af0 	.word	0x20000af0
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40006800 	.word	0x40006800
 80028fc:	40020400 	.word	0x40020400

08002900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <HAL_SPI_MspInit+0xc0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d149      	bne.n	80029b6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 800292c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8002976:	2318      	movs	r3, #24
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002986:	2305      	movs	r3, #5
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <HAL_SPI_MspInit+0xc8>)
 8002992:	f002 f881 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029a6:	2305      	movs	r3, #5
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4806      	ldr	r0, [pc, #24]	; (80029cc <HAL_SPI_MspInit+0xcc>)
 80029b2:	f002 f871 	bl	8004a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40013000 	.word	0x40013000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40020000 	.word	0x40020000

080029d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <HAL_TIM_PWM_MspInit+0x64>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10e      	bne.n	8002a00 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_TIM_PWM_MspInit+0x68>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <HAL_TIM_PWM_MspInit+0x68>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_TIM_PWM_MspInit+0x68>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029fe:	e012      	b.n	8002a26 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <HAL_TIM_PWM_MspInit+0x6c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10d      	bne.n	8002a26 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_TIM_PWM_MspInit+0x68>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <HAL_TIM_PWM_MspInit+0x68>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_TIM_PWM_MspInit+0x68>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <HAL_TIM_Base_MspInit+0x3c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10d      	bne.n	8002a6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_TIM_Base_MspInit+0x40>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_TIM_Base_MspInit+0x40>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_TIM_Base_MspInit+0x40>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40023800 	.word	0x40023800

08002a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	; 0x30
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a46      	ldr	r2, [pc, #280]	; (8002bbc <HAL_TIM_MspPostInit+0x138>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d11f      	bne.n	8002ae6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	4b45      	ldr	r3, [pc, #276]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a44      	ldr	r2, [pc, #272]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002ab0:	f043 0310 	orr.w	r3, r3, #16
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8002ac2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4839      	ldr	r0, [pc, #228]	; (8002bc4 <HAL_TIM_MspPostInit+0x140>)
 8002ae0:	f001 ffda 	bl	8004a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002ae4:	e065      	b.n	8002bb2 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_TIM_MspPostInit+0x144>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d11f      	bne.n	8002b30 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002afa:	f043 0308 	orr.w	r3, r3, #8
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b22:	f107 031c 	add.w	r3, r7, #28
 8002b26:	4619      	mov	r1, r3
 8002b28:	4828      	ldr	r0, [pc, #160]	; (8002bcc <HAL_TIM_MspPostInit+0x148>)
 8002b2a:	f001 ffb5 	bl	8004a98 <HAL_GPIO_Init>
}
 8002b2e:	e040      	b.n	8002bb2 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM8)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <HAL_TIM_MspPostInit+0x14c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d13b      	bne.n	8002bb2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_TIM_MspPostInit+0x13c>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002b72:	23c0      	movs	r3, #192	; 0xc0
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b82:	2303      	movs	r3, #3
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b86:	f107 031c 	add.w	r3, r7, #28
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4811      	ldr	r0, [pc, #68]	; (8002bd4 <HAL_TIM_MspPostInit+0x150>)
 8002b8e:	f001 ff83 	bl	8004a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b92:	2340      	movs	r3, #64	; 0x40
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4619      	mov	r1, r3
 8002bac:	480a      	ldr	r0, [pc, #40]	; (8002bd8 <HAL_TIM_MspPostInit+0x154>)
 8002bae:	f001 ff73 	bl	8004a98 <HAL_GPIO_Init>
}
 8002bb2:	bf00      	nop
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	40010400 	.word	0x40010400
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	40020800 	.word	0x40020800

08002bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08e      	sub	sp, #56	; 0x38
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a90      	ldr	r2, [pc, #576]	; (8002e3c <HAL_UART_MspInit+0x260>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	f040 80b2 	bne.w	8002d64 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	4b8e      	ldr	r3, [pc, #568]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	4a8d      	ldr	r2, [pc, #564]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c0a:	f043 0310 	orr.w	r3, r3, #16
 8002c0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c10:	4b8b      	ldr	r3, [pc, #556]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	4b87      	ldr	r3, [pc, #540]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	4a86      	ldr	r2, [pc, #536]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2c:	4b84      	ldr	r3, [pc, #528]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	4b80      	ldr	r3, [pc, #512]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a7f      	ldr	r2, [pc, #508]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c64:	2307      	movs	r3, #7
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4875      	ldr	r0, [pc, #468]	; (8002e44 <HAL_UART_MspInit+0x268>)
 8002c70:	f001 ff12 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c86:	2307      	movs	r3, #7
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8e:	4619      	mov	r1, r3
 8002c90:	486d      	ldr	r0, [pc, #436]	; (8002e48 <HAL_UART_MspInit+0x26c>)
 8002c92:	f001 ff01 	bl	8004a98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002c96:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002c98:	4a6d      	ldr	r2, [pc, #436]	; (8002e50 <HAL_UART_MspInit+0x274>)
 8002c9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ca4:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002ca6:	2240      	movs	r2, #64	; 0x40
 8002ca8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002caa:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb0:	4b66      	ldr	r3, [pc, #408]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb8:	4b64      	ldr	r3, [pc, #400]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cbe:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cc4:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cca:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002ccc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cd0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cd8:	485c      	ldr	r0, [pc, #368]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cda:	f001 fadb 	bl	8004294 <HAL_DMA_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002ce4:	f7ff fb52 	bl	800238c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34
 8002cee:	4a57      	ldr	r2, [pc, #348]	; (8002e4c <HAL_UART_MspInit+0x270>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002cf4:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002cf6:	4a58      	ldr	r2, [pc, #352]	; (8002e58 <HAL_UART_MspInit+0x27c>)
 8002cf8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002cfa:	4b56      	ldr	r3, [pc, #344]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d00:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d08:	4b52      	ldr	r3, [pc, #328]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d16:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d22:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d30:	4b48      	ldr	r3, [pc, #288]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d36:	4847      	ldr	r0, [pc, #284]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d38:	f001 faac 	bl	8004294 <HAL_DMA_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8002d42:	f7ff fb23 	bl	800238c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a42      	ldr	r2, [pc, #264]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d4c:	4a41      	ldr	r2, [pc, #260]	; (8002e54 <HAL_UART_MspInit+0x278>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2105      	movs	r1, #5
 8002d56:	2025      	movs	r0, #37	; 0x25
 8002d58:	f001 fa65 	bl	8004226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d5c:	2025      	movs	r0, #37	; 0x25
 8002d5e:	f001 fa7e 	bl	800425e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d62:	e11c      	b.n	8002f9e <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <HAL_UART_MspInit+0x280>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d17e      	bne.n	8002e6c <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a32      	ldr	r2, [pc, #200]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_UART_MspInit+0x264>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002db8:	2307      	movs	r3, #7
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4827      	ldr	r0, [pc, #156]	; (8002e60 <HAL_UART_MspInit+0x284>)
 8002dc4:	f001 fe68 	bl	8004a98 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002dc8:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002dca:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <HAL_UART_MspInit+0x28c>)
 8002dcc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002dd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dd4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002e00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e04:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e0c:	4815      	ldr	r0, [pc, #84]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002e0e:	f001 fa41 	bl	8004294 <HAL_DMA_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_UART_MspInit+0x240>
      Error_Handler();
 8002e18:	f7ff fab8 	bl	800238c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <HAL_UART_MspInit+0x288>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2105      	movs	r1, #5
 8002e2c:	2027      	movs	r0, #39	; 0x27
 8002e2e:	f001 f9fa 	bl	8004226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e32:	2027      	movs	r0, #39	; 0x27
 8002e34:	f001 fa13 	bl	800425e <HAL_NVIC_EnableIRQ>
}
 8002e38:	e0b1      	b.n	8002f9e <HAL_UART_MspInit+0x3c2>
 8002e3a:	bf00      	nop
 8002e3c:	40011000 	.word	0x40011000
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020000 	.word	0x40020000
 8002e4c:	2000089c 	.word	0x2000089c
 8002e50:	400264b8 	.word	0x400264b8
 8002e54:	200008fc 	.word	0x200008fc
 8002e58:	40026440 	.word	0x40026440
 8002e5c:	40004800 	.word	0x40004800
 8002e60:	40020800 	.word	0x40020800
 8002e64:	2000095c 	.word	0x2000095c
 8002e68:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a4d      	ldr	r2, [pc, #308]	; (8002fa8 <HAL_UART_MspInit+0x3cc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	f040 8093 	bne.w	8002f9e <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_UART_MspInit+0x3d0>)
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	4a4a      	ldr	r2, [pc, #296]	; (8002fac <HAL_UART_MspInit+0x3d0>)
 8002e82:	f043 0320 	orr.w	r3, r3, #32
 8002e86:	6453      	str	r3, [r2, #68]	; 0x44
 8002e88:	4b48      	ldr	r3, [pc, #288]	; (8002fac <HAL_UART_MspInit+0x3d0>)
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_UART_MspInit+0x3d0>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4a43      	ldr	r2, [pc, #268]	; (8002fac <HAL_UART_MspInit+0x3d0>)
 8002e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea4:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_UART_MspInit+0x3d0>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002eb0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4838      	ldr	r0, [pc, #224]	; (8002fb0 <HAL_UART_MspInit+0x3d4>)
 8002ece:	f001 fde3 	bl	8004a98 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002ed2:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002ed4:	4a38      	ldr	r2, [pc, #224]	; (8002fb8 <HAL_UART_MspInit+0x3dc>)
 8002ed6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002eda:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ede:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef4:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efa:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002f08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f0c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002f14:	4827      	ldr	r0, [pc, #156]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002f16:	f001 f9bd 	bl	8004294 <HAL_DMA_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8002f20:	f7ff fa34 	bl	800238c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
 8002f2a:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_UART_MspInit+0x3d8>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002f30:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f32:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_UART_MspInit+0x3e4>)
 8002f34:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002f36:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f38:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002f3c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f40:	2240      	movs	r2, #64	; 0x40
 8002f42:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f50:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f6a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002f72:	4812      	ldr	r0, [pc, #72]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f74:	f001 f98e 	bl	8004294 <HAL_DMA_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8002f7e:	f7ff fa05 	bl	800238c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
 8002f88:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <HAL_UART_MspInit+0x3e0>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2105      	movs	r1, #5
 8002f92:	2047      	movs	r0, #71	; 0x47
 8002f94:	f001 f947 	bl	8004226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002f98:	2047      	movs	r0, #71	; 0x47
 8002f9a:	f001 f960 	bl	800425e <HAL_NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3738      	adds	r7, #56	; 0x38
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40011400 	.word	0x40011400
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40021800 	.word	0x40021800
 8002fb4:	200009bc 	.word	0x200009bc
 8002fb8:	40026428 	.word	0x40026428
 8002fbc:	20000a1c 	.word	0x20000a1c
 8002fc0:	400264a0 	.word	0x400264a0

08002fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002fc8:	f002 fb80 	bl	80056cc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <NMI_Handler+0x8>

08002fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <BusFault_Handler+0x4>

08002fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <UsageFault_Handler+0x4>

08002fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff8:	f000 f9b8 	bl	800336c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002ffc:	f006 fb14 	bl	8009628 <xTaskGetSchedulerState>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003006:	f007 f8ff 	bl	800a208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <DMA1_Stream1_IRQHandler+0x10>)
 8003016:	f001 fad5 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	2000095c 	.word	0x2000095c

08003024 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <CAN1_RX0_IRQHandler+0x10>)
 800302a:	f000 fdf2 	bl	8003c12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000650 	.word	0x20000650

08003038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <USART1_IRQHandler+0x10>)
 800303e:	f003 fcc3 	bl	80069c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200007d0 	.word	0x200007d0

0800304c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <DMA2_Stream1_IRQHandler+0x10>)
 8003052:	f001 fab7 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200009bc 	.word	0x200009bc

08003060 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <DMA2_Stream2_IRQHandler+0x10>)
 8003066:	f001 faad 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200008fc 	.word	0x200008fc

08003074 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <CAN2_RX0_IRQHandler+0x10>)
 800307a:	f000 fdca 	bl	8003c12 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000678 	.word	0x20000678

08003088 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <DMA2_Stream6_IRQHandler+0x10>)
 800308e:	f001 fa99 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000a1c 	.word	0x20000a1c

0800309c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <DMA2_Stream7_IRQHandler+0x10>)
 80030a2:	f001 fa8f 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000089c 	.word	0x2000089c

080030b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <USART6_IRQHandler+0x10>)
 80030b6:	f003 fc87 	bl	80069c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000858 	.word	0x20000858

080030c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return 1;
 80030c8:	2301      	movs	r3, #1
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_kill>:

int _kill(int pid, int sig)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030de:	f008 f8b7 	bl	800b250 <__errno>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2216      	movs	r2, #22
 80030e6:	601a      	str	r2, [r3, #0]
  return -1;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_exit>:

void _exit (int status)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ffe7 	bl	80030d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003106:	e7fe      	b.n	8003106 <_exit+0x12>

08003108 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e00a      	b.n	8003130 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800311a:	f3af 8000 	nop.w
 800311e:	4601      	mov	r1, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	60ba      	str	r2, [r7, #8]
 8003126:	b2ca      	uxtb	r2, r1
 8003128:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	dbf0      	blt.n	800311a <_read+0x12>
  }

  return len;
 8003138:	687b      	ldr	r3, [r7, #4]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e009      	b.n	8003168 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	60ba      	str	r2, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	3301      	adds	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	dbf1      	blt.n	8003154 <_write+0x12>
  }
  return len;
 8003170:	687b      	ldr	r3, [r7, #4]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_close>:

int _close(int file)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a2:	605a      	str	r2, [r3, #4]
  return 0;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_isatty>:

int _isatty(int file)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ba:	2301      	movs	r3, #1
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <_sbrk+0x5c>)
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <_sbrk+0x60>)
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <_sbrk+0x64>)
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <_sbrk+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	429a      	cmp	r2, r3
 8003212:	d207      	bcs.n	8003224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003214:	f008 f81c 	bl	800b250 <__errno>
 8003218:	4603      	mov	r3, r0
 800321a:	220c      	movs	r2, #12
 800321c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003222:	e009      	b.n	8003238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <_sbrk+0x64>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	4a05      	ldr	r2, [pc, #20]	; (8003248 <_sbrk+0x64>)
 8003234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003236:	68fb      	ldr	r3, [r7, #12]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20020000 	.word	0x20020000
 8003244:	00000400 	.word	0x00000400
 8003248:	20000af4 	.word	0x20000af4
 800324c:	20005630 	.word	0x20005630

08003250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <SystemInit+0x20>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <SystemInit+0x20>)
 800325c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800327a:	490e      	ldr	r1, [pc, #56]	; (80032b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800327c:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003280:	e002      	b.n	8003288 <LoopCopyDataInit>

08003282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003286:	3304      	adds	r3, #4

08003288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800328c:	d3f9      	bcc.n	8003282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328e:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003290:	4c0b      	ldr	r4, [pc, #44]	; (80032c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003294:	e001      	b.n	800329a <LoopFillZerobss>

08003296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003298:	3204      	adds	r2, #4

0800329a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800329c:	d3fb      	bcc.n	8003296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800329e:	f7ff ffd7 	bl	8003250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032a2:	f007 ffdb 	bl	800b25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a6:	f7fe fad3 	bl	8001850 <main>
  bx  lr    
 80032aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80032b8:	0800d8ec 	.word	0x0800d8ec
  ldr r2, =_sbss
 80032bc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80032c0:	20005630 	.word	0x20005630

080032c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c4:	e7fe      	b.n	80032c4 <ADC_IRQHandler>
	...

080032c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_Init+0x40>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <HAL_Init+0x40>)
 80032d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_Init+0x40>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <HAL_Init+0x40>)
 80032de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_Init+0x40>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_Init+0x40>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f0:	2003      	movs	r0, #3
 80032f2:	f000 ff8d 	bl	8004210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032f6:	200f      	movs	r0, #15
 80032f8:	f000 f808 	bl	800330c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032fc:	f7ff fa24 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00

0800330c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_InitTick+0x54>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_InitTick+0x58>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003322:	fbb3 f3f1 	udiv	r3, r3, r1
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4618      	mov	r0, r3
 800332c:	f000 ffa5 	bl	800427a <HAL_SYSTICK_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e00e      	b.n	8003358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b0f      	cmp	r3, #15
 800333e:	d80a      	bhi.n	8003356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003340:	2200      	movs	r2, #0
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003348:	f000 ff6d 	bl	8004226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <HAL_InitTick+0x5c>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20000010 	.word	0x20000010
 8003364:	20000018 	.word	0x20000018
 8003368:	20000014 	.word	0x20000014

0800336c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_IncTick+0x20>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x24>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4413      	add	r3, r2
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_IncTick+0x24>)
 800337e:	6013      	str	r3, [r2, #0]
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000018 	.word	0x20000018
 8003390:	20000af8 	.word	0x20000af8

08003394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return uwTick;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_GetTick+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000af8 	.word	0x20000af8

080033ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0ed      	b.n	800359a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff f9e8 	bl	80027a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e0:	f7ff ffd8 	bl	8003394 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033e6:	e012      	b.n	800340e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033e8:	f7ff ffd4 	bl	8003394 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b0a      	cmp	r3, #10
 80033f4:	d90b      	bls.n	800340e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2205      	movs	r2, #5
 8003406:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0c5      	b.n	800359a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0e5      	beq.n	80033e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0202 	bic.w	r2, r2, #2
 800342a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800342c:	f7ff ffb2 	bl	8003394 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003432:	e012      	b.n	800345a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003434:	f7ff ffae 	bl	8003394 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b0a      	cmp	r3, #10
 8003440:	d90b      	bls.n	800345a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2205      	movs	r2, #5
 8003452:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e09f      	b.n	800359a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7e1b      	ldrb	r3, [r3, #24]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d108      	bne.n	8003482 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e007      	b.n	8003492 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	7e5b      	ldrb	r3, [r3, #25]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d108      	bne.n	80034ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e007      	b.n	80034bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e9b      	ldrb	r3, [r3, #26]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d108      	bne.n	80034d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0220 	orr.w	r2, r2, #32
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e007      	b.n	80034e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0220 	bic.w	r2, r2, #32
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7edb      	ldrb	r3, [r3, #27]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d108      	bne.n	8003500 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0210 	bic.w	r2, r2, #16
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e007      	b.n	8003510 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0210 	orr.w	r2, r2, #16
 800350e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	7f1b      	ldrb	r3, [r3, #28]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d108      	bne.n	800352a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0208 	orr.w	r2, r2, #8
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e007      	b.n	800353a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0208 	bic.w	r2, r2, #8
 8003538:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7f5b      	ldrb	r3, [r3, #29]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0204 	orr.w	r2, r2, #4
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e007      	b.n	8003564 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	ea42 0103 	orr.w	r1, r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d003      	beq.n	80035ca <HAL_CAN_ConfigFilter+0x26>
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	f040 80be 	bne.w	8003746 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_CAN_ConfigFilter+0x1bc>)
 80035cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	431a      	orrs	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2201      	movs	r2, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	43db      	mvns	r3, r3
 800361c:	401a      	ands	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d123      	bne.n	8003674 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800364e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	3248      	adds	r2, #72	; 0x48
 8003654:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003668:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800366a:	6979      	ldr	r1, [r7, #20]
 800366c:	3348      	adds	r3, #72	; 0x48
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d122      	bne.n	80036c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	431a      	orrs	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800369c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3248      	adds	r2, #72	; 0x48
 80036a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036b8:	6979      	ldr	r1, [r7, #20]
 80036ba:	3348      	adds	r3, #72	; 0x48
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	440b      	add	r3, r1
 80036c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	401a      	ands	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036dc:	e007      	b.n	80036ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003708:	e007      	b.n	800371a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	431a      	orrs	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	431a      	orrs	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003738:	f023 0201 	bic.w	r2, r3, #1
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e006      	b.n	8003754 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
  }
}
 8003754:	4618      	mov	r0, r3
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	40006400 	.word	0x40006400

08003764 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d12e      	bne.n	80037d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003790:	f7ff fe00 	bl	8003394 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003796:	e012      	b.n	80037be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003798:	f7ff fdfc 	bl	8003394 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b0a      	cmp	r3, #10
 80037a4:	d90b      	bls.n	80037be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2205      	movs	r2, #5
 80037b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e012      	b.n	80037e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e5      	bne.n	8003798 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e006      	b.n	80037e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003800:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800380a:	7ffb      	ldrb	r3, [r7, #31]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d003      	beq.n	8003818 <HAL_CAN_AddTxMessage+0x2c>
 8003810:	7ffb      	ldrb	r3, [r7, #31]
 8003812:	2b02      	cmp	r3, #2
 8003814:	f040 80b8 	bne.w	8003988 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80a0 	beq.w	8003978 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	0e1b      	lsrs	r3, r3, #24
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d907      	bls.n	8003858 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e09e      	b.n	8003996 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003858:	2201      	movs	r2, #1
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	409a      	lsls	r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	6809      	ldr	r1, [r1, #0]
 8003878:	431a      	orrs	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3318      	adds	r3, #24
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	440b      	add	r3, r1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e00f      	b.n	80038a6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003890:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800389a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3318      	adds	r3, #24
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	440b      	add	r3, r1
 80038a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3318      	adds	r3, #24
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	440b      	add	r3, r1
 80038b6:	3304      	adds	r3, #4
 80038b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	7d1b      	ldrb	r3, [r3, #20]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d111      	bne.n	80038e6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3318      	adds	r3, #24
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	6811      	ldr	r1, [r2, #0]
 80038d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3318      	adds	r3, #24
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	440b      	add	r3, r1
 80038e2:	3304      	adds	r3, #4
 80038e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3307      	adds	r3, #7
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	061a      	lsls	r2, r3, #24
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3306      	adds	r3, #6
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3305      	adds	r3, #5
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	4313      	orrs	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	3204      	adds	r2, #4
 8003906:	7812      	ldrb	r2, [r2, #0]
 8003908:	4610      	mov	r0, r2
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	6811      	ldr	r1, [r2, #0]
 800390e:	ea43 0200 	orr.w	r2, r3, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	440b      	add	r3, r1
 8003918:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800391c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3303      	adds	r3, #3
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	061a      	lsls	r2, r3, #24
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3302      	adds	r3, #2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3301      	adds	r3, #1
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	4313      	orrs	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	4610      	mov	r0, r2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	6811      	ldr	r1, [r2, #0]
 8003944:	ea43 0200 	orr.w	r2, r3, r0
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	440b      	add	r3, r1
 800394e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003952:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	3318      	adds	r3, #24
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	4413      	add	r3, r2
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3318      	adds	r3, #24
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	440b      	add	r3, r1
 8003972:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e00e      	b.n	8003996 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e006      	b.n	8003996 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	; 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d003      	beq.n	80039c6 <HAL_CAN_GetRxMessage+0x24>
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	f040 80f3 	bne.w	8003bac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10e      	bne.n	80039ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d116      	bne.n	8003a08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0e7      	b.n	8003bba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0d8      	b.n	8003bba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	331b      	adds	r3, #27
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4413      	add	r3, r2
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0204 	and.w	r2, r3, #4
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10c      	bne.n	8003a40 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	331b      	adds	r3, #27
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	4413      	add	r3, r2
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	0d5b      	lsrs	r3, r3, #21
 8003a36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e00b      	b.n	8003a58 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	331b      	adds	r3, #27
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	4413      	add	r3, r2
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	08db      	lsrs	r3, r3, #3
 8003a50:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	331b      	adds	r3, #27
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	4413      	add	r3, r2
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0202 	and.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	331b      	adds	r3, #27
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	4413      	add	r3, r2
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 020f 	and.w	r2, r3, #15
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	331b      	adds	r3, #27
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	4413      	add	r3, r2
 8003a92:	3304      	adds	r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	331b      	adds	r3, #27
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	0c1b      	lsrs	r3, r3, #16
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0a1a      	lsrs	r2, r3, #8
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0c1a      	lsrs	r2, r3, #16
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	3302      	adds	r3, #2
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	0e1a      	lsrs	r2, r3, #24
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	3303      	adds	r3, #3
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	0a1a      	lsrs	r2, r3, #8
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	3305      	adds	r3, #5
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	0c1a      	lsrs	r2, r3, #16
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	3306      	adds	r3, #6
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	0e1a      	lsrs	r2, r3, #24
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	3307      	adds	r3, #7
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0220 	orr.w	r2, r2, #32
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	e007      	b.n	8003ba8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0220 	orr.w	r2, r2, #32
 8003ba6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e006      	b.n	8003bba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b085      	sub	sp, #20
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d002      	beq.n	8003be4 <HAL_CAN_ActivateNotification+0x1e>
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d109      	bne.n	8003bf8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6959      	ldr	r1, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e006      	b.n	8003c06 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b08a      	sub	sp, #40	; 0x28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d07c      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d023      	beq.n	8003caa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2201      	movs	r2, #1
 8003c68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f983 	bl	8003f80 <HAL_CAN_TxMailbox0CompleteCallback>
 8003c7a:	e016      	b.n	8003caa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8e:	e00c      	b.n	8003caa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	e002      	b.n	8003caa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f989 	bl	8003fbc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d024      	beq.n	8003cfe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cbc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f963 	bl	8003f94 <HAL_CAN_TxMailbox1CompleteCallback>
 8003cce:	e016      	b.n	8003cfe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e00c      	b.n	8003cfe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	e002      	b.n	8003cfe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f969 	bl	8003fd0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d024      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f943 	bl	8003fa8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d22:	e016      	b.n	8003d52 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	e00c      	b.n	8003d52 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	e002      	b.n	8003d52 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f949 	bl	8003fe4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00c      	beq.n	8003d76 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2210      	movs	r2, #16
 8003d74:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d006      	beq.n	8003d98 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2208      	movs	r2, #8
 8003d90:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f930 	bl	8003ff8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fd f877 	bl	8000ea4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00c      	beq.n	8003dda <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2208      	movs	r2, #8
 8003df4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f912 	bl	8004020 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f8f9 	bl	800400c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2210      	movs	r2, #16
 8003e34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8fc 	bl	8004034 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2208      	movs	r2, #8
 8003e56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f8f5 	bl	8004048 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d07b      	beq.n	8003f60 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d072      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	f043 0304 	orr.w	r3, r3, #4
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d043      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d03e      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ee0:	2b60      	cmp	r3, #96	; 0x60
 8003ee2:	d02b      	beq.n	8003f3c <HAL_CAN_IRQHandler+0x32a>
 8003ee4:	2b60      	cmp	r3, #96	; 0x60
 8003ee6:	d82e      	bhi.n	8003f46 <HAL_CAN_IRQHandler+0x334>
 8003ee8:	2b50      	cmp	r3, #80	; 0x50
 8003eea:	d022      	beq.n	8003f32 <HAL_CAN_IRQHandler+0x320>
 8003eec:	2b50      	cmp	r3, #80	; 0x50
 8003eee:	d82a      	bhi.n	8003f46 <HAL_CAN_IRQHandler+0x334>
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d019      	beq.n	8003f28 <HAL_CAN_IRQHandler+0x316>
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d826      	bhi.n	8003f46 <HAL_CAN_IRQHandler+0x334>
 8003ef8:	2b30      	cmp	r3, #48	; 0x30
 8003efa:	d010      	beq.n	8003f1e <HAL_CAN_IRQHandler+0x30c>
 8003efc:	2b30      	cmp	r3, #48	; 0x30
 8003efe:	d822      	bhi.n	8003f46 <HAL_CAN_IRQHandler+0x334>
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d002      	beq.n	8003f0a <HAL_CAN_IRQHandler+0x2f8>
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d005      	beq.n	8003f14 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f08:	e01d      	b.n	8003f46 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f12:	e019      	b.n	8003f48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f043 0310 	orr.w	r3, r3, #16
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f1c:	e014      	b.n	8003f48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	f043 0320 	orr.w	r3, r3, #32
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f26:	e00f      	b.n	8003f48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f30:	e00a      	b.n	8003f48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f3a:	e005      	b.n	8003f48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f44:	e000      	b.n	8003f48 <HAL_CAN_IRQHandler+0x336>
            break;
 8003f46:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f56:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f872 	bl	800405c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f78:	bf00      	nop
 8003f7a:	3728      	adds	r7, #40	; 0x28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800408c:	4013      	ands	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040a2:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <__NVIC_SetPriorityGrouping+0x44>)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	60d3      	str	r3, [r2, #12]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <__NVIC_GetPriorityGrouping+0x18>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	f003 0307 	and.w	r3, r3, #7
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	db0b      	blt.n	80040fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	f003 021f 	and.w	r2, r3, #31
 80040ec:	4907      	ldr	r1, [pc, #28]	; (800410c <__NVIC_EnableIRQ+0x38>)
 80040ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2001      	movs	r0, #1
 80040f6:	fa00 f202 	lsl.w	r2, r0, r2
 80040fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000e100 	.word	0xe000e100

08004110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	6039      	str	r1, [r7, #0]
 800411a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004120:	2b00      	cmp	r3, #0
 8004122:	db0a      	blt.n	800413a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	b2da      	uxtb	r2, r3
 8004128:	490c      	ldr	r1, [pc, #48]	; (800415c <__NVIC_SetPriority+0x4c>)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	0112      	lsls	r2, r2, #4
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	440b      	add	r3, r1
 8004134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004138:	e00a      	b.n	8004150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4908      	ldr	r1, [pc, #32]	; (8004160 <__NVIC_SetPriority+0x50>)
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	3b04      	subs	r3, #4
 8004148:	0112      	lsls	r2, r2, #4
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	440b      	add	r3, r1
 800414e:	761a      	strb	r2, [r3, #24]
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000e100 	.word	0xe000e100
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f1c3 0307 	rsb	r3, r3, #7
 800417e:	2b04      	cmp	r3, #4
 8004180:	bf28      	it	cs
 8004182:	2304      	movcs	r3, #4
 8004184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3304      	adds	r3, #4
 800418a:	2b06      	cmp	r3, #6
 800418c:	d902      	bls.n	8004194 <NVIC_EncodePriority+0x30>
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3b03      	subs	r3, #3
 8004192:	e000      	b.n	8004196 <NVIC_EncodePriority+0x32>
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43da      	mvns	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	401a      	ands	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	43d9      	mvns	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041bc:	4313      	orrs	r3, r2
         );
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041dc:	d301      	bcc.n	80041e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041de:	2301      	movs	r3, #1
 80041e0:	e00f      	b.n	8004202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <SysTick_Config+0x40>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ea:	210f      	movs	r1, #15
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f0:	f7ff ff8e 	bl	8004110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <SysTick_Config+0x40>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041fa:	4b04      	ldr	r3, [pc, #16]	; (800420c <SysTick_Config+0x40>)
 80041fc:	2207      	movs	r2, #7
 80041fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	e000e010 	.word	0xe000e010

08004210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff ff29 	bl	8004070 <__NVIC_SetPriorityGrouping>
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	4603      	mov	r3, r0
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004238:	f7ff ff3e 	bl	80040b8 <__NVIC_GetPriorityGrouping>
 800423c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f7ff ff8e 	bl	8004164 <NVIC_EncodePriority>
 8004248:	4602      	mov	r2, r0
 800424a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff ff5d 	bl	8004110 <__NVIC_SetPriority>
}
 8004256:	bf00      	nop
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ff31 	bl	80040d4 <__NVIC_EnableIRQ>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff ffa2 	bl	80041cc <SysTick_Config>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042a0:	f7ff f878 	bl	8003394 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e099      	b.n	80043e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042d0:	e00f      	b.n	80042f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042d2:	f7ff f85f 	bl	8003394 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d908      	bls.n	80042f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2203      	movs	r2, #3
 80042ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e078      	b.n	80043e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e8      	bne.n	80042d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4b38      	ldr	r3, [pc, #224]	; (80043ec <HAL_DMA_Init+0x158>)
 800430c:	4013      	ands	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800431e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800432a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	2b04      	cmp	r3, #4
 800434a:	d107      	bne.n	800435c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	4313      	orrs	r3, r2
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 0307 	bic.w	r3, r3, #7
 8004372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	2b04      	cmp	r3, #4
 8004384:	d117      	bne.n	80043b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fb01 	bl	80049a0 <DMA_CheckFifoParam>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2240      	movs	r2, #64	; 0x40
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043b2:	2301      	movs	r3, #1
 80043b4:	e016      	b.n	80043e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fab8 	bl	8004934 <DMA_CalcBaseAndBitshift>
 80043c4:	4603      	mov	r3, r0
 80043c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	223f      	movs	r2, #63	; 0x3f
 80043ce:	409a      	lsls	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	f010803f 	.word	0xf010803f

080043f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_DMA_Start_IT+0x26>
 8004412:	2302      	movs	r3, #2
 8004414:	e040      	b.n	8004498 <HAL_DMA_Start_IT+0xa8>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d12f      	bne.n	800448a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68b9      	ldr	r1, [r7, #8]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fa4a 	bl	80048d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	223f      	movs	r2, #63	; 0x3f
 800444a:	409a      	lsls	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0216 	orr.w	r2, r2, #22
 800445e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0208 	orr.w	r2, r2, #8
 8004476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e005      	b.n	8004496 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004492:	2302      	movs	r3, #2
 8004494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004496:	7dfb      	ldrb	r3, [r7, #23]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ae:	f7fe ff71 	bl	8003394 <HAL_GetTick>
 80044b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d008      	beq.n	80044d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2280      	movs	r2, #128	; 0x80
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e052      	b.n	8004578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0216 	bic.w	r2, r2, #22
 80044e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <HAL_DMA_Abort+0x62>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0208 	bic.w	r2, r2, #8
 8004510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004522:	e013      	b.n	800454c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004524:	f7fe ff36 	bl	8003394 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b05      	cmp	r3, #5
 8004530:	d90c      	bls.n	800454c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2203      	movs	r2, #3
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e015      	b.n	8004578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e4      	bne.n	8004524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	223f      	movs	r2, #63	; 0x3f
 8004560:	409a      	lsls	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d004      	beq.n	800459e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e00c      	b.n	80045b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2205      	movs	r2, #5
 80045a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045d0:	4b8e      	ldr	r3, [pc, #568]	; (800480c <HAL_DMA_IRQHandler+0x248>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a8e      	ldr	r2, [pc, #568]	; (8004810 <HAL_DMA_IRQHandler+0x24c>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ee:	2208      	movs	r2, #8
 80045f0:	409a      	lsls	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01a      	beq.n	8004630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461c:	2208      	movs	r2, #8
 800461e:	409a      	lsls	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f043 0201 	orr.w	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	2201      	movs	r2, #1
 8004636:	409a      	lsls	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4013      	ands	r3, r2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d012      	beq.n	8004666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	2201      	movs	r2, #1
 8004654:	409a      	lsls	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	f043 0202 	orr.w	r2, r3, #2
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	2204      	movs	r2, #4
 800466c:	409a      	lsls	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d012      	beq.n	800469c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	2204      	movs	r2, #4
 800468a:	409a      	lsls	r2, r3
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	f043 0204 	orr.w	r2, r3, #4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	2210      	movs	r2, #16
 80046a2:	409a      	lsls	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d043      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d03c      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	2210      	movs	r2, #16
 80046c0:	409a      	lsls	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d024      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
 80046f2:	e01f      	b.n	8004734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
 8004704:	e016      	b.n	8004734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0208 	bic.w	r2, r2, #8
 8004722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	2220      	movs	r2, #32
 800473a:	409a      	lsls	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 808f 	beq.w	8004864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8087 	beq.w	8004864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	2220      	movs	r2, #32
 800475c:	409a      	lsls	r2, r3
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b05      	cmp	r3, #5
 800476c:	d136      	bne.n	80047dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0216 	bic.w	r2, r2, #22
 800477c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800478c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <HAL_DMA_IRQHandler+0x1da>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0208 	bic.w	r2, r2, #8
 80047ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	223f      	movs	r2, #63	; 0x3f
 80047b4:	409a      	lsls	r2, r3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d07e      	beq.n	80048d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
        }
        return;
 80047da:	e079      	b.n	80048d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01d      	beq.n	8004826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d031      	beq.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
 8004808:	e02c      	b.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
 800480a:	bf00      	nop
 800480c:	20000010 	.word	0x20000010
 8004810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d023      	beq.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
 8004824:	e01e      	b.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10f      	bne.n	8004854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0210 	bic.w	r2, r2, #16
 8004842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	2b00      	cmp	r3, #0
 800486a:	d032      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d022      	beq.n	80048be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2205      	movs	r2, #5
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3301      	adds	r3, #1
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	d307      	bcc.n	80048ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f2      	bne.n	8004890 <HAL_DMA_IRQHandler+0x2cc>
 80048aa:	e000      	b.n	80048ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	4798      	blx	r3
 80048ce:	e000      	b.n	80048d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048d0:	bf00      	nop
    }
  }
}
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d108      	bne.n	8004918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004916:	e007      	b.n	8004928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3b10      	subs	r3, #16
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <DMA_CalcBaseAndBitshift+0x64>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <DMA_CalcBaseAndBitshift+0x68>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d909      	bls.n	8004976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	659a      	str	r2, [r3, #88]	; 0x58
 8004974:	e007      	b.n	8004986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	aaaaaaab 	.word	0xaaaaaaab
 800499c:	0800d560 	.word	0x0800d560

080049a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d11f      	bne.n	80049fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d856      	bhi.n	8004a6e <DMA_CheckFifoParam+0xce>
 80049c0:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <DMA_CheckFifoParam+0x28>)
 80049c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c6:	bf00      	nop
 80049c8:	080049d9 	.word	0x080049d9
 80049cc:	080049eb 	.word	0x080049eb
 80049d0:	080049d9 	.word	0x080049d9
 80049d4:	08004a6f 	.word	0x08004a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d046      	beq.n	8004a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e8:	e043      	b.n	8004a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049f2:	d140      	bne.n	8004a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f8:	e03d      	b.n	8004a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a02:	d121      	bne.n	8004a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d837      	bhi.n	8004a7a <DMA_CheckFifoParam+0xda>
 8004a0a:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <DMA_CheckFifoParam+0x70>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a21 	.word	0x08004a21
 8004a14:	08004a27 	.word	0x08004a27
 8004a18:	08004a21 	.word	0x08004a21
 8004a1c:	08004a39 	.word	0x08004a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	e030      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d025      	beq.n	8004a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a36:	e022      	b.n	8004a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a40:	d11f      	bne.n	8004a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a46:	e01c      	b.n	8004a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d903      	bls.n	8004a56 <DMA_CheckFifoParam+0xb6>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d003      	beq.n	8004a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a54:	e018      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5a:	e015      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6c:	e00b      	b.n	8004a86 <DMA_CheckFifoParam+0xe6>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e00a      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a72:	bf00      	nop
 8004a74:	e008      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a76:	bf00      	nop
 8004a78:	e006      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a7a:	bf00      	nop
 8004a7c:	e004      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a7e:	bf00      	nop
 8004a80:	e002      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <DMA_CheckFifoParam+0xe8>
      break;
 8004a86:	bf00      	nop
    }
  } 
  
  return status; 
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	; 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e16b      	b.n	8004d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	f040 815a 	bne.w	8004d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d005      	beq.n	8004aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d130      	bne.n	8004b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	2203      	movs	r2, #3
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b20:	2201      	movs	r2, #1
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 0201 	and.w	r2, r3, #1
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d017      	beq.n	8004b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	2203      	movs	r2, #3
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d123      	bne.n	8004bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	08da      	lsrs	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3208      	adds	r2, #8
 8004b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	220f      	movs	r2, #15
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	08da      	lsrs	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3208      	adds	r2, #8
 8004bd6:	69b9      	ldr	r1, [r7, #24]
 8004bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	2203      	movs	r2, #3
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0203 	and.w	r2, r3, #3
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80b4 	beq.w	8004d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	4b60      	ldr	r3, [pc, #384]	; (8004da4 <HAL_GPIO_Init+0x30c>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	4a5f      	ldr	r2, [pc, #380]	; (8004da4 <HAL_GPIO_Init+0x30c>)
 8004c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c2e:	4b5d      	ldr	r3, [pc, #372]	; (8004da4 <HAL_GPIO_Init+0x30c>)
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c3a:	4a5b      	ldr	r2, [pc, #364]	; (8004da8 <HAL_GPIO_Init+0x310>)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	3302      	adds	r3, #2
 8004c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	220f      	movs	r2, #15
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a52      	ldr	r2, [pc, #328]	; (8004dac <HAL_GPIO_Init+0x314>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02b      	beq.n	8004cbe <HAL_GPIO_Init+0x226>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a51      	ldr	r2, [pc, #324]	; (8004db0 <HAL_GPIO_Init+0x318>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d025      	beq.n	8004cba <HAL_GPIO_Init+0x222>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a50      	ldr	r2, [pc, #320]	; (8004db4 <HAL_GPIO_Init+0x31c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <HAL_GPIO_Init+0x21e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4f      	ldr	r2, [pc, #316]	; (8004db8 <HAL_GPIO_Init+0x320>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d019      	beq.n	8004cb2 <HAL_GPIO_Init+0x21a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a4e      	ldr	r2, [pc, #312]	; (8004dbc <HAL_GPIO_Init+0x324>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_GPIO_Init+0x216>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a4d      	ldr	r2, [pc, #308]	; (8004dc0 <HAL_GPIO_Init+0x328>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00d      	beq.n	8004caa <HAL_GPIO_Init+0x212>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a4c      	ldr	r2, [pc, #304]	; (8004dc4 <HAL_GPIO_Init+0x32c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d007      	beq.n	8004ca6 <HAL_GPIO_Init+0x20e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a4b      	ldr	r2, [pc, #300]	; (8004dc8 <HAL_GPIO_Init+0x330>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_GPIO_Init+0x20a>
 8004c9e:	2307      	movs	r3, #7
 8004ca0:	e00e      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	e00c      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004ca6:	2306      	movs	r3, #6
 8004ca8:	e00a      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004caa:	2305      	movs	r3, #5
 8004cac:	e008      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cae:	2304      	movs	r3, #4
 8004cb0:	e006      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e004      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e002      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <HAL_GPIO_Init+0x228>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	f002 0203 	and.w	r2, r2, #3
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	4093      	lsls	r3, r2
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cd0:	4935      	ldr	r1, [pc, #212]	; (8004da8 <HAL_GPIO_Init+0x310>)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cde:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4013      	ands	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d02:	4a32      	ldr	r2, [pc, #200]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d08:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d2c:	4a27      	ldr	r2, [pc, #156]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d32:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d56:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d80:	4a12      	ldr	r2, [pc, #72]	; (8004dcc <HAL_GPIO_Init+0x334>)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b0f      	cmp	r3, #15
 8004d90:	f67f ae90 	bls.w	8004ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	3724      	adds	r7, #36	; 0x24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40013800 	.word	0x40013800
 8004dac:	40020000 	.word	0x40020000
 8004db0:	40020400 	.word	0x40020400
 8004db4:	40020800 	.word	0x40020800
 8004db8:	40020c00 	.word	0x40020c00
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40021400 	.word	0x40021400
 8004dc4:	40021800 	.word	0x40021800
 8004dc8:	40021c00 	.word	0x40021c00
 8004dcc:	40013c00 	.word	0x40013c00

08004dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dec:	e003      	b.n	8004df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dee:	887b      	ldrh	r3, [r7, #2]
 8004df0:	041a      	lsls	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	619a      	str	r2, [r3, #24]
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e267      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d075      	beq.n	8004f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e22:	4b88      	ldr	r3, [pc, #544]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d00c      	beq.n	8004e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e2e:	4b85      	ldr	r3, [pc, #532]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d112      	bne.n	8004e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3a:	4b82      	ldr	r3, [pc, #520]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e46:	d10b      	bne.n	8004e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	4b7e      	ldr	r3, [pc, #504]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d05b      	beq.n	8004f0c <HAL_RCC_OscConfig+0x108>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d157      	bne.n	8004f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e242      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e68:	d106      	bne.n	8004e78 <HAL_RCC_OscConfig+0x74>
 8004e6a:	4b76      	ldr	r3, [pc, #472]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a75      	ldr	r2, [pc, #468]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e01d      	b.n	8004eb4 <HAL_RCC_OscConfig+0xb0>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x98>
 8004e82:	4b70      	ldr	r3, [pc, #448]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6f      	ldr	r2, [pc, #444]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	4b6d      	ldr	r3, [pc, #436]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a6c      	ldr	r2, [pc, #432]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e00b      	b.n	8004eb4 <HAL_RCC_OscConfig+0xb0>
 8004e9c:	4b69      	ldr	r3, [pc, #420]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a68      	ldr	r2, [pc, #416]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	4b66      	ldr	r3, [pc, #408]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a65      	ldr	r2, [pc, #404]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d013      	beq.n	8004ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fe fa6a 	bl	8003394 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec4:	f7fe fa66 	bl	8003394 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	; 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e207      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xc0>
 8004ee2:	e014      	b.n	8004f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fa56 	bl	8003394 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fe fa52 	bl	8003394 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e1f3      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efe:	4b51      	ldr	r3, [pc, #324]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0xe8>
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d063      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f1a:	4b4a      	ldr	r3, [pc, #296]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f26:	4b47      	ldr	r3, [pc, #284]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d11c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f32:	4b44      	ldr	r3, [pc, #272]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d116      	bne.n	8004f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3e:	4b41      	ldr	r3, [pc, #260]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_RCC_OscConfig+0x152>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e1c7      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f56:	4b3b      	ldr	r3, [pc, #236]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4937      	ldr	r1, [pc, #220]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6a:	e03a      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d020      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f74:	4b34      	ldr	r3, [pc, #208]	; (8005048 <HAL_RCC_OscConfig+0x244>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7a:	f7fe fa0b 	bl	8003394 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f82:	f7fe fa07 	bl	8003394 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e1a8      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f94:	4b2b      	ldr	r3, [pc, #172]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4925      	ldr	r1, [pc, #148]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]
 8004fb4:	e015      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_RCC_OscConfig+0x244>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe f9ea 	bl	8003394 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc4:	f7fe f9e6 	bl	8003394 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e187      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d036      	beq.n	800505c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <HAL_RCC_OscConfig+0x248>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fe f9ca 	bl	8003394 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005004:	f7fe f9c6 	bl	8003394 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e167      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_OscConfig+0x240>)
 8005018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x200>
 8005022:	e01b      	b.n	800505c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005024:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_RCC_OscConfig+0x248>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502a:	f7fe f9b3 	bl	8003394 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005030:	e00e      	b.n	8005050 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005032:	f7fe f9af 	bl	8003394 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d907      	bls.n	8005050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e150      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
 8005044:	40023800 	.word	0x40023800
 8005048:	42470000 	.word	0x42470000
 800504c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005050:	4b88      	ldr	r3, [pc, #544]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ea      	bne.n	8005032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8097 	beq.w	8005198 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506e:	4b81      	ldr	r3, [pc, #516]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	4b7d      	ldr	r3, [pc, #500]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a7c      	ldr	r2, [pc, #496]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
 800508a:	4b7a      	ldr	r3, [pc, #488]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509a:	4b77      	ldr	r3, [pc, #476]	; (8005278 <HAL_RCC_OscConfig+0x474>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d118      	bne.n	80050d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050a6:	4b74      	ldr	r3, [pc, #464]	; (8005278 <HAL_RCC_OscConfig+0x474>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a73      	ldr	r2, [pc, #460]	; (8005278 <HAL_RCC_OscConfig+0x474>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b2:	f7fe f96f 	bl	8003394 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ba:	f7fe f96b 	bl	8003394 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e10c      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	4b6a      	ldr	r3, [pc, #424]	; (8005278 <HAL_RCC_OscConfig+0x474>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d106      	bne.n	80050ee <HAL_RCC_OscConfig+0x2ea>
 80050e0:	4b64      	ldr	r3, [pc, #400]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	4a63      	ldr	r2, [pc, #396]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6713      	str	r3, [r2, #112]	; 0x70
 80050ec:	e01c      	b.n	8005128 <HAL_RCC_OscConfig+0x324>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x30c>
 80050f6:	4b5f      	ldr	r3, [pc, #380]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a5e      	ldr	r2, [pc, #376]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80050fc:	f043 0304 	orr.w	r3, r3, #4
 8005100:	6713      	str	r3, [r2, #112]	; 0x70
 8005102:	4b5c      	ldr	r3, [pc, #368]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a5b      	ldr	r2, [pc, #364]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	6713      	str	r3, [r2, #112]	; 0x70
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0x324>
 8005110:	4b58      	ldr	r3, [pc, #352]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	4a57      	ldr	r2, [pc, #348]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
 800511c:	4b55      	ldr	r3, [pc, #340]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	4a54      	ldr	r2, [pc, #336]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005122:	f023 0304 	bic.w	r3, r3, #4
 8005126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d015      	beq.n	800515c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7fe f930 	bl	8003394 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005136:	e00a      	b.n	800514e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005138:	f7fe f92c 	bl	8003394 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0cb      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514e:	4b49      	ldr	r3, [pc, #292]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0ee      	beq.n	8005138 <HAL_RCC_OscConfig+0x334>
 800515a:	e014      	b.n	8005186 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515c:	f7fe f91a 	bl	8003394 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005162:	e00a      	b.n	800517a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005164:	f7fe f916 	bl	8003394 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e0b5      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517a:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1ee      	bne.n	8005164 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d105      	bne.n	8005198 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800518c:	4b39      	ldr	r3, [pc, #228]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	4a38      	ldr	r2, [pc, #224]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80a1 	beq.w	80052e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a2:	4b34      	ldr	r3, [pc, #208]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d05c      	beq.n	8005268 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d141      	bne.n	800523a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b6:	4b31      	ldr	r3, [pc, #196]	; (800527c <HAL_RCC_OscConfig+0x478>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051bc:	f7fe f8ea 	bl	8003394 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fe f8e6 	bl	8003394 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e087      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d6:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69da      	ldr	r2, [r3, #28]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	3b01      	subs	r3, #1
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	061b      	lsls	r3, r3, #24
 8005206:	491b      	ldr	r1, [pc, #108]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 8005208:	4313      	orrs	r3, r2
 800520a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_RCC_OscConfig+0x478>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005212:	f7fe f8bf 	bl	8003394 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521a:	f7fe f8bb 	bl	8003394 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e05c      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x416>
 8005238:	e054      	b.n	80052e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <HAL_RCC_OscConfig+0x478>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fe f8a8 	bl	8003394 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005248:	f7fe f8a4 	bl	8003394 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e045      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_OscConfig+0x470>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x444>
 8005266:	e03d      	b.n	80052e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e038      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
 8005274:	40023800 	.word	0x40023800
 8005278:	40007000 	.word	0x40007000
 800527c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x4ec>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d028      	beq.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005298:	429a      	cmp	r2, r3
 800529a:	d121      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d11a      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052b0:	4013      	ands	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d111      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	3b01      	subs	r3, #1
 80052ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800

080052f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0cc      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005308:	4b68      	ldr	r3, [pc, #416]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d90c      	bls.n	8005330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b65      	ldr	r3, [pc, #404]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531e:	4b63      	ldr	r3, [pc, #396]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	429a      	cmp	r2, r3
 800532a:	d001      	beq.n	8005330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0b8      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d020      	beq.n	800537e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005348:	4b59      	ldr	r3, [pc, #356]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a58      	ldr	r2, [pc, #352]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005360:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4a52      	ldr	r2, [pc, #328]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800536a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800536c:	4b50      	ldr	r3, [pc, #320]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	494d      	ldr	r1, [pc, #308]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d044      	beq.n	8005414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d119      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e07f      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d107      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b2:	4b3f      	ldr	r3, [pc, #252]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e06f      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c2:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e067      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053d2:	4b37      	ldr	r3, [pc, #220]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 0203 	bic.w	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4934      	ldr	r1, [pc, #208]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e4:	f7fd ffd6 	bl	8003394 <HAL_GetTick>
 80053e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ec:	f7fd ffd2 	bl	8003394 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e04f      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005402:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 020c 	and.w	r2, r3, #12
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	429a      	cmp	r2, r3
 8005412:	d1eb      	bne.n	80053ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005414:	4b25      	ldr	r3, [pc, #148]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d20c      	bcs.n	800543c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d001      	beq.n	800543c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e032      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4916      	ldr	r1, [pc, #88]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	4313      	orrs	r3, r2
 8005458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	490e      	ldr	r1, [pc, #56]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800547a:	f000 f82d 	bl	80054d8 <HAL_RCC_GetSysClockFreq>
 800547e:	4602      	mov	r2, r0
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	091b      	lsrs	r3, r3, #4
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	490a      	ldr	r1, [pc, #40]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 800548c:	5ccb      	ldrb	r3, [r1, r3]
 800548e:	fa22 f303 	lsr.w	r3, r2, r3
 8005492:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_RCC_ClockConfig+0x1c8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fd ff36 	bl	800330c <HAL_InitTick>

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40023c00 	.word	0x40023c00
 80054b0:	40023800 	.word	0x40023800
 80054b4:	0800d548 	.word	0x0800d548
 80054b8:	20000010 	.word	0x20000010
 80054bc:	20000014 	.word	0x20000014

080054c0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80054c4:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <HAL_RCC_EnableCSS+0x14>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
}
 80054ca:	bf00      	nop
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	4247004c 	.word	0x4247004c

080054d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054dc:	b090      	sub	sp, #64	; 0x40
 80054de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
 80054e4:	2300      	movs	r3, #0
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e8:	2300      	movs	r3, #0
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f0:	4b59      	ldr	r3, [pc, #356]	; (8005658 <HAL_RCC_GetSysClockFreq+0x180>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d00d      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x40>
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	f200 80a1 	bhi.w	8005644 <HAL_RCC_GetSysClockFreq+0x16c>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0x34>
 8005506:	2b04      	cmp	r3, #4
 8005508:	d003      	beq.n	8005512 <HAL_RCC_GetSysClockFreq+0x3a>
 800550a:	e09b      	b.n	8005644 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800550c:	4b53      	ldr	r3, [pc, #332]	; (800565c <HAL_RCC_GetSysClockFreq+0x184>)
 800550e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005510:	e09b      	b.n	800564a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005512:	4b53      	ldr	r3, [pc, #332]	; (8005660 <HAL_RCC_GetSysClockFreq+0x188>)
 8005514:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005516:	e098      	b.n	800564a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005518:	4b4f      	ldr	r3, [pc, #316]	; (8005658 <HAL_RCC_GetSysClockFreq+0x180>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005522:	4b4d      	ldr	r3, [pc, #308]	; (8005658 <HAL_RCC_GetSysClockFreq+0x180>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d028      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800552e:	4b4a      	ldr	r3, [pc, #296]	; (8005658 <HAL_RCC_GetSysClockFreq+0x180>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	099b      	lsrs	r3, r3, #6
 8005534:	2200      	movs	r2, #0
 8005536:	623b      	str	r3, [r7, #32]
 8005538:	627a      	str	r2, [r7, #36]	; 0x24
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005540:	2100      	movs	r1, #0
 8005542:	4b47      	ldr	r3, [pc, #284]	; (8005660 <HAL_RCC_GetSysClockFreq+0x188>)
 8005544:	fb03 f201 	mul.w	r2, r3, r1
 8005548:	2300      	movs	r3, #0
 800554a:	fb00 f303 	mul.w	r3, r0, r3
 800554e:	4413      	add	r3, r2
 8005550:	4a43      	ldr	r2, [pc, #268]	; (8005660 <HAL_RCC_GetSysClockFreq+0x188>)
 8005552:	fba0 1202 	umull	r1, r2, r0, r2
 8005556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005558:	460a      	mov	r2, r1
 800555a:	62ba      	str	r2, [r7, #40]	; 0x28
 800555c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800555e:	4413      	add	r3, r2
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005564:	2200      	movs	r2, #0
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	61fa      	str	r2, [r7, #28]
 800556a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800556e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005572:	f7fb fb19 	bl	8000ba8 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4613      	mov	r3, r2
 800557c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557e:	e053      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005580:	4b35      	ldr	r3, [pc, #212]	; (8005658 <HAL_RCC_GetSysClockFreq+0x180>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	099b      	lsrs	r3, r3, #6
 8005586:	2200      	movs	r2, #0
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	617a      	str	r2, [r7, #20]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005592:	f04f 0b00 	mov.w	fp, #0
 8005596:	4652      	mov	r2, sl
 8005598:	465b      	mov	r3, fp
 800559a:	f04f 0000 	mov.w	r0, #0
 800559e:	f04f 0100 	mov.w	r1, #0
 80055a2:	0159      	lsls	r1, r3, #5
 80055a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a8:	0150      	lsls	r0, r2, #5
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	ebb2 080a 	subs.w	r8, r2, sl
 80055b2:	eb63 090b 	sbc.w	r9, r3, fp
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055ca:	ebb2 0408 	subs.w	r4, r2, r8
 80055ce:	eb63 0509 	sbc.w	r5, r3, r9
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	00eb      	lsls	r3, r5, #3
 80055dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055e0:	00e2      	lsls	r2, r4, #3
 80055e2:	4614      	mov	r4, r2
 80055e4:	461d      	mov	r5, r3
 80055e6:	eb14 030a 	adds.w	r3, r4, sl
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	eb45 030b 	adc.w	r3, r5, fp
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055fe:	4629      	mov	r1, r5
 8005600:	028b      	lsls	r3, r1, #10
 8005602:	4621      	mov	r1, r4
 8005604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005608:	4621      	mov	r1, r4
 800560a:	028a      	lsls	r2, r1, #10
 800560c:	4610      	mov	r0, r2
 800560e:	4619      	mov	r1, r3
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	2200      	movs	r2, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	60fa      	str	r2, [r7, #12]
 8005618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800561c:	f7fb fac4 	bl	8000ba8 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4613      	mov	r3, r2
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_GetSysClockFreq+0x180>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	3301      	adds	r3, #1
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005642:	e002      	b.n	800564a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_GetSysClockFreq+0x184>)
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800564c:	4618      	mov	r0, r3
 800564e:	3740      	adds	r7, #64	; 0x40
 8005650:	46bd      	mov	sp, r7
 8005652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	00f42400 	.word	0x00f42400
 8005660:	00b71b00 	.word	0x00b71b00

08005664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005668:	4b03      	ldr	r3, [pc, #12]	; (8005678 <HAL_RCC_GetHCLKFreq+0x14>)
 800566a:	681b      	ldr	r3, [r3, #0]
}
 800566c:	4618      	mov	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000010 	.word	0x20000010

0800567c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005680:	f7ff fff0 	bl	8005664 <HAL_RCC_GetHCLKFreq>
 8005684:	4602      	mov	r2, r0
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	0a9b      	lsrs	r3, r3, #10
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	4903      	ldr	r1, [pc, #12]	; (80056a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005692:	5ccb      	ldrb	r3, [r1, r3]
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40023800 	.word	0x40023800
 80056a0:	0800d558 	.word	0x0800d558

080056a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056a8:	f7ff ffdc 	bl	8005664 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	0b5b      	lsrs	r3, r3, #13
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4903      	ldr	r1, [pc, #12]	; (80056c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40023800 	.word	0x40023800
 80056c8:	0800d558 	.word	0x0800d558

080056cc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80056d0:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_RCC_NMI_IRQHandler+0x20>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	2b80      	cmp	r3, #128	; 0x80
 80056da:	d104      	bne.n	80056e6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80056dc:	f000 f80a 	bl	80056f4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	701a      	strb	r2, [r3, #0]
  }
}
 80056e6:	bf00      	nop
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	4002380e 	.word	0x4002380e

080056f4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e07b      	b.n	800580c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	d108      	bne.n	800572e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005724:	d009      	beq.n	800573a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	61da      	str	r2, [r3, #28]
 800572c:	e005      	b.n	800573a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d106      	bne.n	800575a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fd f8d3 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005770:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	ea42 0103 	orr.w	r1, r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	f003 0104 	and.w	r1, r3, #4
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	f003 0210 	and.w	r2, r3, #16
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e041      	b.n	80058aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fd f900 	bl	8002a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f000 fba8 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d001      	beq.n	80058cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e046      	b.n	800595a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a23      	ldr	r2, [pc, #140]	; (8005968 <HAL_TIM_Base_Start+0xb4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e6:	d01d      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1f      	ldr	r2, [pc, #124]	; (800596c <HAL_TIM_Base_Start+0xb8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <HAL_TIM_Base_Start+0xbc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <HAL_TIM_Base_Start+0xc0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <HAL_TIM_Base_Start+0xc4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a19      	ldr	r2, [pc, #100]	; (800597c <HAL_TIM_Base_Start+0xc8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_TIM_Base_Start+0xcc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d111      	bne.n	8005948 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b06      	cmp	r3, #6
 8005934:	d010      	beq.n	8005958 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	e007      	b.n	8005958 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	40010400 	.word	0x40010400
 800597c:	40014000 	.word	0x40014000
 8005980:	40001800 	.word	0x40001800

08005984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e041      	b.n	8005a1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fd f810 	bl	80029d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f000 faf0 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_TIM_PWM_Start+0x24>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e022      	b.n	8005a8e <HAL_TIM_PWM_Start+0x6a>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d109      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x3e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	bf14      	ite	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	e015      	b.n	8005a8e <HAL_TIM_PWM_Start+0x6a>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d109      	bne.n	8005a7c <HAL_TIM_PWM_Start+0x58>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	bf14      	ite	ne
 8005a74:	2301      	movne	r3, #1
 8005a76:	2300      	moveq	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e008      	b.n	8005a8e <HAL_TIM_PWM_Start+0x6a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e07c      	b.n	8005b90 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0x82>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa4:	e013      	b.n	8005ace <HAL_TIM_PWM_Start+0xaa>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x92>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab4:	e00b      	b.n	8005ace <HAL_TIM_PWM_Start+0xaa>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac4:	e003      	b.n	8005ace <HAL_TIM_PWM_Start+0xaa>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fd50 	bl	800657c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2d      	ldr	r2, [pc, #180]	; (8005b98 <HAL_TIM_PWM_Start+0x174>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_TIM_PWM_Start+0xcc>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a2c      	ldr	r2, [pc, #176]	; (8005b9c <HAL_TIM_PWM_Start+0x178>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_TIM_PWM_Start+0xd0>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_PWM_Start+0xd2>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <HAL_TIM_PWM_Start+0x174>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d022      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x136>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1c:	d01d      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x136>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1f      	ldr	r2, [pc, #124]	; (8005ba0 <HAL_TIM_PWM_Start+0x17c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d018      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x136>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ba4 <HAL_TIM_PWM_Start+0x180>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x136>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1c      	ldr	r2, [pc, #112]	; (8005ba8 <HAL_TIM_PWM_Start+0x184>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00e      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x136>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a16      	ldr	r2, [pc, #88]	; (8005b9c <HAL_TIM_PWM_Start+0x178>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d009      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x136>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a18      	ldr	r2, [pc, #96]	; (8005bac <HAL_TIM_PWM_Start+0x188>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x136>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <HAL_TIM_PWM_Start+0x18c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d111      	bne.n	8005b7e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b06      	cmp	r3, #6
 8005b6a:	d010      	beq.n	8005b8e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7c:	e007      	b.n	8005b8e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40010400 	.word	0x40010400
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40000c00 	.word	0x40000c00
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40001800 	.word	0x40001800

08005bb4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fcd8 	bl	800657c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a2e      	ldr	r2, [pc, #184]	; (8005c8c <HAL_TIM_PWM_Stop+0xd8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_TIM_PWM_Stop+0x2c>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <HAL_TIM_PWM_Stop+0xdc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d101      	bne.n	8005be4 <HAL_TIM_PWM_Stop+0x30>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_TIM_PWM_Stop+0x32>
 8005be4:	2300      	movs	r3, #0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d017      	beq.n	8005c1a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10f      	bne.n	8005c1a <HAL_TIM_PWM_Stop+0x66>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	f240 4344 	movw	r3, #1092	; 0x444
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d107      	bne.n	8005c1a <HAL_TIM_PWM_Stop+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a1a      	ldr	r2, [r3, #32]
 8005c20:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c24:	4013      	ands	r3, r2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <HAL_TIM_PWM_Stop+0x96>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	f240 4344 	movw	r3, #1092	; 0x444
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d107      	bne.n	8005c4a <HAL_TIM_PWM_Stop+0x96>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Stop+0xa6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c58:	e013      	b.n	8005c82 <HAL_TIM_PWM_Stop+0xce>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Stop+0xb6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c68:	e00b      	b.n	8005c82 <HAL_TIM_PWM_Stop+0xce>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d104      	bne.n	8005c7a <HAL_TIM_PWM_Stop+0xc6>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c78:	e003      	b.n	8005c82 <HAL_TIM_PWM_Stop+0xce>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e0ae      	b.n	8005e10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b0c      	cmp	r3, #12
 8005cbe:	f200 809f 	bhi.w	8005e00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cc2:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005cfd 	.word	0x08005cfd
 8005ccc:	08005e01 	.word	0x08005e01
 8005cd0:	08005e01 	.word	0x08005e01
 8005cd4:	08005e01 	.word	0x08005e01
 8005cd8:	08005d3d 	.word	0x08005d3d
 8005cdc:	08005e01 	.word	0x08005e01
 8005ce0:	08005e01 	.word	0x08005e01
 8005ce4:	08005e01 	.word	0x08005e01
 8005ce8:	08005d7f 	.word	0x08005d7f
 8005cec:	08005e01 	.word	0x08005e01
 8005cf0:	08005e01 	.word	0x08005e01
 8005cf4:	08005e01 	.word	0x08005e01
 8005cf8:	08005dbf 	.word	0x08005dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 f9f0 	bl	80060e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0204 	bic.w	r2, r2, #4
 8005d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6999      	ldr	r1, [r3, #24]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	619a      	str	r2, [r3, #24]
      break;
 8005d3a:	e064      	b.n	8005e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fa40 	bl	80061c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6999      	ldr	r1, [r3, #24]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	021a      	lsls	r2, r3, #8
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	619a      	str	r2, [r3, #24]
      break;
 8005d7c:	e043      	b.n	8005e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fa95 	bl	80062b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0208 	orr.w	r2, r2, #8
 8005d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0204 	bic.w	r2, r2, #4
 8005da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69d9      	ldr	r1, [r3, #28]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	61da      	str	r2, [r3, #28]
      break;
 8005dbc:	e023      	b.n	8005e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fae9 	bl	800639c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69d9      	ldr	r1, [r3, #28]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	021a      	lsls	r2, r3, #8
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	61da      	str	r2, [r3, #28]
      break;
 8005dfe:	e002      	b.n	8005e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
      break;
 8005e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIM_ConfigClockSource+0x1c>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0b4      	b.n	8005f9e <HAL_TIM_ConfigClockSource+0x186>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6c:	d03e      	beq.n	8005eec <HAL_TIM_ConfigClockSource+0xd4>
 8005e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e72:	f200 8087 	bhi.w	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	f000 8086 	beq.w	8005f8a <HAL_TIM_ConfigClockSource+0x172>
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	d87f      	bhi.n	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
 8005e84:	2b70      	cmp	r3, #112	; 0x70
 8005e86:	d01a      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0xa6>
 8005e88:	2b70      	cmp	r3, #112	; 0x70
 8005e8a:	d87b      	bhi.n	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	2b60      	cmp	r3, #96	; 0x60
 8005e8e:	d050      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0x11a>
 8005e90:	2b60      	cmp	r3, #96	; 0x60
 8005e92:	d877      	bhi.n	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b50      	cmp	r3, #80	; 0x50
 8005e96:	d03c      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0xfa>
 8005e98:	2b50      	cmp	r3, #80	; 0x50
 8005e9a:	d873      	bhi.n	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d058      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x13a>
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d86f      	bhi.n	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b30      	cmp	r3, #48	; 0x30
 8005ea6:	d064      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x15a>
 8005ea8:	2b30      	cmp	r3, #48	; 0x30
 8005eaa:	d86b      	bhi.n	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d060      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x15a>
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d867      	bhi.n	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d05c      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x15a>
 8005eb8:	2b10      	cmp	r3, #16
 8005eba:	d05a      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x15a>
 8005ebc:	e062      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6899      	ldr	r1, [r3, #8]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f000 fb35 	bl	800653c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	609a      	str	r2, [r3, #8]
      break;
 8005eea:	e04f      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f000 fb1e 	bl	800653c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f0e:	609a      	str	r2, [r3, #8]
      break;
 8005f10:	e03c      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6859      	ldr	r1, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f000 fa92 	bl	8006448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2150      	movs	r1, #80	; 0x50
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 faeb 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f30:	e02c      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f000 fab1 	bl	80064a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2160      	movs	r1, #96	; 0x60
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fadb 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f50:	e01c      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f000 fa72 	bl	8006448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2140      	movs	r1, #64	; 0x40
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 facb 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f70:	e00c      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f000 fac2 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f82:	e003      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
      break;
 8005f88:	e000      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a40      	ldr	r2, [pc, #256]	; (80060bc <TIM_Base_SetConfig+0x114>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a3d      	ldr	r2, [pc, #244]	; (80060c0 <TIM_Base_SetConfig+0x118>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a3c      	ldr	r2, [pc, #240]	; (80060c4 <TIM_Base_SetConfig+0x11c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3b      	ldr	r2, [pc, #236]	; (80060c8 <TIM_Base_SetConfig+0x120>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3a      	ldr	r2, [pc, #232]	; (80060cc <TIM_Base_SetConfig+0x124>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d108      	bne.n	8005ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <TIM_Base_SetConfig+0x114>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d02b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006008:	d027      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <TIM_Base_SetConfig+0x118>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d023      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2b      	ldr	r2, [pc, #172]	; (80060c4 <TIM_Base_SetConfig+0x11c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01f      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <TIM_Base_SetConfig+0x120>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d01b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a29      	ldr	r2, [pc, #164]	; (80060cc <TIM_Base_SetConfig+0x124>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d017      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <TIM_Base_SetConfig+0x128>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a27      	ldr	r2, [pc, #156]	; (80060d4 <TIM_Base_SetConfig+0x12c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00f      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <TIM_Base_SetConfig+0x130>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a25      	ldr	r2, [pc, #148]	; (80060dc <TIM_Base_SetConfig+0x134>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d007      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a24      	ldr	r2, [pc, #144]	; (80060e0 <TIM_Base_SetConfig+0x138>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <TIM_Base_SetConfig+0x13c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d108      	bne.n	800606c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <TIM_Base_SetConfig+0x114>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_Base_SetConfig+0xf8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a0c      	ldr	r2, [pc, #48]	; (80060cc <TIM_Base_SetConfig+0x124>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d103      	bne.n	80060a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	615a      	str	r2, [r3, #20]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800
 80060dc:	40001800 	.word	0x40001800
 80060e0:	40001c00 	.word	0x40001c00
 80060e4:	40002000 	.word	0x40002000

080060e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0303 	bic.w	r3, r3, #3
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 0302 	bic.w	r3, r3, #2
 8006130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a20      	ldr	r2, [pc, #128]	; (80061c0 <TIM_OC1_SetConfig+0xd8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d003      	beq.n	800614c <TIM_OC1_SetConfig+0x64>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a1f      	ldr	r2, [pc, #124]	; (80061c4 <TIM_OC1_SetConfig+0xdc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10c      	bne.n	8006166 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0308 	bic.w	r3, r3, #8
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f023 0304 	bic.w	r3, r3, #4
 8006164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <TIM_OC1_SetConfig+0xd8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC1_SetConfig+0x8e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <TIM_OC1_SetConfig+0xdc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d111      	bne.n	800619a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800617c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40010400 	.word	0x40010400

080061c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f023 0210 	bic.w	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0320 	bic.w	r3, r3, #32
 8006212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a22      	ldr	r2, [pc, #136]	; (80062ac <TIM_OC2_SetConfig+0xe4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d003      	beq.n	8006230 <TIM_OC2_SetConfig+0x68>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <TIM_OC2_SetConfig+0xe8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10d      	bne.n	800624c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <TIM_OC2_SetConfig+0xe4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC2_SetConfig+0x94>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <TIM_OC2_SetConfig+0xe8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d113      	bne.n	8006284 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800626a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40010400 	.word	0x40010400

080062b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a21      	ldr	r2, [pc, #132]	; (8006394 <TIM_OC3_SetConfig+0xe0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC3_SetConfig+0x66>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a20      	ldr	r2, [pc, #128]	; (8006398 <TIM_OC3_SetConfig+0xe4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10d      	bne.n	8006336 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a16      	ldr	r2, [pc, #88]	; (8006394 <TIM_OC3_SetConfig+0xe0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC3_SetConfig+0x92>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <TIM_OC3_SetConfig+0xe4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d113      	bne.n	800636e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40010000 	.word	0x40010000
 8006398:	40010400 	.word	0x40010400

0800639c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	031b      	lsls	r3, r3, #12
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a12      	ldr	r2, [pc, #72]	; (8006440 <TIM_OC4_SetConfig+0xa4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_OC4_SetConfig+0x68>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a11      	ldr	r2, [pc, #68]	; (8006444 <TIM_OC4_SetConfig+0xa8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d109      	bne.n	8006418 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	019b      	lsls	r3, r3, #6
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40010000 	.word	0x40010000
 8006444:	40010400 	.word	0x40010400

08006448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 030a 	bic.w	r3, r3, #10
 8006484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0210 	bic.w	r2, r3, #16
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	f043 0307 	orr.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	431a      	orrs	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2201      	movs	r2, #1
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	43db      	mvns	r3, r3
 800659e:	401a      	ands	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1a      	ldr	r2, [r3, #32]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	fa01 f303 	lsl.w	r3, r1, r3
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065dc:	2302      	movs	r3, #2
 80065de:	e05a      	b.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d022      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662c:	d01d      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d018      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00e      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a18      	ldr	r2, [pc, #96]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d009      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a15      	ldr	r2, [pc, #84]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d10c      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4313      	orrs	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	40010400 	.word	0x40010400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40001800 	.word	0x40001800

080066c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066d8:	2302      	movs	r3, #2
 80066da:	e03d      	b.n	8006758 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e03f      	b.n	80067f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fc fa26 	bl	8002bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2224      	movs	r2, #36	; 0x24
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 ff81 	bl	80076b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695a      	ldr	r2, [r3, #20]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08c      	sub	sp, #48	; 0x30
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b20      	cmp	r3, #32
 8006818:	d165      	bne.n	80068e6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_UART_Transmit_DMA+0x26>
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e05e      	b.n	80068e8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_UART_Transmit_DMA+0x38>
 8006834:	2302      	movs	r3, #2
 8006836:	e057      	b.n	80068e8 <HAL_UART_Transmit_DMA+0xe8>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	88fa      	ldrh	r2, [r7, #6]
 800684a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	88fa      	ldrh	r2, [r7, #6]
 8006850:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2221      	movs	r2, #33	; 0x21
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006864:	4a22      	ldr	r2, [pc, #136]	; (80068f0 <HAL_UART_Transmit_DMA+0xf0>)
 8006866:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686c:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <HAL_UART_Transmit_DMA+0xf4>)
 800686e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <HAL_UART_Transmit_DMA+0xf8>)
 8006876:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	2200      	movs	r2, #0
 800687e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006880:	f107 0308 	add.w	r3, r7, #8
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3304      	adds	r3, #4
 8006894:	461a      	mov	r2, r3
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	f7fd fdaa 	bl	80043f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3314      	adds	r3, #20
 80068b4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	617b      	str	r3, [r7, #20]
   return(result);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3314      	adds	r3, #20
 80068cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ce:	627a      	str	r2, [r7, #36]	; 0x24
 80068d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6a39      	ldr	r1, [r7, #32]
 80068d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	61fb      	str	r3, [r7, #28]
   return(result);
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e5      	bne.n	80068ae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e000      	b.n	80068e8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
  }
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3730      	adds	r7, #48	; 0x30
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	08006f49 	.word	0x08006f49
 80068f4:	08006fe3 	.word	0x08006fe3
 80068f8:	0800715b 	.word	0x0800715b

080068fc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08c      	sub	sp, #48	; 0x30
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b20      	cmp	r3, #32
 8006914:	d152      	bne.n	80069bc <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e04b      	b.n	80069be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006930:	2302      	movs	r3, #2
 8006932:	e044      	b.n	80069be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	461a      	mov	r2, r3
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fc51 	bl	80071f0 <UART_Start_Receive_DMA>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006958:	2b00      	cmp	r3, #0
 800695a:	d12c      	bne.n	80069b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b01      	cmp	r3, #1
 8006962:	d125      	bne.n	80069b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	330c      	adds	r3, #12
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	617b      	str	r3, [r7, #20]
   return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f043 0310 	orr.w	r3, r3, #16
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800699a:	627a      	str	r2, [r7, #36]	; 0x24
 800699c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6a39      	ldr	r1, [r7, #32]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80069ae:	e002      	b.n	80069b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80069b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069ba:	e000      	b.n	80069be <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80069bc:	2302      	movs	r3, #2
  }
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3730      	adds	r7, #48	; 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b0ba      	sub	sp, #232	; 0xe8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10f      	bne.n	8006a2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <HAL_UART_IRQHandler+0x66>
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fd87 	bl	800753a <UART_Receive_IT>
      return;
 8006a2c:	e256      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 80de 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x22c>
 8006a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80d1 	beq.w	8006bf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <HAL_UART_IRQHandler+0xae>
 8006a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <HAL_UART_IRQHandler+0xd2>
 8006a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f043 0202 	orr.w	r2, r3, #2
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <HAL_UART_IRQHandler+0xf6>
 8006aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	f043 0204 	orr.w	r2, r3, #4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d011      	beq.n	8006aee <HAL_UART_IRQHandler+0x126>
 8006aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	f043 0208 	orr.w	r2, r3, #8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 81ed 	beq.w	8006ed2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_UART_IRQHandler+0x14e>
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fd12 	bl	800753a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	bf0c      	ite	eq
 8006b24:	2301      	moveq	r3, #1
 8006b26:	2300      	movne	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <HAL_UART_IRQHandler+0x17a>
 8006b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04f      	beq.n	8006be2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fc1a 	bl	800737c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	d141      	bne.n	8006bda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1d9      	bne.n	8006b56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d013      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	4a7d      	ldr	r2, [pc, #500]	; (8006da4 <HAL_UART_IRQHandler+0x3dc>)
 8006bb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fd fce2 	bl	8004580 <HAL_DMA_Abort_IT>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d016      	beq.n	8006bf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	e00e      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9ae 	bl	8006f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	e00a      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f9aa 	bl	8006f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	e006      	b.n	8006bf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9a6 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bee:	e170      	b.n	8006ed2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	bf00      	nop
    return;
 8006bf2:	e16e      	b.n	8006ed2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	f040 814a 	bne.w	8006e92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 8143 	beq.w	8006e92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 813c 	beq.w	8006e92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	f040 80b4 	bne.w	8006da8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8140 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	f080 8139 	bcs.w	8006ed6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c76:	f000 8088 	beq.w	8006d8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1d9      	bne.n	8006c7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3314      	adds	r3, #20
 8006ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3314      	adds	r3, #20
 8006ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e1      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e3      	bne.n	8006d02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e3      	bne.n	8006d48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fd fb8b 	bl	80044a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fa fb02 	bl	80013a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006da0:	e099      	b.n	8006ed6 <HAL_UART_IRQHandler+0x50e>
 8006da2:	bf00      	nop
 8006da4:	08007443 	.word	0x08007443
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 808b 	beq.w	8006eda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8086 	beq.w	8006eda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330c      	adds	r3, #12
 8006dee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006df2:	647a      	str	r2, [r7, #68]	; 0x44
 8006df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e3      	bne.n	8006dce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	623b      	str	r3, [r7, #32]
   return(result);
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e3      	bne.n	8006e06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0310 	bic.w	r3, r3, #16
 8006e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e70:	61fa      	str	r2, [r7, #28]
 8006e72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	69b9      	ldr	r1, [r7, #24]
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e3      	bne.n	8006e4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fa fa8a 	bl	80013a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e90:	e023      	b.n	8006eda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x4ea>
 8006e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fadd 	bl	800746a <UART_Transmit_IT>
    return;
 8006eb0:	e014      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00e      	beq.n	8006edc <HAL_UART_IRQHandler+0x514>
 8006ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fb1d 	bl	800750a <UART_EndTransmit_IT>
    return;
 8006ed0:	e004      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
    return;
 8006ed2:	bf00      	nop
 8006ed4:	e002      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
      return;
 8006ed6:	bf00      	nop
 8006ed8:	e000      	b.n	8006edc <HAL_UART_IRQHandler+0x514>
      return;
 8006eda:	bf00      	nop
  }
}
 8006edc:	37e8      	adds	r7, #232	; 0xe8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b090      	sub	sp, #64	; 0x40
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d137      	bne.n	8006fd4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f66:	2200      	movs	r2, #0
 8006f68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3314      	adds	r3, #20
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	623b      	str	r3, [r7, #32]
   return(result);
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3314      	adds	r3, #20
 8006f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e5      	bne.n	8006f6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fbe:	61fa      	str	r2, [r7, #28]
 8006fc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	69b9      	ldr	r1, [r7, #24]
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	617b      	str	r3, [r7, #20]
   return(result);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e5      	bne.n	8006f9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fd2:	e002      	b.n	8006fda <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006fd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006fd6:	f7ff ff85 	bl	8006ee4 <HAL_UART_TxCpltCallback>
}
 8006fda:	bf00      	nop
 8006fdc:	3740      	adds	r7, #64	; 0x40
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff ff81 	bl	8006ef8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ff6:	bf00      	nop
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b09c      	sub	sp, #112	; 0x70
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007016:	2b00      	cmp	r3, #0
 8007018:	d172      	bne.n	8007100 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800701a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701c:	2200      	movs	r2, #0
 800701e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	330c      	adds	r3, #12
 8007026:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007036:	66bb      	str	r3, [r7, #104]	; 0x68
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007040:	65ba      	str	r2, [r7, #88]	; 0x58
 8007042:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800704e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e5      	bne.n	8007020 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3314      	adds	r3, #20
 800705a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	667b      	str	r3, [r7, #100]	; 0x64
 800706c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3314      	adds	r3, #20
 8007072:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007074:	647a      	str	r2, [r7, #68]	; 0x44
 8007076:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800707a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	623b      	str	r3, [r7, #32]
   return(result);
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709e:	663b      	str	r3, [r7, #96]	; 0x60
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3314      	adds	r3, #20
 80070a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070a8:	633a      	str	r2, [r7, #48]	; 0x30
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e5      	bne.n	8007088 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d119      	bne.n	8007100 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	60fb      	str	r3, [r7, #12]
   return(result);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0310 	bic.w	r3, r3, #16
 80070e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070ec:	61fa      	str	r2, [r7, #28]
 80070ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	69b9      	ldr	r1, [r7, #24]
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	617b      	str	r3, [r7, #20]
   return(result);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e5      	bne.n	80070cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	2b01      	cmp	r3, #1
 8007106:	d106      	bne.n	8007116 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800710c:	4619      	mov	r1, r3
 800710e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007110:	f7fa f948 	bl	80013a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007114:	e002      	b.n	800711c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007116:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007118:	f7ff fef8 	bl	8006f0c <HAL_UART_RxCpltCallback>
}
 800711c:	bf00      	nop
 800711e:	3770      	adds	r7, #112	; 0x70
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	2b01      	cmp	r3, #1
 8007138:	d108      	bne.n	800714c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800713e:	085b      	lsrs	r3, r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	4619      	mov	r1, r3
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7fa f92d 	bl	80013a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800714a:	e002      	b.n	8007152 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fee7 	bl	8006f20 <HAL_UART_RxHalfCpltCallback>
}
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b80      	cmp	r3, #128	; 0x80
 8007178:	bf0c      	ite	eq
 800717a:	2301      	moveq	r3, #1
 800717c:	2300      	movne	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b21      	cmp	r3, #33	; 0x21
 800718c:	d108      	bne.n	80071a0 <UART_DMAError+0x46>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2200      	movs	r2, #0
 8007198:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800719a:	68b8      	ldr	r0, [r7, #8]
 800719c:	f000 f8c6 	bl	800732c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	bf0c      	ite	eq
 80071ae:	2301      	moveq	r3, #1
 80071b0:	2300      	movne	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b22      	cmp	r3, #34	; 0x22
 80071c0:	d108      	bne.n	80071d4 <UART_DMAError+0x7a>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2200      	movs	r2, #0
 80071cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80071ce:	68b8      	ldr	r0, [r7, #8]
 80071d0:	f000 f8d4 	bl	800737c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	f043 0210 	orr.w	r2, r3, #16
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071e0:	68b8      	ldr	r0, [r7, #8]
 80071e2:	f7ff fea7 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b098      	sub	sp, #96	; 0x60
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2222      	movs	r2, #34	; 0x22
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	4a40      	ldr	r2, [pc, #256]	; (8007320 <UART_Start_Receive_DMA+0x130>)
 800721e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	4a3f      	ldr	r2, [pc, #252]	; (8007324 <UART_Start_Receive_DMA+0x134>)
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	4a3e      	ldr	r2, [pc, #248]	; (8007328 <UART_Start_Receive_DMA+0x138>)
 800722e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	2200      	movs	r2, #0
 8007236:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007238:	f107 0308 	add.w	r3, r7, #8
 800723c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3304      	adds	r3, #4
 8007248:	4619      	mov	r1, r3
 800724a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	f7fd f8ce 	bl	80043f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007254:	2300      	movs	r3, #0
 8007256:	613b      	str	r3, [r7, #16]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	613b      	str	r3, [r7, #16]
 8007268:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d019      	beq.n	80072ae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	330c      	adds	r3, #12
 8007280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800728a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007290:	65bb      	str	r3, [r7, #88]	; 0x58
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800729a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800729c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80072a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80072a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e5      	bne.n	800727a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3314      	adds	r3, #20
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	657b      	str	r3, [r7, #84]	; 0x54
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3314      	adds	r3, #20
 80072cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e5      	bne.n	80072ae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3314      	adds	r3, #20
 80072e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	617b      	str	r3, [r7, #20]
   return(result);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f8:	653b      	str	r3, [r7, #80]	; 0x50
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3314      	adds	r3, #20
 8007300:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007302:	627a      	str	r2, [r7, #36]	; 0x24
 8007304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6a39      	ldr	r1, [r7, #32]
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3760      	adds	r7, #96	; 0x60
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	08006fff 	.word	0x08006fff
 8007324:	08007125 	.word	0x08007125
 8007328:	0800715b 	.word	0x0800715b

0800732c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b089      	sub	sp, #36	; 0x24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	330c      	adds	r3, #12
 800733a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	60bb      	str	r3, [r7, #8]
   return(result);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	330c      	adds	r3, #12
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	61ba      	str	r2, [r7, #24]
 8007356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	613b      	str	r3, [r7, #16]
   return(result);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e5      	bne.n	8007334 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007370:	bf00      	nop
 8007372:	3724      	adds	r7, #36	; 0x24
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b095      	sub	sp, #84	; 0x54
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800739a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073a4:	643a      	str	r2, [r7, #64]	; 0x40
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e5      	bne.n	8007384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3314      	adds	r3, #20
 80073be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e5      	bne.n	80073b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d119      	bne.n	8007428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	60bb      	str	r3, [r7, #8]
   return(result);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f023 0310 	bic.w	r3, r3, #16
 800740a:	647b      	str	r3, [r7, #68]	; 0x44
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	330c      	adds	r3, #12
 8007412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007414:	61ba      	str	r2, [r7, #24]
 8007416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6979      	ldr	r1, [r7, #20]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	613b      	str	r3, [r7, #16]
   return(result);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e5      	bne.n	80073f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007436:	bf00      	nop
 8007438:	3754      	adds	r7, #84	; 0x54
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff fd69 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b21      	cmp	r3, #33	; 0x21
 800747c:	d13e      	bne.n	80074fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007486:	d114      	bne.n	80074b2 <UART_Transmit_IT+0x48>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d110      	bne.n	80074b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	1c9a      	adds	r2, r3, #2
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	621a      	str	r2, [r3, #32]
 80074b0:	e008      	b.n	80074c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	1c59      	adds	r1, r3, #1
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6211      	str	r1, [r2, #32]
 80074bc:	781a      	ldrb	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	4619      	mov	r1, r3
 80074d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10f      	bne.n	80074f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	e000      	b.n	80074fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074fc:	2302      	movs	r3, #2
  }
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff fcda 	bl	8006ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b08c      	sub	sp, #48	; 0x30
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b22      	cmp	r3, #34	; 0x22
 800754c:	f040 80ab 	bne.w	80076a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007558:	d117      	bne.n	800758a <UART_Receive_IT+0x50>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d113      	bne.n	800758a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	b29b      	uxth	r3, r3
 8007574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007578:	b29a      	uxth	r2, r3
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007582:	1c9a      	adds	r2, r3, #2
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	629a      	str	r2, [r3, #40]	; 0x28
 8007588:	e026      	b.n	80075d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d007      	beq.n	80075ae <UART_Receive_IT+0x74>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <UART_Receive_IT+0x82>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	e008      	b.n	80075ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4619      	mov	r1, r3
 80075e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d15a      	bne.n	80076a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0220 	bic.w	r2, r2, #32
 80075fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800760a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695a      	ldr	r2, [r3, #20]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	2b01      	cmp	r3, #1
 800762a:	d135      	bne.n	8007698 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	613b      	str	r3, [r7, #16]
   return(result);
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f023 0310 	bic.w	r3, r3, #16
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007652:	623a      	str	r2, [r7, #32]
 8007654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	69f9      	ldr	r1, [r7, #28]
 8007658:	6a3a      	ldr	r2, [r7, #32]
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b10      	cmp	r3, #16
 8007672:	d10a      	bne.n	800768a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7f9 fe87 	bl	80013a4 <HAL_UARTEx_RxEventCallback>
 8007696:	e002      	b.n	800769e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff fc37 	bl	8006f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e002      	b.n	80076a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e000      	b.n	80076a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80076a6:	2302      	movs	r3, #2
  }
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3730      	adds	r7, #48	; 0x30
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076b4:	b0c0      	sub	sp, #256	; 0x100
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076cc:	68d9      	ldr	r1, [r3, #12]
 80076ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	ea40 0301 	orr.w	r3, r0, r1
 80076d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	431a      	orrs	r2, r3
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007708:	f021 010c 	bic.w	r1, r1, #12
 800770c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007716:	430b      	orrs	r3, r1
 8007718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800771a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772a:	6999      	ldr	r1, [r3, #24]
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	ea40 0301 	orr.w	r3, r0, r1
 8007736:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b8f      	ldr	r3, [pc, #572]	; (800797c <UART_SetConfig+0x2cc>)
 8007740:	429a      	cmp	r2, r3
 8007742:	d005      	beq.n	8007750 <UART_SetConfig+0xa0>
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4b8d      	ldr	r3, [pc, #564]	; (8007980 <UART_SetConfig+0x2d0>)
 800774c:	429a      	cmp	r2, r3
 800774e:	d104      	bne.n	800775a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007750:	f7fd ffa8 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8007754:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007758:	e003      	b.n	8007762 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800775a:	f7fd ff8f 	bl	800567c <HAL_RCC_GetPCLK1Freq>
 800775e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800776c:	f040 810c 	bne.w	8007988 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007774:	2200      	movs	r2, #0
 8007776:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800777a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800777e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007782:	4622      	mov	r2, r4
 8007784:	462b      	mov	r3, r5
 8007786:	1891      	adds	r1, r2, r2
 8007788:	65b9      	str	r1, [r7, #88]	; 0x58
 800778a:	415b      	adcs	r3, r3
 800778c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800778e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007792:	4621      	mov	r1, r4
 8007794:	eb12 0801 	adds.w	r8, r2, r1
 8007798:	4629      	mov	r1, r5
 800779a:	eb43 0901 	adc.w	r9, r3, r1
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077b2:	4690      	mov	r8, r2
 80077b4:	4699      	mov	r9, r3
 80077b6:	4623      	mov	r3, r4
 80077b8:	eb18 0303 	adds.w	r3, r8, r3
 80077bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077c0:	462b      	mov	r3, r5
 80077c2:	eb49 0303 	adc.w	r3, r9, r3
 80077c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80077da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80077de:	460b      	mov	r3, r1
 80077e0:	18db      	adds	r3, r3, r3
 80077e2:	653b      	str	r3, [r7, #80]	; 0x50
 80077e4:	4613      	mov	r3, r2
 80077e6:	eb42 0303 	adc.w	r3, r2, r3
 80077ea:	657b      	str	r3, [r7, #84]	; 0x54
 80077ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077f4:	f7f9 f9d8 	bl	8000ba8 <__aeabi_uldivmod>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4b61      	ldr	r3, [pc, #388]	; (8007984 <UART_SetConfig+0x2d4>)
 80077fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	011c      	lsls	r4, r3, #4
 8007806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780a:	2200      	movs	r2, #0
 800780c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007810:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007814:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007818:	4642      	mov	r2, r8
 800781a:	464b      	mov	r3, r9
 800781c:	1891      	adds	r1, r2, r2
 800781e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007820:	415b      	adcs	r3, r3
 8007822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007828:	4641      	mov	r1, r8
 800782a:	eb12 0a01 	adds.w	sl, r2, r1
 800782e:	4649      	mov	r1, r9
 8007830:	eb43 0b01 	adc.w	fp, r3, r1
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007840:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007848:	4692      	mov	sl, r2
 800784a:	469b      	mov	fp, r3
 800784c:	4643      	mov	r3, r8
 800784e:	eb1a 0303 	adds.w	r3, sl, r3
 8007852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007856:	464b      	mov	r3, r9
 8007858:	eb4b 0303 	adc.w	r3, fp, r3
 800785c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800786c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007870:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007874:	460b      	mov	r3, r1
 8007876:	18db      	adds	r3, r3, r3
 8007878:	643b      	str	r3, [r7, #64]	; 0x40
 800787a:	4613      	mov	r3, r2
 800787c:	eb42 0303 	adc.w	r3, r2, r3
 8007880:	647b      	str	r3, [r7, #68]	; 0x44
 8007882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007886:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800788a:	f7f9 f98d 	bl	8000ba8 <__aeabi_uldivmod>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4611      	mov	r1, r2
 8007894:	4b3b      	ldr	r3, [pc, #236]	; (8007984 <UART_SetConfig+0x2d4>)
 8007896:	fba3 2301 	umull	r2, r3, r3, r1
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	2264      	movs	r2, #100	; 0x64
 800789e:	fb02 f303 	mul.w	r3, r2, r3
 80078a2:	1acb      	subs	r3, r1, r3
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078aa:	4b36      	ldr	r3, [pc, #216]	; (8007984 <UART_SetConfig+0x2d4>)
 80078ac:	fba3 2302 	umull	r2, r3, r3, r2
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078b8:	441c      	add	r4, r3
 80078ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80078c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80078cc:	4642      	mov	r2, r8
 80078ce:	464b      	mov	r3, r9
 80078d0:	1891      	adds	r1, r2, r2
 80078d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80078d4:	415b      	adcs	r3, r3
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078dc:	4641      	mov	r1, r8
 80078de:	1851      	adds	r1, r2, r1
 80078e0:	6339      	str	r1, [r7, #48]	; 0x30
 80078e2:	4649      	mov	r1, r9
 80078e4:	414b      	adcs	r3, r1
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80078f4:	4659      	mov	r1, fp
 80078f6:	00cb      	lsls	r3, r1, #3
 80078f8:	4651      	mov	r1, sl
 80078fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078fe:	4651      	mov	r1, sl
 8007900:	00ca      	lsls	r2, r1, #3
 8007902:	4610      	mov	r0, r2
 8007904:	4619      	mov	r1, r3
 8007906:	4603      	mov	r3, r0
 8007908:	4642      	mov	r2, r8
 800790a:	189b      	adds	r3, r3, r2
 800790c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007910:	464b      	mov	r3, r9
 8007912:	460a      	mov	r2, r1
 8007914:	eb42 0303 	adc.w	r3, r2, r3
 8007918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007928:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800792c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007930:	460b      	mov	r3, r1
 8007932:	18db      	adds	r3, r3, r3
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
 8007936:	4613      	mov	r3, r2
 8007938:	eb42 0303 	adc.w	r3, r2, r3
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800793e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007942:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007946:	f7f9 f92f 	bl	8000ba8 <__aeabi_uldivmod>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <UART_SetConfig+0x2d4>)
 8007950:	fba3 1302 	umull	r1, r3, r3, r2
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	2164      	movs	r1, #100	; 0x64
 8007958:	fb01 f303 	mul.w	r3, r1, r3
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	3332      	adds	r3, #50	; 0x32
 8007962:	4a08      	ldr	r2, [pc, #32]	; (8007984 <UART_SetConfig+0x2d4>)
 8007964:	fba2 2303 	umull	r2, r3, r2, r3
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	f003 0207 	and.w	r2, r3, #7
 800796e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4422      	add	r2, r4
 8007976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007978:	e106      	b.n	8007b88 <UART_SetConfig+0x4d8>
 800797a:	bf00      	nop
 800797c:	40011000 	.word	0x40011000
 8007980:	40011400 	.word	0x40011400
 8007984:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800798c:	2200      	movs	r2, #0
 800798e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007992:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007996:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800799a:	4642      	mov	r2, r8
 800799c:	464b      	mov	r3, r9
 800799e:	1891      	adds	r1, r2, r2
 80079a0:	6239      	str	r1, [r7, #32]
 80079a2:	415b      	adcs	r3, r3
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
 80079a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079aa:	4641      	mov	r1, r8
 80079ac:	1854      	adds	r4, r2, r1
 80079ae:	4649      	mov	r1, r9
 80079b0:	eb43 0501 	adc.w	r5, r3, r1
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	00eb      	lsls	r3, r5, #3
 80079be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079c2:	00e2      	lsls	r2, r4, #3
 80079c4:	4614      	mov	r4, r2
 80079c6:	461d      	mov	r5, r3
 80079c8:	4643      	mov	r3, r8
 80079ca:	18e3      	adds	r3, r4, r3
 80079cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079d0:	464b      	mov	r3, r9
 80079d2:	eb45 0303 	adc.w	r3, r5, r3
 80079d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079f6:	4629      	mov	r1, r5
 80079f8:	008b      	lsls	r3, r1, #2
 80079fa:	4621      	mov	r1, r4
 80079fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a00:	4621      	mov	r1, r4
 8007a02:	008a      	lsls	r2, r1, #2
 8007a04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a08:	f7f9 f8ce 	bl	8000ba8 <__aeabi_uldivmod>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4b60      	ldr	r3, [pc, #384]	; (8007b94 <UART_SetConfig+0x4e4>)
 8007a12:	fba3 2302 	umull	r2, r3, r3, r2
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	011c      	lsls	r4, r3, #4
 8007a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	1891      	adds	r1, r2, r2
 8007a32:	61b9      	str	r1, [r7, #24]
 8007a34:	415b      	adcs	r3, r3
 8007a36:	61fb      	str	r3, [r7, #28]
 8007a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	1851      	adds	r1, r2, r1
 8007a40:	6139      	str	r1, [r7, #16]
 8007a42:	4649      	mov	r1, r9
 8007a44:	414b      	adcs	r3, r1
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a54:	4659      	mov	r1, fp
 8007a56:	00cb      	lsls	r3, r1, #3
 8007a58:	4651      	mov	r1, sl
 8007a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a5e:	4651      	mov	r1, sl
 8007a60:	00ca      	lsls	r2, r1, #3
 8007a62:	4610      	mov	r0, r2
 8007a64:	4619      	mov	r1, r3
 8007a66:	4603      	mov	r3, r0
 8007a68:	4642      	mov	r2, r8
 8007a6a:	189b      	adds	r3, r3, r2
 8007a6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a70:	464b      	mov	r3, r9
 8007a72:	460a      	mov	r2, r1
 8007a74:	eb42 0303 	adc.w	r3, r2, r3
 8007a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a94:	4649      	mov	r1, r9
 8007a96:	008b      	lsls	r3, r1, #2
 8007a98:	4641      	mov	r1, r8
 8007a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	008a      	lsls	r2, r1, #2
 8007aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007aa6:	f7f9 f87f 	bl	8000ba8 <__aeabi_uldivmod>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4b38      	ldr	r3, [pc, #224]	; (8007b94 <UART_SetConfig+0x4e4>)
 8007ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ab6:	095b      	lsrs	r3, r3, #5
 8007ab8:	2264      	movs	r2, #100	; 0x64
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	1acb      	subs	r3, r1, r3
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	3332      	adds	r3, #50	; 0x32
 8007ac4:	4a33      	ldr	r2, [pc, #204]	; (8007b94 <UART_SetConfig+0x4e4>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	095b      	lsrs	r3, r3, #5
 8007acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ad0:	441c      	add	r4, r3
 8007ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	673b      	str	r3, [r7, #112]	; 0x70
 8007ada:	677a      	str	r2, [r7, #116]	; 0x74
 8007adc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	1891      	adds	r1, r2, r2
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	415b      	adcs	r3, r3
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007af0:	4641      	mov	r1, r8
 8007af2:	1851      	adds	r1, r2, r1
 8007af4:	6039      	str	r1, [r7, #0]
 8007af6:	4649      	mov	r1, r9
 8007af8:	414b      	adcs	r3, r1
 8007afa:	607b      	str	r3, [r7, #4]
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	f04f 0300 	mov.w	r3, #0
 8007b04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b08:	4659      	mov	r1, fp
 8007b0a:	00cb      	lsls	r3, r1, #3
 8007b0c:	4651      	mov	r1, sl
 8007b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b12:	4651      	mov	r1, sl
 8007b14:	00ca      	lsls	r2, r1, #3
 8007b16:	4610      	mov	r0, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	189b      	adds	r3, r3, r2
 8007b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b22:	464b      	mov	r3, r9
 8007b24:	460a      	mov	r2, r1
 8007b26:	eb42 0303 	adc.w	r3, r2, r3
 8007b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	663b      	str	r3, [r7, #96]	; 0x60
 8007b36:	667a      	str	r2, [r7, #100]	; 0x64
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b44:	4649      	mov	r1, r9
 8007b46:	008b      	lsls	r3, r1, #2
 8007b48:	4641      	mov	r1, r8
 8007b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b4e:	4641      	mov	r1, r8
 8007b50:	008a      	lsls	r2, r1, #2
 8007b52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b56:	f7f9 f827 	bl	8000ba8 <__aeabi_uldivmod>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <UART_SetConfig+0x4e4>)
 8007b60:	fba3 1302 	umull	r1, r3, r3, r2
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	2164      	movs	r1, #100	; 0x64
 8007b68:	fb01 f303 	mul.w	r3, r1, r3
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	3332      	adds	r3, #50	; 0x32
 8007b72:	4a08      	ldr	r2, [pc, #32]	; (8007b94 <UART_SetConfig+0x4e4>)
 8007b74:	fba2 2303 	umull	r2, r3, r2, r3
 8007b78:	095b      	lsrs	r3, r3, #5
 8007b7a:	f003 020f 	and.w	r2, r3, #15
 8007b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4422      	add	r2, r4
 8007b86:	609a      	str	r2, [r3, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b94:	51eb851f 	.word	0x51eb851f

08007b98 <__NVIC_SetPriority>:
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	6039      	str	r1, [r7, #0]
 8007ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	db0a      	blt.n	8007bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	490c      	ldr	r1, [pc, #48]	; (8007be4 <__NVIC_SetPriority+0x4c>)
 8007bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb6:	0112      	lsls	r2, r2, #4
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	440b      	add	r3, r1
 8007bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007bc0:	e00a      	b.n	8007bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	4908      	ldr	r1, [pc, #32]	; (8007be8 <__NVIC_SetPriority+0x50>)
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	f003 030f 	and.w	r3, r3, #15
 8007bce:	3b04      	subs	r3, #4
 8007bd0:	0112      	lsls	r2, r2, #4
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	761a      	strb	r2, [r3, #24]
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	e000e100 	.word	0xe000e100
 8007be8:	e000ed00 	.word	0xe000ed00

08007bec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	f06f 0004 	mvn.w	r0, #4
 8007bf6:	f7ff ffcf 	bl	8007b98 <__NVIC_SetPriority>
#endif
}
 8007bfa:	bf00      	nop
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c06:	f3ef 8305 	mrs	r3, IPSR
 8007c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c12:	f06f 0305 	mvn.w	r3, #5
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e00c      	b.n	8007c34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <osKernelInitialize+0x44>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d105      	bne.n	8007c2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c22:	4b08      	ldr	r3, [pc, #32]	; (8007c44 <osKernelInitialize+0x44>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	e002      	b.n	8007c34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c34:	687b      	ldr	r3, [r7, #4]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20000afc 	.word	0x20000afc

08007c48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c4e:	f3ef 8305 	mrs	r3, IPSR
 8007c52:	603b      	str	r3, [r7, #0]
  return(result);
 8007c54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c5a:	f06f 0305 	mvn.w	r3, #5
 8007c5e:	607b      	str	r3, [r7, #4]
 8007c60:	e010      	b.n	8007c84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <osKernelStart+0x48>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d109      	bne.n	8007c7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c6a:	f7ff ffbf 	bl	8007bec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <osKernelStart+0x48>)
 8007c70:	2202      	movs	r2, #2
 8007c72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c74:	f001 f87c 	bl	8008d70 <vTaskStartScheduler>
      stat = osOK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	e002      	b.n	8007c84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c84:	687b      	ldr	r3, [r7, #4]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000afc 	.word	0x20000afc

08007c94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	; 0x38
 8007c98:	af04      	add	r7, sp, #16
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca4:	f3ef 8305 	mrs	r3, IPSR
 8007ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8007caa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d17e      	bne.n	8007dae <osThreadNew+0x11a>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d07b      	beq.n	8007dae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cb6:	2380      	movs	r3, #128	; 0x80
 8007cb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007cba:	2318      	movs	r3, #24
 8007cbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d045      	beq.n	8007d5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <osThreadNew+0x48>
        name = attr->name;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <osThreadNew+0x6e>
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2b38      	cmp	r3, #56	; 0x38
 8007cf4:	d805      	bhi.n	8007d02 <osThreadNew+0x6e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <osThreadNew+0x72>
        return (NULL);
 8007d02:	2300      	movs	r3, #0
 8007d04:	e054      	b.n	8007db0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	089b      	lsrs	r3, r3, #2
 8007d14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00e      	beq.n	8007d3c <osThreadNew+0xa8>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	2ba7      	cmp	r3, #167	; 0xa7
 8007d24:	d90a      	bls.n	8007d3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <osThreadNew+0xa8>
        mem = 1;
 8007d36:	2301      	movs	r3, #1
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	e010      	b.n	8007d5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10c      	bne.n	8007d5e <osThreadNew+0xca>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d108      	bne.n	8007d5e <osThreadNew+0xca>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <osThreadNew+0xca>
          mem = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61bb      	str	r3, [r7, #24]
 8007d58:	e001      	b.n	8007d5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d110      	bne.n	8007d86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d6c:	9202      	str	r2, [sp, #8]
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	6a3a      	ldr	r2, [r7, #32]
 8007d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fe0c 	bl	8008998 <xTaskCreateStatic>
 8007d80:	4603      	mov	r3, r0
 8007d82:	613b      	str	r3, [r7, #16]
 8007d84:	e013      	b.n	8007dae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d110      	bne.n	8007dae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	f107 0310 	add.w	r3, r7, #16
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fe57 	bl	8008a52 <xTaskCreate>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d001      	beq.n	8007dae <osThreadNew+0x11a>
            hTask = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007dae:	693b      	ldr	r3, [r7, #16]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3728      	adds	r7, #40	; 0x28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dc0:	f3ef 8305 	mrs	r3, IPSR
 8007dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <osDelay+0x1c>
    stat = osErrorISR;
 8007dcc:	f06f 0305 	mvn.w	r3, #5
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e007      	b.n	8007de4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 ff92 	bl	8008d08 <vTaskDelay>
    }
  }

  return (stat);
 8007de4:	68fb      	ldr	r3, [r7, #12]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4a07      	ldr	r2, [pc, #28]	; (8007e1c <vApplicationGetIdleTaskMemory+0x2c>)
 8007e00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4a06      	ldr	r2, [pc, #24]	; (8007e20 <vApplicationGetIdleTaskMemory+0x30>)
 8007e06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2280      	movs	r2, #128	; 0x80
 8007e0c:	601a      	str	r2, [r3, #0]
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000b00 	.word	0x20000b00
 8007e20:	20000ba8 	.word	0x20000ba8

08007e24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a07      	ldr	r2, [pc, #28]	; (8007e50 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4a06      	ldr	r2, [pc, #24]	; (8007e54 <vApplicationGetTimerTaskMemory+0x30>)
 8007e3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	20000da8 	.word	0x20000da8
 8007e54:	20000e50 	.word	0x20000e50

08007e58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f103 0208 	add.w	r2, r3, #8
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f103 0208 	add.w	r2, r3, #8
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f103 0208 	add.w	r2, r3, #8
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	601a      	str	r2, [r3, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f10:	d103      	bne.n	8007f1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	e00c      	b.n	8007f34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e002      	b.n	8007f28 <vListInsert+0x2e>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d2f6      	bcs.n	8007f22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	601a      	str	r2, [r3, #0]
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6892      	ldr	r2, [r2, #8]
 8007f82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6852      	ldr	r2, [r2, #4]
 8007f8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d103      	bne.n	8007fa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	1e5a      	subs	r2, r3, #1
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10a      	bne.n	8007fea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fea:	f002 f87b 	bl	800a0e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	68f9      	ldr	r1, [r7, #12]
 8007ff8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ffa:	fb01 f303 	mul.w	r3, r1, r3
 8007ffe:	441a      	add	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801a:	3b01      	subs	r3, #1
 800801c:	68f9      	ldr	r1, [r7, #12]
 800801e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	22ff      	movs	r2, #255	; 0xff
 800802e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	22ff      	movs	r2, #255	; 0xff
 8008036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d114      	bne.n	800806a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01a      	beq.n	800807e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3310      	adds	r3, #16
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f929 	bl	80092a4 <xTaskRemoveFromEventList>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d012      	beq.n	800807e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008058:	4b0c      	ldr	r3, [pc, #48]	; (800808c <xQueueGenericReset+0xcc>)
 800805a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	e009      	b.n	800807e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3310      	adds	r3, #16
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff fef2 	bl	8007e58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff feed 	bl	8007e58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800807e:	f002 f861 	bl	800a144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008082:	2301      	movs	r3, #1
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	e000ed04 	.word	0xe000ed04

08008090 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08e      	sub	sp, #56	; 0x38
 8008094:	af02      	add	r7, sp, #8
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <xQueueGenericCreateStatic+0x52>
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <xQueueGenericCreateStatic+0x56>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e000      	b.n	80080e8 <xQueueGenericCreateStatic+0x58>
 80080e6:	2300      	movs	r3, #0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	623b      	str	r3, [r7, #32]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <xQueueGenericCreateStatic+0x7e>
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <xQueueGenericCreateStatic+0x82>
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <xQueueGenericCreateStatic+0x84>
 8008112:	2300      	movs	r3, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	61fb      	str	r3, [r7, #28]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800812e:	2350      	movs	r3, #80	; 0x50
 8008130:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b50      	cmp	r3, #80	; 0x50
 8008136:	d00a      	beq.n	800814e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	61bb      	str	r3, [r7, #24]
}
 800814a:	bf00      	nop
 800814c:	e7fe      	b.n	800814c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800814e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00d      	beq.n	8008176 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008162:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	4613      	mov	r3, r2
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f805 	bl	8008180 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008178:	4618      	mov	r0, r3
 800817a:	3730      	adds	r7, #48	; 0x30
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e002      	b.n	80081a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081ae:	2101      	movs	r1, #1
 80081b0:	69b8      	ldr	r0, [r7, #24]
 80081b2:	f7ff ff05 	bl	8007fc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081be:	bf00      	nop
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081d6:	2300      	movs	r3, #0
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <xQueueGenericSend+0x32>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d103      	bne.n	8008208 <xQueueGenericSend+0x40>
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <xQueueGenericSend+0x44>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <xQueueGenericSend+0x46>
 800820c:	2300      	movs	r3, #0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10a      	bne.n	8008228 <xQueueGenericSend+0x60>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d103      	bne.n	8008236 <xQueueGenericSend+0x6e>
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <xQueueGenericSend+0x72>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueGenericSend+0x74>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <xQueueGenericSend+0x8e>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	623b      	str	r3, [r7, #32]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008256:	f001 f9e7 	bl	8009628 <xTaskGetSchedulerState>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d102      	bne.n	8008266 <xQueueGenericSend+0x9e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <xQueueGenericSend+0xa2>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <xQueueGenericSend+0xa4>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueGenericSend+0xbe>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61fb      	str	r3, [r7, #28]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008286:	f001 ff2d 	bl	800a0e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008292:	429a      	cmp	r2, r3
 8008294:	d302      	bcc.n	800829c <xQueueGenericSend+0xd4>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d129      	bne.n	80082f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082a2:	f000 fa0b 	bl	80086bc <prvCopyDataToQueue>
 80082a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d010      	beq.n	80082d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	3324      	adds	r3, #36	; 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fff5 	bl	80092a4 <xTaskRemoveFromEventList>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d013      	beq.n	80082e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082c0:	4b3f      	ldr	r3, [pc, #252]	; (80083c0 <xQueueGenericSend+0x1f8>)
 80082c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	e00a      	b.n	80082e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082d8:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <xQueueGenericSend+0x1f8>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082e8:	f001 ff2c 	bl	800a144 <vPortExitCritical>
				return pdPASS;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e063      	b.n	80083b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082f6:	f001 ff25 	bl	800a144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e05c      	b.n	80083b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	4618      	mov	r0, r3
 800830a:	f001 f82f 	bl	800936c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800830e:	2301      	movs	r3, #1
 8008310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008312:	f001 ff17 	bl	800a144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008316:	f000 fd9b 	bl	8008e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800831a:	f001 fee3 	bl	800a0e4 <vPortEnterCritical>
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008324:	b25b      	sxtb	r3, r3
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800832a:	d103      	bne.n	8008334 <xQueueGenericSend+0x16c>
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800833a:	b25b      	sxtb	r3, r3
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008340:	d103      	bne.n	800834a <xQueueGenericSend+0x182>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800834a:	f001 fefb 	bl	800a144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800834e:	1d3a      	adds	r2, r7, #4
 8008350:	f107 0314 	add.w	r3, r7, #20
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f001 f81e 	bl	8009398 <xTaskCheckForTimeOut>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d124      	bne.n	80083ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008364:	f000 faa2 	bl	80088ac <prvIsQueueFull>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d018      	beq.n	80083a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	3310      	adds	r3, #16
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f000 ff44 	bl	8009204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800837c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800837e:	f000 fa2d 	bl	80087dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008382:	f000 fd73 	bl	8008e6c <xTaskResumeAll>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f47f af7c 	bne.w	8008286 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800838e:	4b0c      	ldr	r3, [pc, #48]	; (80083c0 <xQueueGenericSend+0x1f8>)
 8008390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	e772      	b.n	8008286 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083a2:	f000 fa1b 	bl	80087dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083a6:	f000 fd61 	bl	8008e6c <xTaskResumeAll>
 80083aa:	e76c      	b.n	8008286 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ae:	f000 fa15 	bl	80087dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083b2:	f000 fd5b 	bl	8008e6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3738      	adds	r7, #56	; 0x38
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b090      	sub	sp, #64	; 0x40
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <xQueueGenericSendFromISR+0x3c>
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <xQueueGenericSendFromISR+0x40>
 8008400:	2301      	movs	r3, #1
 8008402:	e000      	b.n	8008406 <xQueueGenericSendFromISR+0x42>
 8008404:	2300      	movs	r3, #0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d103      	bne.n	800842e <xQueueGenericSendFromISR+0x6a>
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <xQueueGenericSendFromISR+0x6e>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <xQueueGenericSendFromISR+0x70>
 8008432:	2300      	movs	r3, #0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	623b      	str	r3, [r7, #32]
}
 800844a:	bf00      	nop
 800844c:	e7fe      	b.n	800844c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800844e:	f001 ff2b 	bl	800a2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008452:	f3ef 8211 	mrs	r2, BASEPRI
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	61fa      	str	r2, [r7, #28]
 8008468:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800846a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800846c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008476:	429a      	cmp	r2, r3
 8008478:	d302      	bcc.n	8008480 <xQueueGenericSendFromISR+0xbc>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d12f      	bne.n	80084e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008496:	f000 f911 	bl	80086bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800849a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a2:	d112      	bne.n	80084ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d016      	beq.n	80084da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	3324      	adds	r3, #36	; 0x24
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fef7 	bl	80092a4 <xTaskRemoveFromEventList>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00e      	beq.n	80084da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00b      	beq.n	80084da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	e007      	b.n	80084da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084ce:	3301      	adds	r3, #1
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	b25a      	sxtb	r2, r3
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084da:	2301      	movs	r3, #1
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084de:	e001      	b.n	80084e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3740      	adds	r7, #64	; 0x40
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08c      	sub	sp, #48	; 0x30
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008508:	2300      	movs	r3, #0
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <xQueueReceive+0x30>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	623b      	str	r3, [r7, #32]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <xQueueReceive+0x3e>
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <xQueueReceive+0x42>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <xQueueReceive+0x44>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10a      	bne.n	800855a <xQueueReceive+0x5e>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	61fb      	str	r3, [r7, #28]
}
 8008556:	bf00      	nop
 8008558:	e7fe      	b.n	8008558 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800855a:	f001 f865 	bl	8009628 <xTaskGetSchedulerState>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <xQueueReceive+0x6e>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <xQueueReceive+0x72>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <xQueueReceive+0x74>
 800856e:	2300      	movs	r3, #0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10a      	bne.n	800858a <xQueueReceive+0x8e>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	61bb      	str	r3, [r7, #24]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800858a:	f001 fdab 	bl	800a0e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01f      	beq.n	80085da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800859e:	f000 f8f7 	bl	8008790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	1e5a      	subs	r2, r3, #1
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00f      	beq.n	80085d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	3310      	adds	r3, #16
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fe74 	bl	80092a4 <xTaskRemoveFromEventList>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085c2:	4b3d      	ldr	r3, [pc, #244]	; (80086b8 <xQueueReceive+0x1bc>)
 80085c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085d2:	f001 fdb7 	bl	800a144 <vPortExitCritical>
				return pdPASS;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e069      	b.n	80086ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d103      	bne.n	80085e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085e0:	f001 fdb0 	bl	800a144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e062      	b.n	80086ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d106      	bne.n	80085fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085ee:	f107 0310 	add.w	r3, r7, #16
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 feba 	bl	800936c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085f8:	2301      	movs	r3, #1
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085fc:	f001 fda2 	bl	800a144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008600:	f000 fc26 	bl	8008e50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008604:	f001 fd6e 	bl	800a0e4 <vPortEnterCritical>
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800860e:	b25b      	sxtb	r3, r3
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008614:	d103      	bne.n	800861e <xQueueReceive+0x122>
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008624:	b25b      	sxtb	r3, r3
 8008626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800862a:	d103      	bne.n	8008634 <xQueueReceive+0x138>
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008634:	f001 fd86 	bl	800a144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008638:	1d3a      	adds	r2, r7, #4
 800863a:	f107 0310 	add.w	r3, r7, #16
 800863e:	4611      	mov	r1, r2
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fea9 	bl	8009398 <xTaskCheckForTimeOut>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d123      	bne.n	8008694 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800864c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864e:	f000 f917 	bl	8008880 <prvIsQueueEmpty>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d017      	beq.n	8008688 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	3324      	adds	r3, #36	; 0x24
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fdcf 	bl	8009204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008668:	f000 f8b8 	bl	80087dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800866c:	f000 fbfe 	bl	8008e6c <xTaskResumeAll>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d189      	bne.n	800858a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008676:	4b10      	ldr	r3, [pc, #64]	; (80086b8 <xQueueReceive+0x1bc>)
 8008678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	e780      	b.n	800858a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800868a:	f000 f8a7 	bl	80087dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800868e:	f000 fbed 	bl	8008e6c <xTaskResumeAll>
 8008692:	e77a      	b.n	800858a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008696:	f000 f8a1 	bl	80087dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800869a:	f000 fbe7 	bl	8008e6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800869e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a0:	f000 f8ee 	bl	8008880 <prvIsQueueEmpty>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f43f af6f 	beq.w	800858a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3730      	adds	r7, #48	; 0x30
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	e000ed04 	.word	0xe000ed04

080086bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10d      	bne.n	80086f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d14d      	bne.n	800877e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 ffbc 	bl	8009664 <xTaskPriorityDisinherit>
 80086ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	609a      	str	r2, [r3, #8]
 80086f4:	e043      	b.n	800877e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d119      	bne.n	8008730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6858      	ldr	r0, [r3, #4]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	461a      	mov	r2, r3
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	f002 fdcf 	bl	800b2aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	441a      	add	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	429a      	cmp	r2, r3
 8008724:	d32b      	bcc.n	800877e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	605a      	str	r2, [r3, #4]
 800872e:	e026      	b.n	800877e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68d8      	ldr	r0, [r3, #12]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008738:	461a      	mov	r2, r3
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	f002 fdb5 	bl	800b2aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	425b      	negs	r3, r3
 800874a:	441a      	add	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d207      	bcs.n	800876c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	425b      	negs	r3, r3
 8008766:	441a      	add	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d105      	bne.n	800877e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	3b01      	subs	r3, #1
 800877c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008786:	697b      	ldr	r3, [r7, #20]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d018      	beq.n	80087d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	441a      	add	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d303      	bcc.n	80087c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68d9      	ldr	r1, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087cc:	461a      	mov	r2, r3
 80087ce:	6838      	ldr	r0, [r7, #0]
 80087d0:	f002 fd6b 	bl	800b2aa <memcpy>
	}
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087e4:	f001 fc7e 	bl	800a0e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087f0:	e011      	b.n	8008816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d012      	beq.n	8008820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3324      	adds	r3, #36	; 0x24
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fd50 	bl	80092a4 <xTaskRemoveFromEventList>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800880a:	f000 fe27 	bl	800945c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	3b01      	subs	r3, #1
 8008812:	b2db      	uxtb	r3, r3
 8008814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800881a:	2b00      	cmp	r3, #0
 800881c:	dce9      	bgt.n	80087f2 <prvUnlockQueue+0x16>
 800881e:	e000      	b.n	8008822 <prvUnlockQueue+0x46>
					break;
 8008820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	22ff      	movs	r2, #255	; 0xff
 8008826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800882a:	f001 fc8b 	bl	800a144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800882e:	f001 fc59 	bl	800a0e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800883a:	e011      	b.n	8008860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d012      	beq.n	800886a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3310      	adds	r3, #16
 8008848:	4618      	mov	r0, r3
 800884a:	f000 fd2b 	bl	80092a4 <xTaskRemoveFromEventList>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008854:	f000 fe02 	bl	800945c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	3b01      	subs	r3, #1
 800885c:	b2db      	uxtb	r3, r3
 800885e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008864:	2b00      	cmp	r3, #0
 8008866:	dce9      	bgt.n	800883c <prvUnlockQueue+0x60>
 8008868:	e000      	b.n	800886c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800886a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	22ff      	movs	r2, #255	; 0xff
 8008870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008874:	f001 fc66 	bl	800a144 <vPortExitCritical>
}
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008888:	f001 fc2c 	bl	800a0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	2b00      	cmp	r3, #0
 8008892:	d102      	bne.n	800889a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008894:	2301      	movs	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e001      	b.n	800889e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800889e:	f001 fc51 	bl	800a144 <vPortExitCritical>

	return xReturn;
 80088a2:	68fb      	ldr	r3, [r7, #12]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088b4:	f001 fc16 	bl	800a0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d102      	bne.n	80088ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088c4:	2301      	movs	r3, #1
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	e001      	b.n	80088ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088ce:	f001 fc39 	bl	800a144 <vPortExitCritical>

	return xReturn;
 80088d2:	68fb      	ldr	r3, [r7, #12]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	e014      	b.n	8008916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088ec:	4a0f      	ldr	r2, [pc, #60]	; (800892c <vQueueAddToRegistry+0x50>)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088f8:	490c      	ldr	r1, [pc, #48]	; (800892c <vQueueAddToRegistry+0x50>)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008902:	4a0a      	ldr	r2, [pc, #40]	; (800892c <vQueueAddToRegistry+0x50>)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	4413      	add	r3, r2
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800890e:	e006      	b.n	800891e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3301      	adds	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b07      	cmp	r3, #7
 800891a:	d9e7      	bls.n	80088ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	20001250 	.word	0x20001250

08008930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008940:	f001 fbd0 	bl	800a0e4 <vPortEnterCritical>
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800894a:	b25b      	sxtb	r3, r3
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008950:	d103      	bne.n	800895a <vQueueWaitForMessageRestricted+0x2a>
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008960:	b25b      	sxtb	r3, r3
 8008962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008966:	d103      	bne.n	8008970 <vQueueWaitForMessageRestricted+0x40>
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008970:	f001 fbe8 	bl	800a144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008978:	2b00      	cmp	r3, #0
 800897a:	d106      	bne.n	800898a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	3324      	adds	r3, #36	; 0x24
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	4618      	mov	r0, r3
 8008986:	f000 fc61 	bl	800924c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800898a:	6978      	ldr	r0, [r7, #20]
 800898c:	f7ff ff26 	bl	80087dc <prvUnlockQueue>
	}
 8008990:	bf00      	nop
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08e      	sub	sp, #56	; 0x38
 800899c:	af04      	add	r7, sp, #16
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	623b      	str	r3, [r7, #32]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <xTaskCreateStatic+0x46>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	61fb      	str	r3, [r7, #28]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089de:	23a8      	movs	r3, #168	; 0xa8
 80089e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	2ba8      	cmp	r3, #168	; 0xa8
 80089e6:	d00a      	beq.n	80089fe <xTaskCreateStatic+0x66>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	61bb      	str	r3, [r7, #24]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01e      	beq.n	8008a44 <xTaskCreateStatic+0xac>
 8008a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01b      	beq.n	8008a44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	2202      	movs	r2, #2
 8008a1a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	f107 0314 	add.w	r3, r7, #20
 8008a2a:	9301      	str	r3, [sp, #4]
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 f850 	bl	8008adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a3e:	f000 f8f3 	bl	8008c28 <prvAddNewTaskToReadyList>
 8008a42:	e001      	b.n	8008a48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a48:	697b      	ldr	r3, [r7, #20]
	}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3728      	adds	r7, #40	; 0x28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b08c      	sub	sp, #48	; 0x30
 8008a56:	af04      	add	r7, sp, #16
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	603b      	str	r3, [r7, #0]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a62:	88fb      	ldrh	r3, [r7, #6]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f001 fc5e 	bl	800a328 <pvPortMalloc>
 8008a6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00e      	beq.n	8008a92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a74:	20a8      	movs	r0, #168	; 0xa8
 8008a76:	f001 fc57 	bl	800a328 <pvPortMalloc>
 8008a7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	631a      	str	r2, [r3, #48]	; 0x30
 8008a88:	e005      	b.n	8008a96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a8a:	6978      	ldr	r0, [r7, #20]
 8008a8c:	f001 fd18 	bl	800a4c0 <vPortFree>
 8008a90:	e001      	b.n	8008a96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d017      	beq.n	8008acc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008aa4:	88fa      	ldrh	r2, [r7, #6]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9303      	str	r3, [sp, #12]
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	9302      	str	r3, [sp, #8]
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 f80e 	bl	8008adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ac0:	69f8      	ldr	r0, [r7, #28]
 8008ac2:	f000 f8b1 	bl	8008c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e002      	b.n	8008ad2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ad0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	461a      	mov	r2, r3
 8008af4:	21a5      	movs	r1, #165	; 0xa5
 8008af6:	f002 fb49 	bl	800b18c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b04:	3b01      	subs	r3, #1
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	f023 0307 	bic.w	r3, r3, #7
 8008b12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	617b      	str	r3, [r7, #20]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01f      	beq.n	8008b7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
 8008b3e:	e012      	b.n	8008b66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	7819      	ldrb	r1, [r3, #0]
 8008b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3334      	adds	r3, #52	; 0x34
 8008b50:	460a      	mov	r2, r1
 8008b52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d006      	beq.n	8008b6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	3301      	adds	r3, #1
 8008b64:	61fb      	str	r3, [r7, #28]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	2b0f      	cmp	r3, #15
 8008b6a:	d9e9      	bls.n	8008b40 <prvInitialiseNewTask+0x64>
 8008b6c:	e000      	b.n	8008b70 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b78:	e003      	b.n	8008b82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	2b37      	cmp	r3, #55	; 0x37
 8008b86:	d901      	bls.n	8008b8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b88:	2337      	movs	r3, #55	; 0x37
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff f978 	bl	8007e98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008baa:	3318      	adds	r3, #24
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff f973 	bl	8007e98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	3354      	adds	r3, #84	; 0x54
 8008bdc:	224c      	movs	r2, #76	; 0x4c
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f002 fad3 	bl	800b18c <memset>
 8008be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be8:	4a0c      	ldr	r2, [pc, #48]	; (8008c1c <prvInitialiseNewTask+0x140>)
 8008bea:	659a      	str	r2, [r3, #88]	; 0x58
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	4a0c      	ldr	r2, [pc, #48]	; (8008c20 <prvInitialiseNewTask+0x144>)
 8008bf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	; (8008c24 <prvInitialiseNewTask+0x148>)
 8008bf6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	68f9      	ldr	r1, [r7, #12]
 8008bfc:	69b8      	ldr	r0, [r7, #24]
 8008bfe:	f001 f941 	bl	8009e84 <pxPortInitialiseStack>
 8008c02:	4602      	mov	r2, r0
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c14:	bf00      	nop
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	200054e4 	.word	0x200054e4
 8008c20:	2000554c 	.word	0x2000554c
 8008c24:	200055b4 	.word	0x200055b4

08008c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c30:	f001 fa58 	bl	800a0e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c34:	4b2d      	ldr	r3, [pc, #180]	; (8008cec <prvAddNewTaskToReadyList+0xc4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4a2c      	ldr	r2, [pc, #176]	; (8008cec <prvAddNewTaskToReadyList+0xc4>)
 8008c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c3e:	4b2c      	ldr	r3, [pc, #176]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c46:	4a2a      	ldr	r2, [pc, #168]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c4c:	4b27      	ldr	r3, [pc, #156]	; (8008cec <prvAddNewTaskToReadyList+0xc4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d110      	bne.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c54:	f000 fc26 	bl	80094a4 <prvInitialiseTaskLists>
 8008c58:	e00d      	b.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c5a:	4b26      	ldr	r3, [pc, #152]	; (8008cf4 <prvAddNewTaskToReadyList+0xcc>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d109      	bne.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c62:	4b23      	ldr	r3, [pc, #140]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d802      	bhi.n	8008c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c70:	4a1f      	ldr	r2, [pc, #124]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c76:	4b20      	ldr	r3, [pc, #128]	; (8008cf8 <prvAddNewTaskToReadyList+0xd0>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	4a1e      	ldr	r2, [pc, #120]	; (8008cf8 <prvAddNewTaskToReadyList+0xd0>)
 8008c7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c80:	4b1d      	ldr	r3, [pc, #116]	; (8008cf8 <prvAddNewTaskToReadyList+0xd0>)
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <prvAddNewTaskToReadyList+0xd4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d903      	bls.n	8008c9c <prvAddNewTaskToReadyList+0x74>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	4a18      	ldr	r2, [pc, #96]	; (8008cfc <prvAddNewTaskToReadyList+0xd4>)
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4a15      	ldr	r2, [pc, #84]	; (8008d00 <prvAddNewTaskToReadyList+0xd8>)
 8008caa:	441a      	add	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f7ff f8fd 	bl	8007eb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cb8:	f001 fa44 	bl	800a144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <prvAddNewTaskToReadyList+0xcc>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00e      	beq.n	8008ce2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cc4:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <prvAddNewTaskToReadyList+0xc8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d207      	bcs.n	8008ce2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <prvAddNewTaskToReadyList+0xdc>)
 8008cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20001764 	.word	0x20001764
 8008cf0:	20001290 	.word	0x20001290
 8008cf4:	20001770 	.word	0x20001770
 8008cf8:	20001780 	.word	0x20001780
 8008cfc:	2000176c 	.word	0x2000176c
 8008d00:	20001294 	.word	0x20001294
 8008d04:	e000ed04 	.word	0xe000ed04

08008d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d017      	beq.n	8008d4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d1a:	4b13      	ldr	r3, [pc, #76]	; (8008d68 <vTaskDelay+0x60>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00a      	beq.n	8008d38 <vTaskDelay+0x30>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	60bb      	str	r3, [r7, #8]
}
 8008d34:	bf00      	nop
 8008d36:	e7fe      	b.n	8008d36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d38:	f000 f88a 	bl	8008e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fcfe 	bl	8009740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d44:	f000 f892 	bl	8008e6c <xTaskResumeAll>
 8008d48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d107      	bne.n	8008d60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d50:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <vTaskDelay+0x64>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	2000178c 	.word	0x2000178c
 8008d6c:	e000ed04 	.word	0xe000ed04

08008d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d7e:	463a      	mov	r2, r7
 8008d80:	1d39      	adds	r1, r7, #4
 8008d82:	f107 0308 	add.w	r3, r7, #8
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff f832 	bl	8007df0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	9202      	str	r2, [sp, #8]
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	2300      	movs	r3, #0
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	460a      	mov	r2, r1
 8008d9e:	4924      	ldr	r1, [pc, #144]	; (8008e30 <vTaskStartScheduler+0xc0>)
 8008da0:	4824      	ldr	r0, [pc, #144]	; (8008e34 <vTaskStartScheduler+0xc4>)
 8008da2:	f7ff fdf9 	bl	8008998 <xTaskCreateStatic>
 8008da6:	4603      	mov	r3, r0
 8008da8:	4a23      	ldr	r2, [pc, #140]	; (8008e38 <vTaskStartScheduler+0xc8>)
 8008daa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008dac:	4b22      	ldr	r3, [pc, #136]	; (8008e38 <vTaskStartScheduler+0xc8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008db4:	2301      	movs	r3, #1
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	e001      	b.n	8008dbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d102      	bne.n	8008dca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dc4:	f000 fd10 	bl	80097e8 <xTimerCreateTimerTask>
 8008dc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d11b      	bne.n	8008e08 <vTaskStartScheduler+0x98>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	613b      	str	r3, [r7, #16]
}
 8008de2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008de4:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <vTaskStartScheduler+0xcc>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3354      	adds	r3, #84	; 0x54
 8008dea:	4a15      	ldr	r2, [pc, #84]	; (8008e40 <vTaskStartScheduler+0xd0>)
 8008dec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dee:	4b15      	ldr	r3, [pc, #84]	; (8008e44 <vTaskStartScheduler+0xd4>)
 8008df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008df4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008df6:	4b14      	ldr	r3, [pc, #80]	; (8008e48 <vTaskStartScheduler+0xd8>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dfc:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <vTaskStartScheduler+0xdc>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e02:	f001 f8cd 	bl	8009fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e06:	e00e      	b.n	8008e26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e0e:	d10a      	bne.n	8008e26 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	60fb      	str	r3, [r7, #12]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <vTaskStartScheduler+0xb4>
}
 8008e26:	bf00      	nop
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	0800d4e8 	.word	0x0800d4e8
 8008e34:	08009475 	.word	0x08009475
 8008e38:	20001788 	.word	0x20001788
 8008e3c:	20001290 	.word	0x20001290
 8008e40:	20000078 	.word	0x20000078
 8008e44:	20001784 	.word	0x20001784
 8008e48:	20001770 	.word	0x20001770
 8008e4c:	20001768 	.word	0x20001768

08008e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e54:	4b04      	ldr	r3, [pc, #16]	; (8008e68 <vTaskSuspendAll+0x18>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	4a03      	ldr	r2, [pc, #12]	; (8008e68 <vTaskSuspendAll+0x18>)
 8008e5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e5e:	bf00      	nop
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	2000178c 	.word	0x2000178c

08008e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e7a:	4b42      	ldr	r3, [pc, #264]	; (8008f84 <xTaskResumeAll+0x118>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	603b      	str	r3, [r7, #0]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e98:	f001 f924 	bl	800a0e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e9c:	4b39      	ldr	r3, [pc, #228]	; (8008f84 <xTaskResumeAll+0x118>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	4a38      	ldr	r2, [pc, #224]	; (8008f84 <xTaskResumeAll+0x118>)
 8008ea4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea6:	4b37      	ldr	r3, [pc, #220]	; (8008f84 <xTaskResumeAll+0x118>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d162      	bne.n	8008f74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008eae:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <xTaskResumeAll+0x11c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d05e      	beq.n	8008f74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eb6:	e02f      	b.n	8008f18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb8:	4b34      	ldr	r3, [pc, #208]	; (8008f8c <xTaskResumeAll+0x120>)
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3318      	adds	r3, #24
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7ff f851 	bl	8007f6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff f84c 	bl	8007f6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed8:	4b2d      	ldr	r3, [pc, #180]	; (8008f90 <xTaskResumeAll+0x124>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d903      	bls.n	8008ee8 <xTaskResumeAll+0x7c>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	4a2a      	ldr	r2, [pc, #168]	; (8008f90 <xTaskResumeAll+0x124>)
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4a27      	ldr	r2, [pc, #156]	; (8008f94 <xTaskResumeAll+0x128>)
 8008ef6:	441a      	add	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3304      	adds	r3, #4
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f7fe ffd7 	bl	8007eb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f08:	4b23      	ldr	r3, [pc, #140]	; (8008f98 <xTaskResumeAll+0x12c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d302      	bcc.n	8008f18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f12:	4b22      	ldr	r3, [pc, #136]	; (8008f9c <xTaskResumeAll+0x130>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f18:	4b1c      	ldr	r3, [pc, #112]	; (8008f8c <xTaskResumeAll+0x120>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1cb      	bne.n	8008eb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f26:	f000 fb5f 	bl	80095e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	; (8008fa0 <xTaskResumeAll+0x134>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d010      	beq.n	8008f58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f36:	f000 f847 	bl	8008fc8 <xTaskIncrementTick>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f40:	4b16      	ldr	r3, [pc, #88]	; (8008f9c <xTaskResumeAll+0x130>)
 8008f42:	2201      	movs	r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f1      	bne.n	8008f36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f52:	4b13      	ldr	r3, [pc, #76]	; (8008fa0 <xTaskResumeAll+0x134>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f58:	4b10      	ldr	r3, [pc, #64]	; (8008f9c <xTaskResumeAll+0x130>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d009      	beq.n	8008f74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <xTaskResumeAll+0x138>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f74:	f001 f8e6 	bl	800a144 <vPortExitCritical>

	return xAlreadyYielded;
 8008f78:	68bb      	ldr	r3, [r7, #8]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	2000178c 	.word	0x2000178c
 8008f88:	20001764 	.word	0x20001764
 8008f8c:	20001724 	.word	0x20001724
 8008f90:	2000176c 	.word	0x2000176c
 8008f94:	20001294 	.word	0x20001294
 8008f98:	20001290 	.word	0x20001290
 8008f9c:	20001778 	.word	0x20001778
 8008fa0:	20001774 	.word	0x20001774
 8008fa4:	e000ed04 	.word	0xe000ed04

08008fa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fae:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <xTaskGetTickCount+0x1c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fb4:	687b      	ldr	r3, [r7, #4]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20001768 	.word	0x20001768

08008fc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fd2:	4b4f      	ldr	r3, [pc, #316]	; (8009110 <xTaskIncrementTick+0x148>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f040 808f 	bne.w	80090fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fdc:	4b4d      	ldr	r3, [pc, #308]	; (8009114 <xTaskIncrementTick+0x14c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fe4:	4a4b      	ldr	r2, [pc, #300]	; (8009114 <xTaskIncrementTick+0x14c>)
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d120      	bne.n	8009032 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ff0:	4b49      	ldr	r3, [pc, #292]	; (8009118 <xTaskIncrementTick+0x150>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <xTaskIncrementTick+0x48>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	603b      	str	r3, [r7, #0]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <xTaskIncrementTick+0x46>
 8009010:	4b41      	ldr	r3, [pc, #260]	; (8009118 <xTaskIncrementTick+0x150>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	60fb      	str	r3, [r7, #12]
 8009016:	4b41      	ldr	r3, [pc, #260]	; (800911c <xTaskIncrementTick+0x154>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a3f      	ldr	r2, [pc, #252]	; (8009118 <xTaskIncrementTick+0x150>)
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	4a3f      	ldr	r2, [pc, #252]	; (800911c <xTaskIncrementTick+0x154>)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	4b3e      	ldr	r3, [pc, #248]	; (8009120 <xTaskIncrementTick+0x158>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3301      	adds	r3, #1
 800902a:	4a3d      	ldr	r2, [pc, #244]	; (8009120 <xTaskIncrementTick+0x158>)
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	f000 fadb 	bl	80095e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009032:	4b3c      	ldr	r3, [pc, #240]	; (8009124 <xTaskIncrementTick+0x15c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	429a      	cmp	r2, r3
 800903a:	d349      	bcc.n	80090d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800903c:	4b36      	ldr	r3, [pc, #216]	; (8009118 <xTaskIncrementTick+0x150>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009046:	4b37      	ldr	r3, [pc, #220]	; (8009124 <xTaskIncrementTick+0x15c>)
 8009048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800904c:	601a      	str	r2, [r3, #0]
					break;
 800904e:	e03f      	b.n	80090d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009050:	4b31      	ldr	r3, [pc, #196]	; (8009118 <xTaskIncrementTick+0x150>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d203      	bcs.n	8009070 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009068:	4a2e      	ldr	r2, [pc, #184]	; (8009124 <xTaskIncrementTick+0x15c>)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800906e:	e02f      	b.n	80090d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	3304      	adds	r3, #4
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe ff79 	bl	8007f6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	2b00      	cmp	r3, #0
 8009080:	d004      	beq.n	800908c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	3318      	adds	r3, #24
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe ff70 	bl	8007f6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009090:	4b25      	ldr	r3, [pc, #148]	; (8009128 <xTaskIncrementTick+0x160>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d903      	bls.n	80090a0 <xTaskIncrementTick+0xd8>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	4a22      	ldr	r2, [pc, #136]	; (8009128 <xTaskIncrementTick+0x160>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4a1f      	ldr	r2, [pc, #124]	; (800912c <xTaskIncrementTick+0x164>)
 80090ae:	441a      	add	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4619      	mov	r1, r3
 80090b6:	4610      	mov	r0, r2
 80090b8:	f7fe fefb 	bl	8007eb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <xTaskIncrementTick+0x168>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d3b8      	bcc.n	800903c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090ca:	2301      	movs	r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ce:	e7b5      	b.n	800903c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090d0:	4b17      	ldr	r3, [pc, #92]	; (8009130 <xTaskIncrementTick+0x168>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d6:	4915      	ldr	r1, [pc, #84]	; (800912c <xTaskIncrementTick+0x164>)
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	440b      	add	r3, r1
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d901      	bls.n	80090ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090ec:	4b11      	ldr	r3, [pc, #68]	; (8009134 <xTaskIncrementTick+0x16c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80090f4:	2301      	movs	r3, #1
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e004      	b.n	8009104 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <xTaskIncrementTick+0x170>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3301      	adds	r3, #1
 8009100:	4a0d      	ldr	r2, [pc, #52]	; (8009138 <xTaskIncrementTick+0x170>)
 8009102:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009104:	697b      	ldr	r3, [r7, #20]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	2000178c 	.word	0x2000178c
 8009114:	20001768 	.word	0x20001768
 8009118:	2000171c 	.word	0x2000171c
 800911c:	20001720 	.word	0x20001720
 8009120:	2000177c 	.word	0x2000177c
 8009124:	20001784 	.word	0x20001784
 8009128:	2000176c 	.word	0x2000176c
 800912c:	20001294 	.word	0x20001294
 8009130:	20001290 	.word	0x20001290
 8009134:	20001778 	.word	0x20001778
 8009138:	20001774 	.word	0x20001774

0800913c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009142:	4b2a      	ldr	r3, [pc, #168]	; (80091ec <vTaskSwitchContext+0xb0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800914a:	4b29      	ldr	r3, [pc, #164]	; (80091f0 <vTaskSwitchContext+0xb4>)
 800914c:	2201      	movs	r2, #1
 800914e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009150:	e046      	b.n	80091e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009152:	4b27      	ldr	r3, [pc, #156]	; (80091f0 <vTaskSwitchContext+0xb4>)
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009158:	4b26      	ldr	r3, [pc, #152]	; (80091f4 <vTaskSwitchContext+0xb8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	e010      	b.n	8009182 <vTaskSwitchContext+0x46>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10a      	bne.n	800917c <vTaskSwitchContext+0x40>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	607b      	str	r3, [r7, #4]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <vTaskSwitchContext+0x3e>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3b01      	subs	r3, #1
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	491d      	ldr	r1, [pc, #116]	; (80091f8 <vTaskSwitchContext+0xbc>)
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0e4      	beq.n	8009160 <vTaskSwitchContext+0x24>
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4a15      	ldr	r2, [pc, #84]	; (80091f8 <vTaskSwitchContext+0xbc>)
 80091a2:	4413      	add	r3, r2
 80091a4:	60bb      	str	r3, [r7, #8]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	605a      	str	r2, [r3, #4]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	3308      	adds	r3, #8
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d104      	bne.n	80091c6 <vTaskSwitchContext+0x8a>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	605a      	str	r2, [r3, #4]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	4a0b      	ldr	r2, [pc, #44]	; (80091fc <vTaskSwitchContext+0xc0>)
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	4a08      	ldr	r2, [pc, #32]	; (80091f4 <vTaskSwitchContext+0xb8>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091d6:	4b09      	ldr	r3, [pc, #36]	; (80091fc <vTaskSwitchContext+0xc0>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3354      	adds	r3, #84	; 0x54
 80091dc:	4a08      	ldr	r2, [pc, #32]	; (8009200 <vTaskSwitchContext+0xc4>)
 80091de:	6013      	str	r3, [r2, #0]
}
 80091e0:	bf00      	nop
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	2000178c 	.word	0x2000178c
 80091f0:	20001778 	.word	0x20001778
 80091f4:	2000176c 	.word	0x2000176c
 80091f8:	20001294 	.word	0x20001294
 80091fc:	20001290 	.word	0x20001290
 8009200:	20000078 	.word	0x20000078

08009204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	60fb      	str	r3, [r7, #12]
}
 8009226:	bf00      	nop
 8009228:	e7fe      	b.n	8009228 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800922a:	4b07      	ldr	r3, [pc, #28]	; (8009248 <vTaskPlaceOnEventList+0x44>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3318      	adds	r3, #24
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7fe fe61 	bl	8007efa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009238:	2101      	movs	r1, #1
 800923a:	6838      	ldr	r0, [r7, #0]
 800923c:	f000 fa80 	bl	8009740 <prvAddCurrentTaskToDelayedList>
}
 8009240:	bf00      	nop
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20001290 	.word	0x20001290

0800924c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	617b      	str	r3, [r7, #20]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009274:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3318      	adds	r3, #24
 800927a:	4619      	mov	r1, r3
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7fe fe18 	bl	8007eb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800928c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	68b8      	ldr	r0, [r7, #8]
 8009292:	f000 fa55 	bl	8009740 <prvAddCurrentTaskToDelayedList>
	}
 8009296:	bf00      	nop
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20001290 	.word	0x20001290

080092a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10a      	bne.n	80092d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	60fb      	str	r3, [r7, #12]
}
 80092cc:	bf00      	nop
 80092ce:	e7fe      	b.n	80092ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	3318      	adds	r3, #24
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fe fe49 	bl	8007f6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092da:	4b1e      	ldr	r3, [pc, #120]	; (8009354 <xTaskRemoveFromEventList+0xb0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d11d      	bne.n	800931e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	3304      	adds	r3, #4
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fe40 	bl	8007f6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f0:	4b19      	ldr	r3, [pc, #100]	; (8009358 <xTaskRemoveFromEventList+0xb4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d903      	bls.n	8009300 <xTaskRemoveFromEventList+0x5c>
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	4a16      	ldr	r2, [pc, #88]	; (8009358 <xTaskRemoveFromEventList+0xb4>)
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4a13      	ldr	r2, [pc, #76]	; (800935c <xTaskRemoveFromEventList+0xb8>)
 800930e:	441a      	add	r2, r3
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3304      	adds	r3, #4
 8009314:	4619      	mov	r1, r3
 8009316:	4610      	mov	r0, r2
 8009318:	f7fe fdcb 	bl	8007eb2 <vListInsertEnd>
 800931c:	e005      	b.n	800932a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3318      	adds	r3, #24
 8009322:	4619      	mov	r1, r3
 8009324:	480e      	ldr	r0, [pc, #56]	; (8009360 <xTaskRemoveFromEventList+0xbc>)
 8009326:	f7fe fdc4 	bl	8007eb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932e:	4b0d      	ldr	r3, [pc, #52]	; (8009364 <xTaskRemoveFromEventList+0xc0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	429a      	cmp	r2, r3
 8009336:	d905      	bls.n	8009344 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009338:	2301      	movs	r3, #1
 800933a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800933c:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <xTaskRemoveFromEventList+0xc4>)
 800933e:	2201      	movs	r2, #1
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e001      	b.n	8009348 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009348:	697b      	ldr	r3, [r7, #20]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	2000178c 	.word	0x2000178c
 8009358:	2000176c 	.word	0x2000176c
 800935c:	20001294 	.word	0x20001294
 8009360:	20001724 	.word	0x20001724
 8009364:	20001290 	.word	0x20001290
 8009368:	20001778 	.word	0x20001778

0800936c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009374:	4b06      	ldr	r3, [pc, #24]	; (8009390 <vTaskInternalSetTimeOutState+0x24>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <vTaskInternalSetTimeOutState+0x28>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	605a      	str	r2, [r3, #4]
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	2000177c 	.word	0x2000177c
 8009394:	20001768 	.word	0x20001768

08009398 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	f383 8811 	msr	BASEPRI, r3
 80093b0:	f3bf 8f6f 	isb	sy
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	613b      	str	r3, [r7, #16]
}
 80093ba:	bf00      	nop
 80093bc:	e7fe      	b.n	80093bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10a      	bne.n	80093da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	60fb      	str	r3, [r7, #12]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80093da:	f000 fe83 	bl	800a0e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093de:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <xTaskCheckForTimeOut+0xbc>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f6:	d102      	bne.n	80093fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	61fb      	str	r3, [r7, #28]
 80093fc:	e023      	b.n	8009446 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4b15      	ldr	r3, [pc, #84]	; (8009458 <xTaskCheckForTimeOut+0xc0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d007      	beq.n	800941a <xTaskCheckForTimeOut+0x82>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	429a      	cmp	r2, r3
 8009412:	d302      	bcc.n	800941a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	61fb      	str	r3, [r7, #28]
 8009418:	e015      	b.n	8009446 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	429a      	cmp	r2, r3
 8009422:	d20b      	bcs.n	800943c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	1ad2      	subs	r2, r2, r3
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff ff9b 	bl	800936c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009436:	2300      	movs	r3, #0
 8009438:	61fb      	str	r3, [r7, #28]
 800943a:	e004      	b.n	8009446 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009442:	2301      	movs	r3, #1
 8009444:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009446:	f000 fe7d 	bl	800a144 <vPortExitCritical>

	return xReturn;
 800944a:	69fb      	ldr	r3, [r7, #28]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20001768 	.word	0x20001768
 8009458:	2000177c 	.word	0x2000177c

0800945c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009460:	4b03      	ldr	r3, [pc, #12]	; (8009470 <vTaskMissedYield+0x14>)
 8009462:	2201      	movs	r2, #1
 8009464:	601a      	str	r2, [r3, #0]
}
 8009466:	bf00      	nop
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	20001778 	.word	0x20001778

08009474 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800947c:	f000 f852 	bl	8009524 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009480:	4b06      	ldr	r3, [pc, #24]	; (800949c <prvIdleTask+0x28>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d9f9      	bls.n	800947c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009488:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <prvIdleTask+0x2c>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009498:	e7f0      	b.n	800947c <prvIdleTask+0x8>
 800949a:	bf00      	nop
 800949c:	20001294 	.word	0x20001294
 80094a0:	e000ed04 	.word	0xe000ed04

080094a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094aa:	2300      	movs	r3, #0
 80094ac:	607b      	str	r3, [r7, #4]
 80094ae:	e00c      	b.n	80094ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4a12      	ldr	r2, [pc, #72]	; (8009504 <prvInitialiseTaskLists+0x60>)
 80094bc:	4413      	add	r3, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fcca 	bl	8007e58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3301      	adds	r3, #1
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b37      	cmp	r3, #55	; 0x37
 80094ce:	d9ef      	bls.n	80094b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094d0:	480d      	ldr	r0, [pc, #52]	; (8009508 <prvInitialiseTaskLists+0x64>)
 80094d2:	f7fe fcc1 	bl	8007e58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094d6:	480d      	ldr	r0, [pc, #52]	; (800950c <prvInitialiseTaskLists+0x68>)
 80094d8:	f7fe fcbe 	bl	8007e58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094dc:	480c      	ldr	r0, [pc, #48]	; (8009510 <prvInitialiseTaskLists+0x6c>)
 80094de:	f7fe fcbb 	bl	8007e58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094e2:	480c      	ldr	r0, [pc, #48]	; (8009514 <prvInitialiseTaskLists+0x70>)
 80094e4:	f7fe fcb8 	bl	8007e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094e8:	480b      	ldr	r0, [pc, #44]	; (8009518 <prvInitialiseTaskLists+0x74>)
 80094ea:	f7fe fcb5 	bl	8007e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094ee:	4b0b      	ldr	r3, [pc, #44]	; (800951c <prvInitialiseTaskLists+0x78>)
 80094f0:	4a05      	ldr	r2, [pc, #20]	; (8009508 <prvInitialiseTaskLists+0x64>)
 80094f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094f4:	4b0a      	ldr	r3, [pc, #40]	; (8009520 <prvInitialiseTaskLists+0x7c>)
 80094f6:	4a05      	ldr	r2, [pc, #20]	; (800950c <prvInitialiseTaskLists+0x68>)
 80094f8:	601a      	str	r2, [r3, #0]
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20001294 	.word	0x20001294
 8009508:	200016f4 	.word	0x200016f4
 800950c:	20001708 	.word	0x20001708
 8009510:	20001724 	.word	0x20001724
 8009514:	20001738 	.word	0x20001738
 8009518:	20001750 	.word	0x20001750
 800951c:	2000171c 	.word	0x2000171c
 8009520:	20001720 	.word	0x20001720

08009524 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800952a:	e019      	b.n	8009560 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800952c:	f000 fdda 	bl	800a0e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009530:	4b10      	ldr	r3, [pc, #64]	; (8009574 <prvCheckTasksWaitingTermination+0x50>)
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3304      	adds	r3, #4
 800953c:	4618      	mov	r0, r3
 800953e:	f7fe fd15 	bl	8007f6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <prvCheckTasksWaitingTermination+0x54>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3b01      	subs	r3, #1
 8009548:	4a0b      	ldr	r2, [pc, #44]	; (8009578 <prvCheckTasksWaitingTermination+0x54>)
 800954a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <prvCheckTasksWaitingTermination+0x58>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3b01      	subs	r3, #1
 8009552:	4a0a      	ldr	r2, [pc, #40]	; (800957c <prvCheckTasksWaitingTermination+0x58>)
 8009554:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009556:	f000 fdf5 	bl	800a144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f810 	bl	8009580 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009560:	4b06      	ldr	r3, [pc, #24]	; (800957c <prvCheckTasksWaitingTermination+0x58>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e1      	bne.n	800952c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20001738 	.word	0x20001738
 8009578:	20001764 	.word	0x20001764
 800957c:	2000174c 	.word	0x2000174c

08009580 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3354      	adds	r3, #84	; 0x54
 800958c:	4618      	mov	r0, r3
 800958e:	f001 fe09 	bl	800b1a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009598:	2b00      	cmp	r3, #0
 800959a:	d108      	bne.n	80095ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 ff8d 	bl	800a4c0 <vPortFree>
				vPortFree( pxTCB );
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 ff8a 	bl	800a4c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095ac:	e018      	b.n	80095e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d103      	bne.n	80095c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 ff81 	bl	800a4c0 <vPortFree>
	}
 80095be:	e00f      	b.n	80095e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d00a      	beq.n	80095e0 <prvDeleteTCB+0x60>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	60fb      	str	r3, [r7, #12]
}
 80095dc:	bf00      	nop
 80095de:	e7fe      	b.n	80095de <prvDeleteTCB+0x5e>
	}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ee:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <prvResetNextTaskUnblockTime+0x38>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095f8:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <prvResetNextTaskUnblockTime+0x3c>)
 80095fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009600:	e008      	b.n	8009614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <prvResetNextTaskUnblockTime+0x38>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	4a04      	ldr	r2, [pc, #16]	; (8009624 <prvResetNextTaskUnblockTime+0x3c>)
 8009612:	6013      	str	r3, [r2, #0]
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	2000171c 	.word	0x2000171c
 8009624:	20001784 	.word	0x20001784

08009628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <xTaskGetSchedulerState+0x34>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009636:	2301      	movs	r3, #1
 8009638:	607b      	str	r3, [r7, #4]
 800963a:	e008      	b.n	800964e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800963c:	4b08      	ldr	r3, [pc, #32]	; (8009660 <xTaskGetSchedulerState+0x38>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d102      	bne.n	800964a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009644:	2302      	movs	r3, #2
 8009646:	607b      	str	r3, [r7, #4]
 8009648:	e001      	b.n	800964e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800964a:	2300      	movs	r3, #0
 800964c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800964e:	687b      	ldr	r3, [r7, #4]
	}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	20001770 	.word	0x20001770
 8009660:	2000178c 	.word	0x2000178c

08009664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009670:	2300      	movs	r3, #0
 8009672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d056      	beq.n	8009728 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800967a:	4b2e      	ldr	r3, [pc, #184]	; (8009734 <xTaskPriorityDisinherit+0xd0>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	429a      	cmp	r2, r3
 8009682:	d00a      	beq.n	800969a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	60fb      	str	r3, [r7, #12]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60bb      	str	r3, [r7, #8]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096bc:	1e5a      	subs	r2, r3, #1
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d02c      	beq.n	8009728 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d128      	bne.n	8009728 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	3304      	adds	r3, #4
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fc46 	bl	8007f6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f8:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <xTaskPriorityDisinherit+0xd4>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d903      	bls.n	8009708 <xTaskPriorityDisinherit+0xa4>
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <xTaskPriorityDisinherit+0xd4>)
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970c:	4613      	mov	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4a09      	ldr	r2, [pc, #36]	; (800973c <xTaskPriorityDisinherit+0xd8>)
 8009716:	441a      	add	r2, r3
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	3304      	adds	r3, #4
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f7fe fbc7 	bl	8007eb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009724:	2301      	movs	r3, #1
 8009726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009728:	697b      	ldr	r3, [r7, #20]
	}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20001290 	.word	0x20001290
 8009738:	2000176c 	.word	0x2000176c
 800973c:	20001294 	.word	0x20001294

08009740 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800974a:	4b21      	ldr	r3, [pc, #132]	; (80097d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009750:	4b20      	ldr	r3, [pc, #128]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3304      	adds	r3, #4
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe fc08 	bl	8007f6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009762:	d10a      	bne.n	800977a <prvAddCurrentTaskToDelayedList+0x3a>
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d007      	beq.n	800977a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800976a:	4b1a      	ldr	r3, [pc, #104]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4819      	ldr	r0, [pc, #100]	; (80097d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009774:	f7fe fb9d 	bl	8007eb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009778:	e026      	b.n	80097c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4413      	add	r3, r2
 8009780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009782:	4b14      	ldr	r3, [pc, #80]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	429a      	cmp	r2, r3
 8009790:	d209      	bcs.n	80097a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009792:	4b12      	ldr	r3, [pc, #72]	; (80097dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4b0f      	ldr	r3, [pc, #60]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3304      	adds	r3, #4
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7fe fbab 	bl	8007efa <vListInsert>
}
 80097a4:	e010      	b.n	80097c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097a6:	4b0e      	ldr	r3, [pc, #56]	; (80097e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4b0a      	ldr	r3, [pc, #40]	; (80097d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4619      	mov	r1, r3
 80097b2:	4610      	mov	r0, r2
 80097b4:	f7fe fba1 	bl	8007efa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d202      	bcs.n	80097c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097c2:	4a08      	ldr	r2, [pc, #32]	; (80097e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	6013      	str	r3, [r2, #0]
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	20001768 	.word	0x20001768
 80097d4:	20001290 	.word	0x20001290
 80097d8:	20001750 	.word	0x20001750
 80097dc:	20001720 	.word	0x20001720
 80097e0:	2000171c 	.word	0x2000171c
 80097e4:	20001784 	.word	0x20001784

080097e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08a      	sub	sp, #40	; 0x28
 80097ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80097f2:	f000 fb07 	bl	8009e04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80097f6:	4b1c      	ldr	r3, [pc, #112]	; (8009868 <xTimerCreateTimerTask+0x80>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d021      	beq.n	8009842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009806:	1d3a      	adds	r2, r7, #4
 8009808:	f107 0108 	add.w	r1, r7, #8
 800980c:	f107 030c 	add.w	r3, r7, #12
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fb07 	bl	8007e24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	9202      	str	r2, [sp, #8]
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	2302      	movs	r3, #2
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	2300      	movs	r3, #0
 8009826:	460a      	mov	r2, r1
 8009828:	4910      	ldr	r1, [pc, #64]	; (800986c <xTimerCreateTimerTask+0x84>)
 800982a:	4811      	ldr	r0, [pc, #68]	; (8009870 <xTimerCreateTimerTask+0x88>)
 800982c:	f7ff f8b4 	bl	8008998 <xTaskCreateStatic>
 8009830:	4603      	mov	r3, r0
 8009832:	4a10      	ldr	r2, [pc, #64]	; (8009874 <xTimerCreateTimerTask+0x8c>)
 8009834:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009836:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <xTimerCreateTimerTask+0x8c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800983e:	2301      	movs	r3, #1
 8009840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10a      	bne.n	800985e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	613b      	str	r3, [r7, #16]
}
 800985a:	bf00      	nop
 800985c:	e7fe      	b.n	800985c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800985e:	697b      	ldr	r3, [r7, #20]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	200017c0 	.word	0x200017c0
 800986c:	0800d4f0 	.word	0x0800d4f0
 8009870:	080099ad 	.word	0x080099ad
 8009874:	200017c4 	.word	0x200017c4

08009878 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009886:	2300      	movs	r3, #0
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	623b      	str	r3, [r7, #32]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098a6:	4b1a      	ldr	r3, [pc, #104]	; (8009910 <xTimerGenericCommand+0x98>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d02a      	beq.n	8009904 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b05      	cmp	r3, #5
 80098be:	dc18      	bgt.n	80098f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098c0:	f7ff feb2 	bl	8009628 <xTaskGetSchedulerState>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d109      	bne.n	80098de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098ca:	4b11      	ldr	r3, [pc, #68]	; (8009910 <xTimerGenericCommand+0x98>)
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	f107 0110 	add.w	r1, r7, #16
 80098d2:	2300      	movs	r3, #0
 80098d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d6:	f7fe fc77 	bl	80081c8 <xQueueGenericSend>
 80098da:	6278      	str	r0, [r7, #36]	; 0x24
 80098dc:	e012      	b.n	8009904 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <xTimerGenericCommand+0x98>)
 80098e0:	6818      	ldr	r0, [r3, #0]
 80098e2:	f107 0110 	add.w	r1, r7, #16
 80098e6:	2300      	movs	r3, #0
 80098e8:	2200      	movs	r2, #0
 80098ea:	f7fe fc6d 	bl	80081c8 <xQueueGenericSend>
 80098ee:	6278      	str	r0, [r7, #36]	; 0x24
 80098f0:	e008      	b.n	8009904 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098f2:	4b07      	ldr	r3, [pc, #28]	; (8009910 <xTimerGenericCommand+0x98>)
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	f107 0110 	add.w	r1, r7, #16
 80098fa:	2300      	movs	r3, #0
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	f7fe fd61 	bl	80083c4 <xQueueGenericSendFromISR>
 8009902:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009906:	4618      	mov	r0, r3
 8009908:	3728      	adds	r7, #40	; 0x28
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	200017c0 	.word	0x200017c0

08009914 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af02      	add	r7, sp, #8
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991e:	4b22      	ldr	r3, [pc, #136]	; (80099a8 <prvProcessExpiredTimer+0x94>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	3304      	adds	r3, #4
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fb1d 	bl	8007f6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b00      	cmp	r3, #0
 800993e:	d022      	beq.n	8009986 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	18d1      	adds	r1, r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	6978      	ldr	r0, [r7, #20]
 800994e:	f000 f8d1 	bl	8009af4 <prvInsertTimerInActiveList>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01f      	beq.n	8009998 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009958:	2300      	movs	r3, #0
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2300      	movs	r3, #0
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	2100      	movs	r1, #0
 8009962:	6978      	ldr	r0, [r7, #20]
 8009964:	f7ff ff88 	bl	8009878 <xTimerGenericCommand>
 8009968:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d113      	bne.n	8009998 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60fb      	str	r3, [r7, #12]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800998c:	f023 0301 	bic.w	r3, r3, #1
 8009990:	b2da      	uxtb	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	6978      	ldr	r0, [r7, #20]
 800999e:	4798      	blx	r3
}
 80099a0:	bf00      	nop
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	200017b8 	.word	0x200017b8

080099ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099b4:	f107 0308 	add.w	r3, r7, #8
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 f857 	bl	8009a6c <prvGetNextExpireTime>
 80099be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4619      	mov	r1, r3
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 f803 	bl	80099d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099ca:	f000 f8d5 	bl	8009b78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099ce:	e7f1      	b.n	80099b4 <prvTimerTask+0x8>

080099d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80099da:	f7ff fa39 	bl	8008e50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099de:	f107 0308 	add.w	r3, r7, #8
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f866 	bl	8009ab4 <prvSampleTimeNow>
 80099e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d130      	bne.n	8009a52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10a      	bne.n	8009a0c <prvProcessTimerOrBlockTask+0x3c>
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d806      	bhi.n	8009a0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099fe:	f7ff fa35 	bl	8008e6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff ff85 	bl	8009914 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a0a:	e024      	b.n	8009a56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d008      	beq.n	8009a24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a12:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <prvProcessTimerOrBlockTask+0x90>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <prvProcessTimerOrBlockTask+0x50>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e000      	b.n	8009a22 <prvProcessTimerOrBlockTask+0x52>
 8009a20:	2300      	movs	r3, #0
 8009a22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <prvProcessTimerOrBlockTask+0x94>)
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	4619      	mov	r1, r3
 8009a32:	f7fe ff7d 	bl	8008930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a36:	f7ff fa19 	bl	8008e6c <xTaskResumeAll>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <prvProcessTimerOrBlockTask+0x98>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
}
 8009a50:	e001      	b.n	8009a56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a52:	f7ff fa0b 	bl	8008e6c <xTaskResumeAll>
}
 8009a56:	bf00      	nop
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	200017bc 	.word	0x200017bc
 8009a64:	200017c0 	.word	0x200017c0
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a74:	4b0e      	ldr	r3, [pc, #56]	; (8009ab0 <prvGetNextExpireTime+0x44>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <prvGetNextExpireTime+0x16>
 8009a7e:	2201      	movs	r2, #1
 8009a80:	e000      	b.n	8009a84 <prvGetNextExpireTime+0x18>
 8009a82:	2200      	movs	r2, #0
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d105      	bne.n	8009a9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a90:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <prvGetNextExpireTime+0x44>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	60fb      	str	r3, [r7, #12]
 8009a9a:	e001      	b.n	8009aa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	200017b8 	.word	0x200017b8

08009ab4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009abc:	f7ff fa74 	bl	8008fa8 <xTaskGetTickCount>
 8009ac0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ac2:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <prvSampleTimeNow+0x3c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d205      	bcs.n	8009ad8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009acc:	f000 f936 	bl	8009d3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	e002      	b.n	8009ade <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ade:	4a04      	ldr	r2, [pc, #16]	; (8009af0 <prvSampleTimeNow+0x3c>)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200017c8 	.word	0x200017c8

08009af4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b02:	2300      	movs	r3, #0
 8009b04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d812      	bhi.n	8009b40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d302      	bcc.n	8009b2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	617b      	str	r3, [r7, #20]
 8009b2c:	e01b      	b.n	8009b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b2e:	4b10      	ldr	r3, [pc, #64]	; (8009b70 <prvInsertTimerInActiveList+0x7c>)
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3304      	adds	r3, #4
 8009b36:	4619      	mov	r1, r3
 8009b38:	4610      	mov	r0, r2
 8009b3a:	f7fe f9de 	bl	8007efa <vListInsert>
 8009b3e:	e012      	b.n	8009b66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d206      	bcs.n	8009b56 <prvInsertTimerInActiveList+0x62>
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d302      	bcc.n	8009b56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b50:	2301      	movs	r3, #1
 8009b52:	617b      	str	r3, [r7, #20]
 8009b54:	e007      	b.n	8009b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b56:	4b07      	ldr	r3, [pc, #28]	; (8009b74 <prvInsertTimerInActiveList+0x80>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4610      	mov	r0, r2
 8009b62:	f7fe f9ca 	bl	8007efa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b66:	697b      	ldr	r3, [r7, #20]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	200017bc 	.word	0x200017bc
 8009b74:	200017b8 	.word	0x200017b8

08009b78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08e      	sub	sp, #56	; 0x38
 8009b7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b7e:	e0ca      	b.n	8009d16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	da18      	bge.n	8009bb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b86:	1d3b      	adds	r3, r7, #4
 8009b88:	3304      	adds	r3, #4
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	61fb      	str	r3, [r7, #28]
}
 8009ba4:	bf00      	nop
 8009ba6:	e7fe      	b.n	8009ba6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bae:	6850      	ldr	r0, [r2, #4]
 8009bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bb2:	6892      	ldr	r2, [r2, #8]
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f2c0 80ab 	blt.w	8009d16 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d004      	beq.n	8009bd6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe f9cb 	bl	8007f6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff ff6b 	bl	8009ab4 <prvSampleTimeNow>
 8009bde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b09      	cmp	r3, #9
 8009be4:	f200 8096 	bhi.w	8009d14 <prvProcessReceivedCommands+0x19c>
 8009be8:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <prvProcessReceivedCommands+0x78>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c19 	.word	0x08009c19
 8009bf4:	08009c19 	.word	0x08009c19
 8009bf8:	08009c19 	.word	0x08009c19
 8009bfc:	08009c8d 	.word	0x08009c8d
 8009c00:	08009ca1 	.word	0x08009ca1
 8009c04:	08009ceb 	.word	0x08009ceb
 8009c08:	08009c19 	.word	0x08009c19
 8009c0c:	08009c19 	.word	0x08009c19
 8009c10:	08009c8d 	.word	0x08009c8d
 8009c14:	08009ca1 	.word	0x08009ca1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	18d1      	adds	r1, r2, r3
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c38:	f7ff ff5c 	bl	8009af4 <prvInsertTimerInActiveList>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d069      	beq.n	8009d16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d05e      	beq.n	8009d16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	441a      	add	r2, r3
 8009c60:	2300      	movs	r3, #0
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	2300      	movs	r3, #0
 8009c66:	2100      	movs	r1, #0
 8009c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c6a:	f7ff fe05 	bl	8009878 <xTimerGenericCommand>
 8009c6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d14f      	bne.n	8009d16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	61bb      	str	r3, [r7, #24]
}
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c92:	f023 0301 	bic.w	r3, r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c9e:	e03a      	b.n	8009d16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	617b      	str	r3, [r7, #20]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd8:	699a      	ldr	r2, [r3, #24]
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	18d1      	adds	r1, r2, r3
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce4:	f7ff ff06 	bl	8009af4 <prvInsertTimerInActiveList>
					break;
 8009ce8:	e015      	b.n	8009d16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d103      	bne.n	8009d00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cfa:	f000 fbe1 	bl	800a4c0 <vPortFree>
 8009cfe:	e00a      	b.n	8009d16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d06:	f023 0301 	bic.w	r3, r3, #1
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d12:	e000      	b.n	8009d16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009d14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d16:	4b08      	ldr	r3, [pc, #32]	; (8009d38 <prvProcessReceivedCommands+0x1c0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	1d39      	adds	r1, r7, #4
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fbec 	bl	80084fc <xQueueReceive>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f47f af2a 	bne.w	8009b80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	3730      	adds	r7, #48	; 0x30
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	200017c0 	.word	0x200017c0

08009d3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d42:	e048      	b.n	8009dd6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d44:	4b2d      	ldr	r3, [pc, #180]	; (8009dfc <prvSwitchTimerLists+0xc0>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d4e:	4b2b      	ldr	r3, [pc, #172]	; (8009dfc <prvSwitchTimerLists+0xc0>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe f905 	bl	8007f6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d02e      	beq.n	8009dd6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	693a      	ldr	r2, [r7, #16]
 8009d7e:	4413      	add	r3, r2
 8009d80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d90e      	bls.n	8009da8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d96:	4b19      	ldr	r3, [pc, #100]	; (8009dfc <prvSwitchTimerLists+0xc0>)
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f7fe f8aa 	bl	8007efa <vListInsert>
 8009da6:	e016      	b.n	8009dd6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009da8:	2300      	movs	r3, #0
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2300      	movs	r3, #0
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	2100      	movs	r1, #0
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7ff fd60 	bl	8009878 <xTimerGenericCommand>
 8009db8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10a      	bne.n	8009dd6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	603b      	str	r3, [r7, #0]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dd6:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <prvSwitchTimerLists+0xc0>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1b1      	bne.n	8009d44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009de0:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <prvSwitchTimerLists+0xc0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009de6:	4b06      	ldr	r3, [pc, #24]	; (8009e00 <prvSwitchTimerLists+0xc4>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a04      	ldr	r2, [pc, #16]	; (8009dfc <prvSwitchTimerLists+0xc0>)
 8009dec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dee:	4a04      	ldr	r2, [pc, #16]	; (8009e00 <prvSwitchTimerLists+0xc4>)
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	6013      	str	r3, [r2, #0]
}
 8009df4:	bf00      	nop
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200017b8 	.word	0x200017b8
 8009e00:	200017bc 	.word	0x200017bc

08009e04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e0a:	f000 f96b 	bl	800a0e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e0e:	4b15      	ldr	r3, [pc, #84]	; (8009e64 <prvCheckForValidListAndQueue+0x60>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d120      	bne.n	8009e58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e16:	4814      	ldr	r0, [pc, #80]	; (8009e68 <prvCheckForValidListAndQueue+0x64>)
 8009e18:	f7fe f81e 	bl	8007e58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e1c:	4813      	ldr	r0, [pc, #76]	; (8009e6c <prvCheckForValidListAndQueue+0x68>)
 8009e1e:	f7fe f81b 	bl	8007e58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e22:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <prvCheckForValidListAndQueue+0x6c>)
 8009e24:	4a10      	ldr	r2, [pc, #64]	; (8009e68 <prvCheckForValidListAndQueue+0x64>)
 8009e26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e28:	4b12      	ldr	r3, [pc, #72]	; (8009e74 <prvCheckForValidListAndQueue+0x70>)
 8009e2a:	4a10      	ldr	r2, [pc, #64]	; (8009e6c <prvCheckForValidListAndQueue+0x68>)
 8009e2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e2e:	2300      	movs	r3, #0
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	4b11      	ldr	r3, [pc, #68]	; (8009e78 <prvCheckForValidListAndQueue+0x74>)
 8009e34:	4a11      	ldr	r2, [pc, #68]	; (8009e7c <prvCheckForValidListAndQueue+0x78>)
 8009e36:	2110      	movs	r1, #16
 8009e38:	200a      	movs	r0, #10
 8009e3a:	f7fe f929 	bl	8008090 <xQueueGenericCreateStatic>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4a08      	ldr	r2, [pc, #32]	; (8009e64 <prvCheckForValidListAndQueue+0x60>)
 8009e42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e44:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <prvCheckForValidListAndQueue+0x60>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e4c:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <prvCheckForValidListAndQueue+0x60>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	490b      	ldr	r1, [pc, #44]	; (8009e80 <prvCheckForValidListAndQueue+0x7c>)
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fd42 	bl	80088dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e58:	f000 f974 	bl	800a144 <vPortExitCritical>
}
 8009e5c:	bf00      	nop
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	200017c0 	.word	0x200017c0
 8009e68:	20001790 	.word	0x20001790
 8009e6c:	200017a4 	.word	0x200017a4
 8009e70:	200017b8 	.word	0x200017b8
 8009e74:	200017bc 	.word	0x200017bc
 8009e78:	2000186c 	.word	0x2000186c
 8009e7c:	200017cc 	.word	0x200017cc
 8009e80:	0800d4f8 	.word	0x0800d4f8

08009e84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3b04      	subs	r3, #4
 8009e94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3b04      	subs	r3, #4
 8009ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f023 0201 	bic.w	r2, r3, #1
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3b04      	subs	r3, #4
 8009eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009eb4:	4a0c      	ldr	r2, [pc, #48]	; (8009ee8 <pxPortInitialiseStack+0x64>)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3b14      	subs	r3, #20
 8009ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f06f 0202 	mvn.w	r2, #2
 8009ed2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	3b20      	subs	r3, #32
 8009ed8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009eda:	68fb      	ldr	r3, [r7, #12]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	08009eed 	.word	0x08009eed

08009eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ef6:	4b12      	ldr	r3, [pc, #72]	; (8009f40 <prvTaskExitError+0x54>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009efe:	d00a      	beq.n	8009f16 <prvTaskExitError+0x2a>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	60fb      	str	r3, [r7, #12]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <prvTaskExitError+0x28>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	60bb      	str	r3, [r7, #8]
}
 8009f28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f2a:	bf00      	nop
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0fc      	beq.n	8009f2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	2000001c 	.word	0x2000001c
	...

08009f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f50:	4b07      	ldr	r3, [pc, #28]	; (8009f70 <pxCurrentTCBConst2>)
 8009f52:	6819      	ldr	r1, [r3, #0]
 8009f54:	6808      	ldr	r0, [r1, #0]
 8009f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5a:	f380 8809 	msr	PSP, r0
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f04f 0000 	mov.w	r0, #0
 8009f66:	f380 8811 	msr	BASEPRI, r0
 8009f6a:	4770      	bx	lr
 8009f6c:	f3af 8000 	nop.w

08009f70 <pxCurrentTCBConst2>:
 8009f70:	20001290 	.word	0x20001290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop

08009f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f78:	4808      	ldr	r0, [pc, #32]	; (8009f9c <prvPortStartFirstTask+0x24>)
 8009f7a:	6800      	ldr	r0, [r0, #0]
 8009f7c:	6800      	ldr	r0, [r0, #0]
 8009f7e:	f380 8808 	msr	MSP, r0
 8009f82:	f04f 0000 	mov.w	r0, #0
 8009f86:	f380 8814 	msr	CONTROL, r0
 8009f8a:	b662      	cpsie	i
 8009f8c:	b661      	cpsie	f
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	df00      	svc	0
 8009f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f9a:	bf00      	nop
 8009f9c:	e000ed08 	.word	0xe000ed08

08009fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fa6:	4b46      	ldr	r3, [pc, #280]	; (800a0c0 <xPortStartScheduler+0x120>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a46      	ldr	r2, [pc, #280]	; (800a0c4 <xPortStartScheduler+0x124>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d10a      	bne.n	8009fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	613b      	str	r3, [r7, #16]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fc6:	4b3e      	ldr	r3, [pc, #248]	; (800a0c0 <xPortStartScheduler+0x120>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a3f      	ldr	r2, [pc, #252]	; (800a0c8 <xPortStartScheduler+0x128>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d10a      	bne.n	8009fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	60fb      	str	r3, [r7, #12]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fe6:	4b39      	ldr	r3, [pc, #228]	; (800a0cc <xPortStartScheduler+0x12c>)
 8009fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	22ff      	movs	r2, #255	; 0xff
 8009ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	4b31      	ldr	r3, [pc, #196]	; (800a0d0 <xPortStartScheduler+0x130>)
 800a00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a00e:	4b31      	ldr	r3, [pc, #196]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a010:	2207      	movs	r2, #7
 800a012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a014:	e009      	b.n	800a02a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a016:	4b2f      	ldr	r3, [pc, #188]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3b01      	subs	r3, #1
 800a01c:	4a2d      	ldr	r2, [pc, #180]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a020:	78fb      	ldrb	r3, [r7, #3]
 800a022:	b2db      	uxtb	r3, r3
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	b2db      	uxtb	r3, r3
 800a028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a032:	2b80      	cmp	r3, #128	; 0x80
 800a034:	d0ef      	beq.n	800a016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a036:	4b27      	ldr	r3, [pc, #156]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1c3 0307 	rsb	r3, r3, #7
 800a03e:	2b04      	cmp	r3, #4
 800a040:	d00a      	beq.n	800a058 <xPortStartScheduler+0xb8>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	60bb      	str	r3, [r7, #8]
}
 800a054:	bf00      	nop
 800a056:	e7fe      	b.n	800a056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a058:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	021b      	lsls	r3, r3, #8
 800a05e:	4a1d      	ldr	r2, [pc, #116]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a062:	4b1c      	ldr	r3, [pc, #112]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a06a:	4a1a      	ldr	r2, [pc, #104]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a06c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	b2da      	uxtb	r2, r3
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a076:	4b18      	ldr	r3, [pc, #96]	; (800a0d8 <xPortStartScheduler+0x138>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a17      	ldr	r2, [pc, #92]	; (800a0d8 <xPortStartScheduler+0x138>)
 800a07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a082:	4b15      	ldr	r3, [pc, #84]	; (800a0d8 <xPortStartScheduler+0x138>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a14      	ldr	r2, [pc, #80]	; (800a0d8 <xPortStartScheduler+0x138>)
 800a088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a08c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a08e:	f000 f8dd 	bl	800a24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a092:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <xPortStartScheduler+0x13c>)
 800a094:	2200      	movs	r2, #0
 800a096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a098:	f000 f8fc 	bl	800a294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a09c:	4b10      	ldr	r3, [pc, #64]	; (800a0e0 <xPortStartScheduler+0x140>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a0f      	ldr	r2, [pc, #60]	; (800a0e0 <xPortStartScheduler+0x140>)
 800a0a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a0a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0a8:	f7ff ff66 	bl	8009f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0ac:	f7ff f846 	bl	800913c <vTaskSwitchContext>
	prvTaskExitError();
 800a0b0:	f7ff ff1c 	bl	8009eec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	e000ed00 	.word	0xe000ed00
 800a0c4:	410fc271 	.word	0x410fc271
 800a0c8:	410fc270 	.word	0x410fc270
 800a0cc:	e000e400 	.word	0xe000e400
 800a0d0:	200018bc 	.word	0x200018bc
 800a0d4:	200018c0 	.word	0x200018c0
 800a0d8:	e000ed20 	.word	0xe000ed20
 800a0dc:	2000001c 	.word	0x2000001c
 800a0e0:	e000ef34 	.word	0xe000ef34

0800a0e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	607b      	str	r3, [r7, #4]
}
 800a0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0fe:	4b0f      	ldr	r3, [pc, #60]	; (800a13c <vPortEnterCritical+0x58>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3301      	adds	r3, #1
 800a104:	4a0d      	ldr	r2, [pc, #52]	; (800a13c <vPortEnterCritical+0x58>)
 800a106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a108:	4b0c      	ldr	r3, [pc, #48]	; (800a13c <vPortEnterCritical+0x58>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d10f      	bne.n	800a130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a110:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <vPortEnterCritical+0x5c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <vPortEnterCritical+0x4c>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	603b      	str	r3, [r7, #0]
}
 800a12c:	bf00      	nop
 800a12e:	e7fe      	b.n	800a12e <vPortEnterCritical+0x4a>
	}
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	2000001c 	.word	0x2000001c
 800a140:	e000ed04 	.word	0xe000ed04

0800a144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a14a:	4b12      	ldr	r3, [pc, #72]	; (800a194 <vPortExitCritical+0x50>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10a      	bne.n	800a168 <vPortExitCritical+0x24>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	607b      	str	r3, [r7, #4]
}
 800a164:	bf00      	nop
 800a166:	e7fe      	b.n	800a166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a168:	4b0a      	ldr	r3, [pc, #40]	; (800a194 <vPortExitCritical+0x50>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	4a09      	ldr	r2, [pc, #36]	; (800a194 <vPortExitCritical+0x50>)
 800a170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a172:	4b08      	ldr	r3, [pc, #32]	; (800a194 <vPortExitCritical+0x50>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d105      	bne.n	800a186 <vPortExitCritical+0x42>
 800a17a:	2300      	movs	r3, #0
 800a17c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	f383 8811 	msr	BASEPRI, r3
}
 800a184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	2000001c 	.word	0x2000001c
	...

0800a1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1a0:	f3ef 8009 	mrs	r0, PSP
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	4b15      	ldr	r3, [pc, #84]	; (800a200 <pxCurrentTCBConst>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	f01e 0f10 	tst.w	lr, #16
 800a1b0:	bf08      	it	eq
 800a1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ba:	6010      	str	r0, [r2, #0]
 800a1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1c4:	f380 8811 	msr	BASEPRI, r0
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f7fe ffb4 	bl	800913c <vTaskSwitchContext>
 800a1d4:	f04f 0000 	mov.w	r0, #0
 800a1d8:	f380 8811 	msr	BASEPRI, r0
 800a1dc:	bc09      	pop	{r0, r3}
 800a1de:	6819      	ldr	r1, [r3, #0]
 800a1e0:	6808      	ldr	r0, [r1, #0]
 800a1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e6:	f01e 0f10 	tst.w	lr, #16
 800a1ea:	bf08      	it	eq
 800a1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1f0:	f380 8809 	msr	PSP, r0
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	f3af 8000 	nop.w

0800a200 <pxCurrentTCBConst>:
 800a200:	20001290 	.word	0x20001290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop

0800a208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	607b      	str	r3, [r7, #4]
}
 800a220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a222:	f7fe fed1 	bl	8008fc8 <xTaskIncrementTick>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <xPortSysTickHandler+0x40>)
 800a22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	2300      	movs	r3, #0
 800a236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	f383 8811 	msr	BASEPRI, r3
}
 800a23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a24c:	b480      	push	{r7}
 800a24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a250:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <vPortSetupTimerInterrupt+0x34>)
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a256:	4b0b      	ldr	r3, [pc, #44]	; (800a284 <vPortSetupTimerInterrupt+0x38>)
 800a258:	2200      	movs	r2, #0
 800a25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a25c:	4b0a      	ldr	r3, [pc, #40]	; (800a288 <vPortSetupTimerInterrupt+0x3c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a0a      	ldr	r2, [pc, #40]	; (800a28c <vPortSetupTimerInterrupt+0x40>)
 800a262:	fba2 2303 	umull	r2, r3, r2, r3
 800a266:	099b      	lsrs	r3, r3, #6
 800a268:	4a09      	ldr	r2, [pc, #36]	; (800a290 <vPortSetupTimerInterrupt+0x44>)
 800a26a:	3b01      	subs	r3, #1
 800a26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a26e:	4b04      	ldr	r3, [pc, #16]	; (800a280 <vPortSetupTimerInterrupt+0x34>)
 800a270:	2207      	movs	r2, #7
 800a272:	601a      	str	r2, [r3, #0]
}
 800a274:	bf00      	nop
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	e000e010 	.word	0xe000e010
 800a284:	e000e018 	.word	0xe000e018
 800a288:	20000010 	.word	0x20000010
 800a28c:	10624dd3 	.word	0x10624dd3
 800a290:	e000e014 	.word	0xe000e014

0800a294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a2a4 <vPortEnableVFP+0x10>
 800a298:	6801      	ldr	r1, [r0, #0]
 800a29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a29e:	6001      	str	r1, [r0, #0]
 800a2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2a2:	bf00      	nop
 800a2a4:	e000ed88 	.word	0xe000ed88

0800a2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2ae:	f3ef 8305 	mrs	r3, IPSR
 800a2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b0f      	cmp	r3, #15
 800a2b8:	d914      	bls.n	800a2e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2ba:	4a17      	ldr	r2, [pc, #92]	; (800a318 <vPortValidateInterruptPriority+0x70>)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4413      	add	r3, r2
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2c4:	4b15      	ldr	r3, [pc, #84]	; (800a31c <vPortValidateInterruptPriority+0x74>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	7afa      	ldrb	r2, [r7, #11]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d20a      	bcs.n	800a2e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	607b      	str	r3, [r7, #4]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2e4:	4b0e      	ldr	r3, [pc, #56]	; (800a320 <vPortValidateInterruptPriority+0x78>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <vPortValidateInterruptPriority+0x7c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d90a      	bls.n	800a30a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	603b      	str	r3, [r7, #0]
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <vPortValidateInterruptPriority+0x60>
	}
 800a30a:	bf00      	nop
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	e000e3f0 	.word	0xe000e3f0
 800a31c:	200018bc 	.word	0x200018bc
 800a320:	e000ed0c 	.word	0xe000ed0c
 800a324:	200018c0 	.word	0x200018c0

0800a328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08a      	sub	sp, #40	; 0x28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a330:	2300      	movs	r3, #0
 800a332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a334:	f7fe fd8c 	bl	8008e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a338:	4b5b      	ldr	r3, [pc, #364]	; (800a4a8 <pvPortMalloc+0x180>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a340:	f000 f920 	bl	800a584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a344:	4b59      	ldr	r3, [pc, #356]	; (800a4ac <pvPortMalloc+0x184>)
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4013      	ands	r3, r2
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f040 8093 	bne.w	800a478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01d      	beq.n	800a394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a358:	2208      	movs	r2, #8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4413      	add	r3, r2
 800a35e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	2b00      	cmp	r3, #0
 800a368:	d014      	beq.n	800a394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f023 0307 	bic.w	r3, r3, #7
 800a370:	3308      	adds	r3, #8
 800a372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00a      	beq.n	800a394 <pvPortMalloc+0x6c>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	617b      	str	r3, [r7, #20]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d06e      	beq.n	800a478 <pvPortMalloc+0x150>
 800a39a:	4b45      	ldr	r3, [pc, #276]	; (800a4b0 <pvPortMalloc+0x188>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d869      	bhi.n	800a478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3a4:	4b43      	ldr	r3, [pc, #268]	; (800a4b4 <pvPortMalloc+0x18c>)
 800a3a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3a8:	4b42      	ldr	r3, [pc, #264]	; (800a4b4 <pvPortMalloc+0x18c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3ae:	e004      	b.n	800a3ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d903      	bls.n	800a3cc <pvPortMalloc+0xa4>
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1f1      	bne.n	800a3b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3cc:	4b36      	ldr	r3, [pc, #216]	; (800a4a8 <pvPortMalloc+0x180>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d050      	beq.n	800a478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2208      	movs	r2, #8
 800a3dc:	4413      	add	r3, r2
 800a3de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	2308      	movs	r3, #8
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d91f      	bls.n	800a438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <pvPortMalloc+0xf8>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	613b      	str	r3, [r7, #16]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	1ad2      	subs	r2, r2, r3
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a432:	69b8      	ldr	r0, [r7, #24]
 800a434:	f000 f908 	bl	800a648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a438:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <pvPortMalloc+0x188>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	4a1b      	ldr	r2, [pc, #108]	; (800a4b0 <pvPortMalloc+0x188>)
 800a444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a446:	4b1a      	ldr	r3, [pc, #104]	; (800a4b0 <pvPortMalloc+0x188>)
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4b1b      	ldr	r3, [pc, #108]	; (800a4b8 <pvPortMalloc+0x190>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d203      	bcs.n	800a45a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a452:	4b17      	ldr	r3, [pc, #92]	; (800a4b0 <pvPortMalloc+0x188>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a18      	ldr	r2, [pc, #96]	; (800a4b8 <pvPortMalloc+0x190>)
 800a458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	4b13      	ldr	r3, [pc, #76]	; (800a4ac <pvPortMalloc+0x184>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	431a      	orrs	r2, r3
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	2200      	movs	r2, #0
 800a46c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a46e:	4b13      	ldr	r3, [pc, #76]	; (800a4bc <pvPortMalloc+0x194>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3301      	adds	r3, #1
 800a474:	4a11      	ldr	r2, [pc, #68]	; (800a4bc <pvPortMalloc+0x194>)
 800a476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a478:	f7fe fcf8 	bl	8008e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	f003 0307 	and.w	r3, r3, #7
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00a      	beq.n	800a49c <pvPortMalloc+0x174>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60fb      	str	r3, [r7, #12]
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <pvPortMalloc+0x172>
	return pvReturn;
 800a49c:	69fb      	ldr	r3, [r7, #28]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3728      	adds	r7, #40	; 0x28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200054cc 	.word	0x200054cc
 800a4ac:	200054e0 	.word	0x200054e0
 800a4b0:	200054d0 	.word	0x200054d0
 800a4b4:	200054c4 	.word	0x200054c4
 800a4b8:	200054d4 	.word	0x200054d4
 800a4bc:	200054d8 	.word	0x200054d8

0800a4c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d04d      	beq.n	800a56e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4d2:	2308      	movs	r3, #8
 800a4d4:	425b      	negs	r3, r3
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	4413      	add	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	4b24      	ldr	r3, [pc, #144]	; (800a578 <vPortFree+0xb8>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10a      	bne.n	800a504 <vPortFree+0x44>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	60fb      	str	r3, [r7, #12]
}
 800a500:	bf00      	nop
 800a502:	e7fe      	b.n	800a502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00a      	beq.n	800a522 <vPortFree+0x62>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	60bb      	str	r3, [r7, #8]
}
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	4b14      	ldr	r3, [pc, #80]	; (800a578 <vPortFree+0xb8>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4013      	ands	r3, r2
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d01e      	beq.n	800a56e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d11a      	bne.n	800a56e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <vPortFree+0xb8>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	43db      	mvns	r3, r3
 800a542:	401a      	ands	r2, r3
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a548:	f7fe fc82 	bl	8008e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	4b0a      	ldr	r3, [pc, #40]	; (800a57c <vPortFree+0xbc>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4413      	add	r3, r2
 800a556:	4a09      	ldr	r2, [pc, #36]	; (800a57c <vPortFree+0xbc>)
 800a558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a55a:	6938      	ldr	r0, [r7, #16]
 800a55c:	f000 f874 	bl	800a648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a560:	4b07      	ldr	r3, [pc, #28]	; (800a580 <vPortFree+0xc0>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3301      	adds	r3, #1
 800a566:	4a06      	ldr	r2, [pc, #24]	; (800a580 <vPortFree+0xc0>)
 800a568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a56a:	f7fe fc7f 	bl	8008e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a56e:	bf00      	nop
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	200054e0 	.word	0x200054e0
 800a57c:	200054d0 	.word	0x200054d0
 800a580:	200054dc 	.word	0x200054dc

0800a584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a58a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a58e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a590:	4b27      	ldr	r3, [pc, #156]	; (800a630 <prvHeapInit+0xac>)
 800a592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00c      	beq.n	800a5b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3307      	adds	r3, #7
 800a5a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 0307 	bic.w	r3, r3, #7
 800a5aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	4a1f      	ldr	r2, [pc, #124]	; (800a630 <prvHeapInit+0xac>)
 800a5b4:	4413      	add	r3, r2
 800a5b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5bc:	4a1d      	ldr	r2, [pc, #116]	; (800a634 <prvHeapInit+0xb0>)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5c2:	4b1c      	ldr	r3, [pc, #112]	; (800a634 <prvHeapInit+0xb0>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 0307 	bic.w	r3, r3, #7
 800a5de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4a15      	ldr	r2, [pc, #84]	; (800a638 <prvHeapInit+0xb4>)
 800a5e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5e6:	4b14      	ldr	r3, [pc, #80]	; (800a638 <prvHeapInit+0xb4>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ee:	4b12      	ldr	r3, [pc, #72]	; (800a638 <prvHeapInit+0xb4>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	1ad2      	subs	r2, r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a604:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <prvHeapInit+0xb4>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	4a0a      	ldr	r2, [pc, #40]	; (800a63c <prvHeapInit+0xb8>)
 800a612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	4a09      	ldr	r2, [pc, #36]	; (800a640 <prvHeapInit+0xbc>)
 800a61a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a61c:	4b09      	ldr	r3, [pc, #36]	; (800a644 <prvHeapInit+0xc0>)
 800a61e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a622:	601a      	str	r2, [r3, #0]
}
 800a624:	bf00      	nop
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	200018c4 	.word	0x200018c4
 800a634:	200054c4 	.word	0x200054c4
 800a638:	200054cc 	.word	0x200054cc
 800a63c:	200054d4 	.word	0x200054d4
 800a640:	200054d0 	.word	0x200054d0
 800a644:	200054e0 	.word	0x200054e0

0800a648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a650:	4b28      	ldr	r3, [pc, #160]	; (800a6f4 <prvInsertBlockIntoFreeList+0xac>)
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e002      	b.n	800a65c <prvInsertBlockIntoFreeList+0x14>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	429a      	cmp	r2, r3
 800a664:	d8f7      	bhi.n	800a656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	4413      	add	r3, r2
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	429a      	cmp	r2, r3
 800a676:	d108      	bne.n	800a68a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	441a      	add	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	441a      	add	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d118      	bne.n	800a6d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	4b15      	ldr	r3, [pc, #84]	; (800a6f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d00d      	beq.n	800a6c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	441a      	add	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	e008      	b.n	800a6d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6c6:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	e003      	b.n	800a6d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d002      	beq.n	800a6e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6e6:	bf00      	nop
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	200054c4 	.word	0x200054c4
 800a6f8:	200054cc 	.word	0x200054cc

0800a6fc <__cvt>:
 800a6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a700:	ec55 4b10 	vmov	r4, r5, d0
 800a704:	2d00      	cmp	r5, #0
 800a706:	460e      	mov	r6, r1
 800a708:	4619      	mov	r1, r3
 800a70a:	462b      	mov	r3, r5
 800a70c:	bfbb      	ittet	lt
 800a70e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a712:	461d      	movlt	r5, r3
 800a714:	2300      	movge	r3, #0
 800a716:	232d      	movlt	r3, #45	; 0x2d
 800a718:	700b      	strb	r3, [r1, #0]
 800a71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a71c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a720:	4691      	mov	r9, r2
 800a722:	f023 0820 	bic.w	r8, r3, #32
 800a726:	bfbc      	itt	lt
 800a728:	4622      	movlt	r2, r4
 800a72a:	4614      	movlt	r4, r2
 800a72c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a730:	d005      	beq.n	800a73e <__cvt+0x42>
 800a732:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a736:	d100      	bne.n	800a73a <__cvt+0x3e>
 800a738:	3601      	adds	r6, #1
 800a73a:	2102      	movs	r1, #2
 800a73c:	e000      	b.n	800a740 <__cvt+0x44>
 800a73e:	2103      	movs	r1, #3
 800a740:	ab03      	add	r3, sp, #12
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	ab02      	add	r3, sp, #8
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	ec45 4b10 	vmov	d0, r4, r5
 800a74c:	4653      	mov	r3, sl
 800a74e:	4632      	mov	r2, r6
 800a750:	f000 fe42 	bl	800b3d8 <_dtoa_r>
 800a754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a758:	4607      	mov	r7, r0
 800a75a:	d102      	bne.n	800a762 <__cvt+0x66>
 800a75c:	f019 0f01 	tst.w	r9, #1
 800a760:	d022      	beq.n	800a7a8 <__cvt+0xac>
 800a762:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a766:	eb07 0906 	add.w	r9, r7, r6
 800a76a:	d110      	bne.n	800a78e <__cvt+0x92>
 800a76c:	783b      	ldrb	r3, [r7, #0]
 800a76e:	2b30      	cmp	r3, #48	; 0x30
 800a770:	d10a      	bne.n	800a788 <__cvt+0x8c>
 800a772:	2200      	movs	r2, #0
 800a774:	2300      	movs	r3, #0
 800a776:	4620      	mov	r0, r4
 800a778:	4629      	mov	r1, r5
 800a77a:	f7f6 f9a5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a77e:	b918      	cbnz	r0, 800a788 <__cvt+0x8c>
 800a780:	f1c6 0601 	rsb	r6, r6, #1
 800a784:	f8ca 6000 	str.w	r6, [sl]
 800a788:	f8da 3000 	ldr.w	r3, [sl]
 800a78c:	4499      	add	r9, r3
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	f7f6 f997 	bl	8000ac8 <__aeabi_dcmpeq>
 800a79a:	b108      	cbz	r0, 800a7a0 <__cvt+0xa4>
 800a79c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7a0:	2230      	movs	r2, #48	; 0x30
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	454b      	cmp	r3, r9
 800a7a6:	d307      	bcc.n	800a7b8 <__cvt+0xbc>
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7ac:	1bdb      	subs	r3, r3, r7
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	b004      	add	sp, #16
 800a7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b8:	1c59      	adds	r1, r3, #1
 800a7ba:	9103      	str	r1, [sp, #12]
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	e7f0      	b.n	800a7a2 <__cvt+0xa6>

0800a7c0 <__exponent>:
 800a7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	bfb8      	it	lt
 800a7c8:	4249      	neglt	r1, r1
 800a7ca:	f803 2b02 	strb.w	r2, [r3], #2
 800a7ce:	bfb4      	ite	lt
 800a7d0:	222d      	movlt	r2, #45	; 0x2d
 800a7d2:	222b      	movge	r2, #43	; 0x2b
 800a7d4:	2909      	cmp	r1, #9
 800a7d6:	7042      	strb	r2, [r0, #1]
 800a7d8:	dd2a      	ble.n	800a830 <__exponent+0x70>
 800a7da:	f10d 0207 	add.w	r2, sp, #7
 800a7de:	4617      	mov	r7, r2
 800a7e0:	260a      	movs	r6, #10
 800a7e2:	4694      	mov	ip, r2
 800a7e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800a7e8:	fb06 1415 	mls	r4, r6, r5, r1
 800a7ec:	3430      	adds	r4, #48	; 0x30
 800a7ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	2c63      	cmp	r4, #99	; 0x63
 800a7f6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	dcf1      	bgt.n	800a7e2 <__exponent+0x22>
 800a7fe:	3130      	adds	r1, #48	; 0x30
 800a800:	f1ac 0402 	sub.w	r4, ip, #2
 800a804:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a808:	1c41      	adds	r1, r0, #1
 800a80a:	4622      	mov	r2, r4
 800a80c:	42ba      	cmp	r2, r7
 800a80e:	d30a      	bcc.n	800a826 <__exponent+0x66>
 800a810:	f10d 0209 	add.w	r2, sp, #9
 800a814:	eba2 020c 	sub.w	r2, r2, ip
 800a818:	42bc      	cmp	r4, r7
 800a81a:	bf88      	it	hi
 800a81c:	2200      	movhi	r2, #0
 800a81e:	4413      	add	r3, r2
 800a820:	1a18      	subs	r0, r3, r0
 800a822:	b003      	add	sp, #12
 800a824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a826:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a82a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a82e:	e7ed      	b.n	800a80c <__exponent+0x4c>
 800a830:	2330      	movs	r3, #48	; 0x30
 800a832:	3130      	adds	r1, #48	; 0x30
 800a834:	7083      	strb	r3, [r0, #2]
 800a836:	70c1      	strb	r1, [r0, #3]
 800a838:	1d03      	adds	r3, r0, #4
 800a83a:	e7f1      	b.n	800a820 <__exponent+0x60>

0800a83c <_printf_float>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	ed2d 8b02 	vpush	{d8}
 800a844:	b08d      	sub	sp, #52	; 0x34
 800a846:	460c      	mov	r4, r1
 800a848:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a84c:	4616      	mov	r6, r2
 800a84e:	461f      	mov	r7, r3
 800a850:	4605      	mov	r5, r0
 800a852:	f000 fca3 	bl	800b19c <_localeconv_r>
 800a856:	f8d0 a000 	ldr.w	sl, [r0]
 800a85a:	4650      	mov	r0, sl
 800a85c:	f7f5 fd08 	bl	8000270 <strlen>
 800a860:	2300      	movs	r3, #0
 800a862:	930a      	str	r3, [sp, #40]	; 0x28
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	f8d8 3000 	ldr.w	r3, [r8]
 800a86c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a870:	3307      	adds	r3, #7
 800a872:	f023 0307 	bic.w	r3, r3, #7
 800a876:	f103 0208 	add.w	r2, r3, #8
 800a87a:	f8c8 2000 	str.w	r2, [r8]
 800a87e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	f8cd 8018 	str.w	r8, [sp, #24]
 800a88c:	ee08 0a10 	vmov	s16, r0
 800a890:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a898:	4b9e      	ldr	r3, [pc, #632]	; (800ab14 <_printf_float+0x2d8>)
 800a89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a89e:	f7f6 f945 	bl	8000b2c <__aeabi_dcmpun>
 800a8a2:	bb88      	cbnz	r0, 800a908 <_printf_float+0xcc>
 800a8a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8a8:	4b9a      	ldr	r3, [pc, #616]	; (800ab14 <_printf_float+0x2d8>)
 800a8aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8ae:	f7f6 f91f 	bl	8000af0 <__aeabi_dcmple>
 800a8b2:	bb48      	cbnz	r0, 800a908 <_printf_float+0xcc>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	f7f6 f90e 	bl	8000adc <__aeabi_dcmplt>
 800a8c0:	b110      	cbz	r0, 800a8c8 <_printf_float+0x8c>
 800a8c2:	232d      	movs	r3, #45	; 0x2d
 800a8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8c8:	4a93      	ldr	r2, [pc, #588]	; (800ab18 <_printf_float+0x2dc>)
 800a8ca:	4b94      	ldr	r3, [pc, #592]	; (800ab1c <_printf_float+0x2e0>)
 800a8cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a8d0:	bf94      	ite	ls
 800a8d2:	4690      	movls	r8, r2
 800a8d4:	4698      	movhi	r8, r3
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	6123      	str	r3, [r4, #16]
 800a8da:	9b05      	ldr	r3, [sp, #20]
 800a8dc:	f023 0304 	bic.w	r3, r3, #4
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	f04f 0900 	mov.w	r9, #0
 800a8e6:	9700      	str	r7, [sp, #0]
 800a8e8:	4633      	mov	r3, r6
 800a8ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f000 f9da 	bl	800aca8 <_printf_common>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	f040 8090 	bne.w	800aa1a <_printf_float+0x1de>
 800a8fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8fe:	b00d      	add	sp, #52	; 0x34
 800a900:	ecbd 8b02 	vpop	{d8}
 800a904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a908:	4642      	mov	r2, r8
 800a90a:	464b      	mov	r3, r9
 800a90c:	4640      	mov	r0, r8
 800a90e:	4649      	mov	r1, r9
 800a910:	f7f6 f90c 	bl	8000b2c <__aeabi_dcmpun>
 800a914:	b140      	cbz	r0, 800a928 <_printf_float+0xec>
 800a916:	464b      	mov	r3, r9
 800a918:	2b00      	cmp	r3, #0
 800a91a:	bfbc      	itt	lt
 800a91c:	232d      	movlt	r3, #45	; 0x2d
 800a91e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a922:	4a7f      	ldr	r2, [pc, #508]	; (800ab20 <_printf_float+0x2e4>)
 800a924:	4b7f      	ldr	r3, [pc, #508]	; (800ab24 <_printf_float+0x2e8>)
 800a926:	e7d1      	b.n	800a8cc <_printf_float+0x90>
 800a928:	6863      	ldr	r3, [r4, #4]
 800a92a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a92e:	9206      	str	r2, [sp, #24]
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	d13f      	bne.n	800a9b4 <_printf_float+0x178>
 800a934:	2306      	movs	r3, #6
 800a936:	6063      	str	r3, [r4, #4]
 800a938:	9b05      	ldr	r3, [sp, #20]
 800a93a:	6861      	ldr	r1, [r4, #4]
 800a93c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a940:	2300      	movs	r3, #0
 800a942:	9303      	str	r3, [sp, #12]
 800a944:	ab0a      	add	r3, sp, #40	; 0x28
 800a946:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a94a:	ab09      	add	r3, sp, #36	; 0x24
 800a94c:	ec49 8b10 	vmov	d0, r8, r9
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	6022      	str	r2, [r4, #0]
 800a954:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a958:	4628      	mov	r0, r5
 800a95a:	f7ff fecf 	bl	800a6fc <__cvt>
 800a95e:	9b06      	ldr	r3, [sp, #24]
 800a960:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a962:	2b47      	cmp	r3, #71	; 0x47
 800a964:	4680      	mov	r8, r0
 800a966:	d108      	bne.n	800a97a <_printf_float+0x13e>
 800a968:	1cc8      	adds	r0, r1, #3
 800a96a:	db02      	blt.n	800a972 <_printf_float+0x136>
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	4299      	cmp	r1, r3
 800a970:	dd41      	ble.n	800a9f6 <_printf_float+0x1ba>
 800a972:	f1ab 0302 	sub.w	r3, fp, #2
 800a976:	fa5f fb83 	uxtb.w	fp, r3
 800a97a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a97e:	d820      	bhi.n	800a9c2 <_printf_float+0x186>
 800a980:	3901      	subs	r1, #1
 800a982:	465a      	mov	r2, fp
 800a984:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a988:	9109      	str	r1, [sp, #36]	; 0x24
 800a98a:	f7ff ff19 	bl	800a7c0 <__exponent>
 800a98e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a990:	1813      	adds	r3, r2, r0
 800a992:	2a01      	cmp	r2, #1
 800a994:	4681      	mov	r9, r0
 800a996:	6123      	str	r3, [r4, #16]
 800a998:	dc02      	bgt.n	800a9a0 <_printf_float+0x164>
 800a99a:	6822      	ldr	r2, [r4, #0]
 800a99c:	07d2      	lsls	r2, r2, #31
 800a99e:	d501      	bpl.n	800a9a4 <_printf_float+0x168>
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	6123      	str	r3, [r4, #16]
 800a9a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d09c      	beq.n	800a8e6 <_printf_float+0xaa>
 800a9ac:	232d      	movs	r3, #45	; 0x2d
 800a9ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b2:	e798      	b.n	800a8e6 <_printf_float+0xaa>
 800a9b4:	9a06      	ldr	r2, [sp, #24]
 800a9b6:	2a47      	cmp	r2, #71	; 0x47
 800a9b8:	d1be      	bne.n	800a938 <_printf_float+0xfc>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1bc      	bne.n	800a938 <_printf_float+0xfc>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e7b9      	b.n	800a936 <_printf_float+0xfa>
 800a9c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a9c6:	d118      	bne.n	800a9fa <_printf_float+0x1be>
 800a9c8:	2900      	cmp	r1, #0
 800a9ca:	6863      	ldr	r3, [r4, #4]
 800a9cc:	dd0b      	ble.n	800a9e6 <_printf_float+0x1aa>
 800a9ce:	6121      	str	r1, [r4, #16]
 800a9d0:	b913      	cbnz	r3, 800a9d8 <_printf_float+0x19c>
 800a9d2:	6822      	ldr	r2, [r4, #0]
 800a9d4:	07d0      	lsls	r0, r2, #31
 800a9d6:	d502      	bpl.n	800a9de <_printf_float+0x1a2>
 800a9d8:	3301      	adds	r3, #1
 800a9da:	440b      	add	r3, r1
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9e0:	f04f 0900 	mov.w	r9, #0
 800a9e4:	e7de      	b.n	800a9a4 <_printf_float+0x168>
 800a9e6:	b913      	cbnz	r3, 800a9ee <_printf_float+0x1b2>
 800a9e8:	6822      	ldr	r2, [r4, #0]
 800a9ea:	07d2      	lsls	r2, r2, #31
 800a9ec:	d501      	bpl.n	800a9f2 <_printf_float+0x1b6>
 800a9ee:	3302      	adds	r3, #2
 800a9f0:	e7f4      	b.n	800a9dc <_printf_float+0x1a0>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e7f2      	b.n	800a9dc <_printf_float+0x1a0>
 800a9f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9fc:	4299      	cmp	r1, r3
 800a9fe:	db05      	blt.n	800aa0c <_printf_float+0x1d0>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	6121      	str	r1, [r4, #16]
 800aa04:	07d8      	lsls	r0, r3, #31
 800aa06:	d5ea      	bpl.n	800a9de <_printf_float+0x1a2>
 800aa08:	1c4b      	adds	r3, r1, #1
 800aa0a:	e7e7      	b.n	800a9dc <_printf_float+0x1a0>
 800aa0c:	2900      	cmp	r1, #0
 800aa0e:	bfd4      	ite	le
 800aa10:	f1c1 0202 	rsble	r2, r1, #2
 800aa14:	2201      	movgt	r2, #1
 800aa16:	4413      	add	r3, r2
 800aa18:	e7e0      	b.n	800a9dc <_printf_float+0x1a0>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	055a      	lsls	r2, r3, #21
 800aa1e:	d407      	bmi.n	800aa30 <_printf_float+0x1f4>
 800aa20:	6923      	ldr	r3, [r4, #16]
 800aa22:	4642      	mov	r2, r8
 800aa24:	4631      	mov	r1, r6
 800aa26:	4628      	mov	r0, r5
 800aa28:	47b8      	blx	r7
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	d12c      	bne.n	800aa88 <_printf_float+0x24c>
 800aa2e:	e764      	b.n	800a8fa <_printf_float+0xbe>
 800aa30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa34:	f240 80e0 	bls.w	800abf8 <_printf_float+0x3bc>
 800aa38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f7f6 f842 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d034      	beq.n	800aab2 <_printf_float+0x276>
 800aa48:	4a37      	ldr	r2, [pc, #220]	; (800ab28 <_printf_float+0x2ec>)
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	4628      	mov	r0, r5
 800aa50:	47b8      	blx	r7
 800aa52:	3001      	adds	r0, #1
 800aa54:	f43f af51 	beq.w	800a8fa <_printf_float+0xbe>
 800aa58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	db02      	blt.n	800aa66 <_printf_float+0x22a>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	07d8      	lsls	r0, r3, #31
 800aa64:	d510      	bpl.n	800aa88 <_printf_float+0x24c>
 800aa66:	ee18 3a10 	vmov	r3, s16
 800aa6a:	4652      	mov	r2, sl
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4628      	mov	r0, r5
 800aa70:	47b8      	blx	r7
 800aa72:	3001      	adds	r0, #1
 800aa74:	f43f af41 	beq.w	800a8fa <_printf_float+0xbe>
 800aa78:	f04f 0800 	mov.w	r8, #0
 800aa7c:	f104 091a 	add.w	r9, r4, #26
 800aa80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa82:	3b01      	subs	r3, #1
 800aa84:	4543      	cmp	r3, r8
 800aa86:	dc09      	bgt.n	800aa9c <_printf_float+0x260>
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	079b      	lsls	r3, r3, #30
 800aa8c:	f100 8107 	bmi.w	800ac9e <_printf_float+0x462>
 800aa90:	68e0      	ldr	r0, [r4, #12]
 800aa92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa94:	4298      	cmp	r0, r3
 800aa96:	bfb8      	it	lt
 800aa98:	4618      	movlt	r0, r3
 800aa9a:	e730      	b.n	800a8fe <_printf_float+0xc2>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	464a      	mov	r2, r9
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	f43f af27 	beq.w	800a8fa <_printf_float+0xbe>
 800aaac:	f108 0801 	add.w	r8, r8, #1
 800aab0:	e7e6      	b.n	800aa80 <_printf_float+0x244>
 800aab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	dc39      	bgt.n	800ab2c <_printf_float+0x2f0>
 800aab8:	4a1b      	ldr	r2, [pc, #108]	; (800ab28 <_printf_float+0x2ec>)
 800aaba:	2301      	movs	r3, #1
 800aabc:	4631      	mov	r1, r6
 800aabe:	4628      	mov	r0, r5
 800aac0:	47b8      	blx	r7
 800aac2:	3001      	adds	r0, #1
 800aac4:	f43f af19 	beq.w	800a8fa <_printf_float+0xbe>
 800aac8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aacc:	4313      	orrs	r3, r2
 800aace:	d102      	bne.n	800aad6 <_printf_float+0x29a>
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	07d9      	lsls	r1, r3, #31
 800aad4:	d5d8      	bpl.n	800aa88 <_printf_float+0x24c>
 800aad6:	ee18 3a10 	vmov	r3, s16
 800aada:	4652      	mov	r2, sl
 800aadc:	4631      	mov	r1, r6
 800aade:	4628      	mov	r0, r5
 800aae0:	47b8      	blx	r7
 800aae2:	3001      	adds	r0, #1
 800aae4:	f43f af09 	beq.w	800a8fa <_printf_float+0xbe>
 800aae8:	f04f 0900 	mov.w	r9, #0
 800aaec:	f104 0a1a 	add.w	sl, r4, #26
 800aaf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf2:	425b      	negs	r3, r3
 800aaf4:	454b      	cmp	r3, r9
 800aaf6:	dc01      	bgt.n	800aafc <_printf_float+0x2c0>
 800aaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafa:	e792      	b.n	800aa22 <_printf_float+0x1e6>
 800aafc:	2301      	movs	r3, #1
 800aafe:	4652      	mov	r2, sl
 800ab00:	4631      	mov	r1, r6
 800ab02:	4628      	mov	r0, r5
 800ab04:	47b8      	blx	r7
 800ab06:	3001      	adds	r0, #1
 800ab08:	f43f aef7 	beq.w	800a8fa <_printf_float+0xbe>
 800ab0c:	f109 0901 	add.w	r9, r9, #1
 800ab10:	e7ee      	b.n	800aaf0 <_printf_float+0x2b4>
 800ab12:	bf00      	nop
 800ab14:	7fefffff 	.word	0x7fefffff
 800ab18:	0800d568 	.word	0x0800d568
 800ab1c:	0800d56c 	.word	0x0800d56c
 800ab20:	0800d570 	.word	0x0800d570
 800ab24:	0800d574 	.word	0x0800d574
 800ab28:	0800d578 	.word	0x0800d578
 800ab2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab30:	429a      	cmp	r2, r3
 800ab32:	bfa8      	it	ge
 800ab34:	461a      	movge	r2, r3
 800ab36:	2a00      	cmp	r2, #0
 800ab38:	4691      	mov	r9, r2
 800ab3a:	dc37      	bgt.n	800abac <_printf_float+0x370>
 800ab3c:	f04f 0b00 	mov.w	fp, #0
 800ab40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab44:	f104 021a 	add.w	r2, r4, #26
 800ab48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab4a:	9305      	str	r3, [sp, #20]
 800ab4c:	eba3 0309 	sub.w	r3, r3, r9
 800ab50:	455b      	cmp	r3, fp
 800ab52:	dc33      	bgt.n	800abbc <_printf_float+0x380>
 800ab54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	db3b      	blt.n	800abd4 <_printf_float+0x398>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	07da      	lsls	r2, r3, #31
 800ab60:	d438      	bmi.n	800abd4 <_printf_float+0x398>
 800ab62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ab66:	eba2 0903 	sub.w	r9, r2, r3
 800ab6a:	9b05      	ldr	r3, [sp, #20]
 800ab6c:	1ad2      	subs	r2, r2, r3
 800ab6e:	4591      	cmp	r9, r2
 800ab70:	bfa8      	it	ge
 800ab72:	4691      	movge	r9, r2
 800ab74:	f1b9 0f00 	cmp.w	r9, #0
 800ab78:	dc35      	bgt.n	800abe6 <_printf_float+0x3aa>
 800ab7a:	f04f 0800 	mov.w	r8, #0
 800ab7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab82:	f104 0a1a 	add.w	sl, r4, #26
 800ab86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab8a:	1a9b      	subs	r3, r3, r2
 800ab8c:	eba3 0309 	sub.w	r3, r3, r9
 800ab90:	4543      	cmp	r3, r8
 800ab92:	f77f af79 	ble.w	800aa88 <_printf_float+0x24c>
 800ab96:	2301      	movs	r3, #1
 800ab98:	4652      	mov	r2, sl
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b8      	blx	r7
 800aba0:	3001      	adds	r0, #1
 800aba2:	f43f aeaa 	beq.w	800a8fa <_printf_float+0xbe>
 800aba6:	f108 0801 	add.w	r8, r8, #1
 800abaa:	e7ec      	b.n	800ab86 <_printf_float+0x34a>
 800abac:	4613      	mov	r3, r2
 800abae:	4631      	mov	r1, r6
 800abb0:	4642      	mov	r2, r8
 800abb2:	4628      	mov	r0, r5
 800abb4:	47b8      	blx	r7
 800abb6:	3001      	adds	r0, #1
 800abb8:	d1c0      	bne.n	800ab3c <_printf_float+0x300>
 800abba:	e69e      	b.n	800a8fa <_printf_float+0xbe>
 800abbc:	2301      	movs	r3, #1
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	9205      	str	r2, [sp, #20]
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	f43f ae97 	beq.w	800a8fa <_printf_float+0xbe>
 800abcc:	9a05      	ldr	r2, [sp, #20]
 800abce:	f10b 0b01 	add.w	fp, fp, #1
 800abd2:	e7b9      	b.n	800ab48 <_printf_float+0x30c>
 800abd4:	ee18 3a10 	vmov	r3, s16
 800abd8:	4652      	mov	r2, sl
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	d1be      	bne.n	800ab62 <_printf_float+0x326>
 800abe4:	e689      	b.n	800a8fa <_printf_float+0xbe>
 800abe6:	9a05      	ldr	r2, [sp, #20]
 800abe8:	464b      	mov	r3, r9
 800abea:	4442      	add	r2, r8
 800abec:	4631      	mov	r1, r6
 800abee:	4628      	mov	r0, r5
 800abf0:	47b8      	blx	r7
 800abf2:	3001      	adds	r0, #1
 800abf4:	d1c1      	bne.n	800ab7a <_printf_float+0x33e>
 800abf6:	e680      	b.n	800a8fa <_printf_float+0xbe>
 800abf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abfa:	2a01      	cmp	r2, #1
 800abfc:	dc01      	bgt.n	800ac02 <_printf_float+0x3c6>
 800abfe:	07db      	lsls	r3, r3, #31
 800ac00:	d53a      	bpl.n	800ac78 <_printf_float+0x43c>
 800ac02:	2301      	movs	r3, #1
 800ac04:	4642      	mov	r2, r8
 800ac06:	4631      	mov	r1, r6
 800ac08:	4628      	mov	r0, r5
 800ac0a:	47b8      	blx	r7
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	f43f ae74 	beq.w	800a8fa <_printf_float+0xbe>
 800ac12:	ee18 3a10 	vmov	r3, s16
 800ac16:	4652      	mov	r2, sl
 800ac18:	4631      	mov	r1, r6
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	47b8      	blx	r7
 800ac1e:	3001      	adds	r0, #1
 800ac20:	f43f ae6b 	beq.w	800a8fa <_printf_float+0xbe>
 800ac24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ac30:	f7f5 ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac34:	b9d8      	cbnz	r0, 800ac6e <_printf_float+0x432>
 800ac36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ac3a:	f108 0201 	add.w	r2, r8, #1
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b8      	blx	r7
 800ac44:	3001      	adds	r0, #1
 800ac46:	d10e      	bne.n	800ac66 <_printf_float+0x42a>
 800ac48:	e657      	b.n	800a8fa <_printf_float+0xbe>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	4652      	mov	r2, sl
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4628      	mov	r0, r5
 800ac52:	47b8      	blx	r7
 800ac54:	3001      	adds	r0, #1
 800ac56:	f43f ae50 	beq.w	800a8fa <_printf_float+0xbe>
 800ac5a:	f108 0801 	add.w	r8, r8, #1
 800ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac60:	3b01      	subs	r3, #1
 800ac62:	4543      	cmp	r3, r8
 800ac64:	dcf1      	bgt.n	800ac4a <_printf_float+0x40e>
 800ac66:	464b      	mov	r3, r9
 800ac68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac6c:	e6da      	b.n	800aa24 <_printf_float+0x1e8>
 800ac6e:	f04f 0800 	mov.w	r8, #0
 800ac72:	f104 0a1a 	add.w	sl, r4, #26
 800ac76:	e7f2      	b.n	800ac5e <_printf_float+0x422>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	4642      	mov	r2, r8
 800ac7c:	e7df      	b.n	800ac3e <_printf_float+0x402>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	464a      	mov	r2, r9
 800ac82:	4631      	mov	r1, r6
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b8      	blx	r7
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f43f ae36 	beq.w	800a8fa <_printf_float+0xbe>
 800ac8e:	f108 0801 	add.w	r8, r8, #1
 800ac92:	68e3      	ldr	r3, [r4, #12]
 800ac94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac96:	1a5b      	subs	r3, r3, r1
 800ac98:	4543      	cmp	r3, r8
 800ac9a:	dcf0      	bgt.n	800ac7e <_printf_float+0x442>
 800ac9c:	e6f8      	b.n	800aa90 <_printf_float+0x254>
 800ac9e:	f04f 0800 	mov.w	r8, #0
 800aca2:	f104 0919 	add.w	r9, r4, #25
 800aca6:	e7f4      	b.n	800ac92 <_printf_float+0x456>

0800aca8 <_printf_common>:
 800aca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acac:	4616      	mov	r6, r2
 800acae:	4699      	mov	r9, r3
 800acb0:	688a      	ldr	r2, [r1, #8]
 800acb2:	690b      	ldr	r3, [r1, #16]
 800acb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acb8:	4293      	cmp	r3, r2
 800acba:	bfb8      	it	lt
 800acbc:	4613      	movlt	r3, r2
 800acbe:	6033      	str	r3, [r6, #0]
 800acc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acc4:	4607      	mov	r7, r0
 800acc6:	460c      	mov	r4, r1
 800acc8:	b10a      	cbz	r2, 800acce <_printf_common+0x26>
 800acca:	3301      	adds	r3, #1
 800accc:	6033      	str	r3, [r6, #0]
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	0699      	lsls	r1, r3, #26
 800acd2:	bf42      	ittt	mi
 800acd4:	6833      	ldrmi	r3, [r6, #0]
 800acd6:	3302      	addmi	r3, #2
 800acd8:	6033      	strmi	r3, [r6, #0]
 800acda:	6825      	ldr	r5, [r4, #0]
 800acdc:	f015 0506 	ands.w	r5, r5, #6
 800ace0:	d106      	bne.n	800acf0 <_printf_common+0x48>
 800ace2:	f104 0a19 	add.w	sl, r4, #25
 800ace6:	68e3      	ldr	r3, [r4, #12]
 800ace8:	6832      	ldr	r2, [r6, #0]
 800acea:	1a9b      	subs	r3, r3, r2
 800acec:	42ab      	cmp	r3, r5
 800acee:	dc26      	bgt.n	800ad3e <_printf_common+0x96>
 800acf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acf4:	1e13      	subs	r3, r2, #0
 800acf6:	6822      	ldr	r2, [r4, #0]
 800acf8:	bf18      	it	ne
 800acfa:	2301      	movne	r3, #1
 800acfc:	0692      	lsls	r2, r2, #26
 800acfe:	d42b      	bmi.n	800ad58 <_printf_common+0xb0>
 800ad00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad04:	4649      	mov	r1, r9
 800ad06:	4638      	mov	r0, r7
 800ad08:	47c0      	blx	r8
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	d01e      	beq.n	800ad4c <_printf_common+0xa4>
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	6922      	ldr	r2, [r4, #16]
 800ad12:	f003 0306 	and.w	r3, r3, #6
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	bf02      	ittt	eq
 800ad1a:	68e5      	ldreq	r5, [r4, #12]
 800ad1c:	6833      	ldreq	r3, [r6, #0]
 800ad1e:	1aed      	subeq	r5, r5, r3
 800ad20:	68a3      	ldr	r3, [r4, #8]
 800ad22:	bf0c      	ite	eq
 800ad24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad28:	2500      	movne	r5, #0
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	bfc4      	itt	gt
 800ad2e:	1a9b      	subgt	r3, r3, r2
 800ad30:	18ed      	addgt	r5, r5, r3
 800ad32:	2600      	movs	r6, #0
 800ad34:	341a      	adds	r4, #26
 800ad36:	42b5      	cmp	r5, r6
 800ad38:	d11a      	bne.n	800ad70 <_printf_common+0xc8>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	e008      	b.n	800ad50 <_printf_common+0xa8>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4652      	mov	r2, sl
 800ad42:	4649      	mov	r1, r9
 800ad44:	4638      	mov	r0, r7
 800ad46:	47c0      	blx	r8
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d103      	bne.n	800ad54 <_printf_common+0xac>
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad54:	3501      	adds	r5, #1
 800ad56:	e7c6      	b.n	800ace6 <_printf_common+0x3e>
 800ad58:	18e1      	adds	r1, r4, r3
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	2030      	movs	r0, #48	; 0x30
 800ad5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad62:	4422      	add	r2, r4
 800ad64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad6c:	3302      	adds	r3, #2
 800ad6e:	e7c7      	b.n	800ad00 <_printf_common+0x58>
 800ad70:	2301      	movs	r3, #1
 800ad72:	4622      	mov	r2, r4
 800ad74:	4649      	mov	r1, r9
 800ad76:	4638      	mov	r0, r7
 800ad78:	47c0      	blx	r8
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d0e6      	beq.n	800ad4c <_printf_common+0xa4>
 800ad7e:	3601      	adds	r6, #1
 800ad80:	e7d9      	b.n	800ad36 <_printf_common+0x8e>
	...

0800ad84 <_printf_i>:
 800ad84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad88:	7e0f      	ldrb	r7, [r1, #24]
 800ad8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad8c:	2f78      	cmp	r7, #120	; 0x78
 800ad8e:	4691      	mov	r9, r2
 800ad90:	4680      	mov	r8, r0
 800ad92:	460c      	mov	r4, r1
 800ad94:	469a      	mov	sl, r3
 800ad96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad9a:	d807      	bhi.n	800adac <_printf_i+0x28>
 800ad9c:	2f62      	cmp	r7, #98	; 0x62
 800ad9e:	d80a      	bhi.n	800adb6 <_printf_i+0x32>
 800ada0:	2f00      	cmp	r7, #0
 800ada2:	f000 80d4 	beq.w	800af4e <_printf_i+0x1ca>
 800ada6:	2f58      	cmp	r7, #88	; 0x58
 800ada8:	f000 80c0 	beq.w	800af2c <_printf_i+0x1a8>
 800adac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adb4:	e03a      	b.n	800ae2c <_printf_i+0xa8>
 800adb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adba:	2b15      	cmp	r3, #21
 800adbc:	d8f6      	bhi.n	800adac <_printf_i+0x28>
 800adbe:	a101      	add	r1, pc, #4	; (adr r1, 800adc4 <_printf_i+0x40>)
 800adc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adc4:	0800ae1d 	.word	0x0800ae1d
 800adc8:	0800ae31 	.word	0x0800ae31
 800adcc:	0800adad 	.word	0x0800adad
 800add0:	0800adad 	.word	0x0800adad
 800add4:	0800adad 	.word	0x0800adad
 800add8:	0800adad 	.word	0x0800adad
 800addc:	0800ae31 	.word	0x0800ae31
 800ade0:	0800adad 	.word	0x0800adad
 800ade4:	0800adad 	.word	0x0800adad
 800ade8:	0800adad 	.word	0x0800adad
 800adec:	0800adad 	.word	0x0800adad
 800adf0:	0800af35 	.word	0x0800af35
 800adf4:	0800ae5d 	.word	0x0800ae5d
 800adf8:	0800aeef 	.word	0x0800aeef
 800adfc:	0800adad 	.word	0x0800adad
 800ae00:	0800adad 	.word	0x0800adad
 800ae04:	0800af57 	.word	0x0800af57
 800ae08:	0800adad 	.word	0x0800adad
 800ae0c:	0800ae5d 	.word	0x0800ae5d
 800ae10:	0800adad 	.word	0x0800adad
 800ae14:	0800adad 	.word	0x0800adad
 800ae18:	0800aef7 	.word	0x0800aef7
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	1d1a      	adds	r2, r3, #4
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	602a      	str	r2, [r5, #0]
 800ae24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e09f      	b.n	800af70 <_printf_i+0x1ec>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	682b      	ldr	r3, [r5, #0]
 800ae34:	0607      	lsls	r7, r0, #24
 800ae36:	f103 0104 	add.w	r1, r3, #4
 800ae3a:	6029      	str	r1, [r5, #0]
 800ae3c:	d501      	bpl.n	800ae42 <_printf_i+0xbe>
 800ae3e:	681e      	ldr	r6, [r3, #0]
 800ae40:	e003      	b.n	800ae4a <_printf_i+0xc6>
 800ae42:	0646      	lsls	r6, r0, #25
 800ae44:	d5fb      	bpl.n	800ae3e <_printf_i+0xba>
 800ae46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae4a:	2e00      	cmp	r6, #0
 800ae4c:	da03      	bge.n	800ae56 <_printf_i+0xd2>
 800ae4e:	232d      	movs	r3, #45	; 0x2d
 800ae50:	4276      	negs	r6, r6
 800ae52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae56:	485a      	ldr	r0, [pc, #360]	; (800afc0 <_printf_i+0x23c>)
 800ae58:	230a      	movs	r3, #10
 800ae5a:	e012      	b.n	800ae82 <_printf_i+0xfe>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	6820      	ldr	r0, [r4, #0]
 800ae60:	1d19      	adds	r1, r3, #4
 800ae62:	6029      	str	r1, [r5, #0]
 800ae64:	0605      	lsls	r5, r0, #24
 800ae66:	d501      	bpl.n	800ae6c <_printf_i+0xe8>
 800ae68:	681e      	ldr	r6, [r3, #0]
 800ae6a:	e002      	b.n	800ae72 <_printf_i+0xee>
 800ae6c:	0641      	lsls	r1, r0, #25
 800ae6e:	d5fb      	bpl.n	800ae68 <_printf_i+0xe4>
 800ae70:	881e      	ldrh	r6, [r3, #0]
 800ae72:	4853      	ldr	r0, [pc, #332]	; (800afc0 <_printf_i+0x23c>)
 800ae74:	2f6f      	cmp	r7, #111	; 0x6f
 800ae76:	bf0c      	ite	eq
 800ae78:	2308      	moveq	r3, #8
 800ae7a:	230a      	movne	r3, #10
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae82:	6865      	ldr	r5, [r4, #4]
 800ae84:	60a5      	str	r5, [r4, #8]
 800ae86:	2d00      	cmp	r5, #0
 800ae88:	bfa2      	ittt	ge
 800ae8a:	6821      	ldrge	r1, [r4, #0]
 800ae8c:	f021 0104 	bicge.w	r1, r1, #4
 800ae90:	6021      	strge	r1, [r4, #0]
 800ae92:	b90e      	cbnz	r6, 800ae98 <_printf_i+0x114>
 800ae94:	2d00      	cmp	r5, #0
 800ae96:	d04b      	beq.n	800af30 <_printf_i+0x1ac>
 800ae98:	4615      	mov	r5, r2
 800ae9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae9e:	fb03 6711 	mls	r7, r3, r1, r6
 800aea2:	5dc7      	ldrb	r7, [r0, r7]
 800aea4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aea8:	4637      	mov	r7, r6
 800aeaa:	42bb      	cmp	r3, r7
 800aeac:	460e      	mov	r6, r1
 800aeae:	d9f4      	bls.n	800ae9a <_printf_i+0x116>
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	d10b      	bne.n	800aecc <_printf_i+0x148>
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	07de      	lsls	r6, r3, #31
 800aeb8:	d508      	bpl.n	800aecc <_printf_i+0x148>
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	6861      	ldr	r1, [r4, #4]
 800aebe:	4299      	cmp	r1, r3
 800aec0:	bfde      	ittt	le
 800aec2:	2330      	movle	r3, #48	; 0x30
 800aec4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aec8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aecc:	1b52      	subs	r2, r2, r5
 800aece:	6122      	str	r2, [r4, #16]
 800aed0:	f8cd a000 	str.w	sl, [sp]
 800aed4:	464b      	mov	r3, r9
 800aed6:	aa03      	add	r2, sp, #12
 800aed8:	4621      	mov	r1, r4
 800aeda:	4640      	mov	r0, r8
 800aedc:	f7ff fee4 	bl	800aca8 <_printf_common>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d14a      	bne.n	800af7a <_printf_i+0x1f6>
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aee8:	b004      	add	sp, #16
 800aeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	f043 0320 	orr.w	r3, r3, #32
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	4833      	ldr	r0, [pc, #204]	; (800afc4 <_printf_i+0x240>)
 800aef8:	2778      	movs	r7, #120	; 0x78
 800aefa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	6829      	ldr	r1, [r5, #0]
 800af02:	061f      	lsls	r7, r3, #24
 800af04:	f851 6b04 	ldr.w	r6, [r1], #4
 800af08:	d402      	bmi.n	800af10 <_printf_i+0x18c>
 800af0a:	065f      	lsls	r7, r3, #25
 800af0c:	bf48      	it	mi
 800af0e:	b2b6      	uxthmi	r6, r6
 800af10:	07df      	lsls	r7, r3, #31
 800af12:	bf48      	it	mi
 800af14:	f043 0320 	orrmi.w	r3, r3, #32
 800af18:	6029      	str	r1, [r5, #0]
 800af1a:	bf48      	it	mi
 800af1c:	6023      	strmi	r3, [r4, #0]
 800af1e:	b91e      	cbnz	r6, 800af28 <_printf_i+0x1a4>
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	f023 0320 	bic.w	r3, r3, #32
 800af26:	6023      	str	r3, [r4, #0]
 800af28:	2310      	movs	r3, #16
 800af2a:	e7a7      	b.n	800ae7c <_printf_i+0xf8>
 800af2c:	4824      	ldr	r0, [pc, #144]	; (800afc0 <_printf_i+0x23c>)
 800af2e:	e7e4      	b.n	800aefa <_printf_i+0x176>
 800af30:	4615      	mov	r5, r2
 800af32:	e7bd      	b.n	800aeb0 <_printf_i+0x12c>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	6826      	ldr	r6, [r4, #0]
 800af38:	6961      	ldr	r1, [r4, #20]
 800af3a:	1d18      	adds	r0, r3, #4
 800af3c:	6028      	str	r0, [r5, #0]
 800af3e:	0635      	lsls	r5, r6, #24
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	d501      	bpl.n	800af48 <_printf_i+0x1c4>
 800af44:	6019      	str	r1, [r3, #0]
 800af46:	e002      	b.n	800af4e <_printf_i+0x1ca>
 800af48:	0670      	lsls	r0, r6, #25
 800af4a:	d5fb      	bpl.n	800af44 <_printf_i+0x1c0>
 800af4c:	8019      	strh	r1, [r3, #0]
 800af4e:	2300      	movs	r3, #0
 800af50:	6123      	str	r3, [r4, #16]
 800af52:	4615      	mov	r5, r2
 800af54:	e7bc      	b.n	800aed0 <_printf_i+0x14c>
 800af56:	682b      	ldr	r3, [r5, #0]
 800af58:	1d1a      	adds	r2, r3, #4
 800af5a:	602a      	str	r2, [r5, #0]
 800af5c:	681d      	ldr	r5, [r3, #0]
 800af5e:	6862      	ldr	r2, [r4, #4]
 800af60:	2100      	movs	r1, #0
 800af62:	4628      	mov	r0, r5
 800af64:	f7f5 f934 	bl	80001d0 <memchr>
 800af68:	b108      	cbz	r0, 800af6e <_printf_i+0x1ea>
 800af6a:	1b40      	subs	r0, r0, r5
 800af6c:	6060      	str	r0, [r4, #4]
 800af6e:	6863      	ldr	r3, [r4, #4]
 800af70:	6123      	str	r3, [r4, #16]
 800af72:	2300      	movs	r3, #0
 800af74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af78:	e7aa      	b.n	800aed0 <_printf_i+0x14c>
 800af7a:	6923      	ldr	r3, [r4, #16]
 800af7c:	462a      	mov	r2, r5
 800af7e:	4649      	mov	r1, r9
 800af80:	4640      	mov	r0, r8
 800af82:	47d0      	blx	sl
 800af84:	3001      	adds	r0, #1
 800af86:	d0ad      	beq.n	800aee4 <_printf_i+0x160>
 800af88:	6823      	ldr	r3, [r4, #0]
 800af8a:	079b      	lsls	r3, r3, #30
 800af8c:	d413      	bmi.n	800afb6 <_printf_i+0x232>
 800af8e:	68e0      	ldr	r0, [r4, #12]
 800af90:	9b03      	ldr	r3, [sp, #12]
 800af92:	4298      	cmp	r0, r3
 800af94:	bfb8      	it	lt
 800af96:	4618      	movlt	r0, r3
 800af98:	e7a6      	b.n	800aee8 <_printf_i+0x164>
 800af9a:	2301      	movs	r3, #1
 800af9c:	4632      	mov	r2, r6
 800af9e:	4649      	mov	r1, r9
 800afa0:	4640      	mov	r0, r8
 800afa2:	47d0      	blx	sl
 800afa4:	3001      	adds	r0, #1
 800afa6:	d09d      	beq.n	800aee4 <_printf_i+0x160>
 800afa8:	3501      	adds	r5, #1
 800afaa:	68e3      	ldr	r3, [r4, #12]
 800afac:	9903      	ldr	r1, [sp, #12]
 800afae:	1a5b      	subs	r3, r3, r1
 800afb0:	42ab      	cmp	r3, r5
 800afb2:	dcf2      	bgt.n	800af9a <_printf_i+0x216>
 800afb4:	e7eb      	b.n	800af8e <_printf_i+0x20a>
 800afb6:	2500      	movs	r5, #0
 800afb8:	f104 0619 	add.w	r6, r4, #25
 800afbc:	e7f5      	b.n	800afaa <_printf_i+0x226>
 800afbe:	bf00      	nop
 800afc0:	0800d57a 	.word	0x0800d57a
 800afc4:	0800d58b 	.word	0x0800d58b

0800afc8 <std>:
 800afc8:	2300      	movs	r3, #0
 800afca:	b510      	push	{r4, lr}
 800afcc:	4604      	mov	r4, r0
 800afce:	e9c0 3300 	strd	r3, r3, [r0]
 800afd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afd6:	6083      	str	r3, [r0, #8]
 800afd8:	8181      	strh	r1, [r0, #12]
 800afda:	6643      	str	r3, [r0, #100]	; 0x64
 800afdc:	81c2      	strh	r2, [r0, #14]
 800afde:	6183      	str	r3, [r0, #24]
 800afe0:	4619      	mov	r1, r3
 800afe2:	2208      	movs	r2, #8
 800afe4:	305c      	adds	r0, #92	; 0x5c
 800afe6:	f000 f8d1 	bl	800b18c <memset>
 800afea:	4b0d      	ldr	r3, [pc, #52]	; (800b020 <std+0x58>)
 800afec:	6263      	str	r3, [r4, #36]	; 0x24
 800afee:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <std+0x5c>)
 800aff0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aff2:	4b0d      	ldr	r3, [pc, #52]	; (800b028 <std+0x60>)
 800aff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aff6:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <std+0x64>)
 800aff8:	6323      	str	r3, [r4, #48]	; 0x30
 800affa:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <std+0x68>)
 800affc:	6224      	str	r4, [r4, #32]
 800affe:	429c      	cmp	r4, r3
 800b000:	d006      	beq.n	800b010 <std+0x48>
 800b002:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b006:	4294      	cmp	r4, r2
 800b008:	d002      	beq.n	800b010 <std+0x48>
 800b00a:	33d0      	adds	r3, #208	; 0xd0
 800b00c:	429c      	cmp	r4, r3
 800b00e:	d105      	bne.n	800b01c <std+0x54>
 800b010:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b018:	f000 b944 	b.w	800b2a4 <__retarget_lock_init_recursive>
 800b01c:	bd10      	pop	{r4, pc}
 800b01e:	bf00      	nop
 800b020:	0800ccc1 	.word	0x0800ccc1
 800b024:	0800cce3 	.word	0x0800cce3
 800b028:	0800cd1b 	.word	0x0800cd1b
 800b02c:	0800cd3f 	.word	0x0800cd3f
 800b030:	200054e4 	.word	0x200054e4

0800b034 <stdio_exit_handler>:
 800b034:	4a02      	ldr	r2, [pc, #8]	; (800b040 <stdio_exit_handler+0xc>)
 800b036:	4903      	ldr	r1, [pc, #12]	; (800b044 <stdio_exit_handler+0x10>)
 800b038:	4803      	ldr	r0, [pc, #12]	; (800b048 <stdio_exit_handler+0x14>)
 800b03a:	f000 b869 	b.w	800b110 <_fwalk_sglue>
 800b03e:	bf00      	nop
 800b040:	20000020 	.word	0x20000020
 800b044:	0800c561 	.word	0x0800c561
 800b048:	2000002c 	.word	0x2000002c

0800b04c <cleanup_stdio>:
 800b04c:	6841      	ldr	r1, [r0, #4]
 800b04e:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <cleanup_stdio+0x34>)
 800b050:	4299      	cmp	r1, r3
 800b052:	b510      	push	{r4, lr}
 800b054:	4604      	mov	r4, r0
 800b056:	d001      	beq.n	800b05c <cleanup_stdio+0x10>
 800b058:	f001 fa82 	bl	800c560 <_fflush_r>
 800b05c:	68a1      	ldr	r1, [r4, #8]
 800b05e:	4b09      	ldr	r3, [pc, #36]	; (800b084 <cleanup_stdio+0x38>)
 800b060:	4299      	cmp	r1, r3
 800b062:	d002      	beq.n	800b06a <cleanup_stdio+0x1e>
 800b064:	4620      	mov	r0, r4
 800b066:	f001 fa7b 	bl	800c560 <_fflush_r>
 800b06a:	68e1      	ldr	r1, [r4, #12]
 800b06c:	4b06      	ldr	r3, [pc, #24]	; (800b088 <cleanup_stdio+0x3c>)
 800b06e:	4299      	cmp	r1, r3
 800b070:	d004      	beq.n	800b07c <cleanup_stdio+0x30>
 800b072:	4620      	mov	r0, r4
 800b074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b078:	f001 ba72 	b.w	800c560 <_fflush_r>
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	200054e4 	.word	0x200054e4
 800b084:	2000554c 	.word	0x2000554c
 800b088:	200055b4 	.word	0x200055b4

0800b08c <global_stdio_init.part.0>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <global_stdio_init.part.0+0x30>)
 800b090:	4c0b      	ldr	r4, [pc, #44]	; (800b0c0 <global_stdio_init.part.0+0x34>)
 800b092:	4a0c      	ldr	r2, [pc, #48]	; (800b0c4 <global_stdio_init.part.0+0x38>)
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	4620      	mov	r0, r4
 800b098:	2200      	movs	r2, #0
 800b09a:	2104      	movs	r1, #4
 800b09c:	f7ff ff94 	bl	800afc8 <std>
 800b0a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	2109      	movs	r1, #9
 800b0a8:	f7ff ff8e 	bl	800afc8 <std>
 800b0ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b6:	2112      	movs	r1, #18
 800b0b8:	f7ff bf86 	b.w	800afc8 <std>
 800b0bc:	2000561c 	.word	0x2000561c
 800b0c0:	200054e4 	.word	0x200054e4
 800b0c4:	0800b035 	.word	0x0800b035

0800b0c8 <__sfp_lock_acquire>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	; (800b0d0 <__sfp_lock_acquire+0x8>)
 800b0ca:	f000 b8ec 	b.w	800b2a6 <__retarget_lock_acquire_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	20005625 	.word	0x20005625

0800b0d4 <__sfp_lock_release>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	; (800b0dc <__sfp_lock_release+0x8>)
 800b0d6:	f000 b8e7 	b.w	800b2a8 <__retarget_lock_release_recursive>
 800b0da:	bf00      	nop
 800b0dc:	20005625 	.word	0x20005625

0800b0e0 <__sinit>:
 800b0e0:	b510      	push	{r4, lr}
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	f7ff fff0 	bl	800b0c8 <__sfp_lock_acquire>
 800b0e8:	6a23      	ldr	r3, [r4, #32]
 800b0ea:	b11b      	cbz	r3, 800b0f4 <__sinit+0x14>
 800b0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f0:	f7ff bff0 	b.w	800b0d4 <__sfp_lock_release>
 800b0f4:	4b04      	ldr	r3, [pc, #16]	; (800b108 <__sinit+0x28>)
 800b0f6:	6223      	str	r3, [r4, #32]
 800b0f8:	4b04      	ldr	r3, [pc, #16]	; (800b10c <__sinit+0x2c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1f5      	bne.n	800b0ec <__sinit+0xc>
 800b100:	f7ff ffc4 	bl	800b08c <global_stdio_init.part.0>
 800b104:	e7f2      	b.n	800b0ec <__sinit+0xc>
 800b106:	bf00      	nop
 800b108:	0800b04d 	.word	0x0800b04d
 800b10c:	2000561c 	.word	0x2000561c

0800b110 <_fwalk_sglue>:
 800b110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b114:	4607      	mov	r7, r0
 800b116:	4688      	mov	r8, r1
 800b118:	4614      	mov	r4, r2
 800b11a:	2600      	movs	r6, #0
 800b11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b120:	f1b9 0901 	subs.w	r9, r9, #1
 800b124:	d505      	bpl.n	800b132 <_fwalk_sglue+0x22>
 800b126:	6824      	ldr	r4, [r4, #0]
 800b128:	2c00      	cmp	r4, #0
 800b12a:	d1f7      	bne.n	800b11c <_fwalk_sglue+0xc>
 800b12c:	4630      	mov	r0, r6
 800b12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d907      	bls.n	800b148 <_fwalk_sglue+0x38>
 800b138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b13c:	3301      	adds	r3, #1
 800b13e:	d003      	beq.n	800b148 <_fwalk_sglue+0x38>
 800b140:	4629      	mov	r1, r5
 800b142:	4638      	mov	r0, r7
 800b144:	47c0      	blx	r8
 800b146:	4306      	orrs	r6, r0
 800b148:	3568      	adds	r5, #104	; 0x68
 800b14a:	e7e9      	b.n	800b120 <_fwalk_sglue+0x10>

0800b14c <_vsiprintf_r>:
 800b14c:	b500      	push	{lr}
 800b14e:	b09b      	sub	sp, #108	; 0x6c
 800b150:	9100      	str	r1, [sp, #0]
 800b152:	9104      	str	r1, [sp, #16]
 800b154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b158:	9105      	str	r1, [sp, #20]
 800b15a:	9102      	str	r1, [sp, #8]
 800b15c:	4905      	ldr	r1, [pc, #20]	; (800b174 <_vsiprintf_r+0x28>)
 800b15e:	9103      	str	r1, [sp, #12]
 800b160:	4669      	mov	r1, sp
 800b162:	f000 ffd1 	bl	800c108 <_svfiprintf_r>
 800b166:	9b00      	ldr	r3, [sp, #0]
 800b168:	2200      	movs	r2, #0
 800b16a:	701a      	strb	r2, [r3, #0]
 800b16c:	b01b      	add	sp, #108	; 0x6c
 800b16e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b172:	bf00      	nop
 800b174:	ffff0208 	.word	0xffff0208

0800b178 <vsiprintf>:
 800b178:	4613      	mov	r3, r2
 800b17a:	460a      	mov	r2, r1
 800b17c:	4601      	mov	r1, r0
 800b17e:	4802      	ldr	r0, [pc, #8]	; (800b188 <vsiprintf+0x10>)
 800b180:	6800      	ldr	r0, [r0, #0]
 800b182:	f7ff bfe3 	b.w	800b14c <_vsiprintf_r>
 800b186:	bf00      	nop
 800b188:	20000078 	.word	0x20000078

0800b18c <memset>:
 800b18c:	4402      	add	r2, r0
 800b18e:	4603      	mov	r3, r0
 800b190:	4293      	cmp	r3, r2
 800b192:	d100      	bne.n	800b196 <memset+0xa>
 800b194:	4770      	bx	lr
 800b196:	f803 1b01 	strb.w	r1, [r3], #1
 800b19a:	e7f9      	b.n	800b190 <memset+0x4>

0800b19c <_localeconv_r>:
 800b19c:	4800      	ldr	r0, [pc, #0]	; (800b1a0 <_localeconv_r+0x4>)
 800b19e:	4770      	bx	lr
 800b1a0:	2000016c 	.word	0x2000016c

0800b1a4 <_reclaim_reent>:
 800b1a4:	4b29      	ldr	r3, [pc, #164]	; (800b24c <_reclaim_reent+0xa8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4283      	cmp	r3, r0
 800b1aa:	b570      	push	{r4, r5, r6, lr}
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	d04b      	beq.n	800b248 <_reclaim_reent+0xa4>
 800b1b0:	69c3      	ldr	r3, [r0, #28]
 800b1b2:	b143      	cbz	r3, 800b1c6 <_reclaim_reent+0x22>
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d144      	bne.n	800b244 <_reclaim_reent+0xa0>
 800b1ba:	69e3      	ldr	r3, [r4, #28]
 800b1bc:	6819      	ldr	r1, [r3, #0]
 800b1be:	b111      	cbz	r1, 800b1c6 <_reclaim_reent+0x22>
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 fefb 	bl	800bfbc <_free_r>
 800b1c6:	6961      	ldr	r1, [r4, #20]
 800b1c8:	b111      	cbz	r1, 800b1d0 <_reclaim_reent+0x2c>
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 fef6 	bl	800bfbc <_free_r>
 800b1d0:	69e1      	ldr	r1, [r4, #28]
 800b1d2:	b111      	cbz	r1, 800b1da <_reclaim_reent+0x36>
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fef1 	bl	800bfbc <_free_r>
 800b1da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b1dc:	b111      	cbz	r1, 800b1e4 <_reclaim_reent+0x40>
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 feec 	bl	800bfbc <_free_r>
 800b1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1e6:	b111      	cbz	r1, 800b1ee <_reclaim_reent+0x4a>
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f000 fee7 	bl	800bfbc <_free_r>
 800b1ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b1f0:	b111      	cbz	r1, 800b1f8 <_reclaim_reent+0x54>
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fee2 	bl	800bfbc <_free_r>
 800b1f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b1fa:	b111      	cbz	r1, 800b202 <_reclaim_reent+0x5e>
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f000 fedd 	bl	800bfbc <_free_r>
 800b202:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b204:	b111      	cbz	r1, 800b20c <_reclaim_reent+0x68>
 800b206:	4620      	mov	r0, r4
 800b208:	f000 fed8 	bl	800bfbc <_free_r>
 800b20c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b20e:	b111      	cbz	r1, 800b216 <_reclaim_reent+0x72>
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fed3 	bl	800bfbc <_free_r>
 800b216:	6a23      	ldr	r3, [r4, #32]
 800b218:	b1b3      	cbz	r3, 800b248 <_reclaim_reent+0xa4>
 800b21a:	4620      	mov	r0, r4
 800b21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b220:	4718      	bx	r3
 800b222:	5949      	ldr	r1, [r1, r5]
 800b224:	b941      	cbnz	r1, 800b238 <_reclaim_reent+0x94>
 800b226:	3504      	adds	r5, #4
 800b228:	69e3      	ldr	r3, [r4, #28]
 800b22a:	2d80      	cmp	r5, #128	; 0x80
 800b22c:	68d9      	ldr	r1, [r3, #12]
 800b22e:	d1f8      	bne.n	800b222 <_reclaim_reent+0x7e>
 800b230:	4620      	mov	r0, r4
 800b232:	f000 fec3 	bl	800bfbc <_free_r>
 800b236:	e7c0      	b.n	800b1ba <_reclaim_reent+0x16>
 800b238:	680e      	ldr	r6, [r1, #0]
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 febe 	bl	800bfbc <_free_r>
 800b240:	4631      	mov	r1, r6
 800b242:	e7ef      	b.n	800b224 <_reclaim_reent+0x80>
 800b244:	2500      	movs	r5, #0
 800b246:	e7ef      	b.n	800b228 <_reclaim_reent+0x84>
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	bf00      	nop
 800b24c:	20000078 	.word	0x20000078

0800b250 <__errno>:
 800b250:	4b01      	ldr	r3, [pc, #4]	; (800b258 <__errno+0x8>)
 800b252:	6818      	ldr	r0, [r3, #0]
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	20000078 	.word	0x20000078

0800b25c <__libc_init_array>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	4d0d      	ldr	r5, [pc, #52]	; (800b294 <__libc_init_array+0x38>)
 800b260:	4c0d      	ldr	r4, [pc, #52]	; (800b298 <__libc_init_array+0x3c>)
 800b262:	1b64      	subs	r4, r4, r5
 800b264:	10a4      	asrs	r4, r4, #2
 800b266:	2600      	movs	r6, #0
 800b268:	42a6      	cmp	r6, r4
 800b26a:	d109      	bne.n	800b280 <__libc_init_array+0x24>
 800b26c:	4d0b      	ldr	r5, [pc, #44]	; (800b29c <__libc_init_array+0x40>)
 800b26e:	4c0c      	ldr	r4, [pc, #48]	; (800b2a0 <__libc_init_array+0x44>)
 800b270:	f002 f91e 	bl	800d4b0 <_init>
 800b274:	1b64      	subs	r4, r4, r5
 800b276:	10a4      	asrs	r4, r4, #2
 800b278:	2600      	movs	r6, #0
 800b27a:	42a6      	cmp	r6, r4
 800b27c:	d105      	bne.n	800b28a <__libc_init_array+0x2e>
 800b27e:	bd70      	pop	{r4, r5, r6, pc}
 800b280:	f855 3b04 	ldr.w	r3, [r5], #4
 800b284:	4798      	blx	r3
 800b286:	3601      	adds	r6, #1
 800b288:	e7ee      	b.n	800b268 <__libc_init_array+0xc>
 800b28a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b28e:	4798      	blx	r3
 800b290:	3601      	adds	r6, #1
 800b292:	e7f2      	b.n	800b27a <__libc_init_array+0x1e>
 800b294:	0800d8e4 	.word	0x0800d8e4
 800b298:	0800d8e4 	.word	0x0800d8e4
 800b29c:	0800d8e4 	.word	0x0800d8e4
 800b2a0:	0800d8e8 	.word	0x0800d8e8

0800b2a4 <__retarget_lock_init_recursive>:
 800b2a4:	4770      	bx	lr

0800b2a6 <__retarget_lock_acquire_recursive>:
 800b2a6:	4770      	bx	lr

0800b2a8 <__retarget_lock_release_recursive>:
 800b2a8:	4770      	bx	lr

0800b2aa <memcpy>:
 800b2aa:	440a      	add	r2, r1
 800b2ac:	4291      	cmp	r1, r2
 800b2ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b2b2:	d100      	bne.n	800b2b6 <memcpy+0xc>
 800b2b4:	4770      	bx	lr
 800b2b6:	b510      	push	{r4, lr}
 800b2b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2c0:	4291      	cmp	r1, r2
 800b2c2:	d1f9      	bne.n	800b2b8 <memcpy+0xe>
 800b2c4:	bd10      	pop	{r4, pc}

0800b2c6 <quorem>:
 800b2c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ca:	6903      	ldr	r3, [r0, #16]
 800b2cc:	690c      	ldr	r4, [r1, #16]
 800b2ce:	42a3      	cmp	r3, r4
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	db7e      	blt.n	800b3d2 <quorem+0x10c>
 800b2d4:	3c01      	subs	r4, #1
 800b2d6:	f101 0814 	add.w	r8, r1, #20
 800b2da:	f100 0514 	add.w	r5, r0, #20
 800b2de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b2f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2fc:	d331      	bcc.n	800b362 <quorem+0x9c>
 800b2fe:	f04f 0e00 	mov.w	lr, #0
 800b302:	4640      	mov	r0, r8
 800b304:	46ac      	mov	ip, r5
 800b306:	46f2      	mov	sl, lr
 800b308:	f850 2b04 	ldr.w	r2, [r0], #4
 800b30c:	b293      	uxth	r3, r2
 800b30e:	fb06 e303 	mla	r3, r6, r3, lr
 800b312:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b316:	0c1a      	lsrs	r2, r3, #16
 800b318:	b29b      	uxth	r3, r3
 800b31a:	ebaa 0303 	sub.w	r3, sl, r3
 800b31e:	f8dc a000 	ldr.w	sl, [ip]
 800b322:	fa13 f38a 	uxtah	r3, r3, sl
 800b326:	fb06 220e 	mla	r2, r6, lr, r2
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	9b00      	ldr	r3, [sp, #0]
 800b32e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b332:	b292      	uxth	r2, r2
 800b334:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b33c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b340:	4581      	cmp	r9, r0
 800b342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b346:	f84c 3b04 	str.w	r3, [ip], #4
 800b34a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b34e:	d2db      	bcs.n	800b308 <quorem+0x42>
 800b350:	f855 300b 	ldr.w	r3, [r5, fp]
 800b354:	b92b      	cbnz	r3, 800b362 <quorem+0x9c>
 800b356:	9b01      	ldr	r3, [sp, #4]
 800b358:	3b04      	subs	r3, #4
 800b35a:	429d      	cmp	r5, r3
 800b35c:	461a      	mov	r2, r3
 800b35e:	d32c      	bcc.n	800b3ba <quorem+0xf4>
 800b360:	613c      	str	r4, [r7, #16]
 800b362:	4638      	mov	r0, r7
 800b364:	f001 fbac 	bl	800cac0 <__mcmp>
 800b368:	2800      	cmp	r0, #0
 800b36a:	db22      	blt.n	800b3b2 <quorem+0xec>
 800b36c:	3601      	adds	r6, #1
 800b36e:	4629      	mov	r1, r5
 800b370:	2000      	movs	r0, #0
 800b372:	f858 2b04 	ldr.w	r2, [r8], #4
 800b376:	f8d1 c000 	ldr.w	ip, [r1]
 800b37a:	b293      	uxth	r3, r2
 800b37c:	1ac3      	subs	r3, r0, r3
 800b37e:	0c12      	lsrs	r2, r2, #16
 800b380:	fa13 f38c 	uxtah	r3, r3, ip
 800b384:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b392:	45c1      	cmp	r9, r8
 800b394:	f841 3b04 	str.w	r3, [r1], #4
 800b398:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b39c:	d2e9      	bcs.n	800b372 <quorem+0xac>
 800b39e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3a6:	b922      	cbnz	r2, 800b3b2 <quorem+0xec>
 800b3a8:	3b04      	subs	r3, #4
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	d30a      	bcc.n	800b3c6 <quorem+0x100>
 800b3b0:	613c      	str	r4, [r7, #16]
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	b003      	add	sp, #12
 800b3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ba:	6812      	ldr	r2, [r2, #0]
 800b3bc:	3b04      	subs	r3, #4
 800b3be:	2a00      	cmp	r2, #0
 800b3c0:	d1ce      	bne.n	800b360 <quorem+0x9a>
 800b3c2:	3c01      	subs	r4, #1
 800b3c4:	e7c9      	b.n	800b35a <quorem+0x94>
 800b3c6:	6812      	ldr	r2, [r2, #0]
 800b3c8:	3b04      	subs	r3, #4
 800b3ca:	2a00      	cmp	r2, #0
 800b3cc:	d1f0      	bne.n	800b3b0 <quorem+0xea>
 800b3ce:	3c01      	subs	r4, #1
 800b3d0:	e7eb      	b.n	800b3aa <quorem+0xe4>
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	e7ee      	b.n	800b3b4 <quorem+0xee>
	...

0800b3d8 <_dtoa_r>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	ed2d 8b04 	vpush	{d8-d9}
 800b3e0:	69c5      	ldr	r5, [r0, #28]
 800b3e2:	b093      	sub	sp, #76	; 0x4c
 800b3e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b3e8:	ec57 6b10 	vmov	r6, r7, d0
 800b3ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b3f0:	9107      	str	r1, [sp, #28]
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	920a      	str	r2, [sp, #40]	; 0x28
 800b3f6:	930d      	str	r3, [sp, #52]	; 0x34
 800b3f8:	b975      	cbnz	r5, 800b418 <_dtoa_r+0x40>
 800b3fa:	2010      	movs	r0, #16
 800b3fc:	f000 ff82 	bl	800c304 <malloc>
 800b400:	4602      	mov	r2, r0
 800b402:	61e0      	str	r0, [r4, #28]
 800b404:	b920      	cbnz	r0, 800b410 <_dtoa_r+0x38>
 800b406:	4bae      	ldr	r3, [pc, #696]	; (800b6c0 <_dtoa_r+0x2e8>)
 800b408:	21ef      	movs	r1, #239	; 0xef
 800b40a:	48ae      	ldr	r0, [pc, #696]	; (800b6c4 <_dtoa_r+0x2ec>)
 800b40c:	f001 fd3a 	bl	800ce84 <__assert_func>
 800b410:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b414:	6005      	str	r5, [r0, #0]
 800b416:	60c5      	str	r5, [r0, #12]
 800b418:	69e3      	ldr	r3, [r4, #28]
 800b41a:	6819      	ldr	r1, [r3, #0]
 800b41c:	b151      	cbz	r1, 800b434 <_dtoa_r+0x5c>
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	604a      	str	r2, [r1, #4]
 800b422:	2301      	movs	r3, #1
 800b424:	4093      	lsls	r3, r2
 800b426:	608b      	str	r3, [r1, #8]
 800b428:	4620      	mov	r0, r4
 800b42a:	f001 f90d 	bl	800c648 <_Bfree>
 800b42e:	69e3      	ldr	r3, [r4, #28]
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	1e3b      	subs	r3, r7, #0
 800b436:	bfbb      	ittet	lt
 800b438:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b43c:	9303      	strlt	r3, [sp, #12]
 800b43e:	2300      	movge	r3, #0
 800b440:	2201      	movlt	r2, #1
 800b442:	bfac      	ite	ge
 800b444:	f8c8 3000 	strge.w	r3, [r8]
 800b448:	f8c8 2000 	strlt.w	r2, [r8]
 800b44c:	4b9e      	ldr	r3, [pc, #632]	; (800b6c8 <_dtoa_r+0x2f0>)
 800b44e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b452:	ea33 0308 	bics.w	r3, r3, r8
 800b456:	d11b      	bne.n	800b490 <_dtoa_r+0xb8>
 800b458:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b45a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b464:	4333      	orrs	r3, r6
 800b466:	f000 8593 	beq.w	800bf90 <_dtoa_r+0xbb8>
 800b46a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b46c:	b963      	cbnz	r3, 800b488 <_dtoa_r+0xb0>
 800b46e:	4b97      	ldr	r3, [pc, #604]	; (800b6cc <_dtoa_r+0x2f4>)
 800b470:	e027      	b.n	800b4c2 <_dtoa_r+0xea>
 800b472:	4b97      	ldr	r3, [pc, #604]	; (800b6d0 <_dtoa_r+0x2f8>)
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	3308      	adds	r3, #8
 800b478:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	9800      	ldr	r0, [sp, #0]
 800b47e:	b013      	add	sp, #76	; 0x4c
 800b480:	ecbd 8b04 	vpop	{d8-d9}
 800b484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b488:	4b90      	ldr	r3, [pc, #576]	; (800b6cc <_dtoa_r+0x2f4>)
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	3303      	adds	r3, #3
 800b48e:	e7f3      	b.n	800b478 <_dtoa_r+0xa0>
 800b490:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b494:	2200      	movs	r2, #0
 800b496:	ec51 0b17 	vmov	r0, r1, d7
 800b49a:	eeb0 8a47 	vmov.f32	s16, s14
 800b49e:	eef0 8a67 	vmov.f32	s17, s15
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f7f5 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4a8:	4681      	mov	r9, r0
 800b4aa:	b160      	cbz	r0, 800b4c6 <_dtoa_r+0xee>
 800b4ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	6013      	str	r3, [r2, #0]
 800b4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 8568 	beq.w	800bf8a <_dtoa_r+0xbb2>
 800b4ba:	4b86      	ldr	r3, [pc, #536]	; (800b6d4 <_dtoa_r+0x2fc>)
 800b4bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	e7da      	b.n	800b47c <_dtoa_r+0xa4>
 800b4c6:	aa10      	add	r2, sp, #64	; 0x40
 800b4c8:	a911      	add	r1, sp, #68	; 0x44
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b4d0:	eef0 0a68 	vmov.f32	s1, s17
 800b4d4:	f001 fb9a 	bl	800cc0c <__d2b>
 800b4d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b4dc:	4682      	mov	sl, r0
 800b4de:	2d00      	cmp	r5, #0
 800b4e0:	d07f      	beq.n	800b5e2 <_dtoa_r+0x20a>
 800b4e2:	ee18 3a90 	vmov	r3, s17
 800b4e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b4ee:	ec51 0b18 	vmov	r0, r1, d8
 800b4f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b4f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b4fe:	4619      	mov	r1, r3
 800b500:	2200      	movs	r2, #0
 800b502:	4b75      	ldr	r3, [pc, #468]	; (800b6d8 <_dtoa_r+0x300>)
 800b504:	f7f4 fec0 	bl	8000288 <__aeabi_dsub>
 800b508:	a367      	add	r3, pc, #412	; (adr r3, 800b6a8 <_dtoa_r+0x2d0>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f5 f873 	bl	80005f8 <__aeabi_dmul>
 800b512:	a367      	add	r3, pc, #412	; (adr r3, 800b6b0 <_dtoa_r+0x2d8>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	f7f4 feb8 	bl	800028c <__adddf3>
 800b51c:	4606      	mov	r6, r0
 800b51e:	4628      	mov	r0, r5
 800b520:	460f      	mov	r7, r1
 800b522:	f7f4 ffff 	bl	8000524 <__aeabi_i2d>
 800b526:	a364      	add	r3, pc, #400	; (adr r3, 800b6b8 <_dtoa_r+0x2e0>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4630      	mov	r0, r6
 800b536:	4639      	mov	r1, r7
 800b538:	f7f4 fea8 	bl	800028c <__adddf3>
 800b53c:	4606      	mov	r6, r0
 800b53e:	460f      	mov	r7, r1
 800b540:	f7f5 fb0a 	bl	8000b58 <__aeabi_d2iz>
 800b544:	2200      	movs	r2, #0
 800b546:	4683      	mov	fp, r0
 800b548:	2300      	movs	r3, #0
 800b54a:	4630      	mov	r0, r6
 800b54c:	4639      	mov	r1, r7
 800b54e:	f7f5 fac5 	bl	8000adc <__aeabi_dcmplt>
 800b552:	b148      	cbz	r0, 800b568 <_dtoa_r+0x190>
 800b554:	4658      	mov	r0, fp
 800b556:	f7f4 ffe5 	bl	8000524 <__aeabi_i2d>
 800b55a:	4632      	mov	r2, r6
 800b55c:	463b      	mov	r3, r7
 800b55e:	f7f5 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b562:	b908      	cbnz	r0, 800b568 <_dtoa_r+0x190>
 800b564:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b568:	f1bb 0f16 	cmp.w	fp, #22
 800b56c:	d857      	bhi.n	800b61e <_dtoa_r+0x246>
 800b56e:	4b5b      	ldr	r3, [pc, #364]	; (800b6dc <_dtoa_r+0x304>)
 800b570:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	ec51 0b18 	vmov	r0, r1, d8
 800b57c:	f7f5 faae 	bl	8000adc <__aeabi_dcmplt>
 800b580:	2800      	cmp	r0, #0
 800b582:	d04e      	beq.n	800b622 <_dtoa_r+0x24a>
 800b584:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b588:	2300      	movs	r3, #0
 800b58a:	930c      	str	r3, [sp, #48]	; 0x30
 800b58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b58e:	1b5b      	subs	r3, r3, r5
 800b590:	1e5a      	subs	r2, r3, #1
 800b592:	bf45      	ittet	mi
 800b594:	f1c3 0301 	rsbmi	r3, r3, #1
 800b598:	9305      	strmi	r3, [sp, #20]
 800b59a:	2300      	movpl	r3, #0
 800b59c:	2300      	movmi	r3, #0
 800b59e:	9206      	str	r2, [sp, #24]
 800b5a0:	bf54      	ite	pl
 800b5a2:	9305      	strpl	r3, [sp, #20]
 800b5a4:	9306      	strmi	r3, [sp, #24]
 800b5a6:	f1bb 0f00 	cmp.w	fp, #0
 800b5aa:	db3c      	blt.n	800b626 <_dtoa_r+0x24e>
 800b5ac:	9b06      	ldr	r3, [sp, #24]
 800b5ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b5b2:	445b      	add	r3, fp
 800b5b4:	9306      	str	r3, [sp, #24]
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	9308      	str	r3, [sp, #32]
 800b5ba:	9b07      	ldr	r3, [sp, #28]
 800b5bc:	2b09      	cmp	r3, #9
 800b5be:	d868      	bhi.n	800b692 <_dtoa_r+0x2ba>
 800b5c0:	2b05      	cmp	r3, #5
 800b5c2:	bfc4      	itt	gt
 800b5c4:	3b04      	subgt	r3, #4
 800b5c6:	9307      	strgt	r3, [sp, #28]
 800b5c8:	9b07      	ldr	r3, [sp, #28]
 800b5ca:	f1a3 0302 	sub.w	r3, r3, #2
 800b5ce:	bfcc      	ite	gt
 800b5d0:	2500      	movgt	r5, #0
 800b5d2:	2501      	movle	r5, #1
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	f200 8085 	bhi.w	800b6e4 <_dtoa_r+0x30c>
 800b5da:	e8df f003 	tbb	[pc, r3]
 800b5de:	3b2e      	.short	0x3b2e
 800b5e0:	5839      	.short	0x5839
 800b5e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b5e6:	441d      	add	r5, r3
 800b5e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b5ec:	2b20      	cmp	r3, #32
 800b5ee:	bfc1      	itttt	gt
 800b5f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b5f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b5fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b600:	bfd6      	itet	le
 800b602:	f1c3 0320 	rsble	r3, r3, #32
 800b606:	ea48 0003 	orrgt.w	r0, r8, r3
 800b60a:	fa06 f003 	lslle.w	r0, r6, r3
 800b60e:	f7f4 ff79 	bl	8000504 <__aeabi_ui2d>
 800b612:	2201      	movs	r2, #1
 800b614:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b618:	3d01      	subs	r5, #1
 800b61a:	920e      	str	r2, [sp, #56]	; 0x38
 800b61c:	e76f      	b.n	800b4fe <_dtoa_r+0x126>
 800b61e:	2301      	movs	r3, #1
 800b620:	e7b3      	b.n	800b58a <_dtoa_r+0x1b2>
 800b622:	900c      	str	r0, [sp, #48]	; 0x30
 800b624:	e7b2      	b.n	800b58c <_dtoa_r+0x1b4>
 800b626:	9b05      	ldr	r3, [sp, #20]
 800b628:	eba3 030b 	sub.w	r3, r3, fp
 800b62c:	9305      	str	r3, [sp, #20]
 800b62e:	f1cb 0300 	rsb	r3, fp, #0
 800b632:	9308      	str	r3, [sp, #32]
 800b634:	2300      	movs	r3, #0
 800b636:	930b      	str	r3, [sp, #44]	; 0x2c
 800b638:	e7bf      	b.n	800b5ba <_dtoa_r+0x1e2>
 800b63a:	2300      	movs	r3, #0
 800b63c:	9309      	str	r3, [sp, #36]	; 0x24
 800b63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b640:	2b00      	cmp	r3, #0
 800b642:	dc52      	bgt.n	800b6ea <_dtoa_r+0x312>
 800b644:	2301      	movs	r3, #1
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	9304      	str	r3, [sp, #16]
 800b64a:	461a      	mov	r2, r3
 800b64c:	920a      	str	r2, [sp, #40]	; 0x28
 800b64e:	e00b      	b.n	800b668 <_dtoa_r+0x290>
 800b650:	2301      	movs	r3, #1
 800b652:	e7f3      	b.n	800b63c <_dtoa_r+0x264>
 800b654:	2300      	movs	r3, #0
 800b656:	9309      	str	r3, [sp, #36]	; 0x24
 800b658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b65a:	445b      	add	r3, fp
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	3301      	adds	r3, #1
 800b660:	2b01      	cmp	r3, #1
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	bfb8      	it	lt
 800b666:	2301      	movlt	r3, #1
 800b668:	69e0      	ldr	r0, [r4, #28]
 800b66a:	2100      	movs	r1, #0
 800b66c:	2204      	movs	r2, #4
 800b66e:	f102 0614 	add.w	r6, r2, #20
 800b672:	429e      	cmp	r6, r3
 800b674:	d93d      	bls.n	800b6f2 <_dtoa_r+0x31a>
 800b676:	6041      	str	r1, [r0, #4]
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 ffa5 	bl	800c5c8 <_Balloc>
 800b67e:	9000      	str	r0, [sp, #0]
 800b680:	2800      	cmp	r0, #0
 800b682:	d139      	bne.n	800b6f8 <_dtoa_r+0x320>
 800b684:	4b16      	ldr	r3, [pc, #88]	; (800b6e0 <_dtoa_r+0x308>)
 800b686:	4602      	mov	r2, r0
 800b688:	f240 11af 	movw	r1, #431	; 0x1af
 800b68c:	e6bd      	b.n	800b40a <_dtoa_r+0x32>
 800b68e:	2301      	movs	r3, #1
 800b690:	e7e1      	b.n	800b656 <_dtoa_r+0x27e>
 800b692:	2501      	movs	r5, #1
 800b694:	2300      	movs	r3, #0
 800b696:	9307      	str	r3, [sp, #28]
 800b698:	9509      	str	r5, [sp, #36]	; 0x24
 800b69a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2312      	movs	r3, #18
 800b6a6:	e7d1      	b.n	800b64c <_dtoa_r+0x274>
 800b6a8:	636f4361 	.word	0x636f4361
 800b6ac:	3fd287a7 	.word	0x3fd287a7
 800b6b0:	8b60c8b3 	.word	0x8b60c8b3
 800b6b4:	3fc68a28 	.word	0x3fc68a28
 800b6b8:	509f79fb 	.word	0x509f79fb
 800b6bc:	3fd34413 	.word	0x3fd34413
 800b6c0:	0800d5a9 	.word	0x0800d5a9
 800b6c4:	0800d5c0 	.word	0x0800d5c0
 800b6c8:	7ff00000 	.word	0x7ff00000
 800b6cc:	0800d5a5 	.word	0x0800d5a5
 800b6d0:	0800d59c 	.word	0x0800d59c
 800b6d4:	0800d579 	.word	0x0800d579
 800b6d8:	3ff80000 	.word	0x3ff80000
 800b6dc:	0800d6c0 	.word	0x0800d6c0
 800b6e0:	0800d618 	.word	0x0800d618
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e8:	e7d7      	b.n	800b69a <_dtoa_r+0x2c2>
 800b6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	9304      	str	r3, [sp, #16]
 800b6f0:	e7ba      	b.n	800b668 <_dtoa_r+0x290>
 800b6f2:	3101      	adds	r1, #1
 800b6f4:	0052      	lsls	r2, r2, #1
 800b6f6:	e7ba      	b.n	800b66e <_dtoa_r+0x296>
 800b6f8:	69e3      	ldr	r3, [r4, #28]
 800b6fa:	9a00      	ldr	r2, [sp, #0]
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	9b04      	ldr	r3, [sp, #16]
 800b700:	2b0e      	cmp	r3, #14
 800b702:	f200 80a8 	bhi.w	800b856 <_dtoa_r+0x47e>
 800b706:	2d00      	cmp	r5, #0
 800b708:	f000 80a5 	beq.w	800b856 <_dtoa_r+0x47e>
 800b70c:	f1bb 0f00 	cmp.w	fp, #0
 800b710:	dd38      	ble.n	800b784 <_dtoa_r+0x3ac>
 800b712:	4bc0      	ldr	r3, [pc, #768]	; (800ba14 <_dtoa_r+0x63c>)
 800b714:	f00b 020f 	and.w	r2, fp, #15
 800b718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b71c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b720:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b724:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b728:	d019      	beq.n	800b75e <_dtoa_r+0x386>
 800b72a:	4bbb      	ldr	r3, [pc, #748]	; (800ba18 <_dtoa_r+0x640>)
 800b72c:	ec51 0b18 	vmov	r0, r1, d8
 800b730:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b734:	f7f5 f88a 	bl	800084c <__aeabi_ddiv>
 800b738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b73c:	f008 080f 	and.w	r8, r8, #15
 800b740:	2503      	movs	r5, #3
 800b742:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ba18 <_dtoa_r+0x640>
 800b746:	f1b8 0f00 	cmp.w	r8, #0
 800b74a:	d10a      	bne.n	800b762 <_dtoa_r+0x38a>
 800b74c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b750:	4632      	mov	r2, r6
 800b752:	463b      	mov	r3, r7
 800b754:	f7f5 f87a 	bl	800084c <__aeabi_ddiv>
 800b758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b75c:	e02b      	b.n	800b7b6 <_dtoa_r+0x3de>
 800b75e:	2502      	movs	r5, #2
 800b760:	e7ef      	b.n	800b742 <_dtoa_r+0x36a>
 800b762:	f018 0f01 	tst.w	r8, #1
 800b766:	d008      	beq.n	800b77a <_dtoa_r+0x3a2>
 800b768:	4630      	mov	r0, r6
 800b76a:	4639      	mov	r1, r7
 800b76c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b770:	f7f4 ff42 	bl	80005f8 <__aeabi_dmul>
 800b774:	3501      	adds	r5, #1
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b77e:	f109 0908 	add.w	r9, r9, #8
 800b782:	e7e0      	b.n	800b746 <_dtoa_r+0x36e>
 800b784:	f000 809f 	beq.w	800b8c6 <_dtoa_r+0x4ee>
 800b788:	f1cb 0600 	rsb	r6, fp, #0
 800b78c:	4ba1      	ldr	r3, [pc, #644]	; (800ba14 <_dtoa_r+0x63c>)
 800b78e:	4fa2      	ldr	r7, [pc, #648]	; (800ba18 <_dtoa_r+0x640>)
 800b790:	f006 020f 	and.w	r2, r6, #15
 800b794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	ec51 0b18 	vmov	r0, r1, d8
 800b7a0:	f7f4 ff2a 	bl	80005f8 <__aeabi_dmul>
 800b7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7a8:	1136      	asrs	r6, r6, #4
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	2502      	movs	r5, #2
 800b7ae:	2e00      	cmp	r6, #0
 800b7b0:	d17e      	bne.n	800b8b0 <_dtoa_r+0x4d8>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1d0      	bne.n	800b758 <_dtoa_r+0x380>
 800b7b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 8084 	beq.w	800b8ca <_dtoa_r+0x4f2>
 800b7c2:	4b96      	ldr	r3, [pc, #600]	; (800ba1c <_dtoa_r+0x644>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	f7f5 f987 	bl	8000adc <__aeabi_dcmplt>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d07b      	beq.n	800b8ca <_dtoa_r+0x4f2>
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d078      	beq.n	800b8ca <_dtoa_r+0x4f2>
 800b7d8:	9b01      	ldr	r3, [sp, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dd39      	ble.n	800b852 <_dtoa_r+0x47a>
 800b7de:	4b90      	ldr	r3, [pc, #576]	; (800ba20 <_dtoa_r+0x648>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	f7f4 ff07 	bl	80005f8 <__aeabi_dmul>
 800b7ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ee:	9e01      	ldr	r6, [sp, #4]
 800b7f0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b7f4:	3501      	adds	r5, #1
 800b7f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f7f4 fe92 	bl	8000524 <__aeabi_i2d>
 800b800:	4642      	mov	r2, r8
 800b802:	464b      	mov	r3, r9
 800b804:	f7f4 fef8 	bl	80005f8 <__aeabi_dmul>
 800b808:	4b86      	ldr	r3, [pc, #536]	; (800ba24 <_dtoa_r+0x64c>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	f7f4 fd3e 	bl	800028c <__adddf3>
 800b810:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b818:	9303      	str	r3, [sp, #12]
 800b81a:	2e00      	cmp	r6, #0
 800b81c:	d158      	bne.n	800b8d0 <_dtoa_r+0x4f8>
 800b81e:	4b82      	ldr	r3, [pc, #520]	; (800ba28 <_dtoa_r+0x650>)
 800b820:	2200      	movs	r2, #0
 800b822:	4640      	mov	r0, r8
 800b824:	4649      	mov	r1, r9
 800b826:	f7f4 fd2f 	bl	8000288 <__aeabi_dsub>
 800b82a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b82e:	4680      	mov	r8, r0
 800b830:	4689      	mov	r9, r1
 800b832:	f7f5 f971 	bl	8000b18 <__aeabi_dcmpgt>
 800b836:	2800      	cmp	r0, #0
 800b838:	f040 8296 	bne.w	800bd68 <_dtoa_r+0x990>
 800b83c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b840:	4640      	mov	r0, r8
 800b842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b846:	4649      	mov	r1, r9
 800b848:	f7f5 f948 	bl	8000adc <__aeabi_dcmplt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f040 8289 	bne.w	800bd64 <_dtoa_r+0x98c>
 800b852:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f2c0 814e 	blt.w	800bafa <_dtoa_r+0x722>
 800b85e:	f1bb 0f0e 	cmp.w	fp, #14
 800b862:	f300 814a 	bgt.w	800bafa <_dtoa_r+0x722>
 800b866:	4b6b      	ldr	r3, [pc, #428]	; (800ba14 <_dtoa_r+0x63c>)
 800b868:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b872:	2b00      	cmp	r3, #0
 800b874:	f280 80dc 	bge.w	800ba30 <_dtoa_r+0x658>
 800b878:	9b04      	ldr	r3, [sp, #16]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f300 80d8 	bgt.w	800ba30 <_dtoa_r+0x658>
 800b880:	f040 826f 	bne.w	800bd62 <_dtoa_r+0x98a>
 800b884:	4b68      	ldr	r3, [pc, #416]	; (800ba28 <_dtoa_r+0x650>)
 800b886:	2200      	movs	r2, #0
 800b888:	4640      	mov	r0, r8
 800b88a:	4649      	mov	r1, r9
 800b88c:	f7f4 feb4 	bl	80005f8 <__aeabi_dmul>
 800b890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b894:	f7f5 f936 	bl	8000b04 <__aeabi_dcmpge>
 800b898:	9e04      	ldr	r6, [sp, #16]
 800b89a:	4637      	mov	r7, r6
 800b89c:	2800      	cmp	r0, #0
 800b89e:	f040 8245 	bne.w	800bd2c <_dtoa_r+0x954>
 800b8a2:	9d00      	ldr	r5, [sp, #0]
 800b8a4:	2331      	movs	r3, #49	; 0x31
 800b8a6:	f805 3b01 	strb.w	r3, [r5], #1
 800b8aa:	f10b 0b01 	add.w	fp, fp, #1
 800b8ae:	e241      	b.n	800bd34 <_dtoa_r+0x95c>
 800b8b0:	07f2      	lsls	r2, r6, #31
 800b8b2:	d505      	bpl.n	800b8c0 <_dtoa_r+0x4e8>
 800b8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8b8:	f7f4 fe9e 	bl	80005f8 <__aeabi_dmul>
 800b8bc:	3501      	adds	r5, #1
 800b8be:	2301      	movs	r3, #1
 800b8c0:	1076      	asrs	r6, r6, #1
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	e773      	b.n	800b7ae <_dtoa_r+0x3d6>
 800b8c6:	2502      	movs	r5, #2
 800b8c8:	e775      	b.n	800b7b6 <_dtoa_r+0x3de>
 800b8ca:	9e04      	ldr	r6, [sp, #16]
 800b8cc:	465f      	mov	r7, fp
 800b8ce:	e792      	b.n	800b7f6 <_dtoa_r+0x41e>
 800b8d0:	9900      	ldr	r1, [sp, #0]
 800b8d2:	4b50      	ldr	r3, [pc, #320]	; (800ba14 <_dtoa_r+0x63c>)
 800b8d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8d8:	4431      	add	r1, r6
 800b8da:	9102      	str	r1, [sp, #8]
 800b8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8de:	eeb0 9a47 	vmov.f32	s18, s14
 800b8e2:	eef0 9a67 	vmov.f32	s19, s15
 800b8e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8ee:	2900      	cmp	r1, #0
 800b8f0:	d044      	beq.n	800b97c <_dtoa_r+0x5a4>
 800b8f2:	494e      	ldr	r1, [pc, #312]	; (800ba2c <_dtoa_r+0x654>)
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	f7f4 ffa9 	bl	800084c <__aeabi_ddiv>
 800b8fa:	ec53 2b19 	vmov	r2, r3, d9
 800b8fe:	f7f4 fcc3 	bl	8000288 <__aeabi_dsub>
 800b902:	9d00      	ldr	r5, [sp, #0]
 800b904:	ec41 0b19 	vmov	d9, r0, r1
 800b908:	4649      	mov	r1, r9
 800b90a:	4640      	mov	r0, r8
 800b90c:	f7f5 f924 	bl	8000b58 <__aeabi_d2iz>
 800b910:	4606      	mov	r6, r0
 800b912:	f7f4 fe07 	bl	8000524 <__aeabi_i2d>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4640      	mov	r0, r8
 800b91c:	4649      	mov	r1, r9
 800b91e:	f7f4 fcb3 	bl	8000288 <__aeabi_dsub>
 800b922:	3630      	adds	r6, #48	; 0x30
 800b924:	f805 6b01 	strb.w	r6, [r5], #1
 800b928:	ec53 2b19 	vmov	r2, r3, d9
 800b92c:	4680      	mov	r8, r0
 800b92e:	4689      	mov	r9, r1
 800b930:	f7f5 f8d4 	bl	8000adc <__aeabi_dcmplt>
 800b934:	2800      	cmp	r0, #0
 800b936:	d164      	bne.n	800ba02 <_dtoa_r+0x62a>
 800b938:	4642      	mov	r2, r8
 800b93a:	464b      	mov	r3, r9
 800b93c:	4937      	ldr	r1, [pc, #220]	; (800ba1c <_dtoa_r+0x644>)
 800b93e:	2000      	movs	r0, #0
 800b940:	f7f4 fca2 	bl	8000288 <__aeabi_dsub>
 800b944:	ec53 2b19 	vmov	r2, r3, d9
 800b948:	f7f5 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	f040 80b6 	bne.w	800babe <_dtoa_r+0x6e6>
 800b952:	9b02      	ldr	r3, [sp, #8]
 800b954:	429d      	cmp	r5, r3
 800b956:	f43f af7c 	beq.w	800b852 <_dtoa_r+0x47a>
 800b95a:	4b31      	ldr	r3, [pc, #196]	; (800ba20 <_dtoa_r+0x648>)
 800b95c:	ec51 0b19 	vmov	r0, r1, d9
 800b960:	2200      	movs	r2, #0
 800b962:	f7f4 fe49 	bl	80005f8 <__aeabi_dmul>
 800b966:	4b2e      	ldr	r3, [pc, #184]	; (800ba20 <_dtoa_r+0x648>)
 800b968:	ec41 0b19 	vmov	d9, r0, r1
 800b96c:	2200      	movs	r2, #0
 800b96e:	4640      	mov	r0, r8
 800b970:	4649      	mov	r1, r9
 800b972:	f7f4 fe41 	bl	80005f8 <__aeabi_dmul>
 800b976:	4680      	mov	r8, r0
 800b978:	4689      	mov	r9, r1
 800b97a:	e7c5      	b.n	800b908 <_dtoa_r+0x530>
 800b97c:	ec51 0b17 	vmov	r0, r1, d7
 800b980:	f7f4 fe3a 	bl	80005f8 <__aeabi_dmul>
 800b984:	9b02      	ldr	r3, [sp, #8]
 800b986:	9d00      	ldr	r5, [sp, #0]
 800b988:	930f      	str	r3, [sp, #60]	; 0x3c
 800b98a:	ec41 0b19 	vmov	d9, r0, r1
 800b98e:	4649      	mov	r1, r9
 800b990:	4640      	mov	r0, r8
 800b992:	f7f5 f8e1 	bl	8000b58 <__aeabi_d2iz>
 800b996:	4606      	mov	r6, r0
 800b998:	f7f4 fdc4 	bl	8000524 <__aeabi_i2d>
 800b99c:	3630      	adds	r6, #48	; 0x30
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f4 fc6f 	bl	8000288 <__aeabi_dsub>
 800b9aa:	f805 6b01 	strb.w	r6, [r5], #1
 800b9ae:	9b02      	ldr	r3, [sp, #8]
 800b9b0:	429d      	cmp	r5, r3
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	4689      	mov	r9, r1
 800b9b6:	f04f 0200 	mov.w	r2, #0
 800b9ba:	d124      	bne.n	800ba06 <_dtoa_r+0x62e>
 800b9bc:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <_dtoa_r+0x654>)
 800b9be:	ec51 0b19 	vmov	r0, r1, d9
 800b9c2:	f7f4 fc63 	bl	800028c <__adddf3>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f5 f8a3 	bl	8000b18 <__aeabi_dcmpgt>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d173      	bne.n	800babe <_dtoa_r+0x6e6>
 800b9d6:	ec53 2b19 	vmov	r2, r3, d9
 800b9da:	4914      	ldr	r1, [pc, #80]	; (800ba2c <_dtoa_r+0x654>)
 800b9dc:	2000      	movs	r0, #0
 800b9de:	f7f4 fc53 	bl	8000288 <__aeabi_dsub>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4640      	mov	r0, r8
 800b9e8:	4649      	mov	r1, r9
 800b9ea:	f7f5 f877 	bl	8000adc <__aeabi_dcmplt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f43f af2f 	beq.w	800b852 <_dtoa_r+0x47a>
 800b9f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b9f6:	1e6b      	subs	r3, r5, #1
 800b9f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9fe:	2b30      	cmp	r3, #48	; 0x30
 800ba00:	d0f8      	beq.n	800b9f4 <_dtoa_r+0x61c>
 800ba02:	46bb      	mov	fp, r7
 800ba04:	e04a      	b.n	800ba9c <_dtoa_r+0x6c4>
 800ba06:	4b06      	ldr	r3, [pc, #24]	; (800ba20 <_dtoa_r+0x648>)
 800ba08:	f7f4 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	4689      	mov	r9, r1
 800ba10:	e7bd      	b.n	800b98e <_dtoa_r+0x5b6>
 800ba12:	bf00      	nop
 800ba14:	0800d6c0 	.word	0x0800d6c0
 800ba18:	0800d698 	.word	0x0800d698
 800ba1c:	3ff00000 	.word	0x3ff00000
 800ba20:	40240000 	.word	0x40240000
 800ba24:	401c0000 	.word	0x401c0000
 800ba28:	40140000 	.word	0x40140000
 800ba2c:	3fe00000 	.word	0x3fe00000
 800ba30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba34:	9d00      	ldr	r5, [sp, #0]
 800ba36:	4642      	mov	r2, r8
 800ba38:	464b      	mov	r3, r9
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f7f4 ff05 	bl	800084c <__aeabi_ddiv>
 800ba42:	f7f5 f889 	bl	8000b58 <__aeabi_d2iz>
 800ba46:	9001      	str	r0, [sp, #4]
 800ba48:	f7f4 fd6c 	bl	8000524 <__aeabi_i2d>
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	464b      	mov	r3, r9
 800ba50:	f7f4 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	4630      	mov	r0, r6
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	f7f4 fc14 	bl	8000288 <__aeabi_dsub>
 800ba60:	9e01      	ldr	r6, [sp, #4]
 800ba62:	9f04      	ldr	r7, [sp, #16]
 800ba64:	3630      	adds	r6, #48	; 0x30
 800ba66:	f805 6b01 	strb.w	r6, [r5], #1
 800ba6a:	9e00      	ldr	r6, [sp, #0]
 800ba6c:	1bae      	subs	r6, r5, r6
 800ba6e:	42b7      	cmp	r7, r6
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	d134      	bne.n	800bae0 <_dtoa_r+0x708>
 800ba76:	f7f4 fc09 	bl	800028c <__adddf3>
 800ba7a:	4642      	mov	r2, r8
 800ba7c:	464b      	mov	r3, r9
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	f7f5 f849 	bl	8000b18 <__aeabi_dcmpgt>
 800ba86:	b9c8      	cbnz	r0, 800babc <_dtoa_r+0x6e4>
 800ba88:	4642      	mov	r2, r8
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f5 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba94:	b110      	cbz	r0, 800ba9c <_dtoa_r+0x6c4>
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	07db      	lsls	r3, r3, #31
 800ba9a:	d40f      	bmi.n	800babc <_dtoa_r+0x6e4>
 800ba9c:	4651      	mov	r1, sl
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 fdd2 	bl	800c648 <_Bfree>
 800baa4:	2300      	movs	r3, #0
 800baa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800baa8:	702b      	strb	r3, [r5, #0]
 800baaa:	f10b 0301 	add.w	r3, fp, #1
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f43f ace2 	beq.w	800b47c <_dtoa_r+0xa4>
 800bab8:	601d      	str	r5, [r3, #0]
 800baba:	e4df      	b.n	800b47c <_dtoa_r+0xa4>
 800babc:	465f      	mov	r7, fp
 800babe:	462b      	mov	r3, r5
 800bac0:	461d      	mov	r5, r3
 800bac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bac6:	2a39      	cmp	r2, #57	; 0x39
 800bac8:	d106      	bne.n	800bad8 <_dtoa_r+0x700>
 800baca:	9a00      	ldr	r2, [sp, #0]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d1f7      	bne.n	800bac0 <_dtoa_r+0x6e8>
 800bad0:	9900      	ldr	r1, [sp, #0]
 800bad2:	2230      	movs	r2, #48	; 0x30
 800bad4:	3701      	adds	r7, #1
 800bad6:	700a      	strb	r2, [r1, #0]
 800bad8:	781a      	ldrb	r2, [r3, #0]
 800bada:	3201      	adds	r2, #1
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	e790      	b.n	800ba02 <_dtoa_r+0x62a>
 800bae0:	4ba3      	ldr	r3, [pc, #652]	; (800bd70 <_dtoa_r+0x998>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	f7f4 fd88 	bl	80005f8 <__aeabi_dmul>
 800bae8:	2200      	movs	r2, #0
 800baea:	2300      	movs	r3, #0
 800baec:	4606      	mov	r6, r0
 800baee:	460f      	mov	r7, r1
 800baf0:	f7f4 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d09e      	beq.n	800ba36 <_dtoa_r+0x65e>
 800baf8:	e7d0      	b.n	800ba9c <_dtoa_r+0x6c4>
 800bafa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	f000 80ca 	beq.w	800bc96 <_dtoa_r+0x8be>
 800bb02:	9a07      	ldr	r2, [sp, #28]
 800bb04:	2a01      	cmp	r2, #1
 800bb06:	f300 80ad 	bgt.w	800bc64 <_dtoa_r+0x88c>
 800bb0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	f000 80a5 	beq.w	800bc5c <_dtoa_r+0x884>
 800bb12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb16:	9e08      	ldr	r6, [sp, #32]
 800bb18:	9d05      	ldr	r5, [sp, #20]
 800bb1a:	9a05      	ldr	r2, [sp, #20]
 800bb1c:	441a      	add	r2, r3
 800bb1e:	9205      	str	r2, [sp, #20]
 800bb20:	9a06      	ldr	r2, [sp, #24]
 800bb22:	2101      	movs	r1, #1
 800bb24:	441a      	add	r2, r3
 800bb26:	4620      	mov	r0, r4
 800bb28:	9206      	str	r2, [sp, #24]
 800bb2a:	f000 fe43 	bl	800c7b4 <__i2b>
 800bb2e:	4607      	mov	r7, r0
 800bb30:	b165      	cbz	r5, 800bb4c <_dtoa_r+0x774>
 800bb32:	9b06      	ldr	r3, [sp, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dd09      	ble.n	800bb4c <_dtoa_r+0x774>
 800bb38:	42ab      	cmp	r3, r5
 800bb3a:	9a05      	ldr	r2, [sp, #20]
 800bb3c:	bfa8      	it	ge
 800bb3e:	462b      	movge	r3, r5
 800bb40:	1ad2      	subs	r2, r2, r3
 800bb42:	9205      	str	r2, [sp, #20]
 800bb44:	9a06      	ldr	r2, [sp, #24]
 800bb46:	1aed      	subs	r5, r5, r3
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	9306      	str	r3, [sp, #24]
 800bb4c:	9b08      	ldr	r3, [sp, #32]
 800bb4e:	b1f3      	cbz	r3, 800bb8e <_dtoa_r+0x7b6>
 800bb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 80a3 	beq.w	800bc9e <_dtoa_r+0x8c6>
 800bb58:	2e00      	cmp	r6, #0
 800bb5a:	dd10      	ble.n	800bb7e <_dtoa_r+0x7a6>
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	4632      	mov	r2, r6
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 fee7 	bl	800c934 <__pow5mult>
 800bb66:	4652      	mov	r2, sl
 800bb68:	4601      	mov	r1, r0
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f000 fe37 	bl	800c7e0 <__multiply>
 800bb72:	4651      	mov	r1, sl
 800bb74:	4680      	mov	r8, r0
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 fd66 	bl	800c648 <_Bfree>
 800bb7c:	46c2      	mov	sl, r8
 800bb7e:	9b08      	ldr	r3, [sp, #32]
 800bb80:	1b9a      	subs	r2, r3, r6
 800bb82:	d004      	beq.n	800bb8e <_dtoa_r+0x7b6>
 800bb84:	4651      	mov	r1, sl
 800bb86:	4620      	mov	r0, r4
 800bb88:	f000 fed4 	bl	800c934 <__pow5mult>
 800bb8c:	4682      	mov	sl, r0
 800bb8e:	2101      	movs	r1, #1
 800bb90:	4620      	mov	r0, r4
 800bb92:	f000 fe0f 	bl	800c7b4 <__i2b>
 800bb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	f340 8081 	ble.w	800bca2 <_dtoa_r+0x8ca>
 800bba0:	461a      	mov	r2, r3
 800bba2:	4601      	mov	r1, r0
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 fec5 	bl	800c934 <__pow5mult>
 800bbaa:	9b07      	ldr	r3, [sp, #28]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	4606      	mov	r6, r0
 800bbb0:	dd7a      	ble.n	800bca8 <_dtoa_r+0x8d0>
 800bbb2:	f04f 0800 	mov.w	r8, #0
 800bbb6:	6933      	ldr	r3, [r6, #16]
 800bbb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbbc:	6918      	ldr	r0, [r3, #16]
 800bbbe:	f000 fdab 	bl	800c718 <__hi0bits>
 800bbc2:	f1c0 0020 	rsb	r0, r0, #32
 800bbc6:	9b06      	ldr	r3, [sp, #24]
 800bbc8:	4418      	add	r0, r3
 800bbca:	f010 001f 	ands.w	r0, r0, #31
 800bbce:	f000 8094 	beq.w	800bcfa <_dtoa_r+0x922>
 800bbd2:	f1c0 0320 	rsb	r3, r0, #32
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	f340 8085 	ble.w	800bce6 <_dtoa_r+0x90e>
 800bbdc:	9b05      	ldr	r3, [sp, #20]
 800bbde:	f1c0 001c 	rsb	r0, r0, #28
 800bbe2:	4403      	add	r3, r0
 800bbe4:	9305      	str	r3, [sp, #20]
 800bbe6:	9b06      	ldr	r3, [sp, #24]
 800bbe8:	4403      	add	r3, r0
 800bbea:	4405      	add	r5, r0
 800bbec:	9306      	str	r3, [sp, #24]
 800bbee:	9b05      	ldr	r3, [sp, #20]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dd05      	ble.n	800bc00 <_dtoa_r+0x828>
 800bbf4:	4651      	mov	r1, sl
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f000 fef5 	bl	800c9e8 <__lshift>
 800bbfe:	4682      	mov	sl, r0
 800bc00:	9b06      	ldr	r3, [sp, #24]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	dd05      	ble.n	800bc12 <_dtoa_r+0x83a>
 800bc06:	4631      	mov	r1, r6
 800bc08:	461a      	mov	r2, r3
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f000 feec 	bl	800c9e8 <__lshift>
 800bc10:	4606      	mov	r6, r0
 800bc12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d072      	beq.n	800bcfe <_dtoa_r+0x926>
 800bc18:	4631      	mov	r1, r6
 800bc1a:	4650      	mov	r0, sl
 800bc1c:	f000 ff50 	bl	800cac0 <__mcmp>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	da6c      	bge.n	800bcfe <_dtoa_r+0x926>
 800bc24:	2300      	movs	r3, #0
 800bc26:	4651      	mov	r1, sl
 800bc28:	220a      	movs	r2, #10
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fd2e 	bl	800c68c <__multadd>
 800bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bc36:	4682      	mov	sl, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 81b0 	beq.w	800bf9e <_dtoa_r+0xbc6>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	4639      	mov	r1, r7
 800bc42:	220a      	movs	r2, #10
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 fd21 	bl	800c68c <__multadd>
 800bc4a:	9b01      	ldr	r3, [sp, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	4607      	mov	r7, r0
 800bc50:	f300 8096 	bgt.w	800bd80 <_dtoa_r+0x9a8>
 800bc54:	9b07      	ldr	r3, [sp, #28]
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	dc59      	bgt.n	800bd0e <_dtoa_r+0x936>
 800bc5a:	e091      	b.n	800bd80 <_dtoa_r+0x9a8>
 800bc5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc62:	e758      	b.n	800bb16 <_dtoa_r+0x73e>
 800bc64:	9b04      	ldr	r3, [sp, #16]
 800bc66:	1e5e      	subs	r6, r3, #1
 800bc68:	9b08      	ldr	r3, [sp, #32]
 800bc6a:	42b3      	cmp	r3, r6
 800bc6c:	bfbf      	itttt	lt
 800bc6e:	9b08      	ldrlt	r3, [sp, #32]
 800bc70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bc72:	9608      	strlt	r6, [sp, #32]
 800bc74:	1af3      	sublt	r3, r6, r3
 800bc76:	bfb4      	ite	lt
 800bc78:	18d2      	addlt	r2, r2, r3
 800bc7a:	1b9e      	subge	r6, r3, r6
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	bfbc      	itt	lt
 800bc80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bc82:	2600      	movlt	r6, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bfb7      	itett	lt
 800bc88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bc8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bc90:	1a9d      	sublt	r5, r3, r2
 800bc92:	2300      	movlt	r3, #0
 800bc94:	e741      	b.n	800bb1a <_dtoa_r+0x742>
 800bc96:	9e08      	ldr	r6, [sp, #32]
 800bc98:	9d05      	ldr	r5, [sp, #20]
 800bc9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc9c:	e748      	b.n	800bb30 <_dtoa_r+0x758>
 800bc9e:	9a08      	ldr	r2, [sp, #32]
 800bca0:	e770      	b.n	800bb84 <_dtoa_r+0x7ac>
 800bca2:	9b07      	ldr	r3, [sp, #28]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	dc19      	bgt.n	800bcdc <_dtoa_r+0x904>
 800bca8:	9b02      	ldr	r3, [sp, #8]
 800bcaa:	b9bb      	cbnz	r3, 800bcdc <_dtoa_r+0x904>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcb2:	b99b      	cbnz	r3, 800bcdc <_dtoa_r+0x904>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcba:	0d1b      	lsrs	r3, r3, #20
 800bcbc:	051b      	lsls	r3, r3, #20
 800bcbe:	b183      	cbz	r3, 800bce2 <_dtoa_r+0x90a>
 800bcc0:	9b05      	ldr	r3, [sp, #20]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	9b06      	ldr	r3, [sp, #24]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	9306      	str	r3, [sp, #24]
 800bccc:	f04f 0801 	mov.w	r8, #1
 800bcd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f47f af6f 	bne.w	800bbb6 <_dtoa_r+0x7de>
 800bcd8:	2001      	movs	r0, #1
 800bcda:	e774      	b.n	800bbc6 <_dtoa_r+0x7ee>
 800bcdc:	f04f 0800 	mov.w	r8, #0
 800bce0:	e7f6      	b.n	800bcd0 <_dtoa_r+0x8f8>
 800bce2:	4698      	mov	r8, r3
 800bce4:	e7f4      	b.n	800bcd0 <_dtoa_r+0x8f8>
 800bce6:	d082      	beq.n	800bbee <_dtoa_r+0x816>
 800bce8:	9a05      	ldr	r2, [sp, #20]
 800bcea:	331c      	adds	r3, #28
 800bcec:	441a      	add	r2, r3
 800bcee:	9205      	str	r2, [sp, #20]
 800bcf0:	9a06      	ldr	r2, [sp, #24]
 800bcf2:	441a      	add	r2, r3
 800bcf4:	441d      	add	r5, r3
 800bcf6:	9206      	str	r2, [sp, #24]
 800bcf8:	e779      	b.n	800bbee <_dtoa_r+0x816>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	e7f4      	b.n	800bce8 <_dtoa_r+0x910>
 800bcfe:	9b04      	ldr	r3, [sp, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	dc37      	bgt.n	800bd74 <_dtoa_r+0x99c>
 800bd04:	9b07      	ldr	r3, [sp, #28]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	dd34      	ble.n	800bd74 <_dtoa_r+0x99c>
 800bd0a:	9b04      	ldr	r3, [sp, #16]
 800bd0c:	9301      	str	r3, [sp, #4]
 800bd0e:	9b01      	ldr	r3, [sp, #4]
 800bd10:	b963      	cbnz	r3, 800bd2c <_dtoa_r+0x954>
 800bd12:	4631      	mov	r1, r6
 800bd14:	2205      	movs	r2, #5
 800bd16:	4620      	mov	r0, r4
 800bd18:	f000 fcb8 	bl	800c68c <__multadd>
 800bd1c:	4601      	mov	r1, r0
 800bd1e:	4606      	mov	r6, r0
 800bd20:	4650      	mov	r0, sl
 800bd22:	f000 fecd 	bl	800cac0 <__mcmp>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	f73f adbb 	bgt.w	800b8a2 <_dtoa_r+0x4ca>
 800bd2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd2e:	9d00      	ldr	r5, [sp, #0]
 800bd30:	ea6f 0b03 	mvn.w	fp, r3
 800bd34:	f04f 0800 	mov.w	r8, #0
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 fc84 	bl	800c648 <_Bfree>
 800bd40:	2f00      	cmp	r7, #0
 800bd42:	f43f aeab 	beq.w	800ba9c <_dtoa_r+0x6c4>
 800bd46:	f1b8 0f00 	cmp.w	r8, #0
 800bd4a:	d005      	beq.n	800bd58 <_dtoa_r+0x980>
 800bd4c:	45b8      	cmp	r8, r7
 800bd4e:	d003      	beq.n	800bd58 <_dtoa_r+0x980>
 800bd50:	4641      	mov	r1, r8
 800bd52:	4620      	mov	r0, r4
 800bd54:	f000 fc78 	bl	800c648 <_Bfree>
 800bd58:	4639      	mov	r1, r7
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 fc74 	bl	800c648 <_Bfree>
 800bd60:	e69c      	b.n	800ba9c <_dtoa_r+0x6c4>
 800bd62:	2600      	movs	r6, #0
 800bd64:	4637      	mov	r7, r6
 800bd66:	e7e1      	b.n	800bd2c <_dtoa_r+0x954>
 800bd68:	46bb      	mov	fp, r7
 800bd6a:	4637      	mov	r7, r6
 800bd6c:	e599      	b.n	800b8a2 <_dtoa_r+0x4ca>
 800bd6e:	bf00      	nop
 800bd70:	40240000 	.word	0x40240000
 800bd74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 80c8 	beq.w	800bf0c <_dtoa_r+0xb34>
 800bd7c:	9b04      	ldr	r3, [sp, #16]
 800bd7e:	9301      	str	r3, [sp, #4]
 800bd80:	2d00      	cmp	r5, #0
 800bd82:	dd05      	ble.n	800bd90 <_dtoa_r+0x9b8>
 800bd84:	4639      	mov	r1, r7
 800bd86:	462a      	mov	r2, r5
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fe2d 	bl	800c9e8 <__lshift>
 800bd8e:	4607      	mov	r7, r0
 800bd90:	f1b8 0f00 	cmp.w	r8, #0
 800bd94:	d05b      	beq.n	800be4e <_dtoa_r+0xa76>
 800bd96:	6879      	ldr	r1, [r7, #4]
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 fc15 	bl	800c5c8 <_Balloc>
 800bd9e:	4605      	mov	r5, r0
 800bda0:	b928      	cbnz	r0, 800bdae <_dtoa_r+0x9d6>
 800bda2:	4b83      	ldr	r3, [pc, #524]	; (800bfb0 <_dtoa_r+0xbd8>)
 800bda4:	4602      	mov	r2, r0
 800bda6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bdaa:	f7ff bb2e 	b.w	800b40a <_dtoa_r+0x32>
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	3202      	adds	r2, #2
 800bdb2:	0092      	lsls	r2, r2, #2
 800bdb4:	f107 010c 	add.w	r1, r7, #12
 800bdb8:	300c      	adds	r0, #12
 800bdba:	f7ff fa76 	bl	800b2aa <memcpy>
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 fe10 	bl	800c9e8 <__lshift>
 800bdc8:	9b00      	ldr	r3, [sp, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	9304      	str	r3, [sp, #16]
 800bdce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	9308      	str	r3, [sp, #32]
 800bdd6:	9b02      	ldr	r3, [sp, #8]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	46b8      	mov	r8, r7
 800bdde:	9306      	str	r3, [sp, #24]
 800bde0:	4607      	mov	r7, r0
 800bde2:	9b04      	ldr	r3, [sp, #16]
 800bde4:	4631      	mov	r1, r6
 800bde6:	3b01      	subs	r3, #1
 800bde8:	4650      	mov	r0, sl
 800bdea:	9301      	str	r3, [sp, #4]
 800bdec:	f7ff fa6b 	bl	800b2c6 <quorem>
 800bdf0:	4641      	mov	r1, r8
 800bdf2:	9002      	str	r0, [sp, #8]
 800bdf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bdf8:	4650      	mov	r0, sl
 800bdfa:	f000 fe61 	bl	800cac0 <__mcmp>
 800bdfe:	463a      	mov	r2, r7
 800be00:	9005      	str	r0, [sp, #20]
 800be02:	4631      	mov	r1, r6
 800be04:	4620      	mov	r0, r4
 800be06:	f000 fe77 	bl	800caf8 <__mdiff>
 800be0a:	68c2      	ldr	r2, [r0, #12]
 800be0c:	4605      	mov	r5, r0
 800be0e:	bb02      	cbnz	r2, 800be52 <_dtoa_r+0xa7a>
 800be10:	4601      	mov	r1, r0
 800be12:	4650      	mov	r0, sl
 800be14:	f000 fe54 	bl	800cac0 <__mcmp>
 800be18:	4602      	mov	r2, r0
 800be1a:	4629      	mov	r1, r5
 800be1c:	4620      	mov	r0, r4
 800be1e:	9209      	str	r2, [sp, #36]	; 0x24
 800be20:	f000 fc12 	bl	800c648 <_Bfree>
 800be24:	9b07      	ldr	r3, [sp, #28]
 800be26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be28:	9d04      	ldr	r5, [sp, #16]
 800be2a:	ea43 0102 	orr.w	r1, r3, r2
 800be2e:	9b06      	ldr	r3, [sp, #24]
 800be30:	4319      	orrs	r1, r3
 800be32:	d110      	bne.n	800be56 <_dtoa_r+0xa7e>
 800be34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be38:	d029      	beq.n	800be8e <_dtoa_r+0xab6>
 800be3a:	9b05      	ldr	r3, [sp, #20]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dd02      	ble.n	800be46 <_dtoa_r+0xa6e>
 800be40:	9b02      	ldr	r3, [sp, #8]
 800be42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	f883 9000 	strb.w	r9, [r3]
 800be4c:	e774      	b.n	800bd38 <_dtoa_r+0x960>
 800be4e:	4638      	mov	r0, r7
 800be50:	e7ba      	b.n	800bdc8 <_dtoa_r+0x9f0>
 800be52:	2201      	movs	r2, #1
 800be54:	e7e1      	b.n	800be1a <_dtoa_r+0xa42>
 800be56:	9b05      	ldr	r3, [sp, #20]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	db04      	blt.n	800be66 <_dtoa_r+0xa8e>
 800be5c:	9907      	ldr	r1, [sp, #28]
 800be5e:	430b      	orrs	r3, r1
 800be60:	9906      	ldr	r1, [sp, #24]
 800be62:	430b      	orrs	r3, r1
 800be64:	d120      	bne.n	800bea8 <_dtoa_r+0xad0>
 800be66:	2a00      	cmp	r2, #0
 800be68:	dded      	ble.n	800be46 <_dtoa_r+0xa6e>
 800be6a:	4651      	mov	r1, sl
 800be6c:	2201      	movs	r2, #1
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 fdba 	bl	800c9e8 <__lshift>
 800be74:	4631      	mov	r1, r6
 800be76:	4682      	mov	sl, r0
 800be78:	f000 fe22 	bl	800cac0 <__mcmp>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	dc03      	bgt.n	800be88 <_dtoa_r+0xab0>
 800be80:	d1e1      	bne.n	800be46 <_dtoa_r+0xa6e>
 800be82:	f019 0f01 	tst.w	r9, #1
 800be86:	d0de      	beq.n	800be46 <_dtoa_r+0xa6e>
 800be88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be8c:	d1d8      	bne.n	800be40 <_dtoa_r+0xa68>
 800be8e:	9a01      	ldr	r2, [sp, #4]
 800be90:	2339      	movs	r3, #57	; 0x39
 800be92:	7013      	strb	r3, [r2, #0]
 800be94:	462b      	mov	r3, r5
 800be96:	461d      	mov	r5, r3
 800be98:	3b01      	subs	r3, #1
 800be9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be9e:	2a39      	cmp	r2, #57	; 0x39
 800bea0:	d06c      	beq.n	800bf7c <_dtoa_r+0xba4>
 800bea2:	3201      	adds	r2, #1
 800bea4:	701a      	strb	r2, [r3, #0]
 800bea6:	e747      	b.n	800bd38 <_dtoa_r+0x960>
 800bea8:	2a00      	cmp	r2, #0
 800beaa:	dd07      	ble.n	800bebc <_dtoa_r+0xae4>
 800beac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800beb0:	d0ed      	beq.n	800be8e <_dtoa_r+0xab6>
 800beb2:	9a01      	ldr	r2, [sp, #4]
 800beb4:	f109 0301 	add.w	r3, r9, #1
 800beb8:	7013      	strb	r3, [r2, #0]
 800beba:	e73d      	b.n	800bd38 <_dtoa_r+0x960>
 800bebc:	9b04      	ldr	r3, [sp, #16]
 800bebe:	9a08      	ldr	r2, [sp, #32]
 800bec0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d043      	beq.n	800bf50 <_dtoa_r+0xb78>
 800bec8:	4651      	mov	r1, sl
 800beca:	2300      	movs	r3, #0
 800becc:	220a      	movs	r2, #10
 800bece:	4620      	mov	r0, r4
 800bed0:	f000 fbdc 	bl	800c68c <__multadd>
 800bed4:	45b8      	cmp	r8, r7
 800bed6:	4682      	mov	sl, r0
 800bed8:	f04f 0300 	mov.w	r3, #0
 800bedc:	f04f 020a 	mov.w	r2, #10
 800bee0:	4641      	mov	r1, r8
 800bee2:	4620      	mov	r0, r4
 800bee4:	d107      	bne.n	800bef6 <_dtoa_r+0xb1e>
 800bee6:	f000 fbd1 	bl	800c68c <__multadd>
 800beea:	4680      	mov	r8, r0
 800beec:	4607      	mov	r7, r0
 800beee:	9b04      	ldr	r3, [sp, #16]
 800bef0:	3301      	adds	r3, #1
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	e775      	b.n	800bde2 <_dtoa_r+0xa0a>
 800bef6:	f000 fbc9 	bl	800c68c <__multadd>
 800befa:	4639      	mov	r1, r7
 800befc:	4680      	mov	r8, r0
 800befe:	2300      	movs	r3, #0
 800bf00:	220a      	movs	r2, #10
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 fbc2 	bl	800c68c <__multadd>
 800bf08:	4607      	mov	r7, r0
 800bf0a:	e7f0      	b.n	800beee <_dtoa_r+0xb16>
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	9d00      	ldr	r5, [sp, #0]
 800bf12:	4631      	mov	r1, r6
 800bf14:	4650      	mov	r0, sl
 800bf16:	f7ff f9d6 	bl	800b2c6 <quorem>
 800bf1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf1e:	9b00      	ldr	r3, [sp, #0]
 800bf20:	f805 9b01 	strb.w	r9, [r5], #1
 800bf24:	1aea      	subs	r2, r5, r3
 800bf26:	9b01      	ldr	r3, [sp, #4]
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	dd07      	ble.n	800bf3c <_dtoa_r+0xb64>
 800bf2c:	4651      	mov	r1, sl
 800bf2e:	2300      	movs	r3, #0
 800bf30:	220a      	movs	r2, #10
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fbaa 	bl	800c68c <__multadd>
 800bf38:	4682      	mov	sl, r0
 800bf3a:	e7ea      	b.n	800bf12 <_dtoa_r+0xb3a>
 800bf3c:	9b01      	ldr	r3, [sp, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bfc8      	it	gt
 800bf42:	461d      	movgt	r5, r3
 800bf44:	9b00      	ldr	r3, [sp, #0]
 800bf46:	bfd8      	it	le
 800bf48:	2501      	movle	r5, #1
 800bf4a:	441d      	add	r5, r3
 800bf4c:	f04f 0800 	mov.w	r8, #0
 800bf50:	4651      	mov	r1, sl
 800bf52:	2201      	movs	r2, #1
 800bf54:	4620      	mov	r0, r4
 800bf56:	f000 fd47 	bl	800c9e8 <__lshift>
 800bf5a:	4631      	mov	r1, r6
 800bf5c:	4682      	mov	sl, r0
 800bf5e:	f000 fdaf 	bl	800cac0 <__mcmp>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	dc96      	bgt.n	800be94 <_dtoa_r+0xabc>
 800bf66:	d102      	bne.n	800bf6e <_dtoa_r+0xb96>
 800bf68:	f019 0f01 	tst.w	r9, #1
 800bf6c:	d192      	bne.n	800be94 <_dtoa_r+0xabc>
 800bf6e:	462b      	mov	r3, r5
 800bf70:	461d      	mov	r5, r3
 800bf72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf76:	2a30      	cmp	r2, #48	; 0x30
 800bf78:	d0fa      	beq.n	800bf70 <_dtoa_r+0xb98>
 800bf7a:	e6dd      	b.n	800bd38 <_dtoa_r+0x960>
 800bf7c:	9a00      	ldr	r2, [sp, #0]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d189      	bne.n	800be96 <_dtoa_r+0xabe>
 800bf82:	f10b 0b01 	add.w	fp, fp, #1
 800bf86:	2331      	movs	r3, #49	; 0x31
 800bf88:	e796      	b.n	800beb8 <_dtoa_r+0xae0>
 800bf8a:	4b0a      	ldr	r3, [pc, #40]	; (800bfb4 <_dtoa_r+0xbdc>)
 800bf8c:	f7ff ba99 	b.w	800b4c2 <_dtoa_r+0xea>
 800bf90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f47f aa6d 	bne.w	800b472 <_dtoa_r+0x9a>
 800bf98:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <_dtoa_r+0xbe0>)
 800bf9a:	f7ff ba92 	b.w	800b4c2 <_dtoa_r+0xea>
 800bf9e:	9b01      	ldr	r3, [sp, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dcb5      	bgt.n	800bf10 <_dtoa_r+0xb38>
 800bfa4:	9b07      	ldr	r3, [sp, #28]
 800bfa6:	2b02      	cmp	r3, #2
 800bfa8:	f73f aeb1 	bgt.w	800bd0e <_dtoa_r+0x936>
 800bfac:	e7b0      	b.n	800bf10 <_dtoa_r+0xb38>
 800bfae:	bf00      	nop
 800bfb0:	0800d618 	.word	0x0800d618
 800bfb4:	0800d578 	.word	0x0800d578
 800bfb8:	0800d59c 	.word	0x0800d59c

0800bfbc <_free_r>:
 800bfbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfbe:	2900      	cmp	r1, #0
 800bfc0:	d044      	beq.n	800c04c <_free_r+0x90>
 800bfc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfc6:	9001      	str	r0, [sp, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f1a1 0404 	sub.w	r4, r1, #4
 800bfce:	bfb8      	it	lt
 800bfd0:	18e4      	addlt	r4, r4, r3
 800bfd2:	f000 faed 	bl	800c5b0 <__malloc_lock>
 800bfd6:	4a1e      	ldr	r2, [pc, #120]	; (800c050 <_free_r+0x94>)
 800bfd8:	9801      	ldr	r0, [sp, #4]
 800bfda:	6813      	ldr	r3, [r2, #0]
 800bfdc:	b933      	cbnz	r3, 800bfec <_free_r+0x30>
 800bfde:	6063      	str	r3, [r4, #4]
 800bfe0:	6014      	str	r4, [r2, #0]
 800bfe2:	b003      	add	sp, #12
 800bfe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfe8:	f000 bae8 	b.w	800c5bc <__malloc_unlock>
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	d908      	bls.n	800c002 <_free_r+0x46>
 800bff0:	6825      	ldr	r5, [r4, #0]
 800bff2:	1961      	adds	r1, r4, r5
 800bff4:	428b      	cmp	r3, r1
 800bff6:	bf01      	itttt	eq
 800bff8:	6819      	ldreq	r1, [r3, #0]
 800bffa:	685b      	ldreq	r3, [r3, #4]
 800bffc:	1949      	addeq	r1, r1, r5
 800bffe:	6021      	streq	r1, [r4, #0]
 800c000:	e7ed      	b.n	800bfde <_free_r+0x22>
 800c002:	461a      	mov	r2, r3
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	b10b      	cbz	r3, 800c00c <_free_r+0x50>
 800c008:	42a3      	cmp	r3, r4
 800c00a:	d9fa      	bls.n	800c002 <_free_r+0x46>
 800c00c:	6811      	ldr	r1, [r2, #0]
 800c00e:	1855      	adds	r5, r2, r1
 800c010:	42a5      	cmp	r5, r4
 800c012:	d10b      	bne.n	800c02c <_free_r+0x70>
 800c014:	6824      	ldr	r4, [r4, #0]
 800c016:	4421      	add	r1, r4
 800c018:	1854      	adds	r4, r2, r1
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	6011      	str	r1, [r2, #0]
 800c01e:	d1e0      	bne.n	800bfe2 <_free_r+0x26>
 800c020:	681c      	ldr	r4, [r3, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	6053      	str	r3, [r2, #4]
 800c026:	440c      	add	r4, r1
 800c028:	6014      	str	r4, [r2, #0]
 800c02a:	e7da      	b.n	800bfe2 <_free_r+0x26>
 800c02c:	d902      	bls.n	800c034 <_free_r+0x78>
 800c02e:	230c      	movs	r3, #12
 800c030:	6003      	str	r3, [r0, #0]
 800c032:	e7d6      	b.n	800bfe2 <_free_r+0x26>
 800c034:	6825      	ldr	r5, [r4, #0]
 800c036:	1961      	adds	r1, r4, r5
 800c038:	428b      	cmp	r3, r1
 800c03a:	bf04      	itt	eq
 800c03c:	6819      	ldreq	r1, [r3, #0]
 800c03e:	685b      	ldreq	r3, [r3, #4]
 800c040:	6063      	str	r3, [r4, #4]
 800c042:	bf04      	itt	eq
 800c044:	1949      	addeq	r1, r1, r5
 800c046:	6021      	streq	r1, [r4, #0]
 800c048:	6054      	str	r4, [r2, #4]
 800c04a:	e7ca      	b.n	800bfe2 <_free_r+0x26>
 800c04c:	b003      	add	sp, #12
 800c04e:	bd30      	pop	{r4, r5, pc}
 800c050:	20005628 	.word	0x20005628

0800c054 <__ssputs_r>:
 800c054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c058:	688e      	ldr	r6, [r1, #8]
 800c05a:	461f      	mov	r7, r3
 800c05c:	42be      	cmp	r6, r7
 800c05e:	680b      	ldr	r3, [r1, #0]
 800c060:	4682      	mov	sl, r0
 800c062:	460c      	mov	r4, r1
 800c064:	4690      	mov	r8, r2
 800c066:	d82c      	bhi.n	800c0c2 <__ssputs_r+0x6e>
 800c068:	898a      	ldrh	r2, [r1, #12]
 800c06a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c06e:	d026      	beq.n	800c0be <__ssputs_r+0x6a>
 800c070:	6965      	ldr	r5, [r4, #20]
 800c072:	6909      	ldr	r1, [r1, #16]
 800c074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c078:	eba3 0901 	sub.w	r9, r3, r1
 800c07c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c080:	1c7b      	adds	r3, r7, #1
 800c082:	444b      	add	r3, r9
 800c084:	106d      	asrs	r5, r5, #1
 800c086:	429d      	cmp	r5, r3
 800c088:	bf38      	it	cc
 800c08a:	461d      	movcc	r5, r3
 800c08c:	0553      	lsls	r3, r2, #21
 800c08e:	d527      	bpl.n	800c0e0 <__ssputs_r+0x8c>
 800c090:	4629      	mov	r1, r5
 800c092:	f000 f95f 	bl	800c354 <_malloc_r>
 800c096:	4606      	mov	r6, r0
 800c098:	b360      	cbz	r0, 800c0f4 <__ssputs_r+0xa0>
 800c09a:	6921      	ldr	r1, [r4, #16]
 800c09c:	464a      	mov	r2, r9
 800c09e:	f7ff f904 	bl	800b2aa <memcpy>
 800c0a2:	89a3      	ldrh	r3, [r4, #12]
 800c0a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ac:	81a3      	strh	r3, [r4, #12]
 800c0ae:	6126      	str	r6, [r4, #16]
 800c0b0:	6165      	str	r5, [r4, #20]
 800c0b2:	444e      	add	r6, r9
 800c0b4:	eba5 0509 	sub.w	r5, r5, r9
 800c0b8:	6026      	str	r6, [r4, #0]
 800c0ba:	60a5      	str	r5, [r4, #8]
 800c0bc:	463e      	mov	r6, r7
 800c0be:	42be      	cmp	r6, r7
 800c0c0:	d900      	bls.n	800c0c4 <__ssputs_r+0x70>
 800c0c2:	463e      	mov	r6, r7
 800c0c4:	6820      	ldr	r0, [r4, #0]
 800c0c6:	4632      	mov	r2, r6
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	f000 fe6b 	bl	800cda4 <memmove>
 800c0ce:	68a3      	ldr	r3, [r4, #8]
 800c0d0:	1b9b      	subs	r3, r3, r6
 800c0d2:	60a3      	str	r3, [r4, #8]
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	4433      	add	r3, r6
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	2000      	movs	r0, #0
 800c0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e0:	462a      	mov	r2, r5
 800c0e2:	f000 fe30 	bl	800cd46 <_realloc_r>
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d1e0      	bne.n	800c0ae <__ssputs_r+0x5a>
 800c0ec:	6921      	ldr	r1, [r4, #16]
 800c0ee:	4650      	mov	r0, sl
 800c0f0:	f7ff ff64 	bl	800bfbc <_free_r>
 800c0f4:	230c      	movs	r3, #12
 800c0f6:	f8ca 3000 	str.w	r3, [sl]
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c106:	e7e9      	b.n	800c0dc <__ssputs_r+0x88>

0800c108 <_svfiprintf_r>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	4698      	mov	r8, r3
 800c10e:	898b      	ldrh	r3, [r1, #12]
 800c110:	061b      	lsls	r3, r3, #24
 800c112:	b09d      	sub	sp, #116	; 0x74
 800c114:	4607      	mov	r7, r0
 800c116:	460d      	mov	r5, r1
 800c118:	4614      	mov	r4, r2
 800c11a:	d50e      	bpl.n	800c13a <_svfiprintf_r+0x32>
 800c11c:	690b      	ldr	r3, [r1, #16]
 800c11e:	b963      	cbnz	r3, 800c13a <_svfiprintf_r+0x32>
 800c120:	2140      	movs	r1, #64	; 0x40
 800c122:	f000 f917 	bl	800c354 <_malloc_r>
 800c126:	6028      	str	r0, [r5, #0]
 800c128:	6128      	str	r0, [r5, #16]
 800c12a:	b920      	cbnz	r0, 800c136 <_svfiprintf_r+0x2e>
 800c12c:	230c      	movs	r3, #12
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c134:	e0d0      	b.n	800c2d8 <_svfiprintf_r+0x1d0>
 800c136:	2340      	movs	r3, #64	; 0x40
 800c138:	616b      	str	r3, [r5, #20]
 800c13a:	2300      	movs	r3, #0
 800c13c:	9309      	str	r3, [sp, #36]	; 0x24
 800c13e:	2320      	movs	r3, #32
 800c140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c144:	f8cd 800c 	str.w	r8, [sp, #12]
 800c148:	2330      	movs	r3, #48	; 0x30
 800c14a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2f0 <_svfiprintf_r+0x1e8>
 800c14e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c152:	f04f 0901 	mov.w	r9, #1
 800c156:	4623      	mov	r3, r4
 800c158:	469a      	mov	sl, r3
 800c15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c15e:	b10a      	cbz	r2, 800c164 <_svfiprintf_r+0x5c>
 800c160:	2a25      	cmp	r2, #37	; 0x25
 800c162:	d1f9      	bne.n	800c158 <_svfiprintf_r+0x50>
 800c164:	ebba 0b04 	subs.w	fp, sl, r4
 800c168:	d00b      	beq.n	800c182 <_svfiprintf_r+0x7a>
 800c16a:	465b      	mov	r3, fp
 800c16c:	4622      	mov	r2, r4
 800c16e:	4629      	mov	r1, r5
 800c170:	4638      	mov	r0, r7
 800c172:	f7ff ff6f 	bl	800c054 <__ssputs_r>
 800c176:	3001      	adds	r0, #1
 800c178:	f000 80a9 	beq.w	800c2ce <_svfiprintf_r+0x1c6>
 800c17c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c17e:	445a      	add	r2, fp
 800c180:	9209      	str	r2, [sp, #36]	; 0x24
 800c182:	f89a 3000 	ldrb.w	r3, [sl]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 80a1 	beq.w	800c2ce <_svfiprintf_r+0x1c6>
 800c18c:	2300      	movs	r3, #0
 800c18e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c196:	f10a 0a01 	add.w	sl, sl, #1
 800c19a:	9304      	str	r3, [sp, #16]
 800c19c:	9307      	str	r3, [sp, #28]
 800c19e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c1a4:	4654      	mov	r4, sl
 800c1a6:	2205      	movs	r2, #5
 800c1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ac:	4850      	ldr	r0, [pc, #320]	; (800c2f0 <_svfiprintf_r+0x1e8>)
 800c1ae:	f7f4 f80f 	bl	80001d0 <memchr>
 800c1b2:	9a04      	ldr	r2, [sp, #16]
 800c1b4:	b9d8      	cbnz	r0, 800c1ee <_svfiprintf_r+0xe6>
 800c1b6:	06d0      	lsls	r0, r2, #27
 800c1b8:	bf44      	itt	mi
 800c1ba:	2320      	movmi	r3, #32
 800c1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1c0:	0711      	lsls	r1, r2, #28
 800c1c2:	bf44      	itt	mi
 800c1c4:	232b      	movmi	r3, #43	; 0x2b
 800c1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c1d0:	d015      	beq.n	800c1fe <_svfiprintf_r+0xf6>
 800c1d2:	9a07      	ldr	r2, [sp, #28]
 800c1d4:	4654      	mov	r4, sl
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	f04f 0c0a 	mov.w	ip, #10
 800c1dc:	4621      	mov	r1, r4
 800c1de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1e2:	3b30      	subs	r3, #48	; 0x30
 800c1e4:	2b09      	cmp	r3, #9
 800c1e6:	d94d      	bls.n	800c284 <_svfiprintf_r+0x17c>
 800c1e8:	b1b0      	cbz	r0, 800c218 <_svfiprintf_r+0x110>
 800c1ea:	9207      	str	r2, [sp, #28]
 800c1ec:	e014      	b.n	800c218 <_svfiprintf_r+0x110>
 800c1ee:	eba0 0308 	sub.w	r3, r0, r8
 800c1f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	9304      	str	r3, [sp, #16]
 800c1fa:	46a2      	mov	sl, r4
 800c1fc:	e7d2      	b.n	800c1a4 <_svfiprintf_r+0x9c>
 800c1fe:	9b03      	ldr	r3, [sp, #12]
 800c200:	1d19      	adds	r1, r3, #4
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	9103      	str	r1, [sp, #12]
 800c206:	2b00      	cmp	r3, #0
 800c208:	bfbb      	ittet	lt
 800c20a:	425b      	neglt	r3, r3
 800c20c:	f042 0202 	orrlt.w	r2, r2, #2
 800c210:	9307      	strge	r3, [sp, #28]
 800c212:	9307      	strlt	r3, [sp, #28]
 800c214:	bfb8      	it	lt
 800c216:	9204      	strlt	r2, [sp, #16]
 800c218:	7823      	ldrb	r3, [r4, #0]
 800c21a:	2b2e      	cmp	r3, #46	; 0x2e
 800c21c:	d10c      	bne.n	800c238 <_svfiprintf_r+0x130>
 800c21e:	7863      	ldrb	r3, [r4, #1]
 800c220:	2b2a      	cmp	r3, #42	; 0x2a
 800c222:	d134      	bne.n	800c28e <_svfiprintf_r+0x186>
 800c224:	9b03      	ldr	r3, [sp, #12]
 800c226:	1d1a      	adds	r2, r3, #4
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	9203      	str	r2, [sp, #12]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	bfb8      	it	lt
 800c230:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c234:	3402      	adds	r4, #2
 800c236:	9305      	str	r3, [sp, #20]
 800c238:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c300 <_svfiprintf_r+0x1f8>
 800c23c:	7821      	ldrb	r1, [r4, #0]
 800c23e:	2203      	movs	r2, #3
 800c240:	4650      	mov	r0, sl
 800c242:	f7f3 ffc5 	bl	80001d0 <memchr>
 800c246:	b138      	cbz	r0, 800c258 <_svfiprintf_r+0x150>
 800c248:	9b04      	ldr	r3, [sp, #16]
 800c24a:	eba0 000a 	sub.w	r0, r0, sl
 800c24e:	2240      	movs	r2, #64	; 0x40
 800c250:	4082      	lsls	r2, r0
 800c252:	4313      	orrs	r3, r2
 800c254:	3401      	adds	r4, #1
 800c256:	9304      	str	r3, [sp, #16]
 800c258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c25c:	4825      	ldr	r0, [pc, #148]	; (800c2f4 <_svfiprintf_r+0x1ec>)
 800c25e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c262:	2206      	movs	r2, #6
 800c264:	f7f3 ffb4 	bl	80001d0 <memchr>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d038      	beq.n	800c2de <_svfiprintf_r+0x1d6>
 800c26c:	4b22      	ldr	r3, [pc, #136]	; (800c2f8 <_svfiprintf_r+0x1f0>)
 800c26e:	bb1b      	cbnz	r3, 800c2b8 <_svfiprintf_r+0x1b0>
 800c270:	9b03      	ldr	r3, [sp, #12]
 800c272:	3307      	adds	r3, #7
 800c274:	f023 0307 	bic.w	r3, r3, #7
 800c278:	3308      	adds	r3, #8
 800c27a:	9303      	str	r3, [sp, #12]
 800c27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c27e:	4433      	add	r3, r6
 800c280:	9309      	str	r3, [sp, #36]	; 0x24
 800c282:	e768      	b.n	800c156 <_svfiprintf_r+0x4e>
 800c284:	fb0c 3202 	mla	r2, ip, r2, r3
 800c288:	460c      	mov	r4, r1
 800c28a:	2001      	movs	r0, #1
 800c28c:	e7a6      	b.n	800c1dc <_svfiprintf_r+0xd4>
 800c28e:	2300      	movs	r3, #0
 800c290:	3401      	adds	r4, #1
 800c292:	9305      	str	r3, [sp, #20]
 800c294:	4619      	mov	r1, r3
 800c296:	f04f 0c0a 	mov.w	ip, #10
 800c29a:	4620      	mov	r0, r4
 800c29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2a0:	3a30      	subs	r2, #48	; 0x30
 800c2a2:	2a09      	cmp	r2, #9
 800c2a4:	d903      	bls.n	800c2ae <_svfiprintf_r+0x1a6>
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0c6      	beq.n	800c238 <_svfiprintf_r+0x130>
 800c2aa:	9105      	str	r1, [sp, #20]
 800c2ac:	e7c4      	b.n	800c238 <_svfiprintf_r+0x130>
 800c2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e7f0      	b.n	800c29a <_svfiprintf_r+0x192>
 800c2b8:	ab03      	add	r3, sp, #12
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	462a      	mov	r2, r5
 800c2be:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <_svfiprintf_r+0x1f4>)
 800c2c0:	a904      	add	r1, sp, #16
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	f7fe faba 	bl	800a83c <_printf_float>
 800c2c8:	1c42      	adds	r2, r0, #1
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	d1d6      	bne.n	800c27c <_svfiprintf_r+0x174>
 800c2ce:	89ab      	ldrh	r3, [r5, #12]
 800c2d0:	065b      	lsls	r3, r3, #25
 800c2d2:	f53f af2d 	bmi.w	800c130 <_svfiprintf_r+0x28>
 800c2d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2d8:	b01d      	add	sp, #116	; 0x74
 800c2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2de:	ab03      	add	r3, sp, #12
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	4b05      	ldr	r3, [pc, #20]	; (800c2fc <_svfiprintf_r+0x1f4>)
 800c2e6:	a904      	add	r1, sp, #16
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f7fe fd4b 	bl	800ad84 <_printf_i>
 800c2ee:	e7eb      	b.n	800c2c8 <_svfiprintf_r+0x1c0>
 800c2f0:	0800d629 	.word	0x0800d629
 800c2f4:	0800d633 	.word	0x0800d633
 800c2f8:	0800a83d 	.word	0x0800a83d
 800c2fc:	0800c055 	.word	0x0800c055
 800c300:	0800d62f 	.word	0x0800d62f

0800c304 <malloc>:
 800c304:	4b02      	ldr	r3, [pc, #8]	; (800c310 <malloc+0xc>)
 800c306:	4601      	mov	r1, r0
 800c308:	6818      	ldr	r0, [r3, #0]
 800c30a:	f000 b823 	b.w	800c354 <_malloc_r>
 800c30e:	bf00      	nop
 800c310:	20000078 	.word	0x20000078

0800c314 <sbrk_aligned>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	4e0e      	ldr	r6, [pc, #56]	; (800c350 <sbrk_aligned+0x3c>)
 800c318:	460c      	mov	r4, r1
 800c31a:	6831      	ldr	r1, [r6, #0]
 800c31c:	4605      	mov	r5, r0
 800c31e:	b911      	cbnz	r1, 800c326 <sbrk_aligned+0x12>
 800c320:	f000 fd8e 	bl	800ce40 <_sbrk_r>
 800c324:	6030      	str	r0, [r6, #0]
 800c326:	4621      	mov	r1, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	f000 fd89 	bl	800ce40 <_sbrk_r>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	d00a      	beq.n	800c348 <sbrk_aligned+0x34>
 800c332:	1cc4      	adds	r4, r0, #3
 800c334:	f024 0403 	bic.w	r4, r4, #3
 800c338:	42a0      	cmp	r0, r4
 800c33a:	d007      	beq.n	800c34c <sbrk_aligned+0x38>
 800c33c:	1a21      	subs	r1, r4, r0
 800c33e:	4628      	mov	r0, r5
 800c340:	f000 fd7e 	bl	800ce40 <_sbrk_r>
 800c344:	3001      	adds	r0, #1
 800c346:	d101      	bne.n	800c34c <sbrk_aligned+0x38>
 800c348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c34c:	4620      	mov	r0, r4
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
 800c350:	2000562c 	.word	0x2000562c

0800c354 <_malloc_r>:
 800c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c358:	1ccd      	adds	r5, r1, #3
 800c35a:	f025 0503 	bic.w	r5, r5, #3
 800c35e:	3508      	adds	r5, #8
 800c360:	2d0c      	cmp	r5, #12
 800c362:	bf38      	it	cc
 800c364:	250c      	movcc	r5, #12
 800c366:	2d00      	cmp	r5, #0
 800c368:	4607      	mov	r7, r0
 800c36a:	db01      	blt.n	800c370 <_malloc_r+0x1c>
 800c36c:	42a9      	cmp	r1, r5
 800c36e:	d905      	bls.n	800c37c <_malloc_r+0x28>
 800c370:	230c      	movs	r3, #12
 800c372:	603b      	str	r3, [r7, #0]
 800c374:	2600      	movs	r6, #0
 800c376:	4630      	mov	r0, r6
 800c378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c450 <_malloc_r+0xfc>
 800c380:	f000 f916 	bl	800c5b0 <__malloc_lock>
 800c384:	f8d8 3000 	ldr.w	r3, [r8]
 800c388:	461c      	mov	r4, r3
 800c38a:	bb5c      	cbnz	r4, 800c3e4 <_malloc_r+0x90>
 800c38c:	4629      	mov	r1, r5
 800c38e:	4638      	mov	r0, r7
 800c390:	f7ff ffc0 	bl	800c314 <sbrk_aligned>
 800c394:	1c43      	adds	r3, r0, #1
 800c396:	4604      	mov	r4, r0
 800c398:	d155      	bne.n	800c446 <_malloc_r+0xf2>
 800c39a:	f8d8 4000 	ldr.w	r4, [r8]
 800c39e:	4626      	mov	r6, r4
 800c3a0:	2e00      	cmp	r6, #0
 800c3a2:	d145      	bne.n	800c430 <_malloc_r+0xdc>
 800c3a4:	2c00      	cmp	r4, #0
 800c3a6:	d048      	beq.n	800c43a <_malloc_r+0xe6>
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	4631      	mov	r1, r6
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	eb04 0903 	add.w	r9, r4, r3
 800c3b2:	f000 fd45 	bl	800ce40 <_sbrk_r>
 800c3b6:	4581      	cmp	r9, r0
 800c3b8:	d13f      	bne.n	800c43a <_malloc_r+0xe6>
 800c3ba:	6821      	ldr	r1, [r4, #0]
 800c3bc:	1a6d      	subs	r5, r5, r1
 800c3be:	4629      	mov	r1, r5
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff ffa7 	bl	800c314 <sbrk_aligned>
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d037      	beq.n	800c43a <_malloc_r+0xe6>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	442b      	add	r3, r5
 800c3ce:	6023      	str	r3, [r4, #0]
 800c3d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d038      	beq.n	800c44a <_malloc_r+0xf6>
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	42a2      	cmp	r2, r4
 800c3dc:	d12b      	bne.n	800c436 <_malloc_r+0xe2>
 800c3de:	2200      	movs	r2, #0
 800c3e0:	605a      	str	r2, [r3, #4]
 800c3e2:	e00f      	b.n	800c404 <_malloc_r+0xb0>
 800c3e4:	6822      	ldr	r2, [r4, #0]
 800c3e6:	1b52      	subs	r2, r2, r5
 800c3e8:	d41f      	bmi.n	800c42a <_malloc_r+0xd6>
 800c3ea:	2a0b      	cmp	r2, #11
 800c3ec:	d917      	bls.n	800c41e <_malloc_r+0xca>
 800c3ee:	1961      	adds	r1, r4, r5
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	6025      	str	r5, [r4, #0]
 800c3f4:	bf18      	it	ne
 800c3f6:	6059      	strne	r1, [r3, #4]
 800c3f8:	6863      	ldr	r3, [r4, #4]
 800c3fa:	bf08      	it	eq
 800c3fc:	f8c8 1000 	streq.w	r1, [r8]
 800c400:	5162      	str	r2, [r4, r5]
 800c402:	604b      	str	r3, [r1, #4]
 800c404:	4638      	mov	r0, r7
 800c406:	f104 060b 	add.w	r6, r4, #11
 800c40a:	f000 f8d7 	bl	800c5bc <__malloc_unlock>
 800c40e:	f026 0607 	bic.w	r6, r6, #7
 800c412:	1d23      	adds	r3, r4, #4
 800c414:	1af2      	subs	r2, r6, r3
 800c416:	d0ae      	beq.n	800c376 <_malloc_r+0x22>
 800c418:	1b9b      	subs	r3, r3, r6
 800c41a:	50a3      	str	r3, [r4, r2]
 800c41c:	e7ab      	b.n	800c376 <_malloc_r+0x22>
 800c41e:	42a3      	cmp	r3, r4
 800c420:	6862      	ldr	r2, [r4, #4]
 800c422:	d1dd      	bne.n	800c3e0 <_malloc_r+0x8c>
 800c424:	f8c8 2000 	str.w	r2, [r8]
 800c428:	e7ec      	b.n	800c404 <_malloc_r+0xb0>
 800c42a:	4623      	mov	r3, r4
 800c42c:	6864      	ldr	r4, [r4, #4]
 800c42e:	e7ac      	b.n	800c38a <_malloc_r+0x36>
 800c430:	4634      	mov	r4, r6
 800c432:	6876      	ldr	r6, [r6, #4]
 800c434:	e7b4      	b.n	800c3a0 <_malloc_r+0x4c>
 800c436:	4613      	mov	r3, r2
 800c438:	e7cc      	b.n	800c3d4 <_malloc_r+0x80>
 800c43a:	230c      	movs	r3, #12
 800c43c:	603b      	str	r3, [r7, #0]
 800c43e:	4638      	mov	r0, r7
 800c440:	f000 f8bc 	bl	800c5bc <__malloc_unlock>
 800c444:	e797      	b.n	800c376 <_malloc_r+0x22>
 800c446:	6025      	str	r5, [r4, #0]
 800c448:	e7dc      	b.n	800c404 <_malloc_r+0xb0>
 800c44a:	605b      	str	r3, [r3, #4]
 800c44c:	deff      	udf	#255	; 0xff
 800c44e:	bf00      	nop
 800c450:	20005628 	.word	0x20005628

0800c454 <__sflush_r>:
 800c454:	898a      	ldrh	r2, [r1, #12]
 800c456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c45a:	4605      	mov	r5, r0
 800c45c:	0710      	lsls	r0, r2, #28
 800c45e:	460c      	mov	r4, r1
 800c460:	d458      	bmi.n	800c514 <__sflush_r+0xc0>
 800c462:	684b      	ldr	r3, [r1, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	dc05      	bgt.n	800c474 <__sflush_r+0x20>
 800c468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dc02      	bgt.n	800c474 <__sflush_r+0x20>
 800c46e:	2000      	movs	r0, #0
 800c470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c476:	2e00      	cmp	r6, #0
 800c478:	d0f9      	beq.n	800c46e <__sflush_r+0x1a>
 800c47a:	2300      	movs	r3, #0
 800c47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c480:	682f      	ldr	r7, [r5, #0]
 800c482:	6a21      	ldr	r1, [r4, #32]
 800c484:	602b      	str	r3, [r5, #0]
 800c486:	d032      	beq.n	800c4ee <__sflush_r+0x9a>
 800c488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	075a      	lsls	r2, r3, #29
 800c48e:	d505      	bpl.n	800c49c <__sflush_r+0x48>
 800c490:	6863      	ldr	r3, [r4, #4]
 800c492:	1ac0      	subs	r0, r0, r3
 800c494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c496:	b10b      	cbz	r3, 800c49c <__sflush_r+0x48>
 800c498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c49a:	1ac0      	subs	r0, r0, r3
 800c49c:	2300      	movs	r3, #0
 800c49e:	4602      	mov	r2, r0
 800c4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4a2:	6a21      	ldr	r1, [r4, #32]
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	47b0      	blx	r6
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	d106      	bne.n	800c4bc <__sflush_r+0x68>
 800c4ae:	6829      	ldr	r1, [r5, #0]
 800c4b0:	291d      	cmp	r1, #29
 800c4b2:	d82b      	bhi.n	800c50c <__sflush_r+0xb8>
 800c4b4:	4a29      	ldr	r2, [pc, #164]	; (800c55c <__sflush_r+0x108>)
 800c4b6:	410a      	asrs	r2, r1
 800c4b8:	07d6      	lsls	r6, r2, #31
 800c4ba:	d427      	bmi.n	800c50c <__sflush_r+0xb8>
 800c4bc:	2200      	movs	r2, #0
 800c4be:	6062      	str	r2, [r4, #4]
 800c4c0:	04d9      	lsls	r1, r3, #19
 800c4c2:	6922      	ldr	r2, [r4, #16]
 800c4c4:	6022      	str	r2, [r4, #0]
 800c4c6:	d504      	bpl.n	800c4d2 <__sflush_r+0x7e>
 800c4c8:	1c42      	adds	r2, r0, #1
 800c4ca:	d101      	bne.n	800c4d0 <__sflush_r+0x7c>
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	b903      	cbnz	r3, 800c4d2 <__sflush_r+0x7e>
 800c4d0:	6560      	str	r0, [r4, #84]	; 0x54
 800c4d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4d4:	602f      	str	r7, [r5, #0]
 800c4d6:	2900      	cmp	r1, #0
 800c4d8:	d0c9      	beq.n	800c46e <__sflush_r+0x1a>
 800c4da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4de:	4299      	cmp	r1, r3
 800c4e0:	d002      	beq.n	800c4e8 <__sflush_r+0x94>
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f7ff fd6a 	bl	800bfbc <_free_r>
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ec:	e7c0      	b.n	800c470 <__sflush_r+0x1c>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b0      	blx	r6
 800c4f4:	1c41      	adds	r1, r0, #1
 800c4f6:	d1c8      	bne.n	800c48a <__sflush_r+0x36>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d0c5      	beq.n	800c48a <__sflush_r+0x36>
 800c4fe:	2b1d      	cmp	r3, #29
 800c500:	d001      	beq.n	800c506 <__sflush_r+0xb2>
 800c502:	2b16      	cmp	r3, #22
 800c504:	d101      	bne.n	800c50a <__sflush_r+0xb6>
 800c506:	602f      	str	r7, [r5, #0]
 800c508:	e7b1      	b.n	800c46e <__sflush_r+0x1a>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	e7ad      	b.n	800c470 <__sflush_r+0x1c>
 800c514:	690f      	ldr	r7, [r1, #16]
 800c516:	2f00      	cmp	r7, #0
 800c518:	d0a9      	beq.n	800c46e <__sflush_r+0x1a>
 800c51a:	0793      	lsls	r3, r2, #30
 800c51c:	680e      	ldr	r6, [r1, #0]
 800c51e:	bf08      	it	eq
 800c520:	694b      	ldreq	r3, [r1, #20]
 800c522:	600f      	str	r7, [r1, #0]
 800c524:	bf18      	it	ne
 800c526:	2300      	movne	r3, #0
 800c528:	eba6 0807 	sub.w	r8, r6, r7
 800c52c:	608b      	str	r3, [r1, #8]
 800c52e:	f1b8 0f00 	cmp.w	r8, #0
 800c532:	dd9c      	ble.n	800c46e <__sflush_r+0x1a>
 800c534:	6a21      	ldr	r1, [r4, #32]
 800c536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c538:	4643      	mov	r3, r8
 800c53a:	463a      	mov	r2, r7
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b0      	blx	r6
 800c540:	2800      	cmp	r0, #0
 800c542:	dc06      	bgt.n	800c552 <__sflush_r+0xfe>
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c54a:	81a3      	strh	r3, [r4, #12]
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c550:	e78e      	b.n	800c470 <__sflush_r+0x1c>
 800c552:	4407      	add	r7, r0
 800c554:	eba8 0800 	sub.w	r8, r8, r0
 800c558:	e7e9      	b.n	800c52e <__sflush_r+0xda>
 800c55a:	bf00      	nop
 800c55c:	dfbffffe 	.word	0xdfbffffe

0800c560 <_fflush_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	690b      	ldr	r3, [r1, #16]
 800c564:	4605      	mov	r5, r0
 800c566:	460c      	mov	r4, r1
 800c568:	b913      	cbnz	r3, 800c570 <_fflush_r+0x10>
 800c56a:	2500      	movs	r5, #0
 800c56c:	4628      	mov	r0, r5
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	b118      	cbz	r0, 800c57a <_fflush_r+0x1a>
 800c572:	6a03      	ldr	r3, [r0, #32]
 800c574:	b90b      	cbnz	r3, 800c57a <_fflush_r+0x1a>
 800c576:	f7fe fdb3 	bl	800b0e0 <__sinit>
 800c57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0f3      	beq.n	800c56a <_fflush_r+0xa>
 800c582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c584:	07d0      	lsls	r0, r2, #31
 800c586:	d404      	bmi.n	800c592 <_fflush_r+0x32>
 800c588:	0599      	lsls	r1, r3, #22
 800c58a:	d402      	bmi.n	800c592 <_fflush_r+0x32>
 800c58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c58e:	f7fe fe8a 	bl	800b2a6 <__retarget_lock_acquire_recursive>
 800c592:	4628      	mov	r0, r5
 800c594:	4621      	mov	r1, r4
 800c596:	f7ff ff5d 	bl	800c454 <__sflush_r>
 800c59a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c59c:	07da      	lsls	r2, r3, #31
 800c59e:	4605      	mov	r5, r0
 800c5a0:	d4e4      	bmi.n	800c56c <_fflush_r+0xc>
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	059b      	lsls	r3, r3, #22
 800c5a6:	d4e1      	bmi.n	800c56c <_fflush_r+0xc>
 800c5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5aa:	f7fe fe7d 	bl	800b2a8 <__retarget_lock_release_recursive>
 800c5ae:	e7dd      	b.n	800c56c <_fflush_r+0xc>

0800c5b0 <__malloc_lock>:
 800c5b0:	4801      	ldr	r0, [pc, #4]	; (800c5b8 <__malloc_lock+0x8>)
 800c5b2:	f7fe be78 	b.w	800b2a6 <__retarget_lock_acquire_recursive>
 800c5b6:	bf00      	nop
 800c5b8:	20005624 	.word	0x20005624

0800c5bc <__malloc_unlock>:
 800c5bc:	4801      	ldr	r0, [pc, #4]	; (800c5c4 <__malloc_unlock+0x8>)
 800c5be:	f7fe be73 	b.w	800b2a8 <__retarget_lock_release_recursive>
 800c5c2:	bf00      	nop
 800c5c4:	20005624 	.word	0x20005624

0800c5c8 <_Balloc>:
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	69c6      	ldr	r6, [r0, #28]
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	b976      	cbnz	r6, 800c5f0 <_Balloc+0x28>
 800c5d2:	2010      	movs	r0, #16
 800c5d4:	f7ff fe96 	bl	800c304 <malloc>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	61e0      	str	r0, [r4, #28]
 800c5dc:	b920      	cbnz	r0, 800c5e8 <_Balloc+0x20>
 800c5de:	4b18      	ldr	r3, [pc, #96]	; (800c640 <_Balloc+0x78>)
 800c5e0:	4818      	ldr	r0, [pc, #96]	; (800c644 <_Balloc+0x7c>)
 800c5e2:	216b      	movs	r1, #107	; 0x6b
 800c5e4:	f000 fc4e 	bl	800ce84 <__assert_func>
 800c5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5ec:	6006      	str	r6, [r0, #0]
 800c5ee:	60c6      	str	r6, [r0, #12]
 800c5f0:	69e6      	ldr	r6, [r4, #28]
 800c5f2:	68f3      	ldr	r3, [r6, #12]
 800c5f4:	b183      	cbz	r3, 800c618 <_Balloc+0x50>
 800c5f6:	69e3      	ldr	r3, [r4, #28]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5fe:	b9b8      	cbnz	r0, 800c630 <_Balloc+0x68>
 800c600:	2101      	movs	r1, #1
 800c602:	fa01 f605 	lsl.w	r6, r1, r5
 800c606:	1d72      	adds	r2, r6, #5
 800c608:	0092      	lsls	r2, r2, #2
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 fc58 	bl	800cec0 <_calloc_r>
 800c610:	b160      	cbz	r0, 800c62c <_Balloc+0x64>
 800c612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c616:	e00e      	b.n	800c636 <_Balloc+0x6e>
 800c618:	2221      	movs	r2, #33	; 0x21
 800c61a:	2104      	movs	r1, #4
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 fc4f 	bl	800cec0 <_calloc_r>
 800c622:	69e3      	ldr	r3, [r4, #28]
 800c624:	60f0      	str	r0, [r6, #12]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1e4      	bne.n	800c5f6 <_Balloc+0x2e>
 800c62c:	2000      	movs	r0, #0
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
 800c630:	6802      	ldr	r2, [r0, #0]
 800c632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c636:	2300      	movs	r3, #0
 800c638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c63c:	e7f7      	b.n	800c62e <_Balloc+0x66>
 800c63e:	bf00      	nop
 800c640:	0800d5a9 	.word	0x0800d5a9
 800c644:	0800d63a 	.word	0x0800d63a

0800c648 <_Bfree>:
 800c648:	b570      	push	{r4, r5, r6, lr}
 800c64a:	69c6      	ldr	r6, [r0, #28]
 800c64c:	4605      	mov	r5, r0
 800c64e:	460c      	mov	r4, r1
 800c650:	b976      	cbnz	r6, 800c670 <_Bfree+0x28>
 800c652:	2010      	movs	r0, #16
 800c654:	f7ff fe56 	bl	800c304 <malloc>
 800c658:	4602      	mov	r2, r0
 800c65a:	61e8      	str	r0, [r5, #28]
 800c65c:	b920      	cbnz	r0, 800c668 <_Bfree+0x20>
 800c65e:	4b09      	ldr	r3, [pc, #36]	; (800c684 <_Bfree+0x3c>)
 800c660:	4809      	ldr	r0, [pc, #36]	; (800c688 <_Bfree+0x40>)
 800c662:	218f      	movs	r1, #143	; 0x8f
 800c664:	f000 fc0e 	bl	800ce84 <__assert_func>
 800c668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c66c:	6006      	str	r6, [r0, #0]
 800c66e:	60c6      	str	r6, [r0, #12]
 800c670:	b13c      	cbz	r4, 800c682 <_Bfree+0x3a>
 800c672:	69eb      	ldr	r3, [r5, #28]
 800c674:	6862      	ldr	r2, [r4, #4]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c67c:	6021      	str	r1, [r4, #0]
 800c67e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c682:	bd70      	pop	{r4, r5, r6, pc}
 800c684:	0800d5a9 	.word	0x0800d5a9
 800c688:	0800d63a 	.word	0x0800d63a

0800c68c <__multadd>:
 800c68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c690:	690d      	ldr	r5, [r1, #16]
 800c692:	4607      	mov	r7, r0
 800c694:	460c      	mov	r4, r1
 800c696:	461e      	mov	r6, r3
 800c698:	f101 0c14 	add.w	ip, r1, #20
 800c69c:	2000      	movs	r0, #0
 800c69e:	f8dc 3000 	ldr.w	r3, [ip]
 800c6a2:	b299      	uxth	r1, r3
 800c6a4:	fb02 6101 	mla	r1, r2, r1, r6
 800c6a8:	0c1e      	lsrs	r6, r3, #16
 800c6aa:	0c0b      	lsrs	r3, r1, #16
 800c6ac:	fb02 3306 	mla	r3, r2, r6, r3
 800c6b0:	b289      	uxth	r1, r1
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6b8:	4285      	cmp	r5, r0
 800c6ba:	f84c 1b04 	str.w	r1, [ip], #4
 800c6be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6c2:	dcec      	bgt.n	800c69e <__multadd+0x12>
 800c6c4:	b30e      	cbz	r6, 800c70a <__multadd+0x7e>
 800c6c6:	68a3      	ldr	r3, [r4, #8]
 800c6c8:	42ab      	cmp	r3, r5
 800c6ca:	dc19      	bgt.n	800c700 <__multadd+0x74>
 800c6cc:	6861      	ldr	r1, [r4, #4]
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	3101      	adds	r1, #1
 800c6d2:	f7ff ff79 	bl	800c5c8 <_Balloc>
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	b928      	cbnz	r0, 800c6e6 <__multadd+0x5a>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	4b0c      	ldr	r3, [pc, #48]	; (800c710 <__multadd+0x84>)
 800c6de:	480d      	ldr	r0, [pc, #52]	; (800c714 <__multadd+0x88>)
 800c6e0:	21ba      	movs	r1, #186	; 0xba
 800c6e2:	f000 fbcf 	bl	800ce84 <__assert_func>
 800c6e6:	6922      	ldr	r2, [r4, #16]
 800c6e8:	3202      	adds	r2, #2
 800c6ea:	f104 010c 	add.w	r1, r4, #12
 800c6ee:	0092      	lsls	r2, r2, #2
 800c6f0:	300c      	adds	r0, #12
 800c6f2:	f7fe fdda 	bl	800b2aa <memcpy>
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	f7ff ffa5 	bl	800c648 <_Bfree>
 800c6fe:	4644      	mov	r4, r8
 800c700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c704:	3501      	adds	r5, #1
 800c706:	615e      	str	r6, [r3, #20]
 800c708:	6125      	str	r5, [r4, #16]
 800c70a:	4620      	mov	r0, r4
 800c70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c710:	0800d618 	.word	0x0800d618
 800c714:	0800d63a 	.word	0x0800d63a

0800c718 <__hi0bits>:
 800c718:	0c03      	lsrs	r3, r0, #16
 800c71a:	041b      	lsls	r3, r3, #16
 800c71c:	b9d3      	cbnz	r3, 800c754 <__hi0bits+0x3c>
 800c71e:	0400      	lsls	r0, r0, #16
 800c720:	2310      	movs	r3, #16
 800c722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c726:	bf04      	itt	eq
 800c728:	0200      	lsleq	r0, r0, #8
 800c72a:	3308      	addeq	r3, #8
 800c72c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c730:	bf04      	itt	eq
 800c732:	0100      	lsleq	r0, r0, #4
 800c734:	3304      	addeq	r3, #4
 800c736:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c73a:	bf04      	itt	eq
 800c73c:	0080      	lsleq	r0, r0, #2
 800c73e:	3302      	addeq	r3, #2
 800c740:	2800      	cmp	r0, #0
 800c742:	db05      	blt.n	800c750 <__hi0bits+0x38>
 800c744:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c748:	f103 0301 	add.w	r3, r3, #1
 800c74c:	bf08      	it	eq
 800c74e:	2320      	moveq	r3, #32
 800c750:	4618      	mov	r0, r3
 800c752:	4770      	bx	lr
 800c754:	2300      	movs	r3, #0
 800c756:	e7e4      	b.n	800c722 <__hi0bits+0xa>

0800c758 <__lo0bits>:
 800c758:	6803      	ldr	r3, [r0, #0]
 800c75a:	f013 0207 	ands.w	r2, r3, #7
 800c75e:	d00c      	beq.n	800c77a <__lo0bits+0x22>
 800c760:	07d9      	lsls	r1, r3, #31
 800c762:	d422      	bmi.n	800c7aa <__lo0bits+0x52>
 800c764:	079a      	lsls	r2, r3, #30
 800c766:	bf49      	itett	mi
 800c768:	085b      	lsrmi	r3, r3, #1
 800c76a:	089b      	lsrpl	r3, r3, #2
 800c76c:	6003      	strmi	r3, [r0, #0]
 800c76e:	2201      	movmi	r2, #1
 800c770:	bf5c      	itt	pl
 800c772:	6003      	strpl	r3, [r0, #0]
 800c774:	2202      	movpl	r2, #2
 800c776:	4610      	mov	r0, r2
 800c778:	4770      	bx	lr
 800c77a:	b299      	uxth	r1, r3
 800c77c:	b909      	cbnz	r1, 800c782 <__lo0bits+0x2a>
 800c77e:	0c1b      	lsrs	r3, r3, #16
 800c780:	2210      	movs	r2, #16
 800c782:	b2d9      	uxtb	r1, r3
 800c784:	b909      	cbnz	r1, 800c78a <__lo0bits+0x32>
 800c786:	3208      	adds	r2, #8
 800c788:	0a1b      	lsrs	r3, r3, #8
 800c78a:	0719      	lsls	r1, r3, #28
 800c78c:	bf04      	itt	eq
 800c78e:	091b      	lsreq	r3, r3, #4
 800c790:	3204      	addeq	r2, #4
 800c792:	0799      	lsls	r1, r3, #30
 800c794:	bf04      	itt	eq
 800c796:	089b      	lsreq	r3, r3, #2
 800c798:	3202      	addeq	r2, #2
 800c79a:	07d9      	lsls	r1, r3, #31
 800c79c:	d403      	bmi.n	800c7a6 <__lo0bits+0x4e>
 800c79e:	085b      	lsrs	r3, r3, #1
 800c7a0:	f102 0201 	add.w	r2, r2, #1
 800c7a4:	d003      	beq.n	800c7ae <__lo0bits+0x56>
 800c7a6:	6003      	str	r3, [r0, #0]
 800c7a8:	e7e5      	b.n	800c776 <__lo0bits+0x1e>
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	e7e3      	b.n	800c776 <__lo0bits+0x1e>
 800c7ae:	2220      	movs	r2, #32
 800c7b0:	e7e1      	b.n	800c776 <__lo0bits+0x1e>
	...

0800c7b4 <__i2b>:
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	f7ff ff05 	bl	800c5c8 <_Balloc>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	b928      	cbnz	r0, 800c7ce <__i2b+0x1a>
 800c7c2:	4b05      	ldr	r3, [pc, #20]	; (800c7d8 <__i2b+0x24>)
 800c7c4:	4805      	ldr	r0, [pc, #20]	; (800c7dc <__i2b+0x28>)
 800c7c6:	f240 1145 	movw	r1, #325	; 0x145
 800c7ca:	f000 fb5b 	bl	800ce84 <__assert_func>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	6144      	str	r4, [r0, #20]
 800c7d2:	6103      	str	r3, [r0, #16]
 800c7d4:	bd10      	pop	{r4, pc}
 800c7d6:	bf00      	nop
 800c7d8:	0800d618 	.word	0x0800d618
 800c7dc:	0800d63a 	.word	0x0800d63a

0800c7e0 <__multiply>:
 800c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	4691      	mov	r9, r2
 800c7e6:	690a      	ldr	r2, [r1, #16]
 800c7e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	bfb8      	it	lt
 800c7f0:	460b      	movlt	r3, r1
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	bfbc      	itt	lt
 800c7f6:	464c      	movlt	r4, r9
 800c7f8:	4699      	movlt	r9, r3
 800c7fa:	6927      	ldr	r7, [r4, #16]
 800c7fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c800:	68a3      	ldr	r3, [r4, #8]
 800c802:	6861      	ldr	r1, [r4, #4]
 800c804:	eb07 060a 	add.w	r6, r7, sl
 800c808:	42b3      	cmp	r3, r6
 800c80a:	b085      	sub	sp, #20
 800c80c:	bfb8      	it	lt
 800c80e:	3101      	addlt	r1, #1
 800c810:	f7ff feda 	bl	800c5c8 <_Balloc>
 800c814:	b930      	cbnz	r0, 800c824 <__multiply+0x44>
 800c816:	4602      	mov	r2, r0
 800c818:	4b44      	ldr	r3, [pc, #272]	; (800c92c <__multiply+0x14c>)
 800c81a:	4845      	ldr	r0, [pc, #276]	; (800c930 <__multiply+0x150>)
 800c81c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c820:	f000 fb30 	bl	800ce84 <__assert_func>
 800c824:	f100 0514 	add.w	r5, r0, #20
 800c828:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c82c:	462b      	mov	r3, r5
 800c82e:	2200      	movs	r2, #0
 800c830:	4543      	cmp	r3, r8
 800c832:	d321      	bcc.n	800c878 <__multiply+0x98>
 800c834:	f104 0314 	add.w	r3, r4, #20
 800c838:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c83c:	f109 0314 	add.w	r3, r9, #20
 800c840:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c844:	9202      	str	r2, [sp, #8]
 800c846:	1b3a      	subs	r2, r7, r4
 800c848:	3a15      	subs	r2, #21
 800c84a:	f022 0203 	bic.w	r2, r2, #3
 800c84e:	3204      	adds	r2, #4
 800c850:	f104 0115 	add.w	r1, r4, #21
 800c854:	428f      	cmp	r7, r1
 800c856:	bf38      	it	cc
 800c858:	2204      	movcc	r2, #4
 800c85a:	9201      	str	r2, [sp, #4]
 800c85c:	9a02      	ldr	r2, [sp, #8]
 800c85e:	9303      	str	r3, [sp, #12]
 800c860:	429a      	cmp	r2, r3
 800c862:	d80c      	bhi.n	800c87e <__multiply+0x9e>
 800c864:	2e00      	cmp	r6, #0
 800c866:	dd03      	ble.n	800c870 <__multiply+0x90>
 800c868:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d05b      	beq.n	800c928 <__multiply+0x148>
 800c870:	6106      	str	r6, [r0, #16]
 800c872:	b005      	add	sp, #20
 800c874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c878:	f843 2b04 	str.w	r2, [r3], #4
 800c87c:	e7d8      	b.n	800c830 <__multiply+0x50>
 800c87e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c882:	f1ba 0f00 	cmp.w	sl, #0
 800c886:	d024      	beq.n	800c8d2 <__multiply+0xf2>
 800c888:	f104 0e14 	add.w	lr, r4, #20
 800c88c:	46a9      	mov	r9, r5
 800c88e:	f04f 0c00 	mov.w	ip, #0
 800c892:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c896:	f8d9 1000 	ldr.w	r1, [r9]
 800c89a:	fa1f fb82 	uxth.w	fp, r2
 800c89e:	b289      	uxth	r1, r1
 800c8a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c8a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c8a8:	f8d9 2000 	ldr.w	r2, [r9]
 800c8ac:	4461      	add	r1, ip
 800c8ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c8b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c8b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c8ba:	b289      	uxth	r1, r1
 800c8bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c8c0:	4577      	cmp	r7, lr
 800c8c2:	f849 1b04 	str.w	r1, [r9], #4
 800c8c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c8ca:	d8e2      	bhi.n	800c892 <__multiply+0xb2>
 800c8cc:	9a01      	ldr	r2, [sp, #4]
 800c8ce:	f845 c002 	str.w	ip, [r5, r2]
 800c8d2:	9a03      	ldr	r2, [sp, #12]
 800c8d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c8d8:	3304      	adds	r3, #4
 800c8da:	f1b9 0f00 	cmp.w	r9, #0
 800c8de:	d021      	beq.n	800c924 <__multiply+0x144>
 800c8e0:	6829      	ldr	r1, [r5, #0]
 800c8e2:	f104 0c14 	add.w	ip, r4, #20
 800c8e6:	46ae      	mov	lr, r5
 800c8e8:	f04f 0a00 	mov.w	sl, #0
 800c8ec:	f8bc b000 	ldrh.w	fp, [ip]
 800c8f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c8f4:	fb09 220b 	mla	r2, r9, fp, r2
 800c8f8:	4452      	add	r2, sl
 800c8fa:	b289      	uxth	r1, r1
 800c8fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c900:	f84e 1b04 	str.w	r1, [lr], #4
 800c904:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c908:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c90c:	f8be 1000 	ldrh.w	r1, [lr]
 800c910:	fb09 110a 	mla	r1, r9, sl, r1
 800c914:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c918:	4567      	cmp	r7, ip
 800c91a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c91e:	d8e5      	bhi.n	800c8ec <__multiply+0x10c>
 800c920:	9a01      	ldr	r2, [sp, #4]
 800c922:	50a9      	str	r1, [r5, r2]
 800c924:	3504      	adds	r5, #4
 800c926:	e799      	b.n	800c85c <__multiply+0x7c>
 800c928:	3e01      	subs	r6, #1
 800c92a:	e79b      	b.n	800c864 <__multiply+0x84>
 800c92c:	0800d618 	.word	0x0800d618
 800c930:	0800d63a 	.word	0x0800d63a

0800c934 <__pow5mult>:
 800c934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c938:	4615      	mov	r5, r2
 800c93a:	f012 0203 	ands.w	r2, r2, #3
 800c93e:	4606      	mov	r6, r0
 800c940:	460f      	mov	r7, r1
 800c942:	d007      	beq.n	800c954 <__pow5mult+0x20>
 800c944:	4c25      	ldr	r4, [pc, #148]	; (800c9dc <__pow5mult+0xa8>)
 800c946:	3a01      	subs	r2, #1
 800c948:	2300      	movs	r3, #0
 800c94a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c94e:	f7ff fe9d 	bl	800c68c <__multadd>
 800c952:	4607      	mov	r7, r0
 800c954:	10ad      	asrs	r5, r5, #2
 800c956:	d03d      	beq.n	800c9d4 <__pow5mult+0xa0>
 800c958:	69f4      	ldr	r4, [r6, #28]
 800c95a:	b97c      	cbnz	r4, 800c97c <__pow5mult+0x48>
 800c95c:	2010      	movs	r0, #16
 800c95e:	f7ff fcd1 	bl	800c304 <malloc>
 800c962:	4602      	mov	r2, r0
 800c964:	61f0      	str	r0, [r6, #28]
 800c966:	b928      	cbnz	r0, 800c974 <__pow5mult+0x40>
 800c968:	4b1d      	ldr	r3, [pc, #116]	; (800c9e0 <__pow5mult+0xac>)
 800c96a:	481e      	ldr	r0, [pc, #120]	; (800c9e4 <__pow5mult+0xb0>)
 800c96c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c970:	f000 fa88 	bl	800ce84 <__assert_func>
 800c974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c978:	6004      	str	r4, [r0, #0]
 800c97a:	60c4      	str	r4, [r0, #12]
 800c97c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c984:	b94c      	cbnz	r4, 800c99a <__pow5mult+0x66>
 800c986:	f240 2171 	movw	r1, #625	; 0x271
 800c98a:	4630      	mov	r0, r6
 800c98c:	f7ff ff12 	bl	800c7b4 <__i2b>
 800c990:	2300      	movs	r3, #0
 800c992:	f8c8 0008 	str.w	r0, [r8, #8]
 800c996:	4604      	mov	r4, r0
 800c998:	6003      	str	r3, [r0, #0]
 800c99a:	f04f 0900 	mov.w	r9, #0
 800c99e:	07eb      	lsls	r3, r5, #31
 800c9a0:	d50a      	bpl.n	800c9b8 <__pow5mult+0x84>
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	4622      	mov	r2, r4
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f7ff ff1a 	bl	800c7e0 <__multiply>
 800c9ac:	4639      	mov	r1, r7
 800c9ae:	4680      	mov	r8, r0
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	f7ff fe49 	bl	800c648 <_Bfree>
 800c9b6:	4647      	mov	r7, r8
 800c9b8:	106d      	asrs	r5, r5, #1
 800c9ba:	d00b      	beq.n	800c9d4 <__pow5mult+0xa0>
 800c9bc:	6820      	ldr	r0, [r4, #0]
 800c9be:	b938      	cbnz	r0, 800c9d0 <__pow5mult+0x9c>
 800c9c0:	4622      	mov	r2, r4
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f7ff ff0b 	bl	800c7e0 <__multiply>
 800c9ca:	6020      	str	r0, [r4, #0]
 800c9cc:	f8c0 9000 	str.w	r9, [r0]
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	e7e4      	b.n	800c99e <__pow5mult+0x6a>
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9da:	bf00      	nop
 800c9dc:	0800d788 	.word	0x0800d788
 800c9e0:	0800d5a9 	.word	0x0800d5a9
 800c9e4:	0800d63a 	.word	0x0800d63a

0800c9e8 <__lshift>:
 800c9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	6849      	ldr	r1, [r1, #4]
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9f6:	68a3      	ldr	r3, [r4, #8]
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	4691      	mov	r9, r2
 800c9fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca00:	f108 0601 	add.w	r6, r8, #1
 800ca04:	42b3      	cmp	r3, r6
 800ca06:	db0b      	blt.n	800ca20 <__lshift+0x38>
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f7ff fddd 	bl	800c5c8 <_Balloc>
 800ca0e:	4605      	mov	r5, r0
 800ca10:	b948      	cbnz	r0, 800ca26 <__lshift+0x3e>
 800ca12:	4602      	mov	r2, r0
 800ca14:	4b28      	ldr	r3, [pc, #160]	; (800cab8 <__lshift+0xd0>)
 800ca16:	4829      	ldr	r0, [pc, #164]	; (800cabc <__lshift+0xd4>)
 800ca18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ca1c:	f000 fa32 	bl	800ce84 <__assert_func>
 800ca20:	3101      	adds	r1, #1
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	e7ee      	b.n	800ca04 <__lshift+0x1c>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f100 0114 	add.w	r1, r0, #20
 800ca2c:	f100 0210 	add.w	r2, r0, #16
 800ca30:	4618      	mov	r0, r3
 800ca32:	4553      	cmp	r3, sl
 800ca34:	db33      	blt.n	800ca9e <__lshift+0xb6>
 800ca36:	6920      	ldr	r0, [r4, #16]
 800ca38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca3c:	f104 0314 	add.w	r3, r4, #20
 800ca40:	f019 091f 	ands.w	r9, r9, #31
 800ca44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca4c:	d02b      	beq.n	800caa6 <__lshift+0xbe>
 800ca4e:	f1c9 0e20 	rsb	lr, r9, #32
 800ca52:	468a      	mov	sl, r1
 800ca54:	2200      	movs	r2, #0
 800ca56:	6818      	ldr	r0, [r3, #0]
 800ca58:	fa00 f009 	lsl.w	r0, r0, r9
 800ca5c:	4310      	orrs	r0, r2
 800ca5e:	f84a 0b04 	str.w	r0, [sl], #4
 800ca62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca66:	459c      	cmp	ip, r3
 800ca68:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca6c:	d8f3      	bhi.n	800ca56 <__lshift+0x6e>
 800ca6e:	ebac 0304 	sub.w	r3, ip, r4
 800ca72:	3b15      	subs	r3, #21
 800ca74:	f023 0303 	bic.w	r3, r3, #3
 800ca78:	3304      	adds	r3, #4
 800ca7a:	f104 0015 	add.w	r0, r4, #21
 800ca7e:	4584      	cmp	ip, r0
 800ca80:	bf38      	it	cc
 800ca82:	2304      	movcc	r3, #4
 800ca84:	50ca      	str	r2, [r1, r3]
 800ca86:	b10a      	cbz	r2, 800ca8c <__lshift+0xa4>
 800ca88:	f108 0602 	add.w	r6, r8, #2
 800ca8c:	3e01      	subs	r6, #1
 800ca8e:	4638      	mov	r0, r7
 800ca90:	612e      	str	r6, [r5, #16]
 800ca92:	4621      	mov	r1, r4
 800ca94:	f7ff fdd8 	bl	800c648 <_Bfree>
 800ca98:	4628      	mov	r0, r5
 800ca9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800caa2:	3301      	adds	r3, #1
 800caa4:	e7c5      	b.n	800ca32 <__lshift+0x4a>
 800caa6:	3904      	subs	r1, #4
 800caa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800caac:	f841 2f04 	str.w	r2, [r1, #4]!
 800cab0:	459c      	cmp	ip, r3
 800cab2:	d8f9      	bhi.n	800caa8 <__lshift+0xc0>
 800cab4:	e7ea      	b.n	800ca8c <__lshift+0xa4>
 800cab6:	bf00      	nop
 800cab8:	0800d618 	.word	0x0800d618
 800cabc:	0800d63a 	.word	0x0800d63a

0800cac0 <__mcmp>:
 800cac0:	b530      	push	{r4, r5, lr}
 800cac2:	6902      	ldr	r2, [r0, #16]
 800cac4:	690c      	ldr	r4, [r1, #16]
 800cac6:	1b12      	subs	r2, r2, r4
 800cac8:	d10e      	bne.n	800cae8 <__mcmp+0x28>
 800caca:	f100 0314 	add.w	r3, r0, #20
 800cace:	3114      	adds	r1, #20
 800cad0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cad4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cad8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cadc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cae0:	42a5      	cmp	r5, r4
 800cae2:	d003      	beq.n	800caec <__mcmp+0x2c>
 800cae4:	d305      	bcc.n	800caf2 <__mcmp+0x32>
 800cae6:	2201      	movs	r2, #1
 800cae8:	4610      	mov	r0, r2
 800caea:	bd30      	pop	{r4, r5, pc}
 800caec:	4283      	cmp	r3, r0
 800caee:	d3f3      	bcc.n	800cad8 <__mcmp+0x18>
 800caf0:	e7fa      	b.n	800cae8 <__mcmp+0x28>
 800caf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800caf6:	e7f7      	b.n	800cae8 <__mcmp+0x28>

0800caf8 <__mdiff>:
 800caf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	460c      	mov	r4, r1
 800cafe:	4606      	mov	r6, r0
 800cb00:	4611      	mov	r1, r2
 800cb02:	4620      	mov	r0, r4
 800cb04:	4690      	mov	r8, r2
 800cb06:	f7ff ffdb 	bl	800cac0 <__mcmp>
 800cb0a:	1e05      	subs	r5, r0, #0
 800cb0c:	d110      	bne.n	800cb30 <__mdiff+0x38>
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4630      	mov	r0, r6
 800cb12:	f7ff fd59 	bl	800c5c8 <_Balloc>
 800cb16:	b930      	cbnz	r0, 800cb26 <__mdiff+0x2e>
 800cb18:	4b3a      	ldr	r3, [pc, #232]	; (800cc04 <__mdiff+0x10c>)
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	f240 2137 	movw	r1, #567	; 0x237
 800cb20:	4839      	ldr	r0, [pc, #228]	; (800cc08 <__mdiff+0x110>)
 800cb22:	f000 f9af 	bl	800ce84 <__assert_func>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb30:	bfa4      	itt	ge
 800cb32:	4643      	movge	r3, r8
 800cb34:	46a0      	movge	r8, r4
 800cb36:	4630      	mov	r0, r6
 800cb38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cb3c:	bfa6      	itte	ge
 800cb3e:	461c      	movge	r4, r3
 800cb40:	2500      	movge	r5, #0
 800cb42:	2501      	movlt	r5, #1
 800cb44:	f7ff fd40 	bl	800c5c8 <_Balloc>
 800cb48:	b920      	cbnz	r0, 800cb54 <__mdiff+0x5c>
 800cb4a:	4b2e      	ldr	r3, [pc, #184]	; (800cc04 <__mdiff+0x10c>)
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	f240 2145 	movw	r1, #581	; 0x245
 800cb52:	e7e5      	b.n	800cb20 <__mdiff+0x28>
 800cb54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cb58:	6926      	ldr	r6, [r4, #16]
 800cb5a:	60c5      	str	r5, [r0, #12]
 800cb5c:	f104 0914 	add.w	r9, r4, #20
 800cb60:	f108 0514 	add.w	r5, r8, #20
 800cb64:	f100 0e14 	add.w	lr, r0, #20
 800cb68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cb6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cb70:	f108 0210 	add.w	r2, r8, #16
 800cb74:	46f2      	mov	sl, lr
 800cb76:	2100      	movs	r1, #0
 800cb78:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb80:	fa11 f88b 	uxtah	r8, r1, fp
 800cb84:	b299      	uxth	r1, r3
 800cb86:	0c1b      	lsrs	r3, r3, #16
 800cb88:	eba8 0801 	sub.w	r8, r8, r1
 800cb8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb94:	fa1f f888 	uxth.w	r8, r8
 800cb98:	1419      	asrs	r1, r3, #16
 800cb9a:	454e      	cmp	r6, r9
 800cb9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cba0:	f84a 3b04 	str.w	r3, [sl], #4
 800cba4:	d8e8      	bhi.n	800cb78 <__mdiff+0x80>
 800cba6:	1b33      	subs	r3, r6, r4
 800cba8:	3b15      	subs	r3, #21
 800cbaa:	f023 0303 	bic.w	r3, r3, #3
 800cbae:	3304      	adds	r3, #4
 800cbb0:	3415      	adds	r4, #21
 800cbb2:	42a6      	cmp	r6, r4
 800cbb4:	bf38      	it	cc
 800cbb6:	2304      	movcc	r3, #4
 800cbb8:	441d      	add	r5, r3
 800cbba:	4473      	add	r3, lr
 800cbbc:	469e      	mov	lr, r3
 800cbbe:	462e      	mov	r6, r5
 800cbc0:	4566      	cmp	r6, ip
 800cbc2:	d30e      	bcc.n	800cbe2 <__mdiff+0xea>
 800cbc4:	f10c 0203 	add.w	r2, ip, #3
 800cbc8:	1b52      	subs	r2, r2, r5
 800cbca:	f022 0203 	bic.w	r2, r2, #3
 800cbce:	3d03      	subs	r5, #3
 800cbd0:	45ac      	cmp	ip, r5
 800cbd2:	bf38      	it	cc
 800cbd4:	2200      	movcc	r2, #0
 800cbd6:	4413      	add	r3, r2
 800cbd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cbdc:	b17a      	cbz	r2, 800cbfe <__mdiff+0x106>
 800cbde:	6107      	str	r7, [r0, #16]
 800cbe0:	e7a4      	b.n	800cb2c <__mdiff+0x34>
 800cbe2:	f856 8b04 	ldr.w	r8, [r6], #4
 800cbe6:	fa11 f288 	uxtah	r2, r1, r8
 800cbea:	1414      	asrs	r4, r2, #16
 800cbec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cbf0:	b292      	uxth	r2, r2
 800cbf2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cbf6:	f84e 2b04 	str.w	r2, [lr], #4
 800cbfa:	1421      	asrs	r1, r4, #16
 800cbfc:	e7e0      	b.n	800cbc0 <__mdiff+0xc8>
 800cbfe:	3f01      	subs	r7, #1
 800cc00:	e7ea      	b.n	800cbd8 <__mdiff+0xe0>
 800cc02:	bf00      	nop
 800cc04:	0800d618 	.word	0x0800d618
 800cc08:	0800d63a 	.word	0x0800d63a

0800cc0c <__d2b>:
 800cc0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc10:	460f      	mov	r7, r1
 800cc12:	2101      	movs	r1, #1
 800cc14:	ec59 8b10 	vmov	r8, r9, d0
 800cc18:	4616      	mov	r6, r2
 800cc1a:	f7ff fcd5 	bl	800c5c8 <_Balloc>
 800cc1e:	4604      	mov	r4, r0
 800cc20:	b930      	cbnz	r0, 800cc30 <__d2b+0x24>
 800cc22:	4602      	mov	r2, r0
 800cc24:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <__d2b+0xac>)
 800cc26:	4825      	ldr	r0, [pc, #148]	; (800ccbc <__d2b+0xb0>)
 800cc28:	f240 310f 	movw	r1, #783	; 0x30f
 800cc2c:	f000 f92a 	bl	800ce84 <__assert_func>
 800cc30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc38:	bb2d      	cbnz	r5, 800cc86 <__d2b+0x7a>
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	f1b8 0300 	subs.w	r3, r8, #0
 800cc40:	d026      	beq.n	800cc90 <__d2b+0x84>
 800cc42:	4668      	mov	r0, sp
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	f7ff fd87 	bl	800c758 <__lo0bits>
 800cc4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc4e:	b1e8      	cbz	r0, 800cc8c <__d2b+0x80>
 800cc50:	f1c0 0320 	rsb	r3, r0, #32
 800cc54:	fa02 f303 	lsl.w	r3, r2, r3
 800cc58:	430b      	orrs	r3, r1
 800cc5a:	40c2      	lsrs	r2, r0
 800cc5c:	6163      	str	r3, [r4, #20]
 800cc5e:	9201      	str	r2, [sp, #4]
 800cc60:	9b01      	ldr	r3, [sp, #4]
 800cc62:	61a3      	str	r3, [r4, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	bf14      	ite	ne
 800cc68:	2202      	movne	r2, #2
 800cc6a:	2201      	moveq	r2, #1
 800cc6c:	6122      	str	r2, [r4, #16]
 800cc6e:	b1bd      	cbz	r5, 800cca0 <__d2b+0x94>
 800cc70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc74:	4405      	add	r5, r0
 800cc76:	603d      	str	r5, [r7, #0]
 800cc78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc7c:	6030      	str	r0, [r6, #0]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	b003      	add	sp, #12
 800cc82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc8a:	e7d6      	b.n	800cc3a <__d2b+0x2e>
 800cc8c:	6161      	str	r1, [r4, #20]
 800cc8e:	e7e7      	b.n	800cc60 <__d2b+0x54>
 800cc90:	a801      	add	r0, sp, #4
 800cc92:	f7ff fd61 	bl	800c758 <__lo0bits>
 800cc96:	9b01      	ldr	r3, [sp, #4]
 800cc98:	6163      	str	r3, [r4, #20]
 800cc9a:	3020      	adds	r0, #32
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	e7e5      	b.n	800cc6c <__d2b+0x60>
 800cca0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cca4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cca8:	6038      	str	r0, [r7, #0]
 800ccaa:	6918      	ldr	r0, [r3, #16]
 800ccac:	f7ff fd34 	bl	800c718 <__hi0bits>
 800ccb0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccb4:	e7e2      	b.n	800cc7c <__d2b+0x70>
 800ccb6:	bf00      	nop
 800ccb8:	0800d618 	.word	0x0800d618
 800ccbc:	0800d63a 	.word	0x0800d63a

0800ccc0 <__sread>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc8:	f000 f8a8 	bl	800ce1c <_read_r>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	bfab      	itete	ge
 800ccd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccd2:	89a3      	ldrhlt	r3, [r4, #12]
 800ccd4:	181b      	addge	r3, r3, r0
 800ccd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccda:	bfac      	ite	ge
 800ccdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccde:	81a3      	strhlt	r3, [r4, #12]
 800cce0:	bd10      	pop	{r4, pc}

0800cce2 <__swrite>:
 800cce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce6:	461f      	mov	r7, r3
 800cce8:	898b      	ldrh	r3, [r1, #12]
 800ccea:	05db      	lsls	r3, r3, #23
 800ccec:	4605      	mov	r5, r0
 800ccee:	460c      	mov	r4, r1
 800ccf0:	4616      	mov	r6, r2
 800ccf2:	d505      	bpl.n	800cd00 <__swrite+0x1e>
 800ccf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f000 f87c 	bl	800cdf8 <_lseek_r>
 800cd00:	89a3      	ldrh	r3, [r4, #12]
 800cd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd0a:	81a3      	strh	r3, [r4, #12]
 800cd0c:	4632      	mov	r2, r6
 800cd0e:	463b      	mov	r3, r7
 800cd10:	4628      	mov	r0, r5
 800cd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd16:	f000 b8a3 	b.w	800ce60 <_write_r>

0800cd1a <__sseek>:
 800cd1a:	b510      	push	{r4, lr}
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd22:	f000 f869 	bl	800cdf8 <_lseek_r>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	bf15      	itete	ne
 800cd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd36:	81a3      	strheq	r3, [r4, #12]
 800cd38:	bf18      	it	ne
 800cd3a:	81a3      	strhne	r3, [r4, #12]
 800cd3c:	bd10      	pop	{r4, pc}

0800cd3e <__sclose>:
 800cd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd42:	f000 b849 	b.w	800cdd8 <_close_r>

0800cd46 <_realloc_r>:
 800cd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4a:	4680      	mov	r8, r0
 800cd4c:	4614      	mov	r4, r2
 800cd4e:	460e      	mov	r6, r1
 800cd50:	b921      	cbnz	r1, 800cd5c <_realloc_r+0x16>
 800cd52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd56:	4611      	mov	r1, r2
 800cd58:	f7ff bafc 	b.w	800c354 <_malloc_r>
 800cd5c:	b92a      	cbnz	r2, 800cd6a <_realloc_r+0x24>
 800cd5e:	f7ff f92d 	bl	800bfbc <_free_r>
 800cd62:	4625      	mov	r5, r4
 800cd64:	4628      	mov	r0, r5
 800cd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd6a:	f000 f8d1 	bl	800cf10 <_malloc_usable_size_r>
 800cd6e:	4284      	cmp	r4, r0
 800cd70:	4607      	mov	r7, r0
 800cd72:	d802      	bhi.n	800cd7a <_realloc_r+0x34>
 800cd74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd78:	d812      	bhi.n	800cda0 <_realloc_r+0x5a>
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	4640      	mov	r0, r8
 800cd7e:	f7ff fae9 	bl	800c354 <_malloc_r>
 800cd82:	4605      	mov	r5, r0
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d0ed      	beq.n	800cd64 <_realloc_r+0x1e>
 800cd88:	42bc      	cmp	r4, r7
 800cd8a:	4622      	mov	r2, r4
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	bf28      	it	cs
 800cd90:	463a      	movcs	r2, r7
 800cd92:	f7fe fa8a 	bl	800b2aa <memcpy>
 800cd96:	4631      	mov	r1, r6
 800cd98:	4640      	mov	r0, r8
 800cd9a:	f7ff f90f 	bl	800bfbc <_free_r>
 800cd9e:	e7e1      	b.n	800cd64 <_realloc_r+0x1e>
 800cda0:	4635      	mov	r5, r6
 800cda2:	e7df      	b.n	800cd64 <_realloc_r+0x1e>

0800cda4 <memmove>:
 800cda4:	4288      	cmp	r0, r1
 800cda6:	b510      	push	{r4, lr}
 800cda8:	eb01 0402 	add.w	r4, r1, r2
 800cdac:	d902      	bls.n	800cdb4 <memmove+0x10>
 800cdae:	4284      	cmp	r4, r0
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	d807      	bhi.n	800cdc4 <memmove+0x20>
 800cdb4:	1e43      	subs	r3, r0, #1
 800cdb6:	42a1      	cmp	r1, r4
 800cdb8:	d008      	beq.n	800cdcc <memmove+0x28>
 800cdba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdc2:	e7f8      	b.n	800cdb6 <memmove+0x12>
 800cdc4:	4402      	add	r2, r0
 800cdc6:	4601      	mov	r1, r0
 800cdc8:	428a      	cmp	r2, r1
 800cdca:	d100      	bne.n	800cdce <memmove+0x2a>
 800cdcc:	bd10      	pop	{r4, pc}
 800cdce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdd6:	e7f7      	b.n	800cdc8 <memmove+0x24>

0800cdd8 <_close_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	4d06      	ldr	r5, [pc, #24]	; (800cdf4 <_close_r+0x1c>)
 800cddc:	2300      	movs	r3, #0
 800cdde:	4604      	mov	r4, r0
 800cde0:	4608      	mov	r0, r1
 800cde2:	602b      	str	r3, [r5, #0]
 800cde4:	f7f6 f9c9 	bl	800317a <_close>
 800cde8:	1c43      	adds	r3, r0, #1
 800cdea:	d102      	bne.n	800cdf2 <_close_r+0x1a>
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	b103      	cbz	r3, 800cdf2 <_close_r+0x1a>
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	20005620 	.word	0x20005620

0800cdf8 <_lseek_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	; (800ce18 <_lseek_r+0x20>)
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	4608      	mov	r0, r1
 800ce00:	4611      	mov	r1, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	602a      	str	r2, [r5, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f7f6 f9de 	bl	80031c8 <_lseek>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_lseek_r+0x1e>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_lseek_r+0x1e>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20005620 	.word	0x20005620

0800ce1c <_read_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4d07      	ldr	r5, [pc, #28]	; (800ce3c <_read_r+0x20>)
 800ce20:	4604      	mov	r4, r0
 800ce22:	4608      	mov	r0, r1
 800ce24:	4611      	mov	r1, r2
 800ce26:	2200      	movs	r2, #0
 800ce28:	602a      	str	r2, [r5, #0]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	f7f6 f96c 	bl	8003108 <_read>
 800ce30:	1c43      	adds	r3, r0, #1
 800ce32:	d102      	bne.n	800ce3a <_read_r+0x1e>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	b103      	cbz	r3, 800ce3a <_read_r+0x1e>
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	bd38      	pop	{r3, r4, r5, pc}
 800ce3c:	20005620 	.word	0x20005620

0800ce40 <_sbrk_r>:
 800ce40:	b538      	push	{r3, r4, r5, lr}
 800ce42:	4d06      	ldr	r5, [pc, #24]	; (800ce5c <_sbrk_r+0x1c>)
 800ce44:	2300      	movs	r3, #0
 800ce46:	4604      	mov	r4, r0
 800ce48:	4608      	mov	r0, r1
 800ce4a:	602b      	str	r3, [r5, #0]
 800ce4c:	f7f6 f9ca 	bl	80031e4 <_sbrk>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	d102      	bne.n	800ce5a <_sbrk_r+0x1a>
 800ce54:	682b      	ldr	r3, [r5, #0]
 800ce56:	b103      	cbz	r3, 800ce5a <_sbrk_r+0x1a>
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	bd38      	pop	{r3, r4, r5, pc}
 800ce5c:	20005620 	.word	0x20005620

0800ce60 <_write_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4d07      	ldr	r5, [pc, #28]	; (800ce80 <_write_r+0x20>)
 800ce64:	4604      	mov	r4, r0
 800ce66:	4608      	mov	r0, r1
 800ce68:	4611      	mov	r1, r2
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	602a      	str	r2, [r5, #0]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f7f6 f967 	bl	8003142 <_write>
 800ce74:	1c43      	adds	r3, r0, #1
 800ce76:	d102      	bne.n	800ce7e <_write_r+0x1e>
 800ce78:	682b      	ldr	r3, [r5, #0]
 800ce7a:	b103      	cbz	r3, 800ce7e <_write_r+0x1e>
 800ce7c:	6023      	str	r3, [r4, #0]
 800ce7e:	bd38      	pop	{r3, r4, r5, pc}
 800ce80:	20005620 	.word	0x20005620

0800ce84 <__assert_func>:
 800ce84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce86:	4614      	mov	r4, r2
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4b09      	ldr	r3, [pc, #36]	; (800ceb0 <__assert_func+0x2c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4605      	mov	r5, r0
 800ce90:	68d8      	ldr	r0, [r3, #12]
 800ce92:	b14c      	cbz	r4, 800cea8 <__assert_func+0x24>
 800ce94:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <__assert_func+0x30>)
 800ce96:	9100      	str	r1, [sp, #0]
 800ce98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce9c:	4906      	ldr	r1, [pc, #24]	; (800ceb8 <__assert_func+0x34>)
 800ce9e:	462b      	mov	r3, r5
 800cea0:	f000 f83e 	bl	800cf20 <fiprintf>
 800cea4:	f000 f85b 	bl	800cf5e <abort>
 800cea8:	4b04      	ldr	r3, [pc, #16]	; (800cebc <__assert_func+0x38>)
 800ceaa:	461c      	mov	r4, r3
 800ceac:	e7f3      	b.n	800ce96 <__assert_func+0x12>
 800ceae:	bf00      	nop
 800ceb0:	20000078 	.word	0x20000078
 800ceb4:	0800d89f 	.word	0x0800d89f
 800ceb8:	0800d8ac 	.word	0x0800d8ac
 800cebc:	0800d8da 	.word	0x0800d8da

0800cec0 <_calloc_r>:
 800cec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cec2:	fba1 2402 	umull	r2, r4, r1, r2
 800cec6:	b94c      	cbnz	r4, 800cedc <_calloc_r+0x1c>
 800cec8:	4611      	mov	r1, r2
 800ceca:	9201      	str	r2, [sp, #4]
 800cecc:	f7ff fa42 	bl	800c354 <_malloc_r>
 800ced0:	9a01      	ldr	r2, [sp, #4]
 800ced2:	4605      	mov	r5, r0
 800ced4:	b930      	cbnz	r0, 800cee4 <_calloc_r+0x24>
 800ced6:	4628      	mov	r0, r5
 800ced8:	b003      	add	sp, #12
 800ceda:	bd30      	pop	{r4, r5, pc}
 800cedc:	220c      	movs	r2, #12
 800cede:	6002      	str	r2, [r0, #0]
 800cee0:	2500      	movs	r5, #0
 800cee2:	e7f8      	b.n	800ced6 <_calloc_r+0x16>
 800cee4:	4621      	mov	r1, r4
 800cee6:	f7fe f951 	bl	800b18c <memset>
 800ceea:	e7f4      	b.n	800ced6 <_calloc_r+0x16>

0800ceec <__ascii_mbtowc>:
 800ceec:	b082      	sub	sp, #8
 800ceee:	b901      	cbnz	r1, 800cef2 <__ascii_mbtowc+0x6>
 800cef0:	a901      	add	r1, sp, #4
 800cef2:	b142      	cbz	r2, 800cf06 <__ascii_mbtowc+0x1a>
 800cef4:	b14b      	cbz	r3, 800cf0a <__ascii_mbtowc+0x1e>
 800cef6:	7813      	ldrb	r3, [r2, #0]
 800cef8:	600b      	str	r3, [r1, #0]
 800cefa:	7812      	ldrb	r2, [r2, #0]
 800cefc:	1e10      	subs	r0, r2, #0
 800cefe:	bf18      	it	ne
 800cf00:	2001      	movne	r0, #1
 800cf02:	b002      	add	sp, #8
 800cf04:	4770      	bx	lr
 800cf06:	4610      	mov	r0, r2
 800cf08:	e7fb      	b.n	800cf02 <__ascii_mbtowc+0x16>
 800cf0a:	f06f 0001 	mvn.w	r0, #1
 800cf0e:	e7f8      	b.n	800cf02 <__ascii_mbtowc+0x16>

0800cf10 <_malloc_usable_size_r>:
 800cf10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf14:	1f18      	subs	r0, r3, #4
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	bfbc      	itt	lt
 800cf1a:	580b      	ldrlt	r3, [r1, r0]
 800cf1c:	18c0      	addlt	r0, r0, r3
 800cf1e:	4770      	bx	lr

0800cf20 <fiprintf>:
 800cf20:	b40e      	push	{r1, r2, r3}
 800cf22:	b503      	push	{r0, r1, lr}
 800cf24:	4601      	mov	r1, r0
 800cf26:	ab03      	add	r3, sp, #12
 800cf28:	4805      	ldr	r0, [pc, #20]	; (800cf40 <fiprintf+0x20>)
 800cf2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf2e:	6800      	ldr	r0, [r0, #0]
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	f000 f845 	bl	800cfc0 <_vfiprintf_r>
 800cf36:	b002      	add	sp, #8
 800cf38:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf3c:	b003      	add	sp, #12
 800cf3e:	4770      	bx	lr
 800cf40:	20000078 	.word	0x20000078

0800cf44 <__ascii_wctomb>:
 800cf44:	b149      	cbz	r1, 800cf5a <__ascii_wctomb+0x16>
 800cf46:	2aff      	cmp	r2, #255	; 0xff
 800cf48:	bf85      	ittet	hi
 800cf4a:	238a      	movhi	r3, #138	; 0x8a
 800cf4c:	6003      	strhi	r3, [r0, #0]
 800cf4e:	700a      	strbls	r2, [r1, #0]
 800cf50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cf54:	bf98      	it	ls
 800cf56:	2001      	movls	r0, #1
 800cf58:	4770      	bx	lr
 800cf5a:	4608      	mov	r0, r1
 800cf5c:	4770      	bx	lr

0800cf5e <abort>:
 800cf5e:	b508      	push	{r3, lr}
 800cf60:	2006      	movs	r0, #6
 800cf62:	f000 fa89 	bl	800d478 <raise>
 800cf66:	2001      	movs	r0, #1
 800cf68:	f7f6 f8c4 	bl	80030f4 <_exit>

0800cf6c <__sfputc_r>:
 800cf6c:	6893      	ldr	r3, [r2, #8]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	b410      	push	{r4}
 800cf74:	6093      	str	r3, [r2, #8]
 800cf76:	da08      	bge.n	800cf8a <__sfputc_r+0x1e>
 800cf78:	6994      	ldr	r4, [r2, #24]
 800cf7a:	42a3      	cmp	r3, r4
 800cf7c:	db01      	blt.n	800cf82 <__sfputc_r+0x16>
 800cf7e:	290a      	cmp	r1, #10
 800cf80:	d103      	bne.n	800cf8a <__sfputc_r+0x1e>
 800cf82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf86:	f000 b935 	b.w	800d1f4 <__swbuf_r>
 800cf8a:	6813      	ldr	r3, [r2, #0]
 800cf8c:	1c58      	adds	r0, r3, #1
 800cf8e:	6010      	str	r0, [r2, #0]
 800cf90:	7019      	strb	r1, [r3, #0]
 800cf92:	4608      	mov	r0, r1
 800cf94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <__sfputs_r>:
 800cf9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9c:	4606      	mov	r6, r0
 800cf9e:	460f      	mov	r7, r1
 800cfa0:	4614      	mov	r4, r2
 800cfa2:	18d5      	adds	r5, r2, r3
 800cfa4:	42ac      	cmp	r4, r5
 800cfa6:	d101      	bne.n	800cfac <__sfputs_r+0x12>
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	e007      	b.n	800cfbc <__sfputs_r+0x22>
 800cfac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb0:	463a      	mov	r2, r7
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f7ff ffda 	bl	800cf6c <__sfputc_r>
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d1f3      	bne.n	800cfa4 <__sfputs_r+0xa>
 800cfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfc0 <_vfiprintf_r>:
 800cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc4:	460d      	mov	r5, r1
 800cfc6:	b09d      	sub	sp, #116	; 0x74
 800cfc8:	4614      	mov	r4, r2
 800cfca:	4698      	mov	r8, r3
 800cfcc:	4606      	mov	r6, r0
 800cfce:	b118      	cbz	r0, 800cfd8 <_vfiprintf_r+0x18>
 800cfd0:	6a03      	ldr	r3, [r0, #32]
 800cfd2:	b90b      	cbnz	r3, 800cfd8 <_vfiprintf_r+0x18>
 800cfd4:	f7fe f884 	bl	800b0e0 <__sinit>
 800cfd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfda:	07d9      	lsls	r1, r3, #31
 800cfdc:	d405      	bmi.n	800cfea <_vfiprintf_r+0x2a>
 800cfde:	89ab      	ldrh	r3, [r5, #12]
 800cfe0:	059a      	lsls	r2, r3, #22
 800cfe2:	d402      	bmi.n	800cfea <_vfiprintf_r+0x2a>
 800cfe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe6:	f7fe f95e 	bl	800b2a6 <__retarget_lock_acquire_recursive>
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	071b      	lsls	r3, r3, #28
 800cfee:	d501      	bpl.n	800cff4 <_vfiprintf_r+0x34>
 800cff0:	692b      	ldr	r3, [r5, #16]
 800cff2:	b99b      	cbnz	r3, 800d01c <_vfiprintf_r+0x5c>
 800cff4:	4629      	mov	r1, r5
 800cff6:	4630      	mov	r0, r6
 800cff8:	f000 f93a 	bl	800d270 <__swsetup_r>
 800cffc:	b170      	cbz	r0, 800d01c <_vfiprintf_r+0x5c>
 800cffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d000:	07dc      	lsls	r4, r3, #31
 800d002:	d504      	bpl.n	800d00e <_vfiprintf_r+0x4e>
 800d004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d008:	b01d      	add	sp, #116	; 0x74
 800d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00e:	89ab      	ldrh	r3, [r5, #12]
 800d010:	0598      	lsls	r0, r3, #22
 800d012:	d4f7      	bmi.n	800d004 <_vfiprintf_r+0x44>
 800d014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d016:	f7fe f947 	bl	800b2a8 <__retarget_lock_release_recursive>
 800d01a:	e7f3      	b.n	800d004 <_vfiprintf_r+0x44>
 800d01c:	2300      	movs	r3, #0
 800d01e:	9309      	str	r3, [sp, #36]	; 0x24
 800d020:	2320      	movs	r3, #32
 800d022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d026:	f8cd 800c 	str.w	r8, [sp, #12]
 800d02a:	2330      	movs	r3, #48	; 0x30
 800d02c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d1e0 <_vfiprintf_r+0x220>
 800d030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d034:	f04f 0901 	mov.w	r9, #1
 800d038:	4623      	mov	r3, r4
 800d03a:	469a      	mov	sl, r3
 800d03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d040:	b10a      	cbz	r2, 800d046 <_vfiprintf_r+0x86>
 800d042:	2a25      	cmp	r2, #37	; 0x25
 800d044:	d1f9      	bne.n	800d03a <_vfiprintf_r+0x7a>
 800d046:	ebba 0b04 	subs.w	fp, sl, r4
 800d04a:	d00b      	beq.n	800d064 <_vfiprintf_r+0xa4>
 800d04c:	465b      	mov	r3, fp
 800d04e:	4622      	mov	r2, r4
 800d050:	4629      	mov	r1, r5
 800d052:	4630      	mov	r0, r6
 800d054:	f7ff ffa1 	bl	800cf9a <__sfputs_r>
 800d058:	3001      	adds	r0, #1
 800d05a:	f000 80a9 	beq.w	800d1b0 <_vfiprintf_r+0x1f0>
 800d05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d060:	445a      	add	r2, fp
 800d062:	9209      	str	r2, [sp, #36]	; 0x24
 800d064:	f89a 3000 	ldrb.w	r3, [sl]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 80a1 	beq.w	800d1b0 <_vfiprintf_r+0x1f0>
 800d06e:	2300      	movs	r3, #0
 800d070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d078:	f10a 0a01 	add.w	sl, sl, #1
 800d07c:	9304      	str	r3, [sp, #16]
 800d07e:	9307      	str	r3, [sp, #28]
 800d080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d084:	931a      	str	r3, [sp, #104]	; 0x68
 800d086:	4654      	mov	r4, sl
 800d088:	2205      	movs	r2, #5
 800d08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d08e:	4854      	ldr	r0, [pc, #336]	; (800d1e0 <_vfiprintf_r+0x220>)
 800d090:	f7f3 f89e 	bl	80001d0 <memchr>
 800d094:	9a04      	ldr	r2, [sp, #16]
 800d096:	b9d8      	cbnz	r0, 800d0d0 <_vfiprintf_r+0x110>
 800d098:	06d1      	lsls	r1, r2, #27
 800d09a:	bf44      	itt	mi
 800d09c:	2320      	movmi	r3, #32
 800d09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0a2:	0713      	lsls	r3, r2, #28
 800d0a4:	bf44      	itt	mi
 800d0a6:	232b      	movmi	r3, #43	; 0x2b
 800d0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0b2:	d015      	beq.n	800d0e0 <_vfiprintf_r+0x120>
 800d0b4:	9a07      	ldr	r2, [sp, #28]
 800d0b6:	4654      	mov	r4, sl
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	f04f 0c0a 	mov.w	ip, #10
 800d0be:	4621      	mov	r1, r4
 800d0c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0c4:	3b30      	subs	r3, #48	; 0x30
 800d0c6:	2b09      	cmp	r3, #9
 800d0c8:	d94d      	bls.n	800d166 <_vfiprintf_r+0x1a6>
 800d0ca:	b1b0      	cbz	r0, 800d0fa <_vfiprintf_r+0x13a>
 800d0cc:	9207      	str	r2, [sp, #28]
 800d0ce:	e014      	b.n	800d0fa <_vfiprintf_r+0x13a>
 800d0d0:	eba0 0308 	sub.w	r3, r0, r8
 800d0d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	9304      	str	r3, [sp, #16]
 800d0dc:	46a2      	mov	sl, r4
 800d0de:	e7d2      	b.n	800d086 <_vfiprintf_r+0xc6>
 800d0e0:	9b03      	ldr	r3, [sp, #12]
 800d0e2:	1d19      	adds	r1, r3, #4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	9103      	str	r1, [sp, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	bfbb      	ittet	lt
 800d0ec:	425b      	neglt	r3, r3
 800d0ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d0f2:	9307      	strge	r3, [sp, #28]
 800d0f4:	9307      	strlt	r3, [sp, #28]
 800d0f6:	bfb8      	it	lt
 800d0f8:	9204      	strlt	r2, [sp, #16]
 800d0fa:	7823      	ldrb	r3, [r4, #0]
 800d0fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d0fe:	d10c      	bne.n	800d11a <_vfiprintf_r+0x15a>
 800d100:	7863      	ldrb	r3, [r4, #1]
 800d102:	2b2a      	cmp	r3, #42	; 0x2a
 800d104:	d134      	bne.n	800d170 <_vfiprintf_r+0x1b0>
 800d106:	9b03      	ldr	r3, [sp, #12]
 800d108:	1d1a      	adds	r2, r3, #4
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	9203      	str	r2, [sp, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bfb8      	it	lt
 800d112:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d116:	3402      	adds	r4, #2
 800d118:	9305      	str	r3, [sp, #20]
 800d11a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d1f0 <_vfiprintf_r+0x230>
 800d11e:	7821      	ldrb	r1, [r4, #0]
 800d120:	2203      	movs	r2, #3
 800d122:	4650      	mov	r0, sl
 800d124:	f7f3 f854 	bl	80001d0 <memchr>
 800d128:	b138      	cbz	r0, 800d13a <_vfiprintf_r+0x17a>
 800d12a:	9b04      	ldr	r3, [sp, #16]
 800d12c:	eba0 000a 	sub.w	r0, r0, sl
 800d130:	2240      	movs	r2, #64	; 0x40
 800d132:	4082      	lsls	r2, r0
 800d134:	4313      	orrs	r3, r2
 800d136:	3401      	adds	r4, #1
 800d138:	9304      	str	r3, [sp, #16]
 800d13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d13e:	4829      	ldr	r0, [pc, #164]	; (800d1e4 <_vfiprintf_r+0x224>)
 800d140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d144:	2206      	movs	r2, #6
 800d146:	f7f3 f843 	bl	80001d0 <memchr>
 800d14a:	2800      	cmp	r0, #0
 800d14c:	d03f      	beq.n	800d1ce <_vfiprintf_r+0x20e>
 800d14e:	4b26      	ldr	r3, [pc, #152]	; (800d1e8 <_vfiprintf_r+0x228>)
 800d150:	bb1b      	cbnz	r3, 800d19a <_vfiprintf_r+0x1da>
 800d152:	9b03      	ldr	r3, [sp, #12]
 800d154:	3307      	adds	r3, #7
 800d156:	f023 0307 	bic.w	r3, r3, #7
 800d15a:	3308      	adds	r3, #8
 800d15c:	9303      	str	r3, [sp, #12]
 800d15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d160:	443b      	add	r3, r7
 800d162:	9309      	str	r3, [sp, #36]	; 0x24
 800d164:	e768      	b.n	800d038 <_vfiprintf_r+0x78>
 800d166:	fb0c 3202 	mla	r2, ip, r2, r3
 800d16a:	460c      	mov	r4, r1
 800d16c:	2001      	movs	r0, #1
 800d16e:	e7a6      	b.n	800d0be <_vfiprintf_r+0xfe>
 800d170:	2300      	movs	r3, #0
 800d172:	3401      	adds	r4, #1
 800d174:	9305      	str	r3, [sp, #20]
 800d176:	4619      	mov	r1, r3
 800d178:	f04f 0c0a 	mov.w	ip, #10
 800d17c:	4620      	mov	r0, r4
 800d17e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d182:	3a30      	subs	r2, #48	; 0x30
 800d184:	2a09      	cmp	r2, #9
 800d186:	d903      	bls.n	800d190 <_vfiprintf_r+0x1d0>
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d0c6      	beq.n	800d11a <_vfiprintf_r+0x15a>
 800d18c:	9105      	str	r1, [sp, #20]
 800d18e:	e7c4      	b.n	800d11a <_vfiprintf_r+0x15a>
 800d190:	fb0c 2101 	mla	r1, ip, r1, r2
 800d194:	4604      	mov	r4, r0
 800d196:	2301      	movs	r3, #1
 800d198:	e7f0      	b.n	800d17c <_vfiprintf_r+0x1bc>
 800d19a:	ab03      	add	r3, sp, #12
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	462a      	mov	r2, r5
 800d1a0:	4b12      	ldr	r3, [pc, #72]	; (800d1ec <_vfiprintf_r+0x22c>)
 800d1a2:	a904      	add	r1, sp, #16
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f7fd fb49 	bl	800a83c <_printf_float>
 800d1aa:	4607      	mov	r7, r0
 800d1ac:	1c78      	adds	r0, r7, #1
 800d1ae:	d1d6      	bne.n	800d15e <_vfiprintf_r+0x19e>
 800d1b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1b2:	07d9      	lsls	r1, r3, #31
 800d1b4:	d405      	bmi.n	800d1c2 <_vfiprintf_r+0x202>
 800d1b6:	89ab      	ldrh	r3, [r5, #12]
 800d1b8:	059a      	lsls	r2, r3, #22
 800d1ba:	d402      	bmi.n	800d1c2 <_vfiprintf_r+0x202>
 800d1bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1be:	f7fe f873 	bl	800b2a8 <__retarget_lock_release_recursive>
 800d1c2:	89ab      	ldrh	r3, [r5, #12]
 800d1c4:	065b      	lsls	r3, r3, #25
 800d1c6:	f53f af1d 	bmi.w	800d004 <_vfiprintf_r+0x44>
 800d1ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1cc:	e71c      	b.n	800d008 <_vfiprintf_r+0x48>
 800d1ce:	ab03      	add	r3, sp, #12
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	462a      	mov	r2, r5
 800d1d4:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <_vfiprintf_r+0x22c>)
 800d1d6:	a904      	add	r1, sp, #16
 800d1d8:	4630      	mov	r0, r6
 800d1da:	f7fd fdd3 	bl	800ad84 <_printf_i>
 800d1de:	e7e4      	b.n	800d1aa <_vfiprintf_r+0x1ea>
 800d1e0:	0800d629 	.word	0x0800d629
 800d1e4:	0800d633 	.word	0x0800d633
 800d1e8:	0800a83d 	.word	0x0800a83d
 800d1ec:	0800cf9b 	.word	0x0800cf9b
 800d1f0:	0800d62f 	.word	0x0800d62f

0800d1f4 <__swbuf_r>:
 800d1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f6:	460e      	mov	r6, r1
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	b118      	cbz	r0, 800d206 <__swbuf_r+0x12>
 800d1fe:	6a03      	ldr	r3, [r0, #32]
 800d200:	b90b      	cbnz	r3, 800d206 <__swbuf_r+0x12>
 800d202:	f7fd ff6d 	bl	800b0e0 <__sinit>
 800d206:	69a3      	ldr	r3, [r4, #24]
 800d208:	60a3      	str	r3, [r4, #8]
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	071a      	lsls	r2, r3, #28
 800d20e:	d525      	bpl.n	800d25c <__swbuf_r+0x68>
 800d210:	6923      	ldr	r3, [r4, #16]
 800d212:	b31b      	cbz	r3, 800d25c <__swbuf_r+0x68>
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	6922      	ldr	r2, [r4, #16]
 800d218:	1a98      	subs	r0, r3, r2
 800d21a:	6963      	ldr	r3, [r4, #20]
 800d21c:	b2f6      	uxtb	r6, r6
 800d21e:	4283      	cmp	r3, r0
 800d220:	4637      	mov	r7, r6
 800d222:	dc04      	bgt.n	800d22e <__swbuf_r+0x3a>
 800d224:	4621      	mov	r1, r4
 800d226:	4628      	mov	r0, r5
 800d228:	f7ff f99a 	bl	800c560 <_fflush_r>
 800d22c:	b9e0      	cbnz	r0, 800d268 <__swbuf_r+0x74>
 800d22e:	68a3      	ldr	r3, [r4, #8]
 800d230:	3b01      	subs	r3, #1
 800d232:	60a3      	str	r3, [r4, #8]
 800d234:	6823      	ldr	r3, [r4, #0]
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	6022      	str	r2, [r4, #0]
 800d23a:	701e      	strb	r6, [r3, #0]
 800d23c:	6962      	ldr	r2, [r4, #20]
 800d23e:	1c43      	adds	r3, r0, #1
 800d240:	429a      	cmp	r2, r3
 800d242:	d004      	beq.n	800d24e <__swbuf_r+0x5a>
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	07db      	lsls	r3, r3, #31
 800d248:	d506      	bpl.n	800d258 <__swbuf_r+0x64>
 800d24a:	2e0a      	cmp	r6, #10
 800d24c:	d104      	bne.n	800d258 <__swbuf_r+0x64>
 800d24e:	4621      	mov	r1, r4
 800d250:	4628      	mov	r0, r5
 800d252:	f7ff f985 	bl	800c560 <_fflush_r>
 800d256:	b938      	cbnz	r0, 800d268 <__swbuf_r+0x74>
 800d258:	4638      	mov	r0, r7
 800d25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d25c:	4621      	mov	r1, r4
 800d25e:	4628      	mov	r0, r5
 800d260:	f000 f806 	bl	800d270 <__swsetup_r>
 800d264:	2800      	cmp	r0, #0
 800d266:	d0d5      	beq.n	800d214 <__swbuf_r+0x20>
 800d268:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d26c:	e7f4      	b.n	800d258 <__swbuf_r+0x64>
	...

0800d270 <__swsetup_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4b2a      	ldr	r3, [pc, #168]	; (800d31c <__swsetup_r+0xac>)
 800d274:	4605      	mov	r5, r0
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	460c      	mov	r4, r1
 800d27a:	b118      	cbz	r0, 800d284 <__swsetup_r+0x14>
 800d27c:	6a03      	ldr	r3, [r0, #32]
 800d27e:	b90b      	cbnz	r3, 800d284 <__swsetup_r+0x14>
 800d280:	f7fd ff2e 	bl	800b0e0 <__sinit>
 800d284:	89a3      	ldrh	r3, [r4, #12]
 800d286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d28a:	0718      	lsls	r0, r3, #28
 800d28c:	d422      	bmi.n	800d2d4 <__swsetup_r+0x64>
 800d28e:	06d9      	lsls	r1, r3, #27
 800d290:	d407      	bmi.n	800d2a2 <__swsetup_r+0x32>
 800d292:	2309      	movs	r3, #9
 800d294:	602b      	str	r3, [r5, #0]
 800d296:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d29a:	81a3      	strh	r3, [r4, #12]
 800d29c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2a0:	e034      	b.n	800d30c <__swsetup_r+0x9c>
 800d2a2:	0758      	lsls	r0, r3, #29
 800d2a4:	d512      	bpl.n	800d2cc <__swsetup_r+0x5c>
 800d2a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2a8:	b141      	cbz	r1, 800d2bc <__swsetup_r+0x4c>
 800d2aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2ae:	4299      	cmp	r1, r3
 800d2b0:	d002      	beq.n	800d2b8 <__swsetup_r+0x48>
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f7fe fe82 	bl	800bfbc <_free_r>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	6363      	str	r3, [r4, #52]	; 0x34
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2c2:	81a3      	strh	r3, [r4, #12]
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	6063      	str	r3, [r4, #4]
 800d2c8:	6923      	ldr	r3, [r4, #16]
 800d2ca:	6023      	str	r3, [r4, #0]
 800d2cc:	89a3      	ldrh	r3, [r4, #12]
 800d2ce:	f043 0308 	orr.w	r3, r3, #8
 800d2d2:	81a3      	strh	r3, [r4, #12]
 800d2d4:	6923      	ldr	r3, [r4, #16]
 800d2d6:	b94b      	cbnz	r3, 800d2ec <__swsetup_r+0x7c>
 800d2d8:	89a3      	ldrh	r3, [r4, #12]
 800d2da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2e2:	d003      	beq.n	800d2ec <__swsetup_r+0x7c>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f000 f840 	bl	800d36c <__smakebuf_r>
 800d2ec:	89a0      	ldrh	r0, [r4, #12]
 800d2ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2f2:	f010 0301 	ands.w	r3, r0, #1
 800d2f6:	d00a      	beq.n	800d30e <__swsetup_r+0x9e>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	60a3      	str	r3, [r4, #8]
 800d2fc:	6963      	ldr	r3, [r4, #20]
 800d2fe:	425b      	negs	r3, r3
 800d300:	61a3      	str	r3, [r4, #24]
 800d302:	6923      	ldr	r3, [r4, #16]
 800d304:	b943      	cbnz	r3, 800d318 <__swsetup_r+0xa8>
 800d306:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d30a:	d1c4      	bne.n	800d296 <__swsetup_r+0x26>
 800d30c:	bd38      	pop	{r3, r4, r5, pc}
 800d30e:	0781      	lsls	r1, r0, #30
 800d310:	bf58      	it	pl
 800d312:	6963      	ldrpl	r3, [r4, #20]
 800d314:	60a3      	str	r3, [r4, #8]
 800d316:	e7f4      	b.n	800d302 <__swsetup_r+0x92>
 800d318:	2000      	movs	r0, #0
 800d31a:	e7f7      	b.n	800d30c <__swsetup_r+0x9c>
 800d31c:	20000078 	.word	0x20000078

0800d320 <__swhatbuf_r>:
 800d320:	b570      	push	{r4, r5, r6, lr}
 800d322:	460c      	mov	r4, r1
 800d324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d328:	2900      	cmp	r1, #0
 800d32a:	b096      	sub	sp, #88	; 0x58
 800d32c:	4615      	mov	r5, r2
 800d32e:	461e      	mov	r6, r3
 800d330:	da0d      	bge.n	800d34e <__swhatbuf_r+0x2e>
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d338:	f04f 0100 	mov.w	r1, #0
 800d33c:	bf0c      	ite	eq
 800d33e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d342:	2340      	movne	r3, #64	; 0x40
 800d344:	2000      	movs	r0, #0
 800d346:	6031      	str	r1, [r6, #0]
 800d348:	602b      	str	r3, [r5, #0]
 800d34a:	b016      	add	sp, #88	; 0x58
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	466a      	mov	r2, sp
 800d350:	f000 f848 	bl	800d3e4 <_fstat_r>
 800d354:	2800      	cmp	r0, #0
 800d356:	dbec      	blt.n	800d332 <__swhatbuf_r+0x12>
 800d358:	9901      	ldr	r1, [sp, #4]
 800d35a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d35e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d362:	4259      	negs	r1, r3
 800d364:	4159      	adcs	r1, r3
 800d366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d36a:	e7eb      	b.n	800d344 <__swhatbuf_r+0x24>

0800d36c <__smakebuf_r>:
 800d36c:	898b      	ldrh	r3, [r1, #12]
 800d36e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d370:	079d      	lsls	r5, r3, #30
 800d372:	4606      	mov	r6, r0
 800d374:	460c      	mov	r4, r1
 800d376:	d507      	bpl.n	800d388 <__smakebuf_r+0x1c>
 800d378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d37c:	6023      	str	r3, [r4, #0]
 800d37e:	6123      	str	r3, [r4, #16]
 800d380:	2301      	movs	r3, #1
 800d382:	6163      	str	r3, [r4, #20]
 800d384:	b002      	add	sp, #8
 800d386:	bd70      	pop	{r4, r5, r6, pc}
 800d388:	ab01      	add	r3, sp, #4
 800d38a:	466a      	mov	r2, sp
 800d38c:	f7ff ffc8 	bl	800d320 <__swhatbuf_r>
 800d390:	9900      	ldr	r1, [sp, #0]
 800d392:	4605      	mov	r5, r0
 800d394:	4630      	mov	r0, r6
 800d396:	f7fe ffdd 	bl	800c354 <_malloc_r>
 800d39a:	b948      	cbnz	r0, 800d3b0 <__smakebuf_r+0x44>
 800d39c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a0:	059a      	lsls	r2, r3, #22
 800d3a2:	d4ef      	bmi.n	800d384 <__smakebuf_r+0x18>
 800d3a4:	f023 0303 	bic.w	r3, r3, #3
 800d3a8:	f043 0302 	orr.w	r3, r3, #2
 800d3ac:	81a3      	strh	r3, [r4, #12]
 800d3ae:	e7e3      	b.n	800d378 <__smakebuf_r+0xc>
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	6020      	str	r0, [r4, #0]
 800d3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3b8:	81a3      	strh	r3, [r4, #12]
 800d3ba:	9b00      	ldr	r3, [sp, #0]
 800d3bc:	6163      	str	r3, [r4, #20]
 800d3be:	9b01      	ldr	r3, [sp, #4]
 800d3c0:	6120      	str	r0, [r4, #16]
 800d3c2:	b15b      	cbz	r3, 800d3dc <__smakebuf_r+0x70>
 800d3c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	f000 f81d 	bl	800d408 <_isatty_r>
 800d3ce:	b128      	cbz	r0, 800d3dc <__smakebuf_r+0x70>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	f023 0303 	bic.w	r3, r3, #3
 800d3d6:	f043 0301 	orr.w	r3, r3, #1
 800d3da:	81a3      	strh	r3, [r4, #12]
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	431d      	orrs	r5, r3
 800d3e0:	81a5      	strh	r5, [r4, #12]
 800d3e2:	e7cf      	b.n	800d384 <__smakebuf_r+0x18>

0800d3e4 <_fstat_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4d07      	ldr	r5, [pc, #28]	; (800d404 <_fstat_r+0x20>)
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	602b      	str	r3, [r5, #0]
 800d3f2:	f7f5 fece 	bl	8003192 <_fstat>
 800d3f6:	1c43      	adds	r3, r0, #1
 800d3f8:	d102      	bne.n	800d400 <_fstat_r+0x1c>
 800d3fa:	682b      	ldr	r3, [r5, #0]
 800d3fc:	b103      	cbz	r3, 800d400 <_fstat_r+0x1c>
 800d3fe:	6023      	str	r3, [r4, #0]
 800d400:	bd38      	pop	{r3, r4, r5, pc}
 800d402:	bf00      	nop
 800d404:	20005620 	.word	0x20005620

0800d408 <_isatty_r>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	4d06      	ldr	r5, [pc, #24]	; (800d424 <_isatty_r+0x1c>)
 800d40c:	2300      	movs	r3, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	4608      	mov	r0, r1
 800d412:	602b      	str	r3, [r5, #0]
 800d414:	f7f5 fecd 	bl	80031b2 <_isatty>
 800d418:	1c43      	adds	r3, r0, #1
 800d41a:	d102      	bne.n	800d422 <_isatty_r+0x1a>
 800d41c:	682b      	ldr	r3, [r5, #0]
 800d41e:	b103      	cbz	r3, 800d422 <_isatty_r+0x1a>
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	20005620 	.word	0x20005620

0800d428 <_raise_r>:
 800d428:	291f      	cmp	r1, #31
 800d42a:	b538      	push	{r3, r4, r5, lr}
 800d42c:	4604      	mov	r4, r0
 800d42e:	460d      	mov	r5, r1
 800d430:	d904      	bls.n	800d43c <_raise_r+0x14>
 800d432:	2316      	movs	r3, #22
 800d434:	6003      	str	r3, [r0, #0]
 800d436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d43a:	bd38      	pop	{r3, r4, r5, pc}
 800d43c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d43e:	b112      	cbz	r2, 800d446 <_raise_r+0x1e>
 800d440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d444:	b94b      	cbnz	r3, 800d45a <_raise_r+0x32>
 800d446:	4620      	mov	r0, r4
 800d448:	f000 f830 	bl	800d4ac <_getpid_r>
 800d44c:	462a      	mov	r2, r5
 800d44e:	4601      	mov	r1, r0
 800d450:	4620      	mov	r0, r4
 800d452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d456:	f000 b817 	b.w	800d488 <_kill_r>
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d00a      	beq.n	800d474 <_raise_r+0x4c>
 800d45e:	1c59      	adds	r1, r3, #1
 800d460:	d103      	bne.n	800d46a <_raise_r+0x42>
 800d462:	2316      	movs	r3, #22
 800d464:	6003      	str	r3, [r0, #0]
 800d466:	2001      	movs	r0, #1
 800d468:	e7e7      	b.n	800d43a <_raise_r+0x12>
 800d46a:	2400      	movs	r4, #0
 800d46c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d470:	4628      	mov	r0, r5
 800d472:	4798      	blx	r3
 800d474:	2000      	movs	r0, #0
 800d476:	e7e0      	b.n	800d43a <_raise_r+0x12>

0800d478 <raise>:
 800d478:	4b02      	ldr	r3, [pc, #8]	; (800d484 <raise+0xc>)
 800d47a:	4601      	mov	r1, r0
 800d47c:	6818      	ldr	r0, [r3, #0]
 800d47e:	f7ff bfd3 	b.w	800d428 <_raise_r>
 800d482:	bf00      	nop
 800d484:	20000078 	.word	0x20000078

0800d488 <_kill_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	4d07      	ldr	r5, [pc, #28]	; (800d4a8 <_kill_r+0x20>)
 800d48c:	2300      	movs	r3, #0
 800d48e:	4604      	mov	r4, r0
 800d490:	4608      	mov	r0, r1
 800d492:	4611      	mov	r1, r2
 800d494:	602b      	str	r3, [r5, #0]
 800d496:	f7f5 fe1d 	bl	80030d4 <_kill>
 800d49a:	1c43      	adds	r3, r0, #1
 800d49c:	d102      	bne.n	800d4a4 <_kill_r+0x1c>
 800d49e:	682b      	ldr	r3, [r5, #0]
 800d4a0:	b103      	cbz	r3, 800d4a4 <_kill_r+0x1c>
 800d4a2:	6023      	str	r3, [r4, #0]
 800d4a4:	bd38      	pop	{r3, r4, r5, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20005620 	.word	0x20005620

0800d4ac <_getpid_r>:
 800d4ac:	f7f5 be0a 	b.w	80030c4 <_getpid>

0800d4b0 <_init>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	bf00      	nop
 800d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4b6:	bc08      	pop	{r3}
 800d4b8:	469e      	mov	lr, r3
 800d4ba:	4770      	bx	lr

0800d4bc <_fini>:
 800d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4be:	bf00      	nop
 800d4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4c2:	bc08      	pop	{r3}
 800d4c4:	469e      	mov	lr, r3
 800d4c6:	4770      	bx	lr
