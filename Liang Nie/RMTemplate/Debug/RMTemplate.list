
RMTemplate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08013280  08013280  00014280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013928  08013928  00015238  2**0
                  CONTENTS
  4 .ARM          00000008  08013928  08013928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013930  08013930  00015238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013930  08013930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013934  08013934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08013938  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015238  2**0
                  CONTENTS
 10 .bss          00005910  20000238  20000238  00015238  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005b48  20005b48  00015238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026bc2  00000000  00000000  00015268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056f8  00000000  00000000  0003be2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002000  00000000  00000000  00041528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018e8  00000000  00000000  00043528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026dde  00000000  00000000  00044e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000268a4  00000000  00000000  0006bbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3d11  00000000  00000000  00092492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001761a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009930  00000000  00000000  001761e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0017fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013268 	.word	0x08013268

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	08013268 	.word	0x08013268

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000ea2:	e003      	b.n	8000eac <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea8:	f000 f80a 	bl	8000ec0 <BMI088_delay_us>
    while(ms--)
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	80fa      	strh	r2, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f6      	bne.n	8000ea4 <BMI088_delay_ms+0xc>
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	22a8      	movs	r2, #168	@ 0xa8
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <BMI088_delay_us+0x84>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d0f8      	beq.n	8000ef4 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d206      	bcs.n	8000f18 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4413      	add	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	e007      	b.n	8000f28 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad2      	subs	r2, r2, r3
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4413      	add	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d200      	bcs.n	8000f36 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000f34:	e7de      	b.n	8000ef4 <BMI088_delay_us+0x34>
            {
                break;
 8000f36:	bf00      	nop
            }
        }
    }


}
 8000f38:	bf00      	nop
 8000f3a:	3724      	adds	r7, #36	@ 0x24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <BMI088_ACCEL_NS_L+0x18>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <BMI088_ACCEL_NS_L+0x1c>)
 8000f52:	8811      	ldrh	r1, [r2, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f007 f8f8 	bl	800814c <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <BMI088_ACCEL_NS_H+0x18>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <BMI088_ACCEL_NS_H+0x1c>)
 8000f72:	8811      	ldrh	r1, [r2, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4618      	mov	r0, r3
 8000f78:	f007 f8e8 	bl	800814c <HAL_GPIO_WritePin>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <BMI088_GYRO_NS_L+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <BMI088_GYRO_NS_L+0x1c>)
 8000f92:	8811      	ldrh	r1, [r2, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 f8d8 	bl	800814c <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	2000000c 	.word	0x2000000c

08000fa8 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <BMI088_GYRO_NS_H+0x18>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <BMI088_GYRO_NS_H+0x1c>)
 8000fb2:	8811      	ldrh	r1, [r2, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f007 f8c8 	bl	800814c <HAL_GPIO_WritePin>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	2000000c 	.word	0x2000000c

08000fc8 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000fd2:	f107 020f 	add.w	r2, r7, #15
 8000fd6:	1df9      	adds	r1, r7, #7
 8000fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <BMI088_read_write_byte+0x28>)
 8000fe2:	f008 fe11 	bl	8009c08 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200008b4 	.word	0x200008b4

08000ff4 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001002:	f7ff ffa1 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001006:	2080      	movs	r0, #128	@ 0x80
 8001008:	f7ff ffde 	bl	8000fc8 <BMI088_read_write_byte>
 800100c:	2055      	movs	r0, #85	@ 0x55
 800100e:	f7ff ffdb 	bl	8000fc8 <BMI088_read_write_byte>
 8001012:	2055      	movs	r0, #85	@ 0x55
 8001014:	f7ff ffd8 	bl	8000fc8 <BMI088_read_write_byte>
 8001018:	4603      	mov	r3, r0
 800101a:	71bb      	strb	r3, [r7, #6]
 800101c:	f7ff ffa4 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001020:	2096      	movs	r0, #150	@ 0x96
 8001022:	f7ff ff4d 	bl	8000ec0 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001026:	f7ff ff8f 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800102a:	2080      	movs	r0, #128	@ 0x80
 800102c:	f7ff ffcc 	bl	8000fc8 <BMI088_read_write_byte>
 8001030:	2055      	movs	r0, #85	@ 0x55
 8001032:	f7ff ffc9 	bl	8000fc8 <BMI088_read_write_byte>
 8001036:	2055      	movs	r0, #85	@ 0x55
 8001038:	f7ff ffc6 	bl	8000fc8 <BMI088_read_write_byte>
 800103c:	4603      	mov	r3, r0
 800103e:	71bb      	strb	r3, [r7, #6]
 8001040:	f7ff ff92 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001044:	2096      	movs	r0, #150	@ 0x96
 8001046:	f7ff ff3b 	bl	8000ec0 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 800104a:	f7ff ff7d 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800104e:	21b6      	movs	r1, #182	@ 0xb6
 8001050:	207e      	movs	r0, #126	@ 0x7e
 8001052:	f000 fa4d 	bl	80014f0 <BMI088_write_single_reg>
 8001056:	f7ff ff87 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800105a:	2050      	movs	r0, #80	@ 0x50
 800105c:	f7ff ff1c 	bl	8000e98 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001060:	f7ff ff72 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001064:	2080      	movs	r0, #128	@ 0x80
 8001066:	f7ff ffaf 	bl	8000fc8 <BMI088_read_write_byte>
 800106a:	2055      	movs	r0, #85	@ 0x55
 800106c:	f7ff ffac 	bl	8000fc8 <BMI088_read_write_byte>
 8001070:	2055      	movs	r0, #85	@ 0x55
 8001072:	f7ff ffa9 	bl	8000fc8 <BMI088_read_write_byte>
 8001076:	4603      	mov	r3, r0
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	f7ff ff75 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800107e:	2096      	movs	r0, #150	@ 0x96
 8001080:	f7ff ff1e 	bl	8000ec0 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001084:	f7ff ff60 	bl	8000f48 <BMI088_ACCEL_NS_L>
 8001088:	2080      	movs	r0, #128	@ 0x80
 800108a:	f7ff ff9d 	bl	8000fc8 <BMI088_read_write_byte>
 800108e:	2055      	movs	r0, #85	@ 0x55
 8001090:	f7ff ff9a 	bl	8000fc8 <BMI088_read_write_byte>
 8001094:	2055      	movs	r0, #85	@ 0x55
 8001096:	f7ff ff97 	bl	8000fc8 <BMI088_read_write_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	f7ff ff63 	bl	8000f68 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010a2:	2096      	movs	r0, #150	@ 0x96
 80010a4:	f7ff ff0c 	bl	8000ec0 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	2b1e      	cmp	r3, #30
 80010ac:	d001      	beq.n	80010b2 <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 80010ae:	23ff      	movs	r3, #255	@ 0xff
 80010b0:	e052      	b.n	8001158 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	e04b      	b.n	8001150 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 80010b8:	f7ff ff46 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	4928      	ldr	r1, [pc, #160]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	7818      	ldrb	r0, [r3, #0]
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4924      	ldr	r1, [pc, #144]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	3301      	adds	r3, #1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	f000 fa08 	bl	80014f0 <BMI088_write_single_reg>
 80010e0:	f7ff ff42 	bl	8000f68 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010e4:	2096      	movs	r0, #150	@ 0x96
 80010e6:	f7ff feeb 	bl	8000ec0 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 80010ea:	f7ff ff2d 	bl	8000f48 <BMI088_ACCEL_NS_L>
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	491b      	ldr	r1, [pc, #108]	@ (8001160 <BMI088_accel_init+0x16c>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff60 	bl	8000fc8 <BMI088_read_write_byte>
 8001108:	2055      	movs	r0, #85	@ 0x55
 800110a:	f7ff ff5d 	bl	8000fc8 <BMI088_read_write_byte>
 800110e:	2055      	movs	r0, #85	@ 0x55
 8001110:	f7ff ff5a 	bl	8000fc8 <BMI088_read_write_byte>
 8001114:	4603      	mov	r3, r0
 8001116:	71bb      	strb	r3, [r7, #6]
 8001118:	f7ff ff26 	bl	8000f68 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800111c:	2096      	movs	r0, #150	@ 0x96
 800111e:	f7ff fecf 	bl	8000ec0 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	490e      	ldr	r1, [pc, #56]	@ (8001160 <BMI088_accel_init+0x16c>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	440b      	add	r3, r1
 800112e:	3301      	adds	r3, #1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	79ba      	ldrb	r2, [r7, #6]
 8001134:	429a      	cmp	r2, r3
 8001136:	d008      	beq.n	800114a <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	4909      	ldr	r1, [pc, #36]	@ (8001160 <BMI088_accel_init+0x16c>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	440b      	add	r3, r1
 8001144:	3302      	adds	r3, #2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	e006      	b.n	8001158 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d9b0      	bls.n	80010b8 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000018 	.word	0x20000018

08001164 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001172:	f7ff ff09 	bl	8000f88 <BMI088_GYRO_NS_L>
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	4619      	mov	r1, r3
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f9cc 	bl	8001518 <BMI088_read_single_reg>
 8001180:	f7ff ff12 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001184:	2096      	movs	r0, #150	@ 0x96
 8001186:	f7ff fe9b 	bl	8000ec0 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800118a:	f7ff fefd 	bl	8000f88 <BMI088_GYRO_NS_L>
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	4619      	mov	r1, r3
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f9c0 	bl	8001518 <BMI088_read_single_reg>
 8001198:	f7ff ff06 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800119c:	2096      	movs	r0, #150	@ 0x96
 800119e:	f7ff fe8f 	bl	8000ec0 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80011a2:	f7ff fef1 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011a6:	21b6      	movs	r1, #182	@ 0xb6
 80011a8:	2014      	movs	r0, #20
 80011aa:	f000 f9a1 	bl	80014f0 <BMI088_write_single_reg>
 80011ae:	f7ff fefb 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80011b2:	2050      	movs	r0, #80	@ 0x50
 80011b4:	f7ff fe70 	bl	8000e98 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011b8:	f7ff fee6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011bc:	1dbb      	adds	r3, r7, #6
 80011be:	4619      	mov	r1, r3
 80011c0:	2000      	movs	r0, #0
 80011c2:	f000 f9a9 	bl	8001518 <BMI088_read_single_reg>
 80011c6:	f7ff feef 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011ca:	2096      	movs	r0, #150	@ 0x96
 80011cc:	f7ff fe78 	bl	8000ec0 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011d0:	f7ff feda 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	4619      	mov	r1, r3
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f99d 	bl	8001518 <BMI088_read_single_reg>
 80011de:	f7ff fee3 	bl	8000fa8 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011e2:	2096      	movs	r0, #150	@ 0x96
 80011e4:	f7ff fe6c 	bl	8000ec0 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	d001      	beq.n	80011f2 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80011ee:	23ff      	movs	r3, #255	@ 0xff
 80011f0:	e049      	b.n	8001286 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e042      	b.n	800127e <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 80011f8:	f7ff fec6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	4924      	ldr	r1, [pc, #144]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	440b      	add	r3, r1
 8001208:	7818      	ldrb	r0, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	4920      	ldr	r1, [pc, #128]	@ (8001290 <BMI088_gyro_init+0x12c>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	440b      	add	r3, r1
 8001216:	3301      	adds	r3, #1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	f000 f968 	bl	80014f0 <BMI088_write_single_reg>
 8001220:	f7ff fec2 	bl	8000fa8 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001224:	2096      	movs	r0, #150	@ 0x96
 8001226:	f7ff fe4b 	bl	8000ec0 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 800122a:	f7ff fead 	bl	8000f88 <BMI088_GYRO_NS_L>
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	4917      	ldr	r1, [pc, #92]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	440b      	add	r3, r1
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	1dba      	adds	r2, r7, #6
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f969 	bl	8001518 <BMI088_read_single_reg>
 8001246:	f7ff feaf 	bl	8000fa8 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800124a:	2096      	movs	r0, #150	@ 0x96
 800124c:	f7ff fe38 	bl	8000ec0 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	490f      	ldr	r1, [pc, #60]	@ (8001290 <BMI088_gyro_init+0x12c>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	440b      	add	r3, r1
 800125c:	3301      	adds	r3, #1
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	429a      	cmp	r2, r3
 8001264:	d008      	beq.n	8001278 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4909      	ldr	r1, [pc, #36]	@ (8001290 <BMI088_gyro_init+0x12c>)
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	440b      	add	r3, r1
 8001272:	3302      	adds	r3, #2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	e006      	b.n	8001286 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	3301      	adds	r3, #1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d9b9      	bls.n	80011f8 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000002c 	.word	0x2000002c

08001294 <IMU_get_gyro>:

float IMU_get_gyro(axis_t axis) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	BMI088_read(gyro, accel, &temp);
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <IMU_get_gyro+0x4c>)
 80012a0:	4910      	ldr	r1, [pc, #64]	@ (80012e4 <IMU_get_gyro+0x50>)
 80012a2:	4811      	ldr	r0, [pc, #68]	@ (80012e8 <IMU_get_gyro+0x54>)
 80012a4:	f000 f836 	bl	8001314 <BMI088_read>
	if(axis == x){
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <IMU_get_gyro+0x20>
		return gyro[0];
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <IMU_get_gyro+0x54>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	e00d      	b.n	80012d0 <IMU_get_gyro+0x3c>
	} else if (axis == y) {
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d102      	bne.n	80012c0 <IMU_get_gyro+0x2c>
		return gyro[1];
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <IMU_get_gyro+0x54>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	e007      	b.n	80012d0 <IMU_get_gyro+0x3c>
	} else if (axis == z) {
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d102      	bne.n	80012cc <IMU_get_gyro+0x38>
		return gyro[2];
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <IMU_get_gyro+0x54>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	e001      	b.n	80012d0 <IMU_get_gyro+0x3c>
	} else {
		return 0;
 80012cc:	f04f 0300 	mov.w	r3, #0
	}
}
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000026c 	.word	0x2000026c
 80012e4:	20000260 	.word	0x20000260
 80012e8:	20000254 	.word	0x20000254

080012ec <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 80012f0:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <IMU_get_temp+0x1c>)
 80012f2:	4906      	ldr	r1, [pc, #24]	@ (800130c <IMU_get_temp+0x20>)
 80012f4:	4806      	ldr	r0, [pc, #24]	@ (8001310 <IMU_get_temp+0x24>)
 80012f6:	f000 f80d 	bl	8001314 <BMI088_read>
	return temp;
 80012fa:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <IMU_get_temp+0x1c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	ee07 3a90 	vmov	s15, r3
}
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000026c 	.word	0x2000026c
 800130c:	20000260 	.word	0x20000260
 8001310:	20000254 	.word	0x20000254

08001314 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8001320:	4a70      	ldr	r2, [pc, #448]	@ (80014e4 <BMI088_read+0x1d0>)
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	3304      	adds	r3, #4
 800132e:	8019      	strh	r1, [r3, #0]
 8001330:	3302      	adds	r3, #2
 8001332:	0c0a      	lsrs	r2, r1, #16
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 800133a:	f7ff fe05 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800133e:	2092      	movs	r0, #146	@ 0x92
 8001340:	f7ff fe42 	bl	8000fc8 <BMI088_read_write_byte>
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2206      	movs	r2, #6
 800134a:	4619      	mov	r1, r3
 800134c:	2012      	movs	r0, #18
 800134e:	f000 f8fb 	bl	8001548 <BMI088_read_muli_reg>
 8001352:	f7ff fe09 	bl	8000f68 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8001356:	7d7b      	ldrb	r3, [r7, #21]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7d3b      	ldrb	r3, [r7, #20]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001364:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001370:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <BMI088_read+0x1d4>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	7dbb      	ldrb	r3, [r7, #22]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800138e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139a:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <BMI088_read+0x1d4>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3304      	adds	r3, #4
 80013a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a8:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80013ac:	7e7b      	ldrb	r3, [r7, #25]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7e3b      	ldrb	r3, [r7, #24]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80013ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c6:	4b48      	ldr	r3, [pc, #288]	@ (80014e8 <BMI088_read+0x1d4>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3308      	adds	r3, #8
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 80013d8:	f7ff fdd6 	bl	8000f88 <BMI088_GYRO_NS_L>
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2208      	movs	r2, #8
 80013e2:	4619      	mov	r1, r3
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f8af 	bl	8001548 <BMI088_read_muli_reg>
 80013ea:	f7ff fddd 	bl	8000fa8 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80013ee:	7d3b      	ldrb	r3, [r7, #20]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d140      	bne.n	8001476 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001402:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140e:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <BMI088_read+0x1d8>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800141e:	7e7b      	ldrb	r3, [r7, #25]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	7e3b      	ldrb	r3, [r7, #24]
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800142c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <BMI088_read+0x1d8>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001446:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 800144a:	7efb      	ldrb	r3, [r7, #27]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001458:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <BMI088_read+0x1d8>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3308      	adds	r3, #8
 800146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001472:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001476:	f7ff fd67 	bl	8000f48 <BMI088_ACCEL_NS_L>
 800147a:	20a2      	movs	r0, #162	@ 0xa2
 800147c:	f7ff fda4 	bl	8000fc8 <BMI088_read_write_byte>
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2202      	movs	r2, #2
 8001486:	4619      	mov	r1, r3
 8001488:	2022      	movs	r0, #34	@ 0x22
 800148a:	f000 f85d 	bl	8001548 <BMI088_read_muli_reg>
 800148e:	f7ff fd6b 	bl	8000f68 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	b21a      	sxth	r2, r3
 8001498:	7d7b      	ldrb	r3, [r7, #21]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 80014a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ac:	db04      	blt.n	80014b8 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 80014b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80014d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a00 	vstr	s15, [r3]
}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08013280 	.word	0x08013280
 80014e8:	20000010 	.word	0x20000010
 80014ec:	20000014 	.word	0x20000014

080014f0 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	460a      	mov	r2, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fd60 	bl	8000fc8 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fd5c 	bl	8000fc8 <BMI088_read_write_byte>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd4b 	bl	8000fc8 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8001532:	2055      	movs	r0, #85	@ 0x55
 8001534:	f7ff fd48 	bl	8000fc8 <BMI088_read_write_byte>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	701a      	strb	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fd31 	bl	8000fc8 <BMI088_read_write_byte>

    while (len != 0)
 8001566:	e00c      	b.n	8001582 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001568:	2055      	movs	r0, #85	@ 0x55
 800156a:	f7ff fd2d 	bl	8000fc8 <BMI088_read_write_byte>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	701a      	strb	r2, [r3, #0]
        buf++;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	603b      	str	r3, [r7, #0]
        len--;
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	3b01      	subs	r3, #1
 8001580:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ef      	bne.n	8001568 <BMI088_read_muli_reg+0x20>
    }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief          reading motor feedback from CAN FIFO
  * @param[in]      pointer to CAN handle
  * @retval         none
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	f107 0214 	add.w	r2, r7, #20
 80015a4:	2100      	movs	r1, #0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f005 fba8 	bl	8006cfc <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 80015b2:	f080 80d9 	bcs.w	8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
 80015b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ba:	d807      	bhi.n	80015cc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 80015bc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80015c0:	d066      	beq.n	8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 80015c2:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 80015c6:	f000 80a4 	beq.w	8001712 <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
        	    break;
        	}
        }
        default: {
            break;
 80015ca:	e0cd      	b.n	8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
            i = rx_header.StdId - CAN_G1M1_ID;                             // get motor id by taking the difference between the first motor's ID (0 indexing) and the current motor's ID
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015d6:	701a      	strb	r2, [r3, #0]
            get_motor_feedback(&motor_feedback[i], rx_data);
 80015d8:	4b69      	ldr	r3, [pc, #420]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a69      	ldr	r2, [pc, #420]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015e0:	460b      	mov	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	881a      	ldrh	r2, [r3, #0]
 80015ec:	4b64      	ldr	r3, [pc, #400]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	b210      	sxth	r0, r2
 80015f4:	4a63      	ldr	r2, [pc, #396]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80015f6:	460b      	mov	r3, r1
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	3308      	adds	r3, #8
 8001602:	4602      	mov	r2, r0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	7b3b      	ldrb	r3, [r7, #12]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	b290      	uxth	r0, r2
 800161c:	4a59      	ldr	r2, [pc, #356]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800161e:	460b      	mov	r3, r1
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	4602      	mov	r2, r0
 800162a:	801a      	strh	r2, [r3, #0]
 800162c:	7bbb      	ldrb	r3, [r7, #14]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	b21b      	sxth	r3, r3
 8001636:	4952      	ldr	r1, [pc, #328]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001638:	7809      	ldrb	r1, [r1, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	b218      	sxth	r0, r3
 800163e:	4a51      	ldr	r2, [pc, #324]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001640:	460b      	mov	r3, r1
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	3302      	adds	r3, #2
 800164c:	4602      	mov	r2, r0
 800164e:	801a      	strh	r2, [r3, #0]
 8001650:	7c3b      	ldrb	r3, [r7, #16]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	7c7b      	ldrb	r3, [r7, #17]
 8001658:	b21b      	sxth	r3, r3
 800165a:	4949      	ldr	r1, [pc, #292]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800165c:	7809      	ldrb	r1, [r1, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	b218      	sxth	r0, r3
 8001662:	4a48      	ldr	r2, [pc, #288]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	3304      	adds	r3, #4
 8001670:	4602      	mov	r2, r0
 8001672:	801a      	strh	r2, [r3, #0]
 8001674:	4b42      	ldr	r3, [pc, #264]	@ (8001780 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	7cb8      	ldrb	r0, [r7, #18]
 800167c:	4a41      	ldr	r2, [pc, #260]	@ (8001784 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800167e:	460b      	mov	r3, r1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	3306      	adds	r3, #6
 800168a:	4602      	mov	r2, r0
 800168c:	701a      	strb	r2, [r3, #0]
            break;
 800168e:	e072      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        	if(CAN_b2b_A_ID == boardID) {
 8001690:	4b3d      	ldr	r3, [pc, #244]	@ (8001788 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	f240 1201 	movw	r2, #257	@ 0x101
 8001698:	4293      	cmp	r3, r2
 800169a:	d067      	beq.n	800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
        		get_b2b_motorCtrl_feedback(&b2bMotorCtrl, rx_data);                             // add back numbering code for extra CAN input lines
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b33      	ldr	r3, [pc, #204]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016be:	805a      	strh	r2, [r3, #2]
 80016c0:	7c3b      	ldrb	r3, [r7, #16]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	7c7b      	ldrb	r3, [r7, #17]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016d0:	809a      	strh	r2, [r3, #4]
 80016d2:	7cbb      	ldrb	r3, [r7, #18]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	7cfb      	ldrb	r3, [r7, #19]
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016e2:	80da      	strh	r2, [r3, #6]
        		if (b2bMotorCtrl.motor1_Ctrl >= 3376) {
 80016e4:	4b29      	ldr	r3, [pc, #164]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ea:	f5b3 6f53 	cmp.w	r3, #3376	@ 0xd30
 80016ee:	db04      	blt.n	80016fa <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        			b2bMotorCtrl.motor1_Ctrl = 3376;
 80016f0:	4b26      	ldr	r3, [pc, #152]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016f2:	f44f 6253 	mov.w	r2, #3376	@ 0xd30
 80016f6:	801a      	strh	r2, [r3, #0]
        		break;
 80016f8:	e03a      	b.n	8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        		} else if (b2bMotorCtrl.motor1_Ctrl <= 2132) {
 80016fa:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	f640 0254 	movw	r2, #2132	@ 0x854
 8001704:	4293      	cmp	r3, r2
 8001706:	dc33      	bgt.n	8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        			b2bMotorCtrl.motor1_Ctrl = 2132;
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 800170a:	f640 0254 	movw	r2, #2132	@ 0x854
 800170e:	801a      	strh	r2, [r3, #0]
        		break;
 8001710:	e02e      	b.n	8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>
        	if(CAN_b2b_B_ID == boardID) {
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f240 1211 	movw	r2, #273	@ 0x111
 800171a:	4293      	cmp	r3, r2
 800171c:	d02a      	beq.n	8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
        		get_b2b_gyro_feedback(&b2bGyro, rx_data);                             // add back numbering code for extra CAN input lines
 800171e:	7b3b      	ldrb	r3, [r7, #12]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21a      	sxth	r2, r3
 8001724:	7b7b      	ldrb	r3, [r7, #13]
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21a      	sxth	r2, r3
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b21a      	sxth	r2, r3
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001740:	805a      	strh	r2, [r3, #2]
 8001742:	7c3b      	ldrb	r3, [r7, #16]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b21a      	sxth	r2, r3
 8001748:	7c7b      	ldrb	r3, [r7, #17]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21a      	sxth	r2, r3
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001752:	809a      	strh	r2, [r3, #4]
 8001754:	7cbb      	ldrb	r3, [r7, #18]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b21a      	sxth	r2, r3
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	b21b      	sxth	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001764:	80da      	strh	r2, [r3, #6]
        	    break;
 8001766:	e006      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
            break;
 8001768:	bf00      	nop
 800176a:	e004      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 800176c:	bf00      	nop
 800176e:	e002      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001770:	bf00      	nop
 8001772:	e000      	b.n	8001776 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        		break;
 8001774:	bf00      	nop
        }
    }
}
 8001776:	bf00      	nop
 8001778:	3730      	adds	r7, #48	@ 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200003d8 	.word	0x200003d8
 8001784:	20000288 	.word	0x20000288
 8001788:	20000058 	.word	0x20000058
 800178c:	200002f8 	.word	0x200002f8
 8001790:	20000300 	.word	0x20000300

08001794 <CAN2_cmd_motors>:
/**
  * @brief          send control information through CAN bus 2
  * @param[in]      canID of the target motor's group and the motor current values for all motors in that group
  * @retval         none
  */
void CAN2_cmd_motors(can_msg_id_e canID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	80fb      	strh	r3, [r7, #6]
 80017a6:	4603      	mov	r3, r0
 80017a8:	80bb      	strh	r3, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]
 80017ae:	4613      	mov	r3, r2
 80017b0:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    motors_tx_message.StdId = canID;
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4a20      	ldr	r2, [pc, #128]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 80017b6:	6013      	str	r3, [r2, #0]
    motors_tx_message.IDE = CAN_ID_STD;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
    motors_tx_message.RTR = CAN_RTR_DATA;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
    motors_tx_message.DLC = 0x08;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 80017c6:	2208      	movs	r2, #8
 80017c8:	611a      	str	r2, [r3, #16]
    motors_can_send_data[0] = m1 >> 8;
 80017ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ce:	121b      	asrs	r3, r3, #8
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b19      	ldr	r3, [pc, #100]	@ (800183c <CAN2_cmd_motors+0xa8>)
 80017d6:	701a      	strb	r2, [r3, #0]
    motors_can_send_data[1] = m1;
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <CAN2_cmd_motors+0xa8>)
 80017de:	705a      	strb	r2, [r3, #1]
    motors_can_send_data[2] = m2 >> 8;
 80017e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017e4:	121b      	asrs	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <CAN2_cmd_motors+0xa8>)
 80017ec:	709a      	strb	r2, [r3, #2]
    motors_can_send_data[3] = m2;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <CAN2_cmd_motors+0xa8>)
 80017f4:	70da      	strb	r2, [r3, #3]
    motors_can_send_data[4] = m3 >> 8;
 80017f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017fa:	121b      	asrs	r3, r3, #8
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <CAN2_cmd_motors+0xa8>)
 8001802:	711a      	strb	r2, [r3, #4]
    motors_can_send_data[5] = m3;
 8001804:	883b      	ldrh	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <CAN2_cmd_motors+0xa8>)
 800180a:	715a      	strb	r2, [r3, #5]
    motors_can_send_data[6] = m4 >> 8;
 800180c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001810:	121b      	asrs	r3, r3, #8
 8001812:	b21b      	sxth	r3, r3
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <CAN2_cmd_motors+0xa8>)
 8001818:	719a      	strb	r2, [r3, #6]
    motors_can_send_data[7] = m4;
 800181a:	8c3b      	ldrh	r3, [r7, #32]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <CAN2_cmd_motors+0xa8>)
 8001820:	71da      	strb	r2, [r3, #7]
    HAL_CAN_AddTxMessage(&CAN_2, &motors_tx_message, motors_can_send_data, &send_mail_box);
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <CAN2_cmd_motors+0xa8>)
 8001828:	4903      	ldr	r1, [pc, #12]	@ (8001838 <CAN2_cmd_motors+0xa4>)
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <CAN2_cmd_motors+0xac>)
 800182c:	f005 f996 	bl	8006b5c <HAL_CAN_AddTxMessage>
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}
 8001838:	200003b8 	.word	0x200003b8
 800183c:	200003d0 	.word	0x200003d0
 8001840:	20000838 	.word	0x20000838

08001844 <set_M3508_current>:
/**
  * @brief          simplification function to make communication with the motor not require the current data for all 4 motors
  * @param[in]      motor ID (1~11) and its target current (-16384 ~ 16384)
  * @retval         none
  */
void set_M3508_current(int8_t motorID, int16_t setCurrent) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af02      	add	r7, sp, #8
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setCurrent;
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	3b01      	subs	r3, #1
 800185a:	491c      	ldr	r1, [pc, #112]	@ (80018cc <set_M3508_current+0x88>)
 800185c:	88ba      	ldrh	r2, [r7, #4]
 800185e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b04      	cmp	r3, #4
 8001868:	dc02      	bgt.n	8001870 <set_M3508_current+0x2c>
 800186a:	2b00      	cmp	r3, #0
 800186c:	dc04      	bgt.n	8001878 <set_M3508_current+0x34>
		case (7):
		case (8): {             // is group 2?
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
		}
		default: {
	        break;
 800186e:	e027      	b.n	80018c0 <set_M3508_current+0x7c>
 8001870:	3b05      	subs	r3, #5
	switch(motorID) {
 8001872:	2b03      	cmp	r3, #3
 8001874:	d824      	bhi.n	80018c0 <set_M3508_current+0x7c>
 8001876:	e011      	b.n	800189c <set_M3508_current+0x58>
			CAN2_cmd_motors(CAN_GROUP1_ID, motorCtrlVal[0], motorCtrlVal[1], motorCtrlVal[2], motorCtrlVal[3]);
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <set_M3508_current+0x88>)
 800187a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <set_M3508_current+0x88>)
 8001880:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <set_M3508_current+0x88>)
 8001886:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <set_M3508_current+0x88>)
 800188c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	4603      	mov	r3, r0
 8001894:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001898:	f7ff ff7c 	bl	8001794 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <set_M3508_current+0x88>)
 800189e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <set_M3508_current+0x88>)
 80018a4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <set_M3508_current+0x88>)
 80018aa:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80018ae:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <set_M3508_current+0x88>)
 80018b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4603      	mov	r3, r0
 80018b8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80018bc:	f7ff ff6a 	bl	8001794 <CAN2_cmd_motors>
	        break;
 80018c0:	bf00      	nop
	    }
	}
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000270 	.word	0x20000270

080018d0 <set_GM6020_voltage>:
/**
  * @brief          similar to the above function, but specifically for the GM6020's voltage control mode
  * @param[in]      motor ID (5~11) and its target voltage (-25000 ~ 25000)
  * @retval         none
  */
void set_GM6020_voltage(int8_t motorID, int16_t setVoltage) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	4603      	mov	r3, r0
 80018d8:	460a      	mov	r2, r1
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	4613      	mov	r3, r2
 80018de:	80bb      	strh	r3, [r7, #4]
	motorCtrlVal[motorID-1] = setVoltage;      // -1 for 0 indexing and -4 for group 1, which cannot contain GM6020s
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	491a      	ldr	r1, [pc, #104]	@ (8001950 <set_GM6020_voltage+0x80>)
 80018e8:	88ba      	ldrh	r2, [r7, #4]
 80018ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	switch(motorID) {
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	dc02      	bgt.n	80018fc <set_GM6020_voltage+0x2c>
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	da04      	bge.n	8001904 <set_GM6020_voltage+0x34>
		case (10):
		case (11): {          // is group 3?
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
		}
		default: {
	        break;
 80018fa:	e024      	b.n	8001946 <set_GM6020_voltage+0x76>
 80018fc:	3b09      	subs	r3, #9
	switch(motorID) {
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d821      	bhi.n	8001946 <set_GM6020_voltage+0x76>
 8001902:	e011      	b.n	8001928 <set_GM6020_voltage+0x58>
			CAN2_cmd_motors(CAN_GROUP2_ID, motorCtrlVal[4], motorCtrlVal[5], motorCtrlVal[6], motorCtrlVal[7]);
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001906:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <set_GM6020_voltage+0x80>)
 800190c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001912:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001918:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4603      	mov	r3, r0
 8001920:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8001924:	f7ff ff36 	bl	8001794 <CAN2_cmd_motors>
			CAN2_cmd_motors(CAN_GROUP3_ID, motorCtrlVal[8], motorCtrlVal[9], motorCtrlVal[10], 0);
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <set_GM6020_voltage+0x80>)
 800192a:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001930:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <set_GM6020_voltage+0x80>)
 8001936:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800193a:	2000      	movs	r0, #0
 800193c:	9000      	str	r0, [sp, #0]
 800193e:	f240 20ff 	movw	r0, #767	@ 0x2ff
 8001942:	f7ff ff27 	bl	8001794 <CAN2_cmd_motors>
	        break;
 8001946:	bf00      	nop
	    }
	}
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000270 	.word	0x20000270

08001954 <calc_current2RPM_PID>:
	        break;
	    }
	}
}

int32_t calc_current2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001954:	b490      	push	{r4, r7}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	eef0 6a40 	vmov.f32	s13, s0
 8001962:	eeb0 7a60 	vmov.f32	s14, s1
 8001966:	eef0 7a41 	vmov.f32	s15, s2
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	4613      	mov	r3, r2
 800196e:	81bb      	strh	r3, [r7, #12]
 8001970:	edc7 6a00 	vstr	s13, [r7]
 8001974:	ed87 7a01 	vstr	s14, [r7, #4]
 8001978:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_current_val = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	3b01      	subs	r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001988:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800198c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ab8 <calc_current2RPM_PID+0x164>)
 800198e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001992:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001996:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800199a:	4c48      	ldr	r4, [pc, #288]	@ (8001abc <calc_current2RPM_PID+0x168>)
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4423      	add	r3, r4
 80019a6:	3302      	adds	r3, #2
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	1ac2      	subs	r2, r0, r3
 80019ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019b2:	440a      	add	r2, r1
 80019b4:	4940      	ldr	r1, [pc, #256]	@ (8001ab8 <calc_current2RPM_PID+0x164>)
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 80019ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019be:	4a40      	ldr	r2, [pc, #256]	@ (8001ac0 <calc_current2RPM_PID+0x16c>)
 80019c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80019c8:	483c      	ldr	r0, [pc, #240]	@ (8001abc <calc_current2RPM_PID+0x168>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4403      	add	r3, r0
 80019d4:	3302      	adds	r3, #2
 80019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019da:	461a      	mov	r2, r3
 80019dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019e0:	1a8a      	subs	r2, r1, r2
 80019e2:	4938      	ldr	r1, [pc, #224]	@ (8001ac4 <calc_current2RPM_PID+0x170>)
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 80019e8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80019ec:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80019f0:	4832      	ldr	r0, [pc, #200]	@ (8001abc <calc_current2RPM_PID+0x168>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4403      	add	r3, r0
 80019fc:	3302      	adds	r3, #2
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	461a      	mov	r2, r3
 8001a04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a08:	1a8a      	subs	r2, r1, r2
 8001a0a:	492f      	ldr	r1, [pc, #188]	@ (8001ac8 <calc_current2RPM_PID+0x174>)
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001a10:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001a14:	4929      	ldr	r1, [pc, #164]	@ (8001abc <calc_current2RPM_PID+0x168>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	440b      	add	r3, r1
 8001a20:	3302      	adds	r3, #2
 8001a22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <calc_current2RPM_PID+0x16c>)
 8001a2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_current_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001a32:	ed97 7a00 	vldr	s14, [r7]
 8001a36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a3a:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <calc_current2RPM_PID+0x174>)
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a54:	4a18      	ldr	r2, [pc, #96]	@ (8001ab8 <calc_current2RPM_PID+0x164>)
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a72:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <calc_current2RPM_PID+0x170>)
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	ee17 3a90 	vmov	r3, s15
 8001a90:	617b      	str	r3, [r7, #20]
	//apply power limit
	//if (ID == 6) {sendB2bData(CAN_b2b_B_gyro_ID, errRPM[5], 0, 0, 0);}
	if (return_current_val > 16384) {return_current_val = 16384;}
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a98:	dd02      	ble.n	8001aa0 <calc_current2RPM_PID+0x14c>
 8001a9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a9e:	617b      	str	r3, [r7, #20]
	if (return_current_val < -16384) {return_current_val = -16384;}
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001aa6:	da01      	bge.n	8001aac <calc_current2RPM_PID+0x158>
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <calc_current2RPM_PID+0x178>)
 8001aaa:	617b      	str	r3, [r7, #20]
	return return_current_val;
 8001aac:	697b      	ldr	r3, [r7, #20]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc90      	pop	{r4, r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000360 	.word	0x20000360
 8001abc:	20000288 	.word	0x20000288
 8001ac0:	20000308 	.word	0x20000308
 8001ac4:	20000334 	.word	0x20000334
 8001ac8:	2000038c 	.word	0x2000038c
 8001acc:	ffffc000 	.word	0xffffc000

08001ad0 <calc_voltage2RPM_PID>:
	if (return_current_val > 10000) {return_current_val = 10000;}
	if (return_current_val < -10000) {return_current_val = -10000;}
	return return_current_val;
}

int32_t calc_voltage2RPM_PID(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001ad0:	b490      	push	{r4, r7}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460a      	mov	r2, r1
 8001ada:	eef0 6a40 	vmov.f32	s13, s0
 8001ade:	eeb0 7a60 	vmov.f32	s14, s1
 8001ae2:	eef0 7a41 	vmov.f32	s15, s2
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	81bb      	strh	r3, [r7, #12]
 8001aec:	edc7 6a00 	vstr	s13, [r7]
 8001af0:	ed87 7a01 	vstr	s14, [r7, #4]
 8001af4:	edc7 7a02 	vstr	s15, [r7, #8]
	int32_t return_voltage_val = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
	int8_t ID = motorID - 1;                                                                // god forbid 0 indexing
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	74fb      	strb	r3, [r7, #19]
	iRPM[ID] += RPMtarget - motor_feedback[ID].speed_rpm;      // add to integral term
 8001b04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b08:	4a53      	ldr	r2, [pc, #332]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001b0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b0e:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8001b12:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b16:	4c51      	ldr	r4, [pc, #324]	@ (8001c5c <calc_voltage2RPM_PID+0x18c>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4423      	add	r3, r4
 8001b22:	3302      	adds	r3, #2
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	1ac2      	subs	r2, r0, r3
 8001b2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b2e:	440a      	add	r2, r1
 8001b30:	4949      	ldr	r1, [pc, #292]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	dRPM[ID] = lastRPM[ID] - motor_feedback[ID].speed_rpm;       // update derivative term
 8001b36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b3a:	4a49      	ldr	r2, [pc, #292]	@ (8001c60 <calc_voltage2RPM_PID+0x190>)
 8001b3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b40:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b44:	4845      	ldr	r0, [pc, #276]	@ (8001c5c <calc_voltage2RPM_PID+0x18c>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4403      	add	r3, r0
 8001b50:	3302      	adds	r3, #2
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	461a      	mov	r2, r3
 8001b58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b5c:	1a8a      	subs	r2, r1, r2
 8001b5e:	4941      	ldr	r1, [pc, #260]	@ (8001c64 <calc_voltage2RPM_PID+0x194>)
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	errRPM[ID] = RPMtarget - motor_feedback[ID].speed_rpm;     // update proportional term
 8001b64:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b68:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b6c:	483b      	ldr	r0, [pc, #236]	@ (8001c5c <calc_voltage2RPM_PID+0x18c>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4403      	add	r3, r0
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b84:	1a8a      	subs	r2, r1, r2
 8001b86:	4938      	ldr	r1, [pc, #224]	@ (8001c68 <calc_voltage2RPM_PID+0x198>)
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// usart_printf("%d %d\r\n", getMotorRPM(5), 0);
	lastRPM[ID] = motor_feedback[ID].speed_rpm;
 8001b8c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001b90:	4932      	ldr	r1, [pc, #200]	@ (8001c5c <calc_voltage2RPM_PID+0x18c>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ba2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c60 <calc_voltage2RPM_PID+0x190>)
 8001baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (iRPM[ID] >= 3400) {iRPM[ID] = 2600;}
 8001bae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bb2:	4a29      	ldr	r2, [pc, #164]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	dd06      	ble.n	8001bce <calc_voltage2RPM_PID+0xfe>
 8001bc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bc4:	4a24      	ldr	r2, [pc, #144]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001bc6:	f640 2128 	movw	r1, #2600	@ 0xa28
 8001bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return_voltage_val = (preset.kP * errRPM[ID]) + (preset.kI * iRPM[ID]) + (preset.kD * dRPM[ID]);
 8001bce:	ed97 7a00 	vldr	s14, [r7]
 8001bd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bd6:	4a24      	ldr	r2, [pc, #144]	@ (8001c68 <calc_voltage2RPM_PID+0x198>)
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be8:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bf0:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <calc_voltage2RPM_PID+0x188>)
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c06:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c0e:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <calc_voltage2RPM_PID+0x194>)
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c28:	ee17 3a90 	vmov	r3, s15
 8001c2c:	617b      	str	r3, [r7, #20]
	//apply power limit
	if (return_voltage_val > 25000) {return_voltage_val = 25000;}
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001c34:	4293      	cmp	r3, r2
 8001c36:	dd02      	ble.n	8001c3e <calc_voltage2RPM_PID+0x16e>
 8001c38:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001c3c:	617b      	str	r3, [r7, #20]
	if (return_voltage_val < -25000) {return_voltage_val = -25000;}
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <calc_voltage2RPM_PID+0x19c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	da01      	bge.n	8001c4a <calc_voltage2RPM_PID+0x17a>
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <calc_voltage2RPM_PID+0x19c>)
 8001c48:	617b      	str	r3, [r7, #20]

	return return_voltage_val;
 8001c4a:	697b      	ldr	r3, [r7, #20]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc90      	pop	{r4, r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000360 	.word	0x20000360
 8001c5c:	20000288 	.word	0x20000288
 8001c60:	20000308 	.word	0x20000308
 8001c64:	20000334 	.word	0x20000334
 8001c68:	2000038c 	.word	0x2000038c
 8001c6c:	ffff9e58 	.word	0xffff9e58

08001c70 <setM3508RPM>:
	return return_voltage_val;
}

// DO NOT use current ctrl and voltage ctrl concurrently for GM6020

void setM3508RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	eef0 6a40 	vmov.f32	s13, s0
 8001c7e:	eeb0 7a60 	vmov.f32	s14, s1
 8001c82:	eef0 7a41 	vmov.f32	s15, s2
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	81bb      	strh	r3, [r7, #12]
 8001c8c:	edc7 6a00 	vstr	s13, [r7]
 8001c90:	ed87 7a01 	vstr	s14, [r7, #4]
 8001c94:	edc7 7a02 	vstr	s15, [r7, #8]
	set_M3508_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
 8001c98:	edd7 6a00 	vldr	s13, [r7]
 8001c9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cac:	eeb0 0a66 	vmov.f32	s0, s13
 8001cb0:	eef0 0a47 	vmov.f32	s1, s14
 8001cb4:	eeb0 1a67 	vmov.f32	s2, s15
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fe4a 	bl	8001954 <calc_current2RPM_PID>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fdba 	bl	8001844 <set_M3508_current>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <setGM6020voltageRPM>:

void setGM6020currentRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_GM6020_current(motorID, calc_current2RPM_PID(motorID, RPMtarget, preset));
}

void setGM6020voltageRPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	eef0 6a40 	vmov.f32	s13, s0
 8001ce6:	eeb0 7a60 	vmov.f32	s14, s1
 8001cea:	eef0 7a41 	vmov.f32	s15, s2
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	81bb      	strh	r3, [r7, #12]
 8001cf4:	edc7 6a00 	vstr	s13, [r7]
 8001cf8:	ed87 7a01 	vstr	s14, [r7, #4]
 8001cfc:	edc7 7a02 	vstr	s15, [r7, #8]
	set_GM6020_voltage(motorID, calc_voltage2RPM_PID(motorID, RPMtarget, preset));
 8001d00:	edd7 6a00 	vldr	s13, [r7]
 8001d04:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d14:	eeb0 0a66 	vmov.f32	s0, s13
 8001d18:	eef0 0a47 	vmov.f32	s1, s14
 8001d1c:	eeb0 1a67 	vmov.f32	s2, s15
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fed4 	bl	8001ad0 <calc_voltage2RPM_PID>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fdcc 	bl	80018d0 <set_GM6020_voltage>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <getMotorPosition>:

void setM2006RPM(int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
	set_M3508_current(motorID, calc_M2006_current2RPM_PID(motorID, RPMtarget, preset));
}

uint16_t getMotorPosition(int8_t motorID) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	return motor_feedback[motorID-1].motor_position;
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	1e5a      	subs	r2, r3, #1
 8001d50:	4906      	ldr	r1, [pc, #24]	@ (8001d6c <getMotorPosition+0x2c>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	440b      	add	r3, r1
 8001d5c:	881b      	ldrh	r3, [r3, #0]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000288 	.word	0x20000288

08001d70 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d78:	4905      	ldr	r1, [pc, #20]	@ (8001d90 <usart_Init+0x20>)
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <usart_Init+0x24>)
 8001d7c:	f009 fa44 	bl	800b208 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d84:	4904      	ldr	r1, [pc, #16]	@ (8001d98 <usart_Init+0x28>)
 8001d86:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <usart_Init+0x2c>)
 8001d88:	f009 fa3e 	bl	800b208 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200003dc 	.word	0x200003dc
 8001d94:	20000c54 	.word	0x20000c54
 8001d98:	200004dc 	.word	0x200004dc
 8001d9c:	20000ce4 	.word	0x20000ce4

08001da0 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8001da0:	b40f      	push	{r0, r1, r2, r3}
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4a0c      	ldr	r2, [pc, #48]	@ (8001ddc <usart_printf+0x3c>)
 8001dac:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8001dae:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <usart_printf+0x3c>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	480a      	ldr	r0, [pc, #40]	@ (8001de0 <usart_printf+0x40>)
 8001db6:	f00e f867 	bl	800fe88 <vsiprintf>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <usart_printf+0x44>)
 8001dc0:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <usart_printf+0x44>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4905      	ldr	r1, [pc, #20]	@ (8001de0 <usart_printf+0x40>)
 8001dca:	4807      	ldr	r0, [pc, #28]	@ (8001de8 <usart_printf+0x48>)
 8001dcc:	f009 f9ac 	bl	800b128 <HAL_UART_Transmit_DMA>
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dd8:	b004      	add	sp, #16
 8001dda:	4770      	bx	lr
 8001ddc:	200006a8 	.word	0x200006a8
 8001de0:	200006ac 	.word	0x200006ac
 8001de4:	200007ac 	.word	0x200007ac
 8001de8:	20000c54 	.word	0x20000c54

08001dec <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart6) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4aab      	ldr	r2, [pc, #684]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x2bc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	f040 8228 	bne.w	8002252 <HAL_UARTEx_RxEventCallback+0x466>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e06:	49a9      	ldr	r1, [pc, #676]	@ (80020ac <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001e08:	48a7      	ldr	r0, [pc, #668]	@ (80020a8 <HAL_UARTEx_RxEventCallback+0x2bc>)
 8001e0a:	f009 f9fd 	bl	800b208 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[6] << 8) | RxBuff_2[5];
 8001e0e:	4ba7      	ldr	r3, [pc, #668]	@ (80020ac <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001e10:	799b      	ldrb	r3, [r3, #6]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	4ba5      	ldr	r3, [pc, #660]	@ (80020ac <HAL_UARTEx_RxEventCallback+0x2c0>)
 8001e18:	795b      	ldrb	r3, [r3, #5]
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	81fb      	strh	r3, [r7, #14]
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		//usart_printf("test");
		switch (RxBuff16) {
 8001e22:	89fb      	ldrh	r3, [r7, #14]
 8001e24:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8001e28:	f280 8212 	bge.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001e2c:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8001e30:	f300 8208 	bgt.w	8002244 <HAL_UARTEx_RxEventCallback+0x458>
 8001e34:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8001e38:	f300 820a 	bgt.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001e3c:	f240 3202 	movw	r2, #770	@ 0x302
 8001e40:	4293      	cmp	r3, r2
 8001e42:	f280 80c6 	bge.w	8001fd2 <HAL_UARTEx_RxEventCallback+0x1e6>
 8001e46:	f240 3201 	movw	r2, #769	@ 0x301
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	f000 80bb 	beq.w	8001fc6 <HAL_UARTEx_RxEventCallback+0x1da>
 8001e50:	f240 3201 	movw	r2, #769	@ 0x301
 8001e54:	4293      	cmp	r3, r2
 8001e56:	f300 81fb 	bgt.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001e5a:	f240 220e 	movw	r2, #526	@ 0x20e
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	f300 81f6 	bgt.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e68:	dc1f      	bgt.n	8001eaa <HAL_UARTEx_RxEventCallback+0xbe>
 8001e6a:	f240 1205 	movw	r2, #261	@ 0x105
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d05b      	beq.n	8001f2a <HAL_UARTEx_RxEventCallback+0x13e>
 8001e72:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001e76:	f280 81eb 	bge.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e7e:	d04e      	beq.n	8001f1e <HAL_UARTEx_RxEventCallback+0x132>
 8001e80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e84:	f300 81e4 	bgt.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001e88:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001e8c:	f300 81e0 	bgt.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e94:	dc3e      	bgt.n	8001f14 <HAL_UARTEx_RxEventCallback+0x128>
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d036      	beq.n	8001f08 <HAL_UARTEx_RxEventCallback+0x11c>
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	f300 81d8 	bgt.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d027      	beq.n	8001ef4 <HAL_UARTEx_RxEventCallback+0x108>
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d02b      	beq.n	8001f00 <HAL_UARTEx_RxEventCallback+0x114>
		    	//memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
		    }

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 8001ea8:	e1d2      	b.n	8002250 <HAL_UARTEx_RxEventCallback+0x464>
		switch (RxBuff16) {
 8001eaa:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001eae:	2b0d      	cmp	r3, #13
 8001eb0:	f200 81ce 	bhi.w	8002250 <HAL_UARTEx_RxEventCallback+0x464>
 8001eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ebc <HAL_UARTEx_RxEventCallback+0xd0>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f43 	.word	0x08001f43
 8001ec4:	08001f4f 	.word	0x08001f4f
 8001ec8:	08001f5b 	.word	0x08001f5b
 8001ecc:	08001f67 	.word	0x08001f67
 8001ed0:	08001f67 	.word	0x08001f67
 8001ed4:	08001f6f 	.word	0x08001f6f
 8001ed8:	08001f7b 	.word	0x08001f7b
 8001edc:	08001f87 	.word	0x08001f87
 8001ee0:	08001f91 	.word	0x08001f91
 8001ee4:	08001f9d 	.word	0x08001f9d
 8001ee8:	08001fa9 	.word	0x08001fa9
 8001eec:	08001fb5 	.word	0x08001fb5
 8001ef0:	08001fbf 	.word	0x08001fbf
		    	memcpy(&game_status, (RxBuff_2 + frame_header_offset), game_status_len);
 8001ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001ef6:	220b      	movs	r2, #11
 8001ef8:	4619      	mov	r1, r3
 8001efa:	486e      	ldr	r0, [pc, #440]	@ (80020b4 <HAL_UARTEx_RxEventCallback+0x2c8>)
 8001efc:	f00e f85d 	bl	800ffba <memcpy>
		    	memcpy(&game_result, (RxBuff_2 + frame_header_offset), game_result_len);
 8001f00:	4b6b      	ldr	r3, [pc, #428]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	4b6c      	ldr	r3, [pc, #432]	@ (80020b8 <HAL_UARTEx_RxEventCallback+0x2cc>)
 8001f06:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 8001f08:	4b69      	ldr	r3, [pc, #420]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f0a:	220d      	movs	r2, #13
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	486b      	ldr	r0, [pc, #428]	@ (80020bc <HAL_UARTEx_RxEventCallback+0x2d0>)
 8001f10:	f00e f853 	bl	800ffba <memcpy>
		    	memcpy(&ext_supply_projectile_action, (RxBuff_2 + frame_header_offset), ext_supply_projectile_action_len);
 8001f14:	4b66      	ldr	r3, [pc, #408]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b69      	ldr	r3, [pc, #420]	@ (80020c0 <HAL_UARTEx_RxEventCallback+0x2d4>)
 8001f1c:	601a      	str	r2, [r3, #0]
		    	memcpy(&referee_warning, (RxBuff_2 + frame_header_offset), referee_warning_len);
 8001f1e:	4a64      	ldr	r2, [pc, #400]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f20:	4b68      	ldr	r3, [pc, #416]	@ (80020c4 <HAL_UARTEx_RxEventCallback+0x2d8>)
 8001f22:	8811      	ldrh	r1, [r2, #0]
 8001f24:	7892      	ldrb	r2, [r2, #2]
 8001f26:	8019      	strh	r1, [r3, #0]
 8001f28:	709a      	strb	r2, [r3, #2]
		    	memcpy(&dart_info, (RxBuff_2 + frame_header_offset), dart_info_len);
 8001f2a:	4b61      	ldr	r3, [pc, #388]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4865      	ldr	r0, [pc, #404]	@ (80020c8 <HAL_UARTEx_RxEventCallback+0x2dc>)
 8001f32:	f00e f842 	bl	800ffba <memcpy>
		    	memcpy(&robot_status, (RxBuff_2 + frame_header_offset), robot_status_len);
 8001f36:	4b5e      	ldr	r3, [pc, #376]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f38:	220d      	movs	r2, #13
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	485f      	ldr	r0, [pc, #380]	@ (80020bc <HAL_UARTEx_RxEventCallback+0x2d0>)
 8001f3e:	f00e f83c 	bl	800ffba <memcpy>
		    	memcpy(&power_heat_data, (RxBuff_2 + frame_header_offset), power_heat_data_len);
 8001f42:	4b5b      	ldr	r3, [pc, #364]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f44:	2210      	movs	r2, #16
 8001f46:	4619      	mov	r1, r3
 8001f48:	4860      	ldr	r0, [pc, #384]	@ (80020cc <HAL_UARTEx_RxEventCallback+0x2e0>)
 8001f4a:	f00e f836 	bl	800ffba <memcpy>
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_pos_len);
 8001f4e:	4b58      	ldr	r3, [pc, #352]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f50:	2210      	movs	r2, #16
 8001f52:	4619      	mov	r1, r3
 8001f54:	485e      	ldr	r0, [pc, #376]	@ (80020d0 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8001f56:	f00e f830 	bl	800ffba <memcpy>
		    	memcpy(&buffs, (RxBuff_2 + frame_header_offset), buff_len);
 8001f5a:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f5c:	2206      	movs	r2, #6
 8001f5e:	4619      	mov	r1, r3
 8001f60:	485c      	ldr	r0, [pc, #368]	@ (80020d4 <HAL_UARTEx_RxEventCallback+0x2e8>)
 8001f62:	f00e f82a 	bl	800ffba <memcpy>
		    	memcpy(&damage_data, (RxBuff_2 + frame_header_offset), damage_data_len);
 8001f66:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <HAL_UARTEx_RxEventCallback+0x2ec>)
 8001f6c:	701a      	strb	r2, [r3, #0]
		    	memcpy(&shoot_data, (RxBuff_2 + frame_header_offset), shoot_data_len);
 8001f6e:	4b50      	ldr	r3, [pc, #320]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	4619      	mov	r1, r3
 8001f74:	4859      	ldr	r0, [pc, #356]	@ (80020dc <HAL_UARTEx_RxEventCallback+0x2f0>)
 8001f76:	f00e f820 	bl	800ffba <memcpy>
		    	memcpy(&projectile_allowance, (RxBuff_2 + frame_header_offset), projectile_allowance_len);
 8001f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f7c:	2206      	movs	r2, #6
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4857      	ldr	r0, [pc, #348]	@ (80020e0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8001f82:	f00e f81a 	bl	800ffba <memcpy>
		    	memcpy(&rfid_status, (RxBuff_2 + frame_header_offset), rfid_status_len);
 8001f86:	4b4a      	ldr	r3, [pc, #296]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b55      	ldr	r3, [pc, #340]	@ (80020e4 <HAL_UARTEx_RxEventCallback+0x2f8>)
 8001f8e:	601a      	str	r2, [r3, #0]
		    	memcpy(&dart_client_cmd, (RxBuff_2 + frame_header_offset), dart_client_cmd_len);
 8001f90:	4b47      	ldr	r3, [pc, #284]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f92:	2206      	movs	r2, #6
 8001f94:	4619      	mov	r1, r3
 8001f96:	4854      	ldr	r0, [pc, #336]	@ (80020e8 <HAL_UARTEx_RxEventCallback+0x2fc>)
 8001f98:	f00e f80f 	bl	800ffba <memcpy>
		    	memcpy(&robot_positions, (RxBuff_2 + frame_header_offset), ground_robot_position_len);
 8001f9c:	4b44      	ldr	r3, [pc, #272]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001f9e:	2228      	movs	r2, #40	@ 0x28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4852      	ldr	r0, [pc, #328]	@ (80020ec <HAL_UARTEx_RxEventCallback+0x300>)
 8001fa4:	f00e f809 	bl	800ffba <memcpy>
		    	memcpy(&radar_mark_data, (RxBuff_2 + frame_header_offset), radar_mark_data_len);
 8001fa8:	4a41      	ldr	r2, [pc, #260]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001faa:	4b51      	ldr	r3, [pc, #324]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0x304>)
 8001fac:	6810      	ldr	r0, [r2, #0]
 8001fae:	6018      	str	r0, [r3, #0]
 8001fb0:	8892      	ldrh	r2, [r2, #4]
 8001fb2:	809a      	strh	r2, [r3, #4]
		    	memcpy(&sentry_info, (RxBuff_2 + frame_header_offset), sentry_info_len);
 8001fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b4e      	ldr	r3, [pc, #312]	@ (80020f4 <HAL_UARTEx_RxEventCallback+0x308>)
 8001fbc:	601a      	str	r2, [r3, #0]
		    	memcpy(&radar_info, (RxBuff_2 + frame_header_offset), radar_info_len);
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	4b4d      	ldr	r3, [pc, #308]	@ (80020f8 <HAL_UARTEx_RxEventCallback+0x30c>)
 8001fc4:	701a      	strb	r2, [r3, #0]
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), robot_interaction_data_len);
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001fc8:	2280      	movs	r2, #128	@ 0x80
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4840      	ldr	r0, [pc, #256]	@ (80020d0 <HAL_UARTEx_RxEventCallback+0x2e4>)
 8001fce:	f00d fff4 	bl	800ffba <memcpy>
		    	memcpy(&pc_control, (RxBuff_2 + frame_header_offset), pc_control_len);
 8001fd2:	4b37      	ldr	r3, [pc, #220]	@ (80020b0 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001fd4:	220c      	movs	r2, #12
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4848      	ldr	r0, [pc, #288]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8001fda:	f00d ffee 	bl	800ffba <memcpy>
		        if(pc_control.keyboard_values_1 > 127){
 8001fde:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8001fe0:	7a1b      	ldrb	r3, [r3, #8]
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	da09      	bge.n	8001ffc <HAL_UARTEx_RxEventCallback+0x210>
		        	pc_control.e = 1;
 8001fe8:	4b44      	ldr	r3, [pc, #272]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	74da      	strb	r2, [r3, #19]
		        	pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 128;
 8001fee:	4b43      	ldr	r3, [pc, #268]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8001ff0:	7a1b      	ldrb	r3, [r3, #8]
 8001ff2:	3b80      	subs	r3, #128	@ 0x80
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b41      	ldr	r3, [pc, #260]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8001ff8:	721a      	strb	r2, [r3, #8]
 8001ffa:	e002      	b.n	8002002 <HAL_UARTEx_RxEventCallback+0x216>
		        	pc_control.e = 0;
 8001ffc:	4b3f      	ldr	r3, [pc, #252]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	74da      	strb	r2, [r3, #19]
		        if(pc_control.keyboard_values_1>63){
 8002002:	4b3e      	ldr	r3, [pc, #248]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002004:	7a1b      	ldrb	r3, [r3, #8]
 8002006:	2b3f      	cmp	r3, #63	@ 0x3f
 8002008:	d909      	bls.n	800201e <HAL_UARTEx_RxEventCallback+0x232>
		        	pc_control.q = 1;
 800200a:	4b3c      	ldr	r3, [pc, #240]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 800200c:	2201      	movs	r2, #1
 800200e:	749a      	strb	r2, [r3, #18]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 64;
 8002010:	4b3a      	ldr	r3, [pc, #232]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002012:	7a1b      	ldrb	r3, [r3, #8]
 8002014:	3b40      	subs	r3, #64	@ 0x40
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b38      	ldr	r3, [pc, #224]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 800201a:	721a      	strb	r2, [r3, #8]
 800201c:	e002      	b.n	8002024 <HAL_UARTEx_RxEventCallback+0x238>
		        	pc_control.q = 0;
 800201e:	4b37      	ldr	r3, [pc, #220]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002020:	2200      	movs	r2, #0
 8002022:	749a      	strb	r2, [r3, #18]
		        if(pc_control.keyboard_values_1>31){
 8002024:	4b35      	ldr	r3, [pc, #212]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002026:	7a1b      	ldrb	r3, [r3, #8]
 8002028:	2b1f      	cmp	r3, #31
 800202a:	d909      	bls.n	8002040 <HAL_UARTEx_RxEventCallback+0x254>
		        	pc_control.ctrl = 1;
 800202c:	4b33      	ldr	r3, [pc, #204]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 800202e:	2201      	movs	r2, #1
 8002030:	745a      	strb	r2, [r3, #17]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 32;
 8002032:	4b32      	ldr	r3, [pc, #200]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002034:	7a1b      	ldrb	r3, [r3, #8]
 8002036:	3b20      	subs	r3, #32
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b30      	ldr	r3, [pc, #192]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 800203c:	721a      	strb	r2, [r3, #8]
 800203e:	e002      	b.n	8002046 <HAL_UARTEx_RxEventCallback+0x25a>
		        	pc_control.ctrl = 0;
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002042:	2200      	movs	r2, #0
 8002044:	745a      	strb	r2, [r3, #17]
		        if(pc_control.keyboard_values_1>15){
 8002046:	4b2d      	ldr	r3, [pc, #180]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002048:	7a1b      	ldrb	r3, [r3, #8]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	d909      	bls.n	8002062 <HAL_UARTEx_RxEventCallback+0x276>
		        	pc_control.shift = 1;
 800204e:	4b2b      	ldr	r3, [pc, #172]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002050:	2201      	movs	r2, #1
 8002052:	741a      	strb	r2, [r3, #16]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 16;
 8002054:	4b29      	ldr	r3, [pc, #164]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002056:	7a1b      	ldrb	r3, [r3, #8]
 8002058:	3b10      	subs	r3, #16
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b27      	ldr	r3, [pc, #156]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 800205e:	721a      	strb	r2, [r3, #8]
 8002060:	e002      	b.n	8002068 <HAL_UARTEx_RxEventCallback+0x27c>
		        	pc_control.shift = 0;
 8002062:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002064:	2200      	movs	r2, #0
 8002066:	741a      	strb	r2, [r3, #16]
		        if(pc_control.keyboard_values_1>7){
 8002068:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 800206a:	7a1b      	ldrb	r3, [r3, #8]
 800206c:	2b07      	cmp	r3, #7
 800206e:	d909      	bls.n	8002084 <HAL_UARTEx_RxEventCallback+0x298>
		        	pc_control.d = 1;
 8002070:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002072:	2201      	movs	r2, #1
 8002074:	73da      	strb	r2, [r3, #15]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 8;
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002078:	7a1b      	ldrb	r3, [r3, #8]
 800207a:	3b08      	subs	r3, #8
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002080:	721a      	strb	r2, [r3, #8]
 8002082:	e002      	b.n	800208a <HAL_UARTEx_RxEventCallback+0x29e>
		        	pc_control.d = 0;
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002086:	2200      	movs	r2, #0
 8002088:	73da      	strb	r2, [r3, #15]
		        if(pc_control.keyboard_values_1>3){
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 800208c:	7a1b      	ldrb	r3, [r3, #8]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d936      	bls.n	8002100 <HAL_UARTEx_RxEventCallback+0x314>
		        	pc_control.a = 1;
 8002092:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 8002094:	2201      	movs	r2, #1
 8002096:	739a      	strb	r2, [r3, #14]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 4;
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 800209a:	7a1b      	ldrb	r3, [r3, #8]
 800209c:	3b04      	subs	r3, #4
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x310>)
 80020a2:	721a      	strb	r2, [r3, #8]
 80020a4:	e02f      	b.n	8002106 <HAL_UARTEx_RxEventCallback+0x31a>
 80020a6:	bf00      	nop
 80020a8:	20000ce4 	.word	0x20000ce4
 80020ac:	200004dc 	.word	0x200004dc
 80020b0:	200004e3 	.word	0x200004e3
 80020b4:	200005e0 	.word	0x200005e0
 80020b8:	200005f0 	.word	0x200005f0
 80020bc:	20000600 	.word	0x20000600
 80020c0:	200005f4 	.word	0x200005f4
 80020c4:	200005f8 	.word	0x200005f8
 80020c8:	200005fc 	.word	0x200005fc
 80020cc:	20000610 	.word	0x20000610
 80020d0:	20000620 	.word	0x20000620
 80020d4:	2000062c 	.word	0x2000062c
 80020d8:	20000634 	.word	0x20000634
 80020dc:	20000638 	.word	0x20000638
 80020e0:	20000640 	.word	0x20000640
 80020e4:	20000648 	.word	0x20000648
 80020e8:	2000064c 	.word	0x2000064c
 80020ec:	20000654 	.word	0x20000654
 80020f0:	2000067c 	.word	0x2000067c
 80020f4:	20000684 	.word	0x20000684
 80020f8:	20000688 	.word	0x20000688
 80020fc:	2000068c 	.word	0x2000068c
		        	pc_control.a = 0;
 8002100:	4b56      	ldr	r3, [pc, #344]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002102:	2200      	movs	r2, #0
 8002104:	739a      	strb	r2, [r3, #14]
		        if(pc_control.keyboard_values_1>1){
 8002106:	4b55      	ldr	r3, [pc, #340]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002108:	7a1b      	ldrb	r3, [r3, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d909      	bls.n	8002122 <HAL_UARTEx_RxEventCallback+0x336>
		        	pc_control.s = 1;
 800210e:	4b53      	ldr	r3, [pc, #332]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002110:	2201      	movs	r2, #1
 8002112:	735a      	strb	r2, [r3, #13]
		            pc_control.keyboard_values_1= pc_control.keyboard_values_1 - 2;
 8002114:	4b51      	ldr	r3, [pc, #324]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002116:	7a1b      	ldrb	r3, [r3, #8]
 8002118:	3b02      	subs	r3, #2
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b4f      	ldr	r3, [pc, #316]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800211e:	721a      	strb	r2, [r3, #8]
 8002120:	e002      	b.n	8002128 <HAL_UARTEx_RxEventCallback+0x33c>
		        	pc_control.s = 0;
 8002122:	4b4e      	ldr	r3, [pc, #312]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002124:	2200      	movs	r2, #0
 8002126:	735a      	strb	r2, [r3, #13]
		        if(pc_control.keyboard_values_1 > 0){
 8002128:	4b4c      	ldr	r3, [pc, #304]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800212a:	7a1b      	ldrb	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_UARTEx_RxEventCallback+0x34c>
		        	pc_control.w = 1;
 8002130:	4b4a      	ldr	r3, [pc, #296]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002132:	2201      	movs	r2, #1
 8002134:	731a      	strb	r2, [r3, #12]
 8002136:	e002      	b.n	800213e <HAL_UARTEx_RxEventCallback+0x352>
		        	pc_control.w = 0;
 8002138:	4b48      	ldr	r3, [pc, #288]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800213a:	2200      	movs	r2, #0
 800213c:	731a      	strb	r2, [r3, #12]
		        if(pc_control.keyboard_values_2 > 127){
 800213e:	4b47      	ldr	r3, [pc, #284]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002140:	7a5b      	ldrb	r3, [r3, #9]
 8002142:	b25b      	sxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	da09      	bge.n	800215c <HAL_UARTEx_RxEventCallback+0x370>
					pc_control.b = 1;
 8002148:	4b44      	ldr	r3, [pc, #272]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800214a:	2201      	movs	r2, #1
 800214c:	76da      	strb	r2, [r3, #27]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 128;
 800214e:	4b43      	ldr	r3, [pc, #268]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002150:	7a5b      	ldrb	r3, [r3, #9]
 8002152:	3b80      	subs	r3, #128	@ 0x80
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b41      	ldr	r3, [pc, #260]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002158:	725a      	strb	r2, [r3, #9]
 800215a:	e002      	b.n	8002162 <HAL_UARTEx_RxEventCallback+0x376>
					pc_control.b = 0;
 800215c:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800215e:	2200      	movs	r2, #0
 8002160:	76da      	strb	r2, [r3, #27]
				if(pc_control.keyboard_values_2>63){
 8002162:	4b3e      	ldr	r3, [pc, #248]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002164:	7a5b      	ldrb	r3, [r3, #9]
 8002166:	2b3f      	cmp	r3, #63	@ 0x3f
 8002168:	d909      	bls.n	800217e <HAL_UARTEx_RxEventCallback+0x392>
					pc_control.v = 1;
 800216a:	4b3c      	ldr	r3, [pc, #240]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800216c:	2201      	movs	r2, #1
 800216e:	769a      	strb	r2, [r3, #26]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 64;
 8002170:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002172:	7a5b      	ldrb	r3, [r3, #9]
 8002174:	3b40      	subs	r3, #64	@ 0x40
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b38      	ldr	r3, [pc, #224]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800217a:	725a      	strb	r2, [r3, #9]
 800217c:	e002      	b.n	8002184 <HAL_UARTEx_RxEventCallback+0x398>
					pc_control.v = 0;
 800217e:	4b37      	ldr	r3, [pc, #220]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002180:	2200      	movs	r2, #0
 8002182:	769a      	strb	r2, [r3, #26]
				if(pc_control.keyboard_values_2>31){
 8002184:	4b35      	ldr	r3, [pc, #212]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002186:	7a5b      	ldrb	r3, [r3, #9]
 8002188:	2b1f      	cmp	r3, #31
 800218a:	d909      	bls.n	80021a0 <HAL_UARTEx_RxEventCallback+0x3b4>
					pc_control.c = 1;
 800218c:	4b33      	ldr	r3, [pc, #204]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800218e:	2201      	movs	r2, #1
 8002190:	765a      	strb	r2, [r3, #25]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 32;
 8002192:	4b32      	ldr	r3, [pc, #200]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002194:	7a5b      	ldrb	r3, [r3, #9]
 8002196:	3b20      	subs	r3, #32
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b30      	ldr	r3, [pc, #192]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800219c:	725a      	strb	r2, [r3, #9]
 800219e:	e002      	b.n	80021a6 <HAL_UARTEx_RxEventCallback+0x3ba>
					pc_control.c = 0;
 80021a0:	4b2e      	ldr	r3, [pc, #184]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	765a      	strb	r2, [r3, #25]
				if(pc_control.keyboard_values_2>15){
 80021a6:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021a8:	7a5b      	ldrb	r3, [r3, #9]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	d909      	bls.n	80021c2 <HAL_UARTEx_RxEventCallback+0x3d6>
					pc_control.x = 1;
 80021ae:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	761a      	strb	r2, [r3, #24]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 16;
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021b6:	7a5b      	ldrb	r3, [r3, #9]
 80021b8:	3b10      	subs	r3, #16
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b27      	ldr	r3, [pc, #156]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021be:	725a      	strb	r2, [r3, #9]
 80021c0:	e002      	b.n	80021c8 <HAL_UARTEx_RxEventCallback+0x3dc>
					pc_control.x = 0;
 80021c2:	4b26      	ldr	r3, [pc, #152]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	761a      	strb	r2, [r3, #24]
				if(pc_control.keyboard_values_2>7){
 80021c8:	4b24      	ldr	r3, [pc, #144]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021ca:	7a5b      	ldrb	r3, [r3, #9]
 80021cc:	2b07      	cmp	r3, #7
 80021ce:	d909      	bls.n	80021e4 <HAL_UARTEx_RxEventCallback+0x3f8>
					pc_control.z = 1;
 80021d0:	4b22      	ldr	r3, [pc, #136]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	75da      	strb	r2, [r3, #23]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 8;
 80021d6:	4b21      	ldr	r3, [pc, #132]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021d8:	7a5b      	ldrb	r3, [r3, #9]
 80021da:	3b08      	subs	r3, #8
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021e0:	725a      	strb	r2, [r3, #9]
 80021e2:	e002      	b.n	80021ea <HAL_UARTEx_RxEventCallback+0x3fe>
					pc_control.z = 0;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	75da      	strb	r2, [r3, #23]
				if(pc_control.keyboard_values_2>3){
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021ec:	7a5b      	ldrb	r3, [r3, #9]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d909      	bls.n	8002206 <HAL_UARTEx_RxEventCallback+0x41a>
					pc_control.g = 1;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	759a      	strb	r2, [r3, #22]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 4;
 80021f8:	4b18      	ldr	r3, [pc, #96]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 80021fa:	7a5b      	ldrb	r3, [r3, #9]
 80021fc:	3b04      	subs	r3, #4
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b16      	ldr	r3, [pc, #88]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002202:	725a      	strb	r2, [r3, #9]
 8002204:	e002      	b.n	800220c <HAL_UARTEx_RxEventCallback+0x420>
					pc_control.g = 0;
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002208:	2200      	movs	r2, #0
 800220a:	759a      	strb	r2, [r3, #22]
				if(pc_control.keyboard_values_2>1){
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800220e:	7a5b      	ldrb	r3, [r3, #9]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d909      	bls.n	8002228 <HAL_UARTEx_RxEventCallback+0x43c>
					pc_control.f = 1;
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002216:	2201      	movs	r2, #1
 8002218:	755a      	strb	r2, [r3, #21]
					pc_control.keyboard_values_2= pc_control.keyboard_values_2 - 2;
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800221c:	7a5b      	ldrb	r3, [r3, #9]
 800221e:	3b02      	subs	r3, #2
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002224:	725a      	strb	r2, [r3, #9]
 8002226:	e002      	b.n	800222e <HAL_UARTEx_RxEventCallback+0x442>
					pc_control.f = 0;
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 800222a:	2200      	movs	r2, #0
 800222c:	755a      	strb	r2, [r3, #21]
				if(pc_control.keyboard_values_2 > 0){
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002230:	7a5b      	ldrb	r3, [r3, #9]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_UARTEx_RxEventCallback+0x452>
					pc_control.r = 1;
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002238:	2201      	movs	r2, #1
 800223a:	751a      	strb	r2, [r3, #20]
 800223c:	e002      	b.n	8002244 <HAL_UARTEx_RxEventCallback+0x458>
					pc_control.r = 0;
 800223e:	4b07      	ldr	r3, [pc, #28]	@ (800225c <HAL_UARTEx_RxEventCallback+0x470>)
 8002240:	2200      	movs	r2, #0
 8002242:	751a      	strb	r2, [r3, #20]
		    	memcpy(&robot_position, (RxBuff_2 + frame_header_offset), map_data_len);
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_UARTEx_RxEventCallback+0x474>)
 8002246:	2267      	movs	r2, #103	@ 0x67
 8002248:	4619      	mov	r1, r3
 800224a:	4806      	ldr	r0, [pc, #24]	@ (8002264 <HAL_UARTEx_RxEventCallback+0x478>)
 800224c:	f00d feb5 	bl	800ffba <memcpy>
		        break;
 8002250:	bf00      	nop
		    }
		}
	}
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000068c 	.word	0x2000068c
 8002260:	200004e3 	.word	0x200004e3
 8002264:	20000620 	.word	0x20000620

08002268 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800226e:	2301      	movs	r3, #1
 8002270:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8002276:	2301      	movs	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8002292:	463b      	mov	r3, r7
 8002294:	4619      	mov	r1, r3
 8002296:	480f      	ldr	r0, [pc, #60]	@ (80022d4 <can_filter_init+0x6c>)
 8002298:	f004 fb3c 	bl	8006914 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800229c:	480d      	ldr	r0, [pc, #52]	@ (80022d4 <can_filter_init+0x6c>)
 800229e:	f004 fc19 	bl	8006ad4 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022a2:	2102      	movs	r1, #2
 80022a4:	480b      	ldr	r0, [pc, #44]	@ (80022d4 <can_filter_init+0x6c>)
 80022a6:	f004 fe4b 	bl	8006f40 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 80022aa:	230e      	movs	r3, #14
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 80022ae:	230e      	movs	r3, #14
 80022b0:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80022b2:	463b      	mov	r3, r7
 80022b4:	4619      	mov	r1, r3
 80022b6:	4808      	ldr	r0, [pc, #32]	@ (80022d8 <can_filter_init+0x70>)
 80022b8:	f004 fb2c 	bl	8006914 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80022bc:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <can_filter_init+0x70>)
 80022be:	f004 fc09 	bl	8006ad4 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022c2:	2102      	movs	r1, #2
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <can_filter_init+0x70>)
 80022c6:	f004 fe3b 	bl	8006f40 <HAL_CAN_ActivateNotification>
}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	@ 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000810 	.word	0x20000810
 80022d8:	20000838 	.word	0x20000838

080022dc <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80022e6:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <imu_pwm_set+0x1c>)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40014400 	.word	0x40014400

080022fc <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 800230a:	4b27      	ldr	r3, [pc, #156]	@ (80023a8 <RC_init+0xac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <RC_init+0xac>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002318:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 800231a:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <RC_init+0xac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <RC_init+0xac>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0210 	orr.w	r2, r2, #16
 8002328:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 800232a:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <RC_init+0xb0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <RC_init+0xb0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 800233a:	e007      	b.n	800234c <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <RC_init+0xb0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <RC_init+0xb0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 800234c:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <RC_init+0xb0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <RC_init+0xb0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <RC_init+0xb4>)
 8002360:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <RC_init+0xb0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <RC_init+0xb0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <RC_init+0xb0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 800237a:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <RC_init+0xb0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <RC_init+0xb0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002388:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 800238a:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <RC_init+0xb0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <RC_init+0xb0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000c9c 	.word	0x20000c9c
 80023ac:	20000dec 	.word	0x20000dec
 80023b0:	40004804 	.word	0x40004804

080023b4 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    osDelay(500);
 80023bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023c0:	f00a f982 	bl	800c6c8 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80023c4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8002468 <imu_temp_control_task+0xb4>
 80023c8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800246c <imu_temp_control_task+0xb8>
 80023cc:	4a28      	ldr	r2, [pc, #160]	@ (8002470 <imu_temp_control_task+0xbc>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	4828      	ldr	r0, [pc, #160]	@ (8002474 <imu_temp_control_task+0xc0>)
 80023d2:	f002 f9e9 	bl	80047a8 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023d6:	4b28      	ldr	r3, [pc, #160]	@ (8002478 <imu_temp_control_task+0xc4>)
 80023d8:	2210      	movs	r2, #16
 80023da:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023dc:	4826      	ldr	r0, [pc, #152]	@ (8002478 <imu_temp_control_task+0xc4>)
 80023de:	f007 fb8a 	bl	8009af6 <HAL_SPI_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80023e8:	f002 f9d8 	bl	800479c <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80023ec:	2000      	movs	r0, #0
 80023ee:	f00b fa89 	bl	800d904 <pcTaskGetName>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00b fb19 	bl	800da2c <xTaskGetHandle>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a1f      	ldr	r2, [pc, #124]	@ (800247c <imu_temp_control_task+0xc8>)
 80023fe:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8002400:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <imu_temp_control_task+0xcc>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8002406:	bf00      	nop
 8002408:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800240c:	2001      	movs	r0, #1
 800240e:	f00b ff39 	bl	800e284 <ulTaskNotifyTake>
 8002412:	4603      	mov	r3, r0
 8002414:	2b01      	cmp	r3, #1
 8002416:	d1f7      	bne.n	8002408 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8002418:	f7fe ff68 	bl	80012ec <IMU_get_temp>
 800241c:	eef0 7a40 	vmov.f32	s15, s0
 8002420:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002484 <imu_temp_control_task+0xd0>
 8002424:	eeb0 0a67 	vmov.f32	s0, s15
 8002428:	4812      	ldr	r0, [pc, #72]	@ (8002474 <imu_temp_control_task+0xc0>)
 800242a:	f002 fa14 	bl	8004856 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <imu_temp_control_task+0xc0>)
 8002430:	edd3 7a08 	vldr	s15, [r3, #32]
 8002434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243c:	d503      	bpl.n	8002446 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <imu_temp_control_task+0xc0>)
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <imu_temp_control_task+0xc0>)
 8002448:	edd3 7a08 	vldr	s15, [r3, #32]
 800244c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002450:	ee17 3a90 	vmov	r3, s15
 8002454:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff3f 	bl	80022dc <imu_pwm_set>
        osDelay(5);
 800245e:	2005      	movs	r0, #5
 8002460:	f00a f932 	bl	800c6c8 <osDelay>
    {
 8002464:	e7cf      	b.n	8002406 <imu_temp_control_task+0x52>
 8002466:	bf00      	nop
 8002468:	45898000 	.word	0x45898000
 800246c:	458ca000 	.word	0x458ca000
 8002470:	08013314 	.word	0x08013314
 8002474:	200007b8 	.word	0x200007b8
 8002478:	200008b4 	.word	0x200008b4
 800247c:	200007b0 	.word	0x200007b0
 8002480:	200007b4 	.word	0x200007b4
 8002484:	42200000 	.word	0x42200000

08002488 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_GPIO_EXTI_Callback+0x54>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	429a      	cmp	r2, r3
 800249a:	d11b      	bne.n	80024d4 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <HAL_GPIO_EXTI_Callback+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d016      	beq.n	80024d4 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80024a6:	f00b fe5f 	bl	800e168 <xTaskGetSchedulerState>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d011      	beq.n	80024d4 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00b ff30 	bl	800e31c <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_GPIO_EXTI_Callback+0x60>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_EXTI_Callback+0x4c>
 80024c4:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <HAL_GPIO_EXTI_Callback+0x64>)
 80024c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	2000000e 	.word	0x2000000e
 80024e0:	200007b4 	.word	0x200007b4
 80024e4:	200007b0 	.word	0x200007b0
 80024e8:	20000800 	.word	0x20000800
 80024ec:	e000ed04 	.word	0xe000ed04

080024f0 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80024fe:	f000 f8bd 	bl	800267c <ist8310_GPIO_init>
    ist8310_com_init();
 8002502:	f000 f8c2 	bl	800268a <ist8310_com_init>

    ist8310_RST_L();
 8002506:	f000 f97b 	bl	8002800 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 800250a:	4b30      	ldr	r3, [pc, #192]	@ (80025cc <ist8310_init+0xdc>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f916 	bl	8002740 <ist8310_delay_ms>
    ist8310_RST_H();
 8002514:	f000 f968 	bl	80027e8 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 8002518:	4b2c      	ldr	r3, [pc, #176]	@ (80025cc <ist8310_init+0xdc>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f90f 	bl	8002740 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f8b8 	bl	8002698 <ist8310_IIC_read_single_reg>
 8002528:	4603      	mov	r3, r0
 800252a:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 800252c:	79bb      	ldrb	r3, [r7, #6]
 800252e:	2b10      	cmp	r3, #16
 8002530:	d001      	beq.n	8002536 <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 8002532:	2340      	movs	r3, #64	@ 0x40
 8002534:	e045      	b.n	80025c2 <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8002536:	2300      	movs	r3, #0
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	e03e      	b.n	80025ba <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	4924      	ldr	r1, [pc, #144]	@ (80025d0 <ist8310_init+0xe0>)
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	440b      	add	r3, r1
 8002548:	7818      	ldrb	r0, [r3, #0]
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	4920      	ldr	r1, [pc, #128]	@ (80025d0 <ist8310_init+0xe0>)
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	440b      	add	r3, r1
 8002556:	3301      	adds	r3, #1
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	f000 f8b8 	bl	80026d0 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8002560:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <ist8310_init+0xe4>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 f8f9 	bl	800275c <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 800256a:	79fa      	ldrb	r2, [r7, #7]
 800256c:	4918      	ldr	r1, [pc, #96]	@ (80025d0 <ist8310_init+0xe0>)
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	440b      	add	r3, r1
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f88d 	bl	8002698 <ist8310_IIC_read_single_reg>
 800257e:	4603      	mov	r3, r0
 8002580:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8002582:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <ist8310_init+0xe4>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f8e8 	bl	800275c <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	4910      	ldr	r1, [pc, #64]	@ (80025d0 <ist8310_init+0xe0>)
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	440b      	add	r3, r1
 8002598:	3301      	adds	r3, #1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	79ba      	ldrb	r2, [r7, #6]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d008      	beq.n	80025b4 <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 80025a2:	79fa      	ldrb	r2, [r7, #7]
 80025a4:	490a      	ldr	r1, [pc, #40]	@ (80025d0 <ist8310_init+0xe0>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	3302      	adds	r3, #2
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	e006      	b.n	80025c2 <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	3301      	adds	r3, #1
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d9bd      	bls.n	800253c <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	0801332c 	.word	0x0801332c
 80025d0:	08013320 	.word	0x08013320
 80025d4:	0801332d 	.word	0x0801332d

080025d8 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	2206      	movs	r2, #6
 80025ea:	4619      	mov	r1, r3
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f88b 	bl	8002708 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80025f2:	7a7b      	ldrb	r3, [r7, #9]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	b21a      	sxth	r2, r3
 80025f8:	7a3b      	ldrb	r3, [r7, #8]
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8002600:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800260c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002678 <ist8310_read_mag+0xa0>
 8002610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	b21a      	sxth	r2, r3
 8002620:	7abb      	ldrb	r3, [r7, #10]
 8002622:	b21b      	sxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8002628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002678 <ist8310_read_mag+0xa0>
 800263c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002640:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8002644:	7b7b      	ldrb	r3, [r7, #13]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21a      	sxth	r2, r3
 800264a:	7b3b      	ldrb	r3, [r7, #12]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8002652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3308      	adds	r3, #8
 8002662:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002678 <ist8310_read_mag+0xa0>
 8002666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800266a:	edc3 7a00 	vstr	s15, [r3]
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	3e99999a 	.word	0x3e99999a

0800267c <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af04      	add	r7, sp, #16
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	230a      	movs	r3, #10
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	2301      	movs	r3, #1
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	f107 030f 	add.w	r3, r7, #15
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2301      	movs	r3, #1
 80026ba:	211c      	movs	r1, #28
 80026bc:	4803      	ldr	r0, [pc, #12]	@ (80026cc <ist8310_IIC_read_single_reg+0x34>)
 80026be:	f005 ffb5 	bl	800862c <HAL_I2C_Mem_Read>
    return res;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000860 	.word	0x20000860

080026d0 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af04      	add	r7, sp, #16
 80026d6:	4603      	mov	r3, r0
 80026d8:	460a      	mov	r2, r1
 80026da:	71fb      	strb	r3, [r7, #7]
 80026dc:	4613      	mov	r3, r2
 80026de:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	230a      	movs	r3, #10
 80026e6:	9302      	str	r3, [sp, #8]
 80026e8:	2301      	movs	r3, #1
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	1dbb      	adds	r3, r7, #6
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2301      	movs	r3, #1
 80026f2:	211c      	movs	r1, #28
 80026f4:	4803      	ldr	r0, [pc, #12]	@ (8002704 <ist8310_IIC_write_single_reg+0x34>)
 80026f6:	f005 fe9f 	bl	8008438 <HAL_I2C_Mem_Write>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000860 	.word	0x20000860

08002708 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af04      	add	r7, sp, #16
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	b29a      	uxth	r2, r3
 800271c:	79bb      	ldrb	r3, [r7, #6]
 800271e:	b29b      	uxth	r3, r3
 8002720:	210a      	movs	r1, #10
 8002722:	9102      	str	r1, [sp, #8]
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2301      	movs	r3, #1
 800272c:	211c      	movs	r1, #28
 800272e:	4803      	ldr	r0, [pc, #12]	@ (800273c <ist8310_IIC_read_muli_reg+0x34>)
 8002730:	f005 ff7c 	bl	800862c <HAL_I2C_Mem_Read>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000860 	.word	0x20000860

08002740 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 ffc1 	bl	80066d4 <HAL_Delay>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <ist8310_delay_us+0x88>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 800278c:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <ist8310_delay_us+0x88>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8002792:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <ist8310_delay_us+0x88>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	429a      	cmp	r2, r3
 800279e:	d0f8      	beq.n	8002792 <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d206      	bcs.n	80027b6 <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4413      	add	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e007      	b.n	80027c6 <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad2      	subs	r2, r2, r3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4413      	add	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d200      	bcs.n	80027d4 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 80027d2:	e7de      	b.n	8002792 <ist8310_delay_us+0x36>
            {
                break;
 80027d4:	bf00      	nop
            }
        }
    }
}
 80027d6:	bf00      	nop
 80027d8:	3724      	adds	r7, #36	@ 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80027ec:	2201      	movs	r2, #1
 80027ee:	2140      	movs	r1, #64	@ 0x40
 80027f0:	4802      	ldr	r0, [pc, #8]	@ (80027fc <ist8310_RST_H+0x14>)
 80027f2:	f005 fcab 	bl	800814c <HAL_GPIO_WritePin>
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40021800 	.word	0x40021800

08002800 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002804:	2200      	movs	r2, #0
 8002806:	2140      	movs	r1, #64	@ 0x40
 8002808:	4802      	ldr	r0, [pc, #8]	@ (8002814 <ist8310_RST_L+0x14>)
 800280a:	f005 fc9f 	bl	800814c <HAL_GPIO_WritePin>
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021800 	.word	0x40021800

08002818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800281c:	f003 fee8 	bl	80065f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002820:	f000 f876 	bl	8002910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002824:	f000 fd1e 	bl	8003264 <MX_GPIO_Init>
  MX_DMA_Init();
 8002828:	f000 fca6 	bl	8003178 <MX_DMA_Init>
  MX_CAN1_Init();
 800282c:	f000 f8dc 	bl	80029e8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002830:	f000 f910 	bl	8002a54 <MX_CAN2_Init>
  MX_SPI1_Init();
 8002834:	f000 f972 	bl	8002b1c <MX_SPI1_Init>
  MX_TIM4_Init();
 8002838:	f000 fa4e 	bl	8002cd8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800283c:	f000 fc1c 	bl	8003078 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002840:	f000 fc70 	bl	8003124 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002844:	f000 f9a0 	bl	8002b88 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002848:	f000 fb2c 	bl	8002ea4 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 800284c:	f000 fc3e 	bl	80030cc <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8002850:	f000 fbc4 	bl	8002fdc <MX_TIM10_Init>
  MX_I2C3_Init();
 8002854:	f000 f934 	bl	8002ac0 <MX_I2C3_Init>
  MX_TIM5_Init();
 8002858:	f000 fab4 	bl	8002dc4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 800285c:	f7ff fd04 	bl	8002268 <can_filter_init>
  remote_control_init();
 8002860:	f002 fce0 	bl	8005224 <remote_control_init>
  usart_Init();
 8002864:	f7ff fa84 	bl	8001d70 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8002868:	f002 fcea 	bl	8005240 <get_remote_control_point>
 800286c:	4603      	mov	r3, r0
 800286e:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <main+0xb4>)
 8002870:	6013      	str	r3, [r2, #0]

  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */
  PWMInit(&htim1, &htim4, &htim5, &htim8);
 8002872:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <main+0xb8>)
 8002874:	4a17      	ldr	r2, [pc, #92]	@ (80028d4 <main+0xbc>)
 8002876:	4918      	ldr	r1, [pc, #96]	@ (80028d8 <main+0xc0>)
 8002878:	4818      	ldr	r0, [pc, #96]	@ (80028dc <main+0xc4>)
 800287a:	f002 f935 	bl	8004ae8 <PWMInit>
  /* Init scheduler */
  osKernelInitialize();
 800287e:	f009 fe47 	bl	800c510 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8002882:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <main+0xc8>)
 8002884:	2100      	movs	r1, #0
 8002886:	4817      	ldr	r0, [pc, #92]	@ (80028e4 <main+0xcc>)
 8002888:	f009 fe8c 	bl	800c5a4 <osThreadNew>
 800288c:	4603      	mov	r3, r0
 800288e:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <main+0xd0>)
 8002890:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8002892:	4a16      	ldr	r2, [pc, #88]	@ (80028ec <main+0xd4>)
 8002894:	2100      	movs	r1, #0
 8002896:	4816      	ldr	r0, [pc, #88]	@ (80028f0 <main+0xd8>)
 8002898:	f009 fe84 	bl	800c5a4 <osThreadNew>
 800289c:	4603      	mov	r3, r0
 800289e:	4a15      	ldr	r2, [pc, #84]	@ (80028f4 <main+0xdc>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 80028a2:	4a15      	ldr	r2, [pc, #84]	@ (80028f8 <main+0xe0>)
 80028a4:	2100      	movs	r1, #0
 80028a6:	4815      	ldr	r0, [pc, #84]	@ (80028fc <main+0xe4>)
 80028a8:	f009 fe7c 	bl	800c5a4 <osThreadNew>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <main+0xe8>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 80028b2:	4a14      	ldr	r2, [pc, #80]	@ (8002904 <main+0xec>)
 80028b4:	2100      	movs	r1, #0
 80028b6:	4814      	ldr	r0, [pc, #80]	@ (8002908 <main+0xf0>)
 80028b8:	f009 fe74 	bl	800c5a4 <osThreadNew>
 80028bc:	4603      	mov	r3, r0
 80028be:	4a13      	ldr	r2, [pc, #76]	@ (800290c <main+0xf4>)
 80028c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80028c2:	f009 fe49 	bl	800c558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028c6:	bf00      	nop
 80028c8:	e7fd      	b.n	80028c6 <main+0xae>
 80028ca:	bf00      	nop
 80028cc:	20000f1c 	.word	0x20000f1c
 80028d0:	200009e4 	.word	0x200009e4
 80028d4:	2000099c 	.word	0x2000099c
 80028d8:	20000954 	.word	0x20000954
 80028dc:	2000090c 	.word	0x2000090c
 80028e0:	08013330 	.word	0x08013330
 80028e4:	08003571 	.word	0x08003571
 80028e8:	20000f0c 	.word	0x20000f0c
 80028ec:	08013354 	.word	0x08013354
 80028f0:	080035d9 	.word	0x080035d9
 80028f4:	20000f10 	.word	0x20000f10
 80028f8:	08013378 	.word	0x08013378
 80028fc:	080023b5 	.word	0x080023b5
 8002900:	20000f14 	.word	0x20000f14
 8002904:	0801339c 	.word	0x0801339c
 8002908:	0800478d 	.word	0x0800478d
 800290c:	20000f18 	.word	0x20000f18

08002910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b094      	sub	sp, #80	@ 0x50
 8002914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002916:	f107 0320 	add.w	r3, r7, #32
 800291a:	2230      	movs	r2, #48	@ 0x30
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f00d fabc 	bl	800fe9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	2300      	movs	r3, #0
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	4b29      	ldr	r3, [pc, #164]	@ (80029e0 <SystemClock_Config+0xd0>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	4a28      	ldr	r2, [pc, #160]	@ (80029e0 <SystemClock_Config+0xd0>)
 800293e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002942:	6413      	str	r3, [r2, #64]	@ 0x40
 8002944:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <SystemClock_Config+0xd0>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	4b23      	ldr	r3, [pc, #140]	@ (80029e4 <SystemClock_Config+0xd4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a22      	ldr	r2, [pc, #136]	@ (80029e4 <SystemClock_Config+0xd4>)
 800295a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b20      	ldr	r3, [pc, #128]	@ (80029e4 <SystemClock_Config+0xd4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800296c:	2301      	movs	r3, #1
 800296e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002970:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002976:	2302      	movs	r3, #2
 8002978:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800297a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800297e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002980:	2306      	movs	r3, #6
 8002982:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002984:	23a8      	movs	r3, #168	@ 0xa8
 8002986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002988:	2302      	movs	r3, #2
 800298a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800298c:	2304      	movs	r3, #4
 800298e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002990:	f107 0320 	add.w	r3, r7, #32
 8002994:	4618      	mov	r0, r3
 8002996:	f006 fc2f 	bl	80091f8 <HAL_RCC_OscConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029a0:	f001 fefc 	bl	800479c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a4:	230f      	movs	r3, #15
 80029a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a8:	2302      	movs	r3, #2
 80029aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	2105      	movs	r1, #5
 80029c2:	4618      	mov	r0, r3
 80029c4:	f006 fe90 	bl	80096e8 <HAL_RCC_ClockConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80029ce:	f001 fee5 	bl	800479c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80029d2:	f006 ff6f 	bl	80098b4 <HAL_RCC_EnableCSS>
}
 80029d6:	bf00      	nop
 80029d8:	3750      	adds	r7, #80	@ 0x50
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000

080029e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80029ec:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <MX_CAN1_Init+0x64>)
 80029ee:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <MX_CAN1_Init+0x68>)
 80029f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80029f2:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <MX_CAN1_Init+0x64>)
 80029f4:	2203      	movs	r2, #3
 80029f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80029f8:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <MX_CAN1_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029fe:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a06:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002a0a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a0e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a12:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002a14:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002a20:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002a2c:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002a38:	4804      	ldr	r0, [pc, #16]	@ (8002a4c <MX_CAN1_Init+0x64>)
 8002a3a:	f003 fe6f 	bl	800671c <HAL_CAN_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002a44:	f001 feaa 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000810 	.word	0x20000810
 8002a50:	40006400 	.word	0x40006400

08002a54 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002a58:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a5a:	4a18      	ldr	r2, [pc, #96]	@ (8002abc <MX_CAN2_Init+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a60:	2203      	movs	r2, #3
 8002a62:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002a64:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002a6a:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a72:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002a76:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002a78:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a7a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a7e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002a80:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002a86:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002aa4:	4804      	ldr	r0, [pc, #16]	@ (8002ab8 <MX_CAN2_Init+0x64>)
 8002aa6:	f003 fe39 	bl	800671c <HAL_CAN_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002ab0:	f001 fe74 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000838 	.word	0x20000838
 8002abc:	40006800 	.word	0x40006800

08002ac0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <MX_I2C3_Init+0x54>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002aca:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002acc:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <MX_I2C3_Init+0x58>)
 8002ace:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ade:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ae2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af0:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002afc:	4804      	ldr	r0, [pc, #16]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002afe:	f005 fb57 	bl	80081b0 <HAL_I2C_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002b08:	f001 fe48 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000860 	.word	0x20000860
 8002b14:	40005c00 	.word	0x40005c00
 8002b18:	00061a80 	.word	0x00061a80

08002b1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b20:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b22:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <MX_SPI1_Init+0x68>)
 8002b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b26:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b50:	2238      	movs	r2, #56	@ 0x38
 8002b52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b54:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b60:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b68:	220a      	movs	r2, #10
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b6c:	4804      	ldr	r0, [pc, #16]	@ (8002b80 <MX_SPI1_Init+0x64>)
 8002b6e:	f006 ffc2 	bl	8009af6 <HAL_SPI_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b78:	f001 fe10 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200008b4 	.word	0x200008b4
 8002b84:	40013000 	.word	0x40013000

08002b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b092      	sub	sp, #72	@ 0x48
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	615a      	str	r2, [r3, #20]
 8002baa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2220      	movs	r2, #32
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f00d f972 	bl	800fe9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bb8:	4b45      	ldr	r3, [pc, #276]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002bba:	4a46      	ldr	r2, [pc, #280]	@ (8002cd4 <MX_TIM1_Init+0x14c>)
 8002bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8002bbe:	4b44      	ldr	r3, [pc, #272]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002bc0:	f240 124f 	movw	r2, #335	@ 0x14f
 8002bc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	4b42      	ldr	r3, [pc, #264]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002bcc:	4b40      	ldr	r3, [pc, #256]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002bce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bda:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002be6:	483a      	ldr	r0, [pc, #232]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002be8:	f007 fb52 	bl	800a290 <HAL_TIM_PWM_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002bf2:	f001 fdd3 	bl	800479c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bfe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c02:	4619      	mov	r1, r3
 8002c04:	4832      	ldr	r0, [pc, #200]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002c06:	f008 f971 	bl	800aeec <HAL_TIMEx_MasterConfigSynchronization>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002c10:	f001 fdc4 	bl	800479c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c14:	2360      	movs	r3, #96	@ 0x60
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c20:	2300      	movs	r3, #0
 8002c22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c34:	2200      	movs	r2, #0
 8002c36:	4619      	mov	r1, r3
 8002c38:	4825      	ldr	r0, [pc, #148]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002c3a:	f007 fcb1 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002c44:	f001 fdaa 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	481f      	ldr	r0, [pc, #124]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002c52:	f007 fca5 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002c5c:	f001 fd9e 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c64:	2208      	movs	r2, #8
 8002c66:	4619      	mov	r1, r3
 8002c68:	4819      	ldr	r0, [pc, #100]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002c6a:	f007 fc99 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002c74:	f001 fd92 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4813      	ldr	r0, [pc, #76]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002c82:	f007 fc8d 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002c8c:	f001 fd86 	bl	800479c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ca8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4807      	ldr	r0, [pc, #28]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002cb4:	f008 f996 	bl	800afe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002cbe:	f001 fd6d 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cc2:	4803      	ldr	r0, [pc, #12]	@ (8002cd0 <MX_TIM1_Init+0x148>)
 8002cc4:	f002 ffd8 	bl	8005c78 <HAL_TIM_MspPostInit>

}
 8002cc8:	bf00      	nop
 8002cca:	3748      	adds	r7, #72	@ 0x48
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	2000090c 	.word	0x2000090c
 8002cd4:	40010000 	.word	0x40010000

08002cd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	@ 0x38
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cec:	f107 0320 	add.w	r3, r7, #32
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
 8002d04:	615a      	str	r2, [r3, #20]
 8002d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d08:	4b2c      	ldr	r3, [pc, #176]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc0 <MX_TIM4_Init+0xe8>)
 8002d0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d10:	2253      	movs	r2, #83	@ 0x53
 8002d12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d14:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8002d1a:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d1c:	22f9      	movs	r2, #249	@ 0xf9
 8002d1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d20:	4b26      	ldr	r3, [pc, #152]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d26:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d2c:	4823      	ldr	r0, [pc, #140]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d2e:	f007 f9f7 	bl	800a120 <HAL_TIM_Base_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002d38:	f001 fd30 	bl	800479c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d46:	4619      	mov	r1, r3
 8002d48:	481c      	ldr	r0, [pc, #112]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d4a:	f007 fceb 	bl	800a724 <HAL_TIM_ConfigClockSource>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002d54:	f001 fd22 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d58:	4818      	ldr	r0, [pc, #96]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d5a:	f007 fa99 	bl	800a290 <HAL_TIM_PWM_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002d64:	f001 fd1a 	bl	800479c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d70:	f107 0320 	add.w	r3, r7, #32
 8002d74:	4619      	mov	r1, r3
 8002d76:	4811      	ldr	r0, [pc, #68]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002d78:	f008 f8b8 	bl	800aeec <HAL_TIMEx_MasterConfigSynchronization>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002d82:	f001 fd0b 	bl	800479c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d86:	2360      	movs	r3, #96	@ 0x60
 8002d88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8002d8a:	f642 1303 	movw	r3, #10499	@ 0x2903
 8002d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4807      	ldr	r0, [pc, #28]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002da0:	f007 fbfe 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002daa:	f001 fcf7 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002dae:	4803      	ldr	r0, [pc, #12]	@ (8002dbc <MX_TIM4_Init+0xe4>)
 8002db0:	f002 ff62 	bl	8005c78 <HAL_TIM_MspPostInit>

}
 8002db4:	bf00      	nop
 8002db6:	3738      	adds	r7, #56	@ 0x38
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000954 	.word	0x20000954
 8002dc0:	40000800 	.word	0x40000800

08002dc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dca:	f107 0320 	add.w	r3, r7, #32
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	611a      	str	r2, [r3, #16]
 8002de2:	615a      	str	r2, [r3, #20]
 8002de4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002de6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002de8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea0 <MX_TIM5_Init+0xdc>)
 8002dea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002dec:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002dee:	2253      	movs	r2, #83	@ 0x53
 8002df0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8002df8:	4b28      	ldr	r3, [pc, #160]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002dfa:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002dfe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e00:	4b26      	ldr	r3, [pc, #152]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e06:	4b25      	ldr	r3, [pc, #148]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e0c:	4823      	ldr	r0, [pc, #140]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002e0e:	f007 fa3f 	bl	800a290 <HAL_TIM_PWM_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002e18:	f001 fcc0 	bl	800479c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e24:	f107 0320 	add.w	r3, r7, #32
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481c      	ldr	r0, [pc, #112]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002e2c:	f008 f85e 	bl	800aeec <HAL_TIMEx_MasterConfigSynchronization>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002e36:	f001 fcb1 	bl	800479c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3a:	2360      	movs	r3, #96	@ 0x60
 8002e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4812      	ldr	r0, [pc, #72]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002e52:	f007 fba5 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002e5c:	f001 fc9e 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	2204      	movs	r2, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	480d      	ldr	r0, [pc, #52]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002e68:	f007 fb9a 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002e72:	f001 fc93 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	2208      	movs	r2, #8
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4807      	ldr	r0, [pc, #28]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002e7e:	f007 fb8f 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002e88:	f001 fc88 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e8c:	4803      	ldr	r0, [pc, #12]	@ (8002e9c <MX_TIM5_Init+0xd8>)
 8002e8e:	f002 fef3 	bl	8005c78 <HAL_TIM_MspPostInit>

}
 8002e92:	bf00      	nop
 8002e94:	3728      	adds	r7, #40	@ 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000099c 	.word	0x2000099c
 8002ea0:	40000c00 	.word	0x40000c00

08002ea4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b092      	sub	sp, #72	@ 0x48
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eaa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	2220      	movs	r2, #32
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f00c ffe4 	bl	800fe9c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002ed6:	4a40      	ldr	r2, [pc, #256]	@ (8002fd8 <MX_TIM8_Init+0x134>)
 8002ed8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002eda:	4b3e      	ldr	r3, [pc, #248]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002edc:	2253      	movs	r2, #83	@ 0x53
 8002ede:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002ee8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002eec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eee:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ef4:	4b37      	ldr	r3, [pc, #220]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002efa:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002efc:	2280      	movs	r2, #128	@ 0x80
 8002efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f00:	4834      	ldr	r0, [pc, #208]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002f02:	f007 f9c5 	bl	800a290 <HAL_TIM_PWM_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002f0c:	f001 fc46 	bl	800479c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	482d      	ldr	r0, [pc, #180]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002f20:	f007 ffe4 	bl	800aeec <HAL_TIMEx_MasterConfigSynchronization>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002f2a:	f001 fc37 	bl	800479c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f2e:	2360      	movs	r3, #96	@ 0x60
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4619      	mov	r1, r3
 8002f52:	4820      	ldr	r0, [pc, #128]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002f54:	f007 fb24 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002f5e:	f001 fc1d 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f66:	2204      	movs	r2, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	481a      	ldr	r0, [pc, #104]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002f6c:	f007 fb18 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002f76:	f001 fc11 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f7e:	2208      	movs	r2, #8
 8002f80:	4619      	mov	r1, r3
 8002f82:	4814      	ldr	r0, [pc, #80]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002f84:	f007 fb0c 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002f8e:	f001 fc05 	bl	800479c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002faa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4807      	ldr	r0, [pc, #28]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002fb6:	f008 f815 	bl	800afe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002fc0:	f001 fbec 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002fc4:	4803      	ldr	r0, [pc, #12]	@ (8002fd4 <MX_TIM8_Init+0x130>)
 8002fc6:	f002 fe57 	bl	8005c78 <HAL_TIM_MspPostInit>

}
 8002fca:	bf00      	nop
 8002fcc:	3748      	adds	r7, #72	@ 0x48
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200009e4 	.word	0x200009e4
 8002fd8:	40010400 	.word	0x40010400

08002fdc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
 8002ff0:	615a      	str	r2, [r3, #20]
 8002ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <MX_TIM10_Init+0x94>)
 8002ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8003074 <MX_TIM10_Init+0x98>)
 8002ff8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8003070 <MX_TIM10_Init+0x94>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003000:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <MX_TIM10_Init+0x94>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8003006:	4b1a      	ldr	r3, [pc, #104]	@ (8003070 <MX_TIM10_Init+0x94>)
 8003008:	f241 3287 	movw	r2, #4999	@ 0x1387
 800300c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300e:	4b18      	ldr	r3, [pc, #96]	@ (8003070 <MX_TIM10_Init+0x94>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003014:	4b16      	ldr	r3, [pc, #88]	@ (8003070 <MX_TIM10_Init+0x94>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800301a:	4815      	ldr	r0, [pc, #84]	@ (8003070 <MX_TIM10_Init+0x94>)
 800301c:	f007 f880 	bl	800a120 <HAL_TIM_Base_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003026:	f001 fbb9 	bl	800479c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800302a:	4811      	ldr	r0, [pc, #68]	@ (8003070 <MX_TIM10_Init+0x94>)
 800302c:	f007 f930 	bl	800a290 <HAL_TIM_PWM_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003036:	f001 fbb1 	bl	800479c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800303a:	2360      	movs	r3, #96	@ 0x60
 800303c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	2200      	movs	r2, #0
 800304e:	4619      	mov	r1, r3
 8003050:	4807      	ldr	r0, [pc, #28]	@ (8003070 <MX_TIM10_Init+0x94>)
 8003052:	f007 faa5 	bl	800a5a0 <HAL_TIM_PWM_ConfigChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800305c:	f001 fb9e 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003060:	4803      	ldr	r0, [pc, #12]	@ (8003070 <MX_TIM10_Init+0x94>)
 8003062:	f002 fe09 	bl	8005c78 <HAL_TIM_MspPostInit>

}
 8003066:	bf00      	nop
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000a2c 	.word	0x20000a2c
 8003074:	40014400 	.word	0x40014400

08003078 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800307c:	4b11      	ldr	r3, [pc, #68]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 800307e:	4a12      	ldr	r2, [pc, #72]	@ (80030c8 <MX_USART1_UART_Init+0x50>)
 8003080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 8003084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800308a:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003096:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 800309e:	220c      	movs	r2, #12
 80030a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a2:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ae:	4805      	ldr	r0, [pc, #20]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 80030b0:	f007 ffea 	bl	800b088 <HAL_UART_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030ba:	f001 fb6f 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000c54 	.word	0x20000c54
 80030c8:	40011000 	.word	0x40011000

080030cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 80030d2:	4a12      	ldr	r2, [pc, #72]	@ (800311c <MX_USART3_UART_Init+0x50>)
 80030d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 80030d8:	4a11      	ldr	r2, [pc, #68]	@ (8003120 <MX_USART3_UART_Init+0x54>)
 80030da:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 80030ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030f0:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 80030f2:	220c      	movs	r2, #12
 80030f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003102:	4805      	ldr	r0, [pc, #20]	@ (8003118 <MX_USART3_UART_Init+0x4c>)
 8003104:	f007 ffc0 	bl	800b088 <HAL_UART_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800310e:	f001 fb45 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000c9c 	.word	0x20000c9c
 800311c:	40004800 	.word	0x40004800
 8003120:	000186a0 	.word	0x000186a0

08003124 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003128:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 800312a:	4a12      	ldr	r2, [pc, #72]	@ (8003174 <MX_USART6_UART_Init+0x50>)
 800312c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800312e:	4b10      	ldr	r3, [pc, #64]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 8003130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003134:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003136:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800313c:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003142:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 800314a:	220c      	movs	r2, #12
 800314c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314e:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003154:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800315a:	4805      	ldr	r0, [pc, #20]	@ (8003170 <MX_USART6_UART_Init+0x4c>)
 800315c:	f007 ff94 	bl	800b088 <HAL_UART_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003166:	f001 fb19 	bl	800479c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000ce4 	.word	0x20000ce4
 8003174:	40011400 	.word	0x40011400

08003178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	4b37      	ldr	r3, [pc, #220]	@ (8003260 <MX_DMA_Init+0xe8>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4a36      	ldr	r2, [pc, #216]	@ (8003260 <MX_DMA_Init+0xe8>)
 8003188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4b34      	ldr	r3, [pc, #208]	@ (8003260 <MX_DMA_Init+0xe8>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	4b30      	ldr	r3, [pc, #192]	@ (8003260 <MX_DMA_Init+0xe8>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003260 <MX_DMA_Init+0xe8>)
 80031a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003260 <MX_DMA_Init+0xe8>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2105      	movs	r1, #5
 80031ba:	200c      	movs	r0, #12
 80031bc:	f004 f9f1 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80031c0:	200c      	movs	r0, #12
 80031c2:	f004 fa0a 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2105      	movs	r1, #5
 80031ca:	200d      	movs	r0, #13
 80031cc:	f004 f9e9 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80031d0:	200d      	movs	r0, #13
 80031d2:	f004 fa02 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2105      	movs	r1, #5
 80031da:	200f      	movs	r0, #15
 80031dc:	f004 f9e1 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80031e0:	200f      	movs	r0, #15
 80031e2:	f004 f9fa 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2105      	movs	r1, #5
 80031ea:	202f      	movs	r0, #47	@ 0x2f
 80031ec:	f004 f9d9 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80031f0:	202f      	movs	r0, #47	@ 0x2f
 80031f2:	f004 f9f2 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2105      	movs	r1, #5
 80031fa:	2039      	movs	r0, #57	@ 0x39
 80031fc:	f004 f9d1 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003200:	2039      	movs	r0, #57	@ 0x39
 8003202:	f004 f9ea 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2105      	movs	r1, #5
 800320a:	203a      	movs	r0, #58	@ 0x3a
 800320c:	f004 f9c9 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003210:	203a      	movs	r0, #58	@ 0x3a
 8003212:	f004 f9e2 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2105      	movs	r1, #5
 800321a:	203b      	movs	r0, #59	@ 0x3b
 800321c:	f004 f9c1 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003220:	203b      	movs	r0, #59	@ 0x3b
 8003222:	f004 f9da 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2105      	movs	r1, #5
 800322a:	2044      	movs	r0, #68	@ 0x44
 800322c:	f004 f9b9 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003230:	2044      	movs	r0, #68	@ 0x44
 8003232:	f004 f9d2 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2105      	movs	r1, #5
 800323a:	2045      	movs	r0, #69	@ 0x45
 800323c:	f004 f9b1 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003240:	2045      	movs	r0, #69	@ 0x45
 8003242:	f004 f9ca 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	2105      	movs	r1, #5
 800324a:	2046      	movs	r0, #70	@ 0x46
 800324c:	f004 f9a9 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003250:	2046      	movs	r0, #70	@ 0x46
 8003252:	f004 f9c2 	bl	80075da <HAL_NVIC_EnableIRQ>

}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800

08003264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08e      	sub	sp, #56	@ 0x38
 8003268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	623b      	str	r3, [r7, #32]
 800327e:	4b71      	ldr	r3, [pc, #452]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	4a70      	ldr	r2, [pc, #448]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6313      	str	r3, [r2, #48]	@ 0x30
 800328a:	4b6e      	ldr	r3, [pc, #440]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	623b      	str	r3, [r7, #32]
 8003294:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	4b6a      	ldr	r3, [pc, #424]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a69      	ldr	r2, [pc, #420]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b67      	ldr	r3, [pc, #412]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	4b63      	ldr	r3, [pc, #396]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a62      	ldr	r2, [pc, #392]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b60      	ldr	r3, [pc, #384]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032de:	4b59      	ldr	r3, [pc, #356]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	4b55      	ldr	r3, [pc, #340]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	4a54      	ldr	r2, [pc, #336]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fa:	4b52      	ldr	r3, [pc, #328]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b4e      	ldr	r3, [pc, #312]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	4a4d      	ldr	r2, [pc, #308]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003314:	6313      	str	r3, [r2, #48]	@ 0x30
 8003316:	4b4b      	ldr	r3, [pc, #300]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	4b47      	ldr	r3, [pc, #284]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	4a46      	ldr	r2, [pc, #280]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 800332c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003330:	6313      	str	r3, [r2, #48]	@ 0x30
 8003332:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	4b40      	ldr	r3, [pc, #256]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	4a3f      	ldr	r2, [pc, #252]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003348:	f043 0320 	orr.w	r3, r3, #32
 800334c:	6313      	str	r3, [r2, #48]	@ 0x30
 800334e:	4b3d      	ldr	r3, [pc, #244]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4b39      	ldr	r3, [pc, #228]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003362:	4a38      	ldr	r2, [pc, #224]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	6313      	str	r3, [r2, #48]	@ 0x30
 800336a:	4b36      	ldr	r3, [pc, #216]	@ (8003444 <MX_GPIO_Init+0x1e0>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003376:	2200      	movs	r2, #0
 8003378:	2140      	movs	r1, #64	@ 0x40
 800337a:	4833      	ldr	r0, [pc, #204]	@ (8003448 <MX_GPIO_Init+0x1e4>)
 800337c:	f004 fee6 	bl	800814c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003380:	2200      	movs	r2, #0
 8003382:	2110      	movs	r1, #16
 8003384:	4831      	ldr	r0, [pc, #196]	@ (800344c <MX_GPIO_Init+0x1e8>)
 8003386:	f004 fee1 	bl	800814c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800338a:	2200      	movs	r2, #0
 800338c:	2101      	movs	r1, #1
 800338e:	4830      	ldr	r0, [pc, #192]	@ (8003450 <MX_GPIO_Init+0x1ec>)
 8003390:	f004 fedc 	bl	800814c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003394:	2340      	movs	r3, #64	@ 0x40
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003398:	2301      	movs	r3, #1
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a8:	4619      	mov	r1, r3
 80033aa:	4827      	ldr	r0, [pc, #156]	@ (8003448 <MX_GPIO_Init+0x1e4>)
 80033ac:	f004 fd32 	bl	8007e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033b0:	2308      	movs	r3, #8
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c2:	4619      	mov	r1, r3
 80033c4:	4820      	ldr	r0, [pc, #128]	@ (8003448 <MX_GPIO_Init+0x1e4>)
 80033c6:	f004 fd25 	bl	8007e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033ca:	2310      	movs	r3, #16
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ce:	2301      	movs	r3, #1
 80033d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033de:	4619      	mov	r1, r3
 80033e0:	481a      	ldr	r0, [pc, #104]	@ (800344c <MX_GPIO_Init+0x1e8>)
 80033e2:	f004 fd17 	bl	8007e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80033e6:	2330      	movs	r3, #48	@ 0x30
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f8:	4619      	mov	r1, r3
 80033fa:	4816      	ldr	r0, [pc, #88]	@ (8003454 <MX_GPIO_Init+0x1f0>)
 80033fc:	f004 fd0a 	bl	8007e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003400:	2301      	movs	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003404:	2301      	movs	r3, #1
 8003406:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003414:	4619      	mov	r1, r3
 8003416:	480e      	ldr	r0, [pc, #56]	@ (8003450 <MX_GPIO_Init+0x1ec>)
 8003418:	f004 fcfc 	bl	8007e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800341c:	2200      	movs	r2, #0
 800341e:	2105      	movs	r1, #5
 8003420:	2009      	movs	r0, #9
 8003422:	f004 f8be 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003426:	2009      	movs	r0, #9
 8003428:	f004 f8d7 	bl	80075da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800342c:	2200      	movs	r2, #0
 800342e:	2105      	movs	r1, #5
 8003430:	200a      	movs	r0, #10
 8003432:	f004 f8b6 	bl	80075a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003436:	200a      	movs	r0, #10
 8003438:	f004 f8cf 	bl	80075da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800343c:	bf00      	nop
 800343e:	3738      	adds	r7, #56	@ 0x38
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	40021800 	.word	0x40021800
 800344c:	40020000 	.word	0x40020000
 8003450:	40020400 	.word	0x40020400
 8003454:	40020800 	.word	0x40020800

08003458 <positionPIDByMe>:

/* USER CODE BEGIN 4 */
int16_t positionPIDByMe(int16_t *prevDiff, int8_t *isNegativeRegion1, int8_t *previousRegion1, int16_t DifferenceBetweenCurrentAndWannabePosition, int16_t *sumI1, float kPu, float kIu, float kDu) {
 8003458:	b480      	push	{r7}
 800345a:	b08b      	sub	sp, #44	@ 0x2c
 800345c:	af00      	add	r7, sp, #0
 800345e:	61f8      	str	r0, [r7, #28]
 8003460:	61b9      	str	r1, [r7, #24]
 8003462:	617a      	str	r2, [r7, #20]
 8003464:	ed87 0a03 	vstr	s0, [r7, #12]
 8003468:	edc7 0a02 	vstr	s1, [r7, #8]
 800346c:	ed87 1a01 	vstr	s2, [r7, #4]
 8003470:	827b      	strh	r3, [r7, #18]
	if (DifferenceBetweenCurrentAndWannabePosition >= 0) {
 8003472:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db03      	blt.n	8003482 <positionPIDByMe+0x2a>
		*isNegativeRegion1 = -1;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	22ff      	movs	r2, #255	@ 0xff
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e002      	b.n	8003488 <positionPIDByMe+0x30>
	} else {
		*isNegativeRegion1 = 1;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
	}
	if (*isNegativeRegion1 != *previousRegion1) {
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f993 2000 	ldrsb.w	r2, [r3]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f993 3000 	ldrsb.w	r3, [r3]
 8003494:	429a      	cmp	r2, r3
 8003496:	d002      	beq.n	800349e <positionPIDByMe+0x46>
		*sumI1 = 0;
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	2200      	movs	r2, #0
 800349c:	801a      	strh	r2, [r3, #0]
	}
	*previousRegion1 = *isNegativeRegion1;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f993 2000 	ldrsb.w	r2, [r3]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	701a      	strb	r2, [r3, #0]
	*sumI1 += (int)((float)(DifferenceBetweenCurrentAndWannabePosition)*0.005f);
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034bc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003568 <positionPIDByMe+0x110>
 80034c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c8:	ee17 3a90 	vmov	r3, s15
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	b21a      	sxth	r2, r3
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	801a      	strh	r2, [r3, #0]
	int16_t PositionToGo = (int)(kPu*(float)(DifferenceBetweenCurrentAndWannabePosition));
 80034d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034f0:	ee17 3a90 	vmov	r3, s15
 80034f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t IntegralToGo = (int)(kIu*((float)(*sumI1)));
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003504:	edd7 7a02 	vldr	s15, [r7, #8]
 8003508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003510:	ee17 3a90 	vmov	r3, s15
 8003514:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t DerivativeToGo = (int)((kDu)*((float)(DifferenceBetweenCurrentAndWannabePosition - *prevDiff))*(float)200);
 8003516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800352a:	edd7 7a01 	vldr	s15, [r7, #4]
 800352e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003532:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800356c <positionPIDByMe+0x114>
 8003536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353e:	ee17 3a90 	vmov	r3, s15
 8003542:	847b      	strh	r3, [r7, #34]	@ 0x22
	*prevDiff = DifferenceBetweenCurrentAndWannabePosition;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	8a7a      	ldrh	r2, [r7, #18]
 8003548:	801a      	strh	r2, [r3, #0]
	return PositionToGo+IntegralToGo+DerivativeToGo;
 800354a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800354c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800354e:	4413      	add	r3, r2
 8003550:	b29a      	uxth	r2, r3
 8003552:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003554:	4413      	add	r3, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	b21b      	sxth	r3, r3
}
 800355a:	4618      	mov	r0, r3
 800355c:	372c      	adds	r7, #44	@ 0x2c
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	3ba3d70a 	.word	0x3ba3d70a
 800356c:	43480000 	.word	0x43480000

08003570 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8003578:	f7fd fd3c 	bl	8000ff4 <BMI088_accel_init>
		// usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 800357c:	f7fd fdf2 	bl	8001164 <BMI088_gyro_init>
		// usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
	}
	if (ist8310_init()) {
 8003580:	f7fe ffb6 	bl	80024f0 <ist8310_init>
		//set_motor_voltage(5, 4000);

		// HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);

		// PWMOn(LED,1);
		PWMOutput(LED, 1, 500);
 8003584:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003588:	2101      	movs	r1, #1
 800358a:	2001      	movs	r0, #1
 800358c:	f001 fce2 	bl	8004f54 <PWMOutput>
		PWMInitialize(LED, FR, 1, 0.9);
 8003590:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80035c8 <TaskMain+0x58>
 8003594:	2201      	movs	r2, #1
 8003596:	2101      	movs	r1, #1
 8003598:	2001      	movs	r0, #1
 800359a:	f001 fbc3 	bl	8004d24 <PWMInitialize>
		// PWMTimerStarter();
		usart_printf("on\r\n");
 800359e:	480b      	ldr	r0, [pc, #44]	@ (80035cc <TaskMain+0x5c>)
 80035a0:	f7fe fbfe 	bl	8001da0 <usart_printf>
		osDelay(500);
 80035a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80035a8:	f009 f88e 	bl	800c6c8 <osDelay>
		//sendB2bData(CAN_b2b_A_ID, 1, 1, 1, 1);
		// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
		//set_motor_voltage(5, -4000);
		// HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
		PWMOff(LED, 1);
 80035ac:	2101      	movs	r1, #1
 80035ae:	2001      	movs	r0, #1
 80035b0:	f001 fd00 	bl	8004fb4 <PWMOff>
		// PWMTimerStarter();
		usart_printf("off\r\n");
 80035b4:	4806      	ldr	r0, [pc, #24]	@ (80035d0 <TaskMain+0x60>)
 80035b6:	f7fe fbf3 	bl	8001da0 <usart_printf>
		osDelay(500);
 80035ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80035be:	f009 f883 	bl	800c6c8 <osDelay>
		PWMOutput(LED, 1, 500);
 80035c2:	bf00      	nop
 80035c4:	e7de      	b.n	8003584 <TaskMain+0x14>
 80035c6:	bf00      	nop
 80035c8:	3f666666 	.word	0x3f666666
 80035cc:	080132bc 	.word	0x080132bc
 80035d0:	080132c4 	.word	0x080132c4
 80035d4:	00000000 	.word	0x00000000

080035d8 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80035d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035dc:	b0d0      	sub	sp, #320	@ 0x140
 80035de:	af02      	add	r7, sp, #8
 80035e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80035e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80035e8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN TaskChassis */
	/* USER CODE BEGIN TaskChassis */
	int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 80035ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	605a      	str	r2, [r3, #4]
	int16_t rcPitch = 0;                                   // range: 3376 ~ 2132
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	htim4.Instance->CCR3=0;
	*/

	int8_t motorOn = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
	int8_t switched = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
	int8_t shot1Round = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
	//int8_t RNC = 0;
	int16_t sumI1 =0;
 800360c:	2300      	movs	r3, #0
 800360e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	int16_t sumI2 =0;
 8003612:	2300      	movs	r3, #0
 8003614:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	int16_t sumI3 =0;
 8003618:	2300      	movs	r3, #0
 800361a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	int16_t sumI4 =0;
 800361e:	2300      	movs	r3, #0
 8003620:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
	int8_t isNegativeRegion1 = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	int8_t isNegativeRegion2 = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
	int8_t isNegativeRegion3 = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
	int8_t isNegativeRegion4 = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
	int8_t previousRegion1 = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
	int8_t previousRegion2 = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
	int8_t previousRegion3 = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
	int8_t previousRegion4 = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 3130 	strb.w	r3, [r7, #304]	@ 0x130
	int16_t prevDiff1 = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	int16_t prevDiff2 = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	int16_t prevDiff3 = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
	int16_t prevDiff4 = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde

	int16_t shooterMotor = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
	// int16_t pR = 0;
	//int8_t counter = 0;
	uint16_t testmotor = 6161;
 8003672:	f641 0311 	movw	r3, #6161	@ 0x1811
 8003676:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	uint16_t pivoter = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
	double angle = 0;
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	int16_t xJoystickDirection = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
	int16_t yJoystickDirection = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
	int16_t rotationOfChassis = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
	// Total Rotation is 1.25 times for 90degrees therefore motor has to rotate
	// PID onto this (This is the hypothetical orientation)
	int16_t chassisOrientation = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
	int16_t chassisPID = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
	int16_t rcVal2 = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116

	int16_t randomOrientations[24] = {-380, -202, 462, -114, 240, -210, 150, 170, 248, 106, 118, 538, -260, -288, -120, 86, -264, 452, -592, 390, -410, 414, 54, -542};
 80036b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80036b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036b8:	4ad2      	ldr	r2, [pc, #840]	@ (8003a04 <TaskChassis+0x42c>)
 80036ba:	461c      	mov	r4, r3
 80036bc:	4615      	mov	r5, r2
 80036be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80036ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t startingVal = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
	int8_t started = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	uint8_t increment = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
	int16_t instancesCounter = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110

	int16_t previousVal = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	int32_t rotationalVal = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	int16_t revolutions = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
	int8_t resetPerStart = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
	int32_t rotationTarget = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	int32_t posForGunMotor = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	int8_t burst = 3;
 800370a:	2303      	movs	r3, #3
 800370c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

	int8_t customFiringModeSwitcher = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
	int8_t startedChecking = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
	int8_t switchedDown = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
	int8_t finalTHing = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
	int16_t counterForSwitching = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8

	int16_t buzzLengthCounter = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
	int8_t beepingInProgress = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
	int8_t beeped = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5

	int16_t rotationCompStab = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
	int16_t testTHing[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8003746:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800374a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	611a      	str	r2, [r3, #16]
 800375a:	829a      	strh	r2, [r3, #20]
	*/

	for(;;) {


		for (int i = 0; i < 4; i++) {
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003762:	e020      	b.n	80037a6 <TaskChassis+0x1ce>
			rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 8003764:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003768:	b25b      	sxtb	r3, r3
 800376a:	4618      	mov	r0, r3
 800376c:	f001 ff1e 	bl	80055ac <getRCchannel>
 8003770:	4603      	mov	r3, r0
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377a:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8003a08 <TaskChassis+0x430>
 800377e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003786:	ee17 3a90 	vmov	r3, s15
 800378a:	b21a      	sxth	r2, r3
 800378c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003796:	443b      	add	r3, r7
 8003798:	f823 2cc8 	strh.w	r2, [r3, #-200]
		for (int i = 0; i < 4; i++) {
 800379c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037a0:	3301      	adds	r3, #1
 80037a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	ddda      	ble.n	8003764 <TaskChassis+0x18c>
		rcRPM[0] = 0;
		rcRPM[1] = 0;
		rcRPM[2] = arrayOfMOvement[0];
		rcRPM[3] = arrayOfMOvement[1];
		*/
		rcPitch = getRCchannel(1) * 0.94f + 2754;
 80037ae:	2001      	movs	r0, #1
 80037b0:	f001 fefc 	bl	80055ac <getRCchannel>
 80037b4:	4603      	mov	r3, r0
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037be:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8003a0c <TaskChassis+0x434>
 80037c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c6:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8003a10 <TaskChassis+0x438>
 80037ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037d2:	ee17 3a90 	vmov	r3, s15
 80037d6:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
		int16_t leftDial = getRCchannel(4);
 80037da:	2004      	movs	r0, #4
 80037dc:	f001 fee6 	bl	80055ac <getRCchannel>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0

		int8_t chassisTurning = getRCswitch(1);
 80037e6:	2001      	movs	r0, #1
 80037e8:	f001 fef4 	bl	80055d4 <getRCswitch>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		float funnyKP = 0.022;
 80037f2:	4b88      	ldr	r3, [pc, #544]	@ (8003a14 <TaskChassis+0x43c>)
 80037f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		float funnyKI = -0.02;
 80037f8:	4b87      	ldr	r3, [pc, #540]	@ (8003a18 <TaskChassis+0x440>)
 80037fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		float funnyKD = 0.00005;
 80037fe:	4b87      	ldr	r3, [pc, #540]	@ (8003a1c <TaskChassis+0x444>)
 8003800:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		float rotationScalar = -540; //-540
 8003804:	4b86      	ldr	r3, [pc, #536]	@ (8003a20 <TaskChassis+0x448>)
 8003806:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		if (counterForSwitching > 200) {
 800380a:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 800380e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003810:	dd0b      	ble.n	800382a <TaskChassis+0x252>
			startedChecking = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
			switchedDown = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
			finalTHing = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
			counterForSwitching = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		}

		if (startedChecking == 1) {
 800382a:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 800382e:	2b01      	cmp	r3, #1
 8003830:	d106      	bne.n	8003840 <TaskChassis+0x268>
			counterForSwitching++;
 8003832:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 8003836:	b29b      	uxth	r3, r3
 8003838:	3301      	adds	r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
		}

		int8_t movementUpOrDown = 5;
 8003840:	2305      	movs	r3, #5
 8003842:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
		if (increment == 18) {
 8003846:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 800384a:	2b12      	cmp	r3, #18
 800384c:	d102      	bne.n	8003854 <TaskChassis+0x27c>
			increment = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
		}

		if (instancesCounter > 100) {
 8003854:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	@ 0x110
 8003858:	2b64      	cmp	r3, #100	@ 0x64
 800385a:	dd07      	ble.n	800386c <TaskChassis+0x294>
			increment++;
 800385c:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 8003860:	3301      	adds	r3, #1
 8003862:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
			instancesCounter = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
		}

		if (chassisTurning == 1 && startedChecking == 0) {
 800386c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8003870:	2b01      	cmp	r3, #1
 8003872:	d109      	bne.n	8003888 <TaskChassis+0x2b0>
 8003874:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <TaskChassis+0x2b0>
			counterForSwitching = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
			startedChecking = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd

		}
		if (chassisTurning == 3 && startedChecking == 1) {
 8003888:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 800388c:	2b03      	cmp	r3, #3
 800388e:	d106      	bne.n	800389e <TaskChassis+0x2c6>
 8003890:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <TaskChassis+0x2c6>
			switchedDown = 1;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
		}
		if (chassisTurning == 1 && startedChecking == 1 && switchedDown == 1) {
 800389e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10a      	bne.n	80038bc <TaskChassis+0x2e4>
 80038a6:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d106      	bne.n	80038bc <TaskChassis+0x2e4>
 80038ae:	f997 30fc 	ldrsb.w	r3, [r7, #252]	@ 0xfc
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <TaskChassis+0x2e4>
			finalTHing = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
		}

		if (chassisTurning == 3 && startedChecking == 1 && switchedDown == 1 && finalTHing == 1 && counterForSwitching < 200) {
 80038bc:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d128      	bne.n	8003916 <TaskChassis+0x33e>
 80038c4:	f997 30fd 	ldrsb.w	r3, [r7, #253]	@ 0xfd
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d124      	bne.n	8003916 <TaskChassis+0x33e>
 80038cc:	f997 30fc 	ldrsb.w	r3, [r7, #252]	@ 0xfc
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d120      	bne.n	8003916 <TaskChassis+0x33e>
 80038d4:	f997 30fb 	ldrsb.w	r3, [r7, #251]	@ 0xfb
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d11c      	bne.n	8003916 <TaskChassis+0x33e>
 80038dc:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	@ 0xf8
 80038e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80038e2:	dc18      	bgt.n	8003916 <TaskChassis+0x33e>
			switchedDown = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
			startedChecking = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
			counterForSwitching = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8a7 30f8 	strh.w	r3, [r7, #248]	@ 0xf8
			finalTHing = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
			customFiringModeSwitcher++;
 80038fc:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 8003900:	b2db      	uxtb	r3, r3
 8003902:	3301      	adds	r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
			beeped = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
			buzzLengthCounter = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

		}
		if (customFiringModeSwitcher > 2) {
 8003916:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 800391a:	2b02      	cmp	r3, #2
 800391c:	dd02      	ble.n	8003924 <TaskChassis+0x34c>
			customFiringModeSwitcher = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
		PWMOutput(LED, 3, 500);
		PWMOutput(Buzzer, 3, 1000);
		PWMOff(LED, 3);
		PWMOff(Buzzer, 3);
		*/
		PWMInitialize(Buzzer, 2, FR, 0.9);
 8003924:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8003a24 <TaskChassis+0x44c>
 8003928:	2201      	movs	r2, #1
 800392a:	2102      	movs	r1, #2
 800392c:	2002      	movs	r0, #2
 800392e:	f001 f9f9 	bl	8004d24 <PWMInitialize>
		PWMInitialize(LED, FR, 3, 0.9);
 8003932:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8003a24 <TaskChassis+0x44c>
 8003936:	2203      	movs	r2, #3
 8003938:	2101      	movs	r1, #1
 800393a:	2001      	movs	r0, #1
 800393c:	f001 f9f2 	bl	8004d24 <PWMInitialize>
		if (beeped == 0) {
 8003940:	f997 30f5 	ldrsb.w	r3, [r7, #245]	@ 0xf5
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 80b0 	bne.w	8003aaa <TaskChassis+0x4d2>
			switch (customFiringModeSwitcher) {
 800394a:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 800394e:	2b02      	cmp	r3, #2
 8003950:	d06a      	beq.n	8003a28 <TaskChassis+0x450>
 8003952:	2b02      	cmp	r3, #2
 8003954:	f300 80a9 	bgt.w	8003aaa <TaskChassis+0x4d2>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <TaskChassis+0x38a>
 800395c:	2b01      	cmp	r3, #1
 800395e:	d028      	beq.n	80039b2 <TaskChassis+0x3da>
 8003960:	e0a3      	b.n	8003aaa <TaskChassis+0x4d2>
			case 0:
				if ((buzzLengthCounter == 0)) {
 8003962:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10c      	bne.n	8003984 <TaskChassis+0x3ac>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					/*
					htim4.Instance->CCR3=150;
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
					*/
					PWMOutput(LED, 3, 500);
 800396a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800396e:	2103      	movs	r1, #3
 8003970:	2001      	movs	r0, #1
 8003972:	f001 faef 	bl	8004f54 <PWMOutput>
					PWMOutput(Buzzer, 3, 1000);
 8003976:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800397a:	2103      	movs	r1, #3
 800397c:	2002      	movs	r0, #2
 800397e:	f001 fae9 	bl	8004f54 <PWMOutput>
 8003982:	e00e      	b.n	80039a2 <TaskChassis+0x3ca>
				}
				else if (buzzLengthCounter >=60) {
 8003984:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003988:	2b3b      	cmp	r3, #59	@ 0x3b
 800398a:	dd0a      	ble.n	80039a2 <TaskChassis+0x3ca>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					/*
					htim4.Instance->CCR3=0;
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
					*/
					PWMOff(LED, 3);
 8003992:	2103      	movs	r1, #3
 8003994:	2001      	movs	r0, #1
 8003996:	f001 fb0d 	bl	8004fb4 <PWMOff>
					PWMOff(Buzzer, 3);
 800399a:	2103      	movs	r1, #3
 800399c:	2002      	movs	r0, #2
 800399e:	f001 fb09 	bl	8004fb4 <PWMOff>
				}
				buzzLengthCounter++;
 80039a2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
				break;
 80039b0:	e07b      	b.n	8003aaa <TaskChassis+0x4d2>
			case 1:
				if (buzzLengthCounter == 0) {
 80039b2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <TaskChassis+0x3fc>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					/*
					htim4.Instance->CCR3=150;
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
					*/
					PWMOutput(LED, 3, 500);
 80039ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80039be:	2103      	movs	r1, #3
 80039c0:	2001      	movs	r0, #1
 80039c2:	f001 fac7 	bl	8004f54 <PWMOutput>
					PWMOutput(Buzzer, 3, 1000);
 80039c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039ca:	2103      	movs	r1, #3
 80039cc:	2002      	movs	r0, #2
 80039ce:	f001 fac1 	bl	8004f54 <PWMOutput>
 80039d2:	e00e      	b.n	80039f2 <TaskChassis+0x41a>
				} else if (buzzLengthCounter >=12) {
 80039d4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 80039d8:	2b0b      	cmp	r3, #11
 80039da:	dd0a      	ble.n	80039f2 <TaskChassis+0x41a>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					/*
					htim4.Instance->CCR3=0;
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
					*/
					PWMOff(LED, 3);
 80039e2:	2103      	movs	r1, #3
 80039e4:	2001      	movs	r0, #1
 80039e6:	f001 fae5 	bl	8004fb4 <PWMOff>
					PWMOff(Buzzer, 3);
 80039ea:	2103      	movs	r1, #3
 80039ec:	2002      	movs	r0, #2
 80039ee:	f001 fae1 	bl	8004fb4 <PWMOff>
				}
				buzzLengthCounter++;
 80039f2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
				break;
 8003a00:	e053      	b.n	8003aaa <TaskChassis+0x4d2>
 8003a02:	bf00      	nop
 8003a04:	080132cc 	.word	0x080132cc
 8003a08:	415a51ec 	.word	0x415a51ec
 8003a0c:	3f70a3d7 	.word	0x3f70a3d7
 8003a10:	452c2000 	.word	0x452c2000
 8003a14:	3cb43958 	.word	0x3cb43958
 8003a18:	bca3d70a 	.word	0xbca3d70a
 8003a1c:	3851b717 	.word	0x3851b717
 8003a20:	c4070000 	.word	0xc4070000
 8003a24:	3f666666 	.word	0x3f666666
			case 2:
				if ((buzzLengthCounter == 0) || (buzzLengthCounter == 30) || (buzzLengthCounter == 60)) {
 8003a28:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <TaskChassis+0x468>
 8003a30:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003a34:	2b1e      	cmp	r3, #30
 8003a36:	d003      	beq.n	8003a40 <TaskChassis+0x468>
 8003a38:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003a3c:	2b3c      	cmp	r3, #60	@ 0x3c
 8003a3e:	d10c      	bne.n	8003a5a <TaskChassis+0x482>
					// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
					/*
					htim4.Instance->CCR3=150;
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 1);
					*/
					PWMOutput(LED, 3, 500);
 8003a40:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003a44:	2103      	movs	r1, #3
 8003a46:	2001      	movs	r0, #1
 8003a48:	f001 fa84 	bl	8004f54 <PWMOutput>
					PWMOutput(Buzzer, 3, 1000);
 8003a4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a50:	2103      	movs	r1, #3
 8003a52:	2002      	movs	r0, #2
 8003a54:	f001 fa7e 	bl	8004f54 <PWMOutput>
 8003a58:	e01f      	b.n	8003a9a <TaskChassis+0x4c2>
				} else if ((buzzLengthCounter == 15) || (buzzLengthCounter == 45)) {
 8003a5a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003a5e:	2b0f      	cmp	r3, #15
 8003a60:	d003      	beq.n	8003a6a <TaskChassis+0x492>
 8003a62:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003a66:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a68:	d108      	bne.n	8003a7c <TaskChassis+0x4a4>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					/*
					htim4.Instance->CCR3=0;
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
					*/
					PWMOff(LED, 3);
 8003a6a:	2103      	movs	r1, #3
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f001 faa1 	bl	8004fb4 <PWMOff>
					PWMOff(Buzzer, 3);
 8003a72:	2103      	movs	r1, #3
 8003a74:	2002      	movs	r0, #2
 8003a76:	f001 fa9d 	bl	8004fb4 <PWMOff>
 8003a7a:	e00e      	b.n	8003a9a <TaskChassis+0x4c2>
				} else if (buzzLengthCounter >=75) {
 8003a7c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003a80:	2b4a      	cmp	r3, #74	@ 0x4a
 8003a82:	dd0a      	ble.n	8003a9a <TaskChassis+0x4c2>
					// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
					beeped = 1;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
					/*
					htim4.Instance->CCR3=0;
					HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, 0);
					*/
					PWMOff(LED, 3);
 8003a8a:	2103      	movs	r1, #3
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f001 fa91 	bl	8004fb4 <PWMOff>
					PWMOff(Buzzer, 3);
 8003a92:	2103      	movs	r1, #3
 8003a94:	2002      	movs	r0, #2
 8003a96:	f001 fa8d 	bl	8004fb4 <PWMOff>
				}
				buzzLengthCounter++;
 8003a9a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	@ 0xf6
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
				break;
 8003aa8:	bf00      	nop
			}
		}



		switch (chassisTurning) {
 8003aaa:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d002      	beq.n	8003ab8 <TaskChassis+0x4e0>
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d072      	beq.n	8003b9c <TaskChassis+0x5c4>
 8003ab6:	e1c7      	b.n	8003e48 <TaskChassis+0x870>
		case 1:
			xJoystickDirection = rcRPM[2]*cos(angle) - rcRPM[3]*sin(angle);
 8003ab8:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fc fd31 	bl	8000524 <__aeabi_i2d>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	460d      	mov	r5, r1
 8003ac6:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 8003aca:	f00e fb49 	bl	8012160 <cos>
 8003ace:	ec53 2b10 	vmov	r2, r3, d0
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f7fc fd8f 	bl	80005f8 <__aeabi_dmul>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fc fd1c 	bl	8000524 <__aeabi_i2d>
 8003aec:	4604      	mov	r4, r0
 8003aee:	460d      	mov	r5, r1
 8003af0:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 8003af4:	f00e fb88 	bl	8012208 <sin>
 8003af8:	ec53 2b10 	vmov	r2, r3, d0
 8003afc:	4620      	mov	r0, r4
 8003afe:	4629      	mov	r1, r5
 8003b00:	f7fc fd7a 	bl	80005f8 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4640      	mov	r0, r8
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	f7fc fbbc 	bl	8000288 <__aeabi_dsub>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	f7fd f81e 	bl	8000b58 <__aeabi_d2iz>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
			yJoystickDirection = rcRPM[2]*sin(angle) + rcRPM[3]*cos(angle);
 8003b22:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fcfc 	bl	8000524 <__aeabi_i2d>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	460d      	mov	r5, r1
 8003b30:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 8003b34:	f00e fb68 	bl	8012208 <sin>
 8003b38:	ec53 2b10 	vmov	r2, r3, d0
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	4629      	mov	r1, r5
 8003b40:	f7fc fd5a 	bl	80005f8 <__aeabi_dmul>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4690      	mov	r8, r2
 8003b4a:	4699      	mov	r9, r3
 8003b4c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fc fce7 	bl	8000524 <__aeabi_i2d>
 8003b56:	4604      	mov	r4, r0
 8003b58:	460d      	mov	r5, r1
 8003b5a:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 8003b5e:	f00e faff 	bl	8012160 <cos>
 8003b62:	ec53 2b10 	vmov	r2, r3, d0
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7fc fd45 	bl	80005f8 <__aeabi_dmul>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4640      	mov	r0, r8
 8003b74:	4649      	mov	r1, r9
 8003b76:	f7fc fb89 	bl	800028c <__adddf3>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	f7fc ffe9 	bl	8000b58 <__aeabi_d2iz>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
			rotationOfChassis = rcRPM[0];
 8003b8c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8003b90:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a


			started = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113



			break;
 8003b9a:	e164      	b.n	8003e66 <TaskChassis+0x88e>
		case 2:
			int8_t delta = 5;
 8003b9c:	2305      	movs	r3, #5
 8003b9e:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
			if (started == 0) {
 8003ba2:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <TaskChassis+0x5de>
				startingVal = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
				started = 1;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
			}
			if (startingVal >= randomOrientations[increment]-delta && startingVal <= randomOrientations[increment]+delta) {
 8003bb6:	f9b7 2114 	ldrsh.w	r2, [r7, #276]	@ 0x114
 8003bba:	f897 1112 	ldrb.w	r1, [r7, #274]	@ 0x112
 8003bbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bc6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 8003bd0:	1acb      	subs	r3, r1, r3
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	db17      	blt.n	8003c06 <TaskChassis+0x62e>
 8003bd6:	f9b7 2114 	ldrsh.w	r2, [r7, #276]	@ 0x114
 8003bda:	f897 1112 	ldrb.w	r1, [r7, #274]	@ 0x112
 8003bde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003be6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8003bea:	4619      	mov	r1, r3
 8003bec:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 8003bf0:	440b      	add	r3, r1
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	dc07      	bgt.n	8003c06 <TaskChassis+0x62e>
				instancesCounter++;
 8003bf6:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	@ 0x110
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8003c04:	e022      	b.n	8003c4c <TaskChassis+0x674>
			} else if (startingVal > randomOrientations[increment]-delta) {
 8003c06:	f9b7 2114 	ldrsh.w	r2, [r7, #276]	@ 0x114
 8003c0a:	f897 1112 	ldrb.w	r1, [r7, #274]	@ 0x112
 8003c0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8003c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c16:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f997 30ba 	ldrsb.w	r3, [r7, #186]	@ 0xba
 8003c20:	1acb      	subs	r3, r1, r3
 8003c22:	429a      	cmp	r2, r3
 8003c24:	dd09      	ble.n	8003c3a <TaskChassis+0x662>
				startingVal -= movementUpOrDown;
 8003c26:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8003c2a:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
 8003c38:	e008      	b.n	8003c4c <TaskChassis+0x674>
			} else {
				startingVal += movementUpOrDown;
 8003c3a:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8003c44:	4413      	add	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
			}


			xJoystickDirection = rcRPM[2]*cos(angle) - rcRPM[3]*sin(angle);
 8003c4c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fc67 	bl	8000524 <__aeabi_i2d>
 8003c56:	4604      	mov	r4, r0
 8003c58:	460d      	mov	r5, r1
 8003c5a:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 8003c5e:	f00e fa7f 	bl	8012160 <cos>
 8003c62:	ec53 2b10 	vmov	r2, r3, d0
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f7fc fcc5 	bl	80005f8 <__aeabi_dmul>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc fc52 	bl	8000524 <__aeabi_i2d>
 8003c80:	4604      	mov	r4, r0
 8003c82:	460d      	mov	r5, r1
 8003c84:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 8003c88:	f00e fabe 	bl	8012208 <sin>
 8003c8c:	ec53 2b10 	vmov	r2, r3, d0
 8003c90:	4620      	mov	r0, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	f7fc fcb0 	bl	80005f8 <__aeabi_dmul>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	f7fc faf2 	bl	8000288 <__aeabi_dsub>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	f7fc ff54 	bl	8000b58 <__aeabi_d2iz>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
			yJoystickDirection = rcRPM[2]*sin(angle) + rcRPM[3]*cos(angle);
 8003cb6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fc32 	bl	8000524 <__aeabi_i2d>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 8003cc8:	f00e fa9e 	bl	8012208 <sin>
 8003ccc:	ec53 2b10 	vmov	r2, r3, d0
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f7fc fc90 	bl	80005f8 <__aeabi_dmul>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4690      	mov	r8, r2
 8003cde:	4699      	mov	r9, r3
 8003ce0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fc fc1d 	bl	8000524 <__aeabi_i2d>
 8003cea:	4604      	mov	r4, r0
 8003cec:	460d      	mov	r5, r1
 8003cee:	ed97 0b48 	vldr	d0, [r7, #288]	@ 0x120
 8003cf2:	f00e fa35 	bl	8012160 <cos>
 8003cf6:	ec53 2b10 	vmov	r2, r3, d0
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f7fc fc7b 	bl	80005f8 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4640      	mov	r0, r8
 8003d08:	4649      	mov	r1, r9
 8003d0a:	f7fc fabf 	bl	800028c <__adddf3>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f7fc ff1f 	bl	8000b58 <__aeabi_d2iz>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
			int16_t hypotheticalP = funnyKP*(startingVal - chassisOrientation);
 8003d20:	f9b7 2114 	ldrsh.w	r2, [r7, #276]	@ 0x114
 8003d24:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d32:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d3e:	ee17 3a90 	vmov	r3, s15
 8003d42:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
			if (hypotheticalP >= 0) {
 8003d46:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	@ 0xb8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db03      	blt.n	8003d56 <TaskChassis+0x77e>
				isNegativeRegion3 = -1;
 8003d4e:	23ff      	movs	r3, #255	@ 0xff
 8003d50:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 8003d54:	e002      	b.n	8003d5c <TaskChassis+0x784>
			} else {
				isNegativeRegion3 = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
			}
			if (hypotheticalP != previousRegion3) {
 8003d5c:	f997 3131 	ldrsb.w	r3, [r7, #305]	@ 0x131
 8003d60:	b21b      	sxth	r3, r3
 8003d62:	f9b7 20b8 	ldrsh.w	r2, [r7, #184]	@ 0xb8
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d002      	beq.n	8003d70 <TaskChassis+0x798>
				sumI3 = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
			}
			previousRegion3 = hypotheticalP;
 8003d70:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8003d74:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
			sumI3 += (startingVal - chassisOrientation)*0.005;
 8003d78:	f9b7 3134 	ldrsh.w	r3, [r7, #308]	@ 0x134
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fbd1 	bl	8000524 <__aeabi_i2d>
 8003d82:	4604      	mov	r4, r0
 8003d84:	460d      	mov	r5, r1
 8003d86:	f9b7 2114 	ldrsh.w	r2, [r7, #276]	@ 0x114
 8003d8a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc fbc7 	bl	8000524 <__aeabi_i2d>
 8003d96:	a3ca      	add	r3, pc, #808	@ (adr r3, 80040c0 <TaskChassis+0xae8>)
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f7fc fc2c 	bl	80005f8 <__aeabi_dmul>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4620      	mov	r0, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	f7fc fa70 	bl	800028c <__adddf3>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	f7fc fed0 	bl	8000b58 <__aeabi_d2iz>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
			int16_t hypotheticalI = funnyKI*(sumI3);
 8003dbe:	f9b7 3134 	ldrsh.w	r3, [r7, #308]	@ 0x134
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dca:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dd6:	ee17 3a90 	vmov	r3, s15
 8003dda:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
			int16_t hypotheticalD = funnyKD*(startingVal - chassisOrientation)*200;
 8003dde:	f9b7 2114 	ldrsh.w	r2, [r7, #276]	@ 0x114
 8003de2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df0:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8003df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df8:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 80040c8 <TaskChassis+0xaf0>
 8003dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e04:	ee17 3a90 	vmov	r3, s15
 8003e08:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
			chassisPID = hypotheticalP + hypotheticalI + hypotheticalD;
 8003e0c:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 8003e10:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8003e14:	4413      	add	r3, r2
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8003e1c:	4413      	add	r3, r2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
			chassisOrientation += chassisPID;
 8003e24:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8003e28:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
			//rotationOfChassis = rcRPM[0]+rotationScalar*chassisPID;

			rotationOfChassis = rcRPM[0] + rotationCompStab;
 8003e34:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8003e3e:	4413      	add	r3, r2
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
			chassisPID = hypotheticalP + hypotheticalI + hypotheticalD;
			chassisOrientation += chassisPID;
			rotationOfChassis = rcRPM[0]+rotationScalar*chassisPID;
			*/

			break;
 8003e46:	e00e      	b.n	8003e66 <TaskChassis+0x88e>
		default:
			started = 0;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
			xJoystickDirection = rcRPM[2];
 8003e4e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8003e52:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
			yJoystickDirection = rcRPM[3];
 8003e56:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003e5a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
			rotationOfChassis = rcRPM[0];
 8003e5e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8003e62:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
		}
		// int16_t chassisConvert = ((-1*(chassisOrientation))*3.32f)+4755;


		chassisTargetRPM.motorRPM[0] = yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003e66:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8003e6a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8003e6e:	4413      	add	r3, r2
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8003e76:	4413      	add	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	b21a      	sxth	r2, r3
 8003e7c:	4b93      	ldr	r3, [pc, #588]	@ (80040cc <TaskChassis+0xaf4>)
 8003e7e:	801a      	strh	r2, [r3, #0]
		chassisTargetRPM.motorRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003e80:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8003e84:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8003e88:	4413      	add	r3, r2
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	4b8d      	ldr	r3, [pc, #564]	@ (80040cc <TaskChassis+0xaf4>)
 8003e98:	805a      	strh	r2, [r3, #2]
		chassisTargetRPM.motorRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003e9a:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8003e9e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	b21a      	sxth	r2, r3
 8003eb0:	4b86      	ldr	r3, [pc, #536]	@ (80040cc <TaskChassis+0xaf4>)
 8003eb2:	809a      	strh	r2, [r3, #4]
		chassisTargetRPM.motorRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003eb4:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 8003eb8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8003ec4:	4413      	add	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	b21a      	sxth	r2, r3
 8003eca:	4b80      	ldr	r3, [pc, #512]	@ (80040cc <TaskChassis+0xaf4>)
 8003ecc:	80da      	strh	r2, [r3, #6]
		//if (calcChassisPower >= 30) {
		//chassisTargetCurrent = applyPowerlimit(chassis, chassisTargetRPM, calcChassisPower);

		//CAN1_cmd_b2b(CAN_b2b_A_ID, 1, 1, 1, 1);

		float kPg = 0.1;
 8003ece:	4b80      	ldr	r3, [pc, #512]	@ (80040d0 <TaskChassis+0xaf8>)
 8003ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		float kIg = 0;
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		float kDg = 0;
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		if (customFiringModeSwitcher == 1) {
 8003ee4:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d103      	bne.n	8003ef4 <TaskChassis+0x91c>
			burst = 1;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8003ef2:	e006      	b.n	8003f02 <TaskChassis+0x92a>
		} else if (customFiringModeSwitcher == 2) {
 8003ef4:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d102      	bne.n	8003f02 <TaskChassis+0x92a>
			burst = 3;
 8003efc:	2303      	movs	r3, #3
 8003efe:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff





		setM3508RPM(1, chassisTargetRPM.motorRPM[0], chassisPreset);
 8003f02:	4b72      	ldr	r3, [pc, #456]	@ (80040cc <TaskChassis+0xaf4>)
 8003f04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f08:	4b72      	ldr	r3, [pc, #456]	@ (80040d4 <TaskChassis+0xafc>)
 8003f0a:	edd3 6a00 	vldr	s13, [r3]
 8003f0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f12:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f16:	eeb0 0a66 	vmov.f32	s0, s13
 8003f1a:	eef0 0a47 	vmov.f32	s1, s14
 8003f1e:	eeb0 1a67 	vmov.f32	s2, s15
 8003f22:	4611      	mov	r1, r2
 8003f24:	2001      	movs	r0, #1
 8003f26:	f7fd fea3 	bl	8001c70 <setM3508RPM>
		setM3508RPM(2, chassisTargetRPM.motorRPM[1], chassisPreset);
 8003f2a:	4b68      	ldr	r3, [pc, #416]	@ (80040cc <TaskChassis+0xaf4>)
 8003f2c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003f30:	4b68      	ldr	r3, [pc, #416]	@ (80040d4 <TaskChassis+0xafc>)
 8003f32:	edd3 6a00 	vldr	s13, [r3]
 8003f36:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f3e:	eeb0 0a66 	vmov.f32	s0, s13
 8003f42:	eef0 0a47 	vmov.f32	s1, s14
 8003f46:	eeb0 1a67 	vmov.f32	s2, s15
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f7fd fe8f 	bl	8001c70 <setM3508RPM>
		setM3508RPM(3, chassisTargetRPM.motorRPM[2], chassisPreset);
 8003f52:	4b5e      	ldr	r3, [pc, #376]	@ (80040cc <TaskChassis+0xaf4>)
 8003f54:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003f58:	4b5e      	ldr	r3, [pc, #376]	@ (80040d4 <TaskChassis+0xafc>)
 8003f5a:	edd3 6a00 	vldr	s13, [r3]
 8003f5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f62:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f66:	eeb0 0a66 	vmov.f32	s0, s13
 8003f6a:	eef0 0a47 	vmov.f32	s1, s14
 8003f6e:	eeb0 1a67 	vmov.f32	s2, s15
 8003f72:	4611      	mov	r1, r2
 8003f74:	2003      	movs	r0, #3
 8003f76:	f7fd fe7b 	bl	8001c70 <setM3508RPM>
		setM3508RPM(4, chassisTargetRPM.motorRPM[3], chassisPreset);
 8003f7a:	4b54      	ldr	r3, [pc, #336]	@ (80040cc <TaskChassis+0xaf4>)
 8003f7c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003f80:	4b54      	ldr	r3, [pc, #336]	@ (80040d4 <TaskChassis+0xafc>)
 8003f82:	edd3 6a00 	vldr	s13, [r3]
 8003f86:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f8e:	eeb0 0a66 	vmov.f32	s0, s13
 8003f92:	eef0 0a47 	vmov.f32	s1, s14
 8003f96:	eeb0 1a67 	vmov.f32	s2, s15
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	2004      	movs	r0, #4
 8003f9e:	f7fd fe67 	bl	8001c70 <setM3508RPM>

		int16_t roundsPerSecond = 20;
 8003fa2:	2314      	movs	r3, #20
 8003fa4:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
		// Constant SHOULD BE 1.3636, 0.08
		int8_t rcSwitchToShoot = getRCswitch(0);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f001 fb13 	bl	80055d4 <getRCswitch>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
		if (rcSwitchToShoot == 1) {
 8003fb4:	f997 30a5 	ldrsb.w	r3, [r7, #165]	@ 0xa5
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 8125 	bne.w	8004208 <TaskChassis+0xc30>
			if (customFiringModeSwitcher == 0) {
 8003fbe:	f997 30fe 	ldrsb.w	r3, [r7, #254]	@ 0xfe
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11c      	bne.n	8004000 <TaskChassis+0xa28>
				setM3508RPM(5, roundsPerSecond * 270, chassisPreset);
 8003fc6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003fca:	461a      	mov	r2, r3
 8003fcc:	00d2      	lsls	r2, r2, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	0112      	lsls	r2, r2, #4
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b21a      	sxth	r2, r3
 8003fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80040d4 <TaskChassis+0xafc>)
 8003fde:	edd3 6a00 	vldr	s13, [r3]
 8003fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fea:	eeb0 0a66 	vmov.f32	s0, s13
 8003fee:	eef0 0a47 	vmov.f32	s1, s14
 8003ff2:	eeb0 1a67 	vmov.f32	s2, s15
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	2005      	movs	r0, #5
 8003ffa:	f7fd fe39 	bl	8001c70 <setM3508RPM>
 8003ffe:	e0ff      	b.n	8004200 <TaskChassis+0xc28>
			} else {
				shooterMotor = getMotorPosition(5);
 8004000:	2005      	movs	r0, #5
 8004002:	f7fd fe9d 	bl	8001d40 <getMotorPosition>
 8004006:	4603      	mov	r3, r0
 8004008:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
				// Resets the total rotationValue to avoid going too high
				if (resetPerStart == 0) {
 800400c:	f997 3105 	ldrsb.w	r3, [r7, #261]	@ 0x105
 8004010:	2b00      	cmp	r3, #0
 8004012:	d119      	bne.n	8004048 <TaskChassis+0xa70>
					int32_t rotationTarget1 = (36860 * burst);// + shooterMotor
 8004014:	f997 30ff 	ldrsb.w	r3, [r7, #255]	@ 0xff
 8004018:	f648 72fc 	movw	r2, #36860	@ 0x8ffc
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
					rotationTarget = rotationTarget1 + shooterMotor;
 8004024:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 8004028:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800402c:	4413      	add	r3, r2
 800402e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

					revolutions = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
					rotationalVal = shooterMotor;
 8004038:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 800403c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
					previousVal = shooterMotor;
 8004040:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8004044:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
				}
				resetPerStart = 1;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
				posForGunMotor = kPg*(rotationTarget - rotationalVal);
 800404e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8004052:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004060:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

				// counts the amount of rotations
				if ((shooterMotor - previousVal) < -1000) {
 8004074:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 8004078:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	@ 0x10e
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8004082:	da06      	bge.n	8004092 <TaskChassis+0xaba>
					 revolutions++;
 8004084:	f9b7 3106 	ldrsh.w	r3, [r7, #262]	@ 0x106
 8004088:	b29b      	uxth	r3, r3
 800408a:	3301      	adds	r3, #1
 800408c:	b29b      	uxth	r3, r3
 800408e:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
				} /* else if ((shooterMotor - previousVal) > 4500) {
				revolutions --
				}
				*/
				previousVal = shooterMotor;
 8004092:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8004096:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
				rotationalVal = shooterMotor + (revolutions*8191);
 800409a:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	@ 0xdc
 800409e:	f9b7 2106 	ldrsh.w	r2, [r7, #262]	@ 0x106
 80040a2:	4613      	mov	r3, r2
 80040a4:	035b      	lsls	r3, r3, #13
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	440b      	add	r3, r1
 80040aa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108




				// int16_t PositionToGo = kPu*(rcVal-testmotor);
				if (posForGunMotor >= 0) {
 80040ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db10      	blt.n	80040d8 <TaskChassis+0xb00>
					isNegativeRegion4 = -1;
 80040b6:	23ff      	movs	r3, #255	@ 0xff
 80040b8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 80040bc:	e00f      	b.n	80040de <TaskChassis+0xb06>
 80040be:	bf00      	nop
 80040c0:	47ae147b 	.word	0x47ae147b
 80040c4:	3f747ae1 	.word	0x3f747ae1
 80040c8:	43480000 	.word	0x43480000
 80040cc:	20000f20 	.word	0x20000f20
 80040d0:	3dcccccd 	.word	0x3dcccccd
 80040d4:	20000040 	.word	0x20000040
				} else {
					isNegativeRegion4 = 1;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
				}
				if (posForGunMotor != previousRegion4) {
 80040de:	f997 3130 	ldrsb.w	r3, [r7, #304]	@ 0x130
 80040e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d002      	beq.n	80040f0 <TaskChassis+0xb18>
					sumI4 = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
				}
				previousRegion4 = posForGunMotor;
 80040f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f4:	f887 3130 	strb.w	r3, [r7, #304]	@ 0x130
				sumI4 += (rotationTarget-testmotor)*0.005;
 80040f8:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	@ 0x132
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc fa11 	bl	8000524 <__aeabi_i2d>
 8004102:	4604      	mov	r4, r0
 8004104:	460d      	mov	r5, r1
 8004106:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800410a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc fa07 	bl	8000524 <__aeabi_i2d>
 8004116:	a3a6      	add	r3, pc, #664	@ (adr r3, 80043b0 <TaskChassis+0xdd8>)
 8004118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411c:	f7fc fa6c 	bl	80005f8 <__aeabi_dmul>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4620      	mov	r0, r4
 8004126:	4629      	mov	r1, r5
 8004128:	f7fc f8b0 	bl	800028c <__adddf3>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f7fc fd10 	bl	8000b58 <__aeabi_d2iz>
 8004138:	4603      	mov	r3, r0
 800413a:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
				int32_t IntegralToGo4 = kIg*(sumI4);
 800413e:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	@ 0x132
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800414a:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800414e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004156:	ee17 3a90 	vmov	r3, s15
 800415a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
				int32_t DerivativeToGo4 = kDg*(rotationTarget-testmotor)*200;
 800415e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8004162:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004170:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004178:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8004390 <TaskChassis+0xdb8>
 800417c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004184:	ee17 3a90 	vmov	r3, s15
 8004188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

				int32_t finalRPM = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				if ((posForGunMotor+IntegralToGo4+DerivativeToGo4) > (roundsPerSecond * 270)) {
 8004192:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004196:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800419a:	441a      	add	r2, r3
 800419c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041a0:	441a      	add	r2, r3
 80041a2:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80041a6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	429a      	cmp	r2, r3
 80041b0:	dd08      	ble.n	80041c4 <TaskChassis+0xbec>
					finalRPM =roundsPerSecond * 270;
 80041b2:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 80041b6:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041c2:	e009      	b.n	80041d8 <TaskChassis+0xc00>
				} else {
					finalRPM = posForGunMotor+IntegralToGo4+DerivativeToGo4;
 80041c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80041c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041cc:	4413      	add	r3, r2
 80041ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80041d2:	4413      	add	r3, r2
 80041d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				}
				setM3508RPM(5, finalRPM, chassisPreset);
 80041d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80041dc:	b21a      	sxth	r2, r3
 80041de:	4b6d      	ldr	r3, [pc, #436]	@ (8004394 <TaskChassis+0xdbc>)
 80041e0:	edd3 6a00 	vldr	s13, [r3]
 80041e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80041e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80041ec:	eeb0 0a66 	vmov.f32	s0, s13
 80041f0:	eef0 0a47 	vmov.f32	s1, s14
 80041f4:	eeb0 1a67 	vmov.f32	s2, s15
 80041f8:	4611      	mov	r1, r2
 80041fa:	2005      	movs	r0, #5
 80041fc:	f7fd fd38 	bl	8001c70 <setM3508RPM>
			}
			switched = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 8004206:	e013      	b.n	8004230 <TaskChassis+0xc58>
			setM3508RPM(5, roundsPerSecond * 270, chassisPreset);
			*/
			// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, rcVal + 252);
			// __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, rcVal + 252);
		} else {
			resetPerStart = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
			setM3508RPM(5, 0, chassisPreset);
 800420e:	4b61      	ldr	r3, [pc, #388]	@ (8004394 <TaskChassis+0xdbc>)
 8004210:	edd3 6a00 	vldr	s13, [r3]
 8004214:	ed93 7a01 	vldr	s14, [r3, #4]
 8004218:	edd3 7a02 	vldr	s15, [r3, #8]
 800421c:	eeb0 0a66 	vmov.f32	s0, s13
 8004220:	eef0 0a47 	vmov.f32	s1, s14
 8004224:	eeb0 1a67 	vmov.f32	s2, s15
 8004228:	2100      	movs	r1, #0
 800422a:	2005      	movs	r0, #5
 800422c:	f7fd fd20 	bl	8001c70 <setM3508RPM>
		}
		if (rcSwitchToShoot == 2 && switched == 0 && motorOn == 0) {
 8004230:	f997 30a5 	ldrsb.w	r3, [r7, #165]	@ 0xa5
 8004234:	2b02      	cmp	r3, #2
 8004236:	d10e      	bne.n	8004256 <TaskChassis+0xc7e>
 8004238:	f997 3136 	ldrsb.w	r3, [r7, #310]	@ 0x136
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <TaskChassis+0xc7e>
 8004240:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <TaskChassis+0xc7e>
			motorOn = 1;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
			switched = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
 8004254:	e011      	b.n	800427a <TaskChassis+0xca2>
		} else if (rcSwitchToShoot == 2 && switched == 0 && motorOn == 1) {
 8004256:	f997 30a5 	ldrsb.w	r3, [r7, #165]	@ 0xa5
 800425a:	2b02      	cmp	r3, #2
 800425c:	d10d      	bne.n	800427a <TaskChassis+0xca2>
 800425e:	f997 3136 	ldrsb.w	r3, [r7, #310]	@ 0x136
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <TaskChassis+0xca2>
 8004266:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 800426a:	2b01      	cmp	r3, #1
 800426c:	d105      	bne.n	800427a <TaskChassis+0xca2>
			motorOn = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
			switched = 1;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
		}
		if (rcSwitchToShoot == 3) {
 800427a:	f997 30a5 	ldrsb.w	r3, [r7, #165]	@ 0xa5
 800427e:	2b03      	cmp	r3, #3
 8004280:	d102      	bne.n	8004288 <TaskChassis+0xcb0>
			switched = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
		}


		// int16_t testingMax = getRCchannel(1)*1.15f;
		// MAX SPEED = 759
		PWMOutput(Motor, 1, 500);
 8004288:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800428c:	2101      	movs	r1, #1
 800428e:	2000      	movs	r0, #0
 8004290:	f000 fe60 	bl	8004f54 <PWMOutput>
		PWMOutput(Motor, 2, 500);
 8004294:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004298:	2102      	movs	r1, #2
 800429a:	2000      	movs	r0, #0
 800429c:	f000 fe5a 	bl	8004f54 <PWMOutput>
		//PWMInitialize(Motor, 1, )
		htim1.Instance->CCR1=200+(350*motorOn);
 80042a0:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80042a4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80042a8:	fb02 f303 	mul.w	r3, r2, r3
 80042ac:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 80042b0:	4b39      	ldr	r3, [pc, #228]	@ (8004398 <TaskChassis+0xdc0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.Instance->CCR2=200+(350*motorOn);
 80042b6:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80042ba:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 80042c6:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <TaskChassis+0xdc0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	639a      	str	r2, [r3, #56]	@ 0x38

		// int32_t dividedRotation = rotationalVal * 0.01f;
		// usart_printf("$%d %d %d\r\n;",rotationalVal, shooterMotor, rotationTarget);
		testmotor = getMotorPosition(6);
 80042cc:	2006      	movs	r0, #6
 80042ce:	f7fd fd37 	bl	8001d40 <getMotorPosition>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
		// min = 5600
		// max = 6700
		//(These are ABSOLUTE MAXES)
		// Difference = 0, 589, 1178

		float kPu =0.7; // 0.005
 80042d8:	4b30      	ldr	r3, [pc, #192]	@ (800439c <TaskChassis+0xdc4>)
 80042da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		float kIu =0; // 0.0001
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		float kDu =0.0001; // 0.0005
 80042e6:	4b2e      	ldr	r3, [pc, #184]	@ (80043a0 <TaskChassis+0xdc8>)
 80042e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c



		int16_t rcVal = (getRCchannel(1)*0.88f)+6161;
 80042ec:	2001      	movs	r0, #1
 80042ee:	f001 f95d 	bl	80055ac <getRCchannel>
 80042f2:	4603      	mov	r3, r0
 80042f4:	ee07 3a90 	vmov	s15, r3
 80042f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042fc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80043a4 <TaskChassis+0xdcc>
 8004300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004304:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80043a8 <TaskChassis+0xdd0>
 8004308:	ee77 7a87 	vadd.f32	s15, s15, s14
 800430c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004310:	ee17 3a90 	vmov	r3, s15
 8004314:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

		int16_t DifferenceBetweenCurrentAndWannabePosition = rcVal-testmotor;
 8004318:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800431c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	b29b      	uxth	r3, r3
 8004324:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

		if (testmotor < 5500) {
 8004328:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800432c:	f241 527b 	movw	r2, #5499	@ 0x157b
 8004330:	4293      	cmp	r3, r2
 8004332:	d811      	bhi.n	8004358 <TaskChassis+0xd80>
			setGM6020voltageRPM(6, 5, DONUTMOTOR);
 8004334:	4b1d      	ldr	r3, [pc, #116]	@ (80043ac <TaskChassis+0xdd4>)
 8004336:	edd3 6a00 	vldr	s13, [r3]
 800433a:	ed93 7a01 	vldr	s14, [r3, #4]
 800433e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004342:	eeb0 0a66 	vmov.f32	s0, s13
 8004346:	eef0 0a47 	vmov.f32	s1, s14
 800434a:	eeb0 1a67 	vmov.f32	s2, s15
 800434e:	2105      	movs	r1, #5
 8004350:	2006      	movs	r0, #6
 8004352:	f7fd fcc1 	bl	8001cd8 <setGM6020voltageRPM>
 8004356:	e056      	b.n	8004406 <TaskChassis+0xe2e>
		} else if (testmotor > 6800) {
 8004358:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800435c:	f641 2290 	movw	r2, #6800	@ 0x1a90
 8004360:	4293      	cmp	r3, r2
 8004362:	d929      	bls.n	80043b8 <TaskChassis+0xde0>
			setGM6020voltageRPM(6, -5, DONUTMOTOR);
 8004364:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <TaskChassis+0xdd4>)
 8004366:	edd3 6a00 	vldr	s13, [r3]
 800436a:	ed93 7a01 	vldr	s14, [r3, #4]
 800436e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004372:	eeb0 0a66 	vmov.f32	s0, s13
 8004376:	eef0 0a47 	vmov.f32	s1, s14
 800437a:	eeb0 1a67 	vmov.f32	s2, s15
 800437e:	f06f 0104 	mvn.w	r1, #4
 8004382:	2006      	movs	r0, #6
 8004384:	f7fd fca8 	bl	8001cd8 <setGM6020voltageRPM>
 8004388:	e03d      	b.n	8004406 <TaskChassis+0xe2e>
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w
 8004390:	43480000 	.word	0x43480000
 8004394:	20000040 	.word	0x20000040
 8004398:	2000090c 	.word	0x2000090c
 800439c:	3f333333 	.word	0x3f333333
 80043a0:	38d1b717 	.word	0x38d1b717
 80043a4:	3f6147ae 	.word	0x3f6147ae
 80043a8:	45c08800 	.word	0x45c08800
 80043ac:	2000004c 	.word	0x2000004c
 80043b0:	47ae147b 	.word	0x47ae147b
 80043b4:	3f747ae1 	.word	0x3f747ae1
			int16_t PositionToGo = kPu*(DifferenceBetweenCurrentAndWannabePosition);
			int16_t IntegralToGo = kIu*(sumI1);
			int16_t DerivativeToGo = kDu*(DifferenceBetweenCurrentAndWannabePosition)*200;
			*/

			setGM6020voltageRPM(6, positionPIDByMe(&prevDiff1, &isNegativeRegion1, &previousRegion1, DifferenceBetweenCurrentAndWannabePosition, &sumI1, kPu, kIu, kDu), DONUTMOTOR);
 80043b8:	f9b7 4088 	ldrsh.w	r4, [r7, #136]	@ 0x88
 80043bc:	f107 0269 	add.w	r2, r7, #105	@ 0x69
 80043c0:	f107 016b 	add.w	r1, r7, #107	@ 0x6b
 80043c4:	f107 0066 	add.w	r0, r7, #102	@ 0x66
 80043c8:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	ed97 1a23 	vldr	s2, [r7, #140]	@ 0x8c
 80043d2:	edd7 0a24 	vldr	s1, [r7, #144]	@ 0x90
 80043d6:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 80043da:	4623      	mov	r3, r4
 80043dc:	f7ff f83c 	bl	8003458 <positionPIDByMe>
 80043e0:	4603      	mov	r3, r0
 80043e2:	461a      	mov	r2, r3
 80043e4:	4be0      	ldr	r3, [pc, #896]	@ (8004768 <TaskChassis+0x1190>)
 80043e6:	edd3 6a00 	vldr	s13, [r3]
 80043ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80043ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f2:	eeb0 0a66 	vmov.f32	s0, s13
 80043f6:	eef0 0a47 	vmov.f32	s1, s14
 80043fa:	eeb0 1a67 	vmov.f32	s2, s15
 80043fe:	4611      	mov	r1, r2
 8004400:	2006      	movs	r0, #6
 8004402:	f7fd fc69 	bl	8001cd8 <setGM6020voltageRPM>
		}


		// 2524-6986
		// 90 degree = 2691, 6799
		pivoter = getMotorPosition(7);
 8004406:	2007      	movs	r0, #7
 8004408:	f7fd fc9a 	bl	8001d40 <getMotorPosition>
 800440c:	4603      	mov	r3, r0
 800440e:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
		angle = ((pivoter-4755)*0.00024343f)*3.14159265f;
 8004412:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8004416:	f5a3 5394 	sub.w	r3, r3, #4736	@ 0x1280
 800441a:	3b13      	subs	r3, #19
 800441c:	ee07 3a90 	vmov	s15, r3
 8004420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004424:	ed9f 7ad1 	vldr	s14, [pc, #836]	@ 800476c <TaskChassis+0x1194>
 8004428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800442c:	ed9f 7ad0 	vldr	s14, [pc, #832]	@ 8004770 <TaskChassis+0x1198>
 8004430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004434:	ee17 0a90 	vmov	r0, s15
 8004438:	f7fc f886 	bl	8000548 <__aeabi_f2d>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

		float kPr =0.08; // 0.022
 8004444:	4bcb      	ldr	r3, [pc, #812]	@ (8004774 <TaskChassis+0x119c>)
 8004446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		float kIr =0.000; // -0.02
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		float kDr =0.009; // 0.00005
 8004452:	4bc9      	ldr	r3, [pc, #804]	@ (8004778 <TaskChassis+0x11a0>)
 8004454:	67fb      	str	r3, [r7, #124]	@ 0x7c

		float gyroPosition[3] = {IMU_get_gyro(x), IMU_get_gyro(y), IMU_get_gyro(z)};
 8004456:	2000      	movs	r0, #0
 8004458:	f7fc ff1c 	bl	8001294 <IMU_get_gyro>
 800445c:	eef0 7a40 	vmov.f32	s15, s0
 8004460:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004464:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004468:	edc3 7a00 	vstr	s15, [r3]
 800446c:	2001      	movs	r0, #1
 800446e:	f7fc ff11 	bl	8001294 <IMU_get_gyro>
 8004472:	eef0 7a40 	vmov.f32	s15, s0
 8004476:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800447a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800447e:	edc3 7a01 	vstr	s15, [r3, #4]
 8004482:	2002      	movs	r0, #2
 8004484:	f7fc ff06 	bl	8001294 <IMU_get_gyro>
 8004488:	eef0 7a40 	vmov.f32	s15, s0
 800448c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004490:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004494:	edc3 7a02 	vstr	s15, [r3, #8]
		int16_t convert[3] = { (int)(gyroPosition[0]*9.549), (int)(gyroPosition[1]*(9.549)), (int)((gyroPosition[2]+((float)leftDial*(-0.008)))*(-230))};
 8004498:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800449c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc f850 	bl	8000548 <__aeabi_f2d>
 80044a8:	a3ab      	add	r3, pc, #684	@ (adr r3, 8004758 <TaskChassis+0x1180>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f7fc f8a3 	bl	80005f8 <__aeabi_dmul>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	f7fc fb4d 	bl	8000b58 <__aeabi_d2iz>
 80044be:	4603      	mov	r3, r0
 80044c0:	b21a      	sxth	r2, r3
 80044c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80044c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80044d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc f836 	bl	8000548 <__aeabi_f2d>
 80044dc:	a39e      	add	r3, pc, #632	@ (adr r3, 8004758 <TaskChassis+0x1180>)
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f7fc f889 	bl	80005f8 <__aeabi_dmul>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7fc fb33 	bl	8000b58 <__aeabi_d2iz>
 80044f2:	4603      	mov	r3, r0
 80044f4:	b21a      	sxth	r2, r3
 80044f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80044fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80044fe:	805a      	strh	r2, [r3, #2]
 8004500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004504:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc f81c 	bl	8000548 <__aeabi_f2d>
 8004510:	4604      	mov	r4, r0
 8004512:	460d      	mov	r5, r1
 8004514:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	ee17 0a90 	vmov	r0, s15
 8004524:	f7fc f810 	bl	8000548 <__aeabi_f2d>
 8004528:	a38d      	add	r3, pc, #564	@ (adr r3, 8004760 <TaskChassis+0x1188>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f7fc f863 	bl	80005f8 <__aeabi_dmul>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4620      	mov	r0, r4
 8004538:	4629      	mov	r1, r5
 800453a:	f7fb fea7 	bl	800028c <__adddf3>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	4b8c      	ldr	r3, [pc, #560]	@ (800477c <TaskChassis+0x11a4>)
 800454c:	f7fc f854 	bl	80005f8 <__aeabi_dmul>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	f7fc fafe 	bl	8000b58 <__aeabi_d2iz>
 800455c:	4603      	mov	r3, r0
 800455e:	b21a      	sxth	r2, r3
 8004560:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004564:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004568:	809a      	strh	r2, [r3, #4]
		rotationPositionZ += gyroPosition[2]*0.2864788976;
		rotationPositionY += gyroPosition[0]*0.2864788976;
		int16_t convertY = (int)rotationPositionY;
		int16_t convertZ = (int)rotationPositionZ;
		*/
		PWMOutput(LED, 2, 500);
 800456a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800456e:	2102      	movs	r1, #2
 8004570:	2001      	movs	r0, #1
 8004572:	f000 fcef 	bl	8004f54 <PWMOutput>
		PWMInitialize(LED, FR, 2, 0.9);
 8004576:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 8004780 <TaskChassis+0x11a8>
 800457a:	2202      	movs	r2, #2
 800457c:	2101      	movs	r1, #1
 800457e:	2001      	movs	r0, #1
 8004580:	f000 fbd0 	bl	8004d24 <PWMInitialize>
		if (chassisTurning == 2) {
 8004584:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 8004588:	2b02      	cmp	r3, #2
 800458a:	d114      	bne.n	80045b6 <TaskChassis+0xfde>
			// rcVal2 = ((-1*(leftDial))*3.32f)+4755;
			rcVal2 = (leftDial*3.32f)+4755;
 800458c:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004598:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8004784 <TaskChassis+0x11ac>
 800459c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a0:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8004788 <TaskChassis+0x11b0>
 80045a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045ac:	ee17 3a90 	vmov	r3, s15
 80045b0:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
 80045b4:	e013      	b.n	80045de <TaskChassis+0x1006>
		} else {
			rcVal2 = (leftDial*3.32f)+4755;
 80045b6:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c2:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8004784 <TaskChassis+0x11ac>
 80045c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045ca:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8004788 <TaskChassis+0x11b0>
 80045ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045d6:	ee17 3a90 	vmov	r3, s15
 80045da:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
		}

		if (pivoter <= 6799 && pivoter >= 2691) {
 80045de:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 80045e2:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d80d      	bhi.n	8004606 <TaskChassis+0x102e>
 80045ea:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 80045ee:	f640 2282 	movw	r2, #2690	@ 0xa82
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d907      	bls.n	8004606 <TaskChassis+0x102e>
			// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 0);
			PWMOff(LED, 2);
 80045f6:	2102      	movs	r1, #2
 80045f8:	2001      	movs	r0, #1
 80045fa:	f000 fcdb 	bl	8004fb4 <PWMOff>
			rotationCompStab = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
 8004604:	e025      	b.n	8004652 <TaskChassis+0x107a>
		} else if (pivoter > 6799) {
 8004606:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 800460a:	f641 228f 	movw	r2, #6799	@ 0x1a8f
 800460e:	4293      	cmp	r3, r2
 8004610:	d910      	bls.n	8004634 <TaskChassis+0x105c>
			// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
			// PWMOutput(LED, 2, 500);
			rotationCompStab = -25*(pivoter-6799);
 8004612:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8004616:	f5a3 53d4 	sub.w	r3, r3, #6784	@ 0x1a80
 800461a:	3b0f      	subs	r3, #15
 800461c:	b29b      	uxth	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	02d2      	lsls	r2, r2, #11
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	0092      	lsls	r2, r2, #2
 8004626:	441a      	add	r2, r3
 8004628:	00d2      	lsls	r2, r2, #3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	b29b      	uxth	r3, r3
 800462e:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
 8004632:	e00e      	b.n	8004652 <TaskChassis+0x107a>
		} else {
			// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, 1);
			// PWMOutput(LED, 2, 500);
			rotationCompStab = -25*(pivoter-2691);
 8004634:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8004638:	f6a3 2383 	subw	r3, r3, #2691	@ 0xa83
 800463c:	b29b      	uxth	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	02d2      	lsls	r2, r2, #11
 8004642:	1ad2      	subs	r2, r2, r3
 8004644:	0092      	lsls	r2, r2, #2
 8004646:	441a      	add	r2, r3
 8004648:	00d2      	lsls	r2, r2, #3
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	b29b      	uxth	r3, r3
 800464e:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
		for (int i = 0; i < average; i++) {
			fullAve += averageY[i];
		}
		fullAve = fullAve*0.2f;
		*/
		int16_t DiffOfTurret = rcVal2-pivoter;
 8004652:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 8004656:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	b29b      	uxth	r3, r3
 800465e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
		// usart_printf("$%d %d\r\n;", convert[2], fullAve);
		if (pivoter < 2300) {
 8004662:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8004666:	f640 02fb 	movw	r2, #2299	@ 0x8fb
 800466a:	4293      	cmp	r3, r2
 800466c:	d811      	bhi.n	8004692 <TaskChassis+0x10ba>
			setGM6020voltageRPM(7, 5, DONUTMOTOR);
 800466e:	4b3e      	ldr	r3, [pc, #248]	@ (8004768 <TaskChassis+0x1190>)
 8004670:	edd3 6a00 	vldr	s13, [r3]
 8004674:	ed93 7a01 	vldr	s14, [r3, #4]
 8004678:	edd3 7a02 	vldr	s15, [r3, #8]
 800467c:	eeb0 0a66 	vmov.f32	s0, s13
 8004680:	eef0 0a47 	vmov.f32	s1, s14
 8004684:	eeb0 1a67 	vmov.f32	s2, s15
 8004688:	2105      	movs	r1, #5
 800468a:	2007      	movs	r0, #7
 800468c:	f7fd fb24 	bl	8001cd8 <setGM6020voltageRPM>
 8004690:	e05b      	b.n	800474a <TaskChassis+0x1172>
		} else if (pivoter > 6900) {
 8004692:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8004696:	f641 22f4 	movw	r2, #6900	@ 0x1af4
 800469a:	4293      	cmp	r3, r2
 800469c:	d912      	bls.n	80046c4 <TaskChassis+0x10ec>
			setGM6020voltageRPM(7, -5, DONUTMOTOR);
 800469e:	4b32      	ldr	r3, [pc, #200]	@ (8004768 <TaskChassis+0x1190>)
 80046a0:	edd3 6a00 	vldr	s13, [r3]
 80046a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80046a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80046ac:	eeb0 0a66 	vmov.f32	s0, s13
 80046b0:	eef0 0a47 	vmov.f32	s1, s14
 80046b4:	eeb0 1a67 	vmov.f32	s2, s15
 80046b8:	f06f 0104 	mvn.w	r1, #4
 80046bc:	2007      	movs	r0, #7
 80046be:	f7fd fb0b 	bl	8001cd8 <setGM6020voltageRPM>
 80046c2:	e042      	b.n	800474a <TaskChassis+0x1172>
			sumI2 += (DiffOfTurret)*0.005;
			int16_t PositionToGo2 = kPr*(DiffOfTurret);
			int16_t IntegralToGo2 = kIr*(sumI2);
			int16_t DerivativeToGo2 = kDr*(DiffOfTurret)*200;
			*/
			if (chassisTurning == 2) {
 80046c4:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d117      	bne.n	80046fc <TaskChassis+0x1124>
				setGM6020voltageRPM(7, convert[2], DONUTMOTOR);
 80046cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80046d0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80046d4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80046d8:	4b23      	ldr	r3, [pc, #140]	@ (8004768 <TaskChassis+0x1190>)
 80046da:	edd3 6a00 	vldr	s13, [r3]
 80046de:	ed93 7a01 	vldr	s14, [r3, #4]
 80046e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80046e6:	eeb0 0a66 	vmov.f32	s0, s13
 80046ea:	eef0 0a47 	vmov.f32	s1, s14
 80046ee:	eeb0 1a67 	vmov.f32	s2, s15
 80046f2:	4611      	mov	r1, r2
 80046f4:	2007      	movs	r0, #7
 80046f6:	f7fd faef 	bl	8001cd8 <setGM6020voltageRPM>
 80046fa:	e026      	b.n	800474a <TaskChassis+0x1172>
			} else {
				setGM6020voltageRPM(7, positionPIDByMe(&prevDiff2, &isNegativeRegion2, &previousRegion2, DiffOfTurret, &sumI2, kPr, kIr, kDr), DONUTMOTOR);
 80046fc:	f9b7 407a 	ldrsh.w	r4, [r7, #122]	@ 0x7a
 8004700:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8004704:	f107 016a 	add.w	r1, r7, #106	@ 0x6a
 8004708:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800470c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	ed97 1a1f 	vldr	s2, [r7, #124]	@ 0x7c
 8004716:	edd7 0a20 	vldr	s1, [r7, #128]	@ 0x80
 800471a:	ed97 0a21 	vldr	s0, [r7, #132]	@ 0x84
 800471e:	4623      	mov	r3, r4
 8004720:	f7fe fe9a 	bl	8003458 <positionPIDByMe>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	4b0f      	ldr	r3, [pc, #60]	@ (8004768 <TaskChassis+0x1190>)
 800472a:	edd3 6a00 	vldr	s13, [r3]
 800472e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004732:	edd3 7a02 	vldr	s15, [r3, #8]
 8004736:	eeb0 0a66 	vmov.f32	s0, s13
 800473a:	eef0 0a47 	vmov.f32	s1, s14
 800473e:	eeb0 1a67 	vmov.f32	s2, s15
 8004742:	4611      	mov	r1, r2
 8004744:	2007      	movs	r0, #7
 8004746:	f7fd fac7 	bl	8001cd8 <setGM6020voltageRPM>
		}
		*/
		//testTHing[11]
		// usart_printf("|  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", testTHing[0], testTHing[1], testTHing[2], testTHing[3], testTHing[4], testTHing[5], testTHing[6], testTHing[7], testTHing[8], testTHing[9], testTHing[10]);
		//mainPrint();
		PWMTimerStarter();
 800474a:	f000 fc5f 	bl	800500c <PWMTimerStarter>
		osDelay(5);
 800474e:	2005      	movs	r0, #5
 8004750:	f007 ffba 	bl	800c6c8 <osDelay>
	for(;;) {
 8004754:	f7ff b802 	b.w	800375c <TaskChassis+0x184>
 8004758:	872b020c 	.word	0x872b020c
 800475c:	40231916 	.word	0x40231916
 8004760:	d2f1a9fc 	.word	0xd2f1a9fc
 8004764:	bf80624d 	.word	0xbf80624d
 8004768:	2000004c 	.word	0x2000004c
 800476c:	397f413e 	.word	0x397f413e
 8004770:	40490fdb 	.word	0x40490fdb
 8004774:	3da3d70a 	.word	0x3da3d70a
 8004778:	3c1374bc 	.word	0x3c1374bc
 800477c:	c06cc000 	.word	0xc06cc000
 8004780:	3f666666 	.word	0x3f666666
 8004784:	40547ae1 	.word	0x40547ae1
 8004788:	45949800 	.word	0x45949800

0800478c <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004794:	2001      	movs	r0, #1
 8004796:	f007 ff97 	bl	800c6c8 <osDelay>
 800479a:	e7fb      	b.n	8004794 <TaskTurret+0x8>

0800479c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047a0:	b672      	cpsid	i
}
 80047a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047a4:	bf00      	nop
 80047a6:	e7fd      	b.n	80047a4 <Error_Handler+0x8>

080047a8 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6178      	str	r0, [r7, #20]
 80047b0:	460b      	mov	r3, r1
 80047b2:	60fa      	str	r2, [r7, #12]
 80047b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80047b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80047bc:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d042      	beq.n	800484a <PID_init+0xa2>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03f      	beq.n	800484a <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	7cfa      	ldrb	r2, [r7, #19]
 80047ce:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3304      	adds	r3, #4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3308      	adds	r3, #8
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	635a      	str	r2, [r3, #52]	@ 0x34
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	621a      	str	r2, [r3, #32]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	645a      	str	r2, [r3, #68]	@ 0x44
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004848:	e000      	b.n	800484c <PID_init+0xa4>
        return;
 800484a:	bf00      	nop
}
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004862:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <PID_calc+0x1c>
    {
        return 0.0f;
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e130      	b.n	8004ad4 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800488e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004892:	edd7 7a02 	vldr	s15, [r7, #8]
 8004896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 8095 	bne.w	80049d4 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80048d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80048fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	ed93 7a03 	vldr	s14, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	edd3 7a05 	vldr	s15, [r3, #20]
 8004928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800492c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004930:	dd04      	ble.n	800493c <PID_calc+0xe6>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	629a      	str	r2, [r3, #40]	@ 0x28
 800493a:	e014      	b.n	8004966 <PID_calc+0x110>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	edd3 7a05 	vldr	s15, [r3, #20]
 8004948:	eef1 7a67 	vneg.f32	s15, s15
 800494c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	d507      	bpl.n	8004966 <PID_calc+0x110>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	edd3 7a05 	vldr	s15, [r3, #20]
 800495c:	eef1 7a67 	vneg.f32	s15, s15
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004972:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800497c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	ed93 7a08 	vldr	s14, [r3, #32]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499a:	dd04      	ble.n	80049a6 <PID_calc+0x150>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	621a      	str	r2, [r3, #32]
 80049a4:	e094      	b.n	8004ad0 <PID_calc+0x27a>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80049b2:	eef1 7a67 	vneg.f32	s15, s15
 80049b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	f140 8087 	bpl.w	8004ad0 <PID_calc+0x27a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80049c8:	eef1 7a67 	vneg.f32	s15, s15
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	edc3 7a08 	vstr	s15, [r3, #32]
 80049d2:	e07d      	b.n	8004ad0 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d179      	bne.n	8004ad0 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	ed93 7a01 	vldr	s14, [r3, #4]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80049ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004a6e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9a:	dd04      	ble.n	8004aa6 <PID_calc+0x250>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	621a      	str	r2, [r3, #32]
 8004aa4:	e014      	b.n	8004ad0 <PID_calc+0x27a>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	ed93 7a08 	vldr	s14, [r3, #32]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ab2:	eef1 7a67 	vneg.f32	s15, s15
 8004ab6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004abe:	d507      	bpl.n	8004ad0 <PID_calc+0x27a>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ac6:	eef1 7a67 	vneg.f32	s15, s15
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
}
 8004ad4:	ee07 3a90 	vmov	s15, r3
 8004ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8004af6:	4a12      	ldr	r2, [pc, #72]	@ (8004b40 <PWMInit+0x58>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8004afc:	4a11      	ldr	r2, [pc, #68]	@ (8004b44 <PWMInit+0x5c>)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8004b02:	4a11      	ldr	r2, [pc, #68]	@ (8004b48 <PWMInit+0x60>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8004b08:	4a10      	ldr	r2, [pc, #64]	@ (8004b4c <PWMInit+0x64>)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <PWMInit+0x58>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f005 fb54 	bl	800a1c0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8004b18:	4b0a      	ldr	r3, [pc, #40]	@ (8004b44 <PWMInit+0x5c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f005 fb4f 	bl	800a1c0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8004b22:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <PWMInit+0x60>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f005 fb4a 	bl	800a1c0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8004b2c:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <PWMInit+0x64>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f005 fb45 	bl	800a1c0 <HAL_TIM_Base_Start>
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000f30 	.word	0x20000f30
 8004b44:	20000f34 	.word	0x20000f34
 8004b48:	20000f38 	.word	0x20000f38
 8004b4c:	20000f3c 	.word	0x20000f3c

08004b50 <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d02c      	beq.n	8004bc0 <calculateOutputPeriodToGetFrequency+0x70>
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	dc3d      	bgt.n	8004be6 <calculateOutputPeriodToGetFrequency+0x96>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <calculateOutputPeriodToGetFrequency+0x24>
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d013      	beq.n	8004b9a <calculateOutputPeriodToGetFrequency+0x4a>
 8004b72:	e038      	b.n	8004be6 <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004bf4 <calculateOutputPeriodToGetFrequency+0xa4>
 8004b82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b92:	ee17 3a90 	vmov	r3, s15
 8004b96:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8004b98:	e025      	b.n	8004be6 <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004bf8 <calculateOutputPeriodToGetFrequency+0xa8>
 8004ba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb8:	ee17 3a90 	vmov	r3, s15
 8004bbc:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8004bbe:	e012      	b.n	8004be6 <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004bf8 <calculateOutputPeriodToGetFrequency+0xa8>
 8004bce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bde:	ee17 3a90 	vmov	r3, s15
 8004be2:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8004be4:	bf00      	nop
	}

	return finalVal;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	360637bd 	.word	0x360637bd
 8004bf8:	358637bd 	.word	0x358637bd

08004bfc <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c12:	edd7 7a00 	vldr	s15, [r7]
 8004c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1e:	ee17 3a90 	vmov	r3, s15
 8004c22:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d902      	bls.n	8004c32 <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e004      	b.n	8004c3c <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 8004c3c:	68fb      	ldr	r3, [r7, #12]

}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	ed87 0a00 	vstr	s0, [r7]
 8004c58:	71fb      	strb	r3, [r7, #7]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	71bb      	strb	r3, [r7, #6]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d03c      	beq.n	8004ce6 <calculateOutputPeriodValue+0x9a>
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	dc51      	bgt.n	8004d14 <calculateOutputPeriodValue+0xc8>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <calculateOutputPeriodValue+0x2e>
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d01b      	beq.n	8004cb0 <calculateOutputPeriodValue+0x64>
 8004c78:	e04c      	b.n	8004d14 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 8004c7a:	79bb      	ldrb	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 8004c80:	edd7 7a00 	vldr	s15, [r7]
 8004c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c88:	ee17 2a90 	vmov	r2, s15
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c92:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 8004c94:	e03e      	b.n	8004d14 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 8004c96:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	4a20      	ldr	r2, [pc, #128]	@ (8004d20 <calculateOutputPeriodValue+0xd4>)
 8004c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca2:	ed97 0a00 	vldr	s0, [r7]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ffa8 	bl	8004bfc <safeOutputPeriodValueCalculator>
 8004cac:	60f8      	str	r0, [r7, #12]
			break;
 8004cae:	e031      	b.n	8004d14 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 8004cb0:	79bb      	ldrb	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 8004cb6:	edd7 7a00 	vldr	s15, [r7]
 8004cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbe:	ee17 2a90 	vmov	r2, s15
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 8004cca:	e023      	b.n	8004d14 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 8004ccc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004cd0:	3306      	adds	r3, #6
 8004cd2:	4a13      	ldr	r2, [pc, #76]	@ (8004d20 <calculateOutputPeriodValue+0xd4>)
 8004cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd8:	ed97 0a00 	vldr	s0, [r7]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff8d 	bl	8004bfc <safeOutputPeriodValueCalculator>
 8004ce2:	60f8      	str	r0, [r7, #12]
			break;
 8004ce4:	e016      	b.n	8004d14 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 8004ce6:	79bb      	ldrb	r3, [r7, #6]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 8004cec:	edd7 7a00 	vldr	s15, [r7]
 8004cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf4:	ee17 2a90 	vmov	r2, s15
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 8004d00:	e007      	b.n	8004d12 <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <calculateOutputPeriodValue+0xd4>)
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	ed97 0a00 	vldr	s0, [r7]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ff76 	bl	8004bfc <safeOutputPeriodValueCalculator>
 8004d10:	60f8      	str	r0, [r7, #12]
			break;
 8004d12:	bf00      	nop
		default:
	}
	return returnVal;
 8004d14:	68fb      	ldr	r3, [r7, #12]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000f78 	.word	0x20000f78

08004d24 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	ed87 0a00 	vstr	s0, [r7]
 8004d30:	71fb      	strb	r3, [r7, #7]
 8004d32:	460b      	mov	r3, r1
 8004d34:	71bb      	strb	r3, [r7, #6]
 8004d36:	4613      	mov	r3, r2
 8004d38:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 8004d3a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8004d3e:	79b9      	ldrb	r1, [r7, #6]
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	ed97 0a00 	vldr	s0, [r7]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff80 	bl	8004c4c <calculateOutputPeriodValue>
 8004d4c:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d076      	beq.n	8004e42 <PWMInitialize+0x11e>
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	dc7e      	bgt.n	8004e56 <PWMInitialize+0x132>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <PWMInitialize+0x3e>
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d04a      	beq.n	8004df6 <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 8004d60:	e079      	b.n	8004e56 <PWMInitialize+0x132>
		switch (position) {
 8004d62:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	2b06      	cmp	r3, #6
 8004d6a:	d83b      	bhi.n	8004de4 <PWMInitialize+0xc0>
 8004d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <PWMInitialize+0x50>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004d91 	.word	0x08004d91
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004dc1 	.word	0x08004dc1
 8004d88:	08004dcd 	.word	0x08004dcd
 8004d8c:	08004dd9 	.word	0x08004dd9
			(*tim1).Instance->CCR1=value;
 8004d90:	4b33      	ldr	r3, [pc, #204]	@ (8004e60 <PWMInitialize+0x13c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8004d9a:	e024      	b.n	8004de6 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 8004d9c:	4b30      	ldr	r3, [pc, #192]	@ (8004e60 <PWMInitialize+0x13c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8004da6:	e01e      	b.n	8004de6 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 8004da8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e60 <PWMInitialize+0x13c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8004db2:	e018      	b.n	8004de6 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8004db4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e60 <PWMInitialize+0x13c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8004dbe:	e012      	b.n	8004de6 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 8004dc0:	4b28      	ldr	r3, [pc, #160]	@ (8004e64 <PWMInitialize+0x140>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8004dca:	e00c      	b.n	8004de6 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 8004dcc:	4b25      	ldr	r3, [pc, #148]	@ (8004e64 <PWMInitialize+0x140>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8004dd6:	e006      	b.n	8004de6 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 8004dd8:	4b22      	ldr	r3, [pc, #136]	@ (8004e64 <PWMInitialize+0x140>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8004de2:	e000      	b.n	8004de6 <PWMInitialize+0xc2>
			break;
 8004de4:	bf00      	nop
		subPeriod[position-1] = value;
 8004de6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	491e      	ldr	r1, [pc, #120]	@ (8004e68 <PWMInitialize+0x144>)
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8004df4:	e02e      	b.n	8004e54 <PWMInitialize+0x130>
		switch (position) {
 8004df6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d012      	beq.n	8004e24 <PWMInitialize+0x100>
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	dc16      	bgt.n	8004e30 <PWMInitialize+0x10c>
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d002      	beq.n	8004e0c <PWMInitialize+0xe8>
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d006      	beq.n	8004e18 <PWMInitialize+0xf4>
			break;
 8004e0a:	e011      	b.n	8004e30 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 8004e0c:	4b17      	ldr	r3, [pc, #92]	@ (8004e6c <PWMInitialize+0x148>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8004e16:	e00c      	b.n	8004e32 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8004e18:	4b14      	ldr	r3, [pc, #80]	@ (8004e6c <PWMInitialize+0x148>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8004e22:	e006      	b.n	8004e32 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 8004e24:	4b11      	ldr	r3, [pc, #68]	@ (8004e6c <PWMInitialize+0x148>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8004e2e:	e000      	b.n	8004e32 <PWMInitialize+0x10e>
			break;
 8004e30:	bf00      	nop
		subPeriod[position+6] = value;
 8004e32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004e36:	3306      	adds	r3, #6
 8004e38:	490b      	ldr	r1, [pc, #44]	@ (8004e68 <PWMInitialize+0x144>)
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8004e40:	e008      	b.n	8004e54 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 8004e42:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <PWMInitialize+0x14c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 8004e4c:	4a06      	ldr	r2, [pc, #24]	@ (8004e68 <PWMInitialize+0x144>)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8004e52:	bf00      	nop
	return;
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
}
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000f30 	.word	0x20000f30
 8004e64:	20000f3c 	.word	0x20000f3c
 8004e68:	20000f4c 	.word	0x20000f4c
 8004e6c:	20000f38 	.word	0x20000f38
 8004e70:	20000f34 	.word	0x20000f34

08004e74 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	6039      	str	r1, [r7, #0]
 8004e7e:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8004e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	dc0c      	bgt.n	8004ea2 <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 8004e88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <MotorPositionForInitializingPeriod+0x54>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	490c      	ldr	r1, [pc, #48]	@ (8004ecc <MotorPositionForInitializingPeriod+0x58>)
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 8004ea0:	e00b      	b.n	8004eba <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <MotorPositionForInitializingPeriod+0x5c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 8004eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	4906      	ldr	r1, [pc, #24]	@ (8004ecc <MotorPositionForInitializingPeriod+0x58>)
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000f30 	.word	0x20000f30
 8004ecc:	20000f78 	.word	0x20000f78
 8004ed0:	20000f3c 	.word	0x20000f3c

08004ed4 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	603a      	str	r2, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fe31 	bl	8004b50 <calculateOutputPeriodToGetFrequency>
 8004eee:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d01a      	beq.n	8004f2c <initializePeriod+0x58>
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	dc22      	bgt.n	8004f40 <initializePeriod+0x6c>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <initializePeriod+0x30>
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d007      	beq.n	8004f12 <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 8004f02:	e01d      	b.n	8004f40 <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 8004f04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff ffb2 	bl	8004e74 <MotorPositionForInitializingPeriod>
		break;
 8004f10:	e015      	b.n	8004f3e <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <initializePeriod+0x74>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 8004f1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f20:	3306      	adds	r3, #6
 8004f22:	490a      	ldr	r1, [pc, #40]	@ (8004f4c <initializePeriod+0x78>)
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8004f2a:	e008      	b.n	8004f3e <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 8004f2c:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <initializePeriod+0x7c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 8004f36:	4a05      	ldr	r2, [pc, #20]	@ (8004f4c <initializePeriod+0x78>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8004f3c:	bf00      	nop
	return;
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
}
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000f38 	.word	0x20000f38
 8004f4c:	20000f78 	.word	0x20000f78
 8004f50:	20000f34 	.word	0x20000f34

08004f54 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	603a      	str	r2, [r7, #0]
 8004f5e:	71fb      	strb	r3, [r7, #7]
 8004f60:	460b      	mov	r3, r1
 8004f62:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 8004f64:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff ffb1 	bl	8004ed4 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d014      	beq.n	8004fa2 <PWMOutput+0x4e>
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	dc16      	bgt.n	8004faa <PWMOutput+0x56>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <PWMOutput+0x32>
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d007      	beq.n	8004f94 <PWMOutput+0x40>
 8004f84:	e011      	b.n	8004faa <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 8004f86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	4a08      	ldr	r2, [pc, #32]	@ (8004fb0 <PWMOutput+0x5c>)
 8004f8e:	2101      	movs	r1, #1
 8004f90:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8004f92:	e00a      	b.n	8004faa <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8004f94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f98:	3306      	adds	r3, #6
 8004f9a:	4a05      	ldr	r2, [pc, #20]	@ (8004fb0 <PWMOutput+0x5c>)
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8004fa0:	e003      	b.n	8004faa <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8004fa2:	4b03      	ldr	r3, [pc, #12]	@ (8004fb0 <PWMOutput+0x5c>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8004fa8:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000f40 	.word	0x20000f40

08004fb4 <PWMOff>:
		// usart_printf("Buzzer %d\r\n", Position);
		return;
	}
}

void PWMOff(TypesThatUsePWM_t Type, int8_t Position) {
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	71fb      	strb	r3, [r7, #7]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d014      	beq.n	8004ff4 <PWMOff+0x40>
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	dc16      	bgt.n	8004ffc <PWMOff+0x48>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <PWMOff+0x24>
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d007      	beq.n	8004fe6 <PWMOff+0x32>
 8004fd6:	e011      	b.n	8004ffc <PWMOff+0x48>
	case 0:
		whichPWMisOn[Position-1] = 0;
 8004fd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	4a0a      	ldr	r2, [pc, #40]	@ (8005008 <PWMOff+0x54>)
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8004fe4:	e00a      	b.n	8004ffc <PWMOff+0x48>
	case 1:
		whichPWMisOn[Position+6] = 0;
 8004fe6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004fea:	3306      	adds	r3, #6
 8004fec:	4a06      	ldr	r2, [pc, #24]	@ (8005008 <PWMOff+0x54>)
 8004fee:	2100      	movs	r1, #0
 8004ff0:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8004ff2:	e003      	b.n	8004ffc <PWMOff+0x48>
	case 2:
		whichPWMisOn[10] = 0;
 8004ff4:	4b04      	ldr	r3, [pc, #16]	@ (8005008 <PWMOff+0x54>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8004ffa:	bf00      	nop
	}
}
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000f40 	.word	0x20000f40

0800500c <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8005012:	2300      	movs	r3, #0
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	e0f1      	b.n	80051fc <PWMTimerStarter+0x1f0>
		switch (i) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b0a      	cmp	r3, #10
 800501c:	f200 80eb 	bhi.w	80051f6 <PWMTimerStarter+0x1ea>
 8005020:	a201      	add	r2, pc, #4	@ (adr r2, 8005028 <PWMTimerStarter+0x1c>)
 8005022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005026:	bf00      	nop
 8005028:	08005055 	.word	0x08005055
 800502c:	0800507b 	.word	0x0800507b
 8005030:	080050a1 	.word	0x080050a1
 8005034:	080050c7 	.word	0x080050c7
 8005038:	080050ed 	.word	0x080050ed
 800503c:	08005113 	.word	0x08005113
 8005040:	08005139 	.word	0x08005139
 8005044:	0800515f 	.word	0x0800515f
 8005048:	08005185 	.word	0x08005185
 800504c:	080051ab 	.word	0x080051ab
 8005050:	080051d1 	.word	0x080051d1
		case 0:
			if (whichPWMisOn[0] == 1) {
 8005054:	4b6e      	ldr	r3, [pc, #440]	@ (8005210 <PWMTimerStarter+0x204>)
 8005056:	f993 3000 	ldrsb.w	r3, [r3]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d106      	bne.n	800506c <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 800505e:	4b6d      	ldr	r3, [pc, #436]	@ (8005214 <PWMTimerStarter+0x208>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f005 f963 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 800506a:	e0c4      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 800506c:	4b69      	ldr	r3, [pc, #420]	@ (8005214 <PWMTimerStarter+0x208>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2100      	movs	r1, #0
 8005072:	4618      	mov	r0, r3
 8005074:	f005 fa24 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 8005078:	e0bd      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 800507a:	4b65      	ldr	r3, [pc, #404]	@ (8005210 <PWMTimerStarter+0x204>)
 800507c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d106      	bne.n	8005092 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8005084:	4b63      	ldr	r3, [pc, #396]	@ (8005214 <PWMTimerStarter+0x208>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2104      	movs	r1, #4
 800508a:	4618      	mov	r0, r3
 800508c:	f005 f950 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8005090:	e0b1      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8005092:	4b60      	ldr	r3, [pc, #384]	@ (8005214 <PWMTimerStarter+0x208>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2104      	movs	r1, #4
 8005098:	4618      	mov	r0, r3
 800509a:	f005 fa11 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 800509e:	e0aa      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 80050a0:	4b5b      	ldr	r3, [pc, #364]	@ (8005210 <PWMTimerStarter+0x204>)
 80050a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d106      	bne.n	80050b8 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 80050aa:	4b5a      	ldr	r3, [pc, #360]	@ (8005214 <PWMTimerStarter+0x208>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2108      	movs	r1, #8
 80050b0:	4618      	mov	r0, r3
 80050b2:	f005 f93d 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 80050b6:	e09e      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 80050b8:	4b56      	ldr	r3, [pc, #344]	@ (8005214 <PWMTimerStarter+0x208>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2108      	movs	r1, #8
 80050be:	4618      	mov	r0, r3
 80050c0:	f005 f9fe 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 80050c4:	e097      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 80050c6:	4b52      	ldr	r3, [pc, #328]	@ (8005210 <PWMTimerStarter+0x204>)
 80050c8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d106      	bne.n	80050de <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 80050d0:	4b50      	ldr	r3, [pc, #320]	@ (8005214 <PWMTimerStarter+0x208>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	210c      	movs	r1, #12
 80050d6:	4618      	mov	r0, r3
 80050d8:	f005 f92a 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 80050dc:	e08b      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 80050de:	4b4d      	ldr	r3, [pc, #308]	@ (8005214 <PWMTimerStarter+0x208>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	210c      	movs	r1, #12
 80050e4:	4618      	mov	r0, r3
 80050e6:	f005 f9eb 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 80050ea:	e084      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 80050ec:	4b48      	ldr	r3, [pc, #288]	@ (8005210 <PWMTimerStarter+0x204>)
 80050ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d106      	bne.n	8005104 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 80050f6:	4b48      	ldr	r3, [pc, #288]	@ (8005218 <PWMTimerStarter+0x20c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f005 f917 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8005102:	e078      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8005104:	4b44      	ldr	r3, [pc, #272]	@ (8005218 <PWMTimerStarter+0x20c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f005 f9d8 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 8005110:	e071      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8005112:	4b3f      	ldr	r3, [pc, #252]	@ (8005210 <PWMTimerStarter+0x204>)
 8005114:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 800511c:	4b3e      	ldr	r3, [pc, #248]	@ (8005218 <PWMTimerStarter+0x20c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2104      	movs	r1, #4
 8005122:	4618      	mov	r0, r3
 8005124:	f005 f904 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8005128:	e065      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 800512a:	4b3b      	ldr	r3, [pc, #236]	@ (8005218 <PWMTimerStarter+0x20c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2104      	movs	r1, #4
 8005130:	4618      	mov	r0, r3
 8005132:	f005 f9c5 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 8005136:	e05e      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8005138:	4b35      	ldr	r3, [pc, #212]	@ (8005210 <PWMTimerStarter+0x204>)
 800513a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d106      	bne.n	8005150 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8005142:	4b35      	ldr	r3, [pc, #212]	@ (8005218 <PWMTimerStarter+0x20c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2108      	movs	r1, #8
 8005148:	4618      	mov	r0, r3
 800514a:	f005 f8f1 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 800514e:	e052      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8005150:	4b31      	ldr	r3, [pc, #196]	@ (8005218 <PWMTimerStarter+0x20c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2108      	movs	r1, #8
 8005156:	4618      	mov	r0, r3
 8005158:	f005 f9b2 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 800515c:	e04b      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 800515e:	4b2c      	ldr	r3, [pc, #176]	@ (8005210 <PWMTimerStarter+0x204>)
 8005160:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d106      	bne.n	8005176 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8005168:	4b2c      	ldr	r3, [pc, #176]	@ (800521c <PWMTimerStarter+0x210>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f005 f8de 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8005174:	e03f      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8005176:	4b29      	ldr	r3, [pc, #164]	@ (800521c <PWMTimerStarter+0x210>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2100      	movs	r1, #0
 800517c:	4618      	mov	r0, r3
 800517e:	f005 f99f 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 8005182:	e038      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8005184:	4b22      	ldr	r3, [pc, #136]	@ (8005210 <PWMTimerStarter+0x204>)
 8005186:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d106      	bne.n	800519c <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 800518e:	4b23      	ldr	r3, [pc, #140]	@ (800521c <PWMTimerStarter+0x210>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2104      	movs	r1, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f005 f8cb 	bl	800a330 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 800519a:	e02c      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 800519c:	4b1f      	ldr	r3, [pc, #124]	@ (800521c <PWMTimerStarter+0x210>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2104      	movs	r1, #4
 80051a2:	4618      	mov	r0, r3
 80051a4:	f005 f98c 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 80051a8:	e025      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 80051aa:	4b19      	ldr	r3, [pc, #100]	@ (8005210 <PWMTimerStarter+0x204>)
 80051ac:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 80051b4:	4b19      	ldr	r3, [pc, #100]	@ (800521c <PWMTimerStarter+0x210>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2108      	movs	r1, #8
 80051ba:	4618      	mov	r0, r3
 80051bc:	f005 f8b8 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 80051c0:	e019      	b.n	80051f6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 80051c2:	4b16      	ldr	r3, [pc, #88]	@ (800521c <PWMTimerStarter+0x210>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2108      	movs	r1, #8
 80051c8:	4618      	mov	r0, r3
 80051ca:	f005 f979 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 80051ce:	e012      	b.n	80051f6 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 80051d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005210 <PWMTimerStarter+0x204>)
 80051d2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d106      	bne.n	80051e8 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 80051da:	4b11      	ldr	r3, [pc, #68]	@ (8005220 <PWMTimerStarter+0x214>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2108      	movs	r1, #8
 80051e0:	4618      	mov	r0, r3
 80051e2:	f005 f8a5 	bl	800a330 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 80051e6:	e005      	b.n	80051f4 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 80051e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <PWMTimerStarter+0x214>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2108      	movs	r1, #8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f005 f966 	bl	800a4c0 <HAL_TIM_PWM_Stop>
			break;
 80051f4:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3301      	adds	r3, #1
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b0a      	cmp	r3, #10
 8005200:	f77f af0a 	ble.w	8005018 <PWMTimerStarter+0xc>
		}
	}
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000f40 	.word	0x20000f40
 8005214:	20000f30 	.word	0x20000f30
 8005218:	20000f3c 	.word	0x20000f3c
 800521c:	20000f38 	.word	0x20000f38
 8005220:	20000f34 	.word	0x20000f34

08005224 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8005228:	2224      	movs	r2, #36	@ 0x24
 800522a:	4903      	ldr	r1, [pc, #12]	@ (8005238 <remote_control_init+0x14>)
 800522c:	4803      	ldr	r0, [pc, #12]	@ (800523c <remote_control_init+0x18>)
 800522e:	f7fd f865 	bl	80022fc <RC_init>
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000fe0 	.word	0x20000fe0
 800523c:	20000fbc 	.word	0x20000fbc

08005240 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8005244:	4b02      	ldr	r3, [pc, #8]	@ (8005250 <get_remote_control_point+0x10>)
}
 8005246:	4618      	mov	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	20000fa4 	.word	0x20000fa4

08005254 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 800525a:	4b44      	ldr	r3, [pc, #272]	@ (800536c <USART3_IRQHandler+0x118>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00b      	beq.n	8005280 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005268:	2300      	movs	r3, #0
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	4b3f      	ldr	r3, [pc, #252]	@ (800536c <USART3_IRQHandler+0x118>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	4b3d      	ldr	r3, [pc, #244]	@ (800536c <USART3_IRQHandler+0x118>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	607b      	str	r3, [r7, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 800527e:	e070      	b.n	8005362 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8005280:	4b3b      	ldr	r3, [pc, #236]	@ (8005370 <USART3_IRQHandler+0x11c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b00      	cmp	r3, #0
 800528a:	d06a      	beq.n	8005362 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800528c:	2300      	movs	r3, #0
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	4b36      	ldr	r3, [pc, #216]	@ (800536c <USART3_IRQHandler+0x118>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4b34      	ldr	r3, [pc, #208]	@ (800536c <USART3_IRQHandler+0x118>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 80052a2:	4b34      	ldr	r3, [pc, #208]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d12d      	bne.n	800530c <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80052b0:	4b30      	ldr	r3, [pc, #192]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80052c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005378 <USART3_IRQHandler+0x124>)
 80052d0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80052d2:	4b28      	ldr	r3, [pc, #160]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2224      	movs	r2, #36	@ 0x24
 80052d8:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 80052da:	4b26      	ldr	r3, [pc, #152]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80052e8:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80052ea:	4b22      	ldr	r3, [pc, #136]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4b20      	ldr	r3, [pc, #128]	@ (8005374 <USART3_IRQHandler+0x120>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 80052fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005378 <USART3_IRQHandler+0x124>)
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	2b12      	cmp	r3, #18
 8005300:	d12f      	bne.n	8005362 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8005302:	491e      	ldr	r1, [pc, #120]	@ (800537c <USART3_IRQHandler+0x128>)
 8005304:	481e      	ldr	r0, [pc, #120]	@ (8005380 <USART3_IRQHandler+0x12c>)
 8005306:	f000 f841 	bl	800538c <sbus_to_rc>
}
 800530a:	e02a      	b.n	8005362 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 800530c:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <USART3_IRQHandler+0x120>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b18      	ldr	r3, [pc, #96]	@ (8005374 <USART3_IRQHandler+0x120>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 800531c:	4b15      	ldr	r3, [pc, #84]	@ (8005374 <USART3_IRQHandler+0x120>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005328:	b29a      	uxth	r2, r3
 800532a:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <USART3_IRQHandler+0x124>)
 800532c:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 800532e:	4b11      	ldr	r3, [pc, #68]	@ (8005374 <USART3_IRQHandler+0x120>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2224      	movs	r2, #36	@ 0x24
 8005334:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8005336:	4b13      	ldr	r3, [pc, #76]	@ (8005384 <USART3_IRQHandler+0x130>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a12      	ldr	r2, [pc, #72]	@ (8005384 <USART3_IRQHandler+0x130>)
 800533c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005340:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8005342:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <USART3_IRQHandler+0x120>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	4b0a      	ldr	r3, [pc, #40]	@ (8005374 <USART3_IRQHandler+0x120>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8005352:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <USART3_IRQHandler+0x124>)
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	2b12      	cmp	r3, #18
 8005358:	d103      	bne.n	8005362 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 800535a:	4908      	ldr	r1, [pc, #32]	@ (800537c <USART3_IRQHandler+0x128>)
 800535c:	480a      	ldr	r0, [pc, #40]	@ (8005388 <USART3_IRQHandler+0x134>)
 800535e:	f000 f815 	bl	800538c <sbus_to_rc>
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000c9c 	.word	0x20000c9c
 8005370:	40004800 	.word	0x40004800
 8005374:	20000dec 	.word	0x20000dec
 8005378:	20001004 	.word	0x20001004
 800537c:	20000fa4 	.word	0x20000fa4
 8005380:	20000fbc 	.word	0x20000fbc
 8005384:	40026028 	.word	0x40026028
 8005388:	20000fe0 	.word	0x20000fe0

0800538c <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8101 	beq.w	80055a0 <sbus_to_rc+0x214>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80fd 	beq.w	80055a0 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	b21a      	sxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3301      	adds	r3, #1
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	b21b      	sxth	r3, r3
 80053ba:	4313      	orrs	r3, r2
 80053bc:	b21b      	sxth	r3, r3
 80053be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053c2:	b21a      	sxth	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3301      	adds	r3, #1
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	08db      	lsrs	r3, r3, #3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	b21a      	sxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3302      	adds	r3, #2
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	015b      	lsls	r3, r3, #5
 80053e0:	b21b      	sxth	r3, r3
 80053e2:	4313      	orrs	r3, r2
 80053e4:	b21b      	sxth	r3, r3
 80053e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053ea:	b21a      	sxth	r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3302      	adds	r3, #2
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	099b      	lsrs	r3, r3, #6
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	b21a      	sxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3303      	adds	r3, #3
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	b21b      	sxth	r3, r3
 800540a:	4313      	orrs	r3, r2
 800540c:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005418:	b21b      	sxth	r3, r3
 800541a:	4313      	orrs	r3, r2
 800541c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 800541e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005422:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	b21a      	sxth	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3305      	adds	r3, #5
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	01db      	lsls	r3, r3, #7
 8005440:	b21b      	sxth	r3, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	b21b      	sxth	r3, r3
 8005446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800544a:	b21a      	sxth	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3305      	adds	r3, #5
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	b2da      	uxtb	r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3305      	adds	r3, #5
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	091b      	lsrs	r3, r3, #4
 8005470:	b2db      	uxtb	r3, r3
 8005472:	109b      	asrs	r3, r3, #2
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	b2da      	uxtb	r2, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3306      	adds	r3, #6
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	b21a      	sxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3307      	adds	r3, #7
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	b21b      	sxth	r3, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	b21a      	sxth	r2, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3308      	adds	r3, #8
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	b21a      	sxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3309      	adds	r3, #9
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	b21b      	sxth	r3, r3
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b21a      	sxth	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	330a      	adds	r3, #10
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	b21a      	sxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	330b      	adds	r3, #11
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	b21b      	sxth	r3, r3
 80054d2:	4313      	orrs	r3, r2
 80054d4:	b21a      	sxth	r2, r3
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	330c      	adds	r3, #12
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	330d      	adds	r3, #13
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	330e      	adds	r3, #14
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	b21a      	sxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	330f      	adds	r3, #15
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	b21b      	sxth	r3, r3
 8005508:	4313      	orrs	r3, r2
 800550a:	b21b      	sxth	r3, r3
 800550c:	b29a      	uxth	r2, r3
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3310      	adds	r3, #16
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	b21a      	sxth	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3311      	adds	r3, #17
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	b21b      	sxth	r3, r3
 8005528:	4313      	orrs	r3, r2
 800552a:	b21a      	sxth	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005536:	b21b      	sxth	r3, r3
 8005538:	b29b      	uxth	r3, r3
 800553a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800553e:	b29b      	uxth	r3, r3
 8005540:	b21a      	sxth	r2, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800554c:	b21b      	sxth	r3, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005554:	b29b      	uxth	r3, r3
 8005556:	b21a      	sxth	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005562:	b21b      	sxth	r3, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800556a:	b29b      	uxth	r3, r3
 800556c:	b21a      	sxth	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005578:	b21b      	sxth	r3, r3
 800557a:	b29b      	uxth	r3, r3
 800557c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005580:	b29b      	uxth	r3, r3
 8005582:	b21a      	sxth	r2, r3
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800558e:	b21b      	sxth	r3, r3
 8005590:	b29b      	uxth	r3, r3
 8005592:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005596:	b29b      	uxth	r3, r3
 8005598:	b21a      	sxth	r2, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	811a      	strh	r2, [r3, #8]
 800559e:	e000      	b.n	80055a2 <sbus_to_rc+0x216>
        return;
 80055a0:	bf00      	nop
}
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 80055b6:	4b06      	ldr	r3, [pc, #24]	@ (80055d0 <getRCchannel+0x24>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80055be:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80055c2:	b21b      	sxth	r3, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	2000005c 	.word	0x2000005c

080055d4 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 80055de:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <getRCswitch+0x24>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e6:	4413      	add	r3, r2
 80055e8:	7a9b      	ldrb	r3, [r3, #10]
 80055ea:	b25b      	sxtb	r3, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	2000005c 	.word	0x2000005c

080055fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <HAL_MspInit+0x54>)
 8005608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560a:	4a11      	ldr	r2, [pc, #68]	@ (8005650 <HAL_MspInit+0x54>)
 800560c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005610:	6453      	str	r3, [r2, #68]	@ 0x44
 8005612:	4b0f      	ldr	r3, [pc, #60]	@ (8005650 <HAL_MspInit+0x54>)
 8005614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800561a:	607b      	str	r3, [r7, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <HAL_MspInit+0x54>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	4a0a      	ldr	r2, [pc, #40]	@ (8005650 <HAL_MspInit+0x54>)
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562c:	6413      	str	r3, [r2, #64]	@ 0x40
 800562e:	4b08      	ldr	r3, [pc, #32]	@ (8005650 <HAL_MspInit+0x54>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800563a:	2200      	movs	r2, #0
 800563c:	210f      	movs	r1, #15
 800563e:	f06f 0001 	mvn.w	r0, #1
 8005642:	f001 ffae 	bl	80075a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800

08005654 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	@ 0x30
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a4a      	ldr	r2, [pc, #296]	@ (800579c <HAL_CAN_MspInit+0x148>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d13d      	bne.n	80056f2 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005676:	4b4a      	ldr	r3, [pc, #296]	@ (80057a0 <HAL_CAN_MspInit+0x14c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	4a48      	ldr	r2, [pc, #288]	@ (80057a0 <HAL_CAN_MspInit+0x14c>)
 800567e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005680:	4b47      	ldr	r3, [pc, #284]	@ (80057a0 <HAL_CAN_MspInit+0x14c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d10d      	bne.n	80056a4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005688:	2300      	movs	r3, #0
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	4b45      	ldr	r3, [pc, #276]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	4a44      	ldr	r2, [pc, #272]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 8005692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005696:	6413      	str	r3, [r2, #64]	@ 0x40
 8005698:	4b42      	ldr	r3, [pc, #264]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	4b3e      	ldr	r3, [pc, #248]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	4a3d      	ldr	r2, [pc, #244]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 80056ae:	f043 0308 	orr.w	r3, r3, #8
 80056b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80056b4:	4b3b      	ldr	r3, [pc, #236]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80056c0:	2303      	movs	r3, #3
 80056c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c4:	2302      	movs	r3, #2
 80056c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056cc:	2303      	movs	r3, #3
 80056ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80056d0:	2309      	movs	r3, #9
 80056d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056d4:	f107 031c 	add.w	r3, r7, #28
 80056d8:	4619      	mov	r1, r3
 80056da:	4833      	ldr	r0, [pc, #204]	@ (80057a8 <HAL_CAN_MspInit+0x154>)
 80056dc:	f002 fb9a 	bl	8007e14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80056e0:	2200      	movs	r2, #0
 80056e2:	2105      	movs	r1, #5
 80056e4:	2014      	movs	r0, #20
 80056e6:	f001 ff5c 	bl	80075a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80056ea:	2014      	movs	r0, #20
 80056ec:	f001 ff75 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80056f0:	e04f      	b.n	8005792 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2d      	ldr	r2, [pc, #180]	@ (80057ac <HAL_CAN_MspInit+0x158>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d14a      	bne.n	8005792 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	4b28      	ldr	r3, [pc, #160]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 8005702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005704:	4a27      	ldr	r2, [pc, #156]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 8005706:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800570a:	6413      	str	r3, [r2, #64]	@ 0x40
 800570c:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 800570e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005718:	4b21      	ldr	r3, [pc, #132]	@ (80057a0 <HAL_CAN_MspInit+0x14c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	4a20      	ldr	r2, [pc, #128]	@ (80057a0 <HAL_CAN_MspInit+0x14c>)
 8005720:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005722:	4b1f      	ldr	r3, [pc, #124]	@ (80057a0 <HAL_CAN_MspInit+0x14c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10d      	bne.n	8005746 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	4b1d      	ldr	r3, [pc, #116]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	4a1c      	ldr	r2, [pc, #112]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 8005734:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005738:	6413      	str	r3, [r2, #64]	@ 0x40
 800573a:	4b1a      	ldr	r3, [pc, #104]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	4b16      	ldr	r3, [pc, #88]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574e:	4a15      	ldr	r2, [pc, #84]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 8005750:	f043 0302 	orr.w	r3, r3, #2
 8005754:	6313      	str	r3, [r2, #48]	@ 0x30
 8005756:	4b13      	ldr	r3, [pc, #76]	@ (80057a4 <HAL_CAN_MspInit+0x150>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005762:	2360      	movs	r3, #96	@ 0x60
 8005764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005766:	2302      	movs	r3, #2
 8005768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800576a:	2300      	movs	r3, #0
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800576e:	2303      	movs	r3, #3
 8005770:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8005772:	2309      	movs	r3, #9
 8005774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005776:	f107 031c 	add.w	r3, r7, #28
 800577a:	4619      	mov	r1, r3
 800577c:	480c      	ldr	r0, [pc, #48]	@ (80057b0 <HAL_CAN_MspInit+0x15c>)
 800577e:	f002 fb49 	bl	8007e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8005782:	2200      	movs	r2, #0
 8005784:	2105      	movs	r1, #5
 8005786:	2040      	movs	r0, #64	@ 0x40
 8005788:	f001 ff0b 	bl	80075a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800578c:	2040      	movs	r0, #64	@ 0x40
 800578e:	f001 ff24 	bl	80075da <HAL_NVIC_EnableIRQ>
}
 8005792:	bf00      	nop
 8005794:	3730      	adds	r7, #48	@ 0x30
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40006400 	.word	0x40006400
 80057a0:	20001008 	.word	0x20001008
 80057a4:	40023800 	.word	0x40023800
 80057a8:	40020c00 	.word	0x40020c00
 80057ac:	40006800 	.word	0x40006800
 80057b0:	40020400 	.word	0x40020400

080057b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	@ 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	60da      	str	r2, [r3, #12]
 80057ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a29      	ldr	r2, [pc, #164]	@ (8005878 <HAL_I2C_MspInit+0xc4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d14b      	bne.n	800586e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	4b28      	ldr	r3, [pc, #160]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	4a27      	ldr	r2, [pc, #156]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80057e6:	4b25      	ldr	r3, [pc, #148]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	4b21      	ldr	r3, [pc, #132]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	4a20      	ldr	r2, [pc, #128]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	6313      	str	r3, [r2, #48]	@ 0x30
 8005802:	4b1e      	ldr	r3, [pc, #120]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800580e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005814:	2312      	movs	r3, #18
 8005816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800581c:	2303      	movs	r3, #3
 800581e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005820:	2304      	movs	r3, #4
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005824:	f107 0314 	add.w	r3, r7, #20
 8005828:	4619      	mov	r1, r3
 800582a:	4815      	ldr	r0, [pc, #84]	@ (8005880 <HAL_I2C_MspInit+0xcc>)
 800582c:	f002 faf2 	bl	8007e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005836:	2312      	movs	r3, #18
 8005838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800583e:	2303      	movs	r3, #3
 8005840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005842:	2304      	movs	r3, #4
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005846:	f107 0314 	add.w	r3, r7, #20
 800584a:	4619      	mov	r1, r3
 800584c:	480d      	ldr	r0, [pc, #52]	@ (8005884 <HAL_I2C_MspInit+0xd0>)
 800584e:	f002 fae1 	bl	8007e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	4b09      	ldr	r3, [pc, #36]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	4a08      	ldr	r2, [pc, #32]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 800585c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005860:	6413      	str	r3, [r2, #64]	@ 0x40
 8005862:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_I2C_MspInit+0xc8>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800586e:	bf00      	nop
 8005870:	3728      	adds	r7, #40	@ 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40005c00 	.word	0x40005c00
 800587c:	40023800 	.word	0x40023800
 8005880:	40020800 	.word	0x40020800
 8005884:	40020000 	.word	0x40020000

08005888 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	60da      	str	r2, [r3, #12]
 800589e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a28      	ldr	r2, [pc, #160]	@ (8005948 <HAL_SPI_MspInit+0xc0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d149      	bne.n	800593e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	4b27      	ldr	r3, [pc, #156]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b2:	4a26      	ldr	r2, [pc, #152]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80058ba:	4b24      	ldr	r3, [pc, #144]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	4b20      	ldr	r3, [pc, #128]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	4a1f      	ldr	r2, [pc, #124]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80058d6:	4b1d      	ldr	r3, [pc, #116]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	4b19      	ldr	r3, [pc, #100]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	4a18      	ldr	r2, [pc, #96]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80058f2:	4b16      	ldr	r3, [pc, #88]	@ (800594c <HAL_SPI_MspInit+0xc4>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80058fe:	2318      	movs	r3, #24
 8005900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005902:	2302      	movs	r3, #2
 8005904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800590a:	2303      	movs	r3, #3
 800590c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800590e:	2305      	movs	r3, #5
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005912:	f107 0314 	add.w	r3, r7, #20
 8005916:	4619      	mov	r1, r3
 8005918:	480d      	ldr	r0, [pc, #52]	@ (8005950 <HAL_SPI_MspInit+0xc8>)
 800591a:	f002 fa7b 	bl	8007e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800591e:	2380      	movs	r3, #128	@ 0x80
 8005920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005922:	2302      	movs	r3, #2
 8005924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800592a:	2303      	movs	r3, #3
 800592c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800592e:	2305      	movs	r3, #5
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005932:	f107 0314 	add.w	r3, r7, #20
 8005936:	4619      	mov	r1, r3
 8005938:	4806      	ldr	r0, [pc, #24]	@ (8005954 <HAL_SPI_MspInit+0xcc>)
 800593a:	f002 fa6b 	bl	8007e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800593e:	bf00      	nop
 8005940:	3728      	adds	r7, #40	@ 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40013000 	.word	0x40013000
 800594c:	40023800 	.word	0x40023800
 8005950:	40020400 	.word	0x40020400
 8005954:	40020000 	.word	0x40020000

08005958 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a83      	ldr	r2, [pc, #524]	@ (8005b74 <HAL_TIM_PWM_MspInit+0x21c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d13e      	bne.n	80059e8 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	4b82      	ldr	r3, [pc, #520]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 8005970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005972:	4a81      	ldr	r2, [pc, #516]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	6453      	str	r3, [r2, #68]	@ 0x44
 800597a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 8005986:	4b7d      	ldr	r3, [pc, #500]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 8005988:	4a7d      	ldr	r2, [pc, #500]	@ (8005b80 <HAL_TIM_PWM_MspInit+0x228>)
 800598a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800598c:	4b7b      	ldr	r3, [pc, #492]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 800598e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8005992:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005994:	4b79      	ldr	r3, [pc, #484]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 8005996:	2200      	movs	r2, #0
 8005998:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800599a:	4b78      	ldr	r3, [pc, #480]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 800599c:	2200      	movs	r2, #0
 800599e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80059a0:	4b76      	ldr	r3, [pc, #472]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059a6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80059a8:	4b74      	ldr	r3, [pc, #464]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059ae:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80059b0:	4b72      	ldr	r3, [pc, #456]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80059b6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80059b8:	4b70      	ldr	r3, [pc, #448]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80059be:	4b6f      	ldr	r3, [pc, #444]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059c4:	4b6d      	ldr	r3, [pc, #436]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80059ca:	486c      	ldr	r0, [pc, #432]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059cc:	f001 fe20 	bl	8007610 <HAL_DMA_Init>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80059d6:	f7fe fee1 	bl	800479c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a67      	ldr	r2, [pc, #412]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059de:	625a      	str	r2, [r3, #36]	@ 0x24
 80059e0:	4a66      	ldr	r2, [pc, #408]	@ (8005b7c <HAL_TIM_PWM_MspInit+0x224>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80059e6:	e0c1      	b.n	8005b6c <HAL_TIM_PWM_MspInit+0x214>
  else if(htim_pwm->Instance==TIM5)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a65      	ldr	r2, [pc, #404]	@ (8005b84 <HAL_TIM_PWM_MspInit+0x22c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d16e      	bne.n	8005ad0 <HAL_TIM_PWM_MspInit+0x178>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	4b60      	ldr	r3, [pc, #384]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fa:	4a5f      	ldr	r2, [pc, #380]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 80059fc:	f043 0308 	orr.w	r3, r3, #8
 8005a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a02:	4b5d      	ldr	r3, [pc, #372]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8005a0e:	4b5e      	ldr	r3, [pc, #376]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a10:	4a5e      	ldr	r2, [pc, #376]	@ (8005b8c <HAL_TIM_PWM_MspInit+0x234>)
 8005a12:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8005a14:	4b5c      	ldr	r3, [pc, #368]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a16:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8005a1a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a22:	4b59      	ldr	r3, [pc, #356]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005a28:	4b57      	ldr	r3, [pc, #348]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a2e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a30:	4b55      	ldr	r3, [pc, #340]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005a36:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a38:	4b53      	ldr	r3, [pc, #332]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a3e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8005a40:	4b51      	ldr	r3, [pc, #324]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005a46:	4b50      	ldr	r3, [pc, #320]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8005a52:	484d      	ldr	r0, [pc, #308]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a54:	f001 fddc 	bl	8007610 <HAL_DMA_Init>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 8005a5e:	f7fe fe9d 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a48      	ldr	r2, [pc, #288]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a66:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a68:	4a47      	ldr	r2, [pc, #284]	@ (8005b88 <HAL_TIM_PWM_MspInit+0x230>)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8005a6e:	4b48      	ldr	r3, [pc, #288]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005a70:	4a48      	ldr	r2, [pc, #288]	@ (8005b94 <HAL_TIM_PWM_MspInit+0x23c>)
 8005a72:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8005a74:	4b46      	ldr	r3, [pc, #280]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005a76:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8005a7a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a7c:	4b44      	ldr	r3, [pc, #272]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a82:	4b43      	ldr	r3, [pc, #268]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005a88:	4b41      	ldr	r3, [pc, #260]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005a8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a8e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a90:	4b3f      	ldr	r3, [pc, #252]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005a92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005a96:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a98:	4b3d      	ldr	r3, [pc, #244]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005a9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a9e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8005aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005aac:	4b38      	ldr	r3, [pc, #224]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8005ab2:	4837      	ldr	r0, [pc, #220]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005ab4:	f001 fdac 	bl	8007610 <HAL_DMA_Init>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_TIM_PWM_MspInit+0x16a>
      Error_Handler();
 8005abe:	f7fe fe6d 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a32      	ldr	r2, [pc, #200]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ac8:	4a31      	ldr	r2, [pc, #196]	@ (8005b90 <HAL_TIM_PWM_MspInit+0x238>)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005ace:	e04d      	b.n	8005b6c <HAL_TIM_PWM_MspInit+0x214>
  else if(htim_pwm->Instance==TIM8)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a30      	ldr	r2, [pc, #192]	@ (8005b98 <HAL_TIM_PWM_MspInit+0x240>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d148      	bne.n	8005b6c <HAL_TIM_PWM_MspInit+0x214>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	4b26      	ldr	r3, [pc, #152]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae2:	4a25      	ldr	r2, [pc, #148]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 8005ae4:	f043 0302 	orr.w	r3, r3, #2
 8005ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005aea:	4b23      	ldr	r3, [pc, #140]	@ (8005b78 <HAL_TIM_PWM_MspInit+0x220>)
 8005aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1_ch2_ch3.Instance = DMA2_Stream2;
 8005af6:	4b29      	ldr	r3, [pc, #164]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005af8:	4a29      	ldr	r2, [pc, #164]	@ (8005ba0 <HAL_TIM_PWM_MspInit+0x248>)
 8005afa:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8005afc:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b02:	4b26      	ldr	r3, [pc, #152]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b08:	4b24      	ldr	r3, [pc, #144]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005b0e:	4b23      	ldr	r3, [pc, #140]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b14:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b16:	4b21      	ldr	r3, [pc, #132]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b1c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b24:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 8005b26:	4b1d      	ldr	r3, [pc, #116]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b32:	4b1a      	ldr	r3, [pc, #104]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1_ch2_ch3) != HAL_OK)
 8005b38:	4818      	ldr	r0, [pc, #96]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b3a:	f001 fd69 	bl	8007610 <HAL_DMA_Init>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_TIM_PWM_MspInit+0x1f0>
      Error_Handler();
 8005b44:	f7fe fe2a 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1_ch2_ch3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b4e:	4a13      	ldr	r2, [pc, #76]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch1_ch2_ch3);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a11      	ldr	r2, [pc, #68]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b58:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b5a:	4a10      	ldr	r2, [pc, #64]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch1_ch2_ch3);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a0e      	ldr	r2, [pc, #56]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b66:	4a0d      	ldr	r2, [pc, #52]	@ (8005b9c <HAL_TIM_PWM_MspInit+0x244>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005b6c:	bf00      	nop
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	20000a74 	.word	0x20000a74
 8005b80:	40026458 	.word	0x40026458
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	20000b34 	.word	0x20000b34
 8005b8c:	40026040 	.word	0x40026040
 8005b90:	20000b94 	.word	0x20000b94
 8005b94:	40026070 	.word	0x40026070
 8005b98:	40010400 	.word	0x40010400
 8005b9c:	20000bf4 	.word	0x20000bf4
 8005ba0:	40026440 	.word	0x40026440

08005ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c64 <HAL_TIM_Base_MspInit+0xc0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d13e      	bne.n	8005c34 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	4b2b      	ldr	r3, [pc, #172]	@ (8005c68 <HAL_TIM_Base_MspInit+0xc4>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005c68 <HAL_TIM_Base_MspInit+0xc4>)
 8005bc0:	f043 0304 	orr.w	r3, r3, #4
 8005bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bc6:	4b28      	ldr	r3, [pc, #160]	@ (8005c68 <HAL_TIM_Base_MspInit+0xc4>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8005bd2:	4b26      	ldr	r3, [pc, #152]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005bd4:	4a26      	ldr	r2, [pc, #152]	@ (8005c70 <HAL_TIM_Base_MspInit+0xcc>)
 8005bd6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8005bd8:	4b24      	ldr	r3, [pc, #144]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005bda:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005bde:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005be0:	4b22      	ldr	r3, [pc, #136]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005be6:	4b21      	ldr	r3, [pc, #132]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005bec:	4b1f      	ldr	r3, [pc, #124]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bf2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005bf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bfa:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005bfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c02:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8005c04:	4b19      	ldr	r3, [pc, #100]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005c0a:	4b18      	ldr	r3, [pc, #96]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c10:	4b16      	ldr	r3, [pc, #88]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8005c16:	4815      	ldr	r0, [pc, #84]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005c18:	f001 fcfa 	bl	8007610 <HAL_DMA_Init>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8005c22:	f7fe fdbb 	bl	800479c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a10      	ldr	r2, [pc, #64]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8005c6c <HAL_TIM_Base_MspInit+0xc8>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005c32:	e012      	b.n	8005c5a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0e      	ldr	r2, [pc, #56]	@ (8005c74 <HAL_TIM_Base_MspInit+0xd0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d10d      	bne.n	8005c5a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <HAL_TIM_Base_MspInit+0xc4>)
 8005c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c46:	4a08      	ldr	r2, [pc, #32]	@ (8005c68 <HAL_TIM_Base_MspInit+0xc4>)
 8005c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c4e:	4b06      	ldr	r3, [pc, #24]	@ (8005c68 <HAL_TIM_Base_MspInit+0xc4>)
 8005c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68bb      	ldr	r3, [r7, #8]
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	20000ad4 	.word	0x20000ad4
 8005c70:	400260b8 	.word	0x400260b8
 8005c74:	40014400 	.word	0x40014400

08005c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08e      	sub	sp, #56	@ 0x38
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a6a      	ldr	r2, [pc, #424]	@ (8005e40 <HAL_TIM_MspPostInit+0x1c8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d11f      	bne.n	8005cda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	4b69      	ldr	r3, [pc, #420]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	4a68      	ldr	r2, [pc, #416]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005ca4:	f043 0310 	orr.w	r3, r3, #16
 8005ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005caa:	4b66      	ldr	r3, [pc, #408]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	623b      	str	r3, [r7, #32]
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8005cb6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	485d      	ldr	r0, [pc, #372]	@ (8005e48 <HAL_TIM_MspPostInit+0x1d0>)
 8005cd4:	f002 f89e 	bl	8007e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8005cd8:	e0ae      	b.n	8005e38 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a5b      	ldr	r2, [pc, #364]	@ (8005e4c <HAL_TIM_MspPostInit+0x1d4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d11f      	bne.n	8005d24 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]
 8005ce8:	4b56      	ldr	r3, [pc, #344]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cec:	4a55      	ldr	r2, [pc, #340]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005cee:	f043 0308 	orr.w	r3, r3, #8
 8005cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cf4:	4b53      	ldr	r3, [pc, #332]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005d04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d06:	2302      	movs	r3, #2
 8005d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d12:	2302      	movs	r3, #2
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	484c      	ldr	r0, [pc, #304]	@ (8005e50 <HAL_TIM_MspPostInit+0x1d8>)
 8005d1e:	f002 f879 	bl	8007e14 <HAL_GPIO_Init>
}
 8005d22:	e089      	b.n	8005e38 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a4a      	ldr	r2, [pc, #296]	@ (8005e54 <HAL_TIM_MspPostInit+0x1dc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d11f      	bne.n	8005d6e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	4b44      	ldr	r3, [pc, #272]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	4a43      	ldr	r2, [pc, #268]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d3e:	4b41      	ldr	r3, [pc, #260]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8005d4a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d50:	2302      	movs	r3, #2
 8005d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d64:	4619      	mov	r1, r3
 8005d66:	483c      	ldr	r0, [pc, #240]	@ (8005e58 <HAL_TIM_MspPostInit+0x1e0>)
 8005d68:	f002 f854 	bl	8007e14 <HAL_GPIO_Init>
}
 8005d6c:	e064      	b.n	8005e38 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a3a      	ldr	r2, [pc, #232]	@ (8005e5c <HAL_TIM_MspPostInit+0x1e4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d13c      	bne.n	8005df2 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	4b31      	ldr	r3, [pc, #196]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d80:	4a30      	ldr	r2, [pc, #192]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d88:	4b2e      	ldr	r3, [pc, #184]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	4b2a      	ldr	r3, [pc, #168]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9c:	4a29      	ldr	r2, [pc, #164]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005d9e:	f043 0304 	orr.w	r3, r3, #4
 8005da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005da4:	4b27      	ldr	r3, [pc, #156]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005db0:	23c0      	movs	r3, #192	@ 0xc0
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db4:	2302      	movs	r3, #2
 8005db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4825      	ldr	r0, [pc, #148]	@ (8005e60 <HAL_TIM_MspPostInit+0x1e8>)
 8005dcc:	f002 f822 	bl	8007e14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005dd0:	2340      	movs	r3, #64	@ 0x40
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005de0:	2303      	movs	r3, #3
 8005de2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005de8:	4619      	mov	r1, r3
 8005dea:	481e      	ldr	r0, [pc, #120]	@ (8005e64 <HAL_TIM_MspPostInit+0x1ec>)
 8005dec:	f002 f812 	bl	8007e14 <HAL_GPIO_Init>
}
 8005df0:	e022      	b.n	8005e38 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e68 <HAL_TIM_MspPostInit+0x1f0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d11d      	bne.n	8005e38 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e04:	4a0f      	ldr	r2, [pc, #60]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005e06:	f043 0320 	orr.w	r3, r3, #32
 8005e0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <HAL_TIM_MspPostInit+0x1cc>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e18:	2340      	movs	r3, #64	@ 0x40
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e20:	2301      	movs	r3, #1
 8005e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e24:	2302      	movs	r3, #2
 8005e26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e30:	4619      	mov	r1, r3
 8005e32:	480e      	ldr	r0, [pc, #56]	@ (8005e6c <HAL_TIM_MspPostInit+0x1f4>)
 8005e34:	f001 ffee 	bl	8007e14 <HAL_GPIO_Init>
}
 8005e38:	bf00      	nop
 8005e3a:	3738      	adds	r7, #56	@ 0x38
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40023800 	.word	0x40023800
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40020c00 	.word	0x40020c00
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40021c00 	.word	0x40021c00
 8005e5c:	40010400 	.word	0x40010400
 8005e60:	40022000 	.word	0x40022000
 8005e64:	40020800 	.word	0x40020800
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40021400 	.word	0x40021400

08005e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	@ 0x38
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	609a      	str	r2, [r3, #8]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a90      	ldr	r2, [pc, #576]	@ (80060d0 <HAL_UART_MspInit+0x260>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	f040 80b2 	bne.w	8005ff8 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e94:	2300      	movs	r3, #0
 8005e96:	623b      	str	r3, [r7, #32]
 8005e98:	4b8e      	ldr	r3, [pc, #568]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9c:	4a8d      	ldr	r2, [pc, #564]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005e9e:	f043 0310 	orr.w	r3, r3, #16
 8005ea2:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ea4:	4b8b      	ldr	r3, [pc, #556]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	623b      	str	r3, [r7, #32]
 8005eae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	4b87      	ldr	r3, [pc, #540]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	4a86      	ldr	r2, [pc, #536]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005eba:	f043 0302 	orr.w	r3, r3, #2
 8005ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ec0:	4b84      	ldr	r3, [pc, #528]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	4b80      	ldr	r3, [pc, #512]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed4:	4a7f      	ldr	r2, [pc, #508]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8005edc:	4b7d      	ldr	r3, [pc, #500]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8005ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eec:	2302      	movs	r3, #2
 8005eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ef8:	2307      	movs	r3, #7
 8005efa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f00:	4619      	mov	r1, r3
 8005f02:	4875      	ldr	r0, [pc, #468]	@ (80060d8 <HAL_UART_MspInit+0x268>)
 8005f04:	f001 ff86 	bl	8007e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0e:	2302      	movs	r3, #2
 8005f10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f16:	2303      	movs	r3, #3
 8005f18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f1a:	2307      	movs	r3, #7
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f22:	4619      	mov	r1, r3
 8005f24:	486d      	ldr	r0, [pc, #436]	@ (80060dc <HAL_UART_MspInit+0x26c>)
 8005f26:	f001 ff75 	bl	8007e14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8005f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f2c:	4a6d      	ldr	r2, [pc, #436]	@ (80060e4 <HAL_UART_MspInit+0x274>)
 8005f2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005f30:	4b6b      	ldr	r3, [pc, #428]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005f36:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f38:	4b69      	ldr	r3, [pc, #420]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f3a:	2240      	movs	r2, #64	@ 0x40
 8005f3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f3e:	4b68      	ldr	r3, [pc, #416]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f44:	4b66      	ldr	r3, [pc, #408]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f4c:	4b64      	ldr	r3, [pc, #400]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f52:	4b63      	ldr	r3, [pc, #396]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005f58:	4b61      	ldr	r3, [pc, #388]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005f5e:	4b60      	ldr	r3, [pc, #384]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f60:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005f64:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f66:	4b5e      	ldr	r3, [pc, #376]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005f6c:	485c      	ldr	r0, [pc, #368]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f6e:	f001 fb4f 	bl	8007610 <HAL_DMA_Init>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005f78:	f7fe fc10 	bl	800479c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a58      	ldr	r2, [pc, #352]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f80:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f82:	4a57      	ldr	r2, [pc, #348]	@ (80060e0 <HAL_UART_MspInit+0x270>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8005f88:	4b57      	ldr	r3, [pc, #348]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005f8a:	4a58      	ldr	r2, [pc, #352]	@ (80060ec <HAL_UART_MspInit+0x27c>)
 8005f8c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005f8e:	4b56      	ldr	r3, [pc, #344]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005f90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005f94:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f96:	4b54      	ldr	r3, [pc, #336]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f9c:	4b52      	ldr	r3, [pc, #328]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fa2:	4b51      	ldr	r3, [pc, #324]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fa8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005faa:	4b4f      	ldr	r3, [pc, #316]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fbe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005fc2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fc4:	4b48      	ldr	r3, [pc, #288]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005fca:	4847      	ldr	r0, [pc, #284]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fcc:	f001 fb20 	bl	8007610 <HAL_DMA_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8005fd6:	f7fe fbe1 	bl	800479c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a42      	ldr	r2, [pc, #264]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005fe0:	4a41      	ldr	r2, [pc, #260]	@ (80060e8 <HAL_UART_MspInit+0x278>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2105      	movs	r1, #5
 8005fea:	2025      	movs	r0, #37	@ 0x25
 8005fec:	f001 fad9 	bl	80075a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ff0:	2025      	movs	r0, #37	@ 0x25
 8005ff2:	f001 faf2 	bl	80075da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005ff6:	e11c      	b.n	8006232 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80060f0 <HAL_UART_MspInit+0x280>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d17e      	bne.n	8006100 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	4b33      	ldr	r3, [pc, #204]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600a:	4a32      	ldr	r2, [pc, #200]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 800600c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006010:	6413      	str	r3, [r2, #64]	@ 0x40
 8006012:	4b30      	ldr	r3, [pc, #192]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	4b2c      	ldr	r3, [pc, #176]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8006024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006026:	4a2b      	ldr	r2, [pc, #172]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8006028:	f043 0304 	orr.w	r3, r3, #4
 800602c:	6313      	str	r3, [r2, #48]	@ 0x30
 800602e:	4b29      	ldr	r3, [pc, #164]	@ (80060d4 <HAL_UART_MspInit+0x264>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800603a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006040:	2302      	movs	r3, #2
 8006042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006044:	2300      	movs	r3, #0
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006048:	2303      	movs	r3, #3
 800604a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800604c:	2307      	movs	r3, #7
 800604e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006054:	4619      	mov	r1, r3
 8006056:	4827      	ldr	r0, [pc, #156]	@ (80060f4 <HAL_UART_MspInit+0x284>)
 8006058:	f001 fedc 	bl	8007e14 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800605c:	4b26      	ldr	r3, [pc, #152]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 800605e:	4a27      	ldr	r2, [pc, #156]	@ (80060fc <HAL_UART_MspInit+0x28c>)
 8006060:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006062:	4b25      	ldr	r3, [pc, #148]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 8006064:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006068:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800606a:	4b23      	ldr	r3, [pc, #140]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006070:	4b21      	ldr	r3, [pc, #132]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 8006072:	2200      	movs	r2, #0
 8006074:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006076:	4b20      	ldr	r3, [pc, #128]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 8006078:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800607c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800607e:	4b1e      	ldr	r3, [pc, #120]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 8006080:	2200      	movs	r2, #0
 8006082:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006084:	4b1c      	ldr	r3, [pc, #112]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 8006086:	2200      	movs	r2, #0
 8006088:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800608a:	4b1b      	ldr	r3, [pc, #108]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 800608c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006090:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006092:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 8006094:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006098:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800609a:	4b17      	ldr	r3, [pc, #92]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 800609c:	2200      	movs	r2, #0
 800609e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80060a0:	4815      	ldr	r0, [pc, #84]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 80060a2:	f001 fab5 	bl	8007610 <HAL_DMA_Init>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80060ac:	f7fe fb76 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a11      	ldr	r2, [pc, #68]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 80060b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80060b6:	4a10      	ldr	r2, [pc, #64]	@ (80060f8 <HAL_UART_MspInit+0x288>)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80060bc:	2200      	movs	r2, #0
 80060be:	2105      	movs	r1, #5
 80060c0:	2027      	movs	r0, #39	@ 0x27
 80060c2:	f001 fa6e 	bl	80075a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80060c6:	2027      	movs	r0, #39	@ 0x27
 80060c8:	f001 fa87 	bl	80075da <HAL_NVIC_EnableIRQ>
}
 80060cc:	e0b1      	b.n	8006232 <HAL_UART_MspInit+0x3c2>
 80060ce:	bf00      	nop
 80060d0:	40011000 	.word	0x40011000
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40020400 	.word	0x40020400
 80060dc:	40020000 	.word	0x40020000
 80060e0:	20000d2c 	.word	0x20000d2c
 80060e4:	400264b8 	.word	0x400264b8
 80060e8:	20000d8c 	.word	0x20000d8c
 80060ec:	40026488 	.word	0x40026488
 80060f0:	40004800 	.word	0x40004800
 80060f4:	40020800 	.word	0x40020800
 80060f8:	20000dec 	.word	0x20000dec
 80060fc:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a4d      	ldr	r2, [pc, #308]	@ (800623c <HAL_UART_MspInit+0x3cc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	f040 8093 	bne.w	8006232 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	4b4b      	ldr	r3, [pc, #300]	@ (8006240 <HAL_UART_MspInit+0x3d0>)
 8006112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006114:	4a4a      	ldr	r2, [pc, #296]	@ (8006240 <HAL_UART_MspInit+0x3d0>)
 8006116:	f043 0320 	orr.w	r3, r3, #32
 800611a:	6453      	str	r3, [r2, #68]	@ 0x44
 800611c:	4b48      	ldr	r3, [pc, #288]	@ (8006240 <HAL_UART_MspInit+0x3d0>)
 800611e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006128:	2300      	movs	r3, #0
 800612a:	60bb      	str	r3, [r7, #8]
 800612c:	4b44      	ldr	r3, [pc, #272]	@ (8006240 <HAL_UART_MspInit+0x3d0>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006130:	4a43      	ldr	r2, [pc, #268]	@ (8006240 <HAL_UART_MspInit+0x3d0>)
 8006132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006136:	6313      	str	r3, [r2, #48]	@ 0x30
 8006138:	4b41      	ldr	r3, [pc, #260]	@ (8006240 <HAL_UART_MspInit+0x3d0>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8006144:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8006148:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614a:	2302      	movs	r3, #2
 800614c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614e:	2300      	movs	r3, #0
 8006150:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006152:	2303      	movs	r3, #3
 8006154:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006156:	2308      	movs	r3, #8
 8006158:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800615a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800615e:	4619      	mov	r1, r3
 8006160:	4838      	ldr	r0, [pc, #224]	@ (8006244 <HAL_UART_MspInit+0x3d4>)
 8006162:	f001 fe57 	bl	8007e14 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006166:	4b38      	ldr	r3, [pc, #224]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 8006168:	4a38      	ldr	r2, [pc, #224]	@ (800624c <HAL_UART_MspInit+0x3dc>)
 800616a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800616c:	4b36      	ldr	r3, [pc, #216]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 800616e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006172:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006174:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 8006176:	2200      	movs	r2, #0
 8006178:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800617a:	4b33      	ldr	r3, [pc, #204]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 800617c:	2200      	movs	r2, #0
 800617e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006180:	4b31      	ldr	r3, [pc, #196]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 8006182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006186:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006188:	4b2f      	ldr	r3, [pc, #188]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 800618a:	2200      	movs	r2, #0
 800618c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800618e:	4b2e      	ldr	r3, [pc, #184]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 8006190:	2200      	movs	r2, #0
 8006192:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006194:	4b2c      	ldr	r3, [pc, #176]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 8006196:	2200      	movs	r2, #0
 8006198:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800619a:	4b2b      	ldr	r3, [pc, #172]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 800619c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80061a0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061a2:	4b29      	ldr	r3, [pc, #164]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80061a8:	4827      	ldr	r0, [pc, #156]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 80061aa:	f001 fa31 	bl	8007610 <HAL_DMA_Init>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_UART_MspInit+0x348>
      Error_Handler();
 80061b4:	f7fe faf2 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a23      	ldr	r2, [pc, #140]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 80061bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80061be:	4a22      	ldr	r2, [pc, #136]	@ (8006248 <HAL_UART_MspInit+0x3d8>)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80061c4:	4b22      	ldr	r3, [pc, #136]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061c6:	4a23      	ldr	r2, [pc, #140]	@ (8006254 <HAL_UART_MspInit+0x3e4>)
 80061c8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80061ca:	4b21      	ldr	r3, [pc, #132]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061cc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80061d0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061d4:	2240      	movs	r2, #64	@ 0x40
 80061d6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061da:	2200      	movs	r2, #0
 80061dc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061de:	4b1c      	ldr	r3, [pc, #112]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061e4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061ec:	4b18      	ldr	r3, [pc, #96]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80061f2:	4b17      	ldr	r3, [pc, #92]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80061f8:	4b15      	ldr	r3, [pc, #84]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 80061fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80061fe:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006200:	4b13      	ldr	r3, [pc, #76]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 8006202:	2200      	movs	r2, #0
 8006204:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006206:	4812      	ldr	r0, [pc, #72]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 8006208:	f001 fa02 	bl	8007610 <HAL_DMA_Init>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8006212:	f7fe fac3 	bl	800479c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a0d      	ldr	r2, [pc, #52]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 800621a:	639a      	str	r2, [r3, #56]	@ 0x38
 800621c:	4a0c      	ldr	r2, [pc, #48]	@ (8006250 <HAL_UART_MspInit+0x3e0>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006222:	2200      	movs	r2, #0
 8006224:	2105      	movs	r1, #5
 8006226:	2047      	movs	r0, #71	@ 0x47
 8006228:	f001 f9bb 	bl	80075a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800622c:	2047      	movs	r0, #71	@ 0x47
 800622e:	f001 f9d4 	bl	80075da <HAL_NVIC_EnableIRQ>
}
 8006232:	bf00      	nop
 8006234:	3738      	adds	r7, #56	@ 0x38
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40011400 	.word	0x40011400
 8006240:	40023800 	.word	0x40023800
 8006244:	40021800 	.word	0x40021800
 8006248:	20000e4c 	.word	0x20000e4c
 800624c:	40026428 	.word	0x40026428
 8006250:	20000eac 	.word	0x20000eac
 8006254:	400264a0 	.word	0x400264a0

08006258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800625c:	f003 fc30 	bl	8009ac0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <NMI_Handler+0x8>

08006264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006268:	bf00      	nop
 800626a:	e7fd      	b.n	8006268 <HardFault_Handler+0x4>

0800626c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <MemManage_Handler+0x4>

08006274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <BusFault_Handler+0x4>

0800627c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <UsageFault_Handler+0x4>

08006284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006296:	f000 f9fd 	bl	8006694 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800629a:	f007 ff65 	bl	800e168 <xTaskGetSchedulerState>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d001      	beq.n	80062a8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80062a4:	f008 fe40 	bl	800ef28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062a8:	bf00      	nop
 80062aa:	bd80      	pop	{r7, pc}

080062ac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80062b0:	2008      	movs	r0, #8
 80062b2:	f001 ff65 	bl	8008180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 80062b6:	4802      	ldr	r0, [pc, #8]	@ (80062c0 <EXTI3_IRQHandler+0x14>)
 80062b8:	f7fc f98e 	bl	80025d8 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80062bc:	bf00      	nop
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000804 	.word	0x20000804

080062c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80062c8:	2010      	movs	r0, #16
 80062ca:	f001 ff59 	bl	8008180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80062ce:	bf00      	nop
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80062d8:	4802      	ldr	r0, [pc, #8]	@ (80062e4 <DMA1_Stream1_IRQHandler+0x10>)
 80062da:	f001 fb31 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80062de:	bf00      	nop
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000dec 	.word	0x20000dec

080062e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80062ec:	4802      	ldr	r0, [pc, #8]	@ (80062f8 <DMA1_Stream2_IRQHandler+0x10>)
 80062ee:	f001 fb27 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80062f2:	bf00      	nop
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000b34 	.word	0x20000b34

080062fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8006300:	4802      	ldr	r0, [pc, #8]	@ (800630c <DMA1_Stream4_IRQHandler+0x10>)
 8006302:	f001 fb1d 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006306:	bf00      	nop
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000b94 	.word	0x20000b94

08006310 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006314:	4802      	ldr	r0, [pc, #8]	@ (8006320 <CAN1_RX0_IRQHandler+0x10>)
 8006316:	f000 fe39 	bl	8006f8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800631a:	bf00      	nop
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000810 	.word	0x20000810

08006324 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006328:	4802      	ldr	r0, [pc, #8]	@ (8006334 <USART1_IRQHandler+0x10>)
 800632a:	f004 ffcb 	bl	800b2c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800632e:	bf00      	nop
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000c54 	.word	0x20000c54

08006338 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800633c:	4802      	ldr	r0, [pc, #8]	@ (8006348 <DMA1_Stream7_IRQHandler+0x10>)
 800633e:	f001 faff 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000ad4 	.word	0x20000ad4

0800634c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006350:	4802      	ldr	r0, [pc, #8]	@ (800635c <DMA2_Stream1_IRQHandler+0x10>)
 8006352:	f001 faf5 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006356:	bf00      	nop
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000e4c 	.word	0x20000e4c

08006360 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1_ch2_ch3);
 8006364:	4802      	ldr	r0, [pc, #8]	@ (8006370 <DMA2_Stream2_IRQHandler+0x10>)
 8006366:	f001 faeb 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000bf4 	.word	0x20000bf4

08006374 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8006378:	4802      	ldr	r0, [pc, #8]	@ (8006384 <DMA2_Stream3_IRQHandler+0x10>)
 800637a:	f001 fae1 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000a74 	.word	0x20000a74

08006388 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800638c:	4802      	ldr	r0, [pc, #8]	@ (8006398 <CAN2_RX0_IRQHandler+0x10>)
 800638e:	f000 fdfd 	bl	8006f8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000838 	.word	0x20000838

0800639c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80063a0:	4802      	ldr	r0, [pc, #8]	@ (80063ac <DMA2_Stream5_IRQHandler+0x10>)
 80063a2:	f001 facd 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000d8c 	.word	0x20000d8c

080063b0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80063b4:	4802      	ldr	r0, [pc, #8]	@ (80063c0 <DMA2_Stream6_IRQHandler+0x10>)
 80063b6:	f001 fac3 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80063ba:	bf00      	nop
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000eac 	.word	0x20000eac

080063c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80063c8:	4802      	ldr	r0, [pc, #8]	@ (80063d4 <DMA2_Stream7_IRQHandler+0x10>)
 80063ca:	f001 fab9 	bl	8007940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80063ce:	bf00      	nop
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000d2c 	.word	0x20000d2c

080063d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80063dc:	4802      	ldr	r0, [pc, #8]	@ (80063e8 <USART6_IRQHandler+0x10>)
 80063de:	f004 ff71 	bl	800b2c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80063e2:	bf00      	nop
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000ce4 	.word	0x20000ce4

080063ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  return 1;
 80063f0:	2301      	movs	r3, #1
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <_kill>:

int _kill(int pid, int sig)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006406:	f009 fdab 	bl	800ff60 <__errno>
 800640a:	4603      	mov	r3, r0
 800640c:	2216      	movs	r2, #22
 800640e:	601a      	str	r2, [r3, #0]
  return -1;
 8006410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <_exit>:

void _exit (int status)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006424:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff ffe7 	bl	80063fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800642e:	bf00      	nop
 8006430:	e7fd      	b.n	800642e <_exit+0x12>

08006432 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e00a      	b.n	800645a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006444:	f3af 8000 	nop.w
 8006448:	4601      	mov	r1, r0
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	60ba      	str	r2, [r7, #8]
 8006450:	b2ca      	uxtb	r2, r1
 8006452:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3301      	adds	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	429a      	cmp	r2, r3
 8006460:	dbf0      	blt.n	8006444 <_read+0x12>
  }

  return len;
 8006462:	687b      	ldr	r3, [r7, #4]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e009      	b.n	8006492 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	60ba      	str	r2, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	3301      	adds	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	dbf1      	blt.n	800647e <_write+0x12>
  }
  return len;
 800649a:	687b      	ldr	r3, [r7, #4]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <_close>:

int _close(int file)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80064cc:	605a      	str	r2, [r3, #4]
  return 0;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <_isatty>:

int _isatty(int file)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80064e4:	2301      	movs	r3, #1
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b085      	sub	sp, #20
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006514:	4a14      	ldr	r2, [pc, #80]	@ (8006568 <_sbrk+0x5c>)
 8006516:	4b15      	ldr	r3, [pc, #84]	@ (800656c <_sbrk+0x60>)
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006520:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <_sbrk+0x64>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006528:	4b11      	ldr	r3, [pc, #68]	@ (8006570 <_sbrk+0x64>)
 800652a:	4a12      	ldr	r2, [pc, #72]	@ (8006574 <_sbrk+0x68>)
 800652c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800652e:	4b10      	ldr	r3, [pc, #64]	@ (8006570 <_sbrk+0x64>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	429a      	cmp	r2, r3
 800653a:	d207      	bcs.n	800654c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800653c:	f009 fd10 	bl	800ff60 <__errno>
 8006540:	4603      	mov	r3, r0
 8006542:	220c      	movs	r2, #12
 8006544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800654a:	e009      	b.n	8006560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800654c:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <_sbrk+0x64>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006552:	4b07      	ldr	r3, [pc, #28]	@ (8006570 <_sbrk+0x64>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4413      	add	r3, r2
 800655a:	4a05      	ldr	r2, [pc, #20]	@ (8006570 <_sbrk+0x64>)
 800655c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20020000 	.word	0x20020000
 800656c:	00000400 	.word	0x00000400
 8006570:	2000100c 	.word	0x2000100c
 8006574:	20005b48 	.word	0x20005b48

08006578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800657c:	4b06      	ldr	r3, [pc, #24]	@ (8006598 <SystemInit+0x20>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006582:	4a05      	ldr	r2, [pc, #20]	@ (8006598 <SystemInit+0x20>)
 8006584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	e000ed00 	.word	0xe000ed00

0800659c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800659c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80065d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80065a0:	480d      	ldr	r0, [pc, #52]	@ (80065d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80065a2:	490e      	ldr	r1, [pc, #56]	@ (80065dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80065a4:	4a0e      	ldr	r2, [pc, #56]	@ (80065e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80065a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80065a8:	e002      	b.n	80065b0 <LoopCopyDataInit>

080065aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80065aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80065ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80065ae:	3304      	adds	r3, #4

080065b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80065b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80065b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065b4:	d3f9      	bcc.n	80065aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065b6:	4a0b      	ldr	r2, [pc, #44]	@ (80065e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80065b8:	4c0b      	ldr	r4, [pc, #44]	@ (80065e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80065ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065bc:	e001      	b.n	80065c2 <LoopFillZerobss>

080065be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065c0:	3204      	adds	r2, #4

080065c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065c4:	d3fb      	bcc.n	80065be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80065c6:	f7ff ffd7 	bl	8006578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065ca:	f009 fccf 	bl	800ff6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065ce:	f7fc f923 	bl	8002818 <main>
  bx  lr    
 80065d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80065d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80065d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065dc:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80065e0:	08013938 	.word	0x08013938
  ldr r2, =_sbss
 80065e4:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80065e8:	20005b48 	.word	0x20005b48

080065ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065ec:	e7fe      	b.n	80065ec <ADC_IRQHandler>
	...

080065f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006630 <HAL_Init+0x40>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006630 <HAL_Init+0x40>)
 80065fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006600:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <HAL_Init+0x40>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a0a      	ldr	r2, [pc, #40]	@ (8006630 <HAL_Init+0x40>)
 8006606:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800660a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800660c:	4b08      	ldr	r3, [pc, #32]	@ (8006630 <HAL_Init+0x40>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a07      	ldr	r2, [pc, #28]	@ (8006630 <HAL_Init+0x40>)
 8006612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006618:	2003      	movs	r0, #3
 800661a:	f000 ffb7 	bl	800758c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800661e:	200f      	movs	r0, #15
 8006620:	f000 f808 	bl	8006634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006624:	f7fe ffea 	bl	80055fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40023c00 	.word	0x40023c00

08006634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800663c:	4b12      	ldr	r3, [pc, #72]	@ (8006688 <HAL_InitTick+0x54>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	4b12      	ldr	r3, [pc, #72]	@ (800668c <HAL_InitTick+0x58>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	4619      	mov	r1, r3
 8006646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800664a:	fbb3 f3f1 	udiv	r3, r3, r1
 800664e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006652:	4618      	mov	r0, r3
 8006654:	f000 ffcf 	bl	80075f6 <HAL_SYSTICK_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e00e      	b.n	8006680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b0f      	cmp	r3, #15
 8006666:	d80a      	bhi.n	800667e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006668:	2200      	movs	r2, #0
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006670:	f000 ff97 	bl	80075a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006674:	4a06      	ldr	r2, [pc, #24]	@ (8006690 <HAL_InitTick+0x5c>)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000060 	.word	0x20000060
 800668c:	20000068 	.word	0x20000068
 8006690:	20000064 	.word	0x20000064

08006694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006698:	4b06      	ldr	r3, [pc, #24]	@ (80066b4 <HAL_IncTick+0x20>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_IncTick+0x24>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4413      	add	r3, r2
 80066a4:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <HAL_IncTick+0x24>)
 80066a6:	6013      	str	r3, [r2, #0]
}
 80066a8:	bf00      	nop
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	20000068 	.word	0x20000068
 80066b8:	20001010 	.word	0x20001010

080066bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  return uwTick;
 80066c0:	4b03      	ldr	r3, [pc, #12]	@ (80066d0 <HAL_GetTick+0x14>)
 80066c2:	681b      	ldr	r3, [r3, #0]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20001010 	.word	0x20001010

080066d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066dc:	f7ff ffee 	bl	80066bc <HAL_GetTick>
 80066e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066ec:	d005      	beq.n	80066fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006718 <HAL_Delay+0x44>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80066fa:	bf00      	nop
 80066fc:	f7ff ffde 	bl	80066bc <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	429a      	cmp	r2, r3
 800670a:	d8f7      	bhi.n	80066fc <HAL_Delay+0x28>
  {
  }
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000068 	.word	0x20000068

0800671c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e0ed      	b.n	800690a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fe ff8a 	bl	8005654 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006750:	f7ff ffb4 	bl	80066bc <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006756:	e012      	b.n	800677e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006758:	f7ff ffb0 	bl	80066bc <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b0a      	cmp	r3, #10
 8006764:	d90b      	bls.n	800677e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2205      	movs	r2, #5
 8006776:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e0c5      	b.n	800690a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0e5      	beq.n	8006758 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0202 	bic.w	r2, r2, #2
 800679a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800679c:	f7ff ff8e 	bl	80066bc <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80067a2:	e012      	b.n	80067ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80067a4:	f7ff ff8a 	bl	80066bc <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b0a      	cmp	r3, #10
 80067b0:	d90b      	bls.n	80067ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2205      	movs	r2, #5
 80067c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e09f      	b.n	800690a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e5      	bne.n	80067a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	7e1b      	ldrb	r3, [r3, #24]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d108      	bne.n	80067f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	e007      	b.n	8006802 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006800:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	7e5b      	ldrb	r3, [r3, #25]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d108      	bne.n	800681c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e007      	b.n	800682c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800682a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	7e9b      	ldrb	r3, [r3, #26]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d108      	bne.n	8006846 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0220 	orr.w	r2, r2, #32
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e007      	b.n	8006856 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0220 	bic.w	r2, r2, #32
 8006854:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	7edb      	ldrb	r3, [r3, #27]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d108      	bne.n	8006870 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0210 	bic.w	r2, r2, #16
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e007      	b.n	8006880 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0210 	orr.w	r2, r2, #16
 800687e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7f1b      	ldrb	r3, [r3, #28]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d108      	bne.n	800689a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0208 	orr.w	r2, r2, #8
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	e007      	b.n	80068aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0208 	bic.w	r2, r2, #8
 80068a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7f5b      	ldrb	r3, [r3, #29]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d108      	bne.n	80068c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0204 	orr.w	r2, r2, #4
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	e007      	b.n	80068d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0204 	bic.w	r2, r2, #4
 80068d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	ea42 0103 	orr.w	r1, r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800692a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800692c:	7cfb      	ldrb	r3, [r7, #19]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d003      	beq.n	800693a <HAL_CAN_ConfigFilter+0x26>
 8006932:	7cfb      	ldrb	r3, [r7, #19]
 8006934:	2b02      	cmp	r3, #2
 8006936:	f040 80be 	bne.w	8006ab6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800693a:	4b65      	ldr	r3, [pc, #404]	@ (8006ad0 <HAL_CAN_ConfigFilter+0x1bc>)
 800693c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006944:	f043 0201 	orr.w	r2, r3, #1
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006954:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	431a      	orrs	r2, r3
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2201      	movs	r2, #1
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	43db      	mvns	r3, r3
 800698c:	401a      	ands	r2, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d123      	bne.n	80069e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	43db      	mvns	r3, r3
 80069a6:	401a      	ands	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80069be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	3248      	adds	r2, #72	@ 0x48
 80069c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80069d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80069da:	6979      	ldr	r1, [r7, #20]
 80069dc:	3348      	adds	r3, #72	@ 0x48
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	440b      	add	r3, r1
 80069e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d122      	bne.n	8006a32 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006a0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	3248      	adds	r2, #72	@ 0x48
 8006a12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006a26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006a28:	6979      	ldr	r1, [r7, #20]
 8006a2a:	3348      	adds	r3, #72	@ 0x48
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	440b      	add	r3, r1
 8006a30:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	43db      	mvns	r3, r3
 8006a44:	401a      	ands	r2, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006a4c:	e007      	b.n	8006a5e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	401a      	ands	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006a78:	e007      	b.n	8006a8a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006aa8:	f023 0201 	bic.w	r2, r3, #1
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e006      	b.n	8006ac4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
  }
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40006400 	.word	0x40006400

08006ad4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d12e      	bne.n	8006b46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b00:	f7ff fddc 	bl	80066bc <HAL_GetTick>
 8006b04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006b06:	e012      	b.n	8006b2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006b08:	f7ff fdd8 	bl	80066bc <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b0a      	cmp	r3, #10
 8006b14:	d90b      	bls.n	8006b2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2205      	movs	r2, #5
 8006b26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e012      	b.n	8006b54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e5      	bne.n	8006b08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	e006      	b.n	8006b54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
  }
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b089      	sub	sp, #36	@ 0x24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b7a:	7ffb      	ldrb	r3, [r7, #31]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d003      	beq.n	8006b88 <HAL_CAN_AddTxMessage+0x2c>
 8006b80:	7ffb      	ldrb	r3, [r7, #31]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	f040 80ad 	bne.w	8006ce2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d105      	bne.n	8006ba8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8095 	beq.w	8006cd2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	0e1b      	lsrs	r3, r3, #24
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10d      	bne.n	8006be0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006bce:	68f9      	ldr	r1, [r7, #12]
 8006bd0:	6809      	ldr	r1, [r1, #0]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	440b      	add	r3, r1
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e00f      	b.n	8006c00 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006bea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006bf0:	68f9      	ldr	r1, [r7, #12]
 8006bf2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006bf4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	3318      	adds	r3, #24
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	440b      	add	r3, r1
 8006bfe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	3318      	adds	r3, #24
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	440b      	add	r3, r1
 8006c10:	3304      	adds	r3, #4
 8006c12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	7d1b      	ldrb	r3, [r3, #20]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d111      	bne.n	8006c40 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	3318      	adds	r3, #24
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	4413      	add	r3, r2
 8006c28:	3304      	adds	r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	6811      	ldr	r1, [r2, #0]
 8006c30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	3318      	adds	r3, #24
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3307      	adds	r3, #7
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	061a      	lsls	r2, r3, #24
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3306      	adds	r3, #6
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	041b      	lsls	r3, r3, #16
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3305      	adds	r3, #5
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	3204      	adds	r2, #4
 8006c60:	7812      	ldrb	r2, [r2, #0]
 8006c62:	4610      	mov	r0, r2
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	6811      	ldr	r1, [r2, #0]
 8006c68:	ea43 0200 	orr.w	r2, r3, r0
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	440b      	add	r3, r1
 8006c72:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006c76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3303      	adds	r3, #3
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	061a      	lsls	r2, r3, #24
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3302      	adds	r3, #2
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	041b      	lsls	r3, r3, #16
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	4313      	orrs	r3, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	4610      	mov	r0, r2
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	6811      	ldr	r1, [r2, #0]
 8006c9e:	ea43 0200 	orr.w	r2, r3, r0
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	440b      	add	r3, r1
 8006ca8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006cac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	3318      	adds	r3, #24
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	4413      	add	r3, r2
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	6811      	ldr	r1, [r2, #0]
 8006cc0:	f043 0201 	orr.w	r2, r3, #1
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	3318      	adds	r3, #24
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	440b      	add	r3, r1
 8006ccc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e00e      	b.n	8006cf0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e006      	b.n	8006cf0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
  }
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3724      	adds	r7, #36	@ 0x24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d10:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d003      	beq.n	8006d20 <HAL_CAN_GetRxMessage+0x24>
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	f040 8103 	bne.w	8006f26 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10e      	bne.n	8006d44 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d116      	bne.n	8006d62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0f7      	b.n	8006f34 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d107      	bne.n	8006d62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e0e8      	b.n	8006f34 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	331b      	adds	r3, #27
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	4413      	add	r3, r2
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0204 	and.w	r2, r3, #4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10c      	bne.n	8006d9a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	331b      	adds	r3, #27
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	4413      	add	r3, r2
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	0d5b      	lsrs	r3, r3, #21
 8006d90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e00b      	b.n	8006db2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	331b      	adds	r3, #27
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	4413      	add	r3, r2
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	08db      	lsrs	r3, r3, #3
 8006daa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	331b      	adds	r3, #27
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	4413      	add	r3, r2
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0202 	and.w	r2, r3, #2
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	331b      	adds	r3, #27
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2208      	movs	r2, #8
 8006de4:	611a      	str	r2, [r3, #16]
 8006de6:	e00b      	b.n	8006e00 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	331b      	adds	r3, #27
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	4413      	add	r3, r2
 8006df4:	3304      	adds	r3, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	331b      	adds	r3, #27
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	0a1b      	lsrs	r3, r3, #8
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	331b      	adds	r3, #27
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	4413      	add	r3, r2
 8006e24:	3304      	adds	r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	0c1b      	lsrs	r3, r3, #16
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	0a1a      	lsrs	r2, r3, #8
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	0c1a      	lsrs	r2, r3, #16
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	3302      	adds	r3, #2
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	0e1a      	lsrs	r2, r3, #24
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	3303      	adds	r3, #3
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	0a1a      	lsrs	r2, r3, #8
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	3305      	adds	r3, #5
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	0c1a      	lsrs	r2, r3, #16
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	3306      	adds	r3, #6
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	0e1a      	lsrs	r2, r3, #24
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	3307      	adds	r3, #7
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d108      	bne.n	8006f12 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0220 	orr.w	r2, r2, #32
 8006f0e:	60da      	str	r2, [r3, #12]
 8006f10:	e007      	b.n	8006f22 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0220 	orr.w	r2, r2, #32
 8006f20:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e006      	b.n	8006f34 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f50:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d002      	beq.n	8006f5e <HAL_CAN_ActivateNotification+0x1e>
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d109      	bne.n	8006f72 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6959      	ldr	r1, [r3, #20]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e006      	b.n	8006f80 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
  }
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	@ 0x28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d07c      	beq.n	80070cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d023      	beq.n	8007024 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f983 	bl	80072fa <HAL_CAN_TxMailbox0CompleteCallback>
 8006ff4:	e016      	b.n	8007024 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24
 8007008:	e00c      	b.n	8007024 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
 800701c:	e002      	b.n	8007024 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f989 	bl	8007336 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702a:	2b00      	cmp	r3, #0
 800702c:	d024      	beq.n	8007078 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007036:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f963 	bl	800730e <HAL_CAN_TxMailbox1CompleteCallback>
 8007048:	e016      	b.n	8007078 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007050:	2b00      	cmp	r3, #0
 8007052:	d004      	beq.n	800705e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800705a:	627b      	str	r3, [r7, #36]	@ 0x24
 800705c:	e00c      	b.n	8007078 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800706e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007070:	e002      	b.n	8007078 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f969 	bl	800734a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d024      	beq.n	80070cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800708a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f943 	bl	8007322 <HAL_CAN_TxMailbox2CompleteCallback>
 800709c:	e016      	b.n	80070cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d004      	beq.n	80070b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b0:	e00c      	b.n	80070cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d004      	beq.n	80070c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c4:	e002      	b.n	80070cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f949 	bl	800735e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00c      	beq.n	80070f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2210      	movs	r2, #16
 80070ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	f003 0304 	and.w	r3, r3, #4
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2208      	movs	r2, #8
 800710a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f930 	bl	8007372 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fa fa32 	bl	8001594 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800714a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2210      	movs	r2, #16
 8007152:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d006      	beq.n	8007176 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2208      	movs	r2, #8
 800716e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f912 	bl	800739a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f8f9 	bl	8007386 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2210      	movs	r2, #16
 80071ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8fc 	bl	80073ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d006      	beq.n	80071d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2208      	movs	r2, #8
 80071d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8f5 	bl	80073c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d07b      	beq.n	80072da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d072      	beq.n	80072d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d008      	beq.n	8007208 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800720e:	2b00      	cmp	r3, #0
 8007210:	d008      	beq.n	8007224 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	f043 0302 	orr.w	r3, r3, #2
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800722a:	2b00      	cmp	r3, #0
 800722c:	d008      	beq.n	8007240 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	f043 0304 	orr.w	r3, r3, #4
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007246:	2b00      	cmp	r3, #0
 8007248:	d043      	beq.n	80072d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007250:	2b00      	cmp	r3, #0
 8007252:	d03e      	beq.n	80072d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800725a:	2b60      	cmp	r3, #96	@ 0x60
 800725c:	d02b      	beq.n	80072b6 <HAL_CAN_IRQHandler+0x32a>
 800725e:	2b60      	cmp	r3, #96	@ 0x60
 8007260:	d82e      	bhi.n	80072c0 <HAL_CAN_IRQHandler+0x334>
 8007262:	2b50      	cmp	r3, #80	@ 0x50
 8007264:	d022      	beq.n	80072ac <HAL_CAN_IRQHandler+0x320>
 8007266:	2b50      	cmp	r3, #80	@ 0x50
 8007268:	d82a      	bhi.n	80072c0 <HAL_CAN_IRQHandler+0x334>
 800726a:	2b40      	cmp	r3, #64	@ 0x40
 800726c:	d019      	beq.n	80072a2 <HAL_CAN_IRQHandler+0x316>
 800726e:	2b40      	cmp	r3, #64	@ 0x40
 8007270:	d826      	bhi.n	80072c0 <HAL_CAN_IRQHandler+0x334>
 8007272:	2b30      	cmp	r3, #48	@ 0x30
 8007274:	d010      	beq.n	8007298 <HAL_CAN_IRQHandler+0x30c>
 8007276:	2b30      	cmp	r3, #48	@ 0x30
 8007278:	d822      	bhi.n	80072c0 <HAL_CAN_IRQHandler+0x334>
 800727a:	2b10      	cmp	r3, #16
 800727c:	d002      	beq.n	8007284 <HAL_CAN_IRQHandler+0x2f8>
 800727e:	2b20      	cmp	r3, #32
 8007280:	d005      	beq.n	800728e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007282:	e01d      	b.n	80072c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	f043 0308 	orr.w	r3, r3, #8
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800728c:	e019      	b.n	80072c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	f043 0310 	orr.w	r3, r3, #16
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007296:	e014      	b.n	80072c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	f043 0320 	orr.w	r3, r3, #32
 800729e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80072a0:	e00f      	b.n	80072c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80072aa:	e00a      	b.n	80072c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80072b4:	e005      	b.n	80072c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80072be:	e000      	b.n	80072c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80072c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80072d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2204      	movs	r2, #4
 80072d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f872 	bl	80073d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80072f2:	bf00      	nop
 80072f4:	3728      	adds	r7, #40	@ 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
	...

080073ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007430 <__NVIC_SetPriorityGrouping+0x44>)
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007408:	4013      	ands	r3, r2
 800740a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800741c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800741e:	4a04      	ldr	r2, [pc, #16]	@ (8007430 <__NVIC_SetPriorityGrouping+0x44>)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	60d3      	str	r3, [r2, #12]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	e000ed00 	.word	0xe000ed00

08007434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007438:	4b04      	ldr	r3, [pc, #16]	@ (800744c <__NVIC_GetPriorityGrouping+0x18>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	0a1b      	lsrs	r3, r3, #8
 800743e:	f003 0307 	and.w	r3, r3, #7
}
 8007442:	4618      	mov	r0, r3
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	e000ed00 	.word	0xe000ed00

08007450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800745a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745e:	2b00      	cmp	r3, #0
 8007460:	db0b      	blt.n	800747a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	f003 021f 	and.w	r2, r3, #31
 8007468:	4907      	ldr	r1, [pc, #28]	@ (8007488 <__NVIC_EnableIRQ+0x38>)
 800746a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	2001      	movs	r0, #1
 8007472:	fa00 f202 	lsl.w	r2, r0, r2
 8007476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	e000e100 	.word	0xe000e100

0800748c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	6039      	str	r1, [r7, #0]
 8007496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800749c:	2b00      	cmp	r3, #0
 800749e:	db0a      	blt.n	80074b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	490c      	ldr	r1, [pc, #48]	@ (80074d8 <__NVIC_SetPriority+0x4c>)
 80074a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074aa:	0112      	lsls	r2, r2, #4
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	440b      	add	r3, r1
 80074b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074b4:	e00a      	b.n	80074cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	4908      	ldr	r1, [pc, #32]	@ (80074dc <__NVIC_SetPriority+0x50>)
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	3b04      	subs	r3, #4
 80074c4:	0112      	lsls	r2, r2, #4
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	440b      	add	r3, r1
 80074ca:	761a      	strb	r2, [r3, #24]
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	e000e100 	.word	0xe000e100
 80074dc:	e000ed00 	.word	0xe000ed00

080074e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b089      	sub	sp, #36	@ 0x24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f1c3 0307 	rsb	r3, r3, #7
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	bf28      	it	cs
 80074fe:	2304      	movcs	r3, #4
 8007500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	3304      	adds	r3, #4
 8007506:	2b06      	cmp	r3, #6
 8007508:	d902      	bls.n	8007510 <NVIC_EncodePriority+0x30>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	3b03      	subs	r3, #3
 800750e:	e000      	b.n	8007512 <NVIC_EncodePriority+0x32>
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	43da      	mvns	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	401a      	ands	r2, r3
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007528:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	fa01 f303 	lsl.w	r3, r1, r3
 8007532:	43d9      	mvns	r1, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007538:	4313      	orrs	r3, r2
         );
}
 800753a:	4618      	mov	r0, r3
 800753c:	3724      	adds	r7, #36	@ 0x24
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3b01      	subs	r3, #1
 8007554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007558:	d301      	bcc.n	800755e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800755a:	2301      	movs	r3, #1
 800755c:	e00f      	b.n	800757e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800755e:	4a0a      	ldr	r2, [pc, #40]	@ (8007588 <SysTick_Config+0x40>)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3b01      	subs	r3, #1
 8007564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007566:	210f      	movs	r1, #15
 8007568:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800756c:	f7ff ff8e 	bl	800748c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007570:	4b05      	ldr	r3, [pc, #20]	@ (8007588 <SysTick_Config+0x40>)
 8007572:	2200      	movs	r2, #0
 8007574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007576:	4b04      	ldr	r3, [pc, #16]	@ (8007588 <SysTick_Config+0x40>)
 8007578:	2207      	movs	r2, #7
 800757a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	e000e010 	.word	0xe000e010

0800758c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff ff29 	bl	80073ec <__NVIC_SetPriorityGrouping>
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b086      	sub	sp, #24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	4603      	mov	r3, r0
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80075b4:	f7ff ff3e 	bl	8007434 <__NVIC_GetPriorityGrouping>
 80075b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	6978      	ldr	r0, [r7, #20]
 80075c0:	f7ff ff8e 	bl	80074e0 <NVIC_EncodePriority>
 80075c4:	4602      	mov	r2, r0
 80075c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ca:	4611      	mov	r1, r2
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff ff5d 	bl	800748c <__NVIC_SetPriority>
}
 80075d2:	bf00      	nop
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	4603      	mov	r3, r0
 80075e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff ff31 	bl	8007450 <__NVIC_EnableIRQ>
}
 80075ee:	bf00      	nop
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff ffa2 	bl	8007548 <SysTick_Config>
 8007604:	4603      	mov	r3, r0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800761c:	f7ff f84e 	bl	80066bc <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e099      	b.n	8007760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800764c:	e00f      	b.n	800766e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800764e:	f7ff f835 	bl	80066bc <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b05      	cmp	r3, #5
 800765a:	d908      	bls.n	800766e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2203      	movs	r2, #3
 8007666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e078      	b.n	8007760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e8      	bne.n	800764e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4b38      	ldr	r3, [pc, #224]	@ (8007768 <HAL_DMA_Init+0x158>)
 8007688:	4013      	ands	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800769a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d107      	bne.n	80076d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d0:	4313      	orrs	r3, r2
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0307 	bic.w	r3, r3, #7
 80076ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d117      	bne.n	8007732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00e      	beq.n	8007732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fb01 	bl	8007d1c <DMA_CheckFifoParam>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2240      	movs	r2, #64	@ 0x40
 8007724:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800772e:	2301      	movs	r3, #1
 8007730:	e016      	b.n	8007760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fab8 	bl	8007cb0 <DMA_CalcBaseAndBitshift>
 8007740:	4603      	mov	r3, r0
 8007742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007748:	223f      	movs	r2, #63	@ 0x3f
 800774a:	409a      	lsls	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	f010803f 	.word	0xf010803f

0800776c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_DMA_Start_IT+0x26>
 800778e:	2302      	movs	r3, #2
 8007790:	e040      	b.n	8007814 <HAL_DMA_Start_IT+0xa8>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d12f      	bne.n	8007806 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2202      	movs	r2, #2
 80077aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 fa4a 	bl	8007c54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c4:	223f      	movs	r2, #63	@ 0x3f
 80077c6:	409a      	lsls	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0216 	orr.w	r2, r2, #22
 80077da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d007      	beq.n	80077f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0208 	orr.w	r2, r2, #8
 80077f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0201 	orr.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	e005      	b.n	8007812 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800780e:	2302      	movs	r3, #2
 8007810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007828:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800782a:	f7fe ff47 	bl	80066bc <HAL_GetTick>
 800782e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b02      	cmp	r3, #2
 800783a:	d008      	beq.n	800784e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2280      	movs	r2, #128	@ 0x80
 8007840:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e052      	b.n	80078f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0216 	bic.w	r2, r2, #22
 800785c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695a      	ldr	r2, [r3, #20]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800786c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d103      	bne.n	800787e <HAL_DMA_Abort+0x62>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0208 	bic.w	r2, r2, #8
 800788c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0201 	bic.w	r2, r2, #1
 800789c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800789e:	e013      	b.n	80078c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078a0:	f7fe ff0c 	bl	80066bc <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	d90c      	bls.n	80078c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2203      	movs	r2, #3
 80078b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e015      	b.n	80078f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e4      	bne.n	80078a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078da:	223f      	movs	r2, #63	@ 0x3f
 80078dc:	409a      	lsls	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d004      	beq.n	800791a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2280      	movs	r2, #128	@ 0x80
 8007914:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e00c      	b.n	8007934 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2205      	movs	r2, #5
 800791e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0201 	bic.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800794c:	4b8e      	ldr	r3, [pc, #568]	@ (8007b88 <HAL_DMA_IRQHandler+0x248>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a8e      	ldr	r2, [pc, #568]	@ (8007b8c <HAL_DMA_IRQHandler+0x24c>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	0a9b      	lsrs	r3, r3, #10
 8007958:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800795e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800796a:	2208      	movs	r2, #8
 800796c:	409a      	lsls	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4013      	ands	r3, r2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01a      	beq.n	80079ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d013      	beq.n	80079ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0204 	bic.w	r2, r2, #4
 8007992:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007998:	2208      	movs	r2, #8
 800799a:	409a      	lsls	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a4:	f043 0201 	orr.w	r2, r3, #1
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b0:	2201      	movs	r2, #1
 80079b2:	409a      	lsls	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d012      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00b      	beq.n	80079e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ce:	2201      	movs	r2, #1
 80079d0:	409a      	lsls	r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079da:	f043 0202 	orr.w	r2, r3, #2
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079e6:	2204      	movs	r2, #4
 80079e8:	409a      	lsls	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4013      	ands	r3, r2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d012      	beq.n	8007a18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0302 	and.w	r3, r3, #2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a04:	2204      	movs	r2, #4
 8007a06:	409a      	lsls	r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a10:	f043 0204 	orr.w	r2, r3, #4
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d043      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d03c      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a3a:	2210      	movs	r2, #16
 8007a3c:	409a      	lsls	r2, r3
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d018      	beq.n	8007a82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d108      	bne.n	8007a70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d024      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
 8007a6e:	e01f      	b.n	8007ab0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01b      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
 8007a80:	e016      	b.n	8007ab0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d107      	bne.n	8007aa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0208 	bic.w	r2, r2, #8
 8007a9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	409a      	lsls	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 808f 	beq.w	8007be0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0310 	and.w	r3, r3, #16
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8087 	beq.w	8007be0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	409a      	lsls	r2, r3
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	d136      	bne.n	8007b58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0216 	bic.w	r2, r2, #22
 8007af8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695a      	ldr	r2, [r3, #20]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <HAL_DMA_IRQHandler+0x1da>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0208 	bic.w	r2, r2, #8
 8007b28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b2e:	223f      	movs	r2, #63	@ 0x3f
 8007b30:	409a      	lsls	r2, r3
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d07e      	beq.n	8007c4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
        }
        return;
 8007b56:	e079      	b.n	8007c4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d01d      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10d      	bne.n	8007b90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d031      	beq.n	8007be0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
 8007b84:	e02c      	b.n	8007be0 <HAL_DMA_IRQHandler+0x2a0>
 8007b86:	bf00      	nop
 8007b88:	20000060 	.word	0x20000060
 8007b8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d023      	beq.n	8007be0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
 8007ba0:	e01e      	b.n	8007be0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10f      	bne.n	8007bd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0210 	bic.w	r2, r2, #16
 8007bbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d032      	beq.n	8007c4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d022      	beq.n	8007c3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2205      	movs	r2, #5
 8007bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0201 	bic.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d307      	bcc.n	8007c28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f2      	bne.n	8007c0c <HAL_DMA_IRQHandler+0x2cc>
 8007c26:	e000      	b.n	8007c2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007c28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d005      	beq.n	8007c4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	4798      	blx	r3
 8007c4a:	e000      	b.n	8007c4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8007c4c:	bf00      	nop
    }
  }
}
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b40      	cmp	r3, #64	@ 0x40
 8007c80:	d108      	bne.n	8007c94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007c92:	e007      	b.n	8007ca4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	60da      	str	r2, [r3, #12]
}
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	3b10      	subs	r3, #16
 8007cc0:	4a14      	ldr	r2, [pc, #80]	@ (8007d14 <DMA_CalcBaseAndBitshift+0x64>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	091b      	lsrs	r3, r3, #4
 8007cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007cca:	4a13      	ldr	r2, [pc, #76]	@ (8007d18 <DMA_CalcBaseAndBitshift+0x68>)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d909      	bls.n	8007cf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007ce6:	f023 0303 	bic.w	r3, r3, #3
 8007cea:	1d1a      	adds	r2, r3, #4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	659a      	str	r2, [r3, #88]	@ 0x58
 8007cf0:	e007      	b.n	8007d02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007cfa:	f023 0303 	bic.w	r3, r3, #3
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	aaaaaaab 	.word	0xaaaaaaab
 8007d18:	080133d8 	.word	0x080133d8

08007d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d11f      	bne.n	8007d76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d856      	bhi.n	8007dea <DMA_CheckFifoParam+0xce>
 8007d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d44 <DMA_CheckFifoParam+0x28>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d55 	.word	0x08007d55
 8007d48:	08007d67 	.word	0x08007d67
 8007d4c:	08007d55 	.word	0x08007d55
 8007d50:	08007deb 	.word	0x08007deb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d046      	beq.n	8007dee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d64:	e043      	b.n	8007dee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007d6e:	d140      	bne.n	8007df2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d74:	e03d      	b.n	8007df2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d7e:	d121      	bne.n	8007dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d837      	bhi.n	8007df6 <DMA_CheckFifoParam+0xda>
 8007d86:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <DMA_CheckFifoParam+0x70>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007d9d 	.word	0x08007d9d
 8007d90:	08007da3 	.word	0x08007da3
 8007d94:	08007d9d 	.word	0x08007d9d
 8007d98:	08007db5 	.word	0x08007db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007da0:	e030      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d025      	beq.n	8007dfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007db2:	e022      	b.n	8007dfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007dbc:	d11f      	bne.n	8007dfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007dc2:	e01c      	b.n	8007dfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d903      	bls.n	8007dd2 <DMA_CheckFifoParam+0xb6>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d003      	beq.n	8007dd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007dd0:	e018      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd6:	e015      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00e      	beq.n	8007e02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
      break;
 8007de8:	e00b      	b.n	8007e02 <DMA_CheckFifoParam+0xe6>
      break;
 8007dea:	bf00      	nop
 8007dec:	e00a      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
      break;
 8007dee:	bf00      	nop
 8007df0:	e008      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
      break;
 8007df2:	bf00      	nop
 8007df4:	e006      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
      break;
 8007df6:	bf00      	nop
 8007df8:	e004      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
      break;
 8007dfa:	bf00      	nop
 8007dfc:	e002      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
      break;   
 8007dfe:	bf00      	nop
 8007e00:	e000      	b.n	8007e04 <DMA_CheckFifoParam+0xe8>
      break;
 8007e02:	bf00      	nop
    }
  } 
  
  return status; 
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop

08007e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b089      	sub	sp, #36	@ 0x24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
 8007e2e:	e16b      	b.n	8008108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e30:	2201      	movs	r2, #1
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4013      	ands	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	f040 815a 	bne.w	8008102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d005      	beq.n	8007e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d130      	bne.n	8007ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	2203      	movs	r2, #3
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	43db      	mvns	r3, r3
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	43db      	mvns	r3, r3
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	091b      	lsrs	r3, r3, #4
 8007eb2:	f003 0201 	and.w	r2, r3, #1
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d017      	beq.n	8007f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	2203      	movs	r2, #3
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	43db      	mvns	r3, r3
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	4013      	ands	r3, r2
 8007eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d123      	bne.n	8007f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	08da      	lsrs	r2, r3, #3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3208      	adds	r2, #8
 8007f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	220f      	movs	r2, #15
 8007f28:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	4013      	ands	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	08da      	lsrs	r2, r3, #3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3208      	adds	r2, #8
 8007f52:	69b9      	ldr	r1, [r7, #24]
 8007f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	2203      	movs	r2, #3
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	43db      	mvns	r3, r3
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f003 0203 	and.w	r2, r3, #3
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80b4 	beq.w	8008102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	4b60      	ldr	r3, [pc, #384]	@ (8008120 <HAL_GPIO_Init+0x30c>)
 8007fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8008120 <HAL_GPIO_Init+0x30c>)
 8007fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007faa:	4b5d      	ldr	r3, [pc, #372]	@ (8008120 <HAL_GPIO_Init+0x30c>)
 8007fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8008124 <HAL_GPIO_Init+0x310>)
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	089b      	lsrs	r3, r3, #2
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	220f      	movs	r2, #15
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a52      	ldr	r2, [pc, #328]	@ (8008128 <HAL_GPIO_Init+0x314>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d02b      	beq.n	800803a <HAL_GPIO_Init+0x226>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a51      	ldr	r2, [pc, #324]	@ (800812c <HAL_GPIO_Init+0x318>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d025      	beq.n	8008036 <HAL_GPIO_Init+0x222>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a50      	ldr	r2, [pc, #320]	@ (8008130 <HAL_GPIO_Init+0x31c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d01f      	beq.n	8008032 <HAL_GPIO_Init+0x21e>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8008134 <HAL_GPIO_Init+0x320>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d019      	beq.n	800802e <HAL_GPIO_Init+0x21a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a4e      	ldr	r2, [pc, #312]	@ (8008138 <HAL_GPIO_Init+0x324>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d013      	beq.n	800802a <HAL_GPIO_Init+0x216>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a4d      	ldr	r2, [pc, #308]	@ (800813c <HAL_GPIO_Init+0x328>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00d      	beq.n	8008026 <HAL_GPIO_Init+0x212>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a4c      	ldr	r2, [pc, #304]	@ (8008140 <HAL_GPIO_Init+0x32c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d007      	beq.n	8008022 <HAL_GPIO_Init+0x20e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a4b      	ldr	r2, [pc, #300]	@ (8008144 <HAL_GPIO_Init+0x330>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d101      	bne.n	800801e <HAL_GPIO_Init+0x20a>
 800801a:	2307      	movs	r3, #7
 800801c:	e00e      	b.n	800803c <HAL_GPIO_Init+0x228>
 800801e:	2308      	movs	r3, #8
 8008020:	e00c      	b.n	800803c <HAL_GPIO_Init+0x228>
 8008022:	2306      	movs	r3, #6
 8008024:	e00a      	b.n	800803c <HAL_GPIO_Init+0x228>
 8008026:	2305      	movs	r3, #5
 8008028:	e008      	b.n	800803c <HAL_GPIO_Init+0x228>
 800802a:	2304      	movs	r3, #4
 800802c:	e006      	b.n	800803c <HAL_GPIO_Init+0x228>
 800802e:	2303      	movs	r3, #3
 8008030:	e004      	b.n	800803c <HAL_GPIO_Init+0x228>
 8008032:	2302      	movs	r3, #2
 8008034:	e002      	b.n	800803c <HAL_GPIO_Init+0x228>
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <HAL_GPIO_Init+0x228>
 800803a:	2300      	movs	r3, #0
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	f002 0203 	and.w	r2, r2, #3
 8008042:	0092      	lsls	r2, r2, #2
 8008044:	4093      	lsls	r3, r2
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	4313      	orrs	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800804c:	4935      	ldr	r1, [pc, #212]	@ (8008124 <HAL_GPIO_Init+0x310>)
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	089b      	lsrs	r3, r3, #2
 8008052:	3302      	adds	r3, #2
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800805a:	4b3b      	ldr	r3, [pc, #236]	@ (8008148 <HAL_GPIO_Init+0x334>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	43db      	mvns	r3, r3
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4013      	ands	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800807e:	4a32      	ldr	r2, [pc, #200]	@ (8008148 <HAL_GPIO_Init+0x334>)
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008084:	4b30      	ldr	r3, [pc, #192]	@ (8008148 <HAL_GPIO_Init+0x334>)
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	43db      	mvns	r3, r3
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	4013      	ands	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080a8:	4a27      	ldr	r2, [pc, #156]	@ (8008148 <HAL_GPIO_Init+0x334>)
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080ae:	4b26      	ldr	r3, [pc, #152]	@ (8008148 <HAL_GPIO_Init+0x334>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	43db      	mvns	r3, r3
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	4013      	ands	r3, r2
 80080bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008148 <HAL_GPIO_Init+0x334>)
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008148 <HAL_GPIO_Init+0x334>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	43db      	mvns	r3, r3
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	4013      	ands	r3, r2
 80080e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80080fc:	4a12      	ldr	r2, [pc, #72]	@ (8008148 <HAL_GPIO_Init+0x334>)
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	3301      	adds	r3, #1
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	2b0f      	cmp	r3, #15
 800810c:	f67f ae90 	bls.w	8007e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	3724      	adds	r7, #36	@ 0x24
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	40023800 	.word	0x40023800
 8008124:	40013800 	.word	0x40013800
 8008128:	40020000 	.word	0x40020000
 800812c:	40020400 	.word	0x40020400
 8008130:	40020800 	.word	0x40020800
 8008134:	40020c00 	.word	0x40020c00
 8008138:	40021000 	.word	0x40021000
 800813c:	40021400 	.word	0x40021400
 8008140:	40021800 	.word	0x40021800
 8008144:	40021c00 	.word	0x40021c00
 8008148:	40013c00 	.word	0x40013c00

0800814c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	807b      	strh	r3, [r7, #2]
 8008158:	4613      	mov	r3, r2
 800815a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800815c:	787b      	ldrb	r3, [r7, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008162:	887a      	ldrh	r2, [r7, #2]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008168:	e003      	b.n	8008172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800816a:	887b      	ldrh	r3, [r7, #2]
 800816c:	041a      	lsls	r2, r3, #16
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	619a      	str	r2, [r3, #24]
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800818a:	4b08      	ldr	r3, [pc, #32]	@ (80081ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800818c:	695a      	ldr	r2, [r3, #20]
 800818e:	88fb      	ldrh	r3, [r7, #6]
 8008190:	4013      	ands	r3, r2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d006      	beq.n	80081a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008196:	4a05      	ldr	r2, [pc, #20]	@ (80081ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008198:	88fb      	ldrh	r3, [r7, #6]
 800819a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fa f972 	bl	8002488 <HAL_GPIO_EXTI_Callback>
  }
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40013c00 	.word	0x40013c00

080081b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e12b      	b.n	800841a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7fd faec 	bl	80057b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2224      	movs	r2, #36	@ 0x24
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0201 	bic.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008214:	f001 fc2c 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 8008218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4a81      	ldr	r2, [pc, #516]	@ (8008424 <HAL_I2C_Init+0x274>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d807      	bhi.n	8008234 <HAL_I2C_Init+0x84>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a80      	ldr	r2, [pc, #512]	@ (8008428 <HAL_I2C_Init+0x278>)
 8008228:	4293      	cmp	r3, r2
 800822a:	bf94      	ite	ls
 800822c:	2301      	movls	r3, #1
 800822e:	2300      	movhi	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	e006      	b.n	8008242 <HAL_I2C_Init+0x92>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4a7d      	ldr	r2, [pc, #500]	@ (800842c <HAL_I2C_Init+0x27c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	bf94      	ite	ls
 800823c:	2301      	movls	r3, #1
 800823e:	2300      	movhi	r3, #0
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e0e7      	b.n	800841a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4a78      	ldr	r2, [pc, #480]	@ (8008430 <HAL_I2C_Init+0x280>)
 800824e:	fba2 2303 	umull	r2, r3, r2, r3
 8008252:	0c9b      	lsrs	r3, r3, #18
 8008254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	430a      	orrs	r2, r1
 8008268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4a6a      	ldr	r2, [pc, #424]	@ (8008424 <HAL_I2C_Init+0x274>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d802      	bhi.n	8008284 <HAL_I2C_Init+0xd4>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	3301      	adds	r3, #1
 8008282:	e009      	b.n	8008298 <HAL_I2C_Init+0xe8>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800828a:	fb02 f303 	mul.w	r3, r2, r3
 800828e:	4a69      	ldr	r2, [pc, #420]	@ (8008434 <HAL_I2C_Init+0x284>)
 8008290:	fba2 2303 	umull	r2, r3, r2, r3
 8008294:	099b      	lsrs	r3, r3, #6
 8008296:	3301      	adds	r3, #1
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6812      	ldr	r2, [r2, #0]
 800829c:	430b      	orrs	r3, r1
 800829e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80082aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	495c      	ldr	r1, [pc, #368]	@ (8008424 <HAL_I2C_Init+0x274>)
 80082b4:	428b      	cmp	r3, r1
 80082b6:	d819      	bhi.n	80082ec <HAL_I2C_Init+0x13c>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	1e59      	subs	r1, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80082c6:	1c59      	adds	r1, r3, #1
 80082c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80082cc:	400b      	ands	r3, r1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <HAL_I2C_Init+0x138>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1e59      	subs	r1, r3, #1
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80082e0:	3301      	adds	r3, #1
 80082e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082e6:	e051      	b.n	800838c <HAL_I2C_Init+0x1dc>
 80082e8:	2304      	movs	r3, #4
 80082ea:	e04f      	b.n	800838c <HAL_I2C_Init+0x1dc>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d111      	bne.n	8008318 <HAL_I2C_Init+0x168>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	1e58      	subs	r0, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6859      	ldr	r1, [r3, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	440b      	add	r3, r1
 8008302:	fbb0 f3f3 	udiv	r3, r0, r3
 8008306:	3301      	adds	r3, #1
 8008308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf0c      	ite	eq
 8008310:	2301      	moveq	r3, #1
 8008312:	2300      	movne	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	e012      	b.n	800833e <HAL_I2C_Init+0x18e>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	1e58      	subs	r0, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6859      	ldr	r1, [r3, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	0099      	lsls	r1, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	fbb0 f3f3 	udiv	r3, r0, r3
 800832e:	3301      	adds	r3, #1
 8008330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008334:	2b00      	cmp	r3, #0
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <HAL_I2C_Init+0x196>
 8008342:	2301      	movs	r3, #1
 8008344:	e022      	b.n	800838c <HAL_I2C_Init+0x1dc>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10e      	bne.n	800836c <HAL_I2C_Init+0x1bc>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1e58      	subs	r0, r3, #1
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6859      	ldr	r1, [r3, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	440b      	add	r3, r1
 800835c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008360:	3301      	adds	r3, #1
 8008362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800836a:	e00f      	b.n	800838c <HAL_I2C_Init+0x1dc>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	1e58      	subs	r0, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6859      	ldr	r1, [r3, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	0099      	lsls	r1, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008382:	3301      	adds	r3, #1
 8008384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008388:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800838c:	6879      	ldr	r1, [r7, #4]
 800838e:	6809      	ldr	r1, [r1, #0]
 8008390:	4313      	orrs	r3, r2
 8008392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	69da      	ldr	r2, [r3, #28]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80083ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	6911      	ldr	r1, [r2, #16]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	68d2      	ldr	r2, [r2, #12]
 80083c6:	4311      	orrs	r1, r2
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6812      	ldr	r2, [r2, #0]
 80083cc:	430b      	orrs	r3, r1
 80083ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695a      	ldr	r2, [r3, #20]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0201 	orr.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2220      	movs	r2, #32
 8008406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	000186a0 	.word	0x000186a0
 8008428:	001e847f 	.word	0x001e847f
 800842c:	003d08ff 	.word	0x003d08ff
 8008430:	431bde83 	.word	0x431bde83
 8008434:	10624dd3 	.word	0x10624dd3

08008438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b088      	sub	sp, #32
 800843c:	af02      	add	r7, sp, #8
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	4608      	mov	r0, r1
 8008442:	4611      	mov	r1, r2
 8008444:	461a      	mov	r2, r3
 8008446:	4603      	mov	r3, r0
 8008448:	817b      	strh	r3, [r7, #10]
 800844a:	460b      	mov	r3, r1
 800844c:	813b      	strh	r3, [r7, #8]
 800844e:	4613      	mov	r3, r2
 8008450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008452:	f7fe f933 	bl	80066bc <HAL_GetTick>
 8008456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b20      	cmp	r3, #32
 8008462:	f040 80d9 	bne.w	8008618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	2319      	movs	r3, #25
 800846c:	2201      	movs	r2, #1
 800846e:	496d      	ldr	r1, [pc, #436]	@ (8008624 <HAL_I2C_Mem_Write+0x1ec>)
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 fc8b 	bl	8008d8c <I2C_WaitOnFlagUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800847c:	2302      	movs	r3, #2
 800847e:	e0cc      	b.n	800861a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_I2C_Mem_Write+0x56>
 800848a:	2302      	movs	r3, #2
 800848c:	e0c5      	b.n	800861a <HAL_I2C_Mem_Write+0x1e2>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d007      	beq.n	80084b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2221      	movs	r2, #33	@ 0x21
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2240      	movs	r2, #64	@ 0x40
 80084d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a3a      	ldr	r2, [r7, #32]
 80084de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80084e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4a4d      	ldr	r2, [pc, #308]	@ (8008628 <HAL_I2C_Mem_Write+0x1f0>)
 80084f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084f6:	88f8      	ldrh	r0, [r7, #6]
 80084f8:	893a      	ldrh	r2, [r7, #8]
 80084fa:	8979      	ldrh	r1, [r7, #10]
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4603      	mov	r3, r0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 fac2 	bl	8008a90 <I2C_RequestMemoryWrite>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d052      	beq.n	80085b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e081      	b.n	800861a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 fd50 	bl	8008fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00d      	beq.n	8008542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852a:	2b04      	cmp	r3, #4
 800852c:	d107      	bne.n	800853e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800853c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e06b      	b.n	800861a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008546:	781a      	ldrb	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008568:	b29b      	uxth	r3, r3
 800856a:	3b01      	subs	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b04      	cmp	r3, #4
 800857e:	d11b      	bne.n	80085b8 <HAL_I2C_Mem_Write+0x180>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008584:	2b00      	cmp	r3, #0
 8008586:	d017      	beq.n	80085b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1aa      	bne.n	8008516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 fd43 	bl	8009050 <I2C_WaitOnBTFFlagUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00d      	beq.n	80085ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d107      	bne.n	80085e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e016      	b.n	800861a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e000      	b.n	800861a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	00100002 	.word	0x00100002
 8008628:	ffff0000 	.word	0xffff0000

0800862c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08c      	sub	sp, #48	@ 0x30
 8008630:	af02      	add	r7, sp, #8
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	4608      	mov	r0, r1
 8008636:	4611      	mov	r1, r2
 8008638:	461a      	mov	r2, r3
 800863a:	4603      	mov	r3, r0
 800863c:	817b      	strh	r3, [r7, #10]
 800863e:	460b      	mov	r3, r1
 8008640:	813b      	strh	r3, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008646:	f7fe f839 	bl	80066bc <HAL_GetTick>
 800864a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b20      	cmp	r3, #32
 8008656:	f040 8214 	bne.w	8008a82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	2319      	movs	r3, #25
 8008660:	2201      	movs	r2, #1
 8008662:	497b      	ldr	r1, [pc, #492]	@ (8008850 <HAL_I2C_Mem_Read+0x224>)
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fb91 	bl	8008d8c <I2C_WaitOnFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008670:	2302      	movs	r3, #2
 8008672:	e207      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_I2C_Mem_Read+0x56>
 800867e:	2302      	movs	r3, #2
 8008680:	e200      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b01      	cmp	r3, #1
 8008696:	d007      	beq.n	80086a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2222      	movs	r2, #34	@ 0x22
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2240      	movs	r2, #64	@ 0x40
 80086c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80086d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a5b      	ldr	r2, [pc, #364]	@ (8008854 <HAL_I2C_Mem_Read+0x228>)
 80086e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086ea:	88f8      	ldrh	r0, [r7, #6]
 80086ec:	893a      	ldrh	r2, [r7, #8]
 80086ee:	8979      	ldrh	r1, [r7, #10]
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	4603      	mov	r3, r0
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fa5e 	bl	8008bbc <I2C_RequestMemoryRead>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e1bc      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d113      	bne.n	800873a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008712:	2300      	movs	r3, #0
 8008714:	623b      	str	r3, [r7, #32]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	623b      	str	r3, [r7, #32]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	e190      	b.n	8008a5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800873e:	2b01      	cmp	r3, #1
 8008740:	d11b      	bne.n	800877a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008752:	2300      	movs	r3, #0
 8008754:	61fb      	str	r3, [r7, #28]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	61fb      	str	r3, [r7, #28]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	61fb      	str	r3, [r7, #28]
 8008766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	e170      	b.n	8008a5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800877e:	2b02      	cmp	r3, #2
 8008780:	d11b      	bne.n	80087ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087a2:	2300      	movs	r3, #0
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	61bb      	str	r3, [r7, #24]
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	e150      	b.n	8008a5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80087d0:	e144      	b.n	8008a5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	f200 80f1 	bhi.w	80089be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d123      	bne.n	800882c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fc79 	bl	80090e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e145      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800882a:	e117      	b.n	8008a5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008830:	2b02      	cmp	r3, #2
 8008832:	d14e      	bne.n	80088d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	2200      	movs	r2, #0
 800883c:	4906      	ldr	r1, [pc, #24]	@ (8008858 <HAL_I2C_Mem_Read+0x22c>)
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 faa4 	bl	8008d8c <I2C_WaitOnFlagUntilTimeout>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d008      	beq.n	800885c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e11a      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
 800884e:	bf00      	nop
 8008850:	00100002 	.word	0x00100002
 8008854:	ffff0000 	.word	0xffff0000
 8008858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800886a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008894:	b29b      	uxth	r3, r3
 8008896:	3b01      	subs	r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	691a      	ldr	r2, [r3, #16]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80088d0:	e0c4      	b.n	8008a5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d8:	2200      	movs	r2, #0
 80088da:	496c      	ldr	r1, [pc, #432]	@ (8008a8c <HAL_I2C_Mem_Read+0x460>)
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fa55 	bl	8008d8c <I2C_WaitOnFlagUntilTimeout>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0cb      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691a      	ldr	r2, [r3, #16]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008918:	3b01      	subs	r3, #1
 800891a:	b29a      	uxth	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008934:	2200      	movs	r2, #0
 8008936:	4955      	ldr	r1, [pc, #340]	@ (8008a8c <HAL_I2C_Mem_Read+0x460>)
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fa27 	bl	8008d8c <I2C_WaitOnFlagUntilTimeout>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e09d      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691a      	ldr	r2, [r3, #16]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008980:	b29b      	uxth	r3, r3
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691a      	ldr	r2, [r3, #16]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80089bc:	e04e      	b.n	8008a5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 fb8c 	bl	80090e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e058      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089dc:	b2d2      	uxtb	r2, r2
 80089de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3b01      	subs	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d124      	bne.n	8008a5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d107      	bne.n	8008a2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	691a      	ldr	r2, [r3, #16]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a34:	b2d2      	uxtb	r2, r2
 8008a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f47f aeb6 	bne.w	80087d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e000      	b.n	8008a84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
  }
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3728      	adds	r7, #40	@ 0x28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	00010004 	.word	0x00010004

08008a90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b088      	sub	sp, #32
 8008a94:	af02      	add	r7, sp, #8
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	4608      	mov	r0, r1
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	817b      	strh	r3, [r7, #10]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	813b      	strh	r3, [r7, #8]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 f960 	bl	8008d8c <I2C_WaitOnFlagUntilTimeout>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00d      	beq.n	8008aee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae0:	d103      	bne.n	8008aea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e05f      	b.n	8008bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008aee:	897b      	ldrh	r3, [r7, #10]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	461a      	mov	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b00:	6a3a      	ldr	r2, [r7, #32]
 8008b02:	492d      	ldr	r1, [pc, #180]	@ (8008bb8 <I2C_RequestMemoryWrite+0x128>)
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f9bb 	bl	8008e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e04c      	b.n	8008bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b14:	2300      	movs	r3, #0
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b2c:	6a39      	ldr	r1, [r7, #32]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fa46 	bl	8008fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00d      	beq.n	8008b56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d107      	bne.n	8008b52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e02b      	b.n	8008bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d105      	bne.n	8008b68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b5c:	893b      	ldrh	r3, [r7, #8]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	611a      	str	r2, [r3, #16]
 8008b66:	e021      	b.n	8008bac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b68:	893b      	ldrh	r3, [r7, #8]
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b78:	6a39      	ldr	r1, [r7, #32]
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 fa20 	bl	8008fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00d      	beq.n	8008ba2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d107      	bne.n	8008b9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e005      	b.n	8008bae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ba2:	893b      	ldrh	r3, [r7, #8]
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3718      	adds	r7, #24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	00010002 	.word	0x00010002

08008bbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	461a      	mov	r2, r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	817b      	strh	r3, [r7, #10]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	813b      	strh	r3, [r7, #8]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008be4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f8c2 	bl	8008d8c <I2C_WaitOnFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c1c:	d103      	bne.n	8008c26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e0aa      	b.n	8008d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c2a:	897b      	ldrh	r3, [r7, #10]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	461a      	mov	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	4952      	ldr	r1, [pc, #328]	@ (8008d88 <I2C_RequestMemoryRead+0x1cc>)
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 f91d 	bl	8008e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e097      	b.n	8008d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	617b      	str	r3, [r7, #20]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c68:	6a39      	ldr	r1, [r7, #32]
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 f9a8 	bl	8008fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00d      	beq.n	8008c92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	d107      	bne.n	8008c8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e076      	b.n	8008d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c92:	88fb      	ldrh	r3, [r7, #6]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d105      	bne.n	8008ca4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c98:	893b      	ldrh	r3, [r7, #8]
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	611a      	str	r2, [r3, #16]
 8008ca2:	e021      	b.n	8008ce8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ca4:	893b      	ldrh	r3, [r7, #8]
 8008ca6:	0a1b      	lsrs	r3, r3, #8
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cb4:	6a39      	ldr	r1, [r7, #32]
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 f982 	bl	8008fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00d      	beq.n	8008cde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d107      	bne.n	8008cda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e050      	b.n	8008d80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cde:	893b      	ldrh	r3, [r7, #8]
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cea:	6a39      	ldr	r1, [r7, #32]
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 f967 	bl	8008fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00d      	beq.n	8008d14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d107      	bne.n	8008d10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e035      	b.n	8008d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f82b 	bl	8008d8c <I2C_WaitOnFlagUntilTimeout>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00d      	beq.n	8008d58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d4a:	d103      	bne.n	8008d54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e013      	b.n	8008d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d58:	897b      	ldrh	r3, [r7, #10]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6a:	6a3a      	ldr	r2, [r7, #32]
 8008d6c:	4906      	ldr	r1, [pc, #24]	@ (8008d88 <I2C_RequestMemoryRead+0x1cc>)
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f886 	bl	8008e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e000      	b.n	8008d80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	00010002 	.word	0x00010002

08008d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d9c:	e048      	b.n	8008e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008da4:	d044      	beq.n	8008e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da6:	f7fd fc89 	bl	80066bc <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d302      	bcc.n	8008dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d139      	bne.n	8008e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	0c1b      	lsrs	r3, r3, #16
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10d      	bne.n	8008de2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	43da      	mvns	r2, r3
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	bf0c      	ite	eq
 8008dd8:	2301      	moveq	r3, #1
 8008dda:	2300      	movne	r3, #0
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	e00c      	b.n	8008dfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	43da      	mvns	r2, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	4013      	ands	r3, r2
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bf0c      	ite	eq
 8008df4:	2301      	moveq	r3, #1
 8008df6:	2300      	movne	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d116      	bne.n	8008e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e1c:	f043 0220 	orr.w	r2, r3, #32
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e023      	b.n	8008e78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	0c1b      	lsrs	r3, r3, #16
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d10d      	bne.n	8008e56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	43da      	mvns	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	4013      	ands	r3, r2
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2301      	moveq	r3, #1
 8008e4e:	2300      	movne	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	e00c      	b.n	8008e70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	43da      	mvns	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4013      	ands	r3, r2
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bf0c      	ite	eq
 8008e68:	2301      	moveq	r3, #1
 8008e6a:	2300      	movne	r3, #0
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d093      	beq.n	8008d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e8e:	e071      	b.n	8008f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e9e:	d123      	bne.n	8008ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed4:	f043 0204 	orr.w	r2, r3, #4
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e067      	b.n	8008fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008eee:	d041      	beq.n	8008f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef0:	f7fd fbe4 	bl	80066bc <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d302      	bcc.n	8008f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d136      	bne.n	8008f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	0c1b      	lsrs	r3, r3, #16
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d10c      	bne.n	8008f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	43da      	mvns	r2, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bf14      	ite	ne
 8008f22:	2301      	movne	r3, #1
 8008f24:	2300      	moveq	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	e00b      	b.n	8008f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	43da      	mvns	r2, r3
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	4013      	ands	r3, r2
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	bf14      	ite	ne
 8008f3c:	2301      	movne	r3, #1
 8008f3e:	2300      	moveq	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d016      	beq.n	8008f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f60:	f043 0220 	orr.w	r2, r3, #32
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e021      	b.n	8008fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	0c1b      	lsrs	r3, r3, #16
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d10c      	bne.n	8008f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	43da      	mvns	r2, r3
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	4013      	ands	r3, r2
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bf14      	ite	ne
 8008f90:	2301      	movne	r3, #1
 8008f92:	2300      	moveq	r3, #0
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	e00b      	b.n	8008fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	43da      	mvns	r2, r3
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bf14      	ite	ne
 8008faa:	2301      	movne	r3, #1
 8008fac:	2300      	moveq	r3, #0
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f47f af6d 	bne.w	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fcc:	e034      	b.n	8009038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f8e3 	bl	800919a <I2C_IsAcknowledgeFailed>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e034      	b.n	8009048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fe4:	d028      	beq.n	8009038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe6:	f7fd fb69 	bl	80066bc <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d302      	bcc.n	8008ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d11d      	bne.n	8009038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009006:	2b80      	cmp	r3, #128	@ 0x80
 8009008:	d016      	beq.n	8009038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2220      	movs	r2, #32
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009024:	f043 0220 	orr.w	r2, r3, #32
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e007      	b.n	8009048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009042:	2b80      	cmp	r3, #128	@ 0x80
 8009044:	d1c3      	bne.n	8008fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800905c:	e034      	b.n	80090c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 f89b 	bl	800919a <I2C_IsAcknowledgeFailed>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e034      	b.n	80090d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009074:	d028      	beq.n	80090c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009076:	f7fd fb21 	bl	80066bc <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	429a      	cmp	r2, r3
 8009084:	d302      	bcc.n	800908c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d11d      	bne.n	80090c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	f003 0304 	and.w	r3, r3, #4
 8009096:	2b04      	cmp	r3, #4
 8009098:	d016      	beq.n	80090c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b4:	f043 0220 	orr.w	r2, r3, #32
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e007      	b.n	80090d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d1c3      	bne.n	800905e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090ec:	e049      	b.n	8009182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b10      	cmp	r3, #16
 80090fa:	d119      	bne.n	8009130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f06f 0210 	mvn.w	r2, #16
 8009104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e030      	b.n	8009192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009130:	f7fd fac4 	bl	80066bc <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	429a      	cmp	r2, r3
 800913e:	d302      	bcc.n	8009146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d11d      	bne.n	8009182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009150:	2b40      	cmp	r3, #64	@ 0x40
 8009152:	d016      	beq.n	8009182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800916e:	f043 0220 	orr.w	r2, r3, #32
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e007      	b.n	8009192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918c:	2b40      	cmp	r3, #64	@ 0x40
 800918e:	d1ae      	bne.n	80090ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b0:	d11b      	bne.n	80091ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80091ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d6:	f043 0204 	orr.w	r2, r3, #4
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e267      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d075      	beq.n	8009302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009216:	4b88      	ldr	r3, [pc, #544]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f003 030c 	and.w	r3, r3, #12
 800921e:	2b04      	cmp	r3, #4
 8009220:	d00c      	beq.n	800923c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009222:	4b85      	ldr	r3, [pc, #532]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800922a:	2b08      	cmp	r3, #8
 800922c:	d112      	bne.n	8009254 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800922e:	4b82      	ldr	r3, [pc, #520]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800923a:	d10b      	bne.n	8009254 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800923c:	4b7e      	ldr	r3, [pc, #504]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d05b      	beq.n	8009300 <HAL_RCC_OscConfig+0x108>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d157      	bne.n	8009300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e242      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800925c:	d106      	bne.n	800926c <HAL_RCC_OscConfig+0x74>
 800925e:	4b76      	ldr	r3, [pc, #472]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a75      	ldr	r2, [pc, #468]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	e01d      	b.n	80092a8 <HAL_RCC_OscConfig+0xb0>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009274:	d10c      	bne.n	8009290 <HAL_RCC_OscConfig+0x98>
 8009276:	4b70      	ldr	r3, [pc, #448]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a6f      	ldr	r2, [pc, #444]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 800927c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	4b6d      	ldr	r3, [pc, #436]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a6c      	ldr	r2, [pc, #432]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	e00b      	b.n	80092a8 <HAL_RCC_OscConfig+0xb0>
 8009290:	4b69      	ldr	r3, [pc, #420]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a68      	ldr	r2, [pc, #416]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	4b66      	ldr	r3, [pc, #408]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a65      	ldr	r2, [pc, #404]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 80092a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d013      	beq.n	80092d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b0:	f7fd fa04 	bl	80066bc <HAL_GetTick>
 80092b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092b8:	f7fd fa00 	bl	80066bc <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b64      	cmp	r3, #100	@ 0x64
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e207      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ca:	4b5b      	ldr	r3, [pc, #364]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0f0      	beq.n	80092b8 <HAL_RCC_OscConfig+0xc0>
 80092d6:	e014      	b.n	8009302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092d8:	f7fd f9f0 	bl	80066bc <HAL_GetTick>
 80092dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092de:	e008      	b.n	80092f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092e0:	f7fd f9ec 	bl	80066bc <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b64      	cmp	r3, #100	@ 0x64
 80092ec:	d901      	bls.n	80092f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e1f3      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092f2:	4b51      	ldr	r3, [pc, #324]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1f0      	bne.n	80092e0 <HAL_RCC_OscConfig+0xe8>
 80092fe:	e000      	b.n	8009302 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d063      	beq.n	80093d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800930e:	4b4a      	ldr	r3, [pc, #296]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f003 030c 	and.w	r3, r3, #12
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800931a:	4b47      	ldr	r3, [pc, #284]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009322:	2b08      	cmp	r3, #8
 8009324:	d11c      	bne.n	8009360 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009326:	4b44      	ldr	r3, [pc, #272]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d116      	bne.n	8009360 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009332:	4b41      	ldr	r3, [pc, #260]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <HAL_RCC_OscConfig+0x152>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d001      	beq.n	800934a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e1c7      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800934a:	4b3b      	ldr	r3, [pc, #236]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	4937      	ldr	r1, [pc, #220]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 800935a:	4313      	orrs	r3, r2
 800935c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800935e:	e03a      	b.n	80093d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d020      	beq.n	80093aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009368:	4b34      	ldr	r3, [pc, #208]	@ (800943c <HAL_RCC_OscConfig+0x244>)
 800936a:	2201      	movs	r2, #1
 800936c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800936e:	f7fd f9a5 	bl	80066bc <HAL_GetTick>
 8009372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009374:	e008      	b.n	8009388 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009376:	f7fd f9a1 	bl	80066bc <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d901      	bls.n	8009388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e1a8      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009388:	4b2b      	ldr	r3, [pc, #172]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0f0      	beq.n	8009376 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009394:	4b28      	ldr	r3, [pc, #160]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	4925      	ldr	r1, [pc, #148]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	600b      	str	r3, [r1, #0]
 80093a8:	e015      	b.n	80093d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093aa:	4b24      	ldr	r3, [pc, #144]	@ (800943c <HAL_RCC_OscConfig+0x244>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b0:	f7fd f984 	bl	80066bc <HAL_GetTick>
 80093b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093b6:	e008      	b.n	80093ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093b8:	f7fd f980 	bl	80066bc <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e187      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 0302 	and.w	r3, r3, #2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1f0      	bne.n	80093b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d036      	beq.n	8009450 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d016      	beq.n	8009418 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093ea:	4b15      	ldr	r3, [pc, #84]	@ (8009440 <HAL_RCC_OscConfig+0x248>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f0:	f7fd f964 	bl	80066bc <HAL_GetTick>
 80093f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093f6:	e008      	b.n	800940a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093f8:	f7fd f960 	bl	80066bc <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d901      	bls.n	800940a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e167      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800940a:	4b0b      	ldr	r3, [pc, #44]	@ (8009438 <HAL_RCC_OscConfig+0x240>)
 800940c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0f0      	beq.n	80093f8 <HAL_RCC_OscConfig+0x200>
 8009416:	e01b      	b.n	8009450 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009418:	4b09      	ldr	r3, [pc, #36]	@ (8009440 <HAL_RCC_OscConfig+0x248>)
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800941e:	f7fd f94d 	bl	80066bc <HAL_GetTick>
 8009422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009424:	e00e      	b.n	8009444 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009426:	f7fd f949 	bl	80066bc <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	2b02      	cmp	r3, #2
 8009432:	d907      	bls.n	8009444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e150      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
 8009438:	40023800 	.word	0x40023800
 800943c:	42470000 	.word	0x42470000
 8009440:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009444:	4b88      	ldr	r3, [pc, #544]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1ea      	bne.n	8009426 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8097 	beq.w	800958c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009462:	4b81      	ldr	r3, [pc, #516]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10f      	bne.n	800948e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800946e:	2300      	movs	r3, #0
 8009470:	60bb      	str	r3, [r7, #8]
 8009472:	4b7d      	ldr	r3, [pc, #500]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009476:	4a7c      	ldr	r2, [pc, #496]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800947c:	6413      	str	r3, [r2, #64]	@ 0x40
 800947e:	4b7a      	ldr	r3, [pc, #488]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009486:	60bb      	str	r3, [r7, #8]
 8009488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800948a:	2301      	movs	r3, #1
 800948c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800948e:	4b77      	ldr	r3, [pc, #476]	@ (800966c <HAL_RCC_OscConfig+0x474>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009496:	2b00      	cmp	r3, #0
 8009498:	d118      	bne.n	80094cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800949a:	4b74      	ldr	r3, [pc, #464]	@ (800966c <HAL_RCC_OscConfig+0x474>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a73      	ldr	r2, [pc, #460]	@ (800966c <HAL_RCC_OscConfig+0x474>)
 80094a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094a6:	f7fd f909 	bl	80066bc <HAL_GetTick>
 80094aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ac:	e008      	b.n	80094c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094ae:	f7fd f905 	bl	80066bc <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d901      	bls.n	80094c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e10c      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094c0:	4b6a      	ldr	r3, [pc, #424]	@ (800966c <HAL_RCC_OscConfig+0x474>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0f0      	beq.n	80094ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d106      	bne.n	80094e2 <HAL_RCC_OscConfig+0x2ea>
 80094d4:	4b64      	ldr	r3, [pc, #400]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 80094d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094d8:	4a63      	ldr	r2, [pc, #396]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 80094da:	f043 0301 	orr.w	r3, r3, #1
 80094de:	6713      	str	r3, [r2, #112]	@ 0x70
 80094e0:	e01c      	b.n	800951c <HAL_RCC_OscConfig+0x324>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d10c      	bne.n	8009504 <HAL_RCC_OscConfig+0x30c>
 80094ea:	4b5f      	ldr	r3, [pc, #380]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 80094ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ee:	4a5e      	ldr	r2, [pc, #376]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 80094f0:	f043 0304 	orr.w	r3, r3, #4
 80094f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80094f6:	4b5c      	ldr	r3, [pc, #368]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 80094f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094fa:	4a5b      	ldr	r2, [pc, #364]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 80094fc:	f043 0301 	orr.w	r3, r3, #1
 8009500:	6713      	str	r3, [r2, #112]	@ 0x70
 8009502:	e00b      	b.n	800951c <HAL_RCC_OscConfig+0x324>
 8009504:	4b58      	ldr	r3, [pc, #352]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009508:	4a57      	ldr	r2, [pc, #348]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 800950a:	f023 0301 	bic.w	r3, r3, #1
 800950e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009510:	4b55      	ldr	r3, [pc, #340]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009514:	4a54      	ldr	r2, [pc, #336]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009516:	f023 0304 	bic.w	r3, r3, #4
 800951a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d015      	beq.n	8009550 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009524:	f7fd f8ca 	bl	80066bc <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800952a:	e00a      	b.n	8009542 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800952c:	f7fd f8c6 	bl	80066bc <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800953a:	4293      	cmp	r3, r2
 800953c:	d901      	bls.n	8009542 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e0cb      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009542:	4b49      	ldr	r3, [pc, #292]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0ee      	beq.n	800952c <HAL_RCC_OscConfig+0x334>
 800954e:	e014      	b.n	800957a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009550:	f7fd f8b4 	bl	80066bc <HAL_GetTick>
 8009554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009556:	e00a      	b.n	800956e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009558:	f7fd f8b0 	bl	80066bc <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009566:	4293      	cmp	r3, r2
 8009568:	d901      	bls.n	800956e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e0b5      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800956e:	4b3e      	ldr	r3, [pc, #248]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009572:	f003 0302 	and.w	r3, r3, #2
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1ee      	bne.n	8009558 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d105      	bne.n	800958c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009580:	4b39      	ldr	r3, [pc, #228]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009584:	4a38      	ldr	r2, [pc, #224]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800958a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 80a1 	beq.w	80096d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009596:	4b34      	ldr	r3, [pc, #208]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f003 030c 	and.w	r3, r3, #12
 800959e:	2b08      	cmp	r3, #8
 80095a0:	d05c      	beq.n	800965c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d141      	bne.n	800962e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095aa:	4b31      	ldr	r3, [pc, #196]	@ (8009670 <HAL_RCC_OscConfig+0x478>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095b0:	f7fd f884 	bl	80066bc <HAL_GetTick>
 80095b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095b6:	e008      	b.n	80095ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095b8:	f7fd f880 	bl	80066bc <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e087      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ca:	4b27      	ldr	r3, [pc, #156]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f0      	bne.n	80095b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	69da      	ldr	r2, [r3, #28]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e4:	019b      	lsls	r3, r3, #6
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ec:	085b      	lsrs	r3, r3, #1
 80095ee:	3b01      	subs	r3, #1
 80095f0:	041b      	lsls	r3, r3, #16
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f8:	061b      	lsls	r3, r3, #24
 80095fa:	491b      	ldr	r1, [pc, #108]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009600:	4b1b      	ldr	r3, [pc, #108]	@ (8009670 <HAL_RCC_OscConfig+0x478>)
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009606:	f7fd f859 	bl	80066bc <HAL_GetTick>
 800960a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800960c:	e008      	b.n	8009620 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800960e:	f7fd f855 	bl	80066bc <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	2b02      	cmp	r3, #2
 800961a:	d901      	bls.n	8009620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e05c      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009620:	4b11      	ldr	r3, [pc, #68]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0f0      	beq.n	800960e <HAL_RCC_OscConfig+0x416>
 800962c:	e054      	b.n	80096d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800962e:	4b10      	ldr	r3, [pc, #64]	@ (8009670 <HAL_RCC_OscConfig+0x478>)
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009634:	f7fd f842 	bl	80066bc <HAL_GetTick>
 8009638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800963a:	e008      	b.n	800964e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800963c:	f7fd f83e 	bl	80066bc <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	2b02      	cmp	r3, #2
 8009648:	d901      	bls.n	800964e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e045      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800964e:	4b06      	ldr	r3, [pc, #24]	@ (8009668 <HAL_RCC_OscConfig+0x470>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f0      	bne.n	800963c <HAL_RCC_OscConfig+0x444>
 800965a:	e03d      	b.n	80096d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d107      	bne.n	8009674 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e038      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
 8009668:	40023800 	.word	0x40023800
 800966c:	40007000 	.word	0x40007000
 8009670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009674:	4b1b      	ldr	r3, [pc, #108]	@ (80096e4 <HAL_RCC_OscConfig+0x4ec>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d028      	beq.n	80096d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800968c:	429a      	cmp	r2, r3
 800968e:	d121      	bne.n	80096d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800969a:	429a      	cmp	r2, r3
 800969c:	d11a      	bne.n	80096d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80096a4:	4013      	ands	r3, r2
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80096aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d111      	bne.n	80096d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ba:	085b      	lsrs	r3, r3, #1
 80096bc:	3b01      	subs	r3, #1
 80096be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d107      	bne.n	80096d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d001      	beq.n	80096d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e000      	b.n	80096da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	40023800 	.word	0x40023800

080096e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e0cc      	b.n	8009896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096fc:	4b68      	ldr	r3, [pc, #416]	@ (80098a0 <HAL_RCC_ClockConfig+0x1b8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0307 	and.w	r3, r3, #7
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d90c      	bls.n	8009724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800970a:	4b65      	ldr	r3, [pc, #404]	@ (80098a0 <HAL_RCC_ClockConfig+0x1b8>)
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	b2d2      	uxtb	r2, r2
 8009710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009712:	4b63      	ldr	r3, [pc, #396]	@ (80098a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0307 	and.w	r3, r3, #7
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	429a      	cmp	r2, r3
 800971e:	d001      	beq.n	8009724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e0b8      	b.n	8009896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b00      	cmp	r3, #0
 800972e:	d020      	beq.n	8009772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800973c:	4b59      	ldr	r3, [pc, #356]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	4a58      	ldr	r2, [pc, #352]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009742:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009754:	4b53      	ldr	r3, [pc, #332]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	4a52      	ldr	r2, [pc, #328]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 800975a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800975e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009760:	4b50      	ldr	r3, [pc, #320]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	494d      	ldr	r1, [pc, #308]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 800976e:	4313      	orrs	r3, r2
 8009770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d044      	beq.n	8009808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d107      	bne.n	8009796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009786:	4b47      	ldr	r3, [pc, #284]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d119      	bne.n	80097c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e07f      	b.n	8009896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d003      	beq.n	80097a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d107      	bne.n	80097b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097a6:	4b3f      	ldr	r3, [pc, #252]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e06f      	b.n	8009896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097b6:	4b3b      	ldr	r3, [pc, #236]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e067      	b.n	8009896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097c6:	4b37      	ldr	r3, [pc, #220]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f023 0203 	bic.w	r2, r3, #3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	4934      	ldr	r1, [pc, #208]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097d8:	f7fc ff70 	bl	80066bc <HAL_GetTick>
 80097dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097de:	e00a      	b.n	80097f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097e0:	f7fc ff6c 	bl	80066bc <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d901      	bls.n	80097f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e04f      	b.n	8009896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097f6:	4b2b      	ldr	r3, [pc, #172]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f003 020c 	and.w	r2, r3, #12
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	429a      	cmp	r2, r3
 8009806:	d1eb      	bne.n	80097e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009808:	4b25      	ldr	r3, [pc, #148]	@ (80098a0 <HAL_RCC_ClockConfig+0x1b8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d20c      	bcs.n	8009830 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009816:	4b22      	ldr	r3, [pc, #136]	@ (80098a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800981e:	4b20      	ldr	r3, [pc, #128]	@ (80098a0 <HAL_RCC_ClockConfig+0x1b8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d001      	beq.n	8009830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e032      	b.n	8009896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d008      	beq.n	800984e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800983c:	4b19      	ldr	r3, [pc, #100]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	4916      	ldr	r1, [pc, #88]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 800984a:	4313      	orrs	r3, r2
 800984c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0308 	and.w	r3, r3, #8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800985a:	4b12      	ldr	r3, [pc, #72]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	490e      	ldr	r1, [pc, #56]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 800986a:	4313      	orrs	r3, r2
 800986c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800986e:	f000 f82d 	bl	80098cc <HAL_RCC_GetSysClockFreq>
 8009872:	4602      	mov	r2, r0
 8009874:	4b0b      	ldr	r3, [pc, #44]	@ (80098a4 <HAL_RCC_ClockConfig+0x1bc>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	091b      	lsrs	r3, r3, #4
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	490a      	ldr	r1, [pc, #40]	@ (80098a8 <HAL_RCC_ClockConfig+0x1c0>)
 8009880:	5ccb      	ldrb	r3, [r1, r3]
 8009882:	fa22 f303 	lsr.w	r3, r2, r3
 8009886:	4a09      	ldr	r2, [pc, #36]	@ (80098ac <HAL_RCC_ClockConfig+0x1c4>)
 8009888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800988a:	4b09      	ldr	r3, [pc, #36]	@ (80098b0 <HAL_RCC_ClockConfig+0x1c8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f7fc fed0 	bl	8006634 <HAL_InitTick>

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	40023c00 	.word	0x40023c00
 80098a4:	40023800 	.word	0x40023800
 80098a8:	080133c0 	.word	0x080133c0
 80098ac:	20000060 	.word	0x20000060
 80098b0:	20000064 	.word	0x20000064

080098b4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80098b8:	4b03      	ldr	r3, [pc, #12]	@ (80098c8 <HAL_RCC_EnableCSS+0x14>)
 80098ba:	2201      	movs	r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
}
 80098be:	bf00      	nop
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr
 80098c8:	4247004c 	.word	0x4247004c

080098cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098d0:	b090      	sub	sp, #64	@ 0x40
 80098d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d8:	2300      	movs	r3, #0
 80098da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098dc:	2300      	movs	r3, #0
 80098de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098e4:	4b59      	ldr	r3, [pc, #356]	@ (8009a4c <HAL_RCC_GetSysClockFreq+0x180>)
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f003 030c 	and.w	r3, r3, #12
 80098ec:	2b08      	cmp	r3, #8
 80098ee:	d00d      	beq.n	800990c <HAL_RCC_GetSysClockFreq+0x40>
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	f200 80a1 	bhi.w	8009a38 <HAL_RCC_GetSysClockFreq+0x16c>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <HAL_RCC_GetSysClockFreq+0x34>
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d003      	beq.n	8009906 <HAL_RCC_GetSysClockFreq+0x3a>
 80098fe:	e09b      	b.n	8009a38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009900:	4b53      	ldr	r3, [pc, #332]	@ (8009a50 <HAL_RCC_GetSysClockFreq+0x184>)
 8009902:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009904:	e09b      	b.n	8009a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009906:	4b53      	ldr	r3, [pc, #332]	@ (8009a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8009908:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800990a:	e098      	b.n	8009a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800990c:	4b4f      	ldr	r3, [pc, #316]	@ (8009a4c <HAL_RCC_GetSysClockFreq+0x180>)
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009916:	4b4d      	ldr	r3, [pc, #308]	@ (8009a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d028      	beq.n	8009974 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009922:	4b4a      	ldr	r3, [pc, #296]	@ (8009a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	099b      	lsrs	r3, r3, #6
 8009928:	2200      	movs	r2, #0
 800992a:	623b      	str	r3, [r7, #32]
 800992c:	627a      	str	r2, [r7, #36]	@ 0x24
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009934:	2100      	movs	r1, #0
 8009936:	4b47      	ldr	r3, [pc, #284]	@ (8009a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8009938:	fb03 f201 	mul.w	r2, r3, r1
 800993c:	2300      	movs	r3, #0
 800993e:	fb00 f303 	mul.w	r3, r0, r3
 8009942:	4413      	add	r3, r2
 8009944:	4a43      	ldr	r2, [pc, #268]	@ (8009a54 <HAL_RCC_GetSysClockFreq+0x188>)
 8009946:	fba0 1202 	umull	r1, r2, r0, r2
 800994a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800994c:	460a      	mov	r2, r1
 800994e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009952:	4413      	add	r3, r2
 8009954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009958:	2200      	movs	r2, #0
 800995a:	61bb      	str	r3, [r7, #24]
 800995c:	61fa      	str	r2, [r7, #28]
 800995e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009962:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009966:	f7f7 f91f 	bl	8000ba8 <__aeabi_uldivmod>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4613      	mov	r3, r2
 8009970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009972:	e053      	b.n	8009a1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009974:	4b35      	ldr	r3, [pc, #212]	@ (8009a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	099b      	lsrs	r3, r3, #6
 800997a:	2200      	movs	r2, #0
 800997c:	613b      	str	r3, [r7, #16]
 800997e:	617a      	str	r2, [r7, #20]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009986:	f04f 0b00 	mov.w	fp, #0
 800998a:	4652      	mov	r2, sl
 800998c:	465b      	mov	r3, fp
 800998e:	f04f 0000 	mov.w	r0, #0
 8009992:	f04f 0100 	mov.w	r1, #0
 8009996:	0159      	lsls	r1, r3, #5
 8009998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800999c:	0150      	lsls	r0, r2, #5
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	ebb2 080a 	subs.w	r8, r2, sl
 80099a6:	eb63 090b 	sbc.w	r9, r3, fp
 80099aa:	f04f 0200 	mov.w	r2, #0
 80099ae:	f04f 0300 	mov.w	r3, #0
 80099b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80099b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80099ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80099be:	ebb2 0408 	subs.w	r4, r2, r8
 80099c2:	eb63 0509 	sbc.w	r5, r3, r9
 80099c6:	f04f 0200 	mov.w	r2, #0
 80099ca:	f04f 0300 	mov.w	r3, #0
 80099ce:	00eb      	lsls	r3, r5, #3
 80099d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099d4:	00e2      	lsls	r2, r4, #3
 80099d6:	4614      	mov	r4, r2
 80099d8:	461d      	mov	r5, r3
 80099da:	eb14 030a 	adds.w	r3, r4, sl
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	eb45 030b 	adc.w	r3, r5, fp
 80099e4:	607b      	str	r3, [r7, #4]
 80099e6:	f04f 0200 	mov.w	r2, #0
 80099ea:	f04f 0300 	mov.w	r3, #0
 80099ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099f2:	4629      	mov	r1, r5
 80099f4:	028b      	lsls	r3, r1, #10
 80099f6:	4621      	mov	r1, r4
 80099f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80099fc:	4621      	mov	r1, r4
 80099fe:	028a      	lsls	r2, r1, #10
 8009a00:	4610      	mov	r0, r2
 8009a02:	4619      	mov	r1, r3
 8009a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a06:	2200      	movs	r2, #0
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	60fa      	str	r2, [r7, #12]
 8009a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a10:	f7f7 f8ca 	bl	8000ba8 <__aeabi_uldivmod>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4613      	mov	r3, r2
 8009a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009a4c <HAL_RCC_GetSysClockFreq+0x180>)
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	0c1b      	lsrs	r3, r3, #16
 8009a22:	f003 0303 	and.w	r3, r3, #3
 8009a26:	3301      	adds	r3, #1
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8009a2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009a36:	e002      	b.n	8009a3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a38:	4b05      	ldr	r3, [pc, #20]	@ (8009a50 <HAL_RCC_GetSysClockFreq+0x184>)
 8009a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3740      	adds	r7, #64	@ 0x40
 8009a44:	46bd      	mov	sp, r7
 8009a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40023800 	.word	0x40023800
 8009a50:	00f42400 	.word	0x00f42400
 8009a54:	00b71b00 	.word	0x00b71b00

08009a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a5c:	4b03      	ldr	r3, [pc, #12]	@ (8009a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20000060 	.word	0x20000060

08009a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a74:	f7ff fff0 	bl	8009a58 <HAL_RCC_GetHCLKFreq>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	0a9b      	lsrs	r3, r3, #10
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	4903      	ldr	r1, [pc, #12]	@ (8009a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a86:	5ccb      	ldrb	r3, [r1, r3]
 8009a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	40023800 	.word	0x40023800
 8009a94:	080133d0 	.word	0x080133d0

08009a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a9c:	f7ff ffdc 	bl	8009a58 <HAL_RCC_GetHCLKFreq>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	0b5b      	lsrs	r3, r3, #13
 8009aa8:	f003 0307 	and.w	r3, r3, #7
 8009aac:	4903      	ldr	r1, [pc, #12]	@ (8009abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8009aae:	5ccb      	ldrb	r3, [r1, r3]
 8009ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	40023800 	.word	0x40023800
 8009abc:	080133d0 	.word	0x080133d0

08009ac0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009ac4:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009acc:	2b80      	cmp	r3, #128	@ 0x80
 8009ace:	d104      	bne.n	8009ada <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009ad0:	f000 f80a 	bl	8009ae8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009ad4:	4b03      	ldr	r3, [pc, #12]	@ (8009ae4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009ad6:	2280      	movs	r2, #128	@ 0x80
 8009ad8:	701a      	strb	r2, [r3, #0]
  }
}
 8009ada:	bf00      	nop
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	40023800 	.word	0x40023800
 8009ae4:	4002380e 	.word	0x4002380e

08009ae8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009aec:	bf00      	nop
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b082      	sub	sp, #8
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e07b      	b.n	8009c00 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d108      	bne.n	8009b22 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b18:	d009      	beq.n	8009b2e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	61da      	str	r2, [r3, #28]
 8009b20:	e005      	b.n	8009b2e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d106      	bne.n	8009b4e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7fb fe9d 	bl	8005888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2202      	movs	r2, #2
 8009b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009b76:	431a      	orrs	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b80:	431a      	orrs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	f003 0302 	and.w	r3, r3, #2
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bb2:	ea42 0103 	orr.w	r1, r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	f003 0104 	and.w	r1, r3, #4
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd4:	f003 0210 	and.w	r2, r3, #16
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	69da      	ldr	r2, [r3, #28]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009bee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08c      	sub	sp, #48	@ 0x30
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c16:	2301      	movs	r3, #1
 8009c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <HAL_SPI_TransmitReceive+0x26>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e198      	b.n	8009f60 <HAL_SPI_TransmitReceive+0x358>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c36:	f7fc fd41 	bl	80066bc <HAL_GetTick>
 8009c3a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009c4c:	887b      	ldrh	r3, [r7, #2]
 8009c4e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d00f      	beq.n	8009c78 <HAL_SPI_TransmitReceive+0x70>
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c5e:	d107      	bne.n	8009c70 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <HAL_SPI_TransmitReceive+0x68>
 8009c68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d003      	beq.n	8009c78 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009c70:	2302      	movs	r3, #2
 8009c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009c76:	e16d      	b.n	8009f54 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <HAL_SPI_TransmitReceive+0x82>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <HAL_SPI_TransmitReceive+0x82>
 8009c84:	887b      	ldrh	r3, [r7, #2]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d103      	bne.n	8009c92 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009c90:	e160      	b.n	8009f54 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d003      	beq.n	8009ca6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2205      	movs	r2, #5
 8009ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	887a      	ldrh	r2, [r7, #2]
 8009cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	887a      	ldrh	r2, [r7, #2]
 8009cbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	887a      	ldrh	r2, [r7, #2]
 8009cc8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	887a      	ldrh	r2, [r7, #2]
 8009cce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce6:	2b40      	cmp	r3, #64	@ 0x40
 8009ce8:	d007      	beq.n	8009cfa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d02:	d17c      	bne.n	8009dfe <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <HAL_SPI_TransmitReceive+0x10a>
 8009d0c:	8b7b      	ldrh	r3, [r7, #26]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d16a      	bne.n	8009de8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d16:	881a      	ldrh	r2, [r3, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d22:	1c9a      	adds	r2, r3, #2
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d36:	e057      	b.n	8009de8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f003 0302 	and.w	r3, r3, #2
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d11b      	bne.n	8009d7e <HAL_SPI_TransmitReceive+0x176>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d016      	beq.n	8009d7e <HAL_SPI_TransmitReceive+0x176>
 8009d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d113      	bne.n	8009d7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d5a:	881a      	ldrh	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d66:	1c9a      	adds	r2, r3, #2
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d119      	bne.n	8009dc0 <HAL_SPI_TransmitReceive+0x1b8>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d014      	beq.n	8009dc0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da0:	b292      	uxth	r2, r2
 8009da2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da8:	1c9a      	adds	r2, r3, #2
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	3b01      	subs	r3, #1
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009dc0:	f7fc fc7c 	bl	80066bc <HAL_GetTick>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d80b      	bhi.n	8009de8 <HAL_SPI_TransmitReceive+0x1e0>
 8009dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dd6:	d007      	beq.n	8009de8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8009de6:	e0b5      	b.n	8009f54 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1a2      	bne.n	8009d38 <HAL_SPI_TransmitReceive+0x130>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d19d      	bne.n	8009d38 <HAL_SPI_TransmitReceive+0x130>
 8009dfc:	e080      	b.n	8009f00 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <HAL_SPI_TransmitReceive+0x204>
 8009e06:	8b7b      	ldrh	r3, [r7, #26]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d16f      	bne.n	8009eec <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	330c      	adds	r3, #12
 8009e16:	7812      	ldrb	r2, [r2, #0]
 8009e18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e32:	e05b      	b.n	8009eec <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d11c      	bne.n	8009e7c <HAL_SPI_TransmitReceive+0x274>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d017      	beq.n	8009e7c <HAL_SPI_TransmitReceive+0x274>
 8009e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d114      	bne.n	8009e7c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	330c      	adds	r3, #12
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	3b01      	subs	r3, #1
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d119      	bne.n	8009ebe <HAL_SPI_TransmitReceive+0x2b6>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d014      	beq.n	8009ebe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9e:	b2d2      	uxtb	r2, r2
 8009ea0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ebe:	f7fc fbfd 	bl	80066bc <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d803      	bhi.n	8009ed6 <HAL_SPI_TransmitReceive+0x2ce>
 8009ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ed4:	d102      	bne.n	8009edc <HAL_SPI_TransmitReceive+0x2d4>
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d107      	bne.n	8009eec <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8009eea:	e033      	b.n	8009f54 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d19e      	bne.n	8009e34 <HAL_SPI_TransmitReceive+0x22c>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d199      	bne.n	8009e34 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 f8b7 	bl	800a078 <SPI_EndRxTxTransaction>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8009f1c:	e01a      	b.n	8009f54 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10a      	bne.n	8009f3c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4a:	e003      	b.n	8009f54 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3730      	adds	r7, #48	@ 0x30
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	4613      	mov	r3, r2
 8009f76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f78:	f7fc fba0 	bl	80066bc <HAL_GetTick>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f80:	1a9b      	subs	r3, r3, r2
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	4413      	add	r3, r2
 8009f86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f88:	f7fc fb98 	bl	80066bc <HAL_GetTick>
 8009f8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f8e:	4b39      	ldr	r3, [pc, #228]	@ (800a074 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	015b      	lsls	r3, r3, #5
 8009f94:	0d1b      	lsrs	r3, r3, #20
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	fb02 f303 	mul.w	r3, r2, r3
 8009f9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f9e:	e054      	b.n	800a04a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fa6:	d050      	beq.n	800a04a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fa8:	f7fc fb88 	bl	80066bc <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d902      	bls.n	8009fbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d13d      	bne.n	800a03a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009fcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009fd6:	d111      	bne.n	8009ffc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fe0:	d004      	beq.n	8009fec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fea:	d107      	bne.n	8009ffc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ffa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a004:	d10f      	bne.n	800a026 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a024:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e017      	b.n	800a06a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	3b01      	subs	r3, #1
 800a048:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	4013      	ands	r3, r2
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	429a      	cmp	r2, r3
 800a058:	bf0c      	ite	eq
 800a05a:	2301      	moveq	r3, #1
 800a05c:	2300      	movne	r3, #0
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	461a      	mov	r2, r3
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	429a      	cmp	r2, r3
 800a066:	d19b      	bne.n	8009fa0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3720      	adds	r7, #32
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20000060 	.word	0x20000060

0800a078 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2201      	movs	r2, #1
 800a08c:	2102      	movs	r1, #2
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff ff6a 	bl	8009f68 <SPI_WaitFlagStateUntilTimeout>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a09e:	f043 0220 	orr.w	r2, r3, #32
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e032      	b.n	800a110 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a0aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a118 <SPI_EndRxTxTransaction+0xa0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a11c <SPI_EndRxTxTransaction+0xa4>)
 800a0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b4:	0d5b      	lsrs	r3, r3, #21
 800a0b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a0ba:	fb02 f303 	mul.w	r3, r2, r3
 800a0be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0c8:	d112      	bne.n	800a0f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2180      	movs	r1, #128	@ 0x80
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7ff ff47 	bl	8009f68 <SPI_WaitFlagStateUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d016      	beq.n	800a10e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0e4:	f043 0220 	orr.w	r2, r3, #32
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e00f      	b.n	800a110 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00a      	beq.n	800a10c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a106:	2b80      	cmp	r3, #128	@ 0x80
 800a108:	d0f2      	beq.n	800a0f0 <SPI_EndRxTxTransaction+0x78>
 800a10a:	e000      	b.n	800a10e <SPI_EndRxTxTransaction+0x96>
        break;
 800a10c:	bf00      	nop
  }

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000060 	.word	0x20000060
 800a11c:	165e9f81 	.word	0x165e9f81

0800a120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e041      	b.n	800a1b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d106      	bne.n	800a14c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7fb fd2c 	bl	8005ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3304      	adds	r3, #4
 800a15c:	4619      	mov	r1, r3
 800a15e:	4610      	mov	r0, r2
 800a160:	f000 fba8 	bl	800a8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d001      	beq.n	800a1d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e046      	b.n	800a266 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a23      	ldr	r2, [pc, #140]	@ (800a274 <HAL_TIM_Base_Start+0xb4>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d022      	beq.n	800a230 <HAL_TIM_Base_Start+0x70>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1f2:	d01d      	beq.n	800a230 <HAL_TIM_Base_Start+0x70>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1f      	ldr	r2, [pc, #124]	@ (800a278 <HAL_TIM_Base_Start+0xb8>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d018      	beq.n	800a230 <HAL_TIM_Base_Start+0x70>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a1e      	ldr	r2, [pc, #120]	@ (800a27c <HAL_TIM_Base_Start+0xbc>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d013      	beq.n	800a230 <HAL_TIM_Base_Start+0x70>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1c      	ldr	r2, [pc, #112]	@ (800a280 <HAL_TIM_Base_Start+0xc0>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d00e      	beq.n	800a230 <HAL_TIM_Base_Start+0x70>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a1b      	ldr	r2, [pc, #108]	@ (800a284 <HAL_TIM_Base_Start+0xc4>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d009      	beq.n	800a230 <HAL_TIM_Base_Start+0x70>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a19      	ldr	r2, [pc, #100]	@ (800a288 <HAL_TIM_Base_Start+0xc8>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d004      	beq.n	800a230 <HAL_TIM_Base_Start+0x70>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a18      	ldr	r2, [pc, #96]	@ (800a28c <HAL_TIM_Base_Start+0xcc>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d111      	bne.n	800a254 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2b06      	cmp	r3, #6
 800a240:	d010      	beq.n	800a264 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0201 	orr.w	r2, r2, #1
 800a250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a252:	e007      	b.n	800a264 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	40010000 	.word	0x40010000
 800a278:	40000400 	.word	0x40000400
 800a27c:	40000800 	.word	0x40000800
 800a280:	40000c00 	.word	0x40000c00
 800a284:	40010400 	.word	0x40010400
 800a288:	40014000 	.word	0x40014000
 800a28c:	40001800 	.word	0x40001800

0800a290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e041      	b.n	800a326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7fb fb4e 	bl	8005958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4610      	mov	r0, r2
 800a2d0:	f000 faf0 	bl	800a8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
	...

0800a330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d109      	bne.n	800a354 <HAL_TIM_PWM_Start+0x24>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b01      	cmp	r3, #1
 800a34a:	bf14      	ite	ne
 800a34c:	2301      	movne	r3, #1
 800a34e:	2300      	moveq	r3, #0
 800a350:	b2db      	uxtb	r3, r3
 800a352:	e022      	b.n	800a39a <HAL_TIM_PWM_Start+0x6a>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b04      	cmp	r3, #4
 800a358:	d109      	bne.n	800a36e <HAL_TIM_PWM_Start+0x3e>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b01      	cmp	r3, #1
 800a364:	bf14      	ite	ne
 800a366:	2301      	movne	r3, #1
 800a368:	2300      	moveq	r3, #0
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	e015      	b.n	800a39a <HAL_TIM_PWM_Start+0x6a>
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b08      	cmp	r3, #8
 800a372:	d109      	bne.n	800a388 <HAL_TIM_PWM_Start+0x58>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	bf14      	ite	ne
 800a380:	2301      	movne	r3, #1
 800a382:	2300      	moveq	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	e008      	b.n	800a39a <HAL_TIM_PWM_Start+0x6a>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b01      	cmp	r3, #1
 800a392:	bf14      	ite	ne
 800a394:	2301      	movne	r3, #1
 800a396:	2300      	moveq	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e07c      	b.n	800a49c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d104      	bne.n	800a3b2 <HAL_TIM_PWM_Start+0x82>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3b0:	e013      	b.n	800a3da <HAL_TIM_PWM_Start+0xaa>
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d104      	bne.n	800a3c2 <HAL_TIM_PWM_Start+0x92>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3c0:	e00b      	b.n	800a3da <HAL_TIM_PWM_Start+0xaa>
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d104      	bne.n	800a3d2 <HAL_TIM_PWM_Start+0xa2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3d0:	e003      	b.n	800a3da <HAL_TIM_PWM_Start+0xaa>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fd5c 	bl	800aea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a2d      	ldr	r2, [pc, #180]	@ (800a4a4 <HAL_TIM_PWM_Start+0x174>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d004      	beq.n	800a3fc <HAL_TIM_PWM_Start+0xcc>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a2c      	ldr	r2, [pc, #176]	@ (800a4a8 <HAL_TIM_PWM_Start+0x178>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d101      	bne.n	800a400 <HAL_TIM_PWM_Start+0xd0>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e000      	b.n	800a402 <HAL_TIM_PWM_Start+0xd2>
 800a400:	2300      	movs	r3, #0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d007      	beq.n	800a416 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a414:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a22      	ldr	r2, [pc, #136]	@ (800a4a4 <HAL_TIM_PWM_Start+0x174>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d022      	beq.n	800a466 <HAL_TIM_PWM_Start+0x136>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a428:	d01d      	beq.n	800a466 <HAL_TIM_PWM_Start+0x136>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a1f      	ldr	r2, [pc, #124]	@ (800a4ac <HAL_TIM_PWM_Start+0x17c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d018      	beq.n	800a466 <HAL_TIM_PWM_Start+0x136>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a1d      	ldr	r2, [pc, #116]	@ (800a4b0 <HAL_TIM_PWM_Start+0x180>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d013      	beq.n	800a466 <HAL_TIM_PWM_Start+0x136>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a1c      	ldr	r2, [pc, #112]	@ (800a4b4 <HAL_TIM_PWM_Start+0x184>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d00e      	beq.n	800a466 <HAL_TIM_PWM_Start+0x136>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a16      	ldr	r2, [pc, #88]	@ (800a4a8 <HAL_TIM_PWM_Start+0x178>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d009      	beq.n	800a466 <HAL_TIM_PWM_Start+0x136>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a18      	ldr	r2, [pc, #96]	@ (800a4b8 <HAL_TIM_PWM_Start+0x188>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d004      	beq.n	800a466 <HAL_TIM_PWM_Start+0x136>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a16      	ldr	r2, [pc, #88]	@ (800a4bc <HAL_TIM_PWM_Start+0x18c>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d111      	bne.n	800a48a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b06      	cmp	r3, #6
 800a476:	d010      	beq.n	800a49a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f042 0201 	orr.w	r2, r2, #1
 800a486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a488:	e007      	b.n	800a49a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f042 0201 	orr.w	r2, r2, #1
 800a498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	40010000 	.word	0x40010000
 800a4a8:	40010400 	.word	0x40010400
 800a4ac:	40000400 	.word	0x40000400
 800a4b0:	40000800 	.word	0x40000800
 800a4b4:	40000c00 	.word	0x40000c00
 800a4b8:	40014000 	.word	0x40014000
 800a4bc:	40001800 	.word	0x40001800

0800a4c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 fce4 	bl	800aea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a2e      	ldr	r2, [pc, #184]	@ (800a598 <HAL_TIM_PWM_Stop+0xd8>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d004      	beq.n	800a4ec <HAL_TIM_PWM_Stop+0x2c>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a2d      	ldr	r2, [pc, #180]	@ (800a59c <HAL_TIM_PWM_Stop+0xdc>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d101      	bne.n	800a4f0 <HAL_TIM_PWM_Stop+0x30>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <HAL_TIM_PWM_Stop+0x32>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d017      	beq.n	800a526 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6a1a      	ldr	r2, [r3, #32]
 800a4fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a500:	4013      	ands	r3, r2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10f      	bne.n	800a526 <HAL_TIM_PWM_Stop+0x66>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6a1a      	ldr	r2, [r3, #32]
 800a50c:	f240 4344 	movw	r3, #1092	@ 0x444
 800a510:	4013      	ands	r3, r2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d107      	bne.n	800a526 <HAL_TIM_PWM_Stop+0x66>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a524:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6a1a      	ldr	r2, [r3, #32]
 800a52c:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a530:	4013      	ands	r3, r2
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10f      	bne.n	800a556 <HAL_TIM_PWM_Stop+0x96>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6a1a      	ldr	r2, [r3, #32]
 800a53c:	f240 4344 	movw	r3, #1092	@ 0x444
 800a540:	4013      	ands	r3, r2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d107      	bne.n	800a556 <HAL_TIM_PWM_Stop+0x96>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0201 	bic.w	r2, r2, #1
 800a554:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d104      	bne.n	800a566 <HAL_TIM_PWM_Stop+0xa6>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a564:	e013      	b.n	800a58e <HAL_TIM_PWM_Stop+0xce>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b04      	cmp	r3, #4
 800a56a:	d104      	bne.n	800a576 <HAL_TIM_PWM_Stop+0xb6>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a574:	e00b      	b.n	800a58e <HAL_TIM_PWM_Stop+0xce>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d104      	bne.n	800a586 <HAL_TIM_PWM_Stop+0xc6>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a584:	e003      	b.n	800a58e <HAL_TIM_PWM_Stop+0xce>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	40010000 	.word	0x40010000
 800a59c:	40010400 	.word	0x40010400

0800a5a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d101      	bne.n	800a5be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e0ae      	b.n	800a71c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2b0c      	cmp	r3, #12
 800a5ca:	f200 809f 	bhi.w	800a70c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a5ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d4:	0800a609 	.word	0x0800a609
 800a5d8:	0800a70d 	.word	0x0800a70d
 800a5dc:	0800a70d 	.word	0x0800a70d
 800a5e0:	0800a70d 	.word	0x0800a70d
 800a5e4:	0800a649 	.word	0x0800a649
 800a5e8:	0800a70d 	.word	0x0800a70d
 800a5ec:	0800a70d 	.word	0x0800a70d
 800a5f0:	0800a70d 	.word	0x0800a70d
 800a5f4:	0800a68b 	.word	0x0800a68b
 800a5f8:	0800a70d 	.word	0x0800a70d
 800a5fc:	0800a70d 	.word	0x0800a70d
 800a600:	0800a70d 	.word	0x0800a70d
 800a604:	0800a6cb 	.word	0x0800a6cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68b9      	ldr	r1, [r7, #8]
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 f9fc 	bl	800aa0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0208 	orr.w	r2, r2, #8
 800a622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f022 0204 	bic.w	r2, r2, #4
 800a632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6999      	ldr	r1, [r3, #24]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	691a      	ldr	r2, [r3, #16]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	619a      	str	r2, [r3, #24]
      break;
 800a646:	e064      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68b9      	ldr	r1, [r7, #8]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fa4c 	bl	800aaec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699a      	ldr	r2, [r3, #24]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699a      	ldr	r2, [r3, #24]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6999      	ldr	r1, [r3, #24]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	021a      	lsls	r2, r3, #8
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	430a      	orrs	r2, r1
 800a686:	619a      	str	r2, [r3, #24]
      break;
 800a688:	e043      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68b9      	ldr	r1, [r7, #8]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 faa1 	bl	800abd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69da      	ldr	r2, [r3, #28]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f042 0208 	orr.w	r2, r2, #8
 800a6a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	69da      	ldr	r2, [r3, #28]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0204 	bic.w	r2, r2, #4
 800a6b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	69d9      	ldr	r1, [r3, #28]
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	691a      	ldr	r2, [r3, #16]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	61da      	str	r2, [r3, #28]
      break;
 800a6c8:	e023      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68b9      	ldr	r1, [r7, #8]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 faf5 	bl	800acc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	69da      	ldr	r2, [r3, #28]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	69da      	ldr	r2, [r3, #28]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	69d9      	ldr	r1, [r3, #28]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	021a      	lsls	r2, r3, #8
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	61da      	str	r2, [r3, #28]
      break;
 800a70a:	e002      	b.n	800a712 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	75fb      	strb	r3, [r7, #23]
      break;
 800a710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d101      	bne.n	800a740 <HAL_TIM_ConfigClockSource+0x1c>
 800a73c:	2302      	movs	r3, #2
 800a73e:	e0b4      	b.n	800a8aa <HAL_TIM_ConfigClockSource+0x186>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2202      	movs	r2, #2
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a75e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a778:	d03e      	beq.n	800a7f8 <HAL_TIM_ConfigClockSource+0xd4>
 800a77a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a77e:	f200 8087 	bhi.w	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a786:	f000 8086 	beq.w	800a896 <HAL_TIM_ConfigClockSource+0x172>
 800a78a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a78e:	d87f      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a790:	2b70      	cmp	r3, #112	@ 0x70
 800a792:	d01a      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0xa6>
 800a794:	2b70      	cmp	r3, #112	@ 0x70
 800a796:	d87b      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a798:	2b60      	cmp	r3, #96	@ 0x60
 800a79a:	d050      	beq.n	800a83e <HAL_TIM_ConfigClockSource+0x11a>
 800a79c:	2b60      	cmp	r3, #96	@ 0x60
 800a79e:	d877      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a0:	2b50      	cmp	r3, #80	@ 0x50
 800a7a2:	d03c      	beq.n	800a81e <HAL_TIM_ConfigClockSource+0xfa>
 800a7a4:	2b50      	cmp	r3, #80	@ 0x50
 800a7a6:	d873      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a8:	2b40      	cmp	r3, #64	@ 0x40
 800a7aa:	d058      	beq.n	800a85e <HAL_TIM_ConfigClockSource+0x13a>
 800a7ac:	2b40      	cmp	r3, #64	@ 0x40
 800a7ae:	d86f      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7b0:	2b30      	cmp	r3, #48	@ 0x30
 800a7b2:	d064      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x15a>
 800a7b4:	2b30      	cmp	r3, #48	@ 0x30
 800a7b6:	d86b      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d060      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x15a>
 800a7bc:	2b20      	cmp	r3, #32
 800a7be:	d867      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d05c      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x15a>
 800a7c4:	2b10      	cmp	r3, #16
 800a7c6:	d05a      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x15a>
 800a7c8:	e062      	b.n	800a890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7da:	f000 fb41 	bl	800ae60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a7ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	609a      	str	r2, [r3, #8]
      break;
 800a7f6:	e04f      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a808:	f000 fb2a 	bl	800ae60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689a      	ldr	r2, [r3, #8]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a81a:	609a      	str	r2, [r3, #8]
      break;
 800a81c:	e03c      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a82a:	461a      	mov	r2, r3
 800a82c:	f000 fa9e 	bl	800ad6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2150      	movs	r1, #80	@ 0x50
 800a836:	4618      	mov	r0, r3
 800a838:	f000 faf7 	bl	800ae2a <TIM_ITRx_SetConfig>
      break;
 800a83c:	e02c      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a84a:	461a      	mov	r2, r3
 800a84c:	f000 fabd 	bl	800adca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2160      	movs	r1, #96	@ 0x60
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fae7 	bl	800ae2a <TIM_ITRx_SetConfig>
      break;
 800a85c:	e01c      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a86a:	461a      	mov	r2, r3
 800a86c:	f000 fa7e 	bl	800ad6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2140      	movs	r1, #64	@ 0x40
 800a876:	4618      	mov	r0, r3
 800a878:	f000 fad7 	bl	800ae2a <TIM_ITRx_SetConfig>
      break;
 800a87c:	e00c      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4619      	mov	r1, r3
 800a888:	4610      	mov	r0, r2
 800a88a:	f000 face 	bl	800ae2a <TIM_ITRx_SetConfig>
      break;
 800a88e:	e003      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	73fb      	strb	r3, [r7, #15]
      break;
 800a894:	e000      	b.n	800a898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a46      	ldr	r2, [pc, #280]	@ (800a9e0 <TIM_Base_SetConfig+0x12c>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d013      	beq.n	800a8f4 <TIM_Base_SetConfig+0x40>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8d2:	d00f      	beq.n	800a8f4 <TIM_Base_SetConfig+0x40>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a43      	ldr	r2, [pc, #268]	@ (800a9e4 <TIM_Base_SetConfig+0x130>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d00b      	beq.n	800a8f4 <TIM_Base_SetConfig+0x40>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a42      	ldr	r2, [pc, #264]	@ (800a9e8 <TIM_Base_SetConfig+0x134>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d007      	beq.n	800a8f4 <TIM_Base_SetConfig+0x40>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a41      	ldr	r2, [pc, #260]	@ (800a9ec <TIM_Base_SetConfig+0x138>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d003      	beq.n	800a8f4 <TIM_Base_SetConfig+0x40>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a40      	ldr	r2, [pc, #256]	@ (800a9f0 <TIM_Base_SetConfig+0x13c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d108      	bne.n	800a906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a35      	ldr	r2, [pc, #212]	@ (800a9e0 <TIM_Base_SetConfig+0x12c>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d02b      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a914:	d027      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a32      	ldr	r2, [pc, #200]	@ (800a9e4 <TIM_Base_SetConfig+0x130>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d023      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a31      	ldr	r2, [pc, #196]	@ (800a9e8 <TIM_Base_SetConfig+0x134>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d01f      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a30      	ldr	r2, [pc, #192]	@ (800a9ec <TIM_Base_SetConfig+0x138>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d01b      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a2f      	ldr	r2, [pc, #188]	@ (800a9f0 <TIM_Base_SetConfig+0x13c>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d017      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a2e      	ldr	r2, [pc, #184]	@ (800a9f4 <TIM_Base_SetConfig+0x140>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d013      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a2d      	ldr	r2, [pc, #180]	@ (800a9f8 <TIM_Base_SetConfig+0x144>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00f      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a2c      	ldr	r2, [pc, #176]	@ (800a9fc <TIM_Base_SetConfig+0x148>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d00b      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a2b      	ldr	r2, [pc, #172]	@ (800aa00 <TIM_Base_SetConfig+0x14c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d007      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a2a      	ldr	r2, [pc, #168]	@ (800aa04 <TIM_Base_SetConfig+0x150>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d003      	beq.n	800a966 <TIM_Base_SetConfig+0xb2>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a29      	ldr	r2, [pc, #164]	@ (800aa08 <TIM_Base_SetConfig+0x154>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d108      	bne.n	800a978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a96c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	4313      	orrs	r3, r2
 800a984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	689a      	ldr	r2, [r3, #8]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a10      	ldr	r2, [pc, #64]	@ (800a9e0 <TIM_Base_SetConfig+0x12c>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d003      	beq.n	800a9ac <TIM_Base_SetConfig+0xf8>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a12      	ldr	r2, [pc, #72]	@ (800a9f0 <TIM_Base_SetConfig+0x13c>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d103      	bne.n	800a9b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	691a      	ldr	r2, [r3, #16]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d105      	bne.n	800a9d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f023 0201 	bic.w	r2, r3, #1
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	611a      	str	r2, [r3, #16]
  }
}
 800a9d2:	bf00      	nop
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	40010000 	.word	0x40010000
 800a9e4:	40000400 	.word	0x40000400
 800a9e8:	40000800 	.word	0x40000800
 800a9ec:	40000c00 	.word	0x40000c00
 800a9f0:	40010400 	.word	0x40010400
 800a9f4:	40014000 	.word	0x40014000
 800a9f8:	40014400 	.word	0x40014400
 800a9fc:	40014800 	.word	0x40014800
 800aa00:	40001800 	.word	0x40001800
 800aa04:	40001c00 	.word	0x40001c00
 800aa08:	40002000 	.word	0x40002000

0800aa0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	f023 0201 	bic.w	r2, r3, #1
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 0303 	bic.w	r3, r3, #3
 800aa42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f023 0302 	bic.w	r3, r3, #2
 800aa54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a20      	ldr	r2, [pc, #128]	@ (800aae4 <TIM_OC1_SetConfig+0xd8>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d003      	beq.n	800aa70 <TIM_OC1_SetConfig+0x64>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a1f      	ldr	r2, [pc, #124]	@ (800aae8 <TIM_OC1_SetConfig+0xdc>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d10c      	bne.n	800aa8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	f023 0308 	bic.w	r3, r3, #8
 800aa76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f023 0304 	bic.w	r3, r3, #4
 800aa88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a15      	ldr	r2, [pc, #84]	@ (800aae4 <TIM_OC1_SetConfig+0xd8>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d003      	beq.n	800aa9a <TIM_OC1_SetConfig+0x8e>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a14      	ldr	r2, [pc, #80]	@ (800aae8 <TIM_OC1_SetConfig+0xdc>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d111      	bne.n	800aabe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aaa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aaa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	621a      	str	r2, [r3, #32]
}
 800aad8:	bf00      	nop
 800aada:	371c      	adds	r7, #28
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	40010000 	.word	0x40010000
 800aae8:	40010400 	.word	0x40010400

0800aaec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	f023 0210 	bic.w	r2, r3, #16
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f023 0320 	bic.w	r3, r3, #32
 800ab36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	011b      	lsls	r3, r3, #4
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a22      	ldr	r2, [pc, #136]	@ (800abd0 <TIM_OC2_SetConfig+0xe4>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d003      	beq.n	800ab54 <TIM_OC2_SetConfig+0x68>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a21      	ldr	r2, [pc, #132]	@ (800abd4 <TIM_OC2_SetConfig+0xe8>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d10d      	bne.n	800ab70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	011b      	lsls	r3, r3, #4
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a17      	ldr	r2, [pc, #92]	@ (800abd0 <TIM_OC2_SetConfig+0xe4>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d003      	beq.n	800ab80 <TIM_OC2_SetConfig+0x94>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a16      	ldr	r2, [pc, #88]	@ (800abd4 <TIM_OC2_SetConfig+0xe8>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d113      	bne.n	800aba8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	621a      	str	r2, [r3, #32]
}
 800abc2:	bf00      	nop
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	40010000 	.word	0x40010000
 800abd4:	40010400 	.word	0x40010400

0800abd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 0303 	bic.w	r3, r3, #3
 800ac0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	021b      	lsls	r3, r3, #8
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a21      	ldr	r2, [pc, #132]	@ (800acb8 <TIM_OC3_SetConfig+0xe0>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d003      	beq.n	800ac3e <TIM_OC3_SetConfig+0x66>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a20      	ldr	r2, [pc, #128]	@ (800acbc <TIM_OC3_SetConfig+0xe4>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d10d      	bne.n	800ac5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	021b      	lsls	r3, r3, #8
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a16      	ldr	r2, [pc, #88]	@ (800acb8 <TIM_OC3_SetConfig+0xe0>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d003      	beq.n	800ac6a <TIM_OC3_SetConfig+0x92>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a15      	ldr	r2, [pc, #84]	@ (800acbc <TIM_OC3_SetConfig+0xe4>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d113      	bne.n	800ac92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	011b      	lsls	r3, r3, #4
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	621a      	str	r2, [r3, #32]
}
 800acac:	bf00      	nop
 800acae:	371c      	adds	r7, #28
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	40010000 	.word	0x40010000
 800acbc:	40010400 	.word	0x40010400

0800acc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a1b      	ldr	r3, [r3, #32]
 800acce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	021b      	lsls	r3, r3, #8
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	031b      	lsls	r3, r3, #12
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a12      	ldr	r2, [pc, #72]	@ (800ad64 <TIM_OC4_SetConfig+0xa4>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d003      	beq.n	800ad28 <TIM_OC4_SetConfig+0x68>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a11      	ldr	r2, [pc, #68]	@ (800ad68 <TIM_OC4_SetConfig+0xa8>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d109      	bne.n	800ad3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	019b      	lsls	r3, r3, #6
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	621a      	str	r2, [r3, #32]
}
 800ad56:	bf00      	nop
 800ad58:	371c      	adds	r7, #28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	40010000 	.word	0x40010000
 800ad68:	40010400 	.word	0x40010400

0800ad6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6a1b      	ldr	r3, [r3, #32]
 800ad7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	f023 0201 	bic.w	r2, r3, #1
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	011b      	lsls	r3, r3, #4
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f023 030a 	bic.w	r3, r3, #10
 800ada8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	4313      	orrs	r3, r2
 800adb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	621a      	str	r2, [r3, #32]
}
 800adbe:	bf00      	nop
 800adc0:	371c      	adds	r7, #28
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adca:	b480      	push	{r7}
 800adcc:	b087      	sub	sp, #28
 800adce:	af00      	add	r7, sp, #0
 800add0:	60f8      	str	r0, [r7, #12]
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6a1b      	ldr	r3, [r3, #32]
 800ade0:	f023 0210 	bic.w	r2, r3, #16
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800adf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	031b      	lsls	r3, r3, #12
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ae06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	621a      	str	r2, [r3, #32]
}
 800ae1e:	bf00      	nop
 800ae20:	371c      	adds	r7, #28
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	f043 0307 	orr.w	r3, r3, #7
 800ae4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	609a      	str	r2, [r3, #8]
}
 800ae54:	bf00      	nop
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	021a      	lsls	r2, r3, #8
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	431a      	orrs	r2, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	609a      	str	r2, [r3, #8]
}
 800ae94:	bf00      	nop
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f003 031f 	and.w	r3, r3, #31
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6a1a      	ldr	r2, [r3, #32]
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	43db      	mvns	r3, r3
 800aec2:	401a      	ands	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6a1a      	ldr	r2, [r3, #32]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f003 031f 	and.w	r3, r3, #31
 800aed2:	6879      	ldr	r1, [r7, #4]
 800aed4:	fa01 f303 	lsl.w	r3, r1, r3
 800aed8:	431a      	orrs	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	621a      	str	r2, [r3, #32]
}
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d101      	bne.n	800af04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af00:	2302      	movs	r3, #2
 800af02:	e05a      	b.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2202      	movs	r2, #2
 800af10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	4313      	orrs	r3, r2
 800af34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a21      	ldr	r2, [pc, #132]	@ (800afc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d022      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af50:	d01d      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a1d      	ldr	r2, [pc, #116]	@ (800afcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d018      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a1b      	ldr	r2, [pc, #108]	@ (800afd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d013      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a1a      	ldr	r2, [pc, #104]	@ (800afd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d00e      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a18      	ldr	r2, [pc, #96]	@ (800afd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d009      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a17      	ldr	r2, [pc, #92]	@ (800afdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d004      	beq.n	800af8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a15      	ldr	r2, [pc, #84]	@ (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d10c      	bne.n	800afa8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	40010000 	.word	0x40010000
 800afcc:	40000400 	.word	0x40000400
 800afd0:	40000800 	.word	0x40000800
 800afd4:	40000c00 	.word	0x40000c00
 800afd8:	40010400 	.word	0x40010400
 800afdc:	40014000 	.word	0x40014000
 800afe0:	40001800 	.word	0x40001800

0800afe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d101      	bne.n	800b000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800affc:	2302      	movs	r3, #2
 800affe:	e03d      	b.n	800b07c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	4313      	orrs	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	4313      	orrs	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	69db      	ldr	r3, [r3, #28]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e042      	b.n	800b120 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d106      	bne.n	800b0b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7fa fede 	bl	8005e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2224      	movs	r2, #36	@ 0x24
 800b0b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68da      	ldr	r2, [r3, #12]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b0ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 ff77 	bl	800bfc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	691a      	ldr	r2, [r3, #16]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	695a      	ldr	r2, [r3, #20]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2220      	movs	r2, #32
 800b10c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2220      	movs	r2, #32
 800b114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08c      	sub	sp, #48	@ 0x30
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	4613      	mov	r3, r2
 800b134:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b20      	cmp	r3, #32
 800b140:	d156      	bne.n	800b1f0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <HAL_UART_Transmit_DMA+0x26>
 800b148:	88fb      	ldrh	r3, [r7, #6]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e04f      	b.n	800b1f2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	88fa      	ldrh	r2, [r7, #6]
 800b15c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	88fa      	ldrh	r2, [r7, #6]
 800b162:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2221      	movs	r2, #33	@ 0x21
 800b16e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b176:	4a21      	ldr	r2, [pc, #132]	@ (800b1fc <HAL_UART_Transmit_DMA+0xd4>)
 800b178:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17e:	4a20      	ldr	r2, [pc, #128]	@ (800b200 <HAL_UART_Transmit_DMA+0xd8>)
 800b180:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b186:	4a1f      	ldr	r2, [pc, #124]	@ (800b204 <HAL_UART_Transmit_DMA+0xdc>)
 800b188:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b18e:	2200      	movs	r2, #0
 800b190:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b192:	f107 0308 	add.w	r3, r7, #8
 800b196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19e:	6819      	ldr	r1, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3304      	adds	r3, #4
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	88fb      	ldrh	r3, [r7, #6]
 800b1aa:	f7fc fadf 	bl	800776c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b1b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3314      	adds	r3, #20
 800b1be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	e853 3f00 	ldrex	r3, [r3]
 800b1c6:	617b      	str	r3, [r7, #20]
   return(result);
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3314      	adds	r3, #20
 800b1d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b1da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1dc:	6a39      	ldr	r1, [r7, #32]
 800b1de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1e0:	e841 2300 	strex	r3, r2, [r1]
 800b1e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1e5      	bne.n	800b1b8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e000      	b.n	800b1f2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b1f0:	2302      	movs	r3, #2
  }
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3730      	adds	r7, #48	@ 0x30
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	0800b84d 	.word	0x0800b84d
 800b200:	0800b8e7 	.word	0x0800b8e7
 800b204:	0800ba6b 	.word	0x0800ba6b

0800b208 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08c      	sub	sp, #48	@ 0x30
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b20      	cmp	r3, #32
 800b220:	d14a      	bne.n	800b2b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b228:	88fb      	ldrh	r3, [r7, #6]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e043      	b.n	800b2ba <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2201      	movs	r2, #1
 800b236:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b23e:	88fb      	ldrh	r3, [r7, #6]
 800b240:	461a      	mov	r2, r3
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f000 fc5b 	bl	800bb00 <UART_Start_Receive_DMA>
 800b24a:	4603      	mov	r3, r0
 800b24c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b254:	2b00      	cmp	r3, #0
 800b256:	d12c      	bne.n	800b2b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d125      	bne.n	800b2ac <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b260:	2300      	movs	r3, #0
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	613b      	str	r3, [r7, #16]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	613b      	str	r3, [r7, #16]
 800b274:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	330c      	adds	r3, #12
 800b27c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	e853 3f00 	ldrex	r3, [r3]
 800b284:	617b      	str	r3, [r7, #20]
   return(result);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f043 0310 	orr.w	r3, r3, #16
 800b28c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	330c      	adds	r3, #12
 800b294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b296:	627a      	str	r2, [r7, #36]	@ 0x24
 800b298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29a:	6a39      	ldr	r1, [r7, #32]
 800b29c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b29e:	e841 2300 	strex	r3, r2, [r1]
 800b2a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1e5      	bne.n	800b276 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b2aa:	e002      	b.n	800b2b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b2b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2b6:	e000      	b.n	800b2ba <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b2b8:	2302      	movs	r3, #2
  }
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3730      	adds	r7, #48	@ 0x30
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
	...

0800b2c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b0ba      	sub	sp, #232	@ 0xe8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2fa:	f003 030f 	and.w	r3, r3, #15
 800b2fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10f      	bne.n	800b32a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b30e:	f003 0320 	and.w	r3, r3, #32
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <HAL_UART_IRQHandler+0x66>
 800b316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b31a:	f003 0320 	and.w	r3, r3, #32
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fd8d 	bl	800be42 <UART_Receive_IT>
      return;
 800b328:	e25b      	b.n	800b7e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b32a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f000 80de 	beq.w	800b4f0 <HAL_UART_IRQHandler+0x22c>
 800b334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d106      	bne.n	800b34e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b344:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f000 80d1 	beq.w	800b4f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00b      	beq.n	800b372 <HAL_UART_IRQHandler+0xae>
 800b35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b362:	2b00      	cmp	r3, #0
 800b364:	d005      	beq.n	800b372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b36a:	f043 0201 	orr.w	r2, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b376:	f003 0304 	and.w	r3, r3, #4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00b      	beq.n	800b396 <HAL_UART_IRQHandler+0xd2>
 800b37e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	2b00      	cmp	r3, #0
 800b388:	d005      	beq.n	800b396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b38e:	f043 0202 	orr.w	r2, r3, #2
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b39a:	f003 0302 	and.w	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00b      	beq.n	800b3ba <HAL_UART_IRQHandler+0xf6>
 800b3a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3b2:	f043 0204 	orr.w	r2, r3, #4
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3be:	f003 0308 	and.w	r3, r3, #8
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d011      	beq.n	800b3ea <HAL_UART_IRQHandler+0x126>
 800b3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d105      	bne.n	800b3de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b3d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3d6:	f003 0301 	and.w	r3, r3, #1
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d005      	beq.n	800b3ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3e2:	f043 0208 	orr.w	r2, r3, #8
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 81f2 	beq.w	800b7d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3f8:	f003 0320 	and.w	r3, r3, #32
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d008      	beq.n	800b412 <HAL_UART_IRQHandler+0x14e>
 800b400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b404:	f003 0320 	and.w	r3, r3, #32
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fd18 	bl	800be42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b41c:	2b40      	cmp	r3, #64	@ 0x40
 800b41e:	bf0c      	ite	eq
 800b420:	2301      	moveq	r3, #1
 800b422:	2300      	movne	r3, #0
 800b424:	b2db      	uxtb	r3, r3
 800b426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b42e:	f003 0308 	and.w	r3, r3, #8
 800b432:	2b00      	cmp	r3, #0
 800b434:	d103      	bne.n	800b43e <HAL_UART_IRQHandler+0x17a>
 800b436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d04f      	beq.n	800b4de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fc20 	bl	800bc84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b44e:	2b40      	cmp	r3, #64	@ 0x40
 800b450:	d141      	bne.n	800b4d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3314      	adds	r3, #20
 800b458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b460:	e853 3f00 	ldrex	r3, [r3]
 800b464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b46c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	3314      	adds	r3, #20
 800b47a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b47e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b48a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b48e:	e841 2300 	strex	r3, r2, [r1]
 800b492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1d9      	bne.n	800b452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d013      	beq.n	800b4ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4aa:	4a7e      	ldr	r2, [pc, #504]	@ (800b6a4 <HAL_UART_IRQHandler+0x3e0>)
 800b4ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fc fa22 	bl	80078fc <HAL_DMA_Abort_IT>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d016      	beq.n	800b4ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4cc:	e00e      	b.n	800b4ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f9b2 	bl	800b838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4d4:	e00a      	b.n	800b4ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f9ae 	bl	800b838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4dc:	e006      	b.n	800b4ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f9aa 	bl	800b838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b4ea:	e175      	b.n	800b7d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ec:	bf00      	nop
    return;
 800b4ee:	e173      	b.n	800b7d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	f040 814f 	bne.w	800b798 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4fe:	f003 0310 	and.w	r3, r3, #16
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 8148 	beq.w	800b798 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b50c:	f003 0310 	and.w	r3, r3, #16
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 8141 	beq.w	800b798 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b516:	2300      	movs	r3, #0
 800b518:	60bb      	str	r3, [r7, #8]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	60bb      	str	r3, [r7, #8]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	60bb      	str	r3, [r7, #8]
 800b52a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b536:	2b40      	cmp	r3, #64	@ 0x40
 800b538:	f040 80b6 	bne.w	800b6a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f000 8145 	beq.w	800b7dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b55a:	429a      	cmp	r2, r3
 800b55c:	f080 813e 	bcs.w	800b7dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b566:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b572:	f000 8088 	beq.w	800b686 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	330c      	adds	r3, #12
 800b57c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b584:	e853 3f00 	ldrex	r3, [r3]
 800b588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b58c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	330c      	adds	r3, #12
 800b59e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b5a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b5a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b5ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b5b2:	e841 2300 	strex	r3, r2, [r1]
 800b5b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b5ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1d9      	bne.n	800b576 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3314      	adds	r3, #20
 800b5c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5cc:	e853 3f00 	ldrex	r3, [r3]
 800b5d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b5d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5d4:	f023 0301 	bic.w	r3, r3, #1
 800b5d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3314      	adds	r3, #20
 800b5e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b5e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b5ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b5ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b5f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1e1      	bne.n	800b5c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3314      	adds	r3, #20
 800b604:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b60e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	3314      	adds	r3, #20
 800b61e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b626:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1e3      	bne.n	800b5fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2220      	movs	r2, #32
 800b63a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	330c      	adds	r3, #12
 800b64a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b64e:	e853 3f00 	ldrex	r3, [r3]
 800b652:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b656:	f023 0310 	bic.w	r3, r3, #16
 800b65a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	330c      	adds	r3, #12
 800b664:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b668:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b66a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b66e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b670:	e841 2300 	strex	r3, r2, [r1]
 800b674:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1e3      	bne.n	800b644 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b680:	4618      	mov	r0, r3
 800b682:	f7fc f8cb 	bl	800781c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2202      	movs	r2, #2
 800b68a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b694:	b29b      	uxth	r3, r3
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	b29b      	uxth	r3, r3
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7f6 fba5 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6a2:	e09b      	b.n	800b7dc <HAL_UART_IRQHandler+0x518>
 800b6a4:	0800bd4b 	.word	0x0800bd4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 808e 	beq.w	800b7e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b6c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 8089 	beq.w	800b7e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	330c      	adds	r3, #12
 800b6d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	330c      	adds	r3, #12
 800b6ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b6f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800b6f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e3      	bne.n	800b6ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3314      	adds	r3, #20
 800b70c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	623b      	str	r3, [r7, #32]
   return(result);
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	f023 0301 	bic.w	r3, r3, #1
 800b71c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3314      	adds	r3, #20
 800b726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b72a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b72c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e3      	bne.n	800b706 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	330c      	adds	r3, #12
 800b752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	e853 3f00 	ldrex	r3, [r3]
 800b75a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f023 0310 	bic.w	r3, r3, #16
 800b762:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	330c      	adds	r3, #12
 800b76c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b770:	61fa      	str	r2, [r7, #28]
 800b772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	69b9      	ldr	r1, [r7, #24]
 800b776:	69fa      	ldr	r2, [r7, #28]
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	617b      	str	r3, [r7, #20]
   return(result);
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e3      	bne.n	800b74c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2202      	movs	r2, #2
 800b788:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b78a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7f6 fb2b 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b796:	e023      	b.n	800b7e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b79c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d009      	beq.n	800b7b8 <HAL_UART_IRQHandler+0x4f4>
 800b7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fade 	bl	800bd72 <UART_Transmit_IT>
    return;
 800b7b6:	e014      	b.n	800b7e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00e      	beq.n	800b7e2 <HAL_UART_IRQHandler+0x51e>
 800b7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d008      	beq.n	800b7e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fb1e 	bl	800be12 <UART_EndTransmit_IT>
    return;
 800b7d6:	e004      	b.n	800b7e2 <HAL_UART_IRQHandler+0x51e>
    return;
 800b7d8:	bf00      	nop
 800b7da:	e002      	b.n	800b7e2 <HAL_UART_IRQHandler+0x51e>
      return;
 800b7dc:	bf00      	nop
 800b7de:	e000      	b.n	800b7e2 <HAL_UART_IRQHandler+0x51e>
      return;
 800b7e0:	bf00      	nop
  }
}
 800b7e2:	37e8      	adds	r7, #232	@ 0xe8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b090      	sub	sp, #64	@ 0x40
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b864:	2b00      	cmp	r3, #0
 800b866:	d137      	bne.n	800b8d8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b86a:	2200      	movs	r2, #0
 800b86c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b86e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3314      	adds	r3, #20
 800b874:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	623b      	str	r3, [r7, #32]
   return(result);
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b884:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3314      	adds	r3, #20
 800b88c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b88e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b896:	e841 2300 	strex	r3, r2, [r1]
 800b89a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e5      	bne.n	800b86e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	330c      	adds	r3, #12
 800b8a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	e853 3f00 	ldrex	r3, [r3]
 800b8b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	330c      	adds	r3, #12
 800b8c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8c2:	61fa      	str	r2, [r7, #28]
 800b8c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c6:	69b9      	ldr	r1, [r7, #24]
 800b8c8:	69fa      	ldr	r2, [r7, #28]
 800b8ca:	e841 2300 	strex	r3, r2, [r1]
 800b8ce:	617b      	str	r3, [r7, #20]
   return(result);
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1e5      	bne.n	800b8a2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8d6:	e002      	b.n	800b8de <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b8d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b8da:	f7ff ff85 	bl	800b7e8 <HAL_UART_TxCpltCallback>
}
 800b8de:	bf00      	nop
 800b8e0:	3740      	adds	r7, #64	@ 0x40
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff ff81 	bl	800b7fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b09c      	sub	sp, #112	@ 0x70
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b90e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d172      	bne.n	800ba04 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b91e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b920:	2200      	movs	r2, #0
 800b922:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	330c      	adds	r3, #12
 800b92a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b936:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b93a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b93c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	330c      	adds	r3, #12
 800b942:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b944:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b946:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b94a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e5      	bne.n	800b924 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3314      	adds	r3, #20
 800b95e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b96a:	f023 0301 	bic.w	r3, r3, #1
 800b96e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3314      	adds	r3, #20
 800b976:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b978:	647a      	str	r2, [r7, #68]	@ 0x44
 800b97a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b97e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e5      	bne.n	800b958 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b98c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3314      	adds	r3, #20
 800b992:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	623b      	str	r3, [r7, #32]
   return(result);
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9a2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3314      	adds	r3, #20
 800b9aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b9ac:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e5      	bne.n	800b98c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b9c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d119      	bne.n	800ba04 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	330c      	adds	r3, #12
 800b9d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	e853 3f00 	ldrex	r3, [r3]
 800b9de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f023 0310 	bic.w	r3, r3, #16
 800b9e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	330c      	adds	r3, #12
 800b9ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b9f0:	61fa      	str	r2, [r7, #28]
 800b9f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	69b9      	ldr	r1, [r7, #24]
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e5      	bne.n	800b9d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba06:	2200      	movs	r2, #0
 800ba08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d106      	bne.n	800ba20 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba16:	4619      	mov	r1, r3
 800ba18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba1a:	f7f6 f9e7 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba1e:	e002      	b.n	800ba26 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ba20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba22:	f7ff fef5 	bl	800b810 <HAL_UART_RxCpltCallback>
}
 800ba26:	bf00      	nop
 800ba28:	3770      	adds	r7, #112	@ 0x70
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba3a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d108      	bne.n	800ba5c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba4e:	085b      	lsrs	r3, r3, #1
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	4619      	mov	r1, r3
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f7f6 f9c9 	bl	8001dec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba5a:	e002      	b.n	800ba62 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff fee1 	bl	800b824 <HAL_UART_RxHalfCpltCallback>
}
 800ba62:	bf00      	nop
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba86:	2b80      	cmp	r3, #128	@ 0x80
 800ba88:	bf0c      	ite	eq
 800ba8a:	2301      	moveq	r3, #1
 800ba8c:	2300      	movne	r3, #0
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b21      	cmp	r3, #33	@ 0x21
 800ba9c:	d108      	bne.n	800bab0 <UART_DMAError+0x46>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d005      	beq.n	800bab0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2200      	movs	r2, #0
 800baa8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800baaa:	68b8      	ldr	r0, [r7, #8]
 800baac:	f000 f8c2 	bl	800bc34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baba:	2b40      	cmp	r3, #64	@ 0x40
 800babc:	bf0c      	ite	eq
 800babe:	2301      	moveq	r3, #1
 800bac0:	2300      	movne	r3, #0
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b22      	cmp	r3, #34	@ 0x22
 800bad0:	d108      	bne.n	800bae4 <UART_DMAError+0x7a>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d005      	beq.n	800bae4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2200      	movs	r2, #0
 800badc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800bade:	68b8      	ldr	r0, [r7, #8]
 800bae0:	f000 f8d0 	bl	800bc84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bae8:	f043 0210 	orr.w	r2, r3, #16
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800baf0:	68b8      	ldr	r0, [r7, #8]
 800baf2:	f7ff fea1 	bl	800b838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baf6:	bf00      	nop
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b098      	sub	sp, #96	@ 0x60
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	88fa      	ldrh	r2, [r7, #6]
 800bb18:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2222      	movs	r2, #34	@ 0x22
 800bb24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb2c:	4a3e      	ldr	r2, [pc, #248]	@ (800bc28 <UART_Start_Receive_DMA+0x128>)
 800bb2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb34:	4a3d      	ldr	r2, [pc, #244]	@ (800bc2c <UART_Start_Receive_DMA+0x12c>)
 800bb36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb3c:	4a3c      	ldr	r2, [pc, #240]	@ (800bc30 <UART_Start_Receive_DMA+0x130>)
 800bb3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb44:	2200      	movs	r2, #0
 800bb46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bb48:	f107 0308 	add.w	r3, r7, #8
 800bb4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3304      	adds	r3, #4
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	88fb      	ldrh	r3, [r7, #6]
 800bb60:	f7fb fe04 	bl	800776c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bb64:	2300      	movs	r3, #0
 800bb66:	613b      	str	r3, [r7, #16]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	613b      	str	r3, [r7, #16]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	613b      	str	r3, [r7, #16]
 800bb78:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d019      	beq.n	800bbb6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	330c      	adds	r3, #12
 800bb88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb8c:	e853 3f00 	ldrex	r3, [r3]
 800bb90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb98:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	330c      	adds	r3, #12
 800bba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bba2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bba4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bba8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbaa:	e841 2300 	strex	r3, r2, [r1]
 800bbae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bbb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e5      	bne.n	800bb82 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3314      	adds	r3, #20
 800bbbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc8:	f043 0301 	orr.w	r3, r3, #1
 800bbcc:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3314      	adds	r3, #20
 800bbd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bbd6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bbd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bbdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e5      	bne.n	800bbb6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3314      	adds	r3, #20
 800bbf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc00:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3314      	adds	r3, #20
 800bc08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc0a:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0e:	6a39      	ldr	r1, [r7, #32]
 800bc10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc12:	e841 2300 	strex	r3, r2, [r1]
 800bc16:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1e5      	bne.n	800bbea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3760      	adds	r7, #96	@ 0x60
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	0800b903 	.word	0x0800b903
 800bc2c:	0800ba2f 	.word	0x0800ba2f
 800bc30:	0800ba6b 	.word	0x0800ba6b

0800bc34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b089      	sub	sp, #36	@ 0x24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	330c      	adds	r3, #12
 800bc42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	e853 3f00 	ldrex	r3, [r3]
 800bc4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bc52:	61fb      	str	r3, [r7, #28]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	330c      	adds	r3, #12
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	61ba      	str	r2, [r7, #24]
 800bc5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc60:	6979      	ldr	r1, [r7, #20]
 800bc62:	69ba      	ldr	r2, [r7, #24]
 800bc64:	e841 2300 	strex	r3, r2, [r1]
 800bc68:	613b      	str	r3, [r7, #16]
   return(result);
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1e5      	bne.n	800bc3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bc78:	bf00      	nop
 800bc7a:	3724      	adds	r7, #36	@ 0x24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b095      	sub	sp, #84	@ 0x54
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	330c      	adds	r3, #12
 800bc92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc96:	e853 3f00 	ldrex	r3, [r3]
 800bc9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	330c      	adds	r3, #12
 800bcaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bcac:	643a      	str	r2, [r7, #64]	@ 0x40
 800bcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bcb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bcb4:	e841 2300 	strex	r3, r2, [r1]
 800bcb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e5      	bne.n	800bc8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc8:	6a3b      	ldr	r3, [r7, #32]
 800bcca:	e853 3f00 	ldrex	r3, [r3]
 800bcce:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	f023 0301 	bic.w	r3, r3, #1
 800bcd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	3314      	adds	r3, #20
 800bcde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bce0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce8:	e841 2300 	strex	r3, r2, [r1]
 800bcec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1e5      	bne.n	800bcc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d119      	bne.n	800bd30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	330c      	adds	r3, #12
 800bd02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	f023 0310 	bic.w	r3, r3, #16
 800bd12:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	330c      	adds	r3, #12
 800bd1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd1c:	61ba      	str	r2, [r7, #24]
 800bd1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6979      	ldr	r1, [r7, #20]
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	e841 2300 	strex	r3, r2, [r1]
 800bd28:	613b      	str	r3, [r7, #16]
   return(result);
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e5      	bne.n	800bcfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2220      	movs	r2, #32
 800bd34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bd3e:	bf00      	nop
 800bd40:	3754      	adds	r7, #84	@ 0x54
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f7ff fd67 	bl	800b838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd6a:	bf00      	nop
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b085      	sub	sp, #20
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	2b21      	cmp	r3, #33	@ 0x21
 800bd84:	d13e      	bne.n	800be04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd8e:	d114      	bne.n	800bdba <UART_Transmit_IT+0x48>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d110      	bne.n	800bdba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	1c9a      	adds	r2, r3, #2
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	621a      	str	r2, [r3, #32]
 800bdb8:	e008      	b.n	800bdcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	1c59      	adds	r1, r3, #1
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	6211      	str	r1, [r2, #32]
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10f      	bne.n	800be00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bdee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bdfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	e000      	b.n	800be06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be04:	2302      	movs	r3, #2
  }
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68da      	ldr	r2, [r3, #12]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800be28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2220      	movs	r2, #32
 800be2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fcd8 	bl	800b7e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b08c      	sub	sp, #48	@ 0x30
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b22      	cmp	r3, #34	@ 0x22
 800be54:	f040 80ae 	bne.w	800bfb4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be60:	d117      	bne.n	800be92 <UART_Receive_IT+0x50>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d113      	bne.n	800be92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be72:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be80:	b29a      	uxth	r2, r3
 800be82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8a:	1c9a      	adds	r2, r3, #2
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	629a      	str	r2, [r3, #40]	@ 0x28
 800be90:	e026      	b.n	800bee0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800be98:	2300      	movs	r3, #0
 800be9a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bea4:	d007      	beq.n	800beb6 <UART_Receive_IT+0x74>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10a      	bne.n	800bec4 <UART_Receive_IT+0x82>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d106      	bne.n	800bec4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec0:	701a      	strb	r2, [r3, #0]
 800bec2:	e008      	b.n	800bed6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	3b01      	subs	r3, #1
 800bee8:	b29b      	uxth	r3, r3
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	4619      	mov	r1, r3
 800beee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d15d      	bne.n	800bfb0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68da      	ldr	r2, [r3, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f022 0220 	bic.w	r2, r2, #32
 800bf02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bf12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	695a      	ldr	r2, [r3, #20]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f022 0201 	bic.w	r2, r2, #1
 800bf22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2220      	movs	r2, #32
 800bf28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d135      	bne.n	800bfa6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	330c      	adds	r3, #12
 800bf46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	e853 3f00 	ldrex	r3, [r3]
 800bf4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	f023 0310 	bic.w	r3, r3, #16
 800bf56:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	330c      	adds	r3, #12
 800bf5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf60:	623a      	str	r2, [r7, #32]
 800bf62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf64:	69f9      	ldr	r1, [r7, #28]
 800bf66:	6a3a      	ldr	r2, [r7, #32]
 800bf68:	e841 2300 	strex	r3, r2, [r1]
 800bf6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1e5      	bne.n	800bf40 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0310 	and.w	r3, r3, #16
 800bf7e:	2b10      	cmp	r3, #16
 800bf80:	d10a      	bne.n	800bf98 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf82:	2300      	movs	r3, #0
 800bf84:	60fb      	str	r3, [r7, #12]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	60fb      	str	r3, [r7, #12]
 800bf96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7f5 ff24 	bl	8001dec <HAL_UARTEx_RxEventCallback>
 800bfa4:	e002      	b.n	800bfac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff fc32 	bl	800b810 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	e002      	b.n	800bfb6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	e000      	b.n	800bfb6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bfb4:	2302      	movs	r3, #2
  }
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3730      	adds	r7, #48	@ 0x30
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
	...

0800bfc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfc4:	b0c0      	sub	sp, #256	@ 0x100
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfdc:	68d9      	ldr	r1, [r3, #12]
 800bfde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	ea40 0301 	orr.w	r3, r0, r1
 800bfe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bfea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfee:	689a      	ldr	r2, [r3, #8]
 800bff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	431a      	orrs	r2, r3
 800bff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	431a      	orrs	r2, r3
 800c000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	4313      	orrs	r3, r2
 800c008:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c00c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c018:	f021 010c 	bic.w	r1, r1, #12
 800c01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c026:	430b      	orrs	r3, r1
 800c028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c03a:	6999      	ldr	r1, [r3, #24]
 800c03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	ea40 0301 	orr.w	r3, r0, r1
 800c046:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	4b8f      	ldr	r3, [pc, #572]	@ (800c28c <UART_SetConfig+0x2cc>)
 800c050:	429a      	cmp	r2, r3
 800c052:	d005      	beq.n	800c060 <UART_SetConfig+0xa0>
 800c054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	4b8d      	ldr	r3, [pc, #564]	@ (800c290 <UART_SetConfig+0x2d0>)
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d104      	bne.n	800c06a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c060:	f7fd fd1a 	bl	8009a98 <HAL_RCC_GetPCLK2Freq>
 800c064:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c068:	e003      	b.n	800c072 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c06a:	f7fd fd01 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 800c06e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c07c:	f040 810c 	bne.w	800c298 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c084:	2200      	movs	r2, #0
 800c086:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c08a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c08e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c092:	4622      	mov	r2, r4
 800c094:	462b      	mov	r3, r5
 800c096:	1891      	adds	r1, r2, r2
 800c098:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c09a:	415b      	adcs	r3, r3
 800c09c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c09e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	eb12 0801 	adds.w	r8, r2, r1
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	eb43 0901 	adc.w	r9, r3, r1
 800c0ae:	f04f 0200 	mov.w	r2, #0
 800c0b2:	f04f 0300 	mov.w	r3, #0
 800c0b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c0ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c0be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c0c2:	4690      	mov	r8, r2
 800c0c4:	4699      	mov	r9, r3
 800c0c6:	4623      	mov	r3, r4
 800c0c8:	eb18 0303 	adds.w	r3, r8, r3
 800c0cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c0d0:	462b      	mov	r3, r5
 800c0d2:	eb49 0303 	adc.w	r3, r9, r3
 800c0d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c0da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c0e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c0ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	18db      	adds	r3, r3, r3
 800c0f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	eb42 0303 	adc.w	r3, r2, r3
 800c0fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800c0fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c100:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c104:	f7f4 fd50 	bl	8000ba8 <__aeabi_uldivmod>
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4b61      	ldr	r3, [pc, #388]	@ (800c294 <UART_SetConfig+0x2d4>)
 800c10e:	fba3 2302 	umull	r2, r3, r3, r2
 800c112:	095b      	lsrs	r3, r3, #5
 800c114:	011c      	lsls	r4, r3, #4
 800c116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c11a:	2200      	movs	r2, #0
 800c11c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c120:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c124:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c128:	4642      	mov	r2, r8
 800c12a:	464b      	mov	r3, r9
 800c12c:	1891      	adds	r1, r2, r2
 800c12e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c130:	415b      	adcs	r3, r3
 800c132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c134:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c138:	4641      	mov	r1, r8
 800c13a:	eb12 0a01 	adds.w	sl, r2, r1
 800c13e:	4649      	mov	r1, r9
 800c140:	eb43 0b01 	adc.w	fp, r3, r1
 800c144:	f04f 0200 	mov.w	r2, #0
 800c148:	f04f 0300 	mov.w	r3, #0
 800c14c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c150:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c154:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c158:	4692      	mov	sl, r2
 800c15a:	469b      	mov	fp, r3
 800c15c:	4643      	mov	r3, r8
 800c15e:	eb1a 0303 	adds.w	r3, sl, r3
 800c162:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c166:	464b      	mov	r3, r9
 800c168:	eb4b 0303 	adc.w	r3, fp, r3
 800c16c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c17c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c180:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c184:	460b      	mov	r3, r1
 800c186:	18db      	adds	r3, r3, r3
 800c188:	643b      	str	r3, [r7, #64]	@ 0x40
 800c18a:	4613      	mov	r3, r2
 800c18c:	eb42 0303 	adc.w	r3, r2, r3
 800c190:	647b      	str	r3, [r7, #68]	@ 0x44
 800c192:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c196:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c19a:	f7f4 fd05 	bl	8000ba8 <__aeabi_uldivmod>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4611      	mov	r1, r2
 800c1a4:	4b3b      	ldr	r3, [pc, #236]	@ (800c294 <UART_SetConfig+0x2d4>)
 800c1a6:	fba3 2301 	umull	r2, r3, r3, r1
 800c1aa:	095b      	lsrs	r3, r3, #5
 800c1ac:	2264      	movs	r2, #100	@ 0x64
 800c1ae:	fb02 f303 	mul.w	r3, r2, r3
 800c1b2:	1acb      	subs	r3, r1, r3
 800c1b4:	00db      	lsls	r3, r3, #3
 800c1b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c1ba:	4b36      	ldr	r3, [pc, #216]	@ (800c294 <UART_SetConfig+0x2d4>)
 800c1bc:	fba3 2302 	umull	r2, r3, r3, r2
 800c1c0:	095b      	lsrs	r3, r3, #5
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c1c8:	441c      	add	r4, r3
 800c1ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c1d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c1dc:	4642      	mov	r2, r8
 800c1de:	464b      	mov	r3, r9
 800c1e0:	1891      	adds	r1, r2, r2
 800c1e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c1e4:	415b      	adcs	r3, r3
 800c1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c1ec:	4641      	mov	r1, r8
 800c1ee:	1851      	adds	r1, r2, r1
 800c1f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	414b      	adcs	r3, r1
 800c1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1f8:	f04f 0200 	mov.w	r2, #0
 800c1fc:	f04f 0300 	mov.w	r3, #0
 800c200:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c204:	4659      	mov	r1, fp
 800c206:	00cb      	lsls	r3, r1, #3
 800c208:	4651      	mov	r1, sl
 800c20a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c20e:	4651      	mov	r1, sl
 800c210:	00ca      	lsls	r2, r1, #3
 800c212:	4610      	mov	r0, r2
 800c214:	4619      	mov	r1, r3
 800c216:	4603      	mov	r3, r0
 800c218:	4642      	mov	r2, r8
 800c21a:	189b      	adds	r3, r3, r2
 800c21c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c220:	464b      	mov	r3, r9
 800c222:	460a      	mov	r2, r1
 800c224:	eb42 0303 	adc.w	r3, r2, r3
 800c228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c238:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c23c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c240:	460b      	mov	r3, r1
 800c242:	18db      	adds	r3, r3, r3
 800c244:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c246:	4613      	mov	r3, r2
 800c248:	eb42 0303 	adc.w	r3, r2, r3
 800c24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c24e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c252:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c256:	f7f4 fca7 	bl	8000ba8 <__aeabi_uldivmod>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4b0d      	ldr	r3, [pc, #52]	@ (800c294 <UART_SetConfig+0x2d4>)
 800c260:	fba3 1302 	umull	r1, r3, r3, r2
 800c264:	095b      	lsrs	r3, r3, #5
 800c266:	2164      	movs	r1, #100	@ 0x64
 800c268:	fb01 f303 	mul.w	r3, r1, r3
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	00db      	lsls	r3, r3, #3
 800c270:	3332      	adds	r3, #50	@ 0x32
 800c272:	4a08      	ldr	r2, [pc, #32]	@ (800c294 <UART_SetConfig+0x2d4>)
 800c274:	fba2 2303 	umull	r2, r3, r2, r3
 800c278:	095b      	lsrs	r3, r3, #5
 800c27a:	f003 0207 	and.w	r2, r3, #7
 800c27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4422      	add	r2, r4
 800c286:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c288:	e106      	b.n	800c498 <UART_SetConfig+0x4d8>
 800c28a:	bf00      	nop
 800c28c:	40011000 	.word	0x40011000
 800c290:	40011400 	.word	0x40011400
 800c294:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c29c:	2200      	movs	r2, #0
 800c29e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c2a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c2a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c2aa:	4642      	mov	r2, r8
 800c2ac:	464b      	mov	r3, r9
 800c2ae:	1891      	adds	r1, r2, r2
 800c2b0:	6239      	str	r1, [r7, #32]
 800c2b2:	415b      	adcs	r3, r3
 800c2b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c2ba:	4641      	mov	r1, r8
 800c2bc:	1854      	adds	r4, r2, r1
 800c2be:	4649      	mov	r1, r9
 800c2c0:	eb43 0501 	adc.w	r5, r3, r1
 800c2c4:	f04f 0200 	mov.w	r2, #0
 800c2c8:	f04f 0300 	mov.w	r3, #0
 800c2cc:	00eb      	lsls	r3, r5, #3
 800c2ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c2d2:	00e2      	lsls	r2, r4, #3
 800c2d4:	4614      	mov	r4, r2
 800c2d6:	461d      	mov	r5, r3
 800c2d8:	4643      	mov	r3, r8
 800c2da:	18e3      	adds	r3, r4, r3
 800c2dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c2e0:	464b      	mov	r3, r9
 800c2e2:	eb45 0303 	adc.w	r3, r5, r3
 800c2e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c2f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c2fa:	f04f 0200 	mov.w	r2, #0
 800c2fe:	f04f 0300 	mov.w	r3, #0
 800c302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c306:	4629      	mov	r1, r5
 800c308:	008b      	lsls	r3, r1, #2
 800c30a:	4621      	mov	r1, r4
 800c30c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c310:	4621      	mov	r1, r4
 800c312:	008a      	lsls	r2, r1, #2
 800c314:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c318:	f7f4 fc46 	bl	8000ba8 <__aeabi_uldivmod>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	4b60      	ldr	r3, [pc, #384]	@ (800c4a4 <UART_SetConfig+0x4e4>)
 800c322:	fba3 2302 	umull	r2, r3, r3, r2
 800c326:	095b      	lsrs	r3, r3, #5
 800c328:	011c      	lsls	r4, r3, #4
 800c32a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c32e:	2200      	movs	r2, #0
 800c330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c334:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c338:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c33c:	4642      	mov	r2, r8
 800c33e:	464b      	mov	r3, r9
 800c340:	1891      	adds	r1, r2, r2
 800c342:	61b9      	str	r1, [r7, #24]
 800c344:	415b      	adcs	r3, r3
 800c346:	61fb      	str	r3, [r7, #28]
 800c348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c34c:	4641      	mov	r1, r8
 800c34e:	1851      	adds	r1, r2, r1
 800c350:	6139      	str	r1, [r7, #16]
 800c352:	4649      	mov	r1, r9
 800c354:	414b      	adcs	r3, r1
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	f04f 0200 	mov.w	r2, #0
 800c35c:	f04f 0300 	mov.w	r3, #0
 800c360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c364:	4659      	mov	r1, fp
 800c366:	00cb      	lsls	r3, r1, #3
 800c368:	4651      	mov	r1, sl
 800c36a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c36e:	4651      	mov	r1, sl
 800c370:	00ca      	lsls	r2, r1, #3
 800c372:	4610      	mov	r0, r2
 800c374:	4619      	mov	r1, r3
 800c376:	4603      	mov	r3, r0
 800c378:	4642      	mov	r2, r8
 800c37a:	189b      	adds	r3, r3, r2
 800c37c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c380:	464b      	mov	r3, r9
 800c382:	460a      	mov	r2, r1
 800c384:	eb42 0303 	adc.w	r3, r2, r3
 800c388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c396:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c398:	f04f 0200 	mov.w	r2, #0
 800c39c:	f04f 0300 	mov.w	r3, #0
 800c3a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	008b      	lsls	r3, r1, #2
 800c3a8:	4641      	mov	r1, r8
 800c3aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3ae:	4641      	mov	r1, r8
 800c3b0:	008a      	lsls	r2, r1, #2
 800c3b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c3b6:	f7f4 fbf7 	bl	8000ba8 <__aeabi_uldivmod>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4b38      	ldr	r3, [pc, #224]	@ (800c4a4 <UART_SetConfig+0x4e4>)
 800c3c2:	fba3 2301 	umull	r2, r3, r3, r1
 800c3c6:	095b      	lsrs	r3, r3, #5
 800c3c8:	2264      	movs	r2, #100	@ 0x64
 800c3ca:	fb02 f303 	mul.w	r3, r2, r3
 800c3ce:	1acb      	subs	r3, r1, r3
 800c3d0:	011b      	lsls	r3, r3, #4
 800c3d2:	3332      	adds	r3, #50	@ 0x32
 800c3d4:	4a33      	ldr	r2, [pc, #204]	@ (800c4a4 <UART_SetConfig+0x4e4>)
 800c3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3da:	095b      	lsrs	r3, r3, #5
 800c3dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c3e0:	441c      	add	r4, r3
 800c3e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	673b      	str	r3, [r7, #112]	@ 0x70
 800c3ea:	677a      	str	r2, [r7, #116]	@ 0x74
 800c3ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	464b      	mov	r3, r9
 800c3f4:	1891      	adds	r1, r2, r2
 800c3f6:	60b9      	str	r1, [r7, #8]
 800c3f8:	415b      	adcs	r3, r3
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c400:	4641      	mov	r1, r8
 800c402:	1851      	adds	r1, r2, r1
 800c404:	6039      	str	r1, [r7, #0]
 800c406:	4649      	mov	r1, r9
 800c408:	414b      	adcs	r3, r1
 800c40a:	607b      	str	r3, [r7, #4]
 800c40c:	f04f 0200 	mov.w	r2, #0
 800c410:	f04f 0300 	mov.w	r3, #0
 800c414:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c418:	4659      	mov	r1, fp
 800c41a:	00cb      	lsls	r3, r1, #3
 800c41c:	4651      	mov	r1, sl
 800c41e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c422:	4651      	mov	r1, sl
 800c424:	00ca      	lsls	r2, r1, #3
 800c426:	4610      	mov	r0, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	4603      	mov	r3, r0
 800c42c:	4642      	mov	r2, r8
 800c42e:	189b      	adds	r3, r3, r2
 800c430:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c432:	464b      	mov	r3, r9
 800c434:	460a      	mov	r2, r1
 800c436:	eb42 0303 	adc.w	r3, r2, r3
 800c43a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	663b      	str	r3, [r7, #96]	@ 0x60
 800c446:	667a      	str	r2, [r7, #100]	@ 0x64
 800c448:	f04f 0200 	mov.w	r2, #0
 800c44c:	f04f 0300 	mov.w	r3, #0
 800c450:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c454:	4649      	mov	r1, r9
 800c456:	008b      	lsls	r3, r1, #2
 800c458:	4641      	mov	r1, r8
 800c45a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c45e:	4641      	mov	r1, r8
 800c460:	008a      	lsls	r2, r1, #2
 800c462:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c466:	f7f4 fb9f 	bl	8000ba8 <__aeabi_uldivmod>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a4 <UART_SetConfig+0x4e4>)
 800c470:	fba3 1302 	umull	r1, r3, r3, r2
 800c474:	095b      	lsrs	r3, r3, #5
 800c476:	2164      	movs	r1, #100	@ 0x64
 800c478:	fb01 f303 	mul.w	r3, r1, r3
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	011b      	lsls	r3, r3, #4
 800c480:	3332      	adds	r3, #50	@ 0x32
 800c482:	4a08      	ldr	r2, [pc, #32]	@ (800c4a4 <UART_SetConfig+0x4e4>)
 800c484:	fba2 2303 	umull	r2, r3, r2, r3
 800c488:	095b      	lsrs	r3, r3, #5
 800c48a:	f003 020f 	and.w	r2, r3, #15
 800c48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4422      	add	r2, r4
 800c496:	609a      	str	r2, [r3, #8]
}
 800c498:	bf00      	nop
 800c49a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4a4:	51eb851f 	.word	0x51eb851f

0800c4a8 <__NVIC_SetPriority>:
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	6039      	str	r1, [r7, #0]
 800c4b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	db0a      	blt.n	800c4d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	490c      	ldr	r1, [pc, #48]	@ (800c4f4 <__NVIC_SetPriority+0x4c>)
 800c4c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4c6:	0112      	lsls	r2, r2, #4
 800c4c8:	b2d2      	uxtb	r2, r2
 800c4ca:	440b      	add	r3, r1
 800c4cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c4d0:	e00a      	b.n	800c4e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	4908      	ldr	r1, [pc, #32]	@ (800c4f8 <__NVIC_SetPriority+0x50>)
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
 800c4da:	f003 030f 	and.w	r3, r3, #15
 800c4de:	3b04      	subs	r3, #4
 800c4e0:	0112      	lsls	r2, r2, #4
 800c4e2:	b2d2      	uxtb	r2, r2
 800c4e4:	440b      	add	r3, r1
 800c4e6:	761a      	strb	r2, [r3, #24]
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	e000e100 	.word	0xe000e100
 800c4f8:	e000ed00 	.word	0xe000ed00

0800c4fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c500:	2100      	movs	r1, #0
 800c502:	f06f 0004 	mvn.w	r0, #4
 800c506:	f7ff ffcf 	bl	800c4a8 <__NVIC_SetPriority>
#endif
}
 800c50a:	bf00      	nop
 800c50c:	bd80      	pop	{r7, pc}
	...

0800c510 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c516:	f3ef 8305 	mrs	r3, IPSR
 800c51a:	603b      	str	r3, [r7, #0]
  return(result);
 800c51c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c522:	f06f 0305 	mvn.w	r3, #5
 800c526:	607b      	str	r3, [r7, #4]
 800c528:	e00c      	b.n	800c544 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c52a:	4b0a      	ldr	r3, [pc, #40]	@ (800c554 <osKernelInitialize+0x44>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c532:	4b08      	ldr	r3, [pc, #32]	@ (800c554 <osKernelInitialize+0x44>)
 800c534:	2201      	movs	r2, #1
 800c536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c538:	2300      	movs	r3, #0
 800c53a:	607b      	str	r3, [r7, #4]
 800c53c:	e002      	b.n	800c544 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c53e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c544:	687b      	ldr	r3, [r7, #4]
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	20001014 	.word	0x20001014

0800c558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c55e:	f3ef 8305 	mrs	r3, IPSR
 800c562:	603b      	str	r3, [r7, #0]
  return(result);
 800c564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c56a:	f06f 0305 	mvn.w	r3, #5
 800c56e:	607b      	str	r3, [r7, #4]
 800c570:	e010      	b.n	800c594 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c572:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a0 <osKernelStart+0x48>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b01      	cmp	r3, #1
 800c578:	d109      	bne.n	800c58e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c57a:	f7ff ffbf 	bl	800c4fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c57e:	4b08      	ldr	r3, [pc, #32]	@ (800c5a0 <osKernelStart+0x48>)
 800c580:	2202      	movs	r2, #2
 800c582:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c584:	f001 f892 	bl	800d6ac <vTaskStartScheduler>
      stat = osOK;
 800c588:	2300      	movs	r3, #0
 800c58a:	607b      	str	r3, [r7, #4]
 800c58c:	e002      	b.n	800c594 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c58e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c594:	687b      	ldr	r3, [r7, #4]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	20001014 	.word	0x20001014

0800c5a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08e      	sub	sp, #56	@ 0x38
 800c5a8:	af04      	add	r7, sp, #16
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b4:	f3ef 8305 	mrs	r3, IPSR
 800c5b8:	617b      	str	r3, [r7, #20]
  return(result);
 800c5ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d17e      	bne.n	800c6be <osThreadNew+0x11a>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d07b      	beq.n	800c6be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c5c6:	2380      	movs	r3, #128	@ 0x80
 800c5c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c5ca:	2318      	movs	r3, #24
 800c5cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c5d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c5d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d045      	beq.n	800c66a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d002      	beq.n	800c5ec <osThreadNew+0x48>
        name = attr->name;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d002      	beq.n	800c5fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d008      	beq.n	800c612 <osThreadNew+0x6e>
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	2b38      	cmp	r3, #56	@ 0x38
 800c604:	d805      	bhi.n	800c612 <osThreadNew+0x6e>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	f003 0301 	and.w	r3, r3, #1
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <osThreadNew+0x72>
        return (NULL);
 800c612:	2300      	movs	r3, #0
 800c614:	e054      	b.n	800c6c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d003      	beq.n	800c626 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	089b      	lsrs	r3, r3, #2
 800c624:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00e      	beq.n	800c64c <osThreadNew+0xa8>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	2ba7      	cmp	r3, #167	@ 0xa7
 800c634:	d90a      	bls.n	800c64c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d006      	beq.n	800c64c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <osThreadNew+0xa8>
        mem = 1;
 800c646:	2301      	movs	r3, #1
 800c648:	61bb      	str	r3, [r7, #24]
 800c64a:	e010      	b.n	800c66e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10c      	bne.n	800c66e <osThreadNew+0xca>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d108      	bne.n	800c66e <osThreadNew+0xca>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d104      	bne.n	800c66e <osThreadNew+0xca>
          mem = 0;
 800c664:	2300      	movs	r3, #0
 800c666:	61bb      	str	r3, [r7, #24]
 800c668:	e001      	b.n	800c66e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d110      	bne.n	800c696 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c67c:	9202      	str	r2, [sp, #8]
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	6a3a      	ldr	r2, [r7, #32]
 800c688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f000 fe1a 	bl	800d2c4 <xTaskCreateStatic>
 800c690:	4603      	mov	r3, r0
 800c692:	613b      	str	r3, [r7, #16]
 800c694:	e013      	b.n	800c6be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d110      	bne.n	800c6be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c69c:	6a3b      	ldr	r3, [r7, #32]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	f107 0310 	add.w	r3, r7, #16
 800c6a4:	9301      	str	r3, [sp, #4]
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 fe68 	bl	800d384 <xTaskCreate>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d001      	beq.n	800c6be <osThreadNew+0x11a>
            hTask = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c6be:	693b      	ldr	r3, [r7, #16]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3728      	adds	r7, #40	@ 0x28
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6d0:	f3ef 8305 	mrs	r3, IPSR
 800c6d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c6d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <osDelay+0x1c>
    stat = osErrorISR;
 800c6dc:	f06f 0305 	mvn.w	r3, #5
 800c6e0:	60fb      	str	r3, [r7, #12]
 800c6e2:	e007      	b.n	800c6f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d002      	beq.n	800c6f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 ffa6 	bl	800d640 <vTaskDelay>
    }
  }

  return (stat);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
	...

0800c700 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4a07      	ldr	r2, [pc, #28]	@ (800c72c <vApplicationGetIdleTaskMemory+0x2c>)
 800c710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	4a06      	ldr	r2, [pc, #24]	@ (800c730 <vApplicationGetIdleTaskMemory+0x30>)
 800c716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2280      	movs	r2, #128	@ 0x80
 800c71c:	601a      	str	r2, [r3, #0]
}
 800c71e:	bf00      	nop
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	20001018 	.word	0x20001018
 800c730:	200010c0 	.word	0x200010c0

0800c734 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	4a07      	ldr	r2, [pc, #28]	@ (800c760 <vApplicationGetTimerTaskMemory+0x2c>)
 800c744:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	4a06      	ldr	r2, [pc, #24]	@ (800c764 <vApplicationGetTimerTaskMemory+0x30>)
 800c74a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c752:	601a      	str	r2, [r3, #0]
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	200012c0 	.word	0x200012c0
 800c764:	20001368 	.word	0x20001368

0800c768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f103 0208 	add.w	r2, r3, #8
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f103 0208 	add.w	r2, r3, #8
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f103 0208 	add.w	r2, r3, #8
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c7b6:	bf00      	nop
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b085      	sub	sp, #20
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	1c5a      	adds	r2, r3, #1
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	601a      	str	r2, [r3, #0]
}
 800c7fe:	bf00      	nop
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c80a:	b480      	push	{r7}
 800c80c:	b085      	sub	sp, #20
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c820:	d103      	bne.n	800c82a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	e00c      	b.n	800c844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3308      	adds	r3, #8
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	e002      	b.n	800c838 <vListInsert+0x2e>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	429a      	cmp	r2, r3
 800c842:	d2f6      	bcs.n	800c832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	1c5a      	adds	r2, r3, #1
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	601a      	str	r2, [r3, #0]
}
 800c870:	bf00      	nop
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	6892      	ldr	r2, [r2, #8]
 800c892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	6852      	ldr	r2, [r2, #4]
 800c89c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d103      	bne.n	800c8b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	689a      	ldr	r2, [r3, #8]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	1e5a      	subs	r2, r3, #1
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10b      	bne.n	800c8fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8f6:	bf00      	nop
 800c8f8:	bf00      	nop
 800c8fa:	e7fd      	b.n	800c8f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c8fc:	f002 fa84 	bl	800ee08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c908:	68f9      	ldr	r1, [r7, #12]
 800c90a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c90c:	fb01 f303 	mul.w	r3, r1, r3
 800c910:	441a      	add	r2, r3
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c92c:	3b01      	subs	r3, #1
 800c92e:	68f9      	ldr	r1, [r7, #12]
 800c930:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c932:	fb01 f303 	mul.w	r3, r1, r3
 800c936:	441a      	add	r2, r3
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	22ff      	movs	r2, #255	@ 0xff
 800c940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	22ff      	movs	r2, #255	@ 0xff
 800c948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d114      	bne.n	800c97c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d01a      	beq.n	800c990 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3310      	adds	r3, #16
 800c95e:	4618      	mov	r0, r3
 800c960:	f001 fa3c 	bl	800dddc <xTaskRemoveFromEventList>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d012      	beq.n	800c990 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c96a:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a0 <xQueueGenericReset+0xd0>)
 800c96c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c970:	601a      	str	r2, [r3, #0]
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	e009      	b.n	800c990 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3310      	adds	r3, #16
 800c980:	4618      	mov	r0, r3
 800c982:	f7ff fef1 	bl	800c768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3324      	adds	r3, #36	@ 0x24
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7ff feec 	bl	800c768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c990:	f002 fa6c 	bl	800ee6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c994:	2301      	movs	r3, #1
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	e000ed04 	.word	0xe000ed04

0800c9a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08e      	sub	sp, #56	@ 0x38
 800c9a8:	af02      	add	r7, sp, #8
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10b      	bne.n	800c9d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c9ca:	bf00      	nop
 800c9cc:	bf00      	nop
 800c9ce:	e7fd      	b.n	800c9cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10b      	bne.n	800c9ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9da:	f383 8811 	msr	BASEPRI, r3
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f3bf 8f4f 	dsb	sy
 800c9e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c9e8:	bf00      	nop
 800c9ea:	bf00      	nop
 800c9ec:	e7fd      	b.n	800c9ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <xQueueGenericCreateStatic+0x56>
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <xQueueGenericCreateStatic+0x5a>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <xQueueGenericCreateStatic+0x5c>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10b      	bne.n	800ca1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	623b      	str	r3, [r7, #32]
}
 800ca16:	bf00      	nop
 800ca18:	bf00      	nop
 800ca1a:	e7fd      	b.n	800ca18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <xQueueGenericCreateStatic+0x84>
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <xQueueGenericCreateStatic+0x88>
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e000      	b.n	800ca2e <xQueueGenericCreateStatic+0x8a>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10b      	bne.n	800ca4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	61fb      	str	r3, [r7, #28]
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop
 800ca48:	e7fd      	b.n	800ca46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca4a:	2350      	movs	r3, #80	@ 0x50
 800ca4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	2b50      	cmp	r3, #80	@ 0x50
 800ca52:	d00b      	beq.n	800ca6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ca54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca58:	f383 8811 	msr	BASEPRI, r3
 800ca5c:	f3bf 8f6f 	isb	sy
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	61bb      	str	r3, [r7, #24]
}
 800ca66:	bf00      	nop
 800ca68:	bf00      	nop
 800ca6a:	e7fd      	b.n	800ca68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ca72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d00d      	beq.n	800ca94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ca84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	68b9      	ldr	r1, [r7, #8]
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f000 f805 	bl	800ca9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3730      	adds	r7, #48	@ 0x30
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	60f8      	str	r0, [r7, #12]
 800caa6:	60b9      	str	r1, [r7, #8]
 800caa8:	607a      	str	r2, [r7, #4]
 800caaa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d103      	bne.n	800caba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	69ba      	ldr	r2, [r7, #24]
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	e002      	b.n	800cac0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cacc:	2101      	movs	r1, #1
 800cace:	69b8      	ldr	r0, [r7, #24]
 800cad0:	f7ff fefe 	bl	800c8d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	78fa      	ldrb	r2, [r7, #3]
 800cad8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cadc:	bf00      	nop
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b08e      	sub	sp, #56	@ 0x38
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800caf2:	2300      	movs	r3, #0
 800caf4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10b      	bne.n	800cb18 <xQueueGenericSend+0x34>
	__asm volatile
 800cb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb04:	f383 8811 	msr	BASEPRI, r3
 800cb08:	f3bf 8f6f 	isb	sy
 800cb0c:	f3bf 8f4f 	dsb	sy
 800cb10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb12:	bf00      	nop
 800cb14:	bf00      	nop
 800cb16:	e7fd      	b.n	800cb14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d103      	bne.n	800cb26 <xQueueGenericSend+0x42>
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <xQueueGenericSend+0x46>
 800cb26:	2301      	movs	r3, #1
 800cb28:	e000      	b.n	800cb2c <xQueueGenericSend+0x48>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10b      	bne.n	800cb48 <xQueueGenericSend+0x64>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb42:	bf00      	nop
 800cb44:	bf00      	nop
 800cb46:	e7fd      	b.n	800cb44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d103      	bne.n	800cb56 <xQueueGenericSend+0x72>
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d101      	bne.n	800cb5a <xQueueGenericSend+0x76>
 800cb56:	2301      	movs	r3, #1
 800cb58:	e000      	b.n	800cb5c <xQueueGenericSend+0x78>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10b      	bne.n	800cb78 <xQueueGenericSend+0x94>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	623b      	str	r3, [r7, #32]
}
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	e7fd      	b.n	800cb74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb78:	f001 faf6 	bl	800e168 <xTaskGetSchedulerState>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d102      	bne.n	800cb88 <xQueueGenericSend+0xa4>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d101      	bne.n	800cb8c <xQueueGenericSend+0xa8>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e000      	b.n	800cb8e <xQueueGenericSend+0xaa>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10b      	bne.n	800cbaa <xQueueGenericSend+0xc6>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	61fb      	str	r3, [r7, #28]
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop
 800cba8:	e7fd      	b.n	800cba6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbaa:	f002 f92d 	bl	800ee08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d302      	bcc.n	800cbc0 <xQueueGenericSend+0xdc>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d129      	bne.n	800cc14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	68b9      	ldr	r1, [r7, #8]
 800cbc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbc6:	f000 fa0f 	bl	800cfe8 <prvCopyDataToQueue>
 800cbca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d010      	beq.n	800cbf6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd6:	3324      	adds	r3, #36	@ 0x24
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f001 f8ff 	bl	800dddc <xTaskRemoveFromEventList>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d013      	beq.n	800cc0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cbe4:	4b3f      	ldr	r3, [pc, #252]	@ (800cce4 <xQueueGenericSend+0x200>)
 800cbe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	e00a      	b.n	800cc0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d007      	beq.n	800cc0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cbfc:	4b39      	ldr	r3, [pc, #228]	@ (800cce4 <xQueueGenericSend+0x200>)
 800cbfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc02:	601a      	str	r2, [r3, #0]
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc0c:	f002 f92e 	bl	800ee6c <vPortExitCritical>
				return pdPASS;
 800cc10:	2301      	movs	r3, #1
 800cc12:	e063      	b.n	800ccdc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d103      	bne.n	800cc22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc1a:	f002 f927 	bl	800ee6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e05c      	b.n	800ccdc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d106      	bne.n	800cc36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc28:	f107 0314 	add.w	r3, r7, #20
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f001 f939 	bl	800dea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc32:	2301      	movs	r3, #1
 800cc34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc36:	f002 f919 	bl	800ee6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc3a:	f000 fda7 	bl	800d78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc3e:	f002 f8e3 	bl	800ee08 <vPortEnterCritical>
 800cc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc48:	b25b      	sxtb	r3, r3
 800cc4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc4e:	d103      	bne.n	800cc58 <xQueueGenericSend+0x174>
 800cc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc52:	2200      	movs	r2, #0
 800cc54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc5e:	b25b      	sxtb	r3, r3
 800cc60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc64:	d103      	bne.n	800cc6e <xQueueGenericSend+0x18a>
 800cc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc6e:	f002 f8fd 	bl	800ee6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc72:	1d3a      	adds	r2, r7, #4
 800cc74:	f107 0314 	add.w	r3, r7, #20
 800cc78:	4611      	mov	r1, r2
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f001 f928 	bl	800ded0 <xTaskCheckForTimeOut>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d124      	bne.n	800ccd0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cc86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc88:	f000 faa6 	bl	800d1d8 <prvIsQueueFull>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d018      	beq.n	800ccc4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc94:	3310      	adds	r3, #16
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	4611      	mov	r1, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f001 f84c 	bl	800dd38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cca2:	f000 fa31 	bl	800d108 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cca6:	f000 fd7f 	bl	800d7a8 <xTaskResumeAll>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f47f af7c 	bne.w	800cbaa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ccb2:	4b0c      	ldr	r3, [pc, #48]	@ (800cce4 <xQueueGenericSend+0x200>)
 800ccb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	e772      	b.n	800cbaa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ccc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccc6:	f000 fa1f 	bl	800d108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccca:	f000 fd6d 	bl	800d7a8 <xTaskResumeAll>
 800ccce:	e76c      	b.n	800cbaa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ccd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccd2:	f000 fa19 	bl	800d108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccd6:	f000 fd67 	bl	800d7a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ccda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3738      	adds	r7, #56	@ 0x38
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	e000ed04 	.word	0xe000ed04

0800cce8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b090      	sub	sp, #64	@ 0x40
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d10b      	bne.n	800cd18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd12:	bf00      	nop
 800cd14:	bf00      	nop
 800cd16:	e7fd      	b.n	800cd14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d103      	bne.n	800cd26 <xQueueGenericSendFromISR+0x3e>
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d101      	bne.n	800cd2a <xQueueGenericSendFromISR+0x42>
 800cd26:	2301      	movs	r3, #1
 800cd28:	e000      	b.n	800cd2c <xQueueGenericSendFromISR+0x44>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d10b      	bne.n	800cd48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd42:	bf00      	nop
 800cd44:	bf00      	nop
 800cd46:	e7fd      	b.n	800cd44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d103      	bne.n	800cd56 <xQueueGenericSendFromISR+0x6e>
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d101      	bne.n	800cd5a <xQueueGenericSendFromISR+0x72>
 800cd56:	2301      	movs	r3, #1
 800cd58:	e000      	b.n	800cd5c <xQueueGenericSendFromISR+0x74>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10b      	bne.n	800cd78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	623b      	str	r3, [r7, #32]
}
 800cd72:	bf00      	nop
 800cd74:	bf00      	nop
 800cd76:	e7fd      	b.n	800cd74 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd78:	f002 f926 	bl	800efc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cd7c:	f3ef 8211 	mrs	r2, BASEPRI
 800cd80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	61fa      	str	r2, [r7, #28]
 800cd92:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cd94:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd96:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d302      	bcc.n	800cdaa <xQueueGenericSendFromISR+0xc2>
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d12f      	bne.n	800ce0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	68b9      	ldr	r1, [r7, #8]
 800cdbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cdc0:	f000 f912 	bl	800cfe8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdc4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cdc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdcc:	d112      	bne.n	800cdf4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d016      	beq.n	800ce04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd8:	3324      	adds	r3, #36	@ 0x24
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 fffe 	bl	800dddc <xTaskRemoveFromEventList>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00e      	beq.n	800ce04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00b      	beq.n	800ce04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	601a      	str	r2, [r3, #0]
 800cdf2:	e007      	b.n	800ce04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cdf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	b25a      	sxtb	r2, r3
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce04:	2301      	movs	r3, #1
 800ce06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ce08:	e001      	b.n	800ce0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce10:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3740      	adds	r7, #64	@ 0x40
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08c      	sub	sp, #48	@ 0x30
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce30:	2300      	movs	r3, #0
 800ce32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10b      	bne.n	800ce56 <xQueueReceive+0x32>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	623b      	str	r3, [r7, #32]
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	e7fd      	b.n	800ce52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d103      	bne.n	800ce64 <xQueueReceive+0x40>
 800ce5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d101      	bne.n	800ce68 <xQueueReceive+0x44>
 800ce64:	2301      	movs	r3, #1
 800ce66:	e000      	b.n	800ce6a <xQueueReceive+0x46>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10b      	bne.n	800ce86 <xQueueReceive+0x62>
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	61fb      	str	r3, [r7, #28]
}
 800ce80:	bf00      	nop
 800ce82:	bf00      	nop
 800ce84:	e7fd      	b.n	800ce82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce86:	f001 f96f 	bl	800e168 <xTaskGetSchedulerState>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d102      	bne.n	800ce96 <xQueueReceive+0x72>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <xQueueReceive+0x76>
 800ce96:	2301      	movs	r3, #1
 800ce98:	e000      	b.n	800ce9c <xQueueReceive+0x78>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d10b      	bne.n	800ceb8 <xQueueReceive+0x94>
	__asm volatile
 800cea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	61bb      	str	r3, [r7, #24]
}
 800ceb2:	bf00      	nop
 800ceb4:	bf00      	nop
 800ceb6:	e7fd      	b.n	800ceb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ceb8:	f001 ffa6 	bl	800ee08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cec0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d01f      	beq.n	800cf08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cecc:	f000 f8f6 	bl	800d0bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ced0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced2:	1e5a      	subs	r2, r3, #1
 800ced4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ced8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00f      	beq.n	800cf00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	3310      	adds	r3, #16
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 ff79 	bl	800dddc <xTaskRemoveFromEventList>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d007      	beq.n	800cf00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cef0:	4b3c      	ldr	r3, [pc, #240]	@ (800cfe4 <xQueueReceive+0x1c0>)
 800cef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cef6:	601a      	str	r2, [r3, #0]
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf00:	f001 ffb4 	bl	800ee6c <vPortExitCritical>
				return pdPASS;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e069      	b.n	800cfdc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d103      	bne.n	800cf16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf0e:	f001 ffad 	bl	800ee6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf12:	2300      	movs	r3, #0
 800cf14:	e062      	b.n	800cfdc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d106      	bne.n	800cf2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf1c:	f107 0310 	add.w	r3, r7, #16
 800cf20:	4618      	mov	r0, r3
 800cf22:	f000 ffbf 	bl	800dea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf26:	2301      	movs	r3, #1
 800cf28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf2a:	f001 ff9f 	bl	800ee6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf2e:	f000 fc2d 	bl	800d78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf32:	f001 ff69 	bl	800ee08 <vPortEnterCritical>
 800cf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf3c:	b25b      	sxtb	r3, r3
 800cf3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf42:	d103      	bne.n	800cf4c <xQueueReceive+0x128>
 800cf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf46:	2200      	movs	r2, #0
 800cf48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf52:	b25b      	sxtb	r3, r3
 800cf54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf58:	d103      	bne.n	800cf62 <xQueueReceive+0x13e>
 800cf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf62:	f001 ff83 	bl	800ee6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf66:	1d3a      	adds	r2, r7, #4
 800cf68:	f107 0310 	add.w	r3, r7, #16
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 ffae 	bl	800ded0 <xTaskCheckForTimeOut>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d123      	bne.n	800cfc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf7c:	f000 f916 	bl	800d1ac <prvIsQueueEmpty>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d017      	beq.n	800cfb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf88:	3324      	adds	r3, #36	@ 0x24
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 fed2 	bl	800dd38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf96:	f000 f8b7 	bl	800d108 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf9a:	f000 fc05 	bl	800d7a8 <xTaskResumeAll>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d189      	bne.n	800ceb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cfa4:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe4 <xQueueReceive+0x1c0>)
 800cfa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfaa:	601a      	str	r2, [r3, #0]
 800cfac:	f3bf 8f4f 	dsb	sy
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	e780      	b.n	800ceb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cfb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfb8:	f000 f8a6 	bl	800d108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfbc:	f000 fbf4 	bl	800d7a8 <xTaskResumeAll>
 800cfc0:	e77a      	b.n	800ceb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cfc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfc4:	f000 f8a0 	bl	800d108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfc8:	f000 fbee 	bl	800d7a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfce:	f000 f8ed 	bl	800d1ac <prvIsQueueEmpty>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f43f af6f 	beq.w	800ceb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3730      	adds	r7, #48	@ 0x30
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	e000ed04 	.word	0xe000ed04

0800cfe8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cff4:	2300      	movs	r3, #0
 800cff6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cffc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d002:	2b00      	cmp	r3, #0
 800d004:	d10d      	bne.n	800d022 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d14d      	bne.n	800d0aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	4618      	mov	r0, r3
 800d014:	f001 f8c6 	bl	800e1a4 <xTaskPriorityDisinherit>
 800d018:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2200      	movs	r2, #0
 800d01e:	609a      	str	r2, [r3, #8]
 800d020:	e043      	b.n	800d0aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d119      	bne.n	800d05c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6858      	ldr	r0, [r3, #4]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d030:	461a      	mov	r2, r3
 800d032:	68b9      	ldr	r1, [r7, #8]
 800d034:	f002 ffc1 	bl	800ffba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d040:	441a      	add	r2, r3
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	685a      	ldr	r2, [r3, #4]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d32b      	bcc.n	800d0aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	605a      	str	r2, [r3, #4]
 800d05a:	e026      	b.n	800d0aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	68d8      	ldr	r0, [r3, #12]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d064:	461a      	mov	r2, r3
 800d066:	68b9      	ldr	r1, [r7, #8]
 800d068:	f002 ffa7 	bl	800ffba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	68da      	ldr	r2, [r3, #12]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d074:	425b      	negs	r3, r3
 800d076:	441a      	add	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	68da      	ldr	r2, [r3, #12]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	429a      	cmp	r2, r3
 800d086:	d207      	bcs.n	800d098 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d090:	425b      	negs	r3, r3
 800d092:	441a      	add	r2, r3
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d105      	bne.n	800d0aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d0b2:	697b      	ldr	r3, [r7, #20]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3718      	adds	r7, #24
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d018      	beq.n	800d100 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0d6:	441a      	add	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68da      	ldr	r2, [r3, #12]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d303      	bcc.n	800d0f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	68d9      	ldr	r1, [r3, #12]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	6838      	ldr	r0, [r7, #0]
 800d0fc:	f002 ff5d 	bl	800ffba <memcpy>
	}
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d110:	f001 fe7a 	bl	800ee08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d11a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d11c:	e011      	b.n	800d142 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d122:	2b00      	cmp	r3, #0
 800d124:	d012      	beq.n	800d14c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	3324      	adds	r3, #36	@ 0x24
 800d12a:	4618      	mov	r0, r3
 800d12c:	f000 fe56 	bl	800dddc <xTaskRemoveFromEventList>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d136:	f000 ff2f 	bl	800df98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d13a:	7bfb      	ldrb	r3, [r7, #15]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d146:	2b00      	cmp	r3, #0
 800d148:	dce9      	bgt.n	800d11e <prvUnlockQueue+0x16>
 800d14a:	e000      	b.n	800d14e <prvUnlockQueue+0x46>
					break;
 800d14c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	22ff      	movs	r2, #255	@ 0xff
 800d152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d156:	f001 fe89 	bl	800ee6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d15a:	f001 fe55 	bl	800ee08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d164:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d166:	e011      	b.n	800d18c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	691b      	ldr	r3, [r3, #16]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d012      	beq.n	800d196 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	3310      	adds	r3, #16
 800d174:	4618      	mov	r0, r3
 800d176:	f000 fe31 	bl	800dddc <xTaskRemoveFromEventList>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d180:	f000 ff0a 	bl	800df98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d184:	7bbb      	ldrb	r3, [r7, #14]
 800d186:	3b01      	subs	r3, #1
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d18c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d190:	2b00      	cmp	r3, #0
 800d192:	dce9      	bgt.n	800d168 <prvUnlockQueue+0x60>
 800d194:	e000      	b.n	800d198 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d196:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	22ff      	movs	r2, #255	@ 0xff
 800d19c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d1a0:	f001 fe64 	bl	800ee6c <vPortExitCritical>
}
 800d1a4:	bf00      	nop
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1b4:	f001 fe28 	bl	800ee08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	60fb      	str	r3, [r7, #12]
 800d1c4:	e001      	b.n	800d1ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1ca:	f001 fe4f 	bl	800ee6c <vPortExitCritical>

	return xReturn;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1e0:	f001 fe12 	bl	800ee08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d102      	bne.n	800d1f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	e001      	b.n	800d1fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1fa:	f001 fe37 	bl	800ee6c <vPortExitCritical>

	return xReturn;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d212:	2300      	movs	r3, #0
 800d214:	60fb      	str	r3, [r7, #12]
 800d216:	e014      	b.n	800d242 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d218:	4a0f      	ldr	r2, [pc, #60]	@ (800d258 <vQueueAddToRegistry+0x50>)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d10b      	bne.n	800d23c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d224:	490c      	ldr	r1, [pc, #48]	@ (800d258 <vQueueAddToRegistry+0x50>)
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d22e:	4a0a      	ldr	r2, [pc, #40]	@ (800d258 <vQueueAddToRegistry+0x50>)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	00db      	lsls	r3, r3, #3
 800d234:	4413      	add	r3, r2
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d23a:	e006      	b.n	800d24a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3301      	adds	r3, #1
 800d240:	60fb      	str	r3, [r7, #12]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2b07      	cmp	r3, #7
 800d246:	d9e7      	bls.n	800d218 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d248:	bf00      	nop
 800d24a:	bf00      	nop
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	20001768 	.word	0x20001768

0800d25c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d26c:	f001 fdcc 	bl	800ee08 <vPortEnterCritical>
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d276:	b25b      	sxtb	r3, r3
 800d278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d27c:	d103      	bne.n	800d286 <vQueueWaitForMessageRestricted+0x2a>
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d28c:	b25b      	sxtb	r3, r3
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d292:	d103      	bne.n	800d29c <vQueueWaitForMessageRestricted+0x40>
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d29c:	f001 fde6 	bl	800ee6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d106      	bne.n	800d2b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	3324      	adds	r3, #36	@ 0x24
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	68b9      	ldr	r1, [r7, #8]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 fd67 	bl	800dd84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d2b6:	6978      	ldr	r0, [r7, #20]
 800d2b8:	f7ff ff26 	bl	800d108 <prvUnlockQueue>
	}
 800d2bc:	bf00      	nop
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08e      	sub	sp, #56	@ 0x38
 800d2c8:	af04      	add	r7, sp, #16
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10b      	bne.n	800d2f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	623b      	str	r3, [r7, #32]
}
 800d2ea:	bf00      	nop
 800d2ec:	bf00      	nop
 800d2ee:	e7fd      	b.n	800d2ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10b      	bne.n	800d30e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	61fb      	str	r3, [r7, #28]
}
 800d308:	bf00      	nop
 800d30a:	bf00      	nop
 800d30c:	e7fd      	b.n	800d30a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d30e:	23a8      	movs	r3, #168	@ 0xa8
 800d310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	2ba8      	cmp	r3, #168	@ 0xa8
 800d316:	d00b      	beq.n	800d330 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	61bb      	str	r3, [r7, #24]
}
 800d32a:	bf00      	nop
 800d32c:	bf00      	nop
 800d32e:	e7fd      	b.n	800d32c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d330:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d334:	2b00      	cmp	r3, #0
 800d336:	d01e      	beq.n	800d376 <xTaskCreateStatic+0xb2>
 800d338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d01b      	beq.n	800d376 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d340:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d346:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34a:	2202      	movs	r2, #2
 800d34c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d350:	2300      	movs	r3, #0
 800d352:	9303      	str	r3, [sp, #12]
 800d354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d356:	9302      	str	r3, [sp, #8]
 800d358:	f107 0314 	add.w	r3, r7, #20
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	68b9      	ldr	r1, [r7, #8]
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f000 f851 	bl	800d410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d36e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d370:	f000 f8f6 	bl	800d560 <prvAddNewTaskToReadyList>
 800d374:	e001      	b.n	800d37a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d376:	2300      	movs	r3, #0
 800d378:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d37a:	697b      	ldr	r3, [r7, #20]
	}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3728      	adds	r7, #40	@ 0x28
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08c      	sub	sp, #48	@ 0x30
 800d388:	af04      	add	r7, sp, #16
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	603b      	str	r3, [r7, #0]
 800d390:	4613      	mov	r3, r2
 800d392:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d394:	88fb      	ldrh	r3, [r7, #6]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4618      	mov	r0, r3
 800d39a:	f001 fe57 	bl	800f04c <pvPortMalloc>
 800d39e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00e      	beq.n	800d3c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d3a6:	20a8      	movs	r0, #168	@ 0xa8
 800d3a8:	f001 fe50 	bl	800f04c <pvPortMalloc>
 800d3ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d003      	beq.n	800d3bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800d3ba:	e005      	b.n	800d3c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3bc:	6978      	ldr	r0, [r7, #20]
 800d3be:	f001 ff13 	bl	800f1e8 <vPortFree>
 800d3c2:	e001      	b.n	800d3c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d017      	beq.n	800d3fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3d6:	88fa      	ldrh	r2, [r7, #6]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	9303      	str	r3, [sp, #12]
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	9302      	str	r3, [sp, #8]
 800d3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	68b9      	ldr	r1, [r7, #8]
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f000 f80f 	bl	800d410 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3f2:	69f8      	ldr	r0, [r7, #28]
 800d3f4:	f000 f8b4 	bl	800d560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	61bb      	str	r3, [r7, #24]
 800d3fc:	e002      	b.n	800d404 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d402:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d404:	69bb      	ldr	r3, [r7, #24]
	}
 800d406:	4618      	mov	r0, r3
 800d408:	3720      	adds	r7, #32
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
	...

0800d410 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
 800d41c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d420:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	461a      	mov	r2, r3
 800d428:	21a5      	movs	r1, #165	@ 0xa5
 800d42a:	f002 fd37 	bl	800fe9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d438:	3b01      	subs	r3, #1
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	f023 0307 	bic.w	r3, r3, #7
 800d446:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	f003 0307 	and.w	r3, r3, #7
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00b      	beq.n	800d46a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	617b      	str	r3, [r7, #20]
}
 800d464:	bf00      	nop
 800d466:	bf00      	nop
 800d468:	e7fd      	b.n	800d466 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d01f      	beq.n	800d4b0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d470:	2300      	movs	r3, #0
 800d472:	61fb      	str	r3, [r7, #28]
 800d474:	e012      	b.n	800d49c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	4413      	add	r3, r2
 800d47c:	7819      	ldrb	r1, [r3, #0]
 800d47e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	4413      	add	r3, r2
 800d484:	3334      	adds	r3, #52	@ 0x34
 800d486:	460a      	mov	r2, r1
 800d488:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	4413      	add	r3, r2
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d006      	beq.n	800d4a4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	3301      	adds	r3, #1
 800d49a:	61fb      	str	r3, [r7, #28]
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	2b0f      	cmp	r3, #15
 800d4a0:	d9e9      	bls.n	800d476 <prvInitialiseNewTask+0x66>
 800d4a2:	e000      	b.n	800d4a6 <prvInitialiseNewTask+0x96>
			{
				break;
 800d4a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d4ae:	e003      	b.n	800d4b8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ba:	2b37      	cmp	r3, #55	@ 0x37
 800d4bc:	d901      	bls.n	800d4c2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4be:	2337      	movs	r3, #55	@ 0x37
 800d4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7ff f965 	bl	800c7a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e0:	3318      	adds	r3, #24
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff f960 	bl	800c7a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	2200      	movs	r2, #0
 800d502:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d508:	2200      	movs	r2, #0
 800d50a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d510:	3354      	adds	r3, #84	@ 0x54
 800d512:	224c      	movs	r2, #76	@ 0x4c
 800d514:	2100      	movs	r1, #0
 800d516:	4618      	mov	r0, r3
 800d518:	f002 fcc0 	bl	800fe9c <memset>
 800d51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51e:	4a0d      	ldr	r2, [pc, #52]	@ (800d554 <prvInitialiseNewTask+0x144>)
 800d520:	659a      	str	r2, [r3, #88]	@ 0x58
 800d522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d524:	4a0c      	ldr	r2, [pc, #48]	@ (800d558 <prvInitialiseNewTask+0x148>)
 800d526:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d52a:	4a0c      	ldr	r2, [pc, #48]	@ (800d55c <prvInitialiseNewTask+0x14c>)
 800d52c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	68f9      	ldr	r1, [r7, #12]
 800d532:	69b8      	ldr	r0, [r7, #24]
 800d534:	f001 fb36 	bl	800eba4 <pxPortInitialiseStack>
 800d538:	4602      	mov	r2, r0
 800d53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d53c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d548:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d54a:	bf00      	nop
 800d54c:	3720      	adds	r7, #32
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	200059fc 	.word	0x200059fc
 800d558:	20005a64 	.word	0x20005a64
 800d55c:	20005acc 	.word	0x20005acc

0800d560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d568:	f001 fc4e 	bl	800ee08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d56c:	4b2d      	ldr	r3, [pc, #180]	@ (800d624 <prvAddNewTaskToReadyList+0xc4>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	3301      	adds	r3, #1
 800d572:	4a2c      	ldr	r2, [pc, #176]	@ (800d624 <prvAddNewTaskToReadyList+0xc4>)
 800d574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d576:	4b2c      	ldr	r3, [pc, #176]	@ (800d628 <prvAddNewTaskToReadyList+0xc8>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d109      	bne.n	800d592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d57e:	4a2a      	ldr	r2, [pc, #168]	@ (800d628 <prvAddNewTaskToReadyList+0xc8>)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d584:	4b27      	ldr	r3, [pc, #156]	@ (800d624 <prvAddNewTaskToReadyList+0xc4>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d110      	bne.n	800d5ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d58c:	f000 fd28 	bl	800dfe0 <prvInitialiseTaskLists>
 800d590:	e00d      	b.n	800d5ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d592:	4b26      	ldr	r3, [pc, #152]	@ (800d62c <prvAddNewTaskToReadyList+0xcc>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d109      	bne.n	800d5ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d59a:	4b23      	ldr	r3, [pc, #140]	@ (800d628 <prvAddNewTaskToReadyList+0xc8>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d802      	bhi.n	800d5ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5a8:	4a1f      	ldr	r2, [pc, #124]	@ (800d628 <prvAddNewTaskToReadyList+0xc8>)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5ae:	4b20      	ldr	r3, [pc, #128]	@ (800d630 <prvAddNewTaskToReadyList+0xd0>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	4a1e      	ldr	r2, [pc, #120]	@ (800d630 <prvAddNewTaskToReadyList+0xd0>)
 800d5b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d5b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d630 <prvAddNewTaskToReadyList+0xd0>)
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d634 <prvAddNewTaskToReadyList+0xd4>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d903      	bls.n	800d5d4 <prvAddNewTaskToReadyList+0x74>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d0:	4a18      	ldr	r2, [pc, #96]	@ (800d634 <prvAddNewTaskToReadyList+0xd4>)
 800d5d2:	6013      	str	r3, [r2, #0]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d8:	4613      	mov	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	4413      	add	r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	4a15      	ldr	r2, [pc, #84]	@ (800d638 <prvAddNewTaskToReadyList+0xd8>)
 800d5e2:	441a      	add	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	f7ff f8e9 	bl	800c7c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d5f0:	f001 fc3c 	bl	800ee6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d5f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d62c <prvAddNewTaskToReadyList+0xcc>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00e      	beq.n	800d61a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d628 <prvAddNewTaskToReadyList+0xc8>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d606:	429a      	cmp	r2, r3
 800d608:	d207      	bcs.n	800d61a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d60a:	4b0c      	ldr	r3, [pc, #48]	@ (800d63c <prvAddNewTaskToReadyList+0xdc>)
 800d60c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d61a:	bf00      	nop
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	20001c7c 	.word	0x20001c7c
 800d628:	200017a8 	.word	0x200017a8
 800d62c:	20001c88 	.word	0x20001c88
 800d630:	20001c98 	.word	0x20001c98
 800d634:	20001c84 	.word	0x20001c84
 800d638:	200017ac 	.word	0x200017ac
 800d63c:	e000ed04 	.word	0xe000ed04

0800d640 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d648:	2300      	movs	r3, #0
 800d64a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d018      	beq.n	800d684 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d652:	4b14      	ldr	r3, [pc, #80]	@ (800d6a4 <vTaskDelay+0x64>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00b      	beq.n	800d672 <vTaskDelay+0x32>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	60bb      	str	r3, [r7, #8]
}
 800d66c:	bf00      	nop
 800d66e:	bf00      	nop
 800d670:	e7fd      	b.n	800d66e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d672:	f000 f88b 	bl	800d78c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d676:	2100      	movs	r1, #0
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fee5 	bl	800e448 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d67e:	f000 f893 	bl	800d7a8 <xTaskResumeAll>
 800d682:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d107      	bne.n	800d69a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d68a:	4b07      	ldr	r3, [pc, #28]	@ (800d6a8 <vTaskDelay+0x68>)
 800d68c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d690:	601a      	str	r2, [r3, #0]
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d69a:	bf00      	nop
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20001ca4 	.word	0x20001ca4
 800d6a8:	e000ed04 	.word	0xe000ed04

0800d6ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08a      	sub	sp, #40	@ 0x28
 800d6b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6ba:	463a      	mov	r2, r7
 800d6bc:	1d39      	adds	r1, r7, #4
 800d6be:	f107 0308 	add.w	r3, r7, #8
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7ff f81c 	bl	800c700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	9202      	str	r2, [sp, #8]
 800d6d0:	9301      	str	r3, [sp, #4]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	460a      	mov	r2, r1
 800d6da:	4924      	ldr	r1, [pc, #144]	@ (800d76c <vTaskStartScheduler+0xc0>)
 800d6dc:	4824      	ldr	r0, [pc, #144]	@ (800d770 <vTaskStartScheduler+0xc4>)
 800d6de:	f7ff fdf1 	bl	800d2c4 <xTaskCreateStatic>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4a23      	ldr	r2, [pc, #140]	@ (800d774 <vTaskStartScheduler+0xc8>)
 800d6e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d6e8:	4b22      	ldr	r3, [pc, #136]	@ (800d774 <vTaskStartScheduler+0xc8>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	e001      	b.n	800d6fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d102      	bne.n	800d706 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d700:	f000 fef6 	bl	800e4f0 <xTimerCreateTimerTask>
 800d704:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d11b      	bne.n	800d744 <vTaskStartScheduler+0x98>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	613b      	str	r3, [r7, #16]
}
 800d71e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d720:	4b15      	ldr	r3, [pc, #84]	@ (800d778 <vTaskStartScheduler+0xcc>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3354      	adds	r3, #84	@ 0x54
 800d726:	4a15      	ldr	r2, [pc, #84]	@ (800d77c <vTaskStartScheduler+0xd0>)
 800d728:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d72a:	4b15      	ldr	r3, [pc, #84]	@ (800d780 <vTaskStartScheduler+0xd4>)
 800d72c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d730:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d732:	4b14      	ldr	r3, [pc, #80]	@ (800d784 <vTaskStartScheduler+0xd8>)
 800d734:	2201      	movs	r2, #1
 800d736:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d738:	4b13      	ldr	r3, [pc, #76]	@ (800d788 <vTaskStartScheduler+0xdc>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d73e:	f001 fabf 	bl	800ecc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d742:	e00f      	b.n	800d764 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d74a:	d10b      	bne.n	800d764 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	60fb      	str	r3, [r7, #12]
}
 800d75e:	bf00      	nop
 800d760:	bf00      	nop
 800d762:	e7fd      	b.n	800d760 <vTaskStartScheduler+0xb4>
}
 800d764:	bf00      	nop
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	080132fc 	.word	0x080132fc
 800d770:	0800dfb1 	.word	0x0800dfb1
 800d774:	20001ca0 	.word	0x20001ca0
 800d778:	200017a8 	.word	0x200017a8
 800d77c:	2000007c 	.word	0x2000007c
 800d780:	20001c9c 	.word	0x20001c9c
 800d784:	20001c88 	.word	0x20001c88
 800d788:	20001c80 	.word	0x20001c80

0800d78c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d78c:	b480      	push	{r7}
 800d78e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d790:	4b04      	ldr	r3, [pc, #16]	@ (800d7a4 <vTaskSuspendAll+0x18>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	3301      	adds	r3, #1
 800d796:	4a03      	ldr	r2, [pc, #12]	@ (800d7a4 <vTaskSuspendAll+0x18>)
 800d798:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d79a:	bf00      	nop
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	20001ca4 	.word	0x20001ca4

0800d7a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7b6:	4b42      	ldr	r3, [pc, #264]	@ (800d8c0 <xTaskResumeAll+0x118>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10b      	bne.n	800d7d6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	603b      	str	r3, [r7, #0]
}
 800d7d0:	bf00      	nop
 800d7d2:	bf00      	nop
 800d7d4:	e7fd      	b.n	800d7d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d7d6:	f001 fb17 	bl	800ee08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d7da:	4b39      	ldr	r3, [pc, #228]	@ (800d8c0 <xTaskResumeAll+0x118>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	4a37      	ldr	r2, [pc, #220]	@ (800d8c0 <xTaskResumeAll+0x118>)
 800d7e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7e4:	4b36      	ldr	r3, [pc, #216]	@ (800d8c0 <xTaskResumeAll+0x118>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d162      	bne.n	800d8b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7ec:	4b35      	ldr	r3, [pc, #212]	@ (800d8c4 <xTaskResumeAll+0x11c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d05e      	beq.n	800d8b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7f4:	e02f      	b.n	800d856 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f6:	4b34      	ldr	r3, [pc, #208]	@ (800d8c8 <xTaskResumeAll+0x120>)
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3318      	adds	r3, #24
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff f83a 	bl	800c87c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	3304      	adds	r3, #4
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7ff f835 	bl	800c87c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d816:	4b2d      	ldr	r3, [pc, #180]	@ (800d8cc <xTaskResumeAll+0x124>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d903      	bls.n	800d826 <xTaskResumeAll+0x7e>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d822:	4a2a      	ldr	r2, [pc, #168]	@ (800d8cc <xTaskResumeAll+0x124>)
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d82a:	4613      	mov	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	4413      	add	r3, r2
 800d830:	009b      	lsls	r3, r3, #2
 800d832:	4a27      	ldr	r2, [pc, #156]	@ (800d8d0 <xTaskResumeAll+0x128>)
 800d834:	441a      	add	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3304      	adds	r3, #4
 800d83a:	4619      	mov	r1, r3
 800d83c:	4610      	mov	r0, r2
 800d83e:	f7fe ffc0 	bl	800c7c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d846:	4b23      	ldr	r3, [pc, #140]	@ (800d8d4 <xTaskResumeAll+0x12c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d302      	bcc.n	800d856 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d850:	4b21      	ldr	r3, [pc, #132]	@ (800d8d8 <xTaskResumeAll+0x130>)
 800d852:	2201      	movs	r2, #1
 800d854:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d856:	4b1c      	ldr	r3, [pc, #112]	@ (800d8c8 <xTaskResumeAll+0x120>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1cb      	bne.n	800d7f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d864:	f000 fc60 	bl	800e128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d868:	4b1c      	ldr	r3, [pc, #112]	@ (800d8dc <xTaskResumeAll+0x134>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d010      	beq.n	800d896 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d874:	f000 f940 	bl	800daf8 <xTaskIncrementTick>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d002      	beq.n	800d884 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d87e:	4b16      	ldr	r3, [pc, #88]	@ (800d8d8 <xTaskResumeAll+0x130>)
 800d880:	2201      	movs	r2, #1
 800d882:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	3b01      	subs	r3, #1
 800d888:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1f1      	bne.n	800d874 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d890:	4b12      	ldr	r3, [pc, #72]	@ (800d8dc <xTaskResumeAll+0x134>)
 800d892:	2200      	movs	r2, #0
 800d894:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d896:	4b10      	ldr	r3, [pc, #64]	@ (800d8d8 <xTaskResumeAll+0x130>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d009      	beq.n	800d8b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d8e0 <xTaskResumeAll+0x138>)
 800d8a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8a8:	601a      	str	r2, [r3, #0]
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8b2:	f001 fadb 	bl	800ee6c <vPortExitCritical>

	return xAlreadyYielded;
 800d8b6:	68bb      	ldr	r3, [r7, #8]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20001ca4 	.word	0x20001ca4
 800d8c4:	20001c7c 	.word	0x20001c7c
 800d8c8:	20001c3c 	.word	0x20001c3c
 800d8cc:	20001c84 	.word	0x20001c84
 800d8d0:	200017ac 	.word	0x200017ac
 800d8d4:	200017a8 	.word	0x200017a8
 800d8d8:	20001c90 	.word	0x20001c90
 800d8dc:	20001c8c 	.word	0x20001c8c
 800d8e0:	e000ed04 	.word	0xe000ed04

0800d8e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d8ea:	4b05      	ldr	r3, [pc, #20]	@ (800d900 <xTaskGetTickCount+0x1c>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d8f0:	687b      	ldr	r3, [r7, #4]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	20001c80 	.word	0x20001c80

0800d904 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d102      	bne.n	800d918 <pcTaskGetName+0x14>
 800d912:	4b0e      	ldr	r3, [pc, #56]	@ (800d94c <pcTaskGetName+0x48>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	e000      	b.n	800d91a <pcTaskGetName+0x16>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d10b      	bne.n	800d93a <pcTaskGetName+0x36>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	60bb      	str	r3, [r7, #8]
}
 800d934:	bf00      	nop
 800d936:	bf00      	nop
 800d938:	e7fd      	b.n	800d936 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	3334      	adds	r3, #52	@ 0x34
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3714      	adds	r7, #20
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr
 800d94a:	bf00      	nop
 800d94c:	200017a8 	.word	0x200017a8

0800d950 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800d950:	b480      	push	{r7}
 800d952:	b08b      	sub	sp, #44	@ 0x2c
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800d95a:	2300      	movs	r3, #0
 800d95c:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d05b      	beq.n	800da1e <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	61bb      	str	r3, [r7, #24]
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	605a      	str	r2, [r3, #4]
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	685a      	ldr	r2, [r3, #4]
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	3308      	adds	r3, #8
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d104      	bne.n	800d98a <prvSearchForNameWithinSingleList+0x3a>
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	685a      	ldr	r2, [r3, #4]
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	605a      	str	r2, [r3, #4]
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	613b      	str	r3, [r7, #16]
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	605a      	str	r2, [r3, #4]
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	3308      	adds	r3, #8
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d104      	bne.n	800d9b6 <prvSearchForNameWithinSingleList+0x66>
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	685a      	ldr	r2, [r3, #4]
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	605a      	str	r2, [r3, #4]
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	623b      	str	r3, [r7, #32]
 800d9c6:	e01c      	b.n	800da02 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	6a3b      	ldr	r3, [r7, #32]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	3334      	adds	r3, #52	@ 0x34
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	4413      	add	r3, r2
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	7afa      	ldrb	r2, [r7, #11]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d002      	beq.n	800d9e8 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	61fb      	str	r3, [r7, #28]
 800d9e6:	e006      	b.n	800d9f6 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800d9e8:	7afb      	ldrb	r3, [r7, #11]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d103      	bne.n	800d9f6 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d106      	bne.n	800da0a <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
 800d9fe:	3301      	adds	r3, #1
 800da00:	623b      	str	r3, [r7, #32]
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	2b0f      	cmp	r3, #15
 800da06:	d9df      	bls.n	800d9c8 <prvSearchForNameWithinSingleList+0x78>
 800da08:	e000      	b.n	800da0c <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800da0a:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800da0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d104      	bne.n	800da1c <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	429a      	cmp	r2, r3
 800da18:	d1bb      	bne.n	800d992 <prvSearchForNameWithinSingleList+0x42>
 800da1a:	e000      	b.n	800da1e <prvSearchForNameWithinSingleList+0xce>
					break;
 800da1c:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800da1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800da20:	4618      	mov	r0, r3
 800da22:	372c      	adds	r7, #44	@ 0x2c
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800da34:	2338      	movs	r3, #56	@ 0x38
 800da36:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7f2 fc19 	bl	8000270 <strlen>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b0f      	cmp	r3, #15
 800da42:	d90b      	bls.n	800da5c <xTaskGetHandle+0x30>
	__asm volatile
 800da44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	60fb      	str	r3, [r7, #12]
}
 800da56:	bf00      	nop
 800da58:	bf00      	nop
 800da5a:	e7fd      	b.n	800da58 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800da5c:	f7ff fe96 	bl	800d78c <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	3b01      	subs	r3, #1
 800da64:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	4613      	mov	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4a1c      	ldr	r2, [pc, #112]	@ (800dae4 <xTaskGetHandle+0xb8>)
 800da72:	4413      	add	r3, r2
 800da74:	6879      	ldr	r1, [r7, #4]
 800da76:	4618      	mov	r0, r3
 800da78:	f7ff ff6a 	bl	800d950 <prvSearchForNameWithinSingleList>
 800da7c:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d103      	bne.n	800da8c <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1ea      	bne.n	800da60 <xTaskGetHandle+0x34>
 800da8a:	e000      	b.n	800da8e <xTaskGetHandle+0x62>
					break;
 800da8c:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d106      	bne.n	800daa2 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800da94:	4b14      	ldr	r3, [pc, #80]	@ (800dae8 <xTaskGetHandle+0xbc>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6879      	ldr	r1, [r7, #4]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7ff ff58 	bl	800d950 <prvSearchForNameWithinSingleList>
 800daa0:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d106      	bne.n	800dab6 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800daa8:	4b10      	ldr	r3, [pc, #64]	@ (800daec <xTaskGetHandle+0xc0>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff ff4e 	bl	800d950 <prvSearchForNameWithinSingleList>
 800dab4:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d104      	bne.n	800dac6 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800dabc:	6879      	ldr	r1, [r7, #4]
 800dabe:	480c      	ldr	r0, [pc, #48]	@ (800daf0 <xTaskGetHandle+0xc4>)
 800dac0:	f7ff ff46 	bl	800d950 <prvSearchForNameWithinSingleList>
 800dac4:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d104      	bne.n	800dad6 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800dacc:	6879      	ldr	r1, [r7, #4]
 800dace:	4809      	ldr	r0, [pc, #36]	@ (800daf4 <xTaskGetHandle+0xc8>)
 800dad0:	f7ff ff3e 	bl	800d950 <prvSearchForNameWithinSingleList>
 800dad4:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800dad6:	f7ff fe67 	bl	800d7a8 <xTaskResumeAll>

		return pxTCB;
 800dada:	693b      	ldr	r3, [r7, #16]
	}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	200017ac 	.word	0x200017ac
 800dae8:	20001c34 	.word	0x20001c34
 800daec:	20001c38 	.word	0x20001c38
 800daf0:	20001c68 	.word	0x20001c68
 800daf4:	20001c50 	.word	0x20001c50

0800daf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dafe:	2300      	movs	r3, #0
 800db00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db02:	4b4f      	ldr	r3, [pc, #316]	@ (800dc40 <xTaskIncrementTick+0x148>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	f040 8090 	bne.w	800dc2c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db0c:	4b4d      	ldr	r3, [pc, #308]	@ (800dc44 <xTaskIncrementTick+0x14c>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3301      	adds	r3, #1
 800db12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db14:	4a4b      	ldr	r2, [pc, #300]	@ (800dc44 <xTaskIncrementTick+0x14c>)
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d121      	bne.n	800db64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800db20:	4b49      	ldr	r3, [pc, #292]	@ (800dc48 <xTaskIncrementTick+0x150>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00b      	beq.n	800db42 <xTaskIncrementTick+0x4a>
	__asm volatile
 800db2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2e:	f383 8811 	msr	BASEPRI, r3
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	f3bf 8f4f 	dsb	sy
 800db3a:	603b      	str	r3, [r7, #0]
}
 800db3c:	bf00      	nop
 800db3e:	bf00      	nop
 800db40:	e7fd      	b.n	800db3e <xTaskIncrementTick+0x46>
 800db42:	4b41      	ldr	r3, [pc, #260]	@ (800dc48 <xTaskIncrementTick+0x150>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	60fb      	str	r3, [r7, #12]
 800db48:	4b40      	ldr	r3, [pc, #256]	@ (800dc4c <xTaskIncrementTick+0x154>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a3e      	ldr	r2, [pc, #248]	@ (800dc48 <xTaskIncrementTick+0x150>)
 800db4e:	6013      	str	r3, [r2, #0]
 800db50:	4a3e      	ldr	r2, [pc, #248]	@ (800dc4c <xTaskIncrementTick+0x154>)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	4b3e      	ldr	r3, [pc, #248]	@ (800dc50 <xTaskIncrementTick+0x158>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	3301      	adds	r3, #1
 800db5c:	4a3c      	ldr	r2, [pc, #240]	@ (800dc50 <xTaskIncrementTick+0x158>)
 800db5e:	6013      	str	r3, [r2, #0]
 800db60:	f000 fae2 	bl	800e128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db64:	4b3b      	ldr	r3, [pc, #236]	@ (800dc54 <xTaskIncrementTick+0x15c>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d349      	bcc.n	800dc02 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db6e:	4b36      	ldr	r3, [pc, #216]	@ (800dc48 <xTaskIncrementTick+0x150>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d104      	bne.n	800db82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db78:	4b36      	ldr	r3, [pc, #216]	@ (800dc54 <xTaskIncrementTick+0x15c>)
 800db7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db7e:	601a      	str	r2, [r3, #0]
					break;
 800db80:	e03f      	b.n	800dc02 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db82:	4b31      	ldr	r3, [pc, #196]	@ (800dc48 <xTaskIncrementTick+0x150>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db92:	693a      	ldr	r2, [r7, #16]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	429a      	cmp	r2, r3
 800db98:	d203      	bcs.n	800dba2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db9a:	4a2e      	ldr	r2, [pc, #184]	@ (800dc54 <xTaskIncrementTick+0x15c>)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dba0:	e02f      	b.n	800dc02 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	3304      	adds	r3, #4
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fe fe68 	bl	800c87c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d004      	beq.n	800dbbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	3318      	adds	r3, #24
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fe fe5f 	bl	800c87c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbc2:	4b25      	ldr	r3, [pc, #148]	@ (800dc58 <xTaskIncrementTick+0x160>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d903      	bls.n	800dbd2 <xTaskIncrementTick+0xda>
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbce:	4a22      	ldr	r2, [pc, #136]	@ (800dc58 <xTaskIncrementTick+0x160>)
 800dbd0:	6013      	str	r3, [r2, #0]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4a1f      	ldr	r2, [pc, #124]	@ (800dc5c <xTaskIncrementTick+0x164>)
 800dbe0:	441a      	add	r2, r3
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4610      	mov	r0, r2
 800dbea:	f7fe fdea 	bl	800c7c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbf2:	4b1b      	ldr	r3, [pc, #108]	@ (800dc60 <xTaskIncrementTick+0x168>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d3b8      	bcc.n	800db6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc00:	e7b5      	b.n	800db6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc02:	4b17      	ldr	r3, [pc, #92]	@ (800dc60 <xTaskIncrementTick+0x168>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc08:	4914      	ldr	r1, [pc, #80]	@ (800dc5c <xTaskIncrementTick+0x164>)
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	440b      	add	r3, r1
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d901      	bls.n	800dc1e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc1e:	4b11      	ldr	r3, [pc, #68]	@ (800dc64 <xTaskIncrementTick+0x16c>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d007      	beq.n	800dc36 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dc26:	2301      	movs	r3, #1
 800dc28:	617b      	str	r3, [r7, #20]
 800dc2a:	e004      	b.n	800dc36 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc2c:	4b0e      	ldr	r3, [pc, #56]	@ (800dc68 <xTaskIncrementTick+0x170>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3301      	adds	r3, #1
 800dc32:	4a0d      	ldr	r2, [pc, #52]	@ (800dc68 <xTaskIncrementTick+0x170>)
 800dc34:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc36:	697b      	ldr	r3, [r7, #20]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3718      	adds	r7, #24
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	20001ca4 	.word	0x20001ca4
 800dc44:	20001c80 	.word	0x20001c80
 800dc48:	20001c34 	.word	0x20001c34
 800dc4c:	20001c38 	.word	0x20001c38
 800dc50:	20001c94 	.word	0x20001c94
 800dc54:	20001c9c 	.word	0x20001c9c
 800dc58:	20001c84 	.word	0x20001c84
 800dc5c:	200017ac 	.word	0x200017ac
 800dc60:	200017a8 	.word	0x200017a8
 800dc64:	20001c90 	.word	0x20001c90
 800dc68:	20001c8c 	.word	0x20001c8c

0800dc6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc72:	4b2b      	ldr	r3, [pc, #172]	@ (800dd20 <vTaskSwitchContext+0xb4>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d003      	beq.n	800dc82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc7a:	4b2a      	ldr	r3, [pc, #168]	@ (800dd24 <vTaskSwitchContext+0xb8>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc80:	e047      	b.n	800dd12 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800dc82:	4b28      	ldr	r3, [pc, #160]	@ (800dd24 <vTaskSwitchContext+0xb8>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc88:	4b27      	ldr	r3, [pc, #156]	@ (800dd28 <vTaskSwitchContext+0xbc>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	60fb      	str	r3, [r7, #12]
 800dc8e:	e011      	b.n	800dcb4 <vTaskSwitchContext+0x48>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10b      	bne.n	800dcae <vTaskSwitchContext+0x42>
	__asm volatile
 800dc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc9a:	f383 8811 	msr	BASEPRI, r3
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f3bf 8f4f 	dsb	sy
 800dca6:	607b      	str	r3, [r7, #4]
}
 800dca8:	bf00      	nop
 800dcaa:	bf00      	nop
 800dcac:	e7fd      	b.n	800dcaa <vTaskSwitchContext+0x3e>
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	491d      	ldr	r1, [pc, #116]	@ (800dd2c <vTaskSwitchContext+0xc0>)
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	4613      	mov	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	440b      	add	r3, r1
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d0e3      	beq.n	800dc90 <vTaskSwitchContext+0x24>
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	4613      	mov	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4a16      	ldr	r2, [pc, #88]	@ (800dd2c <vTaskSwitchContext+0xc0>)
 800dcd4:	4413      	add	r3, r2
 800dcd6:	60bb      	str	r3, [r7, #8]
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	685a      	ldr	r2, [r3, #4]
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	605a      	str	r2, [r3, #4]
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	685a      	ldr	r2, [r3, #4]
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	3308      	adds	r3, #8
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d104      	bne.n	800dcf8 <vTaskSwitchContext+0x8c>
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	685a      	ldr	r2, [r3, #4]
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	605a      	str	r2, [r3, #4]
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	4a0c      	ldr	r2, [pc, #48]	@ (800dd30 <vTaskSwitchContext+0xc4>)
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	4a09      	ldr	r2, [pc, #36]	@ (800dd28 <vTaskSwitchContext+0xbc>)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd08:	4b09      	ldr	r3, [pc, #36]	@ (800dd30 <vTaskSwitchContext+0xc4>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3354      	adds	r3, #84	@ 0x54
 800dd0e:	4a09      	ldr	r2, [pc, #36]	@ (800dd34 <vTaskSwitchContext+0xc8>)
 800dd10:	6013      	str	r3, [r2, #0]
}
 800dd12:	bf00      	nop
 800dd14:	3714      	adds	r7, #20
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	20001ca4 	.word	0x20001ca4
 800dd24:	20001c90 	.word	0x20001c90
 800dd28:	20001c84 	.word	0x20001c84
 800dd2c:	200017ac 	.word	0x200017ac
 800dd30:	200017a8 	.word	0x200017a8
 800dd34:	2000007c 	.word	0x2000007c

0800dd38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10b      	bne.n	800dd60 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4c:	f383 8811 	msr	BASEPRI, r3
 800dd50:	f3bf 8f6f 	isb	sy
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	60fb      	str	r3, [r7, #12]
}
 800dd5a:	bf00      	nop
 800dd5c:	bf00      	nop
 800dd5e:	e7fd      	b.n	800dd5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd60:	4b07      	ldr	r3, [pc, #28]	@ (800dd80 <vTaskPlaceOnEventList+0x48>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	3318      	adds	r3, #24
 800dd66:	4619      	mov	r1, r3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7fe fd4e 	bl	800c80a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd6e:	2101      	movs	r1, #1
 800dd70:	6838      	ldr	r0, [r7, #0]
 800dd72:	f000 fb69 	bl	800e448 <prvAddCurrentTaskToDelayedList>
}
 800dd76:	bf00      	nop
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	200017a8 	.word	0x200017a8

0800dd84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b086      	sub	sp, #24
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10b      	bne.n	800ddae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	617b      	str	r3, [r7, #20]
}
 800dda8:	bf00      	nop
 800ddaa:	bf00      	nop
 800ddac:	e7fd      	b.n	800ddaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddae:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd8 <vTaskPlaceOnEventListRestricted+0x54>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	3318      	adds	r3, #24
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7fe fd03 	bl	800c7c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ddc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ddc6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ddc8:	6879      	ldr	r1, [r7, #4]
 800ddca:	68b8      	ldr	r0, [r7, #8]
 800ddcc:	f000 fb3c 	bl	800e448 <prvAddCurrentTaskToDelayedList>
	}
 800ddd0:	bf00      	nop
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	200017a8 	.word	0x200017a8

0800dddc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10b      	bne.n	800de0a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	60fb      	str	r3, [r7, #12]
}
 800de04:	bf00      	nop
 800de06:	bf00      	nop
 800de08:	e7fd      	b.n	800de06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	3318      	adds	r3, #24
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fd34 	bl	800c87c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de14:	4b1d      	ldr	r3, [pc, #116]	@ (800de8c <xTaskRemoveFromEventList+0xb0>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d11d      	bne.n	800de58 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	3304      	adds	r3, #4
 800de20:	4618      	mov	r0, r3
 800de22:	f7fe fd2b 	bl	800c87c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de2a:	4b19      	ldr	r3, [pc, #100]	@ (800de90 <xTaskRemoveFromEventList+0xb4>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d903      	bls.n	800de3a <xTaskRemoveFromEventList+0x5e>
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de36:	4a16      	ldr	r2, [pc, #88]	@ (800de90 <xTaskRemoveFromEventList+0xb4>)
 800de38:	6013      	str	r3, [r2, #0]
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de3e:	4613      	mov	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4a13      	ldr	r2, [pc, #76]	@ (800de94 <xTaskRemoveFromEventList+0xb8>)
 800de48:	441a      	add	r2, r3
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	3304      	adds	r3, #4
 800de4e:	4619      	mov	r1, r3
 800de50:	4610      	mov	r0, r2
 800de52:	f7fe fcb6 	bl	800c7c2 <vListInsertEnd>
 800de56:	e005      	b.n	800de64 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	3318      	adds	r3, #24
 800de5c:	4619      	mov	r1, r3
 800de5e:	480e      	ldr	r0, [pc, #56]	@ (800de98 <xTaskRemoveFromEventList+0xbc>)
 800de60:	f7fe fcaf 	bl	800c7c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de68:	4b0c      	ldr	r3, [pc, #48]	@ (800de9c <xTaskRemoveFromEventList+0xc0>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de6e:	429a      	cmp	r2, r3
 800de70:	d905      	bls.n	800de7e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de72:	2301      	movs	r3, #1
 800de74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de76:	4b0a      	ldr	r3, [pc, #40]	@ (800dea0 <xTaskRemoveFromEventList+0xc4>)
 800de78:	2201      	movs	r2, #1
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	e001      	b.n	800de82 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800de7e:	2300      	movs	r3, #0
 800de80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800de82:	697b      	ldr	r3, [r7, #20]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	20001ca4 	.word	0x20001ca4
 800de90:	20001c84 	.word	0x20001c84
 800de94:	200017ac 	.word	0x200017ac
 800de98:	20001c3c 	.word	0x20001c3c
 800de9c:	200017a8 	.word	0x200017a8
 800dea0:	20001c90 	.word	0x20001c90

0800dea4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800deac:	4b06      	ldr	r3, [pc, #24]	@ (800dec8 <vTaskInternalSetTimeOutState+0x24>)
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800deb4:	4b05      	ldr	r3, [pc, #20]	@ (800decc <vTaskInternalSetTimeOutState+0x28>)
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	605a      	str	r2, [r3, #4]
}
 800debc:	bf00      	nop
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	20001c94 	.word	0x20001c94
 800decc:	20001c80 	.word	0x20001c80

0800ded0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b088      	sub	sp, #32
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10b      	bne.n	800def8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	613b      	str	r3, [r7, #16]
}
 800def2:	bf00      	nop
 800def4:	bf00      	nop
 800def6:	e7fd      	b.n	800def4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10b      	bne.n	800df16 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	60fb      	str	r3, [r7, #12]
}
 800df10:	bf00      	nop
 800df12:	bf00      	nop
 800df14:	e7fd      	b.n	800df12 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800df16:	f000 ff77 	bl	800ee08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df1a:	4b1d      	ldr	r3, [pc, #116]	@ (800df90 <xTaskCheckForTimeOut+0xc0>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	69ba      	ldr	r2, [r7, #24]
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df32:	d102      	bne.n	800df3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df34:	2300      	movs	r3, #0
 800df36:	61fb      	str	r3, [r7, #28]
 800df38:	e023      	b.n	800df82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	4b15      	ldr	r3, [pc, #84]	@ (800df94 <xTaskCheckForTimeOut+0xc4>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	429a      	cmp	r2, r3
 800df44:	d007      	beq.n	800df56 <xTaskCheckForTimeOut+0x86>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	69ba      	ldr	r2, [r7, #24]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d302      	bcc.n	800df56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df50:	2301      	movs	r3, #1
 800df52:	61fb      	str	r3, [r7, #28]
 800df54:	e015      	b.n	800df82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	697a      	ldr	r2, [r7, #20]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d20b      	bcs.n	800df78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	1ad2      	subs	r2, r2, r3
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff ff99 	bl	800dea4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df72:	2300      	movs	r3, #0
 800df74:	61fb      	str	r3, [r7, #28]
 800df76:	e004      	b.n	800df82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	2200      	movs	r2, #0
 800df7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df7e:	2301      	movs	r3, #1
 800df80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df82:	f000 ff73 	bl	800ee6c <vPortExitCritical>

	return xReturn;
 800df86:	69fb      	ldr	r3, [r7, #28]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3720      	adds	r7, #32
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20001c80 	.word	0x20001c80
 800df94:	20001c94 	.word	0x20001c94

0800df98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df98:	b480      	push	{r7}
 800df9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800df9c:	4b03      	ldr	r3, [pc, #12]	@ (800dfac <vTaskMissedYield+0x14>)
 800df9e:	2201      	movs	r2, #1
 800dfa0:	601a      	str	r2, [r3, #0]
}
 800dfa2:	bf00      	nop
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	20001c90 	.word	0x20001c90

0800dfb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfb8:	f000 f852 	bl	800e060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfbc:	4b06      	ldr	r3, [pc, #24]	@ (800dfd8 <prvIdleTask+0x28>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d9f9      	bls.n	800dfb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dfc4:	4b05      	ldr	r3, [pc, #20]	@ (800dfdc <prvIdleTask+0x2c>)
 800dfc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dfd4:	e7f0      	b.n	800dfb8 <prvIdleTask+0x8>
 800dfd6:	bf00      	nop
 800dfd8:	200017ac 	.word	0x200017ac
 800dfdc:	e000ed04 	.word	0xe000ed04

0800dfe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	607b      	str	r3, [r7, #4]
 800dfea:	e00c      	b.n	800e006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	4613      	mov	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4413      	add	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4a12      	ldr	r2, [pc, #72]	@ (800e040 <prvInitialiseTaskLists+0x60>)
 800dff8:	4413      	add	r3, r2
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fe fbb4 	bl	800c768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3301      	adds	r3, #1
 800e004:	607b      	str	r3, [r7, #4]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b37      	cmp	r3, #55	@ 0x37
 800e00a:	d9ef      	bls.n	800dfec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e00c:	480d      	ldr	r0, [pc, #52]	@ (800e044 <prvInitialiseTaskLists+0x64>)
 800e00e:	f7fe fbab 	bl	800c768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e012:	480d      	ldr	r0, [pc, #52]	@ (800e048 <prvInitialiseTaskLists+0x68>)
 800e014:	f7fe fba8 	bl	800c768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e018:	480c      	ldr	r0, [pc, #48]	@ (800e04c <prvInitialiseTaskLists+0x6c>)
 800e01a:	f7fe fba5 	bl	800c768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e01e:	480c      	ldr	r0, [pc, #48]	@ (800e050 <prvInitialiseTaskLists+0x70>)
 800e020:	f7fe fba2 	bl	800c768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e024:	480b      	ldr	r0, [pc, #44]	@ (800e054 <prvInitialiseTaskLists+0x74>)
 800e026:	f7fe fb9f 	bl	800c768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e02a:	4b0b      	ldr	r3, [pc, #44]	@ (800e058 <prvInitialiseTaskLists+0x78>)
 800e02c:	4a05      	ldr	r2, [pc, #20]	@ (800e044 <prvInitialiseTaskLists+0x64>)
 800e02e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e030:	4b0a      	ldr	r3, [pc, #40]	@ (800e05c <prvInitialiseTaskLists+0x7c>)
 800e032:	4a05      	ldr	r2, [pc, #20]	@ (800e048 <prvInitialiseTaskLists+0x68>)
 800e034:	601a      	str	r2, [r3, #0]
}
 800e036:	bf00      	nop
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	200017ac 	.word	0x200017ac
 800e044:	20001c0c 	.word	0x20001c0c
 800e048:	20001c20 	.word	0x20001c20
 800e04c:	20001c3c 	.word	0x20001c3c
 800e050:	20001c50 	.word	0x20001c50
 800e054:	20001c68 	.word	0x20001c68
 800e058:	20001c34 	.word	0x20001c34
 800e05c:	20001c38 	.word	0x20001c38

0800e060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e066:	e019      	b.n	800e09c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e068:	f000 fece 	bl	800ee08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e06c:	4b10      	ldr	r3, [pc, #64]	@ (800e0b0 <prvCheckTasksWaitingTermination+0x50>)
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3304      	adds	r3, #4
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fe fbff 	bl	800c87c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e07e:	4b0d      	ldr	r3, [pc, #52]	@ (800e0b4 <prvCheckTasksWaitingTermination+0x54>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	3b01      	subs	r3, #1
 800e084:	4a0b      	ldr	r2, [pc, #44]	@ (800e0b4 <prvCheckTasksWaitingTermination+0x54>)
 800e086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e088:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b8 <prvCheckTasksWaitingTermination+0x58>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3b01      	subs	r3, #1
 800e08e:	4a0a      	ldr	r2, [pc, #40]	@ (800e0b8 <prvCheckTasksWaitingTermination+0x58>)
 800e090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e092:	f000 feeb 	bl	800ee6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 f810 	bl	800e0bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e09c:	4b06      	ldr	r3, [pc, #24]	@ (800e0b8 <prvCheckTasksWaitingTermination+0x58>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1e1      	bne.n	800e068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20001c50 	.word	0x20001c50
 800e0b4:	20001c7c 	.word	0x20001c7c
 800e0b8:	20001c64 	.word	0x20001c64

0800e0bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3354      	adds	r3, #84	@ 0x54
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f001 fef3 	bl	800feb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d108      	bne.n	800e0ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f001 f883 	bl	800f1e8 <vPortFree>
				vPortFree( pxTCB );
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f001 f880 	bl	800f1e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0e8:	e019      	b.n	800e11e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d103      	bne.n	800e0fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f001 f877 	bl	800f1e8 <vPortFree>
	}
 800e0fa:	e010      	b.n	800e11e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e102:	2b02      	cmp	r3, #2
 800e104:	d00b      	beq.n	800e11e <prvDeleteTCB+0x62>
	__asm volatile
 800e106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	60fb      	str	r3, [r7, #12]
}
 800e118:	bf00      	nop
 800e11a:	bf00      	nop
 800e11c:	e7fd      	b.n	800e11a <prvDeleteTCB+0x5e>
	}
 800e11e:	bf00      	nop
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e12e:	4b0c      	ldr	r3, [pc, #48]	@ (800e160 <prvResetNextTaskUnblockTime+0x38>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d104      	bne.n	800e142 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e138:	4b0a      	ldr	r3, [pc, #40]	@ (800e164 <prvResetNextTaskUnblockTime+0x3c>)
 800e13a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e13e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e140:	e008      	b.n	800e154 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e142:	4b07      	ldr	r3, [pc, #28]	@ (800e160 <prvResetNextTaskUnblockTime+0x38>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	4a04      	ldr	r2, [pc, #16]	@ (800e164 <prvResetNextTaskUnblockTime+0x3c>)
 800e152:	6013      	str	r3, [r2, #0]
}
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	20001c34 	.word	0x20001c34
 800e164:	20001c9c 	.word	0x20001c9c

0800e168 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e16e:	4b0b      	ldr	r3, [pc, #44]	@ (800e19c <xTaskGetSchedulerState+0x34>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d102      	bne.n	800e17c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e176:	2301      	movs	r3, #1
 800e178:	607b      	str	r3, [r7, #4]
 800e17a:	e008      	b.n	800e18e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e17c:	4b08      	ldr	r3, [pc, #32]	@ (800e1a0 <xTaskGetSchedulerState+0x38>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d102      	bne.n	800e18a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e184:	2302      	movs	r3, #2
 800e186:	607b      	str	r3, [r7, #4]
 800e188:	e001      	b.n	800e18e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e18a:	2300      	movs	r3, #0
 800e18c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e18e:	687b      	ldr	r3, [r7, #4]
	}
 800e190:	4618      	mov	r0, r3
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr
 800e19c:	20001c88 	.word	0x20001c88
 800e1a0:	20001ca4 	.word	0x20001ca4

0800e1a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d058      	beq.n	800e26c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e278 <xTaskPriorityDisinherit+0xd4>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	693a      	ldr	r2, [r7, #16]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d00b      	beq.n	800e1dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	60fb      	str	r3, [r7, #12]
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	e7fd      	b.n	800e1d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d10b      	bne.n	800e1fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e8:	f383 8811 	msr	BASEPRI, r3
 800e1ec:	f3bf 8f6f 	isb	sy
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	60bb      	str	r3, [r7, #8]
}
 800e1f6:	bf00      	nop
 800e1f8:	bf00      	nop
 800e1fa:	e7fd      	b.n	800e1f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e200:	1e5a      	subs	r2, r3, #1
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e20e:	429a      	cmp	r2, r3
 800e210:	d02c      	beq.n	800e26c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e216:	2b00      	cmp	r3, #0
 800e218:	d128      	bne.n	800e26c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	3304      	adds	r3, #4
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe fb2c 	bl	800c87c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e230:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e23c:	4b0f      	ldr	r3, [pc, #60]	@ (800e27c <xTaskPriorityDisinherit+0xd8>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	429a      	cmp	r2, r3
 800e242:	d903      	bls.n	800e24c <xTaskPriorityDisinherit+0xa8>
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e248:	4a0c      	ldr	r2, [pc, #48]	@ (800e27c <xTaskPriorityDisinherit+0xd8>)
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e250:	4613      	mov	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4a09      	ldr	r2, [pc, #36]	@ (800e280 <xTaskPriorityDisinherit+0xdc>)
 800e25a:	441a      	add	r2, r3
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	3304      	adds	r3, #4
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7fe faad 	bl	800c7c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e268:	2301      	movs	r3, #1
 800e26a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e26c:	697b      	ldr	r3, [r7, #20]
	}
 800e26e:	4618      	mov	r0, r3
 800e270:	3718      	adds	r7, #24
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	200017a8 	.word	0x200017a8
 800e27c:	20001c84 	.word	0x20001c84
 800e280:	200017ac 	.word	0x200017ac

0800e284 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800e28e:	f000 fdbb 	bl	800ee08 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800e292:	4b20      	ldr	r3, [pc, #128]	@ (800e314 <ulTaskNotifyTake+0x90>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d113      	bne.n	800e2c6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e29e:	4b1d      	ldr	r3, [pc, #116]	@ (800e314 <ulTaskNotifyTake+0x90>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00b      	beq.n	800e2c6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2ae:	2101      	movs	r1, #1
 800e2b0:	6838      	ldr	r0, [r7, #0]
 800e2b2:	f000 f8c9 	bl	800e448 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e2b6:	4b18      	ldr	r3, [pc, #96]	@ (800e318 <ulTaskNotifyTake+0x94>)
 800e2b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e2c6:	f000 fdd1 	bl	800ee6c <vPortExitCritical>

		taskENTER_CRITICAL();
 800e2ca:	f000 fd9d 	bl	800ee08 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800e2ce:	4b11      	ldr	r3, [pc, #68]	@ (800e314 <ulTaskNotifyTake+0x90>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2d6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00e      	beq.n	800e2fc <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e2e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e314 <ulTaskNotifyTake+0x90>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800e2ee:	e005      	b.n	800e2fc <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800e2f0:	4b08      	ldr	r3, [pc, #32]	@ (800e314 <ulTaskNotifyTake+0x90>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	3a01      	subs	r2, #1
 800e2f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2fc:	4b05      	ldr	r3, [pc, #20]	@ (800e314 <ulTaskNotifyTake+0x90>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2200      	movs	r2, #0
 800e302:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800e306:	f000 fdb1 	bl	800ee6c <vPortExitCritical>

		return ulReturn;
 800e30a:	68fb      	ldr	r3, [r7, #12]
	}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	200017a8 	.word	0x200017a8
 800e318:	e000ed04 	.word	0xe000ed04

0800e31c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b08a      	sub	sp, #40	@ 0x28
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10b      	bne.n	800e344 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e330:	f383 8811 	msr	BASEPRI, r3
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	61bb      	str	r3, [r7, #24]
}
 800e33e:	bf00      	nop
 800e340:	bf00      	nop
 800e342:	e7fd      	b.n	800e340 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e344:	f000 fe40 	bl	800efc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800e34c:	f3ef 8211 	mrs	r2, BASEPRI
 800e350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	617a      	str	r2, [r7, #20]
 800e362:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e364:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e366:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e36e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e372:	2202      	movs	r2, #2
 800e374:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800e378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e382:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e386:	7ffb      	ldrb	r3, [r7, #31]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d147      	bne.n	800e41c <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00b      	beq.n	800e3ac <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	60fb      	str	r3, [r7, #12]
}
 800e3a6:	bf00      	nop
 800e3a8:	bf00      	nop
 800e3aa:	e7fd      	b.n	800e3a8 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3ac:	4b20      	ldr	r3, [pc, #128]	@ (800e430 <vTaskNotifyGiveFromISR+0x114>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d11d      	bne.n	800e3f0 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fe fa5f 	bl	800c87c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3c2:	4b1c      	ldr	r3, [pc, #112]	@ (800e434 <vTaskNotifyGiveFromISR+0x118>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d903      	bls.n	800e3d2 <vTaskNotifyGiveFromISR+0xb6>
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ce:	4a19      	ldr	r2, [pc, #100]	@ (800e434 <vTaskNotifyGiveFromISR+0x118>)
 800e3d0:	6013      	str	r3, [r2, #0]
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4a16      	ldr	r2, [pc, #88]	@ (800e438 <vTaskNotifyGiveFromISR+0x11c>)
 800e3e0:	441a      	add	r2, r3
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	4610      	mov	r0, r2
 800e3ea:	f7fe f9ea 	bl	800c7c2 <vListInsertEnd>
 800e3ee:	e005      	b.n	800e3fc <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f2:	3318      	adds	r3, #24
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4811      	ldr	r0, [pc, #68]	@ (800e43c <vTaskNotifyGiveFromISR+0x120>)
 800e3f8:	f7fe f9e3 	bl	800c7c2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e400:	4b0f      	ldr	r3, [pc, #60]	@ (800e440 <vTaskNotifyGiveFromISR+0x124>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e406:	429a      	cmp	r2, r3
 800e408:	d908      	bls.n	800e41c <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d002      	beq.n	800e416 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	2201      	movs	r2, #1
 800e414:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e416:	4b0b      	ldr	r3, [pc, #44]	@ (800e444 <vTaskNotifyGiveFromISR+0x128>)
 800e418:	2201      	movs	r2, #1
 800e41a:	601a      	str	r2, [r3, #0]
 800e41c:	6a3b      	ldr	r3, [r7, #32]
 800e41e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	f383 8811 	msr	BASEPRI, r3
}
 800e426:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800e428:	bf00      	nop
 800e42a:	3728      	adds	r7, #40	@ 0x28
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	20001ca4 	.word	0x20001ca4
 800e434:	20001c84 	.word	0x20001c84
 800e438:	200017ac 	.word	0x200017ac
 800e43c:	20001c3c 	.word	0x20001c3c
 800e440:	200017a8 	.word	0x200017a8
 800e444:	20001c90 	.word	0x20001c90

0800e448 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e452:	4b21      	ldr	r3, [pc, #132]	@ (800e4d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e458:	4b20      	ldr	r3, [pc, #128]	@ (800e4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3304      	adds	r3, #4
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fe fa0c 	bl	800c87c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e46a:	d10a      	bne.n	800e482 <prvAddCurrentTaskToDelayedList+0x3a>
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d007      	beq.n	800e482 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e472:	4b1a      	ldr	r3, [pc, #104]	@ (800e4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	3304      	adds	r3, #4
 800e478:	4619      	mov	r1, r3
 800e47a:	4819      	ldr	r0, [pc, #100]	@ (800e4e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e47c:	f7fe f9a1 	bl	800c7c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e480:	e026      	b.n	800e4d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4413      	add	r3, r2
 800e488:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e48a:	4b14      	ldr	r3, [pc, #80]	@ (800e4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68ba      	ldr	r2, [r7, #8]
 800e490:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	429a      	cmp	r2, r3
 800e498:	d209      	bcs.n	800e4ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e49a:	4b12      	ldr	r3, [pc, #72]	@ (800e4e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	4b0f      	ldr	r3, [pc, #60]	@ (800e4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4610      	mov	r0, r2
 800e4a8:	f7fe f9af 	bl	800c80a <vListInsert>
}
 800e4ac:	e010      	b.n	800e4d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e4e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e4dc <prvAddCurrentTaskToDelayedList+0x94>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3304      	adds	r3, #4
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	f7fe f9a5 	bl	800c80a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4c0:	4b0a      	ldr	r3, [pc, #40]	@ (800e4ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d202      	bcs.n	800e4d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e4ca:	4a08      	ldr	r2, [pc, #32]	@ (800e4ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	6013      	str	r3, [r2, #0]
}
 800e4d0:	bf00      	nop
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	20001c80 	.word	0x20001c80
 800e4dc:	200017a8 	.word	0x200017a8
 800e4e0:	20001c68 	.word	0x20001c68
 800e4e4:	20001c38 	.word	0x20001c38
 800e4e8:	20001c34 	.word	0x20001c34
 800e4ec:	20001c9c 	.word	0x20001c9c

0800e4f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b08a      	sub	sp, #40	@ 0x28
 800e4f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e4fa:	f000 fb13 	bl	800eb24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e4fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e574 <xTimerCreateTimerTask+0x84>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d021      	beq.n	800e54a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e50a:	2300      	movs	r3, #0
 800e50c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e50e:	1d3a      	adds	r2, r7, #4
 800e510:	f107 0108 	add.w	r1, r7, #8
 800e514:	f107 030c 	add.w	r3, r7, #12
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe f90b 	bl	800c734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e51e:	6879      	ldr	r1, [r7, #4]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	9202      	str	r2, [sp, #8]
 800e526:	9301      	str	r3, [sp, #4]
 800e528:	2302      	movs	r3, #2
 800e52a:	9300      	str	r3, [sp, #0]
 800e52c:	2300      	movs	r3, #0
 800e52e:	460a      	mov	r2, r1
 800e530:	4911      	ldr	r1, [pc, #68]	@ (800e578 <xTimerCreateTimerTask+0x88>)
 800e532:	4812      	ldr	r0, [pc, #72]	@ (800e57c <xTimerCreateTimerTask+0x8c>)
 800e534:	f7fe fec6 	bl	800d2c4 <xTaskCreateStatic>
 800e538:	4603      	mov	r3, r0
 800e53a:	4a11      	ldr	r2, [pc, #68]	@ (800e580 <xTimerCreateTimerTask+0x90>)
 800e53c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e53e:	4b10      	ldr	r3, [pc, #64]	@ (800e580 <xTimerCreateTimerTask+0x90>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e546:	2301      	movs	r3, #1
 800e548:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10b      	bne.n	800e568 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e554:	f383 8811 	msr	BASEPRI, r3
 800e558:	f3bf 8f6f 	isb	sy
 800e55c:	f3bf 8f4f 	dsb	sy
 800e560:	613b      	str	r3, [r7, #16]
}
 800e562:	bf00      	nop
 800e564:	bf00      	nop
 800e566:	e7fd      	b.n	800e564 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e568:	697b      	ldr	r3, [r7, #20]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3718      	adds	r7, #24
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20001cd8 	.word	0x20001cd8
 800e578:	08013304 	.word	0x08013304
 800e57c:	0800e6bd 	.word	0x0800e6bd
 800e580:	20001cdc 	.word	0x20001cdc

0800e584 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b08a      	sub	sp, #40	@ 0x28
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e592:	2300      	movs	r3, #0
 800e594:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10b      	bne.n	800e5b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	623b      	str	r3, [r7, #32]
}
 800e5ae:	bf00      	nop
 800e5b0:	bf00      	nop
 800e5b2:	e7fd      	b.n	800e5b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e5b4:	4b19      	ldr	r3, [pc, #100]	@ (800e61c <xTimerGenericCommand+0x98>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d02a      	beq.n	800e612 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2b05      	cmp	r3, #5
 800e5cc:	dc18      	bgt.n	800e600 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e5ce:	f7ff fdcb 	bl	800e168 <xTaskGetSchedulerState>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d109      	bne.n	800e5ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e5d8:	4b10      	ldr	r3, [pc, #64]	@ (800e61c <xTimerGenericCommand+0x98>)
 800e5da:	6818      	ldr	r0, [r3, #0]
 800e5dc:	f107 0110 	add.w	r1, r7, #16
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5e4:	f7fe fa7e 	bl	800cae4 <xQueueGenericSend>
 800e5e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800e5ea:	e012      	b.n	800e612 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e5ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e61c <xTimerGenericCommand+0x98>)
 800e5ee:	6818      	ldr	r0, [r3, #0]
 800e5f0:	f107 0110 	add.w	r1, r7, #16
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f7fe fa74 	bl	800cae4 <xQueueGenericSend>
 800e5fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800e5fe:	e008      	b.n	800e612 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e600:	4b06      	ldr	r3, [pc, #24]	@ (800e61c <xTimerGenericCommand+0x98>)
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	f107 0110 	add.w	r1, r7, #16
 800e608:	2300      	movs	r3, #0
 800e60a:	683a      	ldr	r2, [r7, #0]
 800e60c:	f7fe fb6c 	bl	800cce8 <xQueueGenericSendFromISR>
 800e610:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e614:	4618      	mov	r0, r3
 800e616:	3728      	adds	r7, #40	@ 0x28
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	20001cd8 	.word	0x20001cd8

0800e620 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b088      	sub	sp, #32
 800e624:	af02      	add	r7, sp, #8
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e62a:	4b23      	ldr	r3, [pc, #140]	@ (800e6b8 <prvProcessExpiredTimer+0x98>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	3304      	adds	r3, #4
 800e638:	4618      	mov	r0, r3
 800e63a:	f7fe f91f 	bl	800c87c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e644:	f003 0304 	and.w	r3, r3, #4
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d023      	beq.n	800e694 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	699a      	ldr	r2, [r3, #24]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	18d1      	adds	r1, r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	6978      	ldr	r0, [r7, #20]
 800e65a:	f000 f8d5 	bl	800e808 <prvInsertTimerInActiveList>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d020      	beq.n	800e6a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e664:	2300      	movs	r3, #0
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	2300      	movs	r3, #0
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	2100      	movs	r1, #0
 800e66e:	6978      	ldr	r0, [r7, #20]
 800e670:	f7ff ff88 	bl	800e584 <xTimerGenericCommand>
 800e674:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d114      	bne.n	800e6a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e680:	f383 8811 	msr	BASEPRI, r3
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	60fb      	str	r3, [r7, #12]
}
 800e68e:	bf00      	nop
 800e690:	bf00      	nop
 800e692:	e7fd      	b.n	800e690 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e69a:	f023 0301 	bic.w	r3, r3, #1
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	6a1b      	ldr	r3, [r3, #32]
 800e6aa:	6978      	ldr	r0, [r7, #20]
 800e6ac:	4798      	blx	r3
}
 800e6ae:	bf00      	nop
 800e6b0:	3718      	adds	r7, #24
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20001cd0 	.word	0x20001cd0

0800e6bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6c4:	f107 0308 	add.w	r3, r7, #8
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f000 f859 	bl	800e780 <prvGetNextExpireTime>
 800e6ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f000 f805 	bl	800e6e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e6da:	f000 f8d7 	bl	800e88c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6de:	bf00      	nop
 800e6e0:	e7f0      	b.n	800e6c4 <prvTimerTask+0x8>
	...

0800e6e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e6ee:	f7ff f84d 	bl	800d78c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e6f2:	f107 0308 	add.w	r3, r7, #8
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 f866 	bl	800e7c8 <prvSampleTimeNow>
 800e6fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d130      	bne.n	800e766 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d10a      	bne.n	800e720 <prvProcessTimerOrBlockTask+0x3c>
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d806      	bhi.n	800e720 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e712:	f7ff f849 	bl	800d7a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e716:	68f9      	ldr	r1, [r7, #12]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7ff ff81 	bl	800e620 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e71e:	e024      	b.n	800e76a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d008      	beq.n	800e738 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e726:	4b13      	ldr	r3, [pc, #76]	@ (800e774 <prvProcessTimerOrBlockTask+0x90>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d101      	bne.n	800e734 <prvProcessTimerOrBlockTask+0x50>
 800e730:	2301      	movs	r3, #1
 800e732:	e000      	b.n	800e736 <prvProcessTimerOrBlockTask+0x52>
 800e734:	2300      	movs	r3, #0
 800e736:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e738:	4b0f      	ldr	r3, [pc, #60]	@ (800e778 <prvProcessTimerOrBlockTask+0x94>)
 800e73a:	6818      	ldr	r0, [r3, #0]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	4619      	mov	r1, r3
 800e746:	f7fe fd89 	bl	800d25c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e74a:	f7ff f82d 	bl	800d7a8 <xTaskResumeAll>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10a      	bne.n	800e76a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e754:	4b09      	ldr	r3, [pc, #36]	@ (800e77c <prvProcessTimerOrBlockTask+0x98>)
 800e756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e75a:	601a      	str	r2, [r3, #0]
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	f3bf 8f6f 	isb	sy
}
 800e764:	e001      	b.n	800e76a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e766:	f7ff f81f 	bl	800d7a8 <xTaskResumeAll>
}
 800e76a:	bf00      	nop
 800e76c:	3710      	adds	r7, #16
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	20001cd4 	.word	0x20001cd4
 800e778:	20001cd8 	.word	0x20001cd8
 800e77c:	e000ed04 	.word	0xe000ed04

0800e780 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e780:	b480      	push	{r7}
 800e782:	b085      	sub	sp, #20
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e788:	4b0e      	ldr	r3, [pc, #56]	@ (800e7c4 <prvGetNextExpireTime+0x44>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <prvGetNextExpireTime+0x16>
 800e792:	2201      	movs	r2, #1
 800e794:	e000      	b.n	800e798 <prvGetNextExpireTime+0x18>
 800e796:	2200      	movs	r2, #0
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d105      	bne.n	800e7b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7a4:	4b07      	ldr	r3, [pc, #28]	@ (800e7c4 <prvGetNextExpireTime+0x44>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	60fb      	str	r3, [r7, #12]
 800e7ae:	e001      	b.n	800e7b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	20001cd0 	.word	0x20001cd0

0800e7c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e7d0:	f7ff f888 	bl	800d8e4 <xTaskGetTickCount>
 800e7d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e804 <prvSampleTimeNow+0x3c>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d205      	bcs.n	800e7ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e7e0:	f000 f93a 	bl	800ea58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2201      	movs	r2, #1
 800e7e8:	601a      	str	r2, [r3, #0]
 800e7ea:	e002      	b.n	800e7f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e7f2:	4a04      	ldr	r2, [pc, #16]	@ (800e804 <prvSampleTimeNow+0x3c>)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	20001ce0 	.word	0x20001ce0

0800e808 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e816:	2300      	movs	r3, #0
 800e818:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e826:	68ba      	ldr	r2, [r7, #8]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d812      	bhi.n	800e854 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	1ad2      	subs	r2, r2, r3
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	699b      	ldr	r3, [r3, #24]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d302      	bcc.n	800e842 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e83c:	2301      	movs	r3, #1
 800e83e:	617b      	str	r3, [r7, #20]
 800e840:	e01b      	b.n	800e87a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e842:	4b10      	ldr	r3, [pc, #64]	@ (800e884 <prvInsertTimerInActiveList+0x7c>)
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	3304      	adds	r3, #4
 800e84a:	4619      	mov	r1, r3
 800e84c:	4610      	mov	r0, r2
 800e84e:	f7fd ffdc 	bl	800c80a <vListInsert>
 800e852:	e012      	b.n	800e87a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d206      	bcs.n	800e86a <prvInsertTimerInActiveList+0x62>
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	429a      	cmp	r2, r3
 800e862:	d302      	bcc.n	800e86a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e864:	2301      	movs	r3, #1
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	e007      	b.n	800e87a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e86a:	4b07      	ldr	r3, [pc, #28]	@ (800e888 <prvInsertTimerInActiveList+0x80>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3304      	adds	r3, #4
 800e872:	4619      	mov	r1, r3
 800e874:	4610      	mov	r0, r2
 800e876:	f7fd ffc8 	bl	800c80a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e87a:	697b      	ldr	r3, [r7, #20]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	20001cd4 	.word	0x20001cd4
 800e888:	20001cd0 	.word	0x20001cd0

0800e88c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b08e      	sub	sp, #56	@ 0x38
 800e890:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e892:	e0ce      	b.n	800ea32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	da19      	bge.n	800e8ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e89a:	1d3b      	adds	r3, r7, #4
 800e89c:	3304      	adds	r3, #4
 800e89e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10b      	bne.n	800e8be <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	61fb      	str	r3, [r7, #28]
}
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	e7fd      	b.n	800e8ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8c4:	6850      	ldr	r0, [r2, #4]
 800e8c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8c8:	6892      	ldr	r2, [r2, #8]
 800e8ca:	4611      	mov	r1, r2
 800e8cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f2c0 80ae 	blt.w	800ea32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8dc:	695b      	ldr	r3, [r3, #20]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d004      	beq.n	800e8ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fd ffc8 	bl	800c87c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8ec:	463b      	mov	r3, r7
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7ff ff6a 	bl	800e7c8 <prvSampleTimeNow>
 800e8f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b09      	cmp	r3, #9
 800e8fa:	f200 8097 	bhi.w	800ea2c <prvProcessReceivedCommands+0x1a0>
 800e8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e904 <prvProcessReceivedCommands+0x78>)
 800e900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e904:	0800e92d 	.word	0x0800e92d
 800e908:	0800e92d 	.word	0x0800e92d
 800e90c:	0800e92d 	.word	0x0800e92d
 800e910:	0800e9a3 	.word	0x0800e9a3
 800e914:	0800e9b7 	.word	0x0800e9b7
 800e918:	0800ea03 	.word	0x0800ea03
 800e91c:	0800e92d 	.word	0x0800e92d
 800e920:	0800e92d 	.word	0x0800e92d
 800e924:	0800e9a3 	.word	0x0800e9a3
 800e928:	0800e9b7 	.word	0x0800e9b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e932:	f043 0301 	orr.w	r3, r3, #1
 800e936:	b2da      	uxtb	r2, r3
 800e938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e942:	699b      	ldr	r3, [r3, #24]
 800e944:	18d1      	adds	r1, r2, r3
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e94a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e94c:	f7ff ff5c 	bl	800e808 <prvInsertTimerInActiveList>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d06c      	beq.n	800ea30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e95c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e964:	f003 0304 	and.w	r3, r3, #4
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d061      	beq.n	800ea30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e970:	699b      	ldr	r3, [r3, #24]
 800e972:	441a      	add	r2, r3
 800e974:	2300      	movs	r3, #0
 800e976:	9300      	str	r3, [sp, #0]
 800e978:	2300      	movs	r3, #0
 800e97a:	2100      	movs	r1, #0
 800e97c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e97e:	f7ff fe01 	bl	800e584 <xTimerGenericCommand>
 800e982:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e984:	6a3b      	ldr	r3, [r7, #32]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d152      	bne.n	800ea30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e98e:	f383 8811 	msr	BASEPRI, r3
 800e992:	f3bf 8f6f 	isb	sy
 800e996:	f3bf 8f4f 	dsb	sy
 800e99a:	61bb      	str	r3, [r7, #24]
}
 800e99c:	bf00      	nop
 800e99e:	bf00      	nop
 800e9a0:	e7fd      	b.n	800e99e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9a8:	f023 0301 	bic.w	r3, r3, #1
 800e9ac:	b2da      	uxtb	r2, r3
 800e9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e9b4:	e03d      	b.n	800ea32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e9bc:	f043 0301 	orr.w	r3, r3, #1
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10b      	bne.n	800e9ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	617b      	str	r3, [r7, #20]
}
 800e9e8:	bf00      	nop
 800e9ea:	bf00      	nop
 800e9ec:	e7fd      	b.n	800e9ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9f0:	699a      	ldr	r2, [r3, #24]
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f4:	18d1      	adds	r1, r2, r3
 800e9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9fc:	f7ff ff04 	bl	800e808 <prvInsertTimerInActiveList>
					break;
 800ea00:	e017      	b.n	800ea32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea08:	f003 0302 	and.w	r3, r3, #2
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d103      	bne.n	800ea18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ea10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea12:	f000 fbe9 	bl	800f1e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea16:	e00c      	b.n	800ea32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea1e:	f023 0301 	bic.w	r3, r3, #1
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ea2a:	e002      	b.n	800ea32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ea2c:	bf00      	nop
 800ea2e:	e000      	b.n	800ea32 <prvProcessReceivedCommands+0x1a6>
					break;
 800ea30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea32:	4b08      	ldr	r3, [pc, #32]	@ (800ea54 <prvProcessReceivedCommands+0x1c8>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	1d39      	adds	r1, r7, #4
 800ea38:	2200      	movs	r2, #0
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7fe f9f2 	bl	800ce24 <xQueueReceive>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f47f af26 	bne.w	800e894 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ea48:	bf00      	nop
 800ea4a:	bf00      	nop
 800ea4c:	3730      	adds	r7, #48	@ 0x30
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20001cd8 	.word	0x20001cd8

0800ea58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b088      	sub	sp, #32
 800ea5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea5e:	e049      	b.n	800eaf4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea60:	4b2e      	ldr	r3, [pc, #184]	@ (800eb1c <prvSwitchTimerLists+0xc4>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea6a:	4b2c      	ldr	r3, [pc, #176]	@ (800eb1c <prvSwitchTimerLists+0xc4>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fd feff 	bl	800c87c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea8c:	f003 0304 	and.w	r3, r3, #4
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d02f      	beq.n	800eaf4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	699b      	ldr	r3, [r3, #24]
 800ea98:	693a      	ldr	r2, [r7, #16]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ea9e:	68ba      	ldr	r2, [r7, #8]
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d90e      	bls.n	800eac4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eab2:	4b1a      	ldr	r3, [pc, #104]	@ (800eb1c <prvSwitchTimerLists+0xc4>)
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	3304      	adds	r3, #4
 800eaba:	4619      	mov	r1, r3
 800eabc:	4610      	mov	r0, r2
 800eabe:	f7fd fea4 	bl	800c80a <vListInsert>
 800eac2:	e017      	b.n	800eaf4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eac4:	2300      	movs	r3, #0
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	2300      	movs	r3, #0
 800eaca:	693a      	ldr	r2, [r7, #16]
 800eacc:	2100      	movs	r1, #0
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7ff fd58 	bl	800e584 <xTimerGenericCommand>
 800ead4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10b      	bne.n	800eaf4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800eadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae0:	f383 8811 	msr	BASEPRI, r3
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	603b      	str	r3, [r7, #0]
}
 800eaee:	bf00      	nop
 800eaf0:	bf00      	nop
 800eaf2:	e7fd      	b.n	800eaf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eaf4:	4b09      	ldr	r3, [pc, #36]	@ (800eb1c <prvSwitchTimerLists+0xc4>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1b0      	bne.n	800ea60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eafe:	4b07      	ldr	r3, [pc, #28]	@ (800eb1c <prvSwitchTimerLists+0xc4>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb04:	4b06      	ldr	r3, [pc, #24]	@ (800eb20 <prvSwitchTimerLists+0xc8>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4a04      	ldr	r2, [pc, #16]	@ (800eb1c <prvSwitchTimerLists+0xc4>)
 800eb0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb0c:	4a04      	ldr	r2, [pc, #16]	@ (800eb20 <prvSwitchTimerLists+0xc8>)
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	6013      	str	r3, [r2, #0]
}
 800eb12:	bf00      	nop
 800eb14:	3718      	adds	r7, #24
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	20001cd0 	.word	0x20001cd0
 800eb20:	20001cd4 	.word	0x20001cd4

0800eb24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb2a:	f000 f96d 	bl	800ee08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb2e:	4b15      	ldr	r3, [pc, #84]	@ (800eb84 <prvCheckForValidListAndQueue+0x60>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d120      	bne.n	800eb78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb36:	4814      	ldr	r0, [pc, #80]	@ (800eb88 <prvCheckForValidListAndQueue+0x64>)
 800eb38:	f7fd fe16 	bl	800c768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb3c:	4813      	ldr	r0, [pc, #76]	@ (800eb8c <prvCheckForValidListAndQueue+0x68>)
 800eb3e:	f7fd fe13 	bl	800c768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb42:	4b13      	ldr	r3, [pc, #76]	@ (800eb90 <prvCheckForValidListAndQueue+0x6c>)
 800eb44:	4a10      	ldr	r2, [pc, #64]	@ (800eb88 <prvCheckForValidListAndQueue+0x64>)
 800eb46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb48:	4b12      	ldr	r3, [pc, #72]	@ (800eb94 <prvCheckForValidListAndQueue+0x70>)
 800eb4a:	4a10      	ldr	r2, [pc, #64]	@ (800eb8c <prvCheckForValidListAndQueue+0x68>)
 800eb4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eb4e:	2300      	movs	r3, #0
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	4b11      	ldr	r3, [pc, #68]	@ (800eb98 <prvCheckForValidListAndQueue+0x74>)
 800eb54:	4a11      	ldr	r2, [pc, #68]	@ (800eb9c <prvCheckForValidListAndQueue+0x78>)
 800eb56:	2110      	movs	r1, #16
 800eb58:	200a      	movs	r0, #10
 800eb5a:	f7fd ff23 	bl	800c9a4 <xQueueGenericCreateStatic>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	4a08      	ldr	r2, [pc, #32]	@ (800eb84 <prvCheckForValidListAndQueue+0x60>)
 800eb62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eb64:	4b07      	ldr	r3, [pc, #28]	@ (800eb84 <prvCheckForValidListAndQueue+0x60>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d005      	beq.n	800eb78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eb6c:	4b05      	ldr	r3, [pc, #20]	@ (800eb84 <prvCheckForValidListAndQueue+0x60>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	490b      	ldr	r1, [pc, #44]	@ (800eba0 <prvCheckForValidListAndQueue+0x7c>)
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fe fb48 	bl	800d208 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb78:	f000 f978 	bl	800ee6c <vPortExitCritical>
}
 800eb7c:	bf00      	nop
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20001cd8 	.word	0x20001cd8
 800eb88:	20001ca8 	.word	0x20001ca8
 800eb8c:	20001cbc 	.word	0x20001cbc
 800eb90:	20001cd0 	.word	0x20001cd0
 800eb94:	20001cd4 	.word	0x20001cd4
 800eb98:	20001d84 	.word	0x20001d84
 800eb9c:	20001ce4 	.word	0x20001ce4
 800eba0:	0801330c 	.word	0x0801330c

0800eba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3b04      	subs	r3, #4
 800ebb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ebbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3b04      	subs	r3, #4
 800ebc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	f023 0201 	bic.w	r2, r3, #1
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	3b04      	subs	r3, #4
 800ebd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ebd4:	4a0c      	ldr	r2, [pc, #48]	@ (800ec08 <pxPortInitialiseStack+0x64>)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3b14      	subs	r3, #20
 800ebde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	3b04      	subs	r3, #4
 800ebea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f06f 0202 	mvn.w	r2, #2
 800ebf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	3b20      	subs	r3, #32
 800ebf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3714      	adds	r7, #20
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	0800ec0d 	.word	0x0800ec0d

0800ec0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec16:	4b13      	ldr	r3, [pc, #76]	@ (800ec64 <prvTaskExitError+0x58>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec1e:	d00b      	beq.n	800ec38 <prvTaskExitError+0x2c>
	__asm volatile
 800ec20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec24:	f383 8811 	msr	BASEPRI, r3
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	f3bf 8f4f 	dsb	sy
 800ec30:	60fb      	str	r3, [r7, #12]
}
 800ec32:	bf00      	nop
 800ec34:	bf00      	nop
 800ec36:	e7fd      	b.n	800ec34 <prvTaskExitError+0x28>
	__asm volatile
 800ec38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec3c:	f383 8811 	msr	BASEPRI, r3
 800ec40:	f3bf 8f6f 	isb	sy
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	60bb      	str	r3, [r7, #8]
}
 800ec4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec4c:	bf00      	nop
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d0fc      	beq.n	800ec4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop
 800ec58:	3714      	adds	r7, #20
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	2000006c 	.word	0x2000006c
	...

0800ec70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec70:	4b07      	ldr	r3, [pc, #28]	@ (800ec90 <pxCurrentTCBConst2>)
 800ec72:	6819      	ldr	r1, [r3, #0]
 800ec74:	6808      	ldr	r0, [r1, #0]
 800ec76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7a:	f380 8809 	msr	PSP, r0
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f04f 0000 	mov.w	r0, #0
 800ec86:	f380 8811 	msr	BASEPRI, r0
 800ec8a:	4770      	bx	lr
 800ec8c:	f3af 8000 	nop.w

0800ec90 <pxCurrentTCBConst2>:
 800ec90:	200017a8 	.word	0x200017a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec94:	bf00      	nop
 800ec96:	bf00      	nop

0800ec98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec98:	4808      	ldr	r0, [pc, #32]	@ (800ecbc <prvPortStartFirstTask+0x24>)
 800ec9a:	6800      	ldr	r0, [r0, #0]
 800ec9c:	6800      	ldr	r0, [r0, #0]
 800ec9e:	f380 8808 	msr	MSP, r0
 800eca2:	f04f 0000 	mov.w	r0, #0
 800eca6:	f380 8814 	msr	CONTROL, r0
 800ecaa:	b662      	cpsie	i
 800ecac:	b661      	cpsie	f
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	f3bf 8f6f 	isb	sy
 800ecb6:	df00      	svc	0
 800ecb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ecba:	bf00      	nop
 800ecbc:	e000ed08 	.word	0xe000ed08

0800ecc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ecc6:	4b47      	ldr	r3, [pc, #284]	@ (800ede4 <xPortStartScheduler+0x124>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a47      	ldr	r2, [pc, #284]	@ (800ede8 <xPortStartScheduler+0x128>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d10b      	bne.n	800ece8 <xPortStartScheduler+0x28>
	__asm volatile
 800ecd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	613b      	str	r3, [r7, #16]
}
 800ece2:	bf00      	nop
 800ece4:	bf00      	nop
 800ece6:	e7fd      	b.n	800ece4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ece8:	4b3e      	ldr	r3, [pc, #248]	@ (800ede4 <xPortStartScheduler+0x124>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a3f      	ldr	r2, [pc, #252]	@ (800edec <xPortStartScheduler+0x12c>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d10b      	bne.n	800ed0a <xPortStartScheduler+0x4a>
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	60fb      	str	r3, [r7, #12]
}
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop
 800ed08:	e7fd      	b.n	800ed06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed0a:	4b39      	ldr	r3, [pc, #228]	@ (800edf0 <xPortStartScheduler+0x130>)
 800ed0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	22ff      	movs	r2, #255	@ 0xff
 800ed1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed24:	78fb      	ldrb	r3, [r7, #3]
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	4b31      	ldr	r3, [pc, #196]	@ (800edf4 <xPortStartScheduler+0x134>)
 800ed30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed32:	4b31      	ldr	r3, [pc, #196]	@ (800edf8 <xPortStartScheduler+0x138>)
 800ed34:	2207      	movs	r2, #7
 800ed36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed38:	e009      	b.n	800ed4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ed3a:	4b2f      	ldr	r3, [pc, #188]	@ (800edf8 <xPortStartScheduler+0x138>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	3b01      	subs	r3, #1
 800ed40:	4a2d      	ldr	r2, [pc, #180]	@ (800edf8 <xPortStartScheduler+0x138>)
 800ed42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed44:	78fb      	ldrb	r3, [r7, #3]
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	005b      	lsls	r3, r3, #1
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed4e:	78fb      	ldrb	r3, [r7, #3]
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed56:	2b80      	cmp	r3, #128	@ 0x80
 800ed58:	d0ef      	beq.n	800ed3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed5a:	4b27      	ldr	r3, [pc, #156]	@ (800edf8 <xPortStartScheduler+0x138>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f1c3 0307 	rsb	r3, r3, #7
 800ed62:	2b04      	cmp	r3, #4
 800ed64:	d00b      	beq.n	800ed7e <xPortStartScheduler+0xbe>
	__asm volatile
 800ed66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6a:	f383 8811 	msr	BASEPRI, r3
 800ed6e:	f3bf 8f6f 	isb	sy
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	60bb      	str	r3, [r7, #8]
}
 800ed78:	bf00      	nop
 800ed7a:	bf00      	nop
 800ed7c:	e7fd      	b.n	800ed7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed7e:	4b1e      	ldr	r3, [pc, #120]	@ (800edf8 <xPortStartScheduler+0x138>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	021b      	lsls	r3, r3, #8
 800ed84:	4a1c      	ldr	r2, [pc, #112]	@ (800edf8 <xPortStartScheduler+0x138>)
 800ed86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed88:	4b1b      	ldr	r3, [pc, #108]	@ (800edf8 <xPortStartScheduler+0x138>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ed90:	4a19      	ldr	r2, [pc, #100]	@ (800edf8 <xPortStartScheduler+0x138>)
 800ed92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed9c:	4b17      	ldr	r3, [pc, #92]	@ (800edfc <xPortStartScheduler+0x13c>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a16      	ldr	r2, [pc, #88]	@ (800edfc <xPortStartScheduler+0x13c>)
 800eda2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eda6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eda8:	4b14      	ldr	r3, [pc, #80]	@ (800edfc <xPortStartScheduler+0x13c>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a13      	ldr	r2, [pc, #76]	@ (800edfc <xPortStartScheduler+0x13c>)
 800edae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800edb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800edb4:	f000 f8da 	bl	800ef6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800edb8:	4b11      	ldr	r3, [pc, #68]	@ (800ee00 <xPortStartScheduler+0x140>)
 800edba:	2200      	movs	r2, #0
 800edbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edbe:	f000 f8f9 	bl	800efb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edc2:	4b10      	ldr	r3, [pc, #64]	@ (800ee04 <xPortStartScheduler+0x144>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a0f      	ldr	r2, [pc, #60]	@ (800ee04 <xPortStartScheduler+0x144>)
 800edc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800edcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800edce:	f7ff ff63 	bl	800ec98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800edd2:	f7fe ff4b 	bl	800dc6c <vTaskSwitchContext>
	prvTaskExitError();
 800edd6:	f7ff ff19 	bl	800ec0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800edda:	2300      	movs	r3, #0
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3718      	adds	r7, #24
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	e000ed00 	.word	0xe000ed00
 800ede8:	410fc271 	.word	0x410fc271
 800edec:	410fc270 	.word	0x410fc270
 800edf0:	e000e400 	.word	0xe000e400
 800edf4:	20001dd4 	.word	0x20001dd4
 800edf8:	20001dd8 	.word	0x20001dd8
 800edfc:	e000ed20 	.word	0xe000ed20
 800ee00:	2000006c 	.word	0x2000006c
 800ee04:	e000ef34 	.word	0xe000ef34

0800ee08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee12:	f383 8811 	msr	BASEPRI, r3
 800ee16:	f3bf 8f6f 	isb	sy
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	607b      	str	r3, [r7, #4]
}
 800ee20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee22:	4b10      	ldr	r3, [pc, #64]	@ (800ee64 <vPortEnterCritical+0x5c>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3301      	adds	r3, #1
 800ee28:	4a0e      	ldr	r2, [pc, #56]	@ (800ee64 <vPortEnterCritical+0x5c>)
 800ee2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ee64 <vPortEnterCritical+0x5c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d110      	bne.n	800ee56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee34:	4b0c      	ldr	r3, [pc, #48]	@ (800ee68 <vPortEnterCritical+0x60>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00b      	beq.n	800ee56 <vPortEnterCritical+0x4e>
	__asm volatile
 800ee3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee42:	f383 8811 	msr	BASEPRI, r3
 800ee46:	f3bf 8f6f 	isb	sy
 800ee4a:	f3bf 8f4f 	dsb	sy
 800ee4e:	603b      	str	r3, [r7, #0]
}
 800ee50:	bf00      	nop
 800ee52:	bf00      	nop
 800ee54:	e7fd      	b.n	800ee52 <vPortEnterCritical+0x4a>
	}
}
 800ee56:	bf00      	nop
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	2000006c 	.word	0x2000006c
 800ee68:	e000ed04 	.word	0xe000ed04

0800ee6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee72:	4b12      	ldr	r3, [pc, #72]	@ (800eebc <vPortExitCritical+0x50>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10b      	bne.n	800ee92 <vPortExitCritical+0x26>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	607b      	str	r3, [r7, #4]
}
 800ee8c:	bf00      	nop
 800ee8e:	bf00      	nop
 800ee90:	e7fd      	b.n	800ee8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee92:	4b0a      	ldr	r3, [pc, #40]	@ (800eebc <vPortExitCritical+0x50>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	3b01      	subs	r3, #1
 800ee98:	4a08      	ldr	r2, [pc, #32]	@ (800eebc <vPortExitCritical+0x50>)
 800ee9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee9c:	4b07      	ldr	r3, [pc, #28]	@ (800eebc <vPortExitCritical+0x50>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d105      	bne.n	800eeb0 <vPortExitCritical+0x44>
 800eea4:	2300      	movs	r3, #0
 800eea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	f383 8811 	msr	BASEPRI, r3
}
 800eeae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	2000006c 	.word	0x2000006c

0800eec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eec0:	f3ef 8009 	mrs	r0, PSP
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	4b15      	ldr	r3, [pc, #84]	@ (800ef20 <pxCurrentTCBConst>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	f01e 0f10 	tst.w	lr, #16
 800eed0:	bf08      	it	eq
 800eed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeda:	6010      	str	r0, [r2, #0]
 800eedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800eee4:	f380 8811 	msr	BASEPRI, r0
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f7fe febc 	bl	800dc6c <vTaskSwitchContext>
 800eef4:	f04f 0000 	mov.w	r0, #0
 800eef8:	f380 8811 	msr	BASEPRI, r0
 800eefc:	bc09      	pop	{r0, r3}
 800eefe:	6819      	ldr	r1, [r3, #0]
 800ef00:	6808      	ldr	r0, [r1, #0]
 800ef02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef06:	f01e 0f10 	tst.w	lr, #16
 800ef0a:	bf08      	it	eq
 800ef0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef10:	f380 8809 	msr	PSP, r0
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	f3af 8000 	nop.w

0800ef20 <pxCurrentTCBConst>:
 800ef20:	200017a8 	.word	0x200017a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop

0800ef28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef32:	f383 8811 	msr	BASEPRI, r3
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	f3bf 8f4f 	dsb	sy
 800ef3e:	607b      	str	r3, [r7, #4]
}
 800ef40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef42:	f7fe fdd9 	bl	800daf8 <xTaskIncrementTick>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d003      	beq.n	800ef54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef4c:	4b06      	ldr	r3, [pc, #24]	@ (800ef68 <xPortSysTickHandler+0x40>)
 800ef4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	2300      	movs	r3, #0
 800ef56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	f383 8811 	msr	BASEPRI, r3
}
 800ef5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	e000ed04 	.word	0xe000ed04

0800ef6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef70:	4b0b      	ldr	r3, [pc, #44]	@ (800efa0 <vPortSetupTimerInterrupt+0x34>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef76:	4b0b      	ldr	r3, [pc, #44]	@ (800efa4 <vPortSetupTimerInterrupt+0x38>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef7c:	4b0a      	ldr	r3, [pc, #40]	@ (800efa8 <vPortSetupTimerInterrupt+0x3c>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a0a      	ldr	r2, [pc, #40]	@ (800efac <vPortSetupTimerInterrupt+0x40>)
 800ef82:	fba2 2303 	umull	r2, r3, r2, r3
 800ef86:	099b      	lsrs	r3, r3, #6
 800ef88:	4a09      	ldr	r2, [pc, #36]	@ (800efb0 <vPortSetupTimerInterrupt+0x44>)
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef8e:	4b04      	ldr	r3, [pc, #16]	@ (800efa0 <vPortSetupTimerInterrupt+0x34>)
 800ef90:	2207      	movs	r2, #7
 800ef92:	601a      	str	r2, [r3, #0]
}
 800ef94:	bf00      	nop
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	e000e010 	.word	0xe000e010
 800efa4:	e000e018 	.word	0xe000e018
 800efa8:	20000060 	.word	0x20000060
 800efac:	10624dd3 	.word	0x10624dd3
 800efb0:	e000e014 	.word	0xe000e014

0800efb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800efb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800efc4 <vPortEnableVFP+0x10>
 800efb8:	6801      	ldr	r1, [r0, #0]
 800efba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800efbe:	6001      	str	r1, [r0, #0]
 800efc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800efc2:	bf00      	nop
 800efc4:	e000ed88 	.word	0xe000ed88

0800efc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800efc8:	b480      	push	{r7}
 800efca:	b085      	sub	sp, #20
 800efcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800efce:	f3ef 8305 	mrs	r3, IPSR
 800efd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b0f      	cmp	r3, #15
 800efd8:	d915      	bls.n	800f006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800efda:	4a18      	ldr	r2, [pc, #96]	@ (800f03c <vPortValidateInterruptPriority+0x74>)
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	4413      	add	r3, r2
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efe4:	4b16      	ldr	r3, [pc, #88]	@ (800f040 <vPortValidateInterruptPriority+0x78>)
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	7afa      	ldrb	r2, [r7, #11]
 800efea:	429a      	cmp	r2, r3
 800efec:	d20b      	bcs.n	800f006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800efee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	607b      	str	r3, [r7, #4]
}
 800f000:	bf00      	nop
 800f002:	bf00      	nop
 800f004:	e7fd      	b.n	800f002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f006:	4b0f      	ldr	r3, [pc, #60]	@ (800f044 <vPortValidateInterruptPriority+0x7c>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f00e:	4b0e      	ldr	r3, [pc, #56]	@ (800f048 <vPortValidateInterruptPriority+0x80>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	429a      	cmp	r2, r3
 800f014:	d90b      	bls.n	800f02e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	603b      	str	r3, [r7, #0]
}
 800f028:	bf00      	nop
 800f02a:	bf00      	nop
 800f02c:	e7fd      	b.n	800f02a <vPortValidateInterruptPriority+0x62>
	}
 800f02e:	bf00      	nop
 800f030:	3714      	adds	r7, #20
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	e000e3f0 	.word	0xe000e3f0
 800f040:	20001dd4 	.word	0x20001dd4
 800f044:	e000ed0c 	.word	0xe000ed0c
 800f048:	20001dd8 	.word	0x20001dd8

0800f04c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b08a      	sub	sp, #40	@ 0x28
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f054:	2300      	movs	r3, #0
 800f056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f058:	f7fe fb98 	bl	800d78c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f05c:	4b5c      	ldr	r3, [pc, #368]	@ (800f1d0 <pvPortMalloc+0x184>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d101      	bne.n	800f068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f064:	f000 f924 	bl	800f2b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f068:	4b5a      	ldr	r3, [pc, #360]	@ (800f1d4 <pvPortMalloc+0x188>)
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4013      	ands	r3, r2
 800f070:	2b00      	cmp	r3, #0
 800f072:	f040 8095 	bne.w	800f1a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d01e      	beq.n	800f0ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f07c:	2208      	movs	r2, #8
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4413      	add	r3, r2
 800f082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f003 0307 	and.w	r3, r3, #7
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d015      	beq.n	800f0ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f023 0307 	bic.w	r3, r3, #7
 800f094:	3308      	adds	r3, #8
 800f096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f003 0307 	and.w	r3, r3, #7
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00b      	beq.n	800f0ba <pvPortMalloc+0x6e>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	617b      	str	r3, [r7, #20]
}
 800f0b4:	bf00      	nop
 800f0b6:	bf00      	nop
 800f0b8:	e7fd      	b.n	800f0b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d06f      	beq.n	800f1a0 <pvPortMalloc+0x154>
 800f0c0:	4b45      	ldr	r3, [pc, #276]	@ (800f1d8 <pvPortMalloc+0x18c>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d86a      	bhi.n	800f1a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f0ca:	4b44      	ldr	r3, [pc, #272]	@ (800f1dc <pvPortMalloc+0x190>)
 800f0cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f0ce:	4b43      	ldr	r3, [pc, #268]	@ (800f1dc <pvPortMalloc+0x190>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0d4:	e004      	b.n	800f0e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d903      	bls.n	800f0f2 <pvPortMalloc+0xa6>
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1f1      	bne.n	800f0d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f0f2:	4b37      	ldr	r3, [pc, #220]	@ (800f1d0 <pvPortMalloc+0x184>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d051      	beq.n	800f1a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2208      	movs	r2, #8
 800f102:	4413      	add	r3, r2
 800f104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	1ad2      	subs	r2, r2, r3
 800f116:	2308      	movs	r3, #8
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d920      	bls.n	800f160 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f11e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4413      	add	r3, r2
 800f124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	f003 0307 	and.w	r3, r3, #7
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00b      	beq.n	800f148 <pvPortMalloc+0xfc>
	__asm volatile
 800f130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f134:	f383 8811 	msr	BASEPRI, r3
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	f3bf 8f4f 	dsb	sy
 800f140:	613b      	str	r3, [r7, #16]
}
 800f142:	bf00      	nop
 800f144:	bf00      	nop
 800f146:	e7fd      	b.n	800f144 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	1ad2      	subs	r2, r2, r3
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f15a:	69b8      	ldr	r0, [r7, #24]
 800f15c:	f000 f90a 	bl	800f374 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f160:	4b1d      	ldr	r3, [pc, #116]	@ (800f1d8 <pvPortMalloc+0x18c>)
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	4a1b      	ldr	r2, [pc, #108]	@ (800f1d8 <pvPortMalloc+0x18c>)
 800f16c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f16e:	4b1a      	ldr	r3, [pc, #104]	@ (800f1d8 <pvPortMalloc+0x18c>)
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	4b1b      	ldr	r3, [pc, #108]	@ (800f1e0 <pvPortMalloc+0x194>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	429a      	cmp	r2, r3
 800f178:	d203      	bcs.n	800f182 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f17a:	4b17      	ldr	r3, [pc, #92]	@ (800f1d8 <pvPortMalloc+0x18c>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a18      	ldr	r2, [pc, #96]	@ (800f1e0 <pvPortMalloc+0x194>)
 800f180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f184:	685a      	ldr	r2, [r3, #4]
 800f186:	4b13      	ldr	r3, [pc, #76]	@ (800f1d4 <pvPortMalloc+0x188>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	431a      	orrs	r2, r3
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f192:	2200      	movs	r2, #0
 800f194:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f196:	4b13      	ldr	r3, [pc, #76]	@ (800f1e4 <pvPortMalloc+0x198>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	3301      	adds	r3, #1
 800f19c:	4a11      	ldr	r2, [pc, #68]	@ (800f1e4 <pvPortMalloc+0x198>)
 800f19e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f1a0:	f7fe fb02 	bl	800d7a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	f003 0307 	and.w	r3, r3, #7
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00b      	beq.n	800f1c6 <pvPortMalloc+0x17a>
	__asm volatile
 800f1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b2:	f383 8811 	msr	BASEPRI, r3
 800f1b6:	f3bf 8f6f 	isb	sy
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	60fb      	str	r3, [r7, #12]
}
 800f1c0:	bf00      	nop
 800f1c2:	bf00      	nop
 800f1c4:	e7fd      	b.n	800f1c2 <pvPortMalloc+0x176>
	return pvReturn;
 800f1c6:	69fb      	ldr	r3, [r7, #28]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3728      	adds	r7, #40	@ 0x28
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	200059e4 	.word	0x200059e4
 800f1d4:	200059f8 	.word	0x200059f8
 800f1d8:	200059e8 	.word	0x200059e8
 800f1dc:	200059dc 	.word	0x200059dc
 800f1e0:	200059ec 	.word	0x200059ec
 800f1e4:	200059f0 	.word	0x200059f0

0800f1e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d04f      	beq.n	800f29a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1fa:	2308      	movs	r3, #8
 800f1fc:	425b      	negs	r3, r3
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	4413      	add	r3, r2
 800f202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	685a      	ldr	r2, [r3, #4]
 800f20c:	4b25      	ldr	r3, [pc, #148]	@ (800f2a4 <vPortFree+0xbc>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4013      	ands	r3, r2
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10b      	bne.n	800f22e <vPortFree+0x46>
	__asm volatile
 800f216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	60fb      	str	r3, [r7, #12]
}
 800f228:	bf00      	nop
 800f22a:	bf00      	nop
 800f22c:	e7fd      	b.n	800f22a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00b      	beq.n	800f24e <vPortFree+0x66>
	__asm volatile
 800f236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f23a:	f383 8811 	msr	BASEPRI, r3
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	f3bf 8f4f 	dsb	sy
 800f246:	60bb      	str	r3, [r7, #8]
}
 800f248:	bf00      	nop
 800f24a:	bf00      	nop
 800f24c:	e7fd      	b.n	800f24a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	685a      	ldr	r2, [r3, #4]
 800f252:	4b14      	ldr	r3, [pc, #80]	@ (800f2a4 <vPortFree+0xbc>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	4013      	ands	r3, r2
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d01e      	beq.n	800f29a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d11a      	bne.n	800f29a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	685a      	ldr	r2, [r3, #4]
 800f268:	4b0e      	ldr	r3, [pc, #56]	@ (800f2a4 <vPortFree+0xbc>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	43db      	mvns	r3, r3
 800f26e:	401a      	ands	r2, r3
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f274:	f7fe fa8a 	bl	800d78c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	685a      	ldr	r2, [r3, #4]
 800f27c:	4b0a      	ldr	r3, [pc, #40]	@ (800f2a8 <vPortFree+0xc0>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4413      	add	r3, r2
 800f282:	4a09      	ldr	r2, [pc, #36]	@ (800f2a8 <vPortFree+0xc0>)
 800f284:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f286:	6938      	ldr	r0, [r7, #16]
 800f288:	f000 f874 	bl	800f374 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f28c:	4b07      	ldr	r3, [pc, #28]	@ (800f2ac <vPortFree+0xc4>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	3301      	adds	r3, #1
 800f292:	4a06      	ldr	r2, [pc, #24]	@ (800f2ac <vPortFree+0xc4>)
 800f294:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f296:	f7fe fa87 	bl	800d7a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f29a:	bf00      	nop
 800f29c:	3718      	adds	r7, #24
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	200059f8 	.word	0x200059f8
 800f2a8:	200059e8 	.word	0x200059e8
 800f2ac:	200059f4 	.word	0x200059f4

0800f2b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f2ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2bc:	4b27      	ldr	r3, [pc, #156]	@ (800f35c <prvHeapInit+0xac>)
 800f2be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f003 0307 	and.w	r3, r3, #7
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00c      	beq.n	800f2e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	3307      	adds	r3, #7
 800f2ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f023 0307 	bic.w	r3, r3, #7
 800f2d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	4a1f      	ldr	r2, [pc, #124]	@ (800f35c <prvHeapInit+0xac>)
 800f2e0:	4413      	add	r3, r2
 800f2e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f360 <prvHeapInit+0xb0>)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f2ee:	4b1c      	ldr	r3, [pc, #112]	@ (800f360 <prvHeapInit+0xb0>)
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	68ba      	ldr	r2, [r7, #8]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f2fc:	2208      	movs	r2, #8
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	1a9b      	subs	r3, r3, r2
 800f302:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f023 0307 	bic.w	r3, r3, #7
 800f30a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	4a15      	ldr	r2, [pc, #84]	@ (800f364 <prvHeapInit+0xb4>)
 800f310:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f312:	4b14      	ldr	r3, [pc, #80]	@ (800f364 <prvHeapInit+0xb4>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2200      	movs	r2, #0
 800f318:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f31a:	4b12      	ldr	r3, [pc, #72]	@ (800f364 <prvHeapInit+0xb4>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2200      	movs	r2, #0
 800f320:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	1ad2      	subs	r2, r2, r3
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f330:	4b0c      	ldr	r3, [pc, #48]	@ (800f364 <prvHeapInit+0xb4>)
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	4a0a      	ldr	r2, [pc, #40]	@ (800f368 <prvHeapInit+0xb8>)
 800f33e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	4a09      	ldr	r2, [pc, #36]	@ (800f36c <prvHeapInit+0xbc>)
 800f346:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f348:	4b09      	ldr	r3, [pc, #36]	@ (800f370 <prvHeapInit+0xc0>)
 800f34a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f34e:	601a      	str	r2, [r3, #0]
}
 800f350:	bf00      	nop
 800f352:	3714      	adds	r7, #20
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr
 800f35c:	20001ddc 	.word	0x20001ddc
 800f360:	200059dc 	.word	0x200059dc
 800f364:	200059e4 	.word	0x200059e4
 800f368:	200059ec 	.word	0x200059ec
 800f36c:	200059e8 	.word	0x200059e8
 800f370:	200059f8 	.word	0x200059f8

0800f374 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f374:	b480      	push	{r7}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f37c:	4b28      	ldr	r3, [pc, #160]	@ (800f420 <prvInsertBlockIntoFreeList+0xac>)
 800f37e:	60fb      	str	r3, [r7, #12]
 800f380:	e002      	b.n	800f388 <prvInsertBlockIntoFreeList+0x14>
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	60fb      	str	r3, [r7, #12]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d8f7      	bhi.n	800f382 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	68ba      	ldr	r2, [r7, #8]
 800f39c:	4413      	add	r3, r2
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d108      	bne.n	800f3b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	685a      	ldr	r2, [r3, #4]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	441a      	add	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	441a      	add	r2, r3
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d118      	bne.n	800f3fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	4b15      	ldr	r3, [pc, #84]	@ (800f424 <prvInsertBlockIntoFreeList+0xb0>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d00d      	beq.n	800f3f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	685a      	ldr	r2, [r3, #4]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	441a      	add	r2, r3
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	601a      	str	r2, [r3, #0]
 800f3f0:	e008      	b.n	800f404 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800f424 <prvInsertBlockIntoFreeList+0xb0>)
 800f3f4:	681a      	ldr	r2, [r3, #0]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	601a      	str	r2, [r3, #0]
 800f3fa:	e003      	b.n	800f404 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d002      	beq.n	800f412 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f412:	bf00      	nop
 800f414:	3714      	adds	r7, #20
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	200059dc 	.word	0x200059dc
 800f424:	200059e4 	.word	0x200059e4

0800f428 <__cvt>:
 800f428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f42c:	ec57 6b10 	vmov	r6, r7, d0
 800f430:	2f00      	cmp	r7, #0
 800f432:	460c      	mov	r4, r1
 800f434:	4619      	mov	r1, r3
 800f436:	463b      	mov	r3, r7
 800f438:	bfbb      	ittet	lt
 800f43a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f43e:	461f      	movlt	r7, r3
 800f440:	2300      	movge	r3, #0
 800f442:	232d      	movlt	r3, #45	@ 0x2d
 800f444:	700b      	strb	r3, [r1, #0]
 800f446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f448:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f44c:	4691      	mov	r9, r2
 800f44e:	f023 0820 	bic.w	r8, r3, #32
 800f452:	bfbc      	itt	lt
 800f454:	4632      	movlt	r2, r6
 800f456:	4616      	movlt	r6, r2
 800f458:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f45c:	d005      	beq.n	800f46a <__cvt+0x42>
 800f45e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f462:	d100      	bne.n	800f466 <__cvt+0x3e>
 800f464:	3401      	adds	r4, #1
 800f466:	2102      	movs	r1, #2
 800f468:	e000      	b.n	800f46c <__cvt+0x44>
 800f46a:	2103      	movs	r1, #3
 800f46c:	ab03      	add	r3, sp, #12
 800f46e:	9301      	str	r3, [sp, #4]
 800f470:	ab02      	add	r3, sp, #8
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	ec47 6b10 	vmov	d0, r6, r7
 800f478:	4653      	mov	r3, sl
 800f47a:	4622      	mov	r2, r4
 800f47c:	f000 fe34 	bl	80100e8 <_dtoa_r>
 800f480:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f484:	4605      	mov	r5, r0
 800f486:	d119      	bne.n	800f4bc <__cvt+0x94>
 800f488:	f019 0f01 	tst.w	r9, #1
 800f48c:	d00e      	beq.n	800f4ac <__cvt+0x84>
 800f48e:	eb00 0904 	add.w	r9, r0, r4
 800f492:	2200      	movs	r2, #0
 800f494:	2300      	movs	r3, #0
 800f496:	4630      	mov	r0, r6
 800f498:	4639      	mov	r1, r7
 800f49a:	f7f1 fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 800f49e:	b108      	cbz	r0, 800f4a4 <__cvt+0x7c>
 800f4a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4a4:	2230      	movs	r2, #48	@ 0x30
 800f4a6:	9b03      	ldr	r3, [sp, #12]
 800f4a8:	454b      	cmp	r3, r9
 800f4aa:	d31e      	bcc.n	800f4ea <__cvt+0xc2>
 800f4ac:	9b03      	ldr	r3, [sp, #12]
 800f4ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4b0:	1b5b      	subs	r3, r3, r5
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	6013      	str	r3, [r2, #0]
 800f4b6:	b004      	add	sp, #16
 800f4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f4c0:	eb00 0904 	add.w	r9, r0, r4
 800f4c4:	d1e5      	bne.n	800f492 <__cvt+0x6a>
 800f4c6:	7803      	ldrb	r3, [r0, #0]
 800f4c8:	2b30      	cmp	r3, #48	@ 0x30
 800f4ca:	d10a      	bne.n	800f4e2 <__cvt+0xba>
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	f7f1 faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4d8:	b918      	cbnz	r0, 800f4e2 <__cvt+0xba>
 800f4da:	f1c4 0401 	rsb	r4, r4, #1
 800f4de:	f8ca 4000 	str.w	r4, [sl]
 800f4e2:	f8da 3000 	ldr.w	r3, [sl]
 800f4e6:	4499      	add	r9, r3
 800f4e8:	e7d3      	b.n	800f492 <__cvt+0x6a>
 800f4ea:	1c59      	adds	r1, r3, #1
 800f4ec:	9103      	str	r1, [sp, #12]
 800f4ee:	701a      	strb	r2, [r3, #0]
 800f4f0:	e7d9      	b.n	800f4a6 <__cvt+0x7e>

0800f4f2 <__exponent>:
 800f4f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4f4:	2900      	cmp	r1, #0
 800f4f6:	bfba      	itte	lt
 800f4f8:	4249      	neglt	r1, r1
 800f4fa:	232d      	movlt	r3, #45	@ 0x2d
 800f4fc:	232b      	movge	r3, #43	@ 0x2b
 800f4fe:	2909      	cmp	r1, #9
 800f500:	7002      	strb	r2, [r0, #0]
 800f502:	7043      	strb	r3, [r0, #1]
 800f504:	dd29      	ble.n	800f55a <__exponent+0x68>
 800f506:	f10d 0307 	add.w	r3, sp, #7
 800f50a:	461d      	mov	r5, r3
 800f50c:	270a      	movs	r7, #10
 800f50e:	461a      	mov	r2, r3
 800f510:	fbb1 f6f7 	udiv	r6, r1, r7
 800f514:	fb07 1416 	mls	r4, r7, r6, r1
 800f518:	3430      	adds	r4, #48	@ 0x30
 800f51a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f51e:	460c      	mov	r4, r1
 800f520:	2c63      	cmp	r4, #99	@ 0x63
 800f522:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f526:	4631      	mov	r1, r6
 800f528:	dcf1      	bgt.n	800f50e <__exponent+0x1c>
 800f52a:	3130      	adds	r1, #48	@ 0x30
 800f52c:	1e94      	subs	r4, r2, #2
 800f52e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f532:	1c41      	adds	r1, r0, #1
 800f534:	4623      	mov	r3, r4
 800f536:	42ab      	cmp	r3, r5
 800f538:	d30a      	bcc.n	800f550 <__exponent+0x5e>
 800f53a:	f10d 0309 	add.w	r3, sp, #9
 800f53e:	1a9b      	subs	r3, r3, r2
 800f540:	42ac      	cmp	r4, r5
 800f542:	bf88      	it	hi
 800f544:	2300      	movhi	r3, #0
 800f546:	3302      	adds	r3, #2
 800f548:	4403      	add	r3, r0
 800f54a:	1a18      	subs	r0, r3, r0
 800f54c:	b003      	add	sp, #12
 800f54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f550:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f554:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f558:	e7ed      	b.n	800f536 <__exponent+0x44>
 800f55a:	2330      	movs	r3, #48	@ 0x30
 800f55c:	3130      	adds	r1, #48	@ 0x30
 800f55e:	7083      	strb	r3, [r0, #2]
 800f560:	70c1      	strb	r1, [r0, #3]
 800f562:	1d03      	adds	r3, r0, #4
 800f564:	e7f1      	b.n	800f54a <__exponent+0x58>
	...

0800f568 <_printf_float>:
 800f568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56c:	b08d      	sub	sp, #52	@ 0x34
 800f56e:	460c      	mov	r4, r1
 800f570:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f574:	4616      	mov	r6, r2
 800f576:	461f      	mov	r7, r3
 800f578:	4605      	mov	r5, r0
 800f57a:	f000 fc97 	bl	800feac <_localeconv_r>
 800f57e:	6803      	ldr	r3, [r0, #0]
 800f580:	9304      	str	r3, [sp, #16]
 800f582:	4618      	mov	r0, r3
 800f584:	f7f0 fe74 	bl	8000270 <strlen>
 800f588:	2300      	movs	r3, #0
 800f58a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f58c:	f8d8 3000 	ldr.w	r3, [r8]
 800f590:	9005      	str	r0, [sp, #20]
 800f592:	3307      	adds	r3, #7
 800f594:	f023 0307 	bic.w	r3, r3, #7
 800f598:	f103 0208 	add.w	r2, r3, #8
 800f59c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f5a0:	f8d4 b000 	ldr.w	fp, [r4]
 800f5a4:	f8c8 2000 	str.w	r2, [r8]
 800f5a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f5b0:	9307      	str	r3, [sp, #28]
 800f5b2:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f5ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5be:	4b9c      	ldr	r3, [pc, #624]	@ (800f830 <_printf_float+0x2c8>)
 800f5c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5c4:	f7f1 fab2 	bl	8000b2c <__aeabi_dcmpun>
 800f5c8:	bb70      	cbnz	r0, 800f628 <_printf_float+0xc0>
 800f5ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5ce:	4b98      	ldr	r3, [pc, #608]	@ (800f830 <_printf_float+0x2c8>)
 800f5d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5d4:	f7f1 fa8c 	bl	8000af0 <__aeabi_dcmple>
 800f5d8:	bb30      	cbnz	r0, 800f628 <_printf_float+0xc0>
 800f5da:	2200      	movs	r2, #0
 800f5dc:	2300      	movs	r3, #0
 800f5de:	4640      	mov	r0, r8
 800f5e0:	4649      	mov	r1, r9
 800f5e2:	f7f1 fa7b 	bl	8000adc <__aeabi_dcmplt>
 800f5e6:	b110      	cbz	r0, 800f5ee <_printf_float+0x86>
 800f5e8:	232d      	movs	r3, #45	@ 0x2d
 800f5ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5ee:	4a91      	ldr	r2, [pc, #580]	@ (800f834 <_printf_float+0x2cc>)
 800f5f0:	4b91      	ldr	r3, [pc, #580]	@ (800f838 <_printf_float+0x2d0>)
 800f5f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f5f6:	bf94      	ite	ls
 800f5f8:	4690      	movls	r8, r2
 800f5fa:	4698      	movhi	r8, r3
 800f5fc:	2303      	movs	r3, #3
 800f5fe:	6123      	str	r3, [r4, #16]
 800f600:	f02b 0304 	bic.w	r3, fp, #4
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	f04f 0900 	mov.w	r9, #0
 800f60a:	9700      	str	r7, [sp, #0]
 800f60c:	4633      	mov	r3, r6
 800f60e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f610:	4621      	mov	r1, r4
 800f612:	4628      	mov	r0, r5
 800f614:	f000 f9d2 	bl	800f9bc <_printf_common>
 800f618:	3001      	adds	r0, #1
 800f61a:	f040 808d 	bne.w	800f738 <_printf_float+0x1d0>
 800f61e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f622:	b00d      	add	sp, #52	@ 0x34
 800f624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f628:	4642      	mov	r2, r8
 800f62a:	464b      	mov	r3, r9
 800f62c:	4640      	mov	r0, r8
 800f62e:	4649      	mov	r1, r9
 800f630:	f7f1 fa7c 	bl	8000b2c <__aeabi_dcmpun>
 800f634:	b140      	cbz	r0, 800f648 <_printf_float+0xe0>
 800f636:	464b      	mov	r3, r9
 800f638:	2b00      	cmp	r3, #0
 800f63a:	bfbc      	itt	lt
 800f63c:	232d      	movlt	r3, #45	@ 0x2d
 800f63e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f642:	4a7e      	ldr	r2, [pc, #504]	@ (800f83c <_printf_float+0x2d4>)
 800f644:	4b7e      	ldr	r3, [pc, #504]	@ (800f840 <_printf_float+0x2d8>)
 800f646:	e7d4      	b.n	800f5f2 <_printf_float+0x8a>
 800f648:	6863      	ldr	r3, [r4, #4]
 800f64a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f64e:	9206      	str	r2, [sp, #24]
 800f650:	1c5a      	adds	r2, r3, #1
 800f652:	d13b      	bne.n	800f6cc <_printf_float+0x164>
 800f654:	2306      	movs	r3, #6
 800f656:	6063      	str	r3, [r4, #4]
 800f658:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f65c:	2300      	movs	r3, #0
 800f65e:	6022      	str	r2, [r4, #0]
 800f660:	9303      	str	r3, [sp, #12]
 800f662:	ab0a      	add	r3, sp, #40	@ 0x28
 800f664:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f668:	ab09      	add	r3, sp, #36	@ 0x24
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	6861      	ldr	r1, [r4, #4]
 800f66e:	ec49 8b10 	vmov	d0, r8, r9
 800f672:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f676:	4628      	mov	r0, r5
 800f678:	f7ff fed6 	bl	800f428 <__cvt>
 800f67c:	9b06      	ldr	r3, [sp, #24]
 800f67e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f680:	2b47      	cmp	r3, #71	@ 0x47
 800f682:	4680      	mov	r8, r0
 800f684:	d129      	bne.n	800f6da <_printf_float+0x172>
 800f686:	1cc8      	adds	r0, r1, #3
 800f688:	db02      	blt.n	800f690 <_printf_float+0x128>
 800f68a:	6863      	ldr	r3, [r4, #4]
 800f68c:	4299      	cmp	r1, r3
 800f68e:	dd41      	ble.n	800f714 <_printf_float+0x1ac>
 800f690:	f1aa 0a02 	sub.w	sl, sl, #2
 800f694:	fa5f fa8a 	uxtb.w	sl, sl
 800f698:	3901      	subs	r1, #1
 800f69a:	4652      	mov	r2, sl
 800f69c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f6a0:	9109      	str	r1, [sp, #36]	@ 0x24
 800f6a2:	f7ff ff26 	bl	800f4f2 <__exponent>
 800f6a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6a8:	1813      	adds	r3, r2, r0
 800f6aa:	2a01      	cmp	r2, #1
 800f6ac:	4681      	mov	r9, r0
 800f6ae:	6123      	str	r3, [r4, #16]
 800f6b0:	dc02      	bgt.n	800f6b8 <_printf_float+0x150>
 800f6b2:	6822      	ldr	r2, [r4, #0]
 800f6b4:	07d2      	lsls	r2, r2, #31
 800f6b6:	d501      	bpl.n	800f6bc <_printf_float+0x154>
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	6123      	str	r3, [r4, #16]
 800f6bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d0a2      	beq.n	800f60a <_printf_float+0xa2>
 800f6c4:	232d      	movs	r3, #45	@ 0x2d
 800f6c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6ca:	e79e      	b.n	800f60a <_printf_float+0xa2>
 800f6cc:	9a06      	ldr	r2, [sp, #24]
 800f6ce:	2a47      	cmp	r2, #71	@ 0x47
 800f6d0:	d1c2      	bne.n	800f658 <_printf_float+0xf0>
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1c0      	bne.n	800f658 <_printf_float+0xf0>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e7bd      	b.n	800f656 <_printf_float+0xee>
 800f6da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f6de:	d9db      	bls.n	800f698 <_printf_float+0x130>
 800f6e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f6e4:	d118      	bne.n	800f718 <_printf_float+0x1b0>
 800f6e6:	2900      	cmp	r1, #0
 800f6e8:	6863      	ldr	r3, [r4, #4]
 800f6ea:	dd0b      	ble.n	800f704 <_printf_float+0x19c>
 800f6ec:	6121      	str	r1, [r4, #16]
 800f6ee:	b913      	cbnz	r3, 800f6f6 <_printf_float+0x18e>
 800f6f0:	6822      	ldr	r2, [r4, #0]
 800f6f2:	07d0      	lsls	r0, r2, #31
 800f6f4:	d502      	bpl.n	800f6fc <_printf_float+0x194>
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	440b      	add	r3, r1
 800f6fa:	6123      	str	r3, [r4, #16]
 800f6fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f6fe:	f04f 0900 	mov.w	r9, #0
 800f702:	e7db      	b.n	800f6bc <_printf_float+0x154>
 800f704:	b913      	cbnz	r3, 800f70c <_printf_float+0x1a4>
 800f706:	6822      	ldr	r2, [r4, #0]
 800f708:	07d2      	lsls	r2, r2, #31
 800f70a:	d501      	bpl.n	800f710 <_printf_float+0x1a8>
 800f70c:	3302      	adds	r3, #2
 800f70e:	e7f4      	b.n	800f6fa <_printf_float+0x192>
 800f710:	2301      	movs	r3, #1
 800f712:	e7f2      	b.n	800f6fa <_printf_float+0x192>
 800f714:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f71a:	4299      	cmp	r1, r3
 800f71c:	db05      	blt.n	800f72a <_printf_float+0x1c2>
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	6121      	str	r1, [r4, #16]
 800f722:	07d8      	lsls	r0, r3, #31
 800f724:	d5ea      	bpl.n	800f6fc <_printf_float+0x194>
 800f726:	1c4b      	adds	r3, r1, #1
 800f728:	e7e7      	b.n	800f6fa <_printf_float+0x192>
 800f72a:	2900      	cmp	r1, #0
 800f72c:	bfd4      	ite	le
 800f72e:	f1c1 0202 	rsble	r2, r1, #2
 800f732:	2201      	movgt	r2, #1
 800f734:	4413      	add	r3, r2
 800f736:	e7e0      	b.n	800f6fa <_printf_float+0x192>
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	055a      	lsls	r2, r3, #21
 800f73c:	d407      	bmi.n	800f74e <_printf_float+0x1e6>
 800f73e:	6923      	ldr	r3, [r4, #16]
 800f740:	4642      	mov	r2, r8
 800f742:	4631      	mov	r1, r6
 800f744:	4628      	mov	r0, r5
 800f746:	47b8      	blx	r7
 800f748:	3001      	adds	r0, #1
 800f74a:	d12b      	bne.n	800f7a4 <_printf_float+0x23c>
 800f74c:	e767      	b.n	800f61e <_printf_float+0xb6>
 800f74e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f752:	f240 80dd 	bls.w	800f910 <_printf_float+0x3a8>
 800f756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f75a:	2200      	movs	r2, #0
 800f75c:	2300      	movs	r3, #0
 800f75e:	f7f1 f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f762:	2800      	cmp	r0, #0
 800f764:	d033      	beq.n	800f7ce <_printf_float+0x266>
 800f766:	4a37      	ldr	r2, [pc, #220]	@ (800f844 <_printf_float+0x2dc>)
 800f768:	2301      	movs	r3, #1
 800f76a:	4631      	mov	r1, r6
 800f76c:	4628      	mov	r0, r5
 800f76e:	47b8      	blx	r7
 800f770:	3001      	adds	r0, #1
 800f772:	f43f af54 	beq.w	800f61e <_printf_float+0xb6>
 800f776:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f77a:	4543      	cmp	r3, r8
 800f77c:	db02      	blt.n	800f784 <_printf_float+0x21c>
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	07d8      	lsls	r0, r3, #31
 800f782:	d50f      	bpl.n	800f7a4 <_printf_float+0x23c>
 800f784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f788:	4631      	mov	r1, r6
 800f78a:	4628      	mov	r0, r5
 800f78c:	47b8      	blx	r7
 800f78e:	3001      	adds	r0, #1
 800f790:	f43f af45 	beq.w	800f61e <_printf_float+0xb6>
 800f794:	f04f 0900 	mov.w	r9, #0
 800f798:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f79c:	f104 0a1a 	add.w	sl, r4, #26
 800f7a0:	45c8      	cmp	r8, r9
 800f7a2:	dc09      	bgt.n	800f7b8 <_printf_float+0x250>
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	079b      	lsls	r3, r3, #30
 800f7a8:	f100 8103 	bmi.w	800f9b2 <_printf_float+0x44a>
 800f7ac:	68e0      	ldr	r0, [r4, #12]
 800f7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7b0:	4298      	cmp	r0, r3
 800f7b2:	bfb8      	it	lt
 800f7b4:	4618      	movlt	r0, r3
 800f7b6:	e734      	b.n	800f622 <_printf_float+0xba>
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	4652      	mov	r2, sl
 800f7bc:	4631      	mov	r1, r6
 800f7be:	4628      	mov	r0, r5
 800f7c0:	47b8      	blx	r7
 800f7c2:	3001      	adds	r0, #1
 800f7c4:	f43f af2b 	beq.w	800f61e <_printf_float+0xb6>
 800f7c8:	f109 0901 	add.w	r9, r9, #1
 800f7cc:	e7e8      	b.n	800f7a0 <_printf_float+0x238>
 800f7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	dc39      	bgt.n	800f848 <_printf_float+0x2e0>
 800f7d4:	4a1b      	ldr	r2, [pc, #108]	@ (800f844 <_printf_float+0x2dc>)
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4628      	mov	r0, r5
 800f7dc:	47b8      	blx	r7
 800f7de:	3001      	adds	r0, #1
 800f7e0:	f43f af1d 	beq.w	800f61e <_printf_float+0xb6>
 800f7e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f7e8:	ea59 0303 	orrs.w	r3, r9, r3
 800f7ec:	d102      	bne.n	800f7f4 <_printf_float+0x28c>
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	07d9      	lsls	r1, r3, #31
 800f7f2:	d5d7      	bpl.n	800f7a4 <_printf_float+0x23c>
 800f7f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7f8:	4631      	mov	r1, r6
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	47b8      	blx	r7
 800f7fe:	3001      	adds	r0, #1
 800f800:	f43f af0d 	beq.w	800f61e <_printf_float+0xb6>
 800f804:	f04f 0a00 	mov.w	sl, #0
 800f808:	f104 0b1a 	add.w	fp, r4, #26
 800f80c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f80e:	425b      	negs	r3, r3
 800f810:	4553      	cmp	r3, sl
 800f812:	dc01      	bgt.n	800f818 <_printf_float+0x2b0>
 800f814:	464b      	mov	r3, r9
 800f816:	e793      	b.n	800f740 <_printf_float+0x1d8>
 800f818:	2301      	movs	r3, #1
 800f81a:	465a      	mov	r2, fp
 800f81c:	4631      	mov	r1, r6
 800f81e:	4628      	mov	r0, r5
 800f820:	47b8      	blx	r7
 800f822:	3001      	adds	r0, #1
 800f824:	f43f aefb 	beq.w	800f61e <_printf_float+0xb6>
 800f828:	f10a 0a01 	add.w	sl, sl, #1
 800f82c:	e7ee      	b.n	800f80c <_printf_float+0x2a4>
 800f82e:	bf00      	nop
 800f830:	7fefffff 	.word	0x7fefffff
 800f834:	080133e0 	.word	0x080133e0
 800f838:	080133e4 	.word	0x080133e4
 800f83c:	080133e8 	.word	0x080133e8
 800f840:	080133ec 	.word	0x080133ec
 800f844:	080133f0 	.word	0x080133f0
 800f848:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f84a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f84e:	4553      	cmp	r3, sl
 800f850:	bfa8      	it	ge
 800f852:	4653      	movge	r3, sl
 800f854:	2b00      	cmp	r3, #0
 800f856:	4699      	mov	r9, r3
 800f858:	dc36      	bgt.n	800f8c8 <_printf_float+0x360>
 800f85a:	f04f 0b00 	mov.w	fp, #0
 800f85e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f862:	f104 021a 	add.w	r2, r4, #26
 800f866:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f868:	9306      	str	r3, [sp, #24]
 800f86a:	eba3 0309 	sub.w	r3, r3, r9
 800f86e:	455b      	cmp	r3, fp
 800f870:	dc31      	bgt.n	800f8d6 <_printf_float+0x36e>
 800f872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f874:	459a      	cmp	sl, r3
 800f876:	dc3a      	bgt.n	800f8ee <_printf_float+0x386>
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	07da      	lsls	r2, r3, #31
 800f87c:	d437      	bmi.n	800f8ee <_printf_float+0x386>
 800f87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f880:	ebaa 0903 	sub.w	r9, sl, r3
 800f884:	9b06      	ldr	r3, [sp, #24]
 800f886:	ebaa 0303 	sub.w	r3, sl, r3
 800f88a:	4599      	cmp	r9, r3
 800f88c:	bfa8      	it	ge
 800f88e:	4699      	movge	r9, r3
 800f890:	f1b9 0f00 	cmp.w	r9, #0
 800f894:	dc33      	bgt.n	800f8fe <_printf_float+0x396>
 800f896:	f04f 0800 	mov.w	r8, #0
 800f89a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f89e:	f104 0b1a 	add.w	fp, r4, #26
 800f8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8a4:	ebaa 0303 	sub.w	r3, sl, r3
 800f8a8:	eba3 0309 	sub.w	r3, r3, r9
 800f8ac:	4543      	cmp	r3, r8
 800f8ae:	f77f af79 	ble.w	800f7a4 <_printf_float+0x23c>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	465a      	mov	r2, fp
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	47b8      	blx	r7
 800f8bc:	3001      	adds	r0, #1
 800f8be:	f43f aeae 	beq.w	800f61e <_printf_float+0xb6>
 800f8c2:	f108 0801 	add.w	r8, r8, #1
 800f8c6:	e7ec      	b.n	800f8a2 <_printf_float+0x33a>
 800f8c8:	4642      	mov	r2, r8
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	47b8      	blx	r7
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	d1c2      	bne.n	800f85a <_printf_float+0x2f2>
 800f8d4:	e6a3      	b.n	800f61e <_printf_float+0xb6>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	4631      	mov	r1, r6
 800f8da:	4628      	mov	r0, r5
 800f8dc:	9206      	str	r2, [sp, #24]
 800f8de:	47b8      	blx	r7
 800f8e0:	3001      	adds	r0, #1
 800f8e2:	f43f ae9c 	beq.w	800f61e <_printf_float+0xb6>
 800f8e6:	9a06      	ldr	r2, [sp, #24]
 800f8e8:	f10b 0b01 	add.w	fp, fp, #1
 800f8ec:	e7bb      	b.n	800f866 <_printf_float+0x2fe>
 800f8ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8f2:	4631      	mov	r1, r6
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b8      	blx	r7
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	d1c0      	bne.n	800f87e <_printf_float+0x316>
 800f8fc:	e68f      	b.n	800f61e <_printf_float+0xb6>
 800f8fe:	9a06      	ldr	r2, [sp, #24]
 800f900:	464b      	mov	r3, r9
 800f902:	4442      	add	r2, r8
 800f904:	4631      	mov	r1, r6
 800f906:	4628      	mov	r0, r5
 800f908:	47b8      	blx	r7
 800f90a:	3001      	adds	r0, #1
 800f90c:	d1c3      	bne.n	800f896 <_printf_float+0x32e>
 800f90e:	e686      	b.n	800f61e <_printf_float+0xb6>
 800f910:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f914:	f1ba 0f01 	cmp.w	sl, #1
 800f918:	dc01      	bgt.n	800f91e <_printf_float+0x3b6>
 800f91a:	07db      	lsls	r3, r3, #31
 800f91c:	d536      	bpl.n	800f98c <_printf_float+0x424>
 800f91e:	2301      	movs	r3, #1
 800f920:	4642      	mov	r2, r8
 800f922:	4631      	mov	r1, r6
 800f924:	4628      	mov	r0, r5
 800f926:	47b8      	blx	r7
 800f928:	3001      	adds	r0, #1
 800f92a:	f43f ae78 	beq.w	800f61e <_printf_float+0xb6>
 800f92e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f932:	4631      	mov	r1, r6
 800f934:	4628      	mov	r0, r5
 800f936:	47b8      	blx	r7
 800f938:	3001      	adds	r0, #1
 800f93a:	f43f ae70 	beq.w	800f61e <_printf_float+0xb6>
 800f93e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f942:	2200      	movs	r2, #0
 800f944:	2300      	movs	r3, #0
 800f946:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f94a:	f7f1 f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800f94e:	b9c0      	cbnz	r0, 800f982 <_printf_float+0x41a>
 800f950:	4653      	mov	r3, sl
 800f952:	f108 0201 	add.w	r2, r8, #1
 800f956:	4631      	mov	r1, r6
 800f958:	4628      	mov	r0, r5
 800f95a:	47b8      	blx	r7
 800f95c:	3001      	adds	r0, #1
 800f95e:	d10c      	bne.n	800f97a <_printf_float+0x412>
 800f960:	e65d      	b.n	800f61e <_printf_float+0xb6>
 800f962:	2301      	movs	r3, #1
 800f964:	465a      	mov	r2, fp
 800f966:	4631      	mov	r1, r6
 800f968:	4628      	mov	r0, r5
 800f96a:	47b8      	blx	r7
 800f96c:	3001      	adds	r0, #1
 800f96e:	f43f ae56 	beq.w	800f61e <_printf_float+0xb6>
 800f972:	f108 0801 	add.w	r8, r8, #1
 800f976:	45d0      	cmp	r8, sl
 800f978:	dbf3      	blt.n	800f962 <_printf_float+0x3fa>
 800f97a:	464b      	mov	r3, r9
 800f97c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f980:	e6df      	b.n	800f742 <_printf_float+0x1da>
 800f982:	f04f 0800 	mov.w	r8, #0
 800f986:	f104 0b1a 	add.w	fp, r4, #26
 800f98a:	e7f4      	b.n	800f976 <_printf_float+0x40e>
 800f98c:	2301      	movs	r3, #1
 800f98e:	4642      	mov	r2, r8
 800f990:	e7e1      	b.n	800f956 <_printf_float+0x3ee>
 800f992:	2301      	movs	r3, #1
 800f994:	464a      	mov	r2, r9
 800f996:	4631      	mov	r1, r6
 800f998:	4628      	mov	r0, r5
 800f99a:	47b8      	blx	r7
 800f99c:	3001      	adds	r0, #1
 800f99e:	f43f ae3e 	beq.w	800f61e <_printf_float+0xb6>
 800f9a2:	f108 0801 	add.w	r8, r8, #1
 800f9a6:	68e3      	ldr	r3, [r4, #12]
 800f9a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9aa:	1a5b      	subs	r3, r3, r1
 800f9ac:	4543      	cmp	r3, r8
 800f9ae:	dcf0      	bgt.n	800f992 <_printf_float+0x42a>
 800f9b0:	e6fc      	b.n	800f7ac <_printf_float+0x244>
 800f9b2:	f04f 0800 	mov.w	r8, #0
 800f9b6:	f104 0919 	add.w	r9, r4, #25
 800f9ba:	e7f4      	b.n	800f9a6 <_printf_float+0x43e>

0800f9bc <_printf_common>:
 800f9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c0:	4616      	mov	r6, r2
 800f9c2:	4698      	mov	r8, r3
 800f9c4:	688a      	ldr	r2, [r1, #8]
 800f9c6:	690b      	ldr	r3, [r1, #16]
 800f9c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	bfb8      	it	lt
 800f9d0:	4613      	movlt	r3, r2
 800f9d2:	6033      	str	r3, [r6, #0]
 800f9d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f9d8:	4607      	mov	r7, r0
 800f9da:	460c      	mov	r4, r1
 800f9dc:	b10a      	cbz	r2, 800f9e2 <_printf_common+0x26>
 800f9de:	3301      	adds	r3, #1
 800f9e0:	6033      	str	r3, [r6, #0]
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	0699      	lsls	r1, r3, #26
 800f9e6:	bf42      	ittt	mi
 800f9e8:	6833      	ldrmi	r3, [r6, #0]
 800f9ea:	3302      	addmi	r3, #2
 800f9ec:	6033      	strmi	r3, [r6, #0]
 800f9ee:	6825      	ldr	r5, [r4, #0]
 800f9f0:	f015 0506 	ands.w	r5, r5, #6
 800f9f4:	d106      	bne.n	800fa04 <_printf_common+0x48>
 800f9f6:	f104 0a19 	add.w	sl, r4, #25
 800f9fa:	68e3      	ldr	r3, [r4, #12]
 800f9fc:	6832      	ldr	r2, [r6, #0]
 800f9fe:	1a9b      	subs	r3, r3, r2
 800fa00:	42ab      	cmp	r3, r5
 800fa02:	dc26      	bgt.n	800fa52 <_printf_common+0x96>
 800fa04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa08:	6822      	ldr	r2, [r4, #0]
 800fa0a:	3b00      	subs	r3, #0
 800fa0c:	bf18      	it	ne
 800fa0e:	2301      	movne	r3, #1
 800fa10:	0692      	lsls	r2, r2, #26
 800fa12:	d42b      	bmi.n	800fa6c <_printf_common+0xb0>
 800fa14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa18:	4641      	mov	r1, r8
 800fa1a:	4638      	mov	r0, r7
 800fa1c:	47c8      	blx	r9
 800fa1e:	3001      	adds	r0, #1
 800fa20:	d01e      	beq.n	800fa60 <_printf_common+0xa4>
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	6922      	ldr	r2, [r4, #16]
 800fa26:	f003 0306 	and.w	r3, r3, #6
 800fa2a:	2b04      	cmp	r3, #4
 800fa2c:	bf02      	ittt	eq
 800fa2e:	68e5      	ldreq	r5, [r4, #12]
 800fa30:	6833      	ldreq	r3, [r6, #0]
 800fa32:	1aed      	subeq	r5, r5, r3
 800fa34:	68a3      	ldr	r3, [r4, #8]
 800fa36:	bf0c      	ite	eq
 800fa38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa3c:	2500      	movne	r5, #0
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	bfc4      	itt	gt
 800fa42:	1a9b      	subgt	r3, r3, r2
 800fa44:	18ed      	addgt	r5, r5, r3
 800fa46:	2600      	movs	r6, #0
 800fa48:	341a      	adds	r4, #26
 800fa4a:	42b5      	cmp	r5, r6
 800fa4c:	d11a      	bne.n	800fa84 <_printf_common+0xc8>
 800fa4e:	2000      	movs	r0, #0
 800fa50:	e008      	b.n	800fa64 <_printf_common+0xa8>
 800fa52:	2301      	movs	r3, #1
 800fa54:	4652      	mov	r2, sl
 800fa56:	4641      	mov	r1, r8
 800fa58:	4638      	mov	r0, r7
 800fa5a:	47c8      	blx	r9
 800fa5c:	3001      	adds	r0, #1
 800fa5e:	d103      	bne.n	800fa68 <_printf_common+0xac>
 800fa60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa68:	3501      	adds	r5, #1
 800fa6a:	e7c6      	b.n	800f9fa <_printf_common+0x3e>
 800fa6c:	18e1      	adds	r1, r4, r3
 800fa6e:	1c5a      	adds	r2, r3, #1
 800fa70:	2030      	movs	r0, #48	@ 0x30
 800fa72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa76:	4422      	add	r2, r4
 800fa78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa80:	3302      	adds	r3, #2
 800fa82:	e7c7      	b.n	800fa14 <_printf_common+0x58>
 800fa84:	2301      	movs	r3, #1
 800fa86:	4622      	mov	r2, r4
 800fa88:	4641      	mov	r1, r8
 800fa8a:	4638      	mov	r0, r7
 800fa8c:	47c8      	blx	r9
 800fa8e:	3001      	adds	r0, #1
 800fa90:	d0e6      	beq.n	800fa60 <_printf_common+0xa4>
 800fa92:	3601      	adds	r6, #1
 800fa94:	e7d9      	b.n	800fa4a <_printf_common+0x8e>
	...

0800fa98 <_printf_i>:
 800fa98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa9c:	7e0f      	ldrb	r7, [r1, #24]
 800fa9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800faa0:	2f78      	cmp	r7, #120	@ 0x78
 800faa2:	4691      	mov	r9, r2
 800faa4:	4680      	mov	r8, r0
 800faa6:	460c      	mov	r4, r1
 800faa8:	469a      	mov	sl, r3
 800faaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800faae:	d807      	bhi.n	800fac0 <_printf_i+0x28>
 800fab0:	2f62      	cmp	r7, #98	@ 0x62
 800fab2:	d80a      	bhi.n	800faca <_printf_i+0x32>
 800fab4:	2f00      	cmp	r7, #0
 800fab6:	f000 80d2 	beq.w	800fc5e <_printf_i+0x1c6>
 800faba:	2f58      	cmp	r7, #88	@ 0x58
 800fabc:	f000 80b9 	beq.w	800fc32 <_printf_i+0x19a>
 800fac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fac4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fac8:	e03a      	b.n	800fb40 <_printf_i+0xa8>
 800faca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800face:	2b15      	cmp	r3, #21
 800fad0:	d8f6      	bhi.n	800fac0 <_printf_i+0x28>
 800fad2:	a101      	add	r1, pc, #4	@ (adr r1, 800fad8 <_printf_i+0x40>)
 800fad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fad8:	0800fb31 	.word	0x0800fb31
 800fadc:	0800fb45 	.word	0x0800fb45
 800fae0:	0800fac1 	.word	0x0800fac1
 800fae4:	0800fac1 	.word	0x0800fac1
 800fae8:	0800fac1 	.word	0x0800fac1
 800faec:	0800fac1 	.word	0x0800fac1
 800faf0:	0800fb45 	.word	0x0800fb45
 800faf4:	0800fac1 	.word	0x0800fac1
 800faf8:	0800fac1 	.word	0x0800fac1
 800fafc:	0800fac1 	.word	0x0800fac1
 800fb00:	0800fac1 	.word	0x0800fac1
 800fb04:	0800fc45 	.word	0x0800fc45
 800fb08:	0800fb6f 	.word	0x0800fb6f
 800fb0c:	0800fbff 	.word	0x0800fbff
 800fb10:	0800fac1 	.word	0x0800fac1
 800fb14:	0800fac1 	.word	0x0800fac1
 800fb18:	0800fc67 	.word	0x0800fc67
 800fb1c:	0800fac1 	.word	0x0800fac1
 800fb20:	0800fb6f 	.word	0x0800fb6f
 800fb24:	0800fac1 	.word	0x0800fac1
 800fb28:	0800fac1 	.word	0x0800fac1
 800fb2c:	0800fc07 	.word	0x0800fc07
 800fb30:	6833      	ldr	r3, [r6, #0]
 800fb32:	1d1a      	adds	r2, r3, #4
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	6032      	str	r2, [r6, #0]
 800fb38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb40:	2301      	movs	r3, #1
 800fb42:	e09d      	b.n	800fc80 <_printf_i+0x1e8>
 800fb44:	6833      	ldr	r3, [r6, #0]
 800fb46:	6820      	ldr	r0, [r4, #0]
 800fb48:	1d19      	adds	r1, r3, #4
 800fb4a:	6031      	str	r1, [r6, #0]
 800fb4c:	0606      	lsls	r6, r0, #24
 800fb4e:	d501      	bpl.n	800fb54 <_printf_i+0xbc>
 800fb50:	681d      	ldr	r5, [r3, #0]
 800fb52:	e003      	b.n	800fb5c <_printf_i+0xc4>
 800fb54:	0645      	lsls	r5, r0, #25
 800fb56:	d5fb      	bpl.n	800fb50 <_printf_i+0xb8>
 800fb58:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb5c:	2d00      	cmp	r5, #0
 800fb5e:	da03      	bge.n	800fb68 <_printf_i+0xd0>
 800fb60:	232d      	movs	r3, #45	@ 0x2d
 800fb62:	426d      	negs	r5, r5
 800fb64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb68:	4859      	ldr	r0, [pc, #356]	@ (800fcd0 <_printf_i+0x238>)
 800fb6a:	230a      	movs	r3, #10
 800fb6c:	e011      	b.n	800fb92 <_printf_i+0xfa>
 800fb6e:	6821      	ldr	r1, [r4, #0]
 800fb70:	6833      	ldr	r3, [r6, #0]
 800fb72:	0608      	lsls	r0, r1, #24
 800fb74:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb78:	d402      	bmi.n	800fb80 <_printf_i+0xe8>
 800fb7a:	0649      	lsls	r1, r1, #25
 800fb7c:	bf48      	it	mi
 800fb7e:	b2ad      	uxthmi	r5, r5
 800fb80:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb82:	4853      	ldr	r0, [pc, #332]	@ (800fcd0 <_printf_i+0x238>)
 800fb84:	6033      	str	r3, [r6, #0]
 800fb86:	bf14      	ite	ne
 800fb88:	230a      	movne	r3, #10
 800fb8a:	2308      	moveq	r3, #8
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fb92:	6866      	ldr	r6, [r4, #4]
 800fb94:	60a6      	str	r6, [r4, #8]
 800fb96:	2e00      	cmp	r6, #0
 800fb98:	bfa2      	ittt	ge
 800fb9a:	6821      	ldrge	r1, [r4, #0]
 800fb9c:	f021 0104 	bicge.w	r1, r1, #4
 800fba0:	6021      	strge	r1, [r4, #0]
 800fba2:	b90d      	cbnz	r5, 800fba8 <_printf_i+0x110>
 800fba4:	2e00      	cmp	r6, #0
 800fba6:	d04b      	beq.n	800fc40 <_printf_i+0x1a8>
 800fba8:	4616      	mov	r6, r2
 800fbaa:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbae:	fb03 5711 	mls	r7, r3, r1, r5
 800fbb2:	5dc7      	ldrb	r7, [r0, r7]
 800fbb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fbb8:	462f      	mov	r7, r5
 800fbba:	42bb      	cmp	r3, r7
 800fbbc:	460d      	mov	r5, r1
 800fbbe:	d9f4      	bls.n	800fbaa <_printf_i+0x112>
 800fbc0:	2b08      	cmp	r3, #8
 800fbc2:	d10b      	bne.n	800fbdc <_printf_i+0x144>
 800fbc4:	6823      	ldr	r3, [r4, #0]
 800fbc6:	07df      	lsls	r7, r3, #31
 800fbc8:	d508      	bpl.n	800fbdc <_printf_i+0x144>
 800fbca:	6923      	ldr	r3, [r4, #16]
 800fbcc:	6861      	ldr	r1, [r4, #4]
 800fbce:	4299      	cmp	r1, r3
 800fbd0:	bfde      	ittt	le
 800fbd2:	2330      	movle	r3, #48	@ 0x30
 800fbd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbd8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fbdc:	1b92      	subs	r2, r2, r6
 800fbde:	6122      	str	r2, [r4, #16]
 800fbe0:	f8cd a000 	str.w	sl, [sp]
 800fbe4:	464b      	mov	r3, r9
 800fbe6:	aa03      	add	r2, sp, #12
 800fbe8:	4621      	mov	r1, r4
 800fbea:	4640      	mov	r0, r8
 800fbec:	f7ff fee6 	bl	800f9bc <_printf_common>
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	d14a      	bne.n	800fc8a <_printf_i+0x1f2>
 800fbf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbf8:	b004      	add	sp, #16
 800fbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbfe:	6823      	ldr	r3, [r4, #0]
 800fc00:	f043 0320 	orr.w	r3, r3, #32
 800fc04:	6023      	str	r3, [r4, #0]
 800fc06:	4833      	ldr	r0, [pc, #204]	@ (800fcd4 <_printf_i+0x23c>)
 800fc08:	2778      	movs	r7, #120	@ 0x78
 800fc0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	6831      	ldr	r1, [r6, #0]
 800fc12:	061f      	lsls	r7, r3, #24
 800fc14:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc18:	d402      	bmi.n	800fc20 <_printf_i+0x188>
 800fc1a:	065f      	lsls	r7, r3, #25
 800fc1c:	bf48      	it	mi
 800fc1e:	b2ad      	uxthmi	r5, r5
 800fc20:	6031      	str	r1, [r6, #0]
 800fc22:	07d9      	lsls	r1, r3, #31
 800fc24:	bf44      	itt	mi
 800fc26:	f043 0320 	orrmi.w	r3, r3, #32
 800fc2a:	6023      	strmi	r3, [r4, #0]
 800fc2c:	b11d      	cbz	r5, 800fc36 <_printf_i+0x19e>
 800fc2e:	2310      	movs	r3, #16
 800fc30:	e7ac      	b.n	800fb8c <_printf_i+0xf4>
 800fc32:	4827      	ldr	r0, [pc, #156]	@ (800fcd0 <_printf_i+0x238>)
 800fc34:	e7e9      	b.n	800fc0a <_printf_i+0x172>
 800fc36:	6823      	ldr	r3, [r4, #0]
 800fc38:	f023 0320 	bic.w	r3, r3, #32
 800fc3c:	6023      	str	r3, [r4, #0]
 800fc3e:	e7f6      	b.n	800fc2e <_printf_i+0x196>
 800fc40:	4616      	mov	r6, r2
 800fc42:	e7bd      	b.n	800fbc0 <_printf_i+0x128>
 800fc44:	6833      	ldr	r3, [r6, #0]
 800fc46:	6825      	ldr	r5, [r4, #0]
 800fc48:	6961      	ldr	r1, [r4, #20]
 800fc4a:	1d18      	adds	r0, r3, #4
 800fc4c:	6030      	str	r0, [r6, #0]
 800fc4e:	062e      	lsls	r6, r5, #24
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	d501      	bpl.n	800fc58 <_printf_i+0x1c0>
 800fc54:	6019      	str	r1, [r3, #0]
 800fc56:	e002      	b.n	800fc5e <_printf_i+0x1c6>
 800fc58:	0668      	lsls	r0, r5, #25
 800fc5a:	d5fb      	bpl.n	800fc54 <_printf_i+0x1bc>
 800fc5c:	8019      	strh	r1, [r3, #0]
 800fc5e:	2300      	movs	r3, #0
 800fc60:	6123      	str	r3, [r4, #16]
 800fc62:	4616      	mov	r6, r2
 800fc64:	e7bc      	b.n	800fbe0 <_printf_i+0x148>
 800fc66:	6833      	ldr	r3, [r6, #0]
 800fc68:	1d1a      	adds	r2, r3, #4
 800fc6a:	6032      	str	r2, [r6, #0]
 800fc6c:	681e      	ldr	r6, [r3, #0]
 800fc6e:	6862      	ldr	r2, [r4, #4]
 800fc70:	2100      	movs	r1, #0
 800fc72:	4630      	mov	r0, r6
 800fc74:	f7f0 faac 	bl	80001d0 <memchr>
 800fc78:	b108      	cbz	r0, 800fc7e <_printf_i+0x1e6>
 800fc7a:	1b80      	subs	r0, r0, r6
 800fc7c:	6060      	str	r0, [r4, #4]
 800fc7e:	6863      	ldr	r3, [r4, #4]
 800fc80:	6123      	str	r3, [r4, #16]
 800fc82:	2300      	movs	r3, #0
 800fc84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc88:	e7aa      	b.n	800fbe0 <_printf_i+0x148>
 800fc8a:	6923      	ldr	r3, [r4, #16]
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	4649      	mov	r1, r9
 800fc90:	4640      	mov	r0, r8
 800fc92:	47d0      	blx	sl
 800fc94:	3001      	adds	r0, #1
 800fc96:	d0ad      	beq.n	800fbf4 <_printf_i+0x15c>
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	079b      	lsls	r3, r3, #30
 800fc9c:	d413      	bmi.n	800fcc6 <_printf_i+0x22e>
 800fc9e:	68e0      	ldr	r0, [r4, #12]
 800fca0:	9b03      	ldr	r3, [sp, #12]
 800fca2:	4298      	cmp	r0, r3
 800fca4:	bfb8      	it	lt
 800fca6:	4618      	movlt	r0, r3
 800fca8:	e7a6      	b.n	800fbf8 <_printf_i+0x160>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	4632      	mov	r2, r6
 800fcae:	4649      	mov	r1, r9
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	47d0      	blx	sl
 800fcb4:	3001      	adds	r0, #1
 800fcb6:	d09d      	beq.n	800fbf4 <_printf_i+0x15c>
 800fcb8:	3501      	adds	r5, #1
 800fcba:	68e3      	ldr	r3, [r4, #12]
 800fcbc:	9903      	ldr	r1, [sp, #12]
 800fcbe:	1a5b      	subs	r3, r3, r1
 800fcc0:	42ab      	cmp	r3, r5
 800fcc2:	dcf2      	bgt.n	800fcaa <_printf_i+0x212>
 800fcc4:	e7eb      	b.n	800fc9e <_printf_i+0x206>
 800fcc6:	2500      	movs	r5, #0
 800fcc8:	f104 0619 	add.w	r6, r4, #25
 800fccc:	e7f5      	b.n	800fcba <_printf_i+0x222>
 800fcce:	bf00      	nop
 800fcd0:	080133f2 	.word	0x080133f2
 800fcd4:	08013403 	.word	0x08013403

0800fcd8 <std>:
 800fcd8:	2300      	movs	r3, #0
 800fcda:	b510      	push	{r4, lr}
 800fcdc:	4604      	mov	r4, r0
 800fcde:	e9c0 3300 	strd	r3, r3, [r0]
 800fce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fce6:	6083      	str	r3, [r0, #8]
 800fce8:	8181      	strh	r1, [r0, #12]
 800fcea:	6643      	str	r3, [r0, #100]	@ 0x64
 800fcec:	81c2      	strh	r2, [r0, #14]
 800fcee:	6183      	str	r3, [r0, #24]
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	2208      	movs	r2, #8
 800fcf4:	305c      	adds	r0, #92	@ 0x5c
 800fcf6:	f000 f8d1 	bl	800fe9c <memset>
 800fcfa:	4b0d      	ldr	r3, [pc, #52]	@ (800fd30 <std+0x58>)
 800fcfc:	6263      	str	r3, [r4, #36]	@ 0x24
 800fcfe:	4b0d      	ldr	r3, [pc, #52]	@ (800fd34 <std+0x5c>)
 800fd00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd02:	4b0d      	ldr	r3, [pc, #52]	@ (800fd38 <std+0x60>)
 800fd04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd06:	4b0d      	ldr	r3, [pc, #52]	@ (800fd3c <std+0x64>)
 800fd08:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd40 <std+0x68>)
 800fd0c:	6224      	str	r4, [r4, #32]
 800fd0e:	429c      	cmp	r4, r3
 800fd10:	d006      	beq.n	800fd20 <std+0x48>
 800fd12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd16:	4294      	cmp	r4, r2
 800fd18:	d002      	beq.n	800fd20 <std+0x48>
 800fd1a:	33d0      	adds	r3, #208	@ 0xd0
 800fd1c:	429c      	cmp	r4, r3
 800fd1e:	d105      	bne.n	800fd2c <std+0x54>
 800fd20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd28:	f000 b944 	b.w	800ffb4 <__retarget_lock_init_recursive>
 800fd2c:	bd10      	pop	{r4, pc}
 800fd2e:	bf00      	nop
 800fd30:	0801197d 	.word	0x0801197d
 800fd34:	0801199f 	.word	0x0801199f
 800fd38:	080119d7 	.word	0x080119d7
 800fd3c:	080119fb 	.word	0x080119fb
 800fd40:	200059fc 	.word	0x200059fc

0800fd44 <stdio_exit_handler>:
 800fd44:	4a02      	ldr	r2, [pc, #8]	@ (800fd50 <stdio_exit_handler+0xc>)
 800fd46:	4903      	ldr	r1, [pc, #12]	@ (800fd54 <stdio_exit_handler+0x10>)
 800fd48:	4803      	ldr	r0, [pc, #12]	@ (800fd58 <stdio_exit_handler+0x14>)
 800fd4a:	f000 b869 	b.w	800fe20 <_fwalk_sglue>
 800fd4e:	bf00      	nop
 800fd50:	20000070 	.word	0x20000070
 800fd54:	08011211 	.word	0x08011211
 800fd58:	20000080 	.word	0x20000080

0800fd5c <cleanup_stdio>:
 800fd5c:	6841      	ldr	r1, [r0, #4]
 800fd5e:	4b0c      	ldr	r3, [pc, #48]	@ (800fd90 <cleanup_stdio+0x34>)
 800fd60:	4299      	cmp	r1, r3
 800fd62:	b510      	push	{r4, lr}
 800fd64:	4604      	mov	r4, r0
 800fd66:	d001      	beq.n	800fd6c <cleanup_stdio+0x10>
 800fd68:	f001 fa52 	bl	8011210 <_fflush_r>
 800fd6c:	68a1      	ldr	r1, [r4, #8]
 800fd6e:	4b09      	ldr	r3, [pc, #36]	@ (800fd94 <cleanup_stdio+0x38>)
 800fd70:	4299      	cmp	r1, r3
 800fd72:	d002      	beq.n	800fd7a <cleanup_stdio+0x1e>
 800fd74:	4620      	mov	r0, r4
 800fd76:	f001 fa4b 	bl	8011210 <_fflush_r>
 800fd7a:	68e1      	ldr	r1, [r4, #12]
 800fd7c:	4b06      	ldr	r3, [pc, #24]	@ (800fd98 <cleanup_stdio+0x3c>)
 800fd7e:	4299      	cmp	r1, r3
 800fd80:	d004      	beq.n	800fd8c <cleanup_stdio+0x30>
 800fd82:	4620      	mov	r0, r4
 800fd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd88:	f001 ba42 	b.w	8011210 <_fflush_r>
 800fd8c:	bd10      	pop	{r4, pc}
 800fd8e:	bf00      	nop
 800fd90:	200059fc 	.word	0x200059fc
 800fd94:	20005a64 	.word	0x20005a64
 800fd98:	20005acc 	.word	0x20005acc

0800fd9c <global_stdio_init.part.0>:
 800fd9c:	b510      	push	{r4, lr}
 800fd9e:	4b0b      	ldr	r3, [pc, #44]	@ (800fdcc <global_stdio_init.part.0+0x30>)
 800fda0:	4c0b      	ldr	r4, [pc, #44]	@ (800fdd0 <global_stdio_init.part.0+0x34>)
 800fda2:	4a0c      	ldr	r2, [pc, #48]	@ (800fdd4 <global_stdio_init.part.0+0x38>)
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	4620      	mov	r0, r4
 800fda8:	2200      	movs	r2, #0
 800fdaa:	2104      	movs	r1, #4
 800fdac:	f7ff ff94 	bl	800fcd8 <std>
 800fdb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	2109      	movs	r1, #9
 800fdb8:	f7ff ff8e 	bl	800fcd8 <std>
 800fdbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fdc0:	2202      	movs	r2, #2
 800fdc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdc6:	2112      	movs	r1, #18
 800fdc8:	f7ff bf86 	b.w	800fcd8 <std>
 800fdcc:	20005b34 	.word	0x20005b34
 800fdd0:	200059fc 	.word	0x200059fc
 800fdd4:	0800fd45 	.word	0x0800fd45

0800fdd8 <__sfp_lock_acquire>:
 800fdd8:	4801      	ldr	r0, [pc, #4]	@ (800fde0 <__sfp_lock_acquire+0x8>)
 800fdda:	f000 b8ec 	b.w	800ffb6 <__retarget_lock_acquire_recursive>
 800fdde:	bf00      	nop
 800fde0:	20005b3d 	.word	0x20005b3d

0800fde4 <__sfp_lock_release>:
 800fde4:	4801      	ldr	r0, [pc, #4]	@ (800fdec <__sfp_lock_release+0x8>)
 800fde6:	f000 b8e7 	b.w	800ffb8 <__retarget_lock_release_recursive>
 800fdea:	bf00      	nop
 800fdec:	20005b3d 	.word	0x20005b3d

0800fdf0 <__sinit>:
 800fdf0:	b510      	push	{r4, lr}
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	f7ff fff0 	bl	800fdd8 <__sfp_lock_acquire>
 800fdf8:	6a23      	ldr	r3, [r4, #32]
 800fdfa:	b11b      	cbz	r3, 800fe04 <__sinit+0x14>
 800fdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe00:	f7ff bff0 	b.w	800fde4 <__sfp_lock_release>
 800fe04:	4b04      	ldr	r3, [pc, #16]	@ (800fe18 <__sinit+0x28>)
 800fe06:	6223      	str	r3, [r4, #32]
 800fe08:	4b04      	ldr	r3, [pc, #16]	@ (800fe1c <__sinit+0x2c>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1f5      	bne.n	800fdfc <__sinit+0xc>
 800fe10:	f7ff ffc4 	bl	800fd9c <global_stdio_init.part.0>
 800fe14:	e7f2      	b.n	800fdfc <__sinit+0xc>
 800fe16:	bf00      	nop
 800fe18:	0800fd5d 	.word	0x0800fd5d
 800fe1c:	20005b34 	.word	0x20005b34

0800fe20 <_fwalk_sglue>:
 800fe20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe24:	4607      	mov	r7, r0
 800fe26:	4688      	mov	r8, r1
 800fe28:	4614      	mov	r4, r2
 800fe2a:	2600      	movs	r6, #0
 800fe2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe30:	f1b9 0901 	subs.w	r9, r9, #1
 800fe34:	d505      	bpl.n	800fe42 <_fwalk_sglue+0x22>
 800fe36:	6824      	ldr	r4, [r4, #0]
 800fe38:	2c00      	cmp	r4, #0
 800fe3a:	d1f7      	bne.n	800fe2c <_fwalk_sglue+0xc>
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe42:	89ab      	ldrh	r3, [r5, #12]
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d907      	bls.n	800fe58 <_fwalk_sglue+0x38>
 800fe48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	d003      	beq.n	800fe58 <_fwalk_sglue+0x38>
 800fe50:	4629      	mov	r1, r5
 800fe52:	4638      	mov	r0, r7
 800fe54:	47c0      	blx	r8
 800fe56:	4306      	orrs	r6, r0
 800fe58:	3568      	adds	r5, #104	@ 0x68
 800fe5a:	e7e9      	b.n	800fe30 <_fwalk_sglue+0x10>

0800fe5c <_vsiprintf_r>:
 800fe5c:	b500      	push	{lr}
 800fe5e:	b09b      	sub	sp, #108	@ 0x6c
 800fe60:	9100      	str	r1, [sp, #0]
 800fe62:	9104      	str	r1, [sp, #16]
 800fe64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe68:	9105      	str	r1, [sp, #20]
 800fe6a:	9102      	str	r1, [sp, #8]
 800fe6c:	4905      	ldr	r1, [pc, #20]	@ (800fe84 <_vsiprintf_r+0x28>)
 800fe6e:	9103      	str	r1, [sp, #12]
 800fe70:	4669      	mov	r1, sp
 800fe72:	f000 ffa3 	bl	8010dbc <_svfiprintf_r>
 800fe76:	9b00      	ldr	r3, [sp, #0]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	701a      	strb	r2, [r3, #0]
 800fe7c:	b01b      	add	sp, #108	@ 0x6c
 800fe7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe82:	bf00      	nop
 800fe84:	ffff0208 	.word	0xffff0208

0800fe88 <vsiprintf>:
 800fe88:	4613      	mov	r3, r2
 800fe8a:	460a      	mov	r2, r1
 800fe8c:	4601      	mov	r1, r0
 800fe8e:	4802      	ldr	r0, [pc, #8]	@ (800fe98 <vsiprintf+0x10>)
 800fe90:	6800      	ldr	r0, [r0, #0]
 800fe92:	f7ff bfe3 	b.w	800fe5c <_vsiprintf_r>
 800fe96:	bf00      	nop
 800fe98:	2000007c 	.word	0x2000007c

0800fe9c <memset>:
 800fe9c:	4402      	add	r2, r0
 800fe9e:	4603      	mov	r3, r0
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d100      	bne.n	800fea6 <memset+0xa>
 800fea4:	4770      	bx	lr
 800fea6:	f803 1b01 	strb.w	r1, [r3], #1
 800feaa:	e7f9      	b.n	800fea0 <memset+0x4>

0800feac <_localeconv_r>:
 800feac:	4800      	ldr	r0, [pc, #0]	@ (800feb0 <_localeconv_r+0x4>)
 800feae:	4770      	bx	lr
 800feb0:	200001bc 	.word	0x200001bc

0800feb4 <_reclaim_reent>:
 800feb4:	4b29      	ldr	r3, [pc, #164]	@ (800ff5c <_reclaim_reent+0xa8>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4283      	cmp	r3, r0
 800feba:	b570      	push	{r4, r5, r6, lr}
 800febc:	4604      	mov	r4, r0
 800febe:	d04b      	beq.n	800ff58 <_reclaim_reent+0xa4>
 800fec0:	69c3      	ldr	r3, [r0, #28]
 800fec2:	b1ab      	cbz	r3, 800fef0 <_reclaim_reent+0x3c>
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	b16b      	cbz	r3, 800fee4 <_reclaim_reent+0x30>
 800fec8:	2500      	movs	r5, #0
 800feca:	69e3      	ldr	r3, [r4, #28]
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	5959      	ldr	r1, [r3, r5]
 800fed0:	2900      	cmp	r1, #0
 800fed2:	d13b      	bne.n	800ff4c <_reclaim_reent+0x98>
 800fed4:	3504      	adds	r5, #4
 800fed6:	2d80      	cmp	r5, #128	@ 0x80
 800fed8:	d1f7      	bne.n	800feca <_reclaim_reent+0x16>
 800feda:	69e3      	ldr	r3, [r4, #28]
 800fedc:	4620      	mov	r0, r4
 800fede:	68d9      	ldr	r1, [r3, #12]
 800fee0:	f000 fec6 	bl	8010c70 <_free_r>
 800fee4:	69e3      	ldr	r3, [r4, #28]
 800fee6:	6819      	ldr	r1, [r3, #0]
 800fee8:	b111      	cbz	r1, 800fef0 <_reclaim_reent+0x3c>
 800feea:	4620      	mov	r0, r4
 800feec:	f000 fec0 	bl	8010c70 <_free_r>
 800fef0:	6961      	ldr	r1, [r4, #20]
 800fef2:	b111      	cbz	r1, 800fefa <_reclaim_reent+0x46>
 800fef4:	4620      	mov	r0, r4
 800fef6:	f000 febb 	bl	8010c70 <_free_r>
 800fefa:	69e1      	ldr	r1, [r4, #28]
 800fefc:	b111      	cbz	r1, 800ff04 <_reclaim_reent+0x50>
 800fefe:	4620      	mov	r0, r4
 800ff00:	f000 feb6 	bl	8010c70 <_free_r>
 800ff04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ff06:	b111      	cbz	r1, 800ff0e <_reclaim_reent+0x5a>
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f000 feb1 	bl	8010c70 <_free_r>
 800ff0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff10:	b111      	cbz	r1, 800ff18 <_reclaim_reent+0x64>
 800ff12:	4620      	mov	r0, r4
 800ff14:	f000 feac 	bl	8010c70 <_free_r>
 800ff18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ff1a:	b111      	cbz	r1, 800ff22 <_reclaim_reent+0x6e>
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f000 fea7 	bl	8010c70 <_free_r>
 800ff22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ff24:	b111      	cbz	r1, 800ff2c <_reclaim_reent+0x78>
 800ff26:	4620      	mov	r0, r4
 800ff28:	f000 fea2 	bl	8010c70 <_free_r>
 800ff2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ff2e:	b111      	cbz	r1, 800ff36 <_reclaim_reent+0x82>
 800ff30:	4620      	mov	r0, r4
 800ff32:	f000 fe9d 	bl	8010c70 <_free_r>
 800ff36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ff38:	b111      	cbz	r1, 800ff40 <_reclaim_reent+0x8c>
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 fe98 	bl	8010c70 <_free_r>
 800ff40:	6a23      	ldr	r3, [r4, #32]
 800ff42:	b14b      	cbz	r3, 800ff58 <_reclaim_reent+0xa4>
 800ff44:	4620      	mov	r0, r4
 800ff46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff4a:	4718      	bx	r3
 800ff4c:	680e      	ldr	r6, [r1, #0]
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 fe8e 	bl	8010c70 <_free_r>
 800ff54:	4631      	mov	r1, r6
 800ff56:	e7bb      	b.n	800fed0 <_reclaim_reent+0x1c>
 800ff58:	bd70      	pop	{r4, r5, r6, pc}
 800ff5a:	bf00      	nop
 800ff5c:	2000007c 	.word	0x2000007c

0800ff60 <__errno>:
 800ff60:	4b01      	ldr	r3, [pc, #4]	@ (800ff68 <__errno+0x8>)
 800ff62:	6818      	ldr	r0, [r3, #0]
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	2000007c 	.word	0x2000007c

0800ff6c <__libc_init_array>:
 800ff6c:	b570      	push	{r4, r5, r6, lr}
 800ff6e:	4d0d      	ldr	r5, [pc, #52]	@ (800ffa4 <__libc_init_array+0x38>)
 800ff70:	4c0d      	ldr	r4, [pc, #52]	@ (800ffa8 <__libc_init_array+0x3c>)
 800ff72:	1b64      	subs	r4, r4, r5
 800ff74:	10a4      	asrs	r4, r4, #2
 800ff76:	2600      	movs	r6, #0
 800ff78:	42a6      	cmp	r6, r4
 800ff7a:	d109      	bne.n	800ff90 <__libc_init_array+0x24>
 800ff7c:	4d0b      	ldr	r5, [pc, #44]	@ (800ffac <__libc_init_array+0x40>)
 800ff7e:	4c0c      	ldr	r4, [pc, #48]	@ (800ffb0 <__libc_init_array+0x44>)
 800ff80:	f003 f972 	bl	8013268 <_init>
 800ff84:	1b64      	subs	r4, r4, r5
 800ff86:	10a4      	asrs	r4, r4, #2
 800ff88:	2600      	movs	r6, #0
 800ff8a:	42a6      	cmp	r6, r4
 800ff8c:	d105      	bne.n	800ff9a <__libc_init_array+0x2e>
 800ff8e:	bd70      	pop	{r4, r5, r6, pc}
 800ff90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff94:	4798      	blx	r3
 800ff96:	3601      	adds	r6, #1
 800ff98:	e7ee      	b.n	800ff78 <__libc_init_array+0xc>
 800ff9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff9e:	4798      	blx	r3
 800ffa0:	3601      	adds	r6, #1
 800ffa2:	e7f2      	b.n	800ff8a <__libc_init_array+0x1e>
 800ffa4:	08013930 	.word	0x08013930
 800ffa8:	08013930 	.word	0x08013930
 800ffac:	08013930 	.word	0x08013930
 800ffb0:	08013934 	.word	0x08013934

0800ffb4 <__retarget_lock_init_recursive>:
 800ffb4:	4770      	bx	lr

0800ffb6 <__retarget_lock_acquire_recursive>:
 800ffb6:	4770      	bx	lr

0800ffb8 <__retarget_lock_release_recursive>:
 800ffb8:	4770      	bx	lr

0800ffba <memcpy>:
 800ffba:	440a      	add	r2, r1
 800ffbc:	4291      	cmp	r1, r2
 800ffbe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ffc2:	d100      	bne.n	800ffc6 <memcpy+0xc>
 800ffc4:	4770      	bx	lr
 800ffc6:	b510      	push	{r4, lr}
 800ffc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffd0:	4291      	cmp	r1, r2
 800ffd2:	d1f9      	bne.n	800ffc8 <memcpy+0xe>
 800ffd4:	bd10      	pop	{r4, pc}

0800ffd6 <quorem>:
 800ffd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffda:	6903      	ldr	r3, [r0, #16]
 800ffdc:	690c      	ldr	r4, [r1, #16]
 800ffde:	42a3      	cmp	r3, r4
 800ffe0:	4607      	mov	r7, r0
 800ffe2:	db7e      	blt.n	80100e2 <quorem+0x10c>
 800ffe4:	3c01      	subs	r4, #1
 800ffe6:	f101 0814 	add.w	r8, r1, #20
 800ffea:	00a3      	lsls	r3, r4, #2
 800ffec:	f100 0514 	add.w	r5, r0, #20
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fff6:	9301      	str	r3, [sp, #4]
 800fff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010000:	3301      	adds	r3, #1
 8010002:	429a      	cmp	r2, r3
 8010004:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010008:	fbb2 f6f3 	udiv	r6, r2, r3
 801000c:	d32e      	bcc.n	801006c <quorem+0x96>
 801000e:	f04f 0a00 	mov.w	sl, #0
 8010012:	46c4      	mov	ip, r8
 8010014:	46ae      	mov	lr, r5
 8010016:	46d3      	mov	fp, sl
 8010018:	f85c 3b04 	ldr.w	r3, [ip], #4
 801001c:	b298      	uxth	r0, r3
 801001e:	fb06 a000 	mla	r0, r6, r0, sl
 8010022:	0c02      	lsrs	r2, r0, #16
 8010024:	0c1b      	lsrs	r3, r3, #16
 8010026:	fb06 2303 	mla	r3, r6, r3, r2
 801002a:	f8de 2000 	ldr.w	r2, [lr]
 801002e:	b280      	uxth	r0, r0
 8010030:	b292      	uxth	r2, r2
 8010032:	1a12      	subs	r2, r2, r0
 8010034:	445a      	add	r2, fp
 8010036:	f8de 0000 	ldr.w	r0, [lr]
 801003a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801003e:	b29b      	uxth	r3, r3
 8010040:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010044:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010048:	b292      	uxth	r2, r2
 801004a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801004e:	45e1      	cmp	r9, ip
 8010050:	f84e 2b04 	str.w	r2, [lr], #4
 8010054:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010058:	d2de      	bcs.n	8010018 <quorem+0x42>
 801005a:	9b00      	ldr	r3, [sp, #0]
 801005c:	58eb      	ldr	r3, [r5, r3]
 801005e:	b92b      	cbnz	r3, 801006c <quorem+0x96>
 8010060:	9b01      	ldr	r3, [sp, #4]
 8010062:	3b04      	subs	r3, #4
 8010064:	429d      	cmp	r5, r3
 8010066:	461a      	mov	r2, r3
 8010068:	d32f      	bcc.n	80100ca <quorem+0xf4>
 801006a:	613c      	str	r4, [r7, #16]
 801006c:	4638      	mov	r0, r7
 801006e:	f001 fb7d 	bl	801176c <__mcmp>
 8010072:	2800      	cmp	r0, #0
 8010074:	db25      	blt.n	80100c2 <quorem+0xec>
 8010076:	4629      	mov	r1, r5
 8010078:	2000      	movs	r0, #0
 801007a:	f858 2b04 	ldr.w	r2, [r8], #4
 801007e:	f8d1 c000 	ldr.w	ip, [r1]
 8010082:	fa1f fe82 	uxth.w	lr, r2
 8010086:	fa1f f38c 	uxth.w	r3, ip
 801008a:	eba3 030e 	sub.w	r3, r3, lr
 801008e:	4403      	add	r3, r0
 8010090:	0c12      	lsrs	r2, r2, #16
 8010092:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010096:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801009a:	b29b      	uxth	r3, r3
 801009c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100a0:	45c1      	cmp	r9, r8
 80100a2:	f841 3b04 	str.w	r3, [r1], #4
 80100a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80100aa:	d2e6      	bcs.n	801007a <quorem+0xa4>
 80100ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100b4:	b922      	cbnz	r2, 80100c0 <quorem+0xea>
 80100b6:	3b04      	subs	r3, #4
 80100b8:	429d      	cmp	r5, r3
 80100ba:	461a      	mov	r2, r3
 80100bc:	d30b      	bcc.n	80100d6 <quorem+0x100>
 80100be:	613c      	str	r4, [r7, #16]
 80100c0:	3601      	adds	r6, #1
 80100c2:	4630      	mov	r0, r6
 80100c4:	b003      	add	sp, #12
 80100c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ca:	6812      	ldr	r2, [r2, #0]
 80100cc:	3b04      	subs	r3, #4
 80100ce:	2a00      	cmp	r2, #0
 80100d0:	d1cb      	bne.n	801006a <quorem+0x94>
 80100d2:	3c01      	subs	r4, #1
 80100d4:	e7c6      	b.n	8010064 <quorem+0x8e>
 80100d6:	6812      	ldr	r2, [r2, #0]
 80100d8:	3b04      	subs	r3, #4
 80100da:	2a00      	cmp	r2, #0
 80100dc:	d1ef      	bne.n	80100be <quorem+0xe8>
 80100de:	3c01      	subs	r4, #1
 80100e0:	e7ea      	b.n	80100b8 <quorem+0xe2>
 80100e2:	2000      	movs	r0, #0
 80100e4:	e7ee      	b.n	80100c4 <quorem+0xee>
	...

080100e8 <_dtoa_r>:
 80100e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ec:	69c7      	ldr	r7, [r0, #28]
 80100ee:	b099      	sub	sp, #100	@ 0x64
 80100f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80100f4:	ec55 4b10 	vmov	r4, r5, d0
 80100f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80100fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80100fc:	4683      	mov	fp, r0
 80100fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8010100:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010102:	b97f      	cbnz	r7, 8010124 <_dtoa_r+0x3c>
 8010104:	2010      	movs	r0, #16
 8010106:	f000 ff55 	bl	8010fb4 <malloc>
 801010a:	4602      	mov	r2, r0
 801010c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010110:	b920      	cbnz	r0, 801011c <_dtoa_r+0x34>
 8010112:	4ba7      	ldr	r3, [pc, #668]	@ (80103b0 <_dtoa_r+0x2c8>)
 8010114:	21ef      	movs	r1, #239	@ 0xef
 8010116:	48a7      	ldr	r0, [pc, #668]	@ (80103b4 <_dtoa_r+0x2cc>)
 8010118:	f001 fd12 	bl	8011b40 <__assert_func>
 801011c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010120:	6007      	str	r7, [r0, #0]
 8010122:	60c7      	str	r7, [r0, #12]
 8010124:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010128:	6819      	ldr	r1, [r3, #0]
 801012a:	b159      	cbz	r1, 8010144 <_dtoa_r+0x5c>
 801012c:	685a      	ldr	r2, [r3, #4]
 801012e:	604a      	str	r2, [r1, #4]
 8010130:	2301      	movs	r3, #1
 8010132:	4093      	lsls	r3, r2
 8010134:	608b      	str	r3, [r1, #8]
 8010136:	4658      	mov	r0, fp
 8010138:	f001 f8de 	bl	80112f8 <_Bfree>
 801013c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010140:	2200      	movs	r2, #0
 8010142:	601a      	str	r2, [r3, #0]
 8010144:	1e2b      	subs	r3, r5, #0
 8010146:	bfb9      	ittee	lt
 8010148:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801014c:	9303      	strlt	r3, [sp, #12]
 801014e:	2300      	movge	r3, #0
 8010150:	6033      	strge	r3, [r6, #0]
 8010152:	9f03      	ldr	r7, [sp, #12]
 8010154:	4b98      	ldr	r3, [pc, #608]	@ (80103b8 <_dtoa_r+0x2d0>)
 8010156:	bfbc      	itt	lt
 8010158:	2201      	movlt	r2, #1
 801015a:	6032      	strlt	r2, [r6, #0]
 801015c:	43bb      	bics	r3, r7
 801015e:	d112      	bne.n	8010186 <_dtoa_r+0x9e>
 8010160:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010162:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010166:	6013      	str	r3, [r2, #0]
 8010168:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801016c:	4323      	orrs	r3, r4
 801016e:	f000 854d 	beq.w	8010c0c <_dtoa_r+0xb24>
 8010172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010174:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80103cc <_dtoa_r+0x2e4>
 8010178:	2b00      	cmp	r3, #0
 801017a:	f000 854f 	beq.w	8010c1c <_dtoa_r+0xb34>
 801017e:	f10a 0303 	add.w	r3, sl, #3
 8010182:	f000 bd49 	b.w	8010c18 <_dtoa_r+0xb30>
 8010186:	ed9d 7b02 	vldr	d7, [sp, #8]
 801018a:	2200      	movs	r2, #0
 801018c:	ec51 0b17 	vmov	r0, r1, d7
 8010190:	2300      	movs	r3, #0
 8010192:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010196:	f7f0 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 801019a:	4680      	mov	r8, r0
 801019c:	b158      	cbz	r0, 80101b6 <_dtoa_r+0xce>
 801019e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80101a0:	2301      	movs	r3, #1
 80101a2:	6013      	str	r3, [r2, #0]
 80101a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80101a6:	b113      	cbz	r3, 80101ae <_dtoa_r+0xc6>
 80101a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80101aa:	4b84      	ldr	r3, [pc, #528]	@ (80103bc <_dtoa_r+0x2d4>)
 80101ac:	6013      	str	r3, [r2, #0]
 80101ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80103d0 <_dtoa_r+0x2e8>
 80101b2:	f000 bd33 	b.w	8010c1c <_dtoa_r+0xb34>
 80101b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80101ba:	aa16      	add	r2, sp, #88	@ 0x58
 80101bc:	a917      	add	r1, sp, #92	@ 0x5c
 80101be:	4658      	mov	r0, fp
 80101c0:	f001 fb84 	bl	80118cc <__d2b>
 80101c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80101c8:	4681      	mov	r9, r0
 80101ca:	2e00      	cmp	r6, #0
 80101cc:	d077      	beq.n	80102be <_dtoa_r+0x1d6>
 80101ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80101d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80101d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80101e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80101e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80101e8:	4619      	mov	r1, r3
 80101ea:	2200      	movs	r2, #0
 80101ec:	4b74      	ldr	r3, [pc, #464]	@ (80103c0 <_dtoa_r+0x2d8>)
 80101ee:	f7f0 f84b 	bl	8000288 <__aeabi_dsub>
 80101f2:	a369      	add	r3, pc, #420	@ (adr r3, 8010398 <_dtoa_r+0x2b0>)
 80101f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f8:	f7f0 f9fe 	bl	80005f8 <__aeabi_dmul>
 80101fc:	a368      	add	r3, pc, #416	@ (adr r3, 80103a0 <_dtoa_r+0x2b8>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f7f0 f843 	bl	800028c <__adddf3>
 8010206:	4604      	mov	r4, r0
 8010208:	4630      	mov	r0, r6
 801020a:	460d      	mov	r5, r1
 801020c:	f7f0 f98a 	bl	8000524 <__aeabi_i2d>
 8010210:	a365      	add	r3, pc, #404	@ (adr r3, 80103a8 <_dtoa_r+0x2c0>)
 8010212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010216:	f7f0 f9ef 	bl	80005f8 <__aeabi_dmul>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	4620      	mov	r0, r4
 8010220:	4629      	mov	r1, r5
 8010222:	f7f0 f833 	bl	800028c <__adddf3>
 8010226:	4604      	mov	r4, r0
 8010228:	460d      	mov	r5, r1
 801022a:	f7f0 fc95 	bl	8000b58 <__aeabi_d2iz>
 801022e:	2200      	movs	r2, #0
 8010230:	4607      	mov	r7, r0
 8010232:	2300      	movs	r3, #0
 8010234:	4620      	mov	r0, r4
 8010236:	4629      	mov	r1, r5
 8010238:	f7f0 fc50 	bl	8000adc <__aeabi_dcmplt>
 801023c:	b140      	cbz	r0, 8010250 <_dtoa_r+0x168>
 801023e:	4638      	mov	r0, r7
 8010240:	f7f0 f970 	bl	8000524 <__aeabi_i2d>
 8010244:	4622      	mov	r2, r4
 8010246:	462b      	mov	r3, r5
 8010248:	f7f0 fc3e 	bl	8000ac8 <__aeabi_dcmpeq>
 801024c:	b900      	cbnz	r0, 8010250 <_dtoa_r+0x168>
 801024e:	3f01      	subs	r7, #1
 8010250:	2f16      	cmp	r7, #22
 8010252:	d851      	bhi.n	80102f8 <_dtoa_r+0x210>
 8010254:	4b5b      	ldr	r3, [pc, #364]	@ (80103c4 <_dtoa_r+0x2dc>)
 8010256:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010262:	f7f0 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	d048      	beq.n	80102fc <_dtoa_r+0x214>
 801026a:	3f01      	subs	r7, #1
 801026c:	2300      	movs	r3, #0
 801026e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010270:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010272:	1b9b      	subs	r3, r3, r6
 8010274:	1e5a      	subs	r2, r3, #1
 8010276:	bf44      	itt	mi
 8010278:	f1c3 0801 	rsbmi	r8, r3, #1
 801027c:	2300      	movmi	r3, #0
 801027e:	9208      	str	r2, [sp, #32]
 8010280:	bf54      	ite	pl
 8010282:	f04f 0800 	movpl.w	r8, #0
 8010286:	9308      	strmi	r3, [sp, #32]
 8010288:	2f00      	cmp	r7, #0
 801028a:	db39      	blt.n	8010300 <_dtoa_r+0x218>
 801028c:	9b08      	ldr	r3, [sp, #32]
 801028e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010290:	443b      	add	r3, r7
 8010292:	9308      	str	r3, [sp, #32]
 8010294:	2300      	movs	r3, #0
 8010296:	930a      	str	r3, [sp, #40]	@ 0x28
 8010298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801029a:	2b09      	cmp	r3, #9
 801029c:	d864      	bhi.n	8010368 <_dtoa_r+0x280>
 801029e:	2b05      	cmp	r3, #5
 80102a0:	bfc4      	itt	gt
 80102a2:	3b04      	subgt	r3, #4
 80102a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80102a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a8:	f1a3 0302 	sub.w	r3, r3, #2
 80102ac:	bfcc      	ite	gt
 80102ae:	2400      	movgt	r4, #0
 80102b0:	2401      	movle	r4, #1
 80102b2:	2b03      	cmp	r3, #3
 80102b4:	d863      	bhi.n	801037e <_dtoa_r+0x296>
 80102b6:	e8df f003 	tbb	[pc, r3]
 80102ba:	372a      	.short	0x372a
 80102bc:	5535      	.short	0x5535
 80102be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80102c2:	441e      	add	r6, r3
 80102c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80102c8:	2b20      	cmp	r3, #32
 80102ca:	bfc1      	itttt	gt
 80102cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80102d0:	409f      	lslgt	r7, r3
 80102d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80102d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80102da:	bfd6      	itet	le
 80102dc:	f1c3 0320 	rsble	r3, r3, #32
 80102e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80102e4:	fa04 f003 	lslle.w	r0, r4, r3
 80102e8:	f7f0 f90c 	bl	8000504 <__aeabi_ui2d>
 80102ec:	2201      	movs	r2, #1
 80102ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80102f2:	3e01      	subs	r6, #1
 80102f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80102f6:	e777      	b.n	80101e8 <_dtoa_r+0x100>
 80102f8:	2301      	movs	r3, #1
 80102fa:	e7b8      	b.n	801026e <_dtoa_r+0x186>
 80102fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80102fe:	e7b7      	b.n	8010270 <_dtoa_r+0x188>
 8010300:	427b      	negs	r3, r7
 8010302:	930a      	str	r3, [sp, #40]	@ 0x28
 8010304:	2300      	movs	r3, #0
 8010306:	eba8 0807 	sub.w	r8, r8, r7
 801030a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801030c:	e7c4      	b.n	8010298 <_dtoa_r+0x1b0>
 801030e:	2300      	movs	r3, #0
 8010310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010314:	2b00      	cmp	r3, #0
 8010316:	dc35      	bgt.n	8010384 <_dtoa_r+0x29c>
 8010318:	2301      	movs	r3, #1
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	9307      	str	r3, [sp, #28]
 801031e:	461a      	mov	r2, r3
 8010320:	920e      	str	r2, [sp, #56]	@ 0x38
 8010322:	e00b      	b.n	801033c <_dtoa_r+0x254>
 8010324:	2301      	movs	r3, #1
 8010326:	e7f3      	b.n	8010310 <_dtoa_r+0x228>
 8010328:	2300      	movs	r3, #0
 801032a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801032c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801032e:	18fb      	adds	r3, r7, r3
 8010330:	9300      	str	r3, [sp, #0]
 8010332:	3301      	adds	r3, #1
 8010334:	2b01      	cmp	r3, #1
 8010336:	9307      	str	r3, [sp, #28]
 8010338:	bfb8      	it	lt
 801033a:	2301      	movlt	r3, #1
 801033c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010340:	2100      	movs	r1, #0
 8010342:	2204      	movs	r2, #4
 8010344:	f102 0514 	add.w	r5, r2, #20
 8010348:	429d      	cmp	r5, r3
 801034a:	d91f      	bls.n	801038c <_dtoa_r+0x2a4>
 801034c:	6041      	str	r1, [r0, #4]
 801034e:	4658      	mov	r0, fp
 8010350:	f000 ff92 	bl	8011278 <_Balloc>
 8010354:	4682      	mov	sl, r0
 8010356:	2800      	cmp	r0, #0
 8010358:	d13c      	bne.n	80103d4 <_dtoa_r+0x2ec>
 801035a:	4b1b      	ldr	r3, [pc, #108]	@ (80103c8 <_dtoa_r+0x2e0>)
 801035c:	4602      	mov	r2, r0
 801035e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010362:	e6d8      	b.n	8010116 <_dtoa_r+0x2e>
 8010364:	2301      	movs	r3, #1
 8010366:	e7e0      	b.n	801032a <_dtoa_r+0x242>
 8010368:	2401      	movs	r4, #1
 801036a:	2300      	movs	r3, #0
 801036c:	9309      	str	r3, [sp, #36]	@ 0x24
 801036e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	9307      	str	r3, [sp, #28]
 8010378:	2200      	movs	r2, #0
 801037a:	2312      	movs	r3, #18
 801037c:	e7d0      	b.n	8010320 <_dtoa_r+0x238>
 801037e:	2301      	movs	r3, #1
 8010380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010382:	e7f5      	b.n	8010370 <_dtoa_r+0x288>
 8010384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010386:	9300      	str	r3, [sp, #0]
 8010388:	9307      	str	r3, [sp, #28]
 801038a:	e7d7      	b.n	801033c <_dtoa_r+0x254>
 801038c:	3101      	adds	r1, #1
 801038e:	0052      	lsls	r2, r2, #1
 8010390:	e7d8      	b.n	8010344 <_dtoa_r+0x25c>
 8010392:	bf00      	nop
 8010394:	f3af 8000 	nop.w
 8010398:	636f4361 	.word	0x636f4361
 801039c:	3fd287a7 	.word	0x3fd287a7
 80103a0:	8b60c8b3 	.word	0x8b60c8b3
 80103a4:	3fc68a28 	.word	0x3fc68a28
 80103a8:	509f79fb 	.word	0x509f79fb
 80103ac:	3fd34413 	.word	0x3fd34413
 80103b0:	08013421 	.word	0x08013421
 80103b4:	08013438 	.word	0x08013438
 80103b8:	7ff00000 	.word	0x7ff00000
 80103bc:	080133f1 	.word	0x080133f1
 80103c0:	3ff80000 	.word	0x3ff80000
 80103c4:	08013540 	.word	0x08013540
 80103c8:	08013490 	.word	0x08013490
 80103cc:	0801341d 	.word	0x0801341d
 80103d0:	080133f0 	.word	0x080133f0
 80103d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80103d8:	6018      	str	r0, [r3, #0]
 80103da:	9b07      	ldr	r3, [sp, #28]
 80103dc:	2b0e      	cmp	r3, #14
 80103de:	f200 80a4 	bhi.w	801052a <_dtoa_r+0x442>
 80103e2:	2c00      	cmp	r4, #0
 80103e4:	f000 80a1 	beq.w	801052a <_dtoa_r+0x442>
 80103e8:	2f00      	cmp	r7, #0
 80103ea:	dd33      	ble.n	8010454 <_dtoa_r+0x36c>
 80103ec:	4bad      	ldr	r3, [pc, #692]	@ (80106a4 <_dtoa_r+0x5bc>)
 80103ee:	f007 020f 	and.w	r2, r7, #15
 80103f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103f6:	ed93 7b00 	vldr	d7, [r3]
 80103fa:	05f8      	lsls	r0, r7, #23
 80103fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010400:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010404:	d516      	bpl.n	8010434 <_dtoa_r+0x34c>
 8010406:	4ba8      	ldr	r3, [pc, #672]	@ (80106a8 <_dtoa_r+0x5c0>)
 8010408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801040c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010410:	f7f0 fa1c 	bl	800084c <__aeabi_ddiv>
 8010414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010418:	f004 040f 	and.w	r4, r4, #15
 801041c:	2603      	movs	r6, #3
 801041e:	4da2      	ldr	r5, [pc, #648]	@ (80106a8 <_dtoa_r+0x5c0>)
 8010420:	b954      	cbnz	r4, 8010438 <_dtoa_r+0x350>
 8010422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801042a:	f7f0 fa0f 	bl	800084c <__aeabi_ddiv>
 801042e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010432:	e028      	b.n	8010486 <_dtoa_r+0x39e>
 8010434:	2602      	movs	r6, #2
 8010436:	e7f2      	b.n	801041e <_dtoa_r+0x336>
 8010438:	07e1      	lsls	r1, r4, #31
 801043a:	d508      	bpl.n	801044e <_dtoa_r+0x366>
 801043c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010440:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010444:	f7f0 f8d8 	bl	80005f8 <__aeabi_dmul>
 8010448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801044c:	3601      	adds	r6, #1
 801044e:	1064      	asrs	r4, r4, #1
 8010450:	3508      	adds	r5, #8
 8010452:	e7e5      	b.n	8010420 <_dtoa_r+0x338>
 8010454:	f000 80d2 	beq.w	80105fc <_dtoa_r+0x514>
 8010458:	427c      	negs	r4, r7
 801045a:	4b92      	ldr	r3, [pc, #584]	@ (80106a4 <_dtoa_r+0x5bc>)
 801045c:	4d92      	ldr	r5, [pc, #584]	@ (80106a8 <_dtoa_r+0x5c0>)
 801045e:	f004 020f 	and.w	r2, r4, #15
 8010462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801046e:	f7f0 f8c3 	bl	80005f8 <__aeabi_dmul>
 8010472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010476:	1124      	asrs	r4, r4, #4
 8010478:	2300      	movs	r3, #0
 801047a:	2602      	movs	r6, #2
 801047c:	2c00      	cmp	r4, #0
 801047e:	f040 80b2 	bne.w	80105e6 <_dtoa_r+0x4fe>
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1d3      	bne.n	801042e <_dtoa_r+0x346>
 8010486:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010488:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801048c:	2b00      	cmp	r3, #0
 801048e:	f000 80b7 	beq.w	8010600 <_dtoa_r+0x518>
 8010492:	4b86      	ldr	r3, [pc, #536]	@ (80106ac <_dtoa_r+0x5c4>)
 8010494:	2200      	movs	r2, #0
 8010496:	4620      	mov	r0, r4
 8010498:	4629      	mov	r1, r5
 801049a:	f7f0 fb1f 	bl	8000adc <__aeabi_dcmplt>
 801049e:	2800      	cmp	r0, #0
 80104a0:	f000 80ae 	beq.w	8010600 <_dtoa_r+0x518>
 80104a4:	9b07      	ldr	r3, [sp, #28]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f000 80aa 	beq.w	8010600 <_dtoa_r+0x518>
 80104ac:	9b00      	ldr	r3, [sp, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	dd37      	ble.n	8010522 <_dtoa_r+0x43a>
 80104b2:	1e7b      	subs	r3, r7, #1
 80104b4:	9304      	str	r3, [sp, #16]
 80104b6:	4620      	mov	r0, r4
 80104b8:	4b7d      	ldr	r3, [pc, #500]	@ (80106b0 <_dtoa_r+0x5c8>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	4629      	mov	r1, r5
 80104be:	f7f0 f89b 	bl	80005f8 <__aeabi_dmul>
 80104c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104c6:	9c00      	ldr	r4, [sp, #0]
 80104c8:	3601      	adds	r6, #1
 80104ca:	4630      	mov	r0, r6
 80104cc:	f7f0 f82a 	bl	8000524 <__aeabi_i2d>
 80104d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80104d4:	f7f0 f890 	bl	80005f8 <__aeabi_dmul>
 80104d8:	4b76      	ldr	r3, [pc, #472]	@ (80106b4 <_dtoa_r+0x5cc>)
 80104da:	2200      	movs	r2, #0
 80104dc:	f7ef fed6 	bl	800028c <__adddf3>
 80104e0:	4605      	mov	r5, r0
 80104e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	f040 808d 	bne.w	8010606 <_dtoa_r+0x51e>
 80104ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f0:	4b71      	ldr	r3, [pc, #452]	@ (80106b8 <_dtoa_r+0x5d0>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	f7ef fec8 	bl	8000288 <__aeabi_dsub>
 80104f8:	4602      	mov	r2, r0
 80104fa:	460b      	mov	r3, r1
 80104fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010500:	462a      	mov	r2, r5
 8010502:	4633      	mov	r3, r6
 8010504:	f7f0 fb08 	bl	8000b18 <__aeabi_dcmpgt>
 8010508:	2800      	cmp	r0, #0
 801050a:	f040 828b 	bne.w	8010a24 <_dtoa_r+0x93c>
 801050e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010512:	462a      	mov	r2, r5
 8010514:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010518:	f7f0 fae0 	bl	8000adc <__aeabi_dcmplt>
 801051c:	2800      	cmp	r0, #0
 801051e:	f040 8128 	bne.w	8010772 <_dtoa_r+0x68a>
 8010522:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010526:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801052a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801052c:	2b00      	cmp	r3, #0
 801052e:	f2c0 815a 	blt.w	80107e6 <_dtoa_r+0x6fe>
 8010532:	2f0e      	cmp	r7, #14
 8010534:	f300 8157 	bgt.w	80107e6 <_dtoa_r+0x6fe>
 8010538:	4b5a      	ldr	r3, [pc, #360]	@ (80106a4 <_dtoa_r+0x5bc>)
 801053a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801053e:	ed93 7b00 	vldr	d7, [r3]
 8010542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010544:	2b00      	cmp	r3, #0
 8010546:	ed8d 7b00 	vstr	d7, [sp]
 801054a:	da03      	bge.n	8010554 <_dtoa_r+0x46c>
 801054c:	9b07      	ldr	r3, [sp, #28]
 801054e:	2b00      	cmp	r3, #0
 8010550:	f340 8101 	ble.w	8010756 <_dtoa_r+0x66e>
 8010554:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010558:	4656      	mov	r6, sl
 801055a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801055e:	4620      	mov	r0, r4
 8010560:	4629      	mov	r1, r5
 8010562:	f7f0 f973 	bl	800084c <__aeabi_ddiv>
 8010566:	f7f0 faf7 	bl	8000b58 <__aeabi_d2iz>
 801056a:	4680      	mov	r8, r0
 801056c:	f7ef ffda 	bl	8000524 <__aeabi_i2d>
 8010570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010574:	f7f0 f840 	bl	80005f8 <__aeabi_dmul>
 8010578:	4602      	mov	r2, r0
 801057a:	460b      	mov	r3, r1
 801057c:	4620      	mov	r0, r4
 801057e:	4629      	mov	r1, r5
 8010580:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010584:	f7ef fe80 	bl	8000288 <__aeabi_dsub>
 8010588:	f806 4b01 	strb.w	r4, [r6], #1
 801058c:	9d07      	ldr	r5, [sp, #28]
 801058e:	eba6 040a 	sub.w	r4, r6, sl
 8010592:	42a5      	cmp	r5, r4
 8010594:	4602      	mov	r2, r0
 8010596:	460b      	mov	r3, r1
 8010598:	f040 8117 	bne.w	80107ca <_dtoa_r+0x6e2>
 801059c:	f7ef fe76 	bl	800028c <__adddf3>
 80105a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105a4:	4604      	mov	r4, r0
 80105a6:	460d      	mov	r5, r1
 80105a8:	f7f0 fab6 	bl	8000b18 <__aeabi_dcmpgt>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	f040 80f9 	bne.w	80107a4 <_dtoa_r+0x6bc>
 80105b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105b6:	4620      	mov	r0, r4
 80105b8:	4629      	mov	r1, r5
 80105ba:	f7f0 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 80105be:	b118      	cbz	r0, 80105c8 <_dtoa_r+0x4e0>
 80105c0:	f018 0f01 	tst.w	r8, #1
 80105c4:	f040 80ee 	bne.w	80107a4 <_dtoa_r+0x6bc>
 80105c8:	4649      	mov	r1, r9
 80105ca:	4658      	mov	r0, fp
 80105cc:	f000 fe94 	bl	80112f8 <_Bfree>
 80105d0:	2300      	movs	r3, #0
 80105d2:	7033      	strb	r3, [r6, #0]
 80105d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80105d6:	3701      	adds	r7, #1
 80105d8:	601f      	str	r7, [r3, #0]
 80105da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f000 831d 	beq.w	8010c1c <_dtoa_r+0xb34>
 80105e2:	601e      	str	r6, [r3, #0]
 80105e4:	e31a      	b.n	8010c1c <_dtoa_r+0xb34>
 80105e6:	07e2      	lsls	r2, r4, #31
 80105e8:	d505      	bpl.n	80105f6 <_dtoa_r+0x50e>
 80105ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105ee:	f7f0 f803 	bl	80005f8 <__aeabi_dmul>
 80105f2:	3601      	adds	r6, #1
 80105f4:	2301      	movs	r3, #1
 80105f6:	1064      	asrs	r4, r4, #1
 80105f8:	3508      	adds	r5, #8
 80105fa:	e73f      	b.n	801047c <_dtoa_r+0x394>
 80105fc:	2602      	movs	r6, #2
 80105fe:	e742      	b.n	8010486 <_dtoa_r+0x39e>
 8010600:	9c07      	ldr	r4, [sp, #28]
 8010602:	9704      	str	r7, [sp, #16]
 8010604:	e761      	b.n	80104ca <_dtoa_r+0x3e2>
 8010606:	4b27      	ldr	r3, [pc, #156]	@ (80106a4 <_dtoa_r+0x5bc>)
 8010608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801060a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801060e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010612:	4454      	add	r4, sl
 8010614:	2900      	cmp	r1, #0
 8010616:	d053      	beq.n	80106c0 <_dtoa_r+0x5d8>
 8010618:	4928      	ldr	r1, [pc, #160]	@ (80106bc <_dtoa_r+0x5d4>)
 801061a:	2000      	movs	r0, #0
 801061c:	f7f0 f916 	bl	800084c <__aeabi_ddiv>
 8010620:	4633      	mov	r3, r6
 8010622:	462a      	mov	r2, r5
 8010624:	f7ef fe30 	bl	8000288 <__aeabi_dsub>
 8010628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801062c:	4656      	mov	r6, sl
 801062e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010632:	f7f0 fa91 	bl	8000b58 <__aeabi_d2iz>
 8010636:	4605      	mov	r5, r0
 8010638:	f7ef ff74 	bl	8000524 <__aeabi_i2d>
 801063c:	4602      	mov	r2, r0
 801063e:	460b      	mov	r3, r1
 8010640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010644:	f7ef fe20 	bl	8000288 <__aeabi_dsub>
 8010648:	3530      	adds	r5, #48	@ 0x30
 801064a:	4602      	mov	r2, r0
 801064c:	460b      	mov	r3, r1
 801064e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010652:	f806 5b01 	strb.w	r5, [r6], #1
 8010656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801065a:	f7f0 fa3f 	bl	8000adc <__aeabi_dcmplt>
 801065e:	2800      	cmp	r0, #0
 8010660:	d171      	bne.n	8010746 <_dtoa_r+0x65e>
 8010662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010666:	4911      	ldr	r1, [pc, #68]	@ (80106ac <_dtoa_r+0x5c4>)
 8010668:	2000      	movs	r0, #0
 801066a:	f7ef fe0d 	bl	8000288 <__aeabi_dsub>
 801066e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010672:	f7f0 fa33 	bl	8000adc <__aeabi_dcmplt>
 8010676:	2800      	cmp	r0, #0
 8010678:	f040 8095 	bne.w	80107a6 <_dtoa_r+0x6be>
 801067c:	42a6      	cmp	r6, r4
 801067e:	f43f af50 	beq.w	8010522 <_dtoa_r+0x43a>
 8010682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010686:	4b0a      	ldr	r3, [pc, #40]	@ (80106b0 <_dtoa_r+0x5c8>)
 8010688:	2200      	movs	r2, #0
 801068a:	f7ef ffb5 	bl	80005f8 <__aeabi_dmul>
 801068e:	4b08      	ldr	r3, [pc, #32]	@ (80106b0 <_dtoa_r+0x5c8>)
 8010690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010694:	2200      	movs	r2, #0
 8010696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801069a:	f7ef ffad 	bl	80005f8 <__aeabi_dmul>
 801069e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106a2:	e7c4      	b.n	801062e <_dtoa_r+0x546>
 80106a4:	08013540 	.word	0x08013540
 80106a8:	08013518 	.word	0x08013518
 80106ac:	3ff00000 	.word	0x3ff00000
 80106b0:	40240000 	.word	0x40240000
 80106b4:	401c0000 	.word	0x401c0000
 80106b8:	40140000 	.word	0x40140000
 80106bc:	3fe00000 	.word	0x3fe00000
 80106c0:	4631      	mov	r1, r6
 80106c2:	4628      	mov	r0, r5
 80106c4:	f7ef ff98 	bl	80005f8 <__aeabi_dmul>
 80106c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80106cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80106ce:	4656      	mov	r6, sl
 80106d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106d4:	f7f0 fa40 	bl	8000b58 <__aeabi_d2iz>
 80106d8:	4605      	mov	r5, r0
 80106da:	f7ef ff23 	bl	8000524 <__aeabi_i2d>
 80106de:	4602      	mov	r2, r0
 80106e0:	460b      	mov	r3, r1
 80106e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106e6:	f7ef fdcf 	bl	8000288 <__aeabi_dsub>
 80106ea:	3530      	adds	r5, #48	@ 0x30
 80106ec:	f806 5b01 	strb.w	r5, [r6], #1
 80106f0:	4602      	mov	r2, r0
 80106f2:	460b      	mov	r3, r1
 80106f4:	42a6      	cmp	r6, r4
 80106f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106fa:	f04f 0200 	mov.w	r2, #0
 80106fe:	d124      	bne.n	801074a <_dtoa_r+0x662>
 8010700:	4bac      	ldr	r3, [pc, #688]	@ (80109b4 <_dtoa_r+0x8cc>)
 8010702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010706:	f7ef fdc1 	bl	800028c <__adddf3>
 801070a:	4602      	mov	r2, r0
 801070c:	460b      	mov	r3, r1
 801070e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010712:	f7f0 fa01 	bl	8000b18 <__aeabi_dcmpgt>
 8010716:	2800      	cmp	r0, #0
 8010718:	d145      	bne.n	80107a6 <_dtoa_r+0x6be>
 801071a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801071e:	49a5      	ldr	r1, [pc, #660]	@ (80109b4 <_dtoa_r+0x8cc>)
 8010720:	2000      	movs	r0, #0
 8010722:	f7ef fdb1 	bl	8000288 <__aeabi_dsub>
 8010726:	4602      	mov	r2, r0
 8010728:	460b      	mov	r3, r1
 801072a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801072e:	f7f0 f9d5 	bl	8000adc <__aeabi_dcmplt>
 8010732:	2800      	cmp	r0, #0
 8010734:	f43f aef5 	beq.w	8010522 <_dtoa_r+0x43a>
 8010738:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801073a:	1e73      	subs	r3, r6, #1
 801073c:	9315      	str	r3, [sp, #84]	@ 0x54
 801073e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010742:	2b30      	cmp	r3, #48	@ 0x30
 8010744:	d0f8      	beq.n	8010738 <_dtoa_r+0x650>
 8010746:	9f04      	ldr	r7, [sp, #16]
 8010748:	e73e      	b.n	80105c8 <_dtoa_r+0x4e0>
 801074a:	4b9b      	ldr	r3, [pc, #620]	@ (80109b8 <_dtoa_r+0x8d0>)
 801074c:	f7ef ff54 	bl	80005f8 <__aeabi_dmul>
 8010750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010754:	e7bc      	b.n	80106d0 <_dtoa_r+0x5e8>
 8010756:	d10c      	bne.n	8010772 <_dtoa_r+0x68a>
 8010758:	4b98      	ldr	r3, [pc, #608]	@ (80109bc <_dtoa_r+0x8d4>)
 801075a:	2200      	movs	r2, #0
 801075c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010760:	f7ef ff4a 	bl	80005f8 <__aeabi_dmul>
 8010764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010768:	f7f0 f9cc 	bl	8000b04 <__aeabi_dcmpge>
 801076c:	2800      	cmp	r0, #0
 801076e:	f000 8157 	beq.w	8010a20 <_dtoa_r+0x938>
 8010772:	2400      	movs	r4, #0
 8010774:	4625      	mov	r5, r4
 8010776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010778:	43db      	mvns	r3, r3
 801077a:	9304      	str	r3, [sp, #16]
 801077c:	4656      	mov	r6, sl
 801077e:	2700      	movs	r7, #0
 8010780:	4621      	mov	r1, r4
 8010782:	4658      	mov	r0, fp
 8010784:	f000 fdb8 	bl	80112f8 <_Bfree>
 8010788:	2d00      	cmp	r5, #0
 801078a:	d0dc      	beq.n	8010746 <_dtoa_r+0x65e>
 801078c:	b12f      	cbz	r7, 801079a <_dtoa_r+0x6b2>
 801078e:	42af      	cmp	r7, r5
 8010790:	d003      	beq.n	801079a <_dtoa_r+0x6b2>
 8010792:	4639      	mov	r1, r7
 8010794:	4658      	mov	r0, fp
 8010796:	f000 fdaf 	bl	80112f8 <_Bfree>
 801079a:	4629      	mov	r1, r5
 801079c:	4658      	mov	r0, fp
 801079e:	f000 fdab 	bl	80112f8 <_Bfree>
 80107a2:	e7d0      	b.n	8010746 <_dtoa_r+0x65e>
 80107a4:	9704      	str	r7, [sp, #16]
 80107a6:	4633      	mov	r3, r6
 80107a8:	461e      	mov	r6, r3
 80107aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107ae:	2a39      	cmp	r2, #57	@ 0x39
 80107b0:	d107      	bne.n	80107c2 <_dtoa_r+0x6da>
 80107b2:	459a      	cmp	sl, r3
 80107b4:	d1f8      	bne.n	80107a8 <_dtoa_r+0x6c0>
 80107b6:	9a04      	ldr	r2, [sp, #16]
 80107b8:	3201      	adds	r2, #1
 80107ba:	9204      	str	r2, [sp, #16]
 80107bc:	2230      	movs	r2, #48	@ 0x30
 80107be:	f88a 2000 	strb.w	r2, [sl]
 80107c2:	781a      	ldrb	r2, [r3, #0]
 80107c4:	3201      	adds	r2, #1
 80107c6:	701a      	strb	r2, [r3, #0]
 80107c8:	e7bd      	b.n	8010746 <_dtoa_r+0x65e>
 80107ca:	4b7b      	ldr	r3, [pc, #492]	@ (80109b8 <_dtoa_r+0x8d0>)
 80107cc:	2200      	movs	r2, #0
 80107ce:	f7ef ff13 	bl	80005f8 <__aeabi_dmul>
 80107d2:	2200      	movs	r2, #0
 80107d4:	2300      	movs	r3, #0
 80107d6:	4604      	mov	r4, r0
 80107d8:	460d      	mov	r5, r1
 80107da:	f7f0 f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80107de:	2800      	cmp	r0, #0
 80107e0:	f43f aebb 	beq.w	801055a <_dtoa_r+0x472>
 80107e4:	e6f0      	b.n	80105c8 <_dtoa_r+0x4e0>
 80107e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80107e8:	2a00      	cmp	r2, #0
 80107ea:	f000 80db 	beq.w	80109a4 <_dtoa_r+0x8bc>
 80107ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107f0:	2a01      	cmp	r2, #1
 80107f2:	f300 80bf 	bgt.w	8010974 <_dtoa_r+0x88c>
 80107f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80107f8:	2a00      	cmp	r2, #0
 80107fa:	f000 80b7 	beq.w	801096c <_dtoa_r+0x884>
 80107fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010802:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010804:	4646      	mov	r6, r8
 8010806:	9a08      	ldr	r2, [sp, #32]
 8010808:	2101      	movs	r1, #1
 801080a:	441a      	add	r2, r3
 801080c:	4658      	mov	r0, fp
 801080e:	4498      	add	r8, r3
 8010810:	9208      	str	r2, [sp, #32]
 8010812:	f000 fe25 	bl	8011460 <__i2b>
 8010816:	4605      	mov	r5, r0
 8010818:	b15e      	cbz	r6, 8010832 <_dtoa_r+0x74a>
 801081a:	9b08      	ldr	r3, [sp, #32]
 801081c:	2b00      	cmp	r3, #0
 801081e:	dd08      	ble.n	8010832 <_dtoa_r+0x74a>
 8010820:	42b3      	cmp	r3, r6
 8010822:	9a08      	ldr	r2, [sp, #32]
 8010824:	bfa8      	it	ge
 8010826:	4633      	movge	r3, r6
 8010828:	eba8 0803 	sub.w	r8, r8, r3
 801082c:	1af6      	subs	r6, r6, r3
 801082e:	1ad3      	subs	r3, r2, r3
 8010830:	9308      	str	r3, [sp, #32]
 8010832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010834:	b1f3      	cbz	r3, 8010874 <_dtoa_r+0x78c>
 8010836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 80b7 	beq.w	80109ac <_dtoa_r+0x8c4>
 801083e:	b18c      	cbz	r4, 8010864 <_dtoa_r+0x77c>
 8010840:	4629      	mov	r1, r5
 8010842:	4622      	mov	r2, r4
 8010844:	4658      	mov	r0, fp
 8010846:	f000 fecb 	bl	80115e0 <__pow5mult>
 801084a:	464a      	mov	r2, r9
 801084c:	4601      	mov	r1, r0
 801084e:	4605      	mov	r5, r0
 8010850:	4658      	mov	r0, fp
 8010852:	f000 fe1b 	bl	801148c <__multiply>
 8010856:	4649      	mov	r1, r9
 8010858:	9004      	str	r0, [sp, #16]
 801085a:	4658      	mov	r0, fp
 801085c:	f000 fd4c 	bl	80112f8 <_Bfree>
 8010860:	9b04      	ldr	r3, [sp, #16]
 8010862:	4699      	mov	r9, r3
 8010864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010866:	1b1a      	subs	r2, r3, r4
 8010868:	d004      	beq.n	8010874 <_dtoa_r+0x78c>
 801086a:	4649      	mov	r1, r9
 801086c:	4658      	mov	r0, fp
 801086e:	f000 feb7 	bl	80115e0 <__pow5mult>
 8010872:	4681      	mov	r9, r0
 8010874:	2101      	movs	r1, #1
 8010876:	4658      	mov	r0, fp
 8010878:	f000 fdf2 	bl	8011460 <__i2b>
 801087c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801087e:	4604      	mov	r4, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	f000 81cf 	beq.w	8010c24 <_dtoa_r+0xb3c>
 8010886:	461a      	mov	r2, r3
 8010888:	4601      	mov	r1, r0
 801088a:	4658      	mov	r0, fp
 801088c:	f000 fea8 	bl	80115e0 <__pow5mult>
 8010890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010892:	2b01      	cmp	r3, #1
 8010894:	4604      	mov	r4, r0
 8010896:	f300 8095 	bgt.w	80109c4 <_dtoa_r+0x8dc>
 801089a:	9b02      	ldr	r3, [sp, #8]
 801089c:	2b00      	cmp	r3, #0
 801089e:	f040 8087 	bne.w	80109b0 <_dtoa_r+0x8c8>
 80108a2:	9b03      	ldr	r3, [sp, #12]
 80108a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f040 8089 	bne.w	80109c0 <_dtoa_r+0x8d8>
 80108ae:	9b03      	ldr	r3, [sp, #12]
 80108b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80108b4:	0d1b      	lsrs	r3, r3, #20
 80108b6:	051b      	lsls	r3, r3, #20
 80108b8:	b12b      	cbz	r3, 80108c6 <_dtoa_r+0x7de>
 80108ba:	9b08      	ldr	r3, [sp, #32]
 80108bc:	3301      	adds	r3, #1
 80108be:	9308      	str	r3, [sp, #32]
 80108c0:	f108 0801 	add.w	r8, r8, #1
 80108c4:	2301      	movs	r3, #1
 80108c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80108c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	f000 81b0 	beq.w	8010c30 <_dtoa_r+0xb48>
 80108d0:	6923      	ldr	r3, [r4, #16]
 80108d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80108d6:	6918      	ldr	r0, [r3, #16]
 80108d8:	f000 fd76 	bl	80113c8 <__hi0bits>
 80108dc:	f1c0 0020 	rsb	r0, r0, #32
 80108e0:	9b08      	ldr	r3, [sp, #32]
 80108e2:	4418      	add	r0, r3
 80108e4:	f010 001f 	ands.w	r0, r0, #31
 80108e8:	d077      	beq.n	80109da <_dtoa_r+0x8f2>
 80108ea:	f1c0 0320 	rsb	r3, r0, #32
 80108ee:	2b04      	cmp	r3, #4
 80108f0:	dd6b      	ble.n	80109ca <_dtoa_r+0x8e2>
 80108f2:	9b08      	ldr	r3, [sp, #32]
 80108f4:	f1c0 001c 	rsb	r0, r0, #28
 80108f8:	4403      	add	r3, r0
 80108fa:	4480      	add	r8, r0
 80108fc:	4406      	add	r6, r0
 80108fe:	9308      	str	r3, [sp, #32]
 8010900:	f1b8 0f00 	cmp.w	r8, #0
 8010904:	dd05      	ble.n	8010912 <_dtoa_r+0x82a>
 8010906:	4649      	mov	r1, r9
 8010908:	4642      	mov	r2, r8
 801090a:	4658      	mov	r0, fp
 801090c:	f000 fec2 	bl	8011694 <__lshift>
 8010910:	4681      	mov	r9, r0
 8010912:	9b08      	ldr	r3, [sp, #32]
 8010914:	2b00      	cmp	r3, #0
 8010916:	dd05      	ble.n	8010924 <_dtoa_r+0x83c>
 8010918:	4621      	mov	r1, r4
 801091a:	461a      	mov	r2, r3
 801091c:	4658      	mov	r0, fp
 801091e:	f000 feb9 	bl	8011694 <__lshift>
 8010922:	4604      	mov	r4, r0
 8010924:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010926:	2b00      	cmp	r3, #0
 8010928:	d059      	beq.n	80109de <_dtoa_r+0x8f6>
 801092a:	4621      	mov	r1, r4
 801092c:	4648      	mov	r0, r9
 801092e:	f000 ff1d 	bl	801176c <__mcmp>
 8010932:	2800      	cmp	r0, #0
 8010934:	da53      	bge.n	80109de <_dtoa_r+0x8f6>
 8010936:	1e7b      	subs	r3, r7, #1
 8010938:	9304      	str	r3, [sp, #16]
 801093a:	4649      	mov	r1, r9
 801093c:	2300      	movs	r3, #0
 801093e:	220a      	movs	r2, #10
 8010940:	4658      	mov	r0, fp
 8010942:	f000 fcfb 	bl	801133c <__multadd>
 8010946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010948:	4681      	mov	r9, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	f000 8172 	beq.w	8010c34 <_dtoa_r+0xb4c>
 8010950:	2300      	movs	r3, #0
 8010952:	4629      	mov	r1, r5
 8010954:	220a      	movs	r2, #10
 8010956:	4658      	mov	r0, fp
 8010958:	f000 fcf0 	bl	801133c <__multadd>
 801095c:	9b00      	ldr	r3, [sp, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	4605      	mov	r5, r0
 8010962:	dc67      	bgt.n	8010a34 <_dtoa_r+0x94c>
 8010964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010966:	2b02      	cmp	r3, #2
 8010968:	dc41      	bgt.n	80109ee <_dtoa_r+0x906>
 801096a:	e063      	b.n	8010a34 <_dtoa_r+0x94c>
 801096c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801096e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010972:	e746      	b.n	8010802 <_dtoa_r+0x71a>
 8010974:	9b07      	ldr	r3, [sp, #28]
 8010976:	1e5c      	subs	r4, r3, #1
 8010978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801097a:	42a3      	cmp	r3, r4
 801097c:	bfbf      	itttt	lt
 801097e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010980:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010982:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010984:	1ae3      	sublt	r3, r4, r3
 8010986:	bfb4      	ite	lt
 8010988:	18d2      	addlt	r2, r2, r3
 801098a:	1b1c      	subge	r4, r3, r4
 801098c:	9b07      	ldr	r3, [sp, #28]
 801098e:	bfbc      	itt	lt
 8010990:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010992:	2400      	movlt	r4, #0
 8010994:	2b00      	cmp	r3, #0
 8010996:	bfb5      	itete	lt
 8010998:	eba8 0603 	sublt.w	r6, r8, r3
 801099c:	9b07      	ldrge	r3, [sp, #28]
 801099e:	2300      	movlt	r3, #0
 80109a0:	4646      	movge	r6, r8
 80109a2:	e730      	b.n	8010806 <_dtoa_r+0x71e>
 80109a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80109a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80109a8:	4646      	mov	r6, r8
 80109aa:	e735      	b.n	8010818 <_dtoa_r+0x730>
 80109ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80109ae:	e75c      	b.n	801086a <_dtoa_r+0x782>
 80109b0:	2300      	movs	r3, #0
 80109b2:	e788      	b.n	80108c6 <_dtoa_r+0x7de>
 80109b4:	3fe00000 	.word	0x3fe00000
 80109b8:	40240000 	.word	0x40240000
 80109bc:	40140000 	.word	0x40140000
 80109c0:	9b02      	ldr	r3, [sp, #8]
 80109c2:	e780      	b.n	80108c6 <_dtoa_r+0x7de>
 80109c4:	2300      	movs	r3, #0
 80109c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80109c8:	e782      	b.n	80108d0 <_dtoa_r+0x7e8>
 80109ca:	d099      	beq.n	8010900 <_dtoa_r+0x818>
 80109cc:	9a08      	ldr	r2, [sp, #32]
 80109ce:	331c      	adds	r3, #28
 80109d0:	441a      	add	r2, r3
 80109d2:	4498      	add	r8, r3
 80109d4:	441e      	add	r6, r3
 80109d6:	9208      	str	r2, [sp, #32]
 80109d8:	e792      	b.n	8010900 <_dtoa_r+0x818>
 80109da:	4603      	mov	r3, r0
 80109dc:	e7f6      	b.n	80109cc <_dtoa_r+0x8e4>
 80109de:	9b07      	ldr	r3, [sp, #28]
 80109e0:	9704      	str	r7, [sp, #16]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	dc20      	bgt.n	8010a28 <_dtoa_r+0x940>
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	dd1e      	ble.n	8010a2c <_dtoa_r+0x944>
 80109ee:	9b00      	ldr	r3, [sp, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f47f aec0 	bne.w	8010776 <_dtoa_r+0x68e>
 80109f6:	4621      	mov	r1, r4
 80109f8:	2205      	movs	r2, #5
 80109fa:	4658      	mov	r0, fp
 80109fc:	f000 fc9e 	bl	801133c <__multadd>
 8010a00:	4601      	mov	r1, r0
 8010a02:	4604      	mov	r4, r0
 8010a04:	4648      	mov	r0, r9
 8010a06:	f000 feb1 	bl	801176c <__mcmp>
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	f77f aeb3 	ble.w	8010776 <_dtoa_r+0x68e>
 8010a10:	4656      	mov	r6, sl
 8010a12:	2331      	movs	r3, #49	@ 0x31
 8010a14:	f806 3b01 	strb.w	r3, [r6], #1
 8010a18:	9b04      	ldr	r3, [sp, #16]
 8010a1a:	3301      	adds	r3, #1
 8010a1c:	9304      	str	r3, [sp, #16]
 8010a1e:	e6ae      	b.n	801077e <_dtoa_r+0x696>
 8010a20:	9c07      	ldr	r4, [sp, #28]
 8010a22:	9704      	str	r7, [sp, #16]
 8010a24:	4625      	mov	r5, r4
 8010a26:	e7f3      	b.n	8010a10 <_dtoa_r+0x928>
 8010a28:	9b07      	ldr	r3, [sp, #28]
 8010a2a:	9300      	str	r3, [sp, #0]
 8010a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f000 8104 	beq.w	8010c3c <_dtoa_r+0xb54>
 8010a34:	2e00      	cmp	r6, #0
 8010a36:	dd05      	ble.n	8010a44 <_dtoa_r+0x95c>
 8010a38:	4629      	mov	r1, r5
 8010a3a:	4632      	mov	r2, r6
 8010a3c:	4658      	mov	r0, fp
 8010a3e:	f000 fe29 	bl	8011694 <__lshift>
 8010a42:	4605      	mov	r5, r0
 8010a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d05a      	beq.n	8010b00 <_dtoa_r+0xa18>
 8010a4a:	6869      	ldr	r1, [r5, #4]
 8010a4c:	4658      	mov	r0, fp
 8010a4e:	f000 fc13 	bl	8011278 <_Balloc>
 8010a52:	4606      	mov	r6, r0
 8010a54:	b928      	cbnz	r0, 8010a62 <_dtoa_r+0x97a>
 8010a56:	4b84      	ldr	r3, [pc, #528]	@ (8010c68 <_dtoa_r+0xb80>)
 8010a58:	4602      	mov	r2, r0
 8010a5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a5e:	f7ff bb5a 	b.w	8010116 <_dtoa_r+0x2e>
 8010a62:	692a      	ldr	r2, [r5, #16]
 8010a64:	3202      	adds	r2, #2
 8010a66:	0092      	lsls	r2, r2, #2
 8010a68:	f105 010c 	add.w	r1, r5, #12
 8010a6c:	300c      	adds	r0, #12
 8010a6e:	f7ff faa4 	bl	800ffba <memcpy>
 8010a72:	2201      	movs	r2, #1
 8010a74:	4631      	mov	r1, r6
 8010a76:	4658      	mov	r0, fp
 8010a78:	f000 fe0c 	bl	8011694 <__lshift>
 8010a7c:	f10a 0301 	add.w	r3, sl, #1
 8010a80:	9307      	str	r3, [sp, #28]
 8010a82:	9b00      	ldr	r3, [sp, #0]
 8010a84:	4453      	add	r3, sl
 8010a86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a88:	9b02      	ldr	r3, [sp, #8]
 8010a8a:	f003 0301 	and.w	r3, r3, #1
 8010a8e:	462f      	mov	r7, r5
 8010a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a92:	4605      	mov	r5, r0
 8010a94:	9b07      	ldr	r3, [sp, #28]
 8010a96:	4621      	mov	r1, r4
 8010a98:	3b01      	subs	r3, #1
 8010a9a:	4648      	mov	r0, r9
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	f7ff fa9a 	bl	800ffd6 <quorem>
 8010aa2:	4639      	mov	r1, r7
 8010aa4:	9002      	str	r0, [sp, #8]
 8010aa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010aaa:	4648      	mov	r0, r9
 8010aac:	f000 fe5e 	bl	801176c <__mcmp>
 8010ab0:	462a      	mov	r2, r5
 8010ab2:	9008      	str	r0, [sp, #32]
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	4658      	mov	r0, fp
 8010ab8:	f000 fe74 	bl	80117a4 <__mdiff>
 8010abc:	68c2      	ldr	r2, [r0, #12]
 8010abe:	4606      	mov	r6, r0
 8010ac0:	bb02      	cbnz	r2, 8010b04 <_dtoa_r+0xa1c>
 8010ac2:	4601      	mov	r1, r0
 8010ac4:	4648      	mov	r0, r9
 8010ac6:	f000 fe51 	bl	801176c <__mcmp>
 8010aca:	4602      	mov	r2, r0
 8010acc:	4631      	mov	r1, r6
 8010ace:	4658      	mov	r0, fp
 8010ad0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010ad2:	f000 fc11 	bl	80112f8 <_Bfree>
 8010ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ad8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ada:	9e07      	ldr	r6, [sp, #28]
 8010adc:	ea43 0102 	orr.w	r1, r3, r2
 8010ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ae2:	4319      	orrs	r1, r3
 8010ae4:	d110      	bne.n	8010b08 <_dtoa_r+0xa20>
 8010ae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010aea:	d029      	beq.n	8010b40 <_dtoa_r+0xa58>
 8010aec:	9b08      	ldr	r3, [sp, #32]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	dd02      	ble.n	8010af8 <_dtoa_r+0xa10>
 8010af2:	9b02      	ldr	r3, [sp, #8]
 8010af4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010af8:	9b00      	ldr	r3, [sp, #0]
 8010afa:	f883 8000 	strb.w	r8, [r3]
 8010afe:	e63f      	b.n	8010780 <_dtoa_r+0x698>
 8010b00:	4628      	mov	r0, r5
 8010b02:	e7bb      	b.n	8010a7c <_dtoa_r+0x994>
 8010b04:	2201      	movs	r2, #1
 8010b06:	e7e1      	b.n	8010acc <_dtoa_r+0x9e4>
 8010b08:	9b08      	ldr	r3, [sp, #32]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	db04      	blt.n	8010b18 <_dtoa_r+0xa30>
 8010b0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010b10:	430b      	orrs	r3, r1
 8010b12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010b14:	430b      	orrs	r3, r1
 8010b16:	d120      	bne.n	8010b5a <_dtoa_r+0xa72>
 8010b18:	2a00      	cmp	r2, #0
 8010b1a:	dded      	ble.n	8010af8 <_dtoa_r+0xa10>
 8010b1c:	4649      	mov	r1, r9
 8010b1e:	2201      	movs	r2, #1
 8010b20:	4658      	mov	r0, fp
 8010b22:	f000 fdb7 	bl	8011694 <__lshift>
 8010b26:	4621      	mov	r1, r4
 8010b28:	4681      	mov	r9, r0
 8010b2a:	f000 fe1f 	bl	801176c <__mcmp>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	dc03      	bgt.n	8010b3a <_dtoa_r+0xa52>
 8010b32:	d1e1      	bne.n	8010af8 <_dtoa_r+0xa10>
 8010b34:	f018 0f01 	tst.w	r8, #1
 8010b38:	d0de      	beq.n	8010af8 <_dtoa_r+0xa10>
 8010b3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b3e:	d1d8      	bne.n	8010af2 <_dtoa_r+0xa0a>
 8010b40:	9a00      	ldr	r2, [sp, #0]
 8010b42:	2339      	movs	r3, #57	@ 0x39
 8010b44:	7013      	strb	r3, [r2, #0]
 8010b46:	4633      	mov	r3, r6
 8010b48:	461e      	mov	r6, r3
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b50:	2a39      	cmp	r2, #57	@ 0x39
 8010b52:	d052      	beq.n	8010bfa <_dtoa_r+0xb12>
 8010b54:	3201      	adds	r2, #1
 8010b56:	701a      	strb	r2, [r3, #0]
 8010b58:	e612      	b.n	8010780 <_dtoa_r+0x698>
 8010b5a:	2a00      	cmp	r2, #0
 8010b5c:	dd07      	ble.n	8010b6e <_dtoa_r+0xa86>
 8010b5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b62:	d0ed      	beq.n	8010b40 <_dtoa_r+0xa58>
 8010b64:	9a00      	ldr	r2, [sp, #0]
 8010b66:	f108 0301 	add.w	r3, r8, #1
 8010b6a:	7013      	strb	r3, [r2, #0]
 8010b6c:	e608      	b.n	8010780 <_dtoa_r+0x698>
 8010b6e:	9b07      	ldr	r3, [sp, #28]
 8010b70:	9a07      	ldr	r2, [sp, #28]
 8010b72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d028      	beq.n	8010bce <_dtoa_r+0xae6>
 8010b7c:	4649      	mov	r1, r9
 8010b7e:	2300      	movs	r3, #0
 8010b80:	220a      	movs	r2, #10
 8010b82:	4658      	mov	r0, fp
 8010b84:	f000 fbda 	bl	801133c <__multadd>
 8010b88:	42af      	cmp	r7, r5
 8010b8a:	4681      	mov	r9, r0
 8010b8c:	f04f 0300 	mov.w	r3, #0
 8010b90:	f04f 020a 	mov.w	r2, #10
 8010b94:	4639      	mov	r1, r7
 8010b96:	4658      	mov	r0, fp
 8010b98:	d107      	bne.n	8010baa <_dtoa_r+0xac2>
 8010b9a:	f000 fbcf 	bl	801133c <__multadd>
 8010b9e:	4607      	mov	r7, r0
 8010ba0:	4605      	mov	r5, r0
 8010ba2:	9b07      	ldr	r3, [sp, #28]
 8010ba4:	3301      	adds	r3, #1
 8010ba6:	9307      	str	r3, [sp, #28]
 8010ba8:	e774      	b.n	8010a94 <_dtoa_r+0x9ac>
 8010baa:	f000 fbc7 	bl	801133c <__multadd>
 8010bae:	4629      	mov	r1, r5
 8010bb0:	4607      	mov	r7, r0
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	220a      	movs	r2, #10
 8010bb6:	4658      	mov	r0, fp
 8010bb8:	f000 fbc0 	bl	801133c <__multadd>
 8010bbc:	4605      	mov	r5, r0
 8010bbe:	e7f0      	b.n	8010ba2 <_dtoa_r+0xaba>
 8010bc0:	9b00      	ldr	r3, [sp, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	bfcc      	ite	gt
 8010bc6:	461e      	movgt	r6, r3
 8010bc8:	2601      	movle	r6, #1
 8010bca:	4456      	add	r6, sl
 8010bcc:	2700      	movs	r7, #0
 8010bce:	4649      	mov	r1, r9
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	4658      	mov	r0, fp
 8010bd4:	f000 fd5e 	bl	8011694 <__lshift>
 8010bd8:	4621      	mov	r1, r4
 8010bda:	4681      	mov	r9, r0
 8010bdc:	f000 fdc6 	bl	801176c <__mcmp>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	dcb0      	bgt.n	8010b46 <_dtoa_r+0xa5e>
 8010be4:	d102      	bne.n	8010bec <_dtoa_r+0xb04>
 8010be6:	f018 0f01 	tst.w	r8, #1
 8010bea:	d1ac      	bne.n	8010b46 <_dtoa_r+0xa5e>
 8010bec:	4633      	mov	r3, r6
 8010bee:	461e      	mov	r6, r3
 8010bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bf4:	2a30      	cmp	r2, #48	@ 0x30
 8010bf6:	d0fa      	beq.n	8010bee <_dtoa_r+0xb06>
 8010bf8:	e5c2      	b.n	8010780 <_dtoa_r+0x698>
 8010bfa:	459a      	cmp	sl, r3
 8010bfc:	d1a4      	bne.n	8010b48 <_dtoa_r+0xa60>
 8010bfe:	9b04      	ldr	r3, [sp, #16]
 8010c00:	3301      	adds	r3, #1
 8010c02:	9304      	str	r3, [sp, #16]
 8010c04:	2331      	movs	r3, #49	@ 0x31
 8010c06:	f88a 3000 	strb.w	r3, [sl]
 8010c0a:	e5b9      	b.n	8010780 <_dtoa_r+0x698>
 8010c0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010c0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010c6c <_dtoa_r+0xb84>
 8010c12:	b11b      	cbz	r3, 8010c1c <_dtoa_r+0xb34>
 8010c14:	f10a 0308 	add.w	r3, sl, #8
 8010c18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010c1a:	6013      	str	r3, [r2, #0]
 8010c1c:	4650      	mov	r0, sl
 8010c1e:	b019      	add	sp, #100	@ 0x64
 8010c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	f77f ae37 	ble.w	801089a <_dtoa_r+0x7b2>
 8010c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c30:	2001      	movs	r0, #1
 8010c32:	e655      	b.n	80108e0 <_dtoa_r+0x7f8>
 8010c34:	9b00      	ldr	r3, [sp, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	f77f aed6 	ble.w	80109e8 <_dtoa_r+0x900>
 8010c3c:	4656      	mov	r6, sl
 8010c3e:	4621      	mov	r1, r4
 8010c40:	4648      	mov	r0, r9
 8010c42:	f7ff f9c8 	bl	800ffd6 <quorem>
 8010c46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c4a:	f806 8b01 	strb.w	r8, [r6], #1
 8010c4e:	9b00      	ldr	r3, [sp, #0]
 8010c50:	eba6 020a 	sub.w	r2, r6, sl
 8010c54:	4293      	cmp	r3, r2
 8010c56:	ddb3      	ble.n	8010bc0 <_dtoa_r+0xad8>
 8010c58:	4649      	mov	r1, r9
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	220a      	movs	r2, #10
 8010c5e:	4658      	mov	r0, fp
 8010c60:	f000 fb6c 	bl	801133c <__multadd>
 8010c64:	4681      	mov	r9, r0
 8010c66:	e7ea      	b.n	8010c3e <_dtoa_r+0xb56>
 8010c68:	08013490 	.word	0x08013490
 8010c6c:	08013414 	.word	0x08013414

08010c70 <_free_r>:
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	4605      	mov	r5, r0
 8010c74:	2900      	cmp	r1, #0
 8010c76:	d041      	beq.n	8010cfc <_free_r+0x8c>
 8010c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c7c:	1f0c      	subs	r4, r1, #4
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	bfb8      	it	lt
 8010c82:	18e4      	addlt	r4, r4, r3
 8010c84:	f000 faec 	bl	8011260 <__malloc_lock>
 8010c88:	4a1d      	ldr	r2, [pc, #116]	@ (8010d00 <_free_r+0x90>)
 8010c8a:	6813      	ldr	r3, [r2, #0]
 8010c8c:	b933      	cbnz	r3, 8010c9c <_free_r+0x2c>
 8010c8e:	6063      	str	r3, [r4, #4]
 8010c90:	6014      	str	r4, [r2, #0]
 8010c92:	4628      	mov	r0, r5
 8010c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c98:	f000 bae8 	b.w	801126c <__malloc_unlock>
 8010c9c:	42a3      	cmp	r3, r4
 8010c9e:	d908      	bls.n	8010cb2 <_free_r+0x42>
 8010ca0:	6820      	ldr	r0, [r4, #0]
 8010ca2:	1821      	adds	r1, r4, r0
 8010ca4:	428b      	cmp	r3, r1
 8010ca6:	bf01      	itttt	eq
 8010ca8:	6819      	ldreq	r1, [r3, #0]
 8010caa:	685b      	ldreq	r3, [r3, #4]
 8010cac:	1809      	addeq	r1, r1, r0
 8010cae:	6021      	streq	r1, [r4, #0]
 8010cb0:	e7ed      	b.n	8010c8e <_free_r+0x1e>
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	b10b      	cbz	r3, 8010cbc <_free_r+0x4c>
 8010cb8:	42a3      	cmp	r3, r4
 8010cba:	d9fa      	bls.n	8010cb2 <_free_r+0x42>
 8010cbc:	6811      	ldr	r1, [r2, #0]
 8010cbe:	1850      	adds	r0, r2, r1
 8010cc0:	42a0      	cmp	r0, r4
 8010cc2:	d10b      	bne.n	8010cdc <_free_r+0x6c>
 8010cc4:	6820      	ldr	r0, [r4, #0]
 8010cc6:	4401      	add	r1, r0
 8010cc8:	1850      	adds	r0, r2, r1
 8010cca:	4283      	cmp	r3, r0
 8010ccc:	6011      	str	r1, [r2, #0]
 8010cce:	d1e0      	bne.n	8010c92 <_free_r+0x22>
 8010cd0:	6818      	ldr	r0, [r3, #0]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	6053      	str	r3, [r2, #4]
 8010cd6:	4408      	add	r0, r1
 8010cd8:	6010      	str	r0, [r2, #0]
 8010cda:	e7da      	b.n	8010c92 <_free_r+0x22>
 8010cdc:	d902      	bls.n	8010ce4 <_free_r+0x74>
 8010cde:	230c      	movs	r3, #12
 8010ce0:	602b      	str	r3, [r5, #0]
 8010ce2:	e7d6      	b.n	8010c92 <_free_r+0x22>
 8010ce4:	6820      	ldr	r0, [r4, #0]
 8010ce6:	1821      	adds	r1, r4, r0
 8010ce8:	428b      	cmp	r3, r1
 8010cea:	bf04      	itt	eq
 8010cec:	6819      	ldreq	r1, [r3, #0]
 8010cee:	685b      	ldreq	r3, [r3, #4]
 8010cf0:	6063      	str	r3, [r4, #4]
 8010cf2:	bf04      	itt	eq
 8010cf4:	1809      	addeq	r1, r1, r0
 8010cf6:	6021      	streq	r1, [r4, #0]
 8010cf8:	6054      	str	r4, [r2, #4]
 8010cfa:	e7ca      	b.n	8010c92 <_free_r+0x22>
 8010cfc:	bd38      	pop	{r3, r4, r5, pc}
 8010cfe:	bf00      	nop
 8010d00:	20005b44 	.word	0x20005b44

08010d04 <__ssputs_r>:
 8010d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d08:	688e      	ldr	r6, [r1, #8]
 8010d0a:	461f      	mov	r7, r3
 8010d0c:	42be      	cmp	r6, r7
 8010d0e:	680b      	ldr	r3, [r1, #0]
 8010d10:	4682      	mov	sl, r0
 8010d12:	460c      	mov	r4, r1
 8010d14:	4690      	mov	r8, r2
 8010d16:	d82d      	bhi.n	8010d74 <__ssputs_r+0x70>
 8010d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d20:	d026      	beq.n	8010d70 <__ssputs_r+0x6c>
 8010d22:	6965      	ldr	r5, [r4, #20]
 8010d24:	6909      	ldr	r1, [r1, #16]
 8010d26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d2a:	eba3 0901 	sub.w	r9, r3, r1
 8010d2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d32:	1c7b      	adds	r3, r7, #1
 8010d34:	444b      	add	r3, r9
 8010d36:	106d      	asrs	r5, r5, #1
 8010d38:	429d      	cmp	r5, r3
 8010d3a:	bf38      	it	cc
 8010d3c:	461d      	movcc	r5, r3
 8010d3e:	0553      	lsls	r3, r2, #21
 8010d40:	d527      	bpl.n	8010d92 <__ssputs_r+0x8e>
 8010d42:	4629      	mov	r1, r5
 8010d44:	f000 f960 	bl	8011008 <_malloc_r>
 8010d48:	4606      	mov	r6, r0
 8010d4a:	b360      	cbz	r0, 8010da6 <__ssputs_r+0xa2>
 8010d4c:	6921      	ldr	r1, [r4, #16]
 8010d4e:	464a      	mov	r2, r9
 8010d50:	f7ff f933 	bl	800ffba <memcpy>
 8010d54:	89a3      	ldrh	r3, [r4, #12]
 8010d56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d5e:	81a3      	strh	r3, [r4, #12]
 8010d60:	6126      	str	r6, [r4, #16]
 8010d62:	6165      	str	r5, [r4, #20]
 8010d64:	444e      	add	r6, r9
 8010d66:	eba5 0509 	sub.w	r5, r5, r9
 8010d6a:	6026      	str	r6, [r4, #0]
 8010d6c:	60a5      	str	r5, [r4, #8]
 8010d6e:	463e      	mov	r6, r7
 8010d70:	42be      	cmp	r6, r7
 8010d72:	d900      	bls.n	8010d76 <__ssputs_r+0x72>
 8010d74:	463e      	mov	r6, r7
 8010d76:	6820      	ldr	r0, [r4, #0]
 8010d78:	4632      	mov	r2, r6
 8010d7a:	4641      	mov	r1, r8
 8010d7c:	f000 fe6f 	bl	8011a5e <memmove>
 8010d80:	68a3      	ldr	r3, [r4, #8]
 8010d82:	1b9b      	subs	r3, r3, r6
 8010d84:	60a3      	str	r3, [r4, #8]
 8010d86:	6823      	ldr	r3, [r4, #0]
 8010d88:	4433      	add	r3, r6
 8010d8a:	6023      	str	r3, [r4, #0]
 8010d8c:	2000      	movs	r0, #0
 8010d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d92:	462a      	mov	r2, r5
 8010d94:	f000 fe35 	bl	8011a02 <_realloc_r>
 8010d98:	4606      	mov	r6, r0
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	d1e0      	bne.n	8010d60 <__ssputs_r+0x5c>
 8010d9e:	6921      	ldr	r1, [r4, #16]
 8010da0:	4650      	mov	r0, sl
 8010da2:	f7ff ff65 	bl	8010c70 <_free_r>
 8010da6:	230c      	movs	r3, #12
 8010da8:	f8ca 3000 	str.w	r3, [sl]
 8010dac:	89a3      	ldrh	r3, [r4, #12]
 8010dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010db2:	81a3      	strh	r3, [r4, #12]
 8010db4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010db8:	e7e9      	b.n	8010d8e <__ssputs_r+0x8a>
	...

08010dbc <_svfiprintf_r>:
 8010dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc0:	4698      	mov	r8, r3
 8010dc2:	898b      	ldrh	r3, [r1, #12]
 8010dc4:	061b      	lsls	r3, r3, #24
 8010dc6:	b09d      	sub	sp, #116	@ 0x74
 8010dc8:	4607      	mov	r7, r0
 8010dca:	460d      	mov	r5, r1
 8010dcc:	4614      	mov	r4, r2
 8010dce:	d510      	bpl.n	8010df2 <_svfiprintf_r+0x36>
 8010dd0:	690b      	ldr	r3, [r1, #16]
 8010dd2:	b973      	cbnz	r3, 8010df2 <_svfiprintf_r+0x36>
 8010dd4:	2140      	movs	r1, #64	@ 0x40
 8010dd6:	f000 f917 	bl	8011008 <_malloc_r>
 8010dda:	6028      	str	r0, [r5, #0]
 8010ddc:	6128      	str	r0, [r5, #16]
 8010dde:	b930      	cbnz	r0, 8010dee <_svfiprintf_r+0x32>
 8010de0:	230c      	movs	r3, #12
 8010de2:	603b      	str	r3, [r7, #0]
 8010de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010de8:	b01d      	add	sp, #116	@ 0x74
 8010dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dee:	2340      	movs	r3, #64	@ 0x40
 8010df0:	616b      	str	r3, [r5, #20]
 8010df2:	2300      	movs	r3, #0
 8010df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010df6:	2320      	movs	r3, #32
 8010df8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e00:	2330      	movs	r3, #48	@ 0x30
 8010e02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010fa0 <_svfiprintf_r+0x1e4>
 8010e06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e0a:	f04f 0901 	mov.w	r9, #1
 8010e0e:	4623      	mov	r3, r4
 8010e10:	469a      	mov	sl, r3
 8010e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e16:	b10a      	cbz	r2, 8010e1c <_svfiprintf_r+0x60>
 8010e18:	2a25      	cmp	r2, #37	@ 0x25
 8010e1a:	d1f9      	bne.n	8010e10 <_svfiprintf_r+0x54>
 8010e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8010e20:	d00b      	beq.n	8010e3a <_svfiprintf_r+0x7e>
 8010e22:	465b      	mov	r3, fp
 8010e24:	4622      	mov	r2, r4
 8010e26:	4629      	mov	r1, r5
 8010e28:	4638      	mov	r0, r7
 8010e2a:	f7ff ff6b 	bl	8010d04 <__ssputs_r>
 8010e2e:	3001      	adds	r0, #1
 8010e30:	f000 80a7 	beq.w	8010f82 <_svfiprintf_r+0x1c6>
 8010e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e36:	445a      	add	r2, fp
 8010e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f000 809f 	beq.w	8010f82 <_svfiprintf_r+0x1c6>
 8010e44:	2300      	movs	r3, #0
 8010e46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e4e:	f10a 0a01 	add.w	sl, sl, #1
 8010e52:	9304      	str	r3, [sp, #16]
 8010e54:	9307      	str	r3, [sp, #28]
 8010e56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e5c:	4654      	mov	r4, sl
 8010e5e:	2205      	movs	r2, #5
 8010e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e64:	484e      	ldr	r0, [pc, #312]	@ (8010fa0 <_svfiprintf_r+0x1e4>)
 8010e66:	f7ef f9b3 	bl	80001d0 <memchr>
 8010e6a:	9a04      	ldr	r2, [sp, #16]
 8010e6c:	b9d8      	cbnz	r0, 8010ea6 <_svfiprintf_r+0xea>
 8010e6e:	06d0      	lsls	r0, r2, #27
 8010e70:	bf44      	itt	mi
 8010e72:	2320      	movmi	r3, #32
 8010e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e78:	0711      	lsls	r1, r2, #28
 8010e7a:	bf44      	itt	mi
 8010e7c:	232b      	movmi	r3, #43	@ 0x2b
 8010e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e82:	f89a 3000 	ldrb.w	r3, [sl]
 8010e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e88:	d015      	beq.n	8010eb6 <_svfiprintf_r+0xfa>
 8010e8a:	9a07      	ldr	r2, [sp, #28]
 8010e8c:	4654      	mov	r4, sl
 8010e8e:	2000      	movs	r0, #0
 8010e90:	f04f 0c0a 	mov.w	ip, #10
 8010e94:	4621      	mov	r1, r4
 8010e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e9a:	3b30      	subs	r3, #48	@ 0x30
 8010e9c:	2b09      	cmp	r3, #9
 8010e9e:	d94b      	bls.n	8010f38 <_svfiprintf_r+0x17c>
 8010ea0:	b1b0      	cbz	r0, 8010ed0 <_svfiprintf_r+0x114>
 8010ea2:	9207      	str	r2, [sp, #28]
 8010ea4:	e014      	b.n	8010ed0 <_svfiprintf_r+0x114>
 8010ea6:	eba0 0308 	sub.w	r3, r0, r8
 8010eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	9304      	str	r3, [sp, #16]
 8010eb2:	46a2      	mov	sl, r4
 8010eb4:	e7d2      	b.n	8010e5c <_svfiprintf_r+0xa0>
 8010eb6:	9b03      	ldr	r3, [sp, #12]
 8010eb8:	1d19      	adds	r1, r3, #4
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	9103      	str	r1, [sp, #12]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	bfbb      	ittet	lt
 8010ec2:	425b      	neglt	r3, r3
 8010ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8010ec8:	9307      	strge	r3, [sp, #28]
 8010eca:	9307      	strlt	r3, [sp, #28]
 8010ecc:	bfb8      	it	lt
 8010ece:	9204      	strlt	r2, [sp, #16]
 8010ed0:	7823      	ldrb	r3, [r4, #0]
 8010ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ed4:	d10a      	bne.n	8010eec <_svfiprintf_r+0x130>
 8010ed6:	7863      	ldrb	r3, [r4, #1]
 8010ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010eda:	d132      	bne.n	8010f42 <_svfiprintf_r+0x186>
 8010edc:	9b03      	ldr	r3, [sp, #12]
 8010ede:	1d1a      	adds	r2, r3, #4
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	9203      	str	r2, [sp, #12]
 8010ee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ee8:	3402      	adds	r4, #2
 8010eea:	9305      	str	r3, [sp, #20]
 8010eec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010fb0 <_svfiprintf_r+0x1f4>
 8010ef0:	7821      	ldrb	r1, [r4, #0]
 8010ef2:	2203      	movs	r2, #3
 8010ef4:	4650      	mov	r0, sl
 8010ef6:	f7ef f96b 	bl	80001d0 <memchr>
 8010efa:	b138      	cbz	r0, 8010f0c <_svfiprintf_r+0x150>
 8010efc:	9b04      	ldr	r3, [sp, #16]
 8010efe:	eba0 000a 	sub.w	r0, r0, sl
 8010f02:	2240      	movs	r2, #64	@ 0x40
 8010f04:	4082      	lsls	r2, r0
 8010f06:	4313      	orrs	r3, r2
 8010f08:	3401      	adds	r4, #1
 8010f0a:	9304      	str	r3, [sp, #16]
 8010f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f10:	4824      	ldr	r0, [pc, #144]	@ (8010fa4 <_svfiprintf_r+0x1e8>)
 8010f12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f16:	2206      	movs	r2, #6
 8010f18:	f7ef f95a 	bl	80001d0 <memchr>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d036      	beq.n	8010f8e <_svfiprintf_r+0x1d2>
 8010f20:	4b21      	ldr	r3, [pc, #132]	@ (8010fa8 <_svfiprintf_r+0x1ec>)
 8010f22:	bb1b      	cbnz	r3, 8010f6c <_svfiprintf_r+0x1b0>
 8010f24:	9b03      	ldr	r3, [sp, #12]
 8010f26:	3307      	adds	r3, #7
 8010f28:	f023 0307 	bic.w	r3, r3, #7
 8010f2c:	3308      	adds	r3, #8
 8010f2e:	9303      	str	r3, [sp, #12]
 8010f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f32:	4433      	add	r3, r6
 8010f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f36:	e76a      	b.n	8010e0e <_svfiprintf_r+0x52>
 8010f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f3c:	460c      	mov	r4, r1
 8010f3e:	2001      	movs	r0, #1
 8010f40:	e7a8      	b.n	8010e94 <_svfiprintf_r+0xd8>
 8010f42:	2300      	movs	r3, #0
 8010f44:	3401      	adds	r4, #1
 8010f46:	9305      	str	r3, [sp, #20]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	f04f 0c0a 	mov.w	ip, #10
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f54:	3a30      	subs	r2, #48	@ 0x30
 8010f56:	2a09      	cmp	r2, #9
 8010f58:	d903      	bls.n	8010f62 <_svfiprintf_r+0x1a6>
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d0c6      	beq.n	8010eec <_svfiprintf_r+0x130>
 8010f5e:	9105      	str	r1, [sp, #20]
 8010f60:	e7c4      	b.n	8010eec <_svfiprintf_r+0x130>
 8010f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f66:	4604      	mov	r4, r0
 8010f68:	2301      	movs	r3, #1
 8010f6a:	e7f0      	b.n	8010f4e <_svfiprintf_r+0x192>
 8010f6c:	ab03      	add	r3, sp, #12
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	462a      	mov	r2, r5
 8010f72:	4b0e      	ldr	r3, [pc, #56]	@ (8010fac <_svfiprintf_r+0x1f0>)
 8010f74:	a904      	add	r1, sp, #16
 8010f76:	4638      	mov	r0, r7
 8010f78:	f7fe faf6 	bl	800f568 <_printf_float>
 8010f7c:	1c42      	adds	r2, r0, #1
 8010f7e:	4606      	mov	r6, r0
 8010f80:	d1d6      	bne.n	8010f30 <_svfiprintf_r+0x174>
 8010f82:	89ab      	ldrh	r3, [r5, #12]
 8010f84:	065b      	lsls	r3, r3, #25
 8010f86:	f53f af2d 	bmi.w	8010de4 <_svfiprintf_r+0x28>
 8010f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f8c:	e72c      	b.n	8010de8 <_svfiprintf_r+0x2c>
 8010f8e:	ab03      	add	r3, sp, #12
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	462a      	mov	r2, r5
 8010f94:	4b05      	ldr	r3, [pc, #20]	@ (8010fac <_svfiprintf_r+0x1f0>)
 8010f96:	a904      	add	r1, sp, #16
 8010f98:	4638      	mov	r0, r7
 8010f9a:	f7fe fd7d 	bl	800fa98 <_printf_i>
 8010f9e:	e7ed      	b.n	8010f7c <_svfiprintf_r+0x1c0>
 8010fa0:	080134a1 	.word	0x080134a1
 8010fa4:	080134ab 	.word	0x080134ab
 8010fa8:	0800f569 	.word	0x0800f569
 8010fac:	08010d05 	.word	0x08010d05
 8010fb0:	080134a7 	.word	0x080134a7

08010fb4 <malloc>:
 8010fb4:	4b02      	ldr	r3, [pc, #8]	@ (8010fc0 <malloc+0xc>)
 8010fb6:	4601      	mov	r1, r0
 8010fb8:	6818      	ldr	r0, [r3, #0]
 8010fba:	f000 b825 	b.w	8011008 <_malloc_r>
 8010fbe:	bf00      	nop
 8010fc0:	2000007c 	.word	0x2000007c

08010fc4 <sbrk_aligned>:
 8010fc4:	b570      	push	{r4, r5, r6, lr}
 8010fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8011004 <sbrk_aligned+0x40>)
 8010fc8:	460c      	mov	r4, r1
 8010fca:	6831      	ldr	r1, [r6, #0]
 8010fcc:	4605      	mov	r5, r0
 8010fce:	b911      	cbnz	r1, 8010fd6 <sbrk_aligned+0x12>
 8010fd0:	f000 fd94 	bl	8011afc <_sbrk_r>
 8010fd4:	6030      	str	r0, [r6, #0]
 8010fd6:	4621      	mov	r1, r4
 8010fd8:	4628      	mov	r0, r5
 8010fda:	f000 fd8f 	bl	8011afc <_sbrk_r>
 8010fde:	1c43      	adds	r3, r0, #1
 8010fe0:	d103      	bne.n	8010fea <sbrk_aligned+0x26>
 8010fe2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	bd70      	pop	{r4, r5, r6, pc}
 8010fea:	1cc4      	adds	r4, r0, #3
 8010fec:	f024 0403 	bic.w	r4, r4, #3
 8010ff0:	42a0      	cmp	r0, r4
 8010ff2:	d0f8      	beq.n	8010fe6 <sbrk_aligned+0x22>
 8010ff4:	1a21      	subs	r1, r4, r0
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	f000 fd80 	bl	8011afc <_sbrk_r>
 8010ffc:	3001      	adds	r0, #1
 8010ffe:	d1f2      	bne.n	8010fe6 <sbrk_aligned+0x22>
 8011000:	e7ef      	b.n	8010fe2 <sbrk_aligned+0x1e>
 8011002:	bf00      	nop
 8011004:	20005b40 	.word	0x20005b40

08011008 <_malloc_r>:
 8011008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801100c:	1ccd      	adds	r5, r1, #3
 801100e:	f025 0503 	bic.w	r5, r5, #3
 8011012:	3508      	adds	r5, #8
 8011014:	2d0c      	cmp	r5, #12
 8011016:	bf38      	it	cc
 8011018:	250c      	movcc	r5, #12
 801101a:	2d00      	cmp	r5, #0
 801101c:	4606      	mov	r6, r0
 801101e:	db01      	blt.n	8011024 <_malloc_r+0x1c>
 8011020:	42a9      	cmp	r1, r5
 8011022:	d904      	bls.n	801102e <_malloc_r+0x26>
 8011024:	230c      	movs	r3, #12
 8011026:	6033      	str	r3, [r6, #0]
 8011028:	2000      	movs	r0, #0
 801102a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801102e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011104 <_malloc_r+0xfc>
 8011032:	f000 f915 	bl	8011260 <__malloc_lock>
 8011036:	f8d8 3000 	ldr.w	r3, [r8]
 801103a:	461c      	mov	r4, r3
 801103c:	bb44      	cbnz	r4, 8011090 <_malloc_r+0x88>
 801103e:	4629      	mov	r1, r5
 8011040:	4630      	mov	r0, r6
 8011042:	f7ff ffbf 	bl	8010fc4 <sbrk_aligned>
 8011046:	1c43      	adds	r3, r0, #1
 8011048:	4604      	mov	r4, r0
 801104a:	d158      	bne.n	80110fe <_malloc_r+0xf6>
 801104c:	f8d8 4000 	ldr.w	r4, [r8]
 8011050:	4627      	mov	r7, r4
 8011052:	2f00      	cmp	r7, #0
 8011054:	d143      	bne.n	80110de <_malloc_r+0xd6>
 8011056:	2c00      	cmp	r4, #0
 8011058:	d04b      	beq.n	80110f2 <_malloc_r+0xea>
 801105a:	6823      	ldr	r3, [r4, #0]
 801105c:	4639      	mov	r1, r7
 801105e:	4630      	mov	r0, r6
 8011060:	eb04 0903 	add.w	r9, r4, r3
 8011064:	f000 fd4a 	bl	8011afc <_sbrk_r>
 8011068:	4581      	cmp	r9, r0
 801106a:	d142      	bne.n	80110f2 <_malloc_r+0xea>
 801106c:	6821      	ldr	r1, [r4, #0]
 801106e:	1a6d      	subs	r5, r5, r1
 8011070:	4629      	mov	r1, r5
 8011072:	4630      	mov	r0, r6
 8011074:	f7ff ffa6 	bl	8010fc4 <sbrk_aligned>
 8011078:	3001      	adds	r0, #1
 801107a:	d03a      	beq.n	80110f2 <_malloc_r+0xea>
 801107c:	6823      	ldr	r3, [r4, #0]
 801107e:	442b      	add	r3, r5
 8011080:	6023      	str	r3, [r4, #0]
 8011082:	f8d8 3000 	ldr.w	r3, [r8]
 8011086:	685a      	ldr	r2, [r3, #4]
 8011088:	bb62      	cbnz	r2, 80110e4 <_malloc_r+0xdc>
 801108a:	f8c8 7000 	str.w	r7, [r8]
 801108e:	e00f      	b.n	80110b0 <_malloc_r+0xa8>
 8011090:	6822      	ldr	r2, [r4, #0]
 8011092:	1b52      	subs	r2, r2, r5
 8011094:	d420      	bmi.n	80110d8 <_malloc_r+0xd0>
 8011096:	2a0b      	cmp	r2, #11
 8011098:	d917      	bls.n	80110ca <_malloc_r+0xc2>
 801109a:	1961      	adds	r1, r4, r5
 801109c:	42a3      	cmp	r3, r4
 801109e:	6025      	str	r5, [r4, #0]
 80110a0:	bf18      	it	ne
 80110a2:	6059      	strne	r1, [r3, #4]
 80110a4:	6863      	ldr	r3, [r4, #4]
 80110a6:	bf08      	it	eq
 80110a8:	f8c8 1000 	streq.w	r1, [r8]
 80110ac:	5162      	str	r2, [r4, r5]
 80110ae:	604b      	str	r3, [r1, #4]
 80110b0:	4630      	mov	r0, r6
 80110b2:	f000 f8db 	bl	801126c <__malloc_unlock>
 80110b6:	f104 000b 	add.w	r0, r4, #11
 80110ba:	1d23      	adds	r3, r4, #4
 80110bc:	f020 0007 	bic.w	r0, r0, #7
 80110c0:	1ac2      	subs	r2, r0, r3
 80110c2:	bf1c      	itt	ne
 80110c4:	1a1b      	subne	r3, r3, r0
 80110c6:	50a3      	strne	r3, [r4, r2]
 80110c8:	e7af      	b.n	801102a <_malloc_r+0x22>
 80110ca:	6862      	ldr	r2, [r4, #4]
 80110cc:	42a3      	cmp	r3, r4
 80110ce:	bf0c      	ite	eq
 80110d0:	f8c8 2000 	streq.w	r2, [r8]
 80110d4:	605a      	strne	r2, [r3, #4]
 80110d6:	e7eb      	b.n	80110b0 <_malloc_r+0xa8>
 80110d8:	4623      	mov	r3, r4
 80110da:	6864      	ldr	r4, [r4, #4]
 80110dc:	e7ae      	b.n	801103c <_malloc_r+0x34>
 80110de:	463c      	mov	r4, r7
 80110e0:	687f      	ldr	r7, [r7, #4]
 80110e2:	e7b6      	b.n	8011052 <_malloc_r+0x4a>
 80110e4:	461a      	mov	r2, r3
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	42a3      	cmp	r3, r4
 80110ea:	d1fb      	bne.n	80110e4 <_malloc_r+0xdc>
 80110ec:	2300      	movs	r3, #0
 80110ee:	6053      	str	r3, [r2, #4]
 80110f0:	e7de      	b.n	80110b0 <_malloc_r+0xa8>
 80110f2:	230c      	movs	r3, #12
 80110f4:	6033      	str	r3, [r6, #0]
 80110f6:	4630      	mov	r0, r6
 80110f8:	f000 f8b8 	bl	801126c <__malloc_unlock>
 80110fc:	e794      	b.n	8011028 <_malloc_r+0x20>
 80110fe:	6005      	str	r5, [r0, #0]
 8011100:	e7d6      	b.n	80110b0 <_malloc_r+0xa8>
 8011102:	bf00      	nop
 8011104:	20005b44 	.word	0x20005b44

08011108 <__sflush_r>:
 8011108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011110:	0716      	lsls	r6, r2, #28
 8011112:	4605      	mov	r5, r0
 8011114:	460c      	mov	r4, r1
 8011116:	d454      	bmi.n	80111c2 <__sflush_r+0xba>
 8011118:	684b      	ldr	r3, [r1, #4]
 801111a:	2b00      	cmp	r3, #0
 801111c:	dc02      	bgt.n	8011124 <__sflush_r+0x1c>
 801111e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011120:	2b00      	cmp	r3, #0
 8011122:	dd48      	ble.n	80111b6 <__sflush_r+0xae>
 8011124:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011126:	2e00      	cmp	r6, #0
 8011128:	d045      	beq.n	80111b6 <__sflush_r+0xae>
 801112a:	2300      	movs	r3, #0
 801112c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011130:	682f      	ldr	r7, [r5, #0]
 8011132:	6a21      	ldr	r1, [r4, #32]
 8011134:	602b      	str	r3, [r5, #0]
 8011136:	d030      	beq.n	801119a <__sflush_r+0x92>
 8011138:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	0759      	lsls	r1, r3, #29
 801113e:	d505      	bpl.n	801114c <__sflush_r+0x44>
 8011140:	6863      	ldr	r3, [r4, #4]
 8011142:	1ad2      	subs	r2, r2, r3
 8011144:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011146:	b10b      	cbz	r3, 801114c <__sflush_r+0x44>
 8011148:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801114a:	1ad2      	subs	r2, r2, r3
 801114c:	2300      	movs	r3, #0
 801114e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011150:	6a21      	ldr	r1, [r4, #32]
 8011152:	4628      	mov	r0, r5
 8011154:	47b0      	blx	r6
 8011156:	1c43      	adds	r3, r0, #1
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	d106      	bne.n	801116a <__sflush_r+0x62>
 801115c:	6829      	ldr	r1, [r5, #0]
 801115e:	291d      	cmp	r1, #29
 8011160:	d82b      	bhi.n	80111ba <__sflush_r+0xb2>
 8011162:	4a2a      	ldr	r2, [pc, #168]	@ (801120c <__sflush_r+0x104>)
 8011164:	410a      	asrs	r2, r1
 8011166:	07d6      	lsls	r6, r2, #31
 8011168:	d427      	bmi.n	80111ba <__sflush_r+0xb2>
 801116a:	2200      	movs	r2, #0
 801116c:	6062      	str	r2, [r4, #4]
 801116e:	04d9      	lsls	r1, r3, #19
 8011170:	6922      	ldr	r2, [r4, #16]
 8011172:	6022      	str	r2, [r4, #0]
 8011174:	d504      	bpl.n	8011180 <__sflush_r+0x78>
 8011176:	1c42      	adds	r2, r0, #1
 8011178:	d101      	bne.n	801117e <__sflush_r+0x76>
 801117a:	682b      	ldr	r3, [r5, #0]
 801117c:	b903      	cbnz	r3, 8011180 <__sflush_r+0x78>
 801117e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011182:	602f      	str	r7, [r5, #0]
 8011184:	b1b9      	cbz	r1, 80111b6 <__sflush_r+0xae>
 8011186:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801118a:	4299      	cmp	r1, r3
 801118c:	d002      	beq.n	8011194 <__sflush_r+0x8c>
 801118e:	4628      	mov	r0, r5
 8011190:	f7ff fd6e 	bl	8010c70 <_free_r>
 8011194:	2300      	movs	r3, #0
 8011196:	6363      	str	r3, [r4, #52]	@ 0x34
 8011198:	e00d      	b.n	80111b6 <__sflush_r+0xae>
 801119a:	2301      	movs	r3, #1
 801119c:	4628      	mov	r0, r5
 801119e:	47b0      	blx	r6
 80111a0:	4602      	mov	r2, r0
 80111a2:	1c50      	adds	r0, r2, #1
 80111a4:	d1c9      	bne.n	801113a <__sflush_r+0x32>
 80111a6:	682b      	ldr	r3, [r5, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d0c6      	beq.n	801113a <__sflush_r+0x32>
 80111ac:	2b1d      	cmp	r3, #29
 80111ae:	d001      	beq.n	80111b4 <__sflush_r+0xac>
 80111b0:	2b16      	cmp	r3, #22
 80111b2:	d11e      	bne.n	80111f2 <__sflush_r+0xea>
 80111b4:	602f      	str	r7, [r5, #0]
 80111b6:	2000      	movs	r0, #0
 80111b8:	e022      	b.n	8011200 <__sflush_r+0xf8>
 80111ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111be:	b21b      	sxth	r3, r3
 80111c0:	e01b      	b.n	80111fa <__sflush_r+0xf2>
 80111c2:	690f      	ldr	r7, [r1, #16]
 80111c4:	2f00      	cmp	r7, #0
 80111c6:	d0f6      	beq.n	80111b6 <__sflush_r+0xae>
 80111c8:	0793      	lsls	r3, r2, #30
 80111ca:	680e      	ldr	r6, [r1, #0]
 80111cc:	bf08      	it	eq
 80111ce:	694b      	ldreq	r3, [r1, #20]
 80111d0:	600f      	str	r7, [r1, #0]
 80111d2:	bf18      	it	ne
 80111d4:	2300      	movne	r3, #0
 80111d6:	eba6 0807 	sub.w	r8, r6, r7
 80111da:	608b      	str	r3, [r1, #8]
 80111dc:	f1b8 0f00 	cmp.w	r8, #0
 80111e0:	dde9      	ble.n	80111b6 <__sflush_r+0xae>
 80111e2:	6a21      	ldr	r1, [r4, #32]
 80111e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80111e6:	4643      	mov	r3, r8
 80111e8:	463a      	mov	r2, r7
 80111ea:	4628      	mov	r0, r5
 80111ec:	47b0      	blx	r6
 80111ee:	2800      	cmp	r0, #0
 80111f0:	dc08      	bgt.n	8011204 <__sflush_r+0xfc>
 80111f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111fa:	81a3      	strh	r3, [r4, #12]
 80111fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011204:	4407      	add	r7, r0
 8011206:	eba8 0800 	sub.w	r8, r8, r0
 801120a:	e7e7      	b.n	80111dc <__sflush_r+0xd4>
 801120c:	dfbffffe 	.word	0xdfbffffe

08011210 <_fflush_r>:
 8011210:	b538      	push	{r3, r4, r5, lr}
 8011212:	690b      	ldr	r3, [r1, #16]
 8011214:	4605      	mov	r5, r0
 8011216:	460c      	mov	r4, r1
 8011218:	b913      	cbnz	r3, 8011220 <_fflush_r+0x10>
 801121a:	2500      	movs	r5, #0
 801121c:	4628      	mov	r0, r5
 801121e:	bd38      	pop	{r3, r4, r5, pc}
 8011220:	b118      	cbz	r0, 801122a <_fflush_r+0x1a>
 8011222:	6a03      	ldr	r3, [r0, #32]
 8011224:	b90b      	cbnz	r3, 801122a <_fflush_r+0x1a>
 8011226:	f7fe fde3 	bl	800fdf0 <__sinit>
 801122a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d0f3      	beq.n	801121a <_fflush_r+0xa>
 8011232:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011234:	07d0      	lsls	r0, r2, #31
 8011236:	d404      	bmi.n	8011242 <_fflush_r+0x32>
 8011238:	0599      	lsls	r1, r3, #22
 801123a:	d402      	bmi.n	8011242 <_fflush_r+0x32>
 801123c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801123e:	f7fe feba 	bl	800ffb6 <__retarget_lock_acquire_recursive>
 8011242:	4628      	mov	r0, r5
 8011244:	4621      	mov	r1, r4
 8011246:	f7ff ff5f 	bl	8011108 <__sflush_r>
 801124a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801124c:	07da      	lsls	r2, r3, #31
 801124e:	4605      	mov	r5, r0
 8011250:	d4e4      	bmi.n	801121c <_fflush_r+0xc>
 8011252:	89a3      	ldrh	r3, [r4, #12]
 8011254:	059b      	lsls	r3, r3, #22
 8011256:	d4e1      	bmi.n	801121c <_fflush_r+0xc>
 8011258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801125a:	f7fe fead 	bl	800ffb8 <__retarget_lock_release_recursive>
 801125e:	e7dd      	b.n	801121c <_fflush_r+0xc>

08011260 <__malloc_lock>:
 8011260:	4801      	ldr	r0, [pc, #4]	@ (8011268 <__malloc_lock+0x8>)
 8011262:	f7fe bea8 	b.w	800ffb6 <__retarget_lock_acquire_recursive>
 8011266:	bf00      	nop
 8011268:	20005b3c 	.word	0x20005b3c

0801126c <__malloc_unlock>:
 801126c:	4801      	ldr	r0, [pc, #4]	@ (8011274 <__malloc_unlock+0x8>)
 801126e:	f7fe bea3 	b.w	800ffb8 <__retarget_lock_release_recursive>
 8011272:	bf00      	nop
 8011274:	20005b3c 	.word	0x20005b3c

08011278 <_Balloc>:
 8011278:	b570      	push	{r4, r5, r6, lr}
 801127a:	69c6      	ldr	r6, [r0, #28]
 801127c:	4604      	mov	r4, r0
 801127e:	460d      	mov	r5, r1
 8011280:	b976      	cbnz	r6, 80112a0 <_Balloc+0x28>
 8011282:	2010      	movs	r0, #16
 8011284:	f7ff fe96 	bl	8010fb4 <malloc>
 8011288:	4602      	mov	r2, r0
 801128a:	61e0      	str	r0, [r4, #28]
 801128c:	b920      	cbnz	r0, 8011298 <_Balloc+0x20>
 801128e:	4b18      	ldr	r3, [pc, #96]	@ (80112f0 <_Balloc+0x78>)
 8011290:	4818      	ldr	r0, [pc, #96]	@ (80112f4 <_Balloc+0x7c>)
 8011292:	216b      	movs	r1, #107	@ 0x6b
 8011294:	f000 fc54 	bl	8011b40 <__assert_func>
 8011298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801129c:	6006      	str	r6, [r0, #0]
 801129e:	60c6      	str	r6, [r0, #12]
 80112a0:	69e6      	ldr	r6, [r4, #28]
 80112a2:	68f3      	ldr	r3, [r6, #12]
 80112a4:	b183      	cbz	r3, 80112c8 <_Balloc+0x50>
 80112a6:	69e3      	ldr	r3, [r4, #28]
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112ae:	b9b8      	cbnz	r0, 80112e0 <_Balloc+0x68>
 80112b0:	2101      	movs	r1, #1
 80112b2:	fa01 f605 	lsl.w	r6, r1, r5
 80112b6:	1d72      	adds	r2, r6, #5
 80112b8:	0092      	lsls	r2, r2, #2
 80112ba:	4620      	mov	r0, r4
 80112bc:	f000 fc5e 	bl	8011b7c <_calloc_r>
 80112c0:	b160      	cbz	r0, 80112dc <_Balloc+0x64>
 80112c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112c6:	e00e      	b.n	80112e6 <_Balloc+0x6e>
 80112c8:	2221      	movs	r2, #33	@ 0x21
 80112ca:	2104      	movs	r1, #4
 80112cc:	4620      	mov	r0, r4
 80112ce:	f000 fc55 	bl	8011b7c <_calloc_r>
 80112d2:	69e3      	ldr	r3, [r4, #28]
 80112d4:	60f0      	str	r0, [r6, #12]
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d1e4      	bne.n	80112a6 <_Balloc+0x2e>
 80112dc:	2000      	movs	r0, #0
 80112de:	bd70      	pop	{r4, r5, r6, pc}
 80112e0:	6802      	ldr	r2, [r0, #0]
 80112e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112e6:	2300      	movs	r3, #0
 80112e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112ec:	e7f7      	b.n	80112de <_Balloc+0x66>
 80112ee:	bf00      	nop
 80112f0:	08013421 	.word	0x08013421
 80112f4:	080134b2 	.word	0x080134b2

080112f8 <_Bfree>:
 80112f8:	b570      	push	{r4, r5, r6, lr}
 80112fa:	69c6      	ldr	r6, [r0, #28]
 80112fc:	4605      	mov	r5, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	b976      	cbnz	r6, 8011320 <_Bfree+0x28>
 8011302:	2010      	movs	r0, #16
 8011304:	f7ff fe56 	bl	8010fb4 <malloc>
 8011308:	4602      	mov	r2, r0
 801130a:	61e8      	str	r0, [r5, #28]
 801130c:	b920      	cbnz	r0, 8011318 <_Bfree+0x20>
 801130e:	4b09      	ldr	r3, [pc, #36]	@ (8011334 <_Bfree+0x3c>)
 8011310:	4809      	ldr	r0, [pc, #36]	@ (8011338 <_Bfree+0x40>)
 8011312:	218f      	movs	r1, #143	@ 0x8f
 8011314:	f000 fc14 	bl	8011b40 <__assert_func>
 8011318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801131c:	6006      	str	r6, [r0, #0]
 801131e:	60c6      	str	r6, [r0, #12]
 8011320:	b13c      	cbz	r4, 8011332 <_Bfree+0x3a>
 8011322:	69eb      	ldr	r3, [r5, #28]
 8011324:	6862      	ldr	r2, [r4, #4]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801132c:	6021      	str	r1, [r4, #0]
 801132e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011332:	bd70      	pop	{r4, r5, r6, pc}
 8011334:	08013421 	.word	0x08013421
 8011338:	080134b2 	.word	0x080134b2

0801133c <__multadd>:
 801133c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011340:	690d      	ldr	r5, [r1, #16]
 8011342:	4607      	mov	r7, r0
 8011344:	460c      	mov	r4, r1
 8011346:	461e      	mov	r6, r3
 8011348:	f101 0c14 	add.w	ip, r1, #20
 801134c:	2000      	movs	r0, #0
 801134e:	f8dc 3000 	ldr.w	r3, [ip]
 8011352:	b299      	uxth	r1, r3
 8011354:	fb02 6101 	mla	r1, r2, r1, r6
 8011358:	0c1e      	lsrs	r6, r3, #16
 801135a:	0c0b      	lsrs	r3, r1, #16
 801135c:	fb02 3306 	mla	r3, r2, r6, r3
 8011360:	b289      	uxth	r1, r1
 8011362:	3001      	adds	r0, #1
 8011364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011368:	4285      	cmp	r5, r0
 801136a:	f84c 1b04 	str.w	r1, [ip], #4
 801136e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011372:	dcec      	bgt.n	801134e <__multadd+0x12>
 8011374:	b30e      	cbz	r6, 80113ba <__multadd+0x7e>
 8011376:	68a3      	ldr	r3, [r4, #8]
 8011378:	42ab      	cmp	r3, r5
 801137a:	dc19      	bgt.n	80113b0 <__multadd+0x74>
 801137c:	6861      	ldr	r1, [r4, #4]
 801137e:	4638      	mov	r0, r7
 8011380:	3101      	adds	r1, #1
 8011382:	f7ff ff79 	bl	8011278 <_Balloc>
 8011386:	4680      	mov	r8, r0
 8011388:	b928      	cbnz	r0, 8011396 <__multadd+0x5a>
 801138a:	4602      	mov	r2, r0
 801138c:	4b0c      	ldr	r3, [pc, #48]	@ (80113c0 <__multadd+0x84>)
 801138e:	480d      	ldr	r0, [pc, #52]	@ (80113c4 <__multadd+0x88>)
 8011390:	21ba      	movs	r1, #186	@ 0xba
 8011392:	f000 fbd5 	bl	8011b40 <__assert_func>
 8011396:	6922      	ldr	r2, [r4, #16]
 8011398:	3202      	adds	r2, #2
 801139a:	f104 010c 	add.w	r1, r4, #12
 801139e:	0092      	lsls	r2, r2, #2
 80113a0:	300c      	adds	r0, #12
 80113a2:	f7fe fe0a 	bl	800ffba <memcpy>
 80113a6:	4621      	mov	r1, r4
 80113a8:	4638      	mov	r0, r7
 80113aa:	f7ff ffa5 	bl	80112f8 <_Bfree>
 80113ae:	4644      	mov	r4, r8
 80113b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113b4:	3501      	adds	r5, #1
 80113b6:	615e      	str	r6, [r3, #20]
 80113b8:	6125      	str	r5, [r4, #16]
 80113ba:	4620      	mov	r0, r4
 80113bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c0:	08013490 	.word	0x08013490
 80113c4:	080134b2 	.word	0x080134b2

080113c8 <__hi0bits>:
 80113c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80113cc:	4603      	mov	r3, r0
 80113ce:	bf36      	itet	cc
 80113d0:	0403      	lslcc	r3, r0, #16
 80113d2:	2000      	movcs	r0, #0
 80113d4:	2010      	movcc	r0, #16
 80113d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80113da:	bf3c      	itt	cc
 80113dc:	021b      	lslcc	r3, r3, #8
 80113de:	3008      	addcc	r0, #8
 80113e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80113e4:	bf3c      	itt	cc
 80113e6:	011b      	lslcc	r3, r3, #4
 80113e8:	3004      	addcc	r0, #4
 80113ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80113ee:	bf3c      	itt	cc
 80113f0:	009b      	lslcc	r3, r3, #2
 80113f2:	3002      	addcc	r0, #2
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	db05      	blt.n	8011404 <__hi0bits+0x3c>
 80113f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80113fc:	f100 0001 	add.w	r0, r0, #1
 8011400:	bf08      	it	eq
 8011402:	2020      	moveq	r0, #32
 8011404:	4770      	bx	lr

08011406 <__lo0bits>:
 8011406:	6803      	ldr	r3, [r0, #0]
 8011408:	4602      	mov	r2, r0
 801140a:	f013 0007 	ands.w	r0, r3, #7
 801140e:	d00b      	beq.n	8011428 <__lo0bits+0x22>
 8011410:	07d9      	lsls	r1, r3, #31
 8011412:	d421      	bmi.n	8011458 <__lo0bits+0x52>
 8011414:	0798      	lsls	r0, r3, #30
 8011416:	bf49      	itett	mi
 8011418:	085b      	lsrmi	r3, r3, #1
 801141a:	089b      	lsrpl	r3, r3, #2
 801141c:	2001      	movmi	r0, #1
 801141e:	6013      	strmi	r3, [r2, #0]
 8011420:	bf5c      	itt	pl
 8011422:	6013      	strpl	r3, [r2, #0]
 8011424:	2002      	movpl	r0, #2
 8011426:	4770      	bx	lr
 8011428:	b299      	uxth	r1, r3
 801142a:	b909      	cbnz	r1, 8011430 <__lo0bits+0x2a>
 801142c:	0c1b      	lsrs	r3, r3, #16
 801142e:	2010      	movs	r0, #16
 8011430:	b2d9      	uxtb	r1, r3
 8011432:	b909      	cbnz	r1, 8011438 <__lo0bits+0x32>
 8011434:	3008      	adds	r0, #8
 8011436:	0a1b      	lsrs	r3, r3, #8
 8011438:	0719      	lsls	r1, r3, #28
 801143a:	bf04      	itt	eq
 801143c:	091b      	lsreq	r3, r3, #4
 801143e:	3004      	addeq	r0, #4
 8011440:	0799      	lsls	r1, r3, #30
 8011442:	bf04      	itt	eq
 8011444:	089b      	lsreq	r3, r3, #2
 8011446:	3002      	addeq	r0, #2
 8011448:	07d9      	lsls	r1, r3, #31
 801144a:	d403      	bmi.n	8011454 <__lo0bits+0x4e>
 801144c:	085b      	lsrs	r3, r3, #1
 801144e:	f100 0001 	add.w	r0, r0, #1
 8011452:	d003      	beq.n	801145c <__lo0bits+0x56>
 8011454:	6013      	str	r3, [r2, #0]
 8011456:	4770      	bx	lr
 8011458:	2000      	movs	r0, #0
 801145a:	4770      	bx	lr
 801145c:	2020      	movs	r0, #32
 801145e:	4770      	bx	lr

08011460 <__i2b>:
 8011460:	b510      	push	{r4, lr}
 8011462:	460c      	mov	r4, r1
 8011464:	2101      	movs	r1, #1
 8011466:	f7ff ff07 	bl	8011278 <_Balloc>
 801146a:	4602      	mov	r2, r0
 801146c:	b928      	cbnz	r0, 801147a <__i2b+0x1a>
 801146e:	4b05      	ldr	r3, [pc, #20]	@ (8011484 <__i2b+0x24>)
 8011470:	4805      	ldr	r0, [pc, #20]	@ (8011488 <__i2b+0x28>)
 8011472:	f240 1145 	movw	r1, #325	@ 0x145
 8011476:	f000 fb63 	bl	8011b40 <__assert_func>
 801147a:	2301      	movs	r3, #1
 801147c:	6144      	str	r4, [r0, #20]
 801147e:	6103      	str	r3, [r0, #16]
 8011480:	bd10      	pop	{r4, pc}
 8011482:	bf00      	nop
 8011484:	08013490 	.word	0x08013490
 8011488:	080134b2 	.word	0x080134b2

0801148c <__multiply>:
 801148c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011490:	4614      	mov	r4, r2
 8011492:	690a      	ldr	r2, [r1, #16]
 8011494:	6923      	ldr	r3, [r4, #16]
 8011496:	429a      	cmp	r2, r3
 8011498:	bfa8      	it	ge
 801149a:	4623      	movge	r3, r4
 801149c:	460f      	mov	r7, r1
 801149e:	bfa4      	itt	ge
 80114a0:	460c      	movge	r4, r1
 80114a2:	461f      	movge	r7, r3
 80114a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80114a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80114ac:	68a3      	ldr	r3, [r4, #8]
 80114ae:	6861      	ldr	r1, [r4, #4]
 80114b0:	eb0a 0609 	add.w	r6, sl, r9
 80114b4:	42b3      	cmp	r3, r6
 80114b6:	b085      	sub	sp, #20
 80114b8:	bfb8      	it	lt
 80114ba:	3101      	addlt	r1, #1
 80114bc:	f7ff fedc 	bl	8011278 <_Balloc>
 80114c0:	b930      	cbnz	r0, 80114d0 <__multiply+0x44>
 80114c2:	4602      	mov	r2, r0
 80114c4:	4b44      	ldr	r3, [pc, #272]	@ (80115d8 <__multiply+0x14c>)
 80114c6:	4845      	ldr	r0, [pc, #276]	@ (80115dc <__multiply+0x150>)
 80114c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80114cc:	f000 fb38 	bl	8011b40 <__assert_func>
 80114d0:	f100 0514 	add.w	r5, r0, #20
 80114d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80114d8:	462b      	mov	r3, r5
 80114da:	2200      	movs	r2, #0
 80114dc:	4543      	cmp	r3, r8
 80114de:	d321      	bcc.n	8011524 <__multiply+0x98>
 80114e0:	f107 0114 	add.w	r1, r7, #20
 80114e4:	f104 0214 	add.w	r2, r4, #20
 80114e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80114ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80114f0:	9302      	str	r3, [sp, #8]
 80114f2:	1b13      	subs	r3, r2, r4
 80114f4:	3b15      	subs	r3, #21
 80114f6:	f023 0303 	bic.w	r3, r3, #3
 80114fa:	3304      	adds	r3, #4
 80114fc:	f104 0715 	add.w	r7, r4, #21
 8011500:	42ba      	cmp	r2, r7
 8011502:	bf38      	it	cc
 8011504:	2304      	movcc	r3, #4
 8011506:	9301      	str	r3, [sp, #4]
 8011508:	9b02      	ldr	r3, [sp, #8]
 801150a:	9103      	str	r1, [sp, #12]
 801150c:	428b      	cmp	r3, r1
 801150e:	d80c      	bhi.n	801152a <__multiply+0x9e>
 8011510:	2e00      	cmp	r6, #0
 8011512:	dd03      	ble.n	801151c <__multiply+0x90>
 8011514:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011518:	2b00      	cmp	r3, #0
 801151a:	d05b      	beq.n	80115d4 <__multiply+0x148>
 801151c:	6106      	str	r6, [r0, #16]
 801151e:	b005      	add	sp, #20
 8011520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011524:	f843 2b04 	str.w	r2, [r3], #4
 8011528:	e7d8      	b.n	80114dc <__multiply+0x50>
 801152a:	f8b1 a000 	ldrh.w	sl, [r1]
 801152e:	f1ba 0f00 	cmp.w	sl, #0
 8011532:	d024      	beq.n	801157e <__multiply+0xf2>
 8011534:	f104 0e14 	add.w	lr, r4, #20
 8011538:	46a9      	mov	r9, r5
 801153a:	f04f 0c00 	mov.w	ip, #0
 801153e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011542:	f8d9 3000 	ldr.w	r3, [r9]
 8011546:	fa1f fb87 	uxth.w	fp, r7
 801154a:	b29b      	uxth	r3, r3
 801154c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011550:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011554:	f8d9 7000 	ldr.w	r7, [r9]
 8011558:	4463      	add	r3, ip
 801155a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801155e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011562:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011566:	b29b      	uxth	r3, r3
 8011568:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801156c:	4572      	cmp	r2, lr
 801156e:	f849 3b04 	str.w	r3, [r9], #4
 8011572:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011576:	d8e2      	bhi.n	801153e <__multiply+0xb2>
 8011578:	9b01      	ldr	r3, [sp, #4]
 801157a:	f845 c003 	str.w	ip, [r5, r3]
 801157e:	9b03      	ldr	r3, [sp, #12]
 8011580:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011584:	3104      	adds	r1, #4
 8011586:	f1b9 0f00 	cmp.w	r9, #0
 801158a:	d021      	beq.n	80115d0 <__multiply+0x144>
 801158c:	682b      	ldr	r3, [r5, #0]
 801158e:	f104 0c14 	add.w	ip, r4, #20
 8011592:	46ae      	mov	lr, r5
 8011594:	f04f 0a00 	mov.w	sl, #0
 8011598:	f8bc b000 	ldrh.w	fp, [ip]
 801159c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80115a0:	fb09 770b 	mla	r7, r9, fp, r7
 80115a4:	4457      	add	r7, sl
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80115ac:	f84e 3b04 	str.w	r3, [lr], #4
 80115b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80115b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115b8:	f8be 3000 	ldrh.w	r3, [lr]
 80115bc:	fb09 330a 	mla	r3, r9, sl, r3
 80115c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80115c4:	4562      	cmp	r2, ip
 80115c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115ca:	d8e5      	bhi.n	8011598 <__multiply+0x10c>
 80115cc:	9f01      	ldr	r7, [sp, #4]
 80115ce:	51eb      	str	r3, [r5, r7]
 80115d0:	3504      	adds	r5, #4
 80115d2:	e799      	b.n	8011508 <__multiply+0x7c>
 80115d4:	3e01      	subs	r6, #1
 80115d6:	e79b      	b.n	8011510 <__multiply+0x84>
 80115d8:	08013490 	.word	0x08013490
 80115dc:	080134b2 	.word	0x080134b2

080115e0 <__pow5mult>:
 80115e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115e4:	4615      	mov	r5, r2
 80115e6:	f012 0203 	ands.w	r2, r2, #3
 80115ea:	4607      	mov	r7, r0
 80115ec:	460e      	mov	r6, r1
 80115ee:	d007      	beq.n	8011600 <__pow5mult+0x20>
 80115f0:	4c25      	ldr	r4, [pc, #148]	@ (8011688 <__pow5mult+0xa8>)
 80115f2:	3a01      	subs	r2, #1
 80115f4:	2300      	movs	r3, #0
 80115f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115fa:	f7ff fe9f 	bl	801133c <__multadd>
 80115fe:	4606      	mov	r6, r0
 8011600:	10ad      	asrs	r5, r5, #2
 8011602:	d03d      	beq.n	8011680 <__pow5mult+0xa0>
 8011604:	69fc      	ldr	r4, [r7, #28]
 8011606:	b97c      	cbnz	r4, 8011628 <__pow5mult+0x48>
 8011608:	2010      	movs	r0, #16
 801160a:	f7ff fcd3 	bl	8010fb4 <malloc>
 801160e:	4602      	mov	r2, r0
 8011610:	61f8      	str	r0, [r7, #28]
 8011612:	b928      	cbnz	r0, 8011620 <__pow5mult+0x40>
 8011614:	4b1d      	ldr	r3, [pc, #116]	@ (801168c <__pow5mult+0xac>)
 8011616:	481e      	ldr	r0, [pc, #120]	@ (8011690 <__pow5mult+0xb0>)
 8011618:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801161c:	f000 fa90 	bl	8011b40 <__assert_func>
 8011620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011624:	6004      	str	r4, [r0, #0]
 8011626:	60c4      	str	r4, [r0, #12]
 8011628:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801162c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011630:	b94c      	cbnz	r4, 8011646 <__pow5mult+0x66>
 8011632:	f240 2171 	movw	r1, #625	@ 0x271
 8011636:	4638      	mov	r0, r7
 8011638:	f7ff ff12 	bl	8011460 <__i2b>
 801163c:	2300      	movs	r3, #0
 801163e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011642:	4604      	mov	r4, r0
 8011644:	6003      	str	r3, [r0, #0]
 8011646:	f04f 0900 	mov.w	r9, #0
 801164a:	07eb      	lsls	r3, r5, #31
 801164c:	d50a      	bpl.n	8011664 <__pow5mult+0x84>
 801164e:	4631      	mov	r1, r6
 8011650:	4622      	mov	r2, r4
 8011652:	4638      	mov	r0, r7
 8011654:	f7ff ff1a 	bl	801148c <__multiply>
 8011658:	4631      	mov	r1, r6
 801165a:	4680      	mov	r8, r0
 801165c:	4638      	mov	r0, r7
 801165e:	f7ff fe4b 	bl	80112f8 <_Bfree>
 8011662:	4646      	mov	r6, r8
 8011664:	106d      	asrs	r5, r5, #1
 8011666:	d00b      	beq.n	8011680 <__pow5mult+0xa0>
 8011668:	6820      	ldr	r0, [r4, #0]
 801166a:	b938      	cbnz	r0, 801167c <__pow5mult+0x9c>
 801166c:	4622      	mov	r2, r4
 801166e:	4621      	mov	r1, r4
 8011670:	4638      	mov	r0, r7
 8011672:	f7ff ff0b 	bl	801148c <__multiply>
 8011676:	6020      	str	r0, [r4, #0]
 8011678:	f8c0 9000 	str.w	r9, [r0]
 801167c:	4604      	mov	r4, r0
 801167e:	e7e4      	b.n	801164a <__pow5mult+0x6a>
 8011680:	4630      	mov	r0, r6
 8011682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011686:	bf00      	nop
 8011688:	0801350c 	.word	0x0801350c
 801168c:	08013421 	.word	0x08013421
 8011690:	080134b2 	.word	0x080134b2

08011694 <__lshift>:
 8011694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011698:	460c      	mov	r4, r1
 801169a:	6849      	ldr	r1, [r1, #4]
 801169c:	6923      	ldr	r3, [r4, #16]
 801169e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116a2:	68a3      	ldr	r3, [r4, #8]
 80116a4:	4607      	mov	r7, r0
 80116a6:	4691      	mov	r9, r2
 80116a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80116ac:	f108 0601 	add.w	r6, r8, #1
 80116b0:	42b3      	cmp	r3, r6
 80116b2:	db0b      	blt.n	80116cc <__lshift+0x38>
 80116b4:	4638      	mov	r0, r7
 80116b6:	f7ff fddf 	bl	8011278 <_Balloc>
 80116ba:	4605      	mov	r5, r0
 80116bc:	b948      	cbnz	r0, 80116d2 <__lshift+0x3e>
 80116be:	4602      	mov	r2, r0
 80116c0:	4b28      	ldr	r3, [pc, #160]	@ (8011764 <__lshift+0xd0>)
 80116c2:	4829      	ldr	r0, [pc, #164]	@ (8011768 <__lshift+0xd4>)
 80116c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80116c8:	f000 fa3a 	bl	8011b40 <__assert_func>
 80116cc:	3101      	adds	r1, #1
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	e7ee      	b.n	80116b0 <__lshift+0x1c>
 80116d2:	2300      	movs	r3, #0
 80116d4:	f100 0114 	add.w	r1, r0, #20
 80116d8:	f100 0210 	add.w	r2, r0, #16
 80116dc:	4618      	mov	r0, r3
 80116de:	4553      	cmp	r3, sl
 80116e0:	db33      	blt.n	801174a <__lshift+0xb6>
 80116e2:	6920      	ldr	r0, [r4, #16]
 80116e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80116e8:	f104 0314 	add.w	r3, r4, #20
 80116ec:	f019 091f 	ands.w	r9, r9, #31
 80116f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80116f8:	d02b      	beq.n	8011752 <__lshift+0xbe>
 80116fa:	f1c9 0e20 	rsb	lr, r9, #32
 80116fe:	468a      	mov	sl, r1
 8011700:	2200      	movs	r2, #0
 8011702:	6818      	ldr	r0, [r3, #0]
 8011704:	fa00 f009 	lsl.w	r0, r0, r9
 8011708:	4310      	orrs	r0, r2
 801170a:	f84a 0b04 	str.w	r0, [sl], #4
 801170e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011712:	459c      	cmp	ip, r3
 8011714:	fa22 f20e 	lsr.w	r2, r2, lr
 8011718:	d8f3      	bhi.n	8011702 <__lshift+0x6e>
 801171a:	ebac 0304 	sub.w	r3, ip, r4
 801171e:	3b15      	subs	r3, #21
 8011720:	f023 0303 	bic.w	r3, r3, #3
 8011724:	3304      	adds	r3, #4
 8011726:	f104 0015 	add.w	r0, r4, #21
 801172a:	4584      	cmp	ip, r0
 801172c:	bf38      	it	cc
 801172e:	2304      	movcc	r3, #4
 8011730:	50ca      	str	r2, [r1, r3]
 8011732:	b10a      	cbz	r2, 8011738 <__lshift+0xa4>
 8011734:	f108 0602 	add.w	r6, r8, #2
 8011738:	3e01      	subs	r6, #1
 801173a:	4638      	mov	r0, r7
 801173c:	612e      	str	r6, [r5, #16]
 801173e:	4621      	mov	r1, r4
 8011740:	f7ff fdda 	bl	80112f8 <_Bfree>
 8011744:	4628      	mov	r0, r5
 8011746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801174a:	f842 0f04 	str.w	r0, [r2, #4]!
 801174e:	3301      	adds	r3, #1
 8011750:	e7c5      	b.n	80116de <__lshift+0x4a>
 8011752:	3904      	subs	r1, #4
 8011754:	f853 2b04 	ldr.w	r2, [r3], #4
 8011758:	f841 2f04 	str.w	r2, [r1, #4]!
 801175c:	459c      	cmp	ip, r3
 801175e:	d8f9      	bhi.n	8011754 <__lshift+0xc0>
 8011760:	e7ea      	b.n	8011738 <__lshift+0xa4>
 8011762:	bf00      	nop
 8011764:	08013490 	.word	0x08013490
 8011768:	080134b2 	.word	0x080134b2

0801176c <__mcmp>:
 801176c:	690a      	ldr	r2, [r1, #16]
 801176e:	4603      	mov	r3, r0
 8011770:	6900      	ldr	r0, [r0, #16]
 8011772:	1a80      	subs	r0, r0, r2
 8011774:	b530      	push	{r4, r5, lr}
 8011776:	d10e      	bne.n	8011796 <__mcmp+0x2a>
 8011778:	3314      	adds	r3, #20
 801177a:	3114      	adds	r1, #20
 801177c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011780:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801178c:	4295      	cmp	r5, r2
 801178e:	d003      	beq.n	8011798 <__mcmp+0x2c>
 8011790:	d205      	bcs.n	801179e <__mcmp+0x32>
 8011792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011796:	bd30      	pop	{r4, r5, pc}
 8011798:	42a3      	cmp	r3, r4
 801179a:	d3f3      	bcc.n	8011784 <__mcmp+0x18>
 801179c:	e7fb      	b.n	8011796 <__mcmp+0x2a>
 801179e:	2001      	movs	r0, #1
 80117a0:	e7f9      	b.n	8011796 <__mcmp+0x2a>
	...

080117a4 <__mdiff>:
 80117a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a8:	4689      	mov	r9, r1
 80117aa:	4606      	mov	r6, r0
 80117ac:	4611      	mov	r1, r2
 80117ae:	4648      	mov	r0, r9
 80117b0:	4614      	mov	r4, r2
 80117b2:	f7ff ffdb 	bl	801176c <__mcmp>
 80117b6:	1e05      	subs	r5, r0, #0
 80117b8:	d112      	bne.n	80117e0 <__mdiff+0x3c>
 80117ba:	4629      	mov	r1, r5
 80117bc:	4630      	mov	r0, r6
 80117be:	f7ff fd5b 	bl	8011278 <_Balloc>
 80117c2:	4602      	mov	r2, r0
 80117c4:	b928      	cbnz	r0, 80117d2 <__mdiff+0x2e>
 80117c6:	4b3f      	ldr	r3, [pc, #252]	@ (80118c4 <__mdiff+0x120>)
 80117c8:	f240 2137 	movw	r1, #567	@ 0x237
 80117cc:	483e      	ldr	r0, [pc, #248]	@ (80118c8 <__mdiff+0x124>)
 80117ce:	f000 f9b7 	bl	8011b40 <__assert_func>
 80117d2:	2301      	movs	r3, #1
 80117d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80117d8:	4610      	mov	r0, r2
 80117da:	b003      	add	sp, #12
 80117dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e0:	bfbc      	itt	lt
 80117e2:	464b      	movlt	r3, r9
 80117e4:	46a1      	movlt	r9, r4
 80117e6:	4630      	mov	r0, r6
 80117e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80117ec:	bfba      	itte	lt
 80117ee:	461c      	movlt	r4, r3
 80117f0:	2501      	movlt	r5, #1
 80117f2:	2500      	movge	r5, #0
 80117f4:	f7ff fd40 	bl	8011278 <_Balloc>
 80117f8:	4602      	mov	r2, r0
 80117fa:	b918      	cbnz	r0, 8011804 <__mdiff+0x60>
 80117fc:	4b31      	ldr	r3, [pc, #196]	@ (80118c4 <__mdiff+0x120>)
 80117fe:	f240 2145 	movw	r1, #581	@ 0x245
 8011802:	e7e3      	b.n	80117cc <__mdiff+0x28>
 8011804:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011808:	6926      	ldr	r6, [r4, #16]
 801180a:	60c5      	str	r5, [r0, #12]
 801180c:	f109 0310 	add.w	r3, r9, #16
 8011810:	f109 0514 	add.w	r5, r9, #20
 8011814:	f104 0e14 	add.w	lr, r4, #20
 8011818:	f100 0b14 	add.w	fp, r0, #20
 801181c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011820:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011824:	9301      	str	r3, [sp, #4]
 8011826:	46d9      	mov	r9, fp
 8011828:	f04f 0c00 	mov.w	ip, #0
 801182c:	9b01      	ldr	r3, [sp, #4]
 801182e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011832:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011836:	9301      	str	r3, [sp, #4]
 8011838:	fa1f f38a 	uxth.w	r3, sl
 801183c:	4619      	mov	r1, r3
 801183e:	b283      	uxth	r3, r0
 8011840:	1acb      	subs	r3, r1, r3
 8011842:	0c00      	lsrs	r0, r0, #16
 8011844:	4463      	add	r3, ip
 8011846:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801184a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801184e:	b29b      	uxth	r3, r3
 8011850:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011854:	4576      	cmp	r6, lr
 8011856:	f849 3b04 	str.w	r3, [r9], #4
 801185a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801185e:	d8e5      	bhi.n	801182c <__mdiff+0x88>
 8011860:	1b33      	subs	r3, r6, r4
 8011862:	3b15      	subs	r3, #21
 8011864:	f023 0303 	bic.w	r3, r3, #3
 8011868:	3415      	adds	r4, #21
 801186a:	3304      	adds	r3, #4
 801186c:	42a6      	cmp	r6, r4
 801186e:	bf38      	it	cc
 8011870:	2304      	movcc	r3, #4
 8011872:	441d      	add	r5, r3
 8011874:	445b      	add	r3, fp
 8011876:	461e      	mov	r6, r3
 8011878:	462c      	mov	r4, r5
 801187a:	4544      	cmp	r4, r8
 801187c:	d30e      	bcc.n	801189c <__mdiff+0xf8>
 801187e:	f108 0103 	add.w	r1, r8, #3
 8011882:	1b49      	subs	r1, r1, r5
 8011884:	f021 0103 	bic.w	r1, r1, #3
 8011888:	3d03      	subs	r5, #3
 801188a:	45a8      	cmp	r8, r5
 801188c:	bf38      	it	cc
 801188e:	2100      	movcc	r1, #0
 8011890:	440b      	add	r3, r1
 8011892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011896:	b191      	cbz	r1, 80118be <__mdiff+0x11a>
 8011898:	6117      	str	r7, [r2, #16]
 801189a:	e79d      	b.n	80117d8 <__mdiff+0x34>
 801189c:	f854 1b04 	ldr.w	r1, [r4], #4
 80118a0:	46e6      	mov	lr, ip
 80118a2:	0c08      	lsrs	r0, r1, #16
 80118a4:	fa1c fc81 	uxtah	ip, ip, r1
 80118a8:	4471      	add	r1, lr
 80118aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80118ae:	b289      	uxth	r1, r1
 80118b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80118b4:	f846 1b04 	str.w	r1, [r6], #4
 80118b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80118bc:	e7dd      	b.n	801187a <__mdiff+0xd6>
 80118be:	3f01      	subs	r7, #1
 80118c0:	e7e7      	b.n	8011892 <__mdiff+0xee>
 80118c2:	bf00      	nop
 80118c4:	08013490 	.word	0x08013490
 80118c8:	080134b2 	.word	0x080134b2

080118cc <__d2b>:
 80118cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118d0:	460f      	mov	r7, r1
 80118d2:	2101      	movs	r1, #1
 80118d4:	ec59 8b10 	vmov	r8, r9, d0
 80118d8:	4616      	mov	r6, r2
 80118da:	f7ff fccd 	bl	8011278 <_Balloc>
 80118de:	4604      	mov	r4, r0
 80118e0:	b930      	cbnz	r0, 80118f0 <__d2b+0x24>
 80118e2:	4602      	mov	r2, r0
 80118e4:	4b23      	ldr	r3, [pc, #140]	@ (8011974 <__d2b+0xa8>)
 80118e6:	4824      	ldr	r0, [pc, #144]	@ (8011978 <__d2b+0xac>)
 80118e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80118ec:	f000 f928 	bl	8011b40 <__assert_func>
 80118f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80118f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118f8:	b10d      	cbz	r5, 80118fe <__d2b+0x32>
 80118fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118fe:	9301      	str	r3, [sp, #4]
 8011900:	f1b8 0300 	subs.w	r3, r8, #0
 8011904:	d023      	beq.n	801194e <__d2b+0x82>
 8011906:	4668      	mov	r0, sp
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	f7ff fd7c 	bl	8011406 <__lo0bits>
 801190e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011912:	b1d0      	cbz	r0, 801194a <__d2b+0x7e>
 8011914:	f1c0 0320 	rsb	r3, r0, #32
 8011918:	fa02 f303 	lsl.w	r3, r2, r3
 801191c:	430b      	orrs	r3, r1
 801191e:	40c2      	lsrs	r2, r0
 8011920:	6163      	str	r3, [r4, #20]
 8011922:	9201      	str	r2, [sp, #4]
 8011924:	9b01      	ldr	r3, [sp, #4]
 8011926:	61a3      	str	r3, [r4, #24]
 8011928:	2b00      	cmp	r3, #0
 801192a:	bf0c      	ite	eq
 801192c:	2201      	moveq	r2, #1
 801192e:	2202      	movne	r2, #2
 8011930:	6122      	str	r2, [r4, #16]
 8011932:	b1a5      	cbz	r5, 801195e <__d2b+0x92>
 8011934:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011938:	4405      	add	r5, r0
 801193a:	603d      	str	r5, [r7, #0]
 801193c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011940:	6030      	str	r0, [r6, #0]
 8011942:	4620      	mov	r0, r4
 8011944:	b003      	add	sp, #12
 8011946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801194a:	6161      	str	r1, [r4, #20]
 801194c:	e7ea      	b.n	8011924 <__d2b+0x58>
 801194e:	a801      	add	r0, sp, #4
 8011950:	f7ff fd59 	bl	8011406 <__lo0bits>
 8011954:	9b01      	ldr	r3, [sp, #4]
 8011956:	6163      	str	r3, [r4, #20]
 8011958:	3020      	adds	r0, #32
 801195a:	2201      	movs	r2, #1
 801195c:	e7e8      	b.n	8011930 <__d2b+0x64>
 801195e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011962:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011966:	6038      	str	r0, [r7, #0]
 8011968:	6918      	ldr	r0, [r3, #16]
 801196a:	f7ff fd2d 	bl	80113c8 <__hi0bits>
 801196e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011972:	e7e5      	b.n	8011940 <__d2b+0x74>
 8011974:	08013490 	.word	0x08013490
 8011978:	080134b2 	.word	0x080134b2

0801197c <__sread>:
 801197c:	b510      	push	{r4, lr}
 801197e:	460c      	mov	r4, r1
 8011980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011984:	f000 f8a8 	bl	8011ad8 <_read_r>
 8011988:	2800      	cmp	r0, #0
 801198a:	bfab      	itete	ge
 801198c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801198e:	89a3      	ldrhlt	r3, [r4, #12]
 8011990:	181b      	addge	r3, r3, r0
 8011992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011996:	bfac      	ite	ge
 8011998:	6563      	strge	r3, [r4, #84]	@ 0x54
 801199a:	81a3      	strhlt	r3, [r4, #12]
 801199c:	bd10      	pop	{r4, pc}

0801199e <__swrite>:
 801199e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a2:	461f      	mov	r7, r3
 80119a4:	898b      	ldrh	r3, [r1, #12]
 80119a6:	05db      	lsls	r3, r3, #23
 80119a8:	4605      	mov	r5, r0
 80119aa:	460c      	mov	r4, r1
 80119ac:	4616      	mov	r6, r2
 80119ae:	d505      	bpl.n	80119bc <__swrite+0x1e>
 80119b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119b4:	2302      	movs	r3, #2
 80119b6:	2200      	movs	r2, #0
 80119b8:	f000 f87c 	bl	8011ab4 <_lseek_r>
 80119bc:	89a3      	ldrh	r3, [r4, #12]
 80119be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80119c6:	81a3      	strh	r3, [r4, #12]
 80119c8:	4632      	mov	r2, r6
 80119ca:	463b      	mov	r3, r7
 80119cc:	4628      	mov	r0, r5
 80119ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119d2:	f000 b8a3 	b.w	8011b1c <_write_r>

080119d6 <__sseek>:
 80119d6:	b510      	push	{r4, lr}
 80119d8:	460c      	mov	r4, r1
 80119da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119de:	f000 f869 	bl	8011ab4 <_lseek_r>
 80119e2:	1c43      	adds	r3, r0, #1
 80119e4:	89a3      	ldrh	r3, [r4, #12]
 80119e6:	bf15      	itete	ne
 80119e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80119ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80119ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80119f2:	81a3      	strheq	r3, [r4, #12]
 80119f4:	bf18      	it	ne
 80119f6:	81a3      	strhne	r3, [r4, #12]
 80119f8:	bd10      	pop	{r4, pc}

080119fa <__sclose>:
 80119fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119fe:	f000 b849 	b.w	8011a94 <_close_r>

08011a02 <_realloc_r>:
 8011a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a06:	4680      	mov	r8, r0
 8011a08:	4615      	mov	r5, r2
 8011a0a:	460c      	mov	r4, r1
 8011a0c:	b921      	cbnz	r1, 8011a18 <_realloc_r+0x16>
 8011a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a12:	4611      	mov	r1, r2
 8011a14:	f7ff baf8 	b.w	8011008 <_malloc_r>
 8011a18:	b92a      	cbnz	r2, 8011a26 <_realloc_r+0x24>
 8011a1a:	f7ff f929 	bl	8010c70 <_free_r>
 8011a1e:	2400      	movs	r4, #0
 8011a20:	4620      	mov	r0, r4
 8011a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a26:	f000 f8cf 	bl	8011bc8 <_malloc_usable_size_r>
 8011a2a:	4285      	cmp	r5, r0
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	d802      	bhi.n	8011a36 <_realloc_r+0x34>
 8011a30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011a34:	d8f4      	bhi.n	8011a20 <_realloc_r+0x1e>
 8011a36:	4629      	mov	r1, r5
 8011a38:	4640      	mov	r0, r8
 8011a3a:	f7ff fae5 	bl	8011008 <_malloc_r>
 8011a3e:	4607      	mov	r7, r0
 8011a40:	2800      	cmp	r0, #0
 8011a42:	d0ec      	beq.n	8011a1e <_realloc_r+0x1c>
 8011a44:	42b5      	cmp	r5, r6
 8011a46:	462a      	mov	r2, r5
 8011a48:	4621      	mov	r1, r4
 8011a4a:	bf28      	it	cs
 8011a4c:	4632      	movcs	r2, r6
 8011a4e:	f7fe fab4 	bl	800ffba <memcpy>
 8011a52:	4621      	mov	r1, r4
 8011a54:	4640      	mov	r0, r8
 8011a56:	f7ff f90b 	bl	8010c70 <_free_r>
 8011a5a:	463c      	mov	r4, r7
 8011a5c:	e7e0      	b.n	8011a20 <_realloc_r+0x1e>

08011a5e <memmove>:
 8011a5e:	4288      	cmp	r0, r1
 8011a60:	b510      	push	{r4, lr}
 8011a62:	eb01 0402 	add.w	r4, r1, r2
 8011a66:	d902      	bls.n	8011a6e <memmove+0x10>
 8011a68:	4284      	cmp	r4, r0
 8011a6a:	4623      	mov	r3, r4
 8011a6c:	d807      	bhi.n	8011a7e <memmove+0x20>
 8011a6e:	1e43      	subs	r3, r0, #1
 8011a70:	42a1      	cmp	r1, r4
 8011a72:	d008      	beq.n	8011a86 <memmove+0x28>
 8011a74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a78:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a7c:	e7f8      	b.n	8011a70 <memmove+0x12>
 8011a7e:	4402      	add	r2, r0
 8011a80:	4601      	mov	r1, r0
 8011a82:	428a      	cmp	r2, r1
 8011a84:	d100      	bne.n	8011a88 <memmove+0x2a>
 8011a86:	bd10      	pop	{r4, pc}
 8011a88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a90:	e7f7      	b.n	8011a82 <memmove+0x24>
	...

08011a94 <_close_r>:
 8011a94:	b538      	push	{r3, r4, r5, lr}
 8011a96:	4d06      	ldr	r5, [pc, #24]	@ (8011ab0 <_close_r+0x1c>)
 8011a98:	2300      	movs	r3, #0
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	4608      	mov	r0, r1
 8011a9e:	602b      	str	r3, [r5, #0]
 8011aa0:	f7f4 fd00 	bl	80064a4 <_close>
 8011aa4:	1c43      	adds	r3, r0, #1
 8011aa6:	d102      	bne.n	8011aae <_close_r+0x1a>
 8011aa8:	682b      	ldr	r3, [r5, #0]
 8011aaa:	b103      	cbz	r3, 8011aae <_close_r+0x1a>
 8011aac:	6023      	str	r3, [r4, #0]
 8011aae:	bd38      	pop	{r3, r4, r5, pc}
 8011ab0:	20005b38 	.word	0x20005b38

08011ab4 <_lseek_r>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	4d07      	ldr	r5, [pc, #28]	@ (8011ad4 <_lseek_r+0x20>)
 8011ab8:	4604      	mov	r4, r0
 8011aba:	4608      	mov	r0, r1
 8011abc:	4611      	mov	r1, r2
 8011abe:	2200      	movs	r2, #0
 8011ac0:	602a      	str	r2, [r5, #0]
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	f7f4 fd15 	bl	80064f2 <_lseek>
 8011ac8:	1c43      	adds	r3, r0, #1
 8011aca:	d102      	bne.n	8011ad2 <_lseek_r+0x1e>
 8011acc:	682b      	ldr	r3, [r5, #0]
 8011ace:	b103      	cbz	r3, 8011ad2 <_lseek_r+0x1e>
 8011ad0:	6023      	str	r3, [r4, #0]
 8011ad2:	bd38      	pop	{r3, r4, r5, pc}
 8011ad4:	20005b38 	.word	0x20005b38

08011ad8 <_read_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	4d07      	ldr	r5, [pc, #28]	@ (8011af8 <_read_r+0x20>)
 8011adc:	4604      	mov	r4, r0
 8011ade:	4608      	mov	r0, r1
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	602a      	str	r2, [r5, #0]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	f7f4 fca3 	bl	8006432 <_read>
 8011aec:	1c43      	adds	r3, r0, #1
 8011aee:	d102      	bne.n	8011af6 <_read_r+0x1e>
 8011af0:	682b      	ldr	r3, [r5, #0]
 8011af2:	b103      	cbz	r3, 8011af6 <_read_r+0x1e>
 8011af4:	6023      	str	r3, [r4, #0]
 8011af6:	bd38      	pop	{r3, r4, r5, pc}
 8011af8:	20005b38 	.word	0x20005b38

08011afc <_sbrk_r>:
 8011afc:	b538      	push	{r3, r4, r5, lr}
 8011afe:	4d06      	ldr	r5, [pc, #24]	@ (8011b18 <_sbrk_r+0x1c>)
 8011b00:	2300      	movs	r3, #0
 8011b02:	4604      	mov	r4, r0
 8011b04:	4608      	mov	r0, r1
 8011b06:	602b      	str	r3, [r5, #0]
 8011b08:	f7f4 fd00 	bl	800650c <_sbrk>
 8011b0c:	1c43      	adds	r3, r0, #1
 8011b0e:	d102      	bne.n	8011b16 <_sbrk_r+0x1a>
 8011b10:	682b      	ldr	r3, [r5, #0]
 8011b12:	b103      	cbz	r3, 8011b16 <_sbrk_r+0x1a>
 8011b14:	6023      	str	r3, [r4, #0]
 8011b16:	bd38      	pop	{r3, r4, r5, pc}
 8011b18:	20005b38 	.word	0x20005b38

08011b1c <_write_r>:
 8011b1c:	b538      	push	{r3, r4, r5, lr}
 8011b1e:	4d07      	ldr	r5, [pc, #28]	@ (8011b3c <_write_r+0x20>)
 8011b20:	4604      	mov	r4, r0
 8011b22:	4608      	mov	r0, r1
 8011b24:	4611      	mov	r1, r2
 8011b26:	2200      	movs	r2, #0
 8011b28:	602a      	str	r2, [r5, #0]
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	f7f4 fc9e 	bl	800646c <_write>
 8011b30:	1c43      	adds	r3, r0, #1
 8011b32:	d102      	bne.n	8011b3a <_write_r+0x1e>
 8011b34:	682b      	ldr	r3, [r5, #0]
 8011b36:	b103      	cbz	r3, 8011b3a <_write_r+0x1e>
 8011b38:	6023      	str	r3, [r4, #0]
 8011b3a:	bd38      	pop	{r3, r4, r5, pc}
 8011b3c:	20005b38 	.word	0x20005b38

08011b40 <__assert_func>:
 8011b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b42:	4614      	mov	r4, r2
 8011b44:	461a      	mov	r2, r3
 8011b46:	4b09      	ldr	r3, [pc, #36]	@ (8011b6c <__assert_func+0x2c>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	68d8      	ldr	r0, [r3, #12]
 8011b4e:	b954      	cbnz	r4, 8011b66 <__assert_func+0x26>
 8011b50:	4b07      	ldr	r3, [pc, #28]	@ (8011b70 <__assert_func+0x30>)
 8011b52:	461c      	mov	r4, r3
 8011b54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b58:	9100      	str	r1, [sp, #0]
 8011b5a:	462b      	mov	r3, r5
 8011b5c:	4905      	ldr	r1, [pc, #20]	@ (8011b74 <__assert_func+0x34>)
 8011b5e:	f000 f83b 	bl	8011bd8 <fiprintf>
 8011b62:	f000 f858 	bl	8011c16 <abort>
 8011b66:	4b04      	ldr	r3, [pc, #16]	@ (8011b78 <__assert_func+0x38>)
 8011b68:	e7f4      	b.n	8011b54 <__assert_func+0x14>
 8011b6a:	bf00      	nop
 8011b6c:	2000007c 	.word	0x2000007c
 8011b70:	0801374e 	.word	0x0801374e
 8011b74:	08013720 	.word	0x08013720
 8011b78:	08013713 	.word	0x08013713

08011b7c <_calloc_r>:
 8011b7c:	b570      	push	{r4, r5, r6, lr}
 8011b7e:	fba1 5402 	umull	r5, r4, r1, r2
 8011b82:	b93c      	cbnz	r4, 8011b94 <_calloc_r+0x18>
 8011b84:	4629      	mov	r1, r5
 8011b86:	f7ff fa3f 	bl	8011008 <_malloc_r>
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	b928      	cbnz	r0, 8011b9a <_calloc_r+0x1e>
 8011b8e:	2600      	movs	r6, #0
 8011b90:	4630      	mov	r0, r6
 8011b92:	bd70      	pop	{r4, r5, r6, pc}
 8011b94:	220c      	movs	r2, #12
 8011b96:	6002      	str	r2, [r0, #0]
 8011b98:	e7f9      	b.n	8011b8e <_calloc_r+0x12>
 8011b9a:	462a      	mov	r2, r5
 8011b9c:	4621      	mov	r1, r4
 8011b9e:	f7fe f97d 	bl	800fe9c <memset>
 8011ba2:	e7f5      	b.n	8011b90 <_calloc_r+0x14>

08011ba4 <__ascii_mbtowc>:
 8011ba4:	b082      	sub	sp, #8
 8011ba6:	b901      	cbnz	r1, 8011baa <__ascii_mbtowc+0x6>
 8011ba8:	a901      	add	r1, sp, #4
 8011baa:	b142      	cbz	r2, 8011bbe <__ascii_mbtowc+0x1a>
 8011bac:	b14b      	cbz	r3, 8011bc2 <__ascii_mbtowc+0x1e>
 8011bae:	7813      	ldrb	r3, [r2, #0]
 8011bb0:	600b      	str	r3, [r1, #0]
 8011bb2:	7812      	ldrb	r2, [r2, #0]
 8011bb4:	1e10      	subs	r0, r2, #0
 8011bb6:	bf18      	it	ne
 8011bb8:	2001      	movne	r0, #1
 8011bba:	b002      	add	sp, #8
 8011bbc:	4770      	bx	lr
 8011bbe:	4610      	mov	r0, r2
 8011bc0:	e7fb      	b.n	8011bba <__ascii_mbtowc+0x16>
 8011bc2:	f06f 0001 	mvn.w	r0, #1
 8011bc6:	e7f8      	b.n	8011bba <__ascii_mbtowc+0x16>

08011bc8 <_malloc_usable_size_r>:
 8011bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bcc:	1f18      	subs	r0, r3, #4
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	bfbc      	itt	lt
 8011bd2:	580b      	ldrlt	r3, [r1, r0]
 8011bd4:	18c0      	addlt	r0, r0, r3
 8011bd6:	4770      	bx	lr

08011bd8 <fiprintf>:
 8011bd8:	b40e      	push	{r1, r2, r3}
 8011bda:	b503      	push	{r0, r1, lr}
 8011bdc:	4601      	mov	r1, r0
 8011bde:	ab03      	add	r3, sp, #12
 8011be0:	4805      	ldr	r0, [pc, #20]	@ (8011bf8 <fiprintf+0x20>)
 8011be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011be6:	6800      	ldr	r0, [r0, #0]
 8011be8:	9301      	str	r3, [sp, #4]
 8011bea:	f000 f845 	bl	8011c78 <_vfiprintf_r>
 8011bee:	b002      	add	sp, #8
 8011bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bf4:	b003      	add	sp, #12
 8011bf6:	4770      	bx	lr
 8011bf8:	2000007c 	.word	0x2000007c

08011bfc <__ascii_wctomb>:
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	4608      	mov	r0, r1
 8011c00:	b141      	cbz	r1, 8011c14 <__ascii_wctomb+0x18>
 8011c02:	2aff      	cmp	r2, #255	@ 0xff
 8011c04:	d904      	bls.n	8011c10 <__ascii_wctomb+0x14>
 8011c06:	228a      	movs	r2, #138	@ 0x8a
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c0e:	4770      	bx	lr
 8011c10:	700a      	strb	r2, [r1, #0]
 8011c12:	2001      	movs	r0, #1
 8011c14:	4770      	bx	lr

08011c16 <abort>:
 8011c16:	b508      	push	{r3, lr}
 8011c18:	2006      	movs	r0, #6
 8011c1a:	f000 fa85 	bl	8012128 <raise>
 8011c1e:	2001      	movs	r0, #1
 8011c20:	f7f4 fbfc 	bl	800641c <_exit>

08011c24 <__sfputc_r>:
 8011c24:	6893      	ldr	r3, [r2, #8]
 8011c26:	3b01      	subs	r3, #1
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	b410      	push	{r4}
 8011c2c:	6093      	str	r3, [r2, #8]
 8011c2e:	da08      	bge.n	8011c42 <__sfputc_r+0x1e>
 8011c30:	6994      	ldr	r4, [r2, #24]
 8011c32:	42a3      	cmp	r3, r4
 8011c34:	db01      	blt.n	8011c3a <__sfputc_r+0x16>
 8011c36:	290a      	cmp	r1, #10
 8011c38:	d103      	bne.n	8011c42 <__sfputc_r+0x1e>
 8011c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c3e:	f000 b933 	b.w	8011ea8 <__swbuf_r>
 8011c42:	6813      	ldr	r3, [r2, #0]
 8011c44:	1c58      	adds	r0, r3, #1
 8011c46:	6010      	str	r0, [r2, #0]
 8011c48:	7019      	strb	r1, [r3, #0]
 8011c4a:	4608      	mov	r0, r1
 8011c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c50:	4770      	bx	lr

08011c52 <__sfputs_r>:
 8011c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c54:	4606      	mov	r6, r0
 8011c56:	460f      	mov	r7, r1
 8011c58:	4614      	mov	r4, r2
 8011c5a:	18d5      	adds	r5, r2, r3
 8011c5c:	42ac      	cmp	r4, r5
 8011c5e:	d101      	bne.n	8011c64 <__sfputs_r+0x12>
 8011c60:	2000      	movs	r0, #0
 8011c62:	e007      	b.n	8011c74 <__sfputs_r+0x22>
 8011c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c68:	463a      	mov	r2, r7
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f7ff ffda 	bl	8011c24 <__sfputc_r>
 8011c70:	1c43      	adds	r3, r0, #1
 8011c72:	d1f3      	bne.n	8011c5c <__sfputs_r+0xa>
 8011c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c78 <_vfiprintf_r>:
 8011c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c7c:	460d      	mov	r5, r1
 8011c7e:	b09d      	sub	sp, #116	@ 0x74
 8011c80:	4614      	mov	r4, r2
 8011c82:	4698      	mov	r8, r3
 8011c84:	4606      	mov	r6, r0
 8011c86:	b118      	cbz	r0, 8011c90 <_vfiprintf_r+0x18>
 8011c88:	6a03      	ldr	r3, [r0, #32]
 8011c8a:	b90b      	cbnz	r3, 8011c90 <_vfiprintf_r+0x18>
 8011c8c:	f7fe f8b0 	bl	800fdf0 <__sinit>
 8011c90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c92:	07d9      	lsls	r1, r3, #31
 8011c94:	d405      	bmi.n	8011ca2 <_vfiprintf_r+0x2a>
 8011c96:	89ab      	ldrh	r3, [r5, #12]
 8011c98:	059a      	lsls	r2, r3, #22
 8011c9a:	d402      	bmi.n	8011ca2 <_vfiprintf_r+0x2a>
 8011c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c9e:	f7fe f98a 	bl	800ffb6 <__retarget_lock_acquire_recursive>
 8011ca2:	89ab      	ldrh	r3, [r5, #12]
 8011ca4:	071b      	lsls	r3, r3, #28
 8011ca6:	d501      	bpl.n	8011cac <_vfiprintf_r+0x34>
 8011ca8:	692b      	ldr	r3, [r5, #16]
 8011caa:	b99b      	cbnz	r3, 8011cd4 <_vfiprintf_r+0x5c>
 8011cac:	4629      	mov	r1, r5
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f000 f938 	bl	8011f24 <__swsetup_r>
 8011cb4:	b170      	cbz	r0, 8011cd4 <_vfiprintf_r+0x5c>
 8011cb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011cb8:	07dc      	lsls	r4, r3, #31
 8011cba:	d504      	bpl.n	8011cc6 <_vfiprintf_r+0x4e>
 8011cbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011cc0:	b01d      	add	sp, #116	@ 0x74
 8011cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc6:	89ab      	ldrh	r3, [r5, #12]
 8011cc8:	0598      	lsls	r0, r3, #22
 8011cca:	d4f7      	bmi.n	8011cbc <_vfiprintf_r+0x44>
 8011ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cce:	f7fe f973 	bl	800ffb8 <__retarget_lock_release_recursive>
 8011cd2:	e7f3      	b.n	8011cbc <_vfiprintf_r+0x44>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cd8:	2320      	movs	r3, #32
 8011cda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ce2:	2330      	movs	r3, #48	@ 0x30
 8011ce4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011e94 <_vfiprintf_r+0x21c>
 8011ce8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cec:	f04f 0901 	mov.w	r9, #1
 8011cf0:	4623      	mov	r3, r4
 8011cf2:	469a      	mov	sl, r3
 8011cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cf8:	b10a      	cbz	r2, 8011cfe <_vfiprintf_r+0x86>
 8011cfa:	2a25      	cmp	r2, #37	@ 0x25
 8011cfc:	d1f9      	bne.n	8011cf2 <_vfiprintf_r+0x7a>
 8011cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8011d02:	d00b      	beq.n	8011d1c <_vfiprintf_r+0xa4>
 8011d04:	465b      	mov	r3, fp
 8011d06:	4622      	mov	r2, r4
 8011d08:	4629      	mov	r1, r5
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	f7ff ffa1 	bl	8011c52 <__sfputs_r>
 8011d10:	3001      	adds	r0, #1
 8011d12:	f000 80a7 	beq.w	8011e64 <_vfiprintf_r+0x1ec>
 8011d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d18:	445a      	add	r2, fp
 8011d1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f000 809f 	beq.w	8011e64 <_vfiprintf_r+0x1ec>
 8011d26:	2300      	movs	r3, #0
 8011d28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d30:	f10a 0a01 	add.w	sl, sl, #1
 8011d34:	9304      	str	r3, [sp, #16]
 8011d36:	9307      	str	r3, [sp, #28]
 8011d38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d3e:	4654      	mov	r4, sl
 8011d40:	2205      	movs	r2, #5
 8011d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d46:	4853      	ldr	r0, [pc, #332]	@ (8011e94 <_vfiprintf_r+0x21c>)
 8011d48:	f7ee fa42 	bl	80001d0 <memchr>
 8011d4c:	9a04      	ldr	r2, [sp, #16]
 8011d4e:	b9d8      	cbnz	r0, 8011d88 <_vfiprintf_r+0x110>
 8011d50:	06d1      	lsls	r1, r2, #27
 8011d52:	bf44      	itt	mi
 8011d54:	2320      	movmi	r3, #32
 8011d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d5a:	0713      	lsls	r3, r2, #28
 8011d5c:	bf44      	itt	mi
 8011d5e:	232b      	movmi	r3, #43	@ 0x2b
 8011d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d64:	f89a 3000 	ldrb.w	r3, [sl]
 8011d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d6a:	d015      	beq.n	8011d98 <_vfiprintf_r+0x120>
 8011d6c:	9a07      	ldr	r2, [sp, #28]
 8011d6e:	4654      	mov	r4, sl
 8011d70:	2000      	movs	r0, #0
 8011d72:	f04f 0c0a 	mov.w	ip, #10
 8011d76:	4621      	mov	r1, r4
 8011d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d7c:	3b30      	subs	r3, #48	@ 0x30
 8011d7e:	2b09      	cmp	r3, #9
 8011d80:	d94b      	bls.n	8011e1a <_vfiprintf_r+0x1a2>
 8011d82:	b1b0      	cbz	r0, 8011db2 <_vfiprintf_r+0x13a>
 8011d84:	9207      	str	r2, [sp, #28]
 8011d86:	e014      	b.n	8011db2 <_vfiprintf_r+0x13a>
 8011d88:	eba0 0308 	sub.w	r3, r0, r8
 8011d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8011d90:	4313      	orrs	r3, r2
 8011d92:	9304      	str	r3, [sp, #16]
 8011d94:	46a2      	mov	sl, r4
 8011d96:	e7d2      	b.n	8011d3e <_vfiprintf_r+0xc6>
 8011d98:	9b03      	ldr	r3, [sp, #12]
 8011d9a:	1d19      	adds	r1, r3, #4
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	9103      	str	r1, [sp, #12]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	bfbb      	ittet	lt
 8011da4:	425b      	neglt	r3, r3
 8011da6:	f042 0202 	orrlt.w	r2, r2, #2
 8011daa:	9307      	strge	r3, [sp, #28]
 8011dac:	9307      	strlt	r3, [sp, #28]
 8011dae:	bfb8      	it	lt
 8011db0:	9204      	strlt	r2, [sp, #16]
 8011db2:	7823      	ldrb	r3, [r4, #0]
 8011db4:	2b2e      	cmp	r3, #46	@ 0x2e
 8011db6:	d10a      	bne.n	8011dce <_vfiprintf_r+0x156>
 8011db8:	7863      	ldrb	r3, [r4, #1]
 8011dba:	2b2a      	cmp	r3, #42	@ 0x2a
 8011dbc:	d132      	bne.n	8011e24 <_vfiprintf_r+0x1ac>
 8011dbe:	9b03      	ldr	r3, [sp, #12]
 8011dc0:	1d1a      	adds	r2, r3, #4
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	9203      	str	r2, [sp, #12]
 8011dc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011dca:	3402      	adds	r4, #2
 8011dcc:	9305      	str	r3, [sp, #20]
 8011dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011ea4 <_vfiprintf_r+0x22c>
 8011dd2:	7821      	ldrb	r1, [r4, #0]
 8011dd4:	2203      	movs	r2, #3
 8011dd6:	4650      	mov	r0, sl
 8011dd8:	f7ee f9fa 	bl	80001d0 <memchr>
 8011ddc:	b138      	cbz	r0, 8011dee <_vfiprintf_r+0x176>
 8011dde:	9b04      	ldr	r3, [sp, #16]
 8011de0:	eba0 000a 	sub.w	r0, r0, sl
 8011de4:	2240      	movs	r2, #64	@ 0x40
 8011de6:	4082      	lsls	r2, r0
 8011de8:	4313      	orrs	r3, r2
 8011dea:	3401      	adds	r4, #1
 8011dec:	9304      	str	r3, [sp, #16]
 8011dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011df2:	4829      	ldr	r0, [pc, #164]	@ (8011e98 <_vfiprintf_r+0x220>)
 8011df4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011df8:	2206      	movs	r2, #6
 8011dfa:	f7ee f9e9 	bl	80001d0 <memchr>
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	d03f      	beq.n	8011e82 <_vfiprintf_r+0x20a>
 8011e02:	4b26      	ldr	r3, [pc, #152]	@ (8011e9c <_vfiprintf_r+0x224>)
 8011e04:	bb1b      	cbnz	r3, 8011e4e <_vfiprintf_r+0x1d6>
 8011e06:	9b03      	ldr	r3, [sp, #12]
 8011e08:	3307      	adds	r3, #7
 8011e0a:	f023 0307 	bic.w	r3, r3, #7
 8011e0e:	3308      	adds	r3, #8
 8011e10:	9303      	str	r3, [sp, #12]
 8011e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e14:	443b      	add	r3, r7
 8011e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e18:	e76a      	b.n	8011cf0 <_vfiprintf_r+0x78>
 8011e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e1e:	460c      	mov	r4, r1
 8011e20:	2001      	movs	r0, #1
 8011e22:	e7a8      	b.n	8011d76 <_vfiprintf_r+0xfe>
 8011e24:	2300      	movs	r3, #0
 8011e26:	3401      	adds	r4, #1
 8011e28:	9305      	str	r3, [sp, #20]
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	f04f 0c0a 	mov.w	ip, #10
 8011e30:	4620      	mov	r0, r4
 8011e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e36:	3a30      	subs	r2, #48	@ 0x30
 8011e38:	2a09      	cmp	r2, #9
 8011e3a:	d903      	bls.n	8011e44 <_vfiprintf_r+0x1cc>
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d0c6      	beq.n	8011dce <_vfiprintf_r+0x156>
 8011e40:	9105      	str	r1, [sp, #20]
 8011e42:	e7c4      	b.n	8011dce <_vfiprintf_r+0x156>
 8011e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e48:	4604      	mov	r4, r0
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	e7f0      	b.n	8011e30 <_vfiprintf_r+0x1b8>
 8011e4e:	ab03      	add	r3, sp, #12
 8011e50:	9300      	str	r3, [sp, #0]
 8011e52:	462a      	mov	r2, r5
 8011e54:	4b12      	ldr	r3, [pc, #72]	@ (8011ea0 <_vfiprintf_r+0x228>)
 8011e56:	a904      	add	r1, sp, #16
 8011e58:	4630      	mov	r0, r6
 8011e5a:	f7fd fb85 	bl	800f568 <_printf_float>
 8011e5e:	4607      	mov	r7, r0
 8011e60:	1c78      	adds	r0, r7, #1
 8011e62:	d1d6      	bne.n	8011e12 <_vfiprintf_r+0x19a>
 8011e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e66:	07d9      	lsls	r1, r3, #31
 8011e68:	d405      	bmi.n	8011e76 <_vfiprintf_r+0x1fe>
 8011e6a:	89ab      	ldrh	r3, [r5, #12]
 8011e6c:	059a      	lsls	r2, r3, #22
 8011e6e:	d402      	bmi.n	8011e76 <_vfiprintf_r+0x1fe>
 8011e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e72:	f7fe f8a1 	bl	800ffb8 <__retarget_lock_release_recursive>
 8011e76:	89ab      	ldrh	r3, [r5, #12]
 8011e78:	065b      	lsls	r3, r3, #25
 8011e7a:	f53f af1f 	bmi.w	8011cbc <_vfiprintf_r+0x44>
 8011e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e80:	e71e      	b.n	8011cc0 <_vfiprintf_r+0x48>
 8011e82:	ab03      	add	r3, sp, #12
 8011e84:	9300      	str	r3, [sp, #0]
 8011e86:	462a      	mov	r2, r5
 8011e88:	4b05      	ldr	r3, [pc, #20]	@ (8011ea0 <_vfiprintf_r+0x228>)
 8011e8a:	a904      	add	r1, sp, #16
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f7fd fe03 	bl	800fa98 <_printf_i>
 8011e92:	e7e4      	b.n	8011e5e <_vfiprintf_r+0x1e6>
 8011e94:	080134a1 	.word	0x080134a1
 8011e98:	080134ab 	.word	0x080134ab
 8011e9c:	0800f569 	.word	0x0800f569
 8011ea0:	08011c53 	.word	0x08011c53
 8011ea4:	080134a7 	.word	0x080134a7

08011ea8 <__swbuf_r>:
 8011ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eaa:	460e      	mov	r6, r1
 8011eac:	4614      	mov	r4, r2
 8011eae:	4605      	mov	r5, r0
 8011eb0:	b118      	cbz	r0, 8011eba <__swbuf_r+0x12>
 8011eb2:	6a03      	ldr	r3, [r0, #32]
 8011eb4:	b90b      	cbnz	r3, 8011eba <__swbuf_r+0x12>
 8011eb6:	f7fd ff9b 	bl	800fdf0 <__sinit>
 8011eba:	69a3      	ldr	r3, [r4, #24]
 8011ebc:	60a3      	str	r3, [r4, #8]
 8011ebe:	89a3      	ldrh	r3, [r4, #12]
 8011ec0:	071a      	lsls	r2, r3, #28
 8011ec2:	d501      	bpl.n	8011ec8 <__swbuf_r+0x20>
 8011ec4:	6923      	ldr	r3, [r4, #16]
 8011ec6:	b943      	cbnz	r3, 8011eda <__swbuf_r+0x32>
 8011ec8:	4621      	mov	r1, r4
 8011eca:	4628      	mov	r0, r5
 8011ecc:	f000 f82a 	bl	8011f24 <__swsetup_r>
 8011ed0:	b118      	cbz	r0, 8011eda <__swbuf_r+0x32>
 8011ed2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011ed6:	4638      	mov	r0, r7
 8011ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	6922      	ldr	r2, [r4, #16]
 8011ede:	1a98      	subs	r0, r3, r2
 8011ee0:	6963      	ldr	r3, [r4, #20]
 8011ee2:	b2f6      	uxtb	r6, r6
 8011ee4:	4283      	cmp	r3, r0
 8011ee6:	4637      	mov	r7, r6
 8011ee8:	dc05      	bgt.n	8011ef6 <__swbuf_r+0x4e>
 8011eea:	4621      	mov	r1, r4
 8011eec:	4628      	mov	r0, r5
 8011eee:	f7ff f98f 	bl	8011210 <_fflush_r>
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d1ed      	bne.n	8011ed2 <__swbuf_r+0x2a>
 8011ef6:	68a3      	ldr	r3, [r4, #8]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	60a3      	str	r3, [r4, #8]
 8011efc:	6823      	ldr	r3, [r4, #0]
 8011efe:	1c5a      	adds	r2, r3, #1
 8011f00:	6022      	str	r2, [r4, #0]
 8011f02:	701e      	strb	r6, [r3, #0]
 8011f04:	6962      	ldr	r2, [r4, #20]
 8011f06:	1c43      	adds	r3, r0, #1
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d004      	beq.n	8011f16 <__swbuf_r+0x6e>
 8011f0c:	89a3      	ldrh	r3, [r4, #12]
 8011f0e:	07db      	lsls	r3, r3, #31
 8011f10:	d5e1      	bpl.n	8011ed6 <__swbuf_r+0x2e>
 8011f12:	2e0a      	cmp	r6, #10
 8011f14:	d1df      	bne.n	8011ed6 <__swbuf_r+0x2e>
 8011f16:	4621      	mov	r1, r4
 8011f18:	4628      	mov	r0, r5
 8011f1a:	f7ff f979 	bl	8011210 <_fflush_r>
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d0d9      	beq.n	8011ed6 <__swbuf_r+0x2e>
 8011f22:	e7d6      	b.n	8011ed2 <__swbuf_r+0x2a>

08011f24 <__swsetup_r>:
 8011f24:	b538      	push	{r3, r4, r5, lr}
 8011f26:	4b29      	ldr	r3, [pc, #164]	@ (8011fcc <__swsetup_r+0xa8>)
 8011f28:	4605      	mov	r5, r0
 8011f2a:	6818      	ldr	r0, [r3, #0]
 8011f2c:	460c      	mov	r4, r1
 8011f2e:	b118      	cbz	r0, 8011f38 <__swsetup_r+0x14>
 8011f30:	6a03      	ldr	r3, [r0, #32]
 8011f32:	b90b      	cbnz	r3, 8011f38 <__swsetup_r+0x14>
 8011f34:	f7fd ff5c 	bl	800fdf0 <__sinit>
 8011f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f3c:	0719      	lsls	r1, r3, #28
 8011f3e:	d422      	bmi.n	8011f86 <__swsetup_r+0x62>
 8011f40:	06da      	lsls	r2, r3, #27
 8011f42:	d407      	bmi.n	8011f54 <__swsetup_r+0x30>
 8011f44:	2209      	movs	r2, #9
 8011f46:	602a      	str	r2, [r5, #0]
 8011f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f4c:	81a3      	strh	r3, [r4, #12]
 8011f4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f52:	e033      	b.n	8011fbc <__swsetup_r+0x98>
 8011f54:	0758      	lsls	r0, r3, #29
 8011f56:	d512      	bpl.n	8011f7e <__swsetup_r+0x5a>
 8011f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f5a:	b141      	cbz	r1, 8011f6e <__swsetup_r+0x4a>
 8011f5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f60:	4299      	cmp	r1, r3
 8011f62:	d002      	beq.n	8011f6a <__swsetup_r+0x46>
 8011f64:	4628      	mov	r0, r5
 8011f66:	f7fe fe83 	bl	8010c70 <_free_r>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f6e:	89a3      	ldrh	r3, [r4, #12]
 8011f70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f74:	81a3      	strh	r3, [r4, #12]
 8011f76:	2300      	movs	r3, #0
 8011f78:	6063      	str	r3, [r4, #4]
 8011f7a:	6923      	ldr	r3, [r4, #16]
 8011f7c:	6023      	str	r3, [r4, #0]
 8011f7e:	89a3      	ldrh	r3, [r4, #12]
 8011f80:	f043 0308 	orr.w	r3, r3, #8
 8011f84:	81a3      	strh	r3, [r4, #12]
 8011f86:	6923      	ldr	r3, [r4, #16]
 8011f88:	b94b      	cbnz	r3, 8011f9e <__swsetup_r+0x7a>
 8011f8a:	89a3      	ldrh	r3, [r4, #12]
 8011f8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f94:	d003      	beq.n	8011f9e <__swsetup_r+0x7a>
 8011f96:	4621      	mov	r1, r4
 8011f98:	4628      	mov	r0, r5
 8011f9a:	f000 f83f 	bl	801201c <__smakebuf_r>
 8011f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fa2:	f013 0201 	ands.w	r2, r3, #1
 8011fa6:	d00a      	beq.n	8011fbe <__swsetup_r+0x9a>
 8011fa8:	2200      	movs	r2, #0
 8011faa:	60a2      	str	r2, [r4, #8]
 8011fac:	6962      	ldr	r2, [r4, #20]
 8011fae:	4252      	negs	r2, r2
 8011fb0:	61a2      	str	r2, [r4, #24]
 8011fb2:	6922      	ldr	r2, [r4, #16]
 8011fb4:	b942      	cbnz	r2, 8011fc8 <__swsetup_r+0xa4>
 8011fb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011fba:	d1c5      	bne.n	8011f48 <__swsetup_r+0x24>
 8011fbc:	bd38      	pop	{r3, r4, r5, pc}
 8011fbe:	0799      	lsls	r1, r3, #30
 8011fc0:	bf58      	it	pl
 8011fc2:	6962      	ldrpl	r2, [r4, #20]
 8011fc4:	60a2      	str	r2, [r4, #8]
 8011fc6:	e7f4      	b.n	8011fb2 <__swsetup_r+0x8e>
 8011fc8:	2000      	movs	r0, #0
 8011fca:	e7f7      	b.n	8011fbc <__swsetup_r+0x98>
 8011fcc:	2000007c 	.word	0x2000007c

08011fd0 <__swhatbuf_r>:
 8011fd0:	b570      	push	{r4, r5, r6, lr}
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fd8:	2900      	cmp	r1, #0
 8011fda:	b096      	sub	sp, #88	@ 0x58
 8011fdc:	4615      	mov	r5, r2
 8011fde:	461e      	mov	r6, r3
 8011fe0:	da0d      	bge.n	8011ffe <__swhatbuf_r+0x2e>
 8011fe2:	89a3      	ldrh	r3, [r4, #12]
 8011fe4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011fe8:	f04f 0100 	mov.w	r1, #0
 8011fec:	bf14      	ite	ne
 8011fee:	2340      	movne	r3, #64	@ 0x40
 8011ff0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	6031      	str	r1, [r6, #0]
 8011ff8:	602b      	str	r3, [r5, #0]
 8011ffa:	b016      	add	sp, #88	@ 0x58
 8011ffc:	bd70      	pop	{r4, r5, r6, pc}
 8011ffe:	466a      	mov	r2, sp
 8012000:	f000 f848 	bl	8012094 <_fstat_r>
 8012004:	2800      	cmp	r0, #0
 8012006:	dbec      	blt.n	8011fe2 <__swhatbuf_r+0x12>
 8012008:	9901      	ldr	r1, [sp, #4]
 801200a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801200e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012012:	4259      	negs	r1, r3
 8012014:	4159      	adcs	r1, r3
 8012016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801201a:	e7eb      	b.n	8011ff4 <__swhatbuf_r+0x24>

0801201c <__smakebuf_r>:
 801201c:	898b      	ldrh	r3, [r1, #12]
 801201e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012020:	079d      	lsls	r5, r3, #30
 8012022:	4606      	mov	r6, r0
 8012024:	460c      	mov	r4, r1
 8012026:	d507      	bpl.n	8012038 <__smakebuf_r+0x1c>
 8012028:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801202c:	6023      	str	r3, [r4, #0]
 801202e:	6123      	str	r3, [r4, #16]
 8012030:	2301      	movs	r3, #1
 8012032:	6163      	str	r3, [r4, #20]
 8012034:	b003      	add	sp, #12
 8012036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012038:	ab01      	add	r3, sp, #4
 801203a:	466a      	mov	r2, sp
 801203c:	f7ff ffc8 	bl	8011fd0 <__swhatbuf_r>
 8012040:	9f00      	ldr	r7, [sp, #0]
 8012042:	4605      	mov	r5, r0
 8012044:	4639      	mov	r1, r7
 8012046:	4630      	mov	r0, r6
 8012048:	f7fe ffde 	bl	8011008 <_malloc_r>
 801204c:	b948      	cbnz	r0, 8012062 <__smakebuf_r+0x46>
 801204e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012052:	059a      	lsls	r2, r3, #22
 8012054:	d4ee      	bmi.n	8012034 <__smakebuf_r+0x18>
 8012056:	f023 0303 	bic.w	r3, r3, #3
 801205a:	f043 0302 	orr.w	r3, r3, #2
 801205e:	81a3      	strh	r3, [r4, #12]
 8012060:	e7e2      	b.n	8012028 <__smakebuf_r+0xc>
 8012062:	89a3      	ldrh	r3, [r4, #12]
 8012064:	6020      	str	r0, [r4, #0]
 8012066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801206a:	81a3      	strh	r3, [r4, #12]
 801206c:	9b01      	ldr	r3, [sp, #4]
 801206e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012072:	b15b      	cbz	r3, 801208c <__smakebuf_r+0x70>
 8012074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012078:	4630      	mov	r0, r6
 801207a:	f000 f81d 	bl	80120b8 <_isatty_r>
 801207e:	b128      	cbz	r0, 801208c <__smakebuf_r+0x70>
 8012080:	89a3      	ldrh	r3, [r4, #12]
 8012082:	f023 0303 	bic.w	r3, r3, #3
 8012086:	f043 0301 	orr.w	r3, r3, #1
 801208a:	81a3      	strh	r3, [r4, #12]
 801208c:	89a3      	ldrh	r3, [r4, #12]
 801208e:	431d      	orrs	r5, r3
 8012090:	81a5      	strh	r5, [r4, #12]
 8012092:	e7cf      	b.n	8012034 <__smakebuf_r+0x18>

08012094 <_fstat_r>:
 8012094:	b538      	push	{r3, r4, r5, lr}
 8012096:	4d07      	ldr	r5, [pc, #28]	@ (80120b4 <_fstat_r+0x20>)
 8012098:	2300      	movs	r3, #0
 801209a:	4604      	mov	r4, r0
 801209c:	4608      	mov	r0, r1
 801209e:	4611      	mov	r1, r2
 80120a0:	602b      	str	r3, [r5, #0]
 80120a2:	f7f4 fa0b 	bl	80064bc <_fstat>
 80120a6:	1c43      	adds	r3, r0, #1
 80120a8:	d102      	bne.n	80120b0 <_fstat_r+0x1c>
 80120aa:	682b      	ldr	r3, [r5, #0]
 80120ac:	b103      	cbz	r3, 80120b0 <_fstat_r+0x1c>
 80120ae:	6023      	str	r3, [r4, #0]
 80120b0:	bd38      	pop	{r3, r4, r5, pc}
 80120b2:	bf00      	nop
 80120b4:	20005b38 	.word	0x20005b38

080120b8 <_isatty_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	4d06      	ldr	r5, [pc, #24]	@ (80120d4 <_isatty_r+0x1c>)
 80120bc:	2300      	movs	r3, #0
 80120be:	4604      	mov	r4, r0
 80120c0:	4608      	mov	r0, r1
 80120c2:	602b      	str	r3, [r5, #0]
 80120c4:	f7f4 fa0a 	bl	80064dc <_isatty>
 80120c8:	1c43      	adds	r3, r0, #1
 80120ca:	d102      	bne.n	80120d2 <_isatty_r+0x1a>
 80120cc:	682b      	ldr	r3, [r5, #0]
 80120ce:	b103      	cbz	r3, 80120d2 <_isatty_r+0x1a>
 80120d0:	6023      	str	r3, [r4, #0]
 80120d2:	bd38      	pop	{r3, r4, r5, pc}
 80120d4:	20005b38 	.word	0x20005b38

080120d8 <_raise_r>:
 80120d8:	291f      	cmp	r1, #31
 80120da:	b538      	push	{r3, r4, r5, lr}
 80120dc:	4605      	mov	r5, r0
 80120de:	460c      	mov	r4, r1
 80120e0:	d904      	bls.n	80120ec <_raise_r+0x14>
 80120e2:	2316      	movs	r3, #22
 80120e4:	6003      	str	r3, [r0, #0]
 80120e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120ea:	bd38      	pop	{r3, r4, r5, pc}
 80120ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80120ee:	b112      	cbz	r2, 80120f6 <_raise_r+0x1e>
 80120f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120f4:	b94b      	cbnz	r3, 801210a <_raise_r+0x32>
 80120f6:	4628      	mov	r0, r5
 80120f8:	f000 f830 	bl	801215c <_getpid_r>
 80120fc:	4622      	mov	r2, r4
 80120fe:	4601      	mov	r1, r0
 8012100:	4628      	mov	r0, r5
 8012102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012106:	f000 b817 	b.w	8012138 <_kill_r>
 801210a:	2b01      	cmp	r3, #1
 801210c:	d00a      	beq.n	8012124 <_raise_r+0x4c>
 801210e:	1c59      	adds	r1, r3, #1
 8012110:	d103      	bne.n	801211a <_raise_r+0x42>
 8012112:	2316      	movs	r3, #22
 8012114:	6003      	str	r3, [r0, #0]
 8012116:	2001      	movs	r0, #1
 8012118:	e7e7      	b.n	80120ea <_raise_r+0x12>
 801211a:	2100      	movs	r1, #0
 801211c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012120:	4620      	mov	r0, r4
 8012122:	4798      	blx	r3
 8012124:	2000      	movs	r0, #0
 8012126:	e7e0      	b.n	80120ea <_raise_r+0x12>

08012128 <raise>:
 8012128:	4b02      	ldr	r3, [pc, #8]	@ (8012134 <raise+0xc>)
 801212a:	4601      	mov	r1, r0
 801212c:	6818      	ldr	r0, [r3, #0]
 801212e:	f7ff bfd3 	b.w	80120d8 <_raise_r>
 8012132:	bf00      	nop
 8012134:	2000007c 	.word	0x2000007c

08012138 <_kill_r>:
 8012138:	b538      	push	{r3, r4, r5, lr}
 801213a:	4d07      	ldr	r5, [pc, #28]	@ (8012158 <_kill_r+0x20>)
 801213c:	2300      	movs	r3, #0
 801213e:	4604      	mov	r4, r0
 8012140:	4608      	mov	r0, r1
 8012142:	4611      	mov	r1, r2
 8012144:	602b      	str	r3, [r5, #0]
 8012146:	f7f4 f959 	bl	80063fc <_kill>
 801214a:	1c43      	adds	r3, r0, #1
 801214c:	d102      	bne.n	8012154 <_kill_r+0x1c>
 801214e:	682b      	ldr	r3, [r5, #0]
 8012150:	b103      	cbz	r3, 8012154 <_kill_r+0x1c>
 8012152:	6023      	str	r3, [r4, #0]
 8012154:	bd38      	pop	{r3, r4, r5, pc}
 8012156:	bf00      	nop
 8012158:	20005b38 	.word	0x20005b38

0801215c <_getpid_r>:
 801215c:	f7f4 b946 	b.w	80063ec <_getpid>

08012160 <cos>:
 8012160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012162:	ec53 2b10 	vmov	r2, r3, d0
 8012166:	4826      	ldr	r0, [pc, #152]	@ (8012200 <cos+0xa0>)
 8012168:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801216c:	4281      	cmp	r1, r0
 801216e:	d806      	bhi.n	801217e <cos+0x1e>
 8012170:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80121f8 <cos+0x98>
 8012174:	b005      	add	sp, #20
 8012176:	f85d eb04 	ldr.w	lr, [sp], #4
 801217a:	f000 bded 	b.w	8012d58 <__kernel_cos>
 801217e:	4821      	ldr	r0, [pc, #132]	@ (8012204 <cos+0xa4>)
 8012180:	4281      	cmp	r1, r0
 8012182:	d908      	bls.n	8012196 <cos+0x36>
 8012184:	4610      	mov	r0, r2
 8012186:	4619      	mov	r1, r3
 8012188:	f7ee f87e 	bl	8000288 <__aeabi_dsub>
 801218c:	ec41 0b10 	vmov	d0, r0, r1
 8012190:	b005      	add	sp, #20
 8012192:	f85d fb04 	ldr.w	pc, [sp], #4
 8012196:	4668      	mov	r0, sp
 8012198:	f000 f88a 	bl	80122b0 <__ieee754_rem_pio2>
 801219c:	f000 0003 	and.w	r0, r0, #3
 80121a0:	2801      	cmp	r0, #1
 80121a2:	d00b      	beq.n	80121bc <cos+0x5c>
 80121a4:	2802      	cmp	r0, #2
 80121a6:	d015      	beq.n	80121d4 <cos+0x74>
 80121a8:	b9d8      	cbnz	r0, 80121e2 <cos+0x82>
 80121aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80121ae:	ed9d 0b00 	vldr	d0, [sp]
 80121b2:	f000 fdd1 	bl	8012d58 <__kernel_cos>
 80121b6:	ec51 0b10 	vmov	r0, r1, d0
 80121ba:	e7e7      	b.n	801218c <cos+0x2c>
 80121bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80121c0:	ed9d 0b00 	vldr	d0, [sp]
 80121c4:	f000 fe90 	bl	8012ee8 <__kernel_sin>
 80121c8:	ec53 2b10 	vmov	r2, r3, d0
 80121cc:	4610      	mov	r0, r2
 80121ce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80121d2:	e7db      	b.n	801218c <cos+0x2c>
 80121d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80121d8:	ed9d 0b00 	vldr	d0, [sp]
 80121dc:	f000 fdbc 	bl	8012d58 <__kernel_cos>
 80121e0:	e7f2      	b.n	80121c8 <cos+0x68>
 80121e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80121e6:	ed9d 0b00 	vldr	d0, [sp]
 80121ea:	2001      	movs	r0, #1
 80121ec:	f000 fe7c 	bl	8012ee8 <__kernel_sin>
 80121f0:	e7e1      	b.n	80121b6 <cos+0x56>
 80121f2:	bf00      	nop
 80121f4:	f3af 8000 	nop.w
	...
 8012200:	3fe921fb 	.word	0x3fe921fb
 8012204:	7fefffff 	.word	0x7fefffff

08012208 <sin>:
 8012208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801220a:	ec53 2b10 	vmov	r2, r3, d0
 801220e:	4826      	ldr	r0, [pc, #152]	@ (80122a8 <sin+0xa0>)
 8012210:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012214:	4281      	cmp	r1, r0
 8012216:	d807      	bhi.n	8012228 <sin+0x20>
 8012218:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80122a0 <sin+0x98>
 801221c:	2000      	movs	r0, #0
 801221e:	b005      	add	sp, #20
 8012220:	f85d eb04 	ldr.w	lr, [sp], #4
 8012224:	f000 be60 	b.w	8012ee8 <__kernel_sin>
 8012228:	4820      	ldr	r0, [pc, #128]	@ (80122ac <sin+0xa4>)
 801222a:	4281      	cmp	r1, r0
 801222c:	d908      	bls.n	8012240 <sin+0x38>
 801222e:	4610      	mov	r0, r2
 8012230:	4619      	mov	r1, r3
 8012232:	f7ee f829 	bl	8000288 <__aeabi_dsub>
 8012236:	ec41 0b10 	vmov	d0, r0, r1
 801223a:	b005      	add	sp, #20
 801223c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012240:	4668      	mov	r0, sp
 8012242:	f000 f835 	bl	80122b0 <__ieee754_rem_pio2>
 8012246:	f000 0003 	and.w	r0, r0, #3
 801224a:	2801      	cmp	r0, #1
 801224c:	d00c      	beq.n	8012268 <sin+0x60>
 801224e:	2802      	cmp	r0, #2
 8012250:	d011      	beq.n	8012276 <sin+0x6e>
 8012252:	b9e8      	cbnz	r0, 8012290 <sin+0x88>
 8012254:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012258:	ed9d 0b00 	vldr	d0, [sp]
 801225c:	2001      	movs	r0, #1
 801225e:	f000 fe43 	bl	8012ee8 <__kernel_sin>
 8012262:	ec51 0b10 	vmov	r0, r1, d0
 8012266:	e7e6      	b.n	8012236 <sin+0x2e>
 8012268:	ed9d 1b02 	vldr	d1, [sp, #8]
 801226c:	ed9d 0b00 	vldr	d0, [sp]
 8012270:	f000 fd72 	bl	8012d58 <__kernel_cos>
 8012274:	e7f5      	b.n	8012262 <sin+0x5a>
 8012276:	ed9d 1b02 	vldr	d1, [sp, #8]
 801227a:	ed9d 0b00 	vldr	d0, [sp]
 801227e:	2001      	movs	r0, #1
 8012280:	f000 fe32 	bl	8012ee8 <__kernel_sin>
 8012284:	ec53 2b10 	vmov	r2, r3, d0
 8012288:	4610      	mov	r0, r2
 801228a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801228e:	e7d2      	b.n	8012236 <sin+0x2e>
 8012290:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012294:	ed9d 0b00 	vldr	d0, [sp]
 8012298:	f000 fd5e 	bl	8012d58 <__kernel_cos>
 801229c:	e7f2      	b.n	8012284 <sin+0x7c>
 801229e:	bf00      	nop
	...
 80122a8:	3fe921fb 	.word	0x3fe921fb
 80122ac:	7fefffff 	.word	0x7fefffff

080122b0 <__ieee754_rem_pio2>:
 80122b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b4:	ec57 6b10 	vmov	r6, r7, d0
 80122b8:	4bc5      	ldr	r3, [pc, #788]	@ (80125d0 <__ieee754_rem_pio2+0x320>)
 80122ba:	b08d      	sub	sp, #52	@ 0x34
 80122bc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80122c0:	4598      	cmp	r8, r3
 80122c2:	4604      	mov	r4, r0
 80122c4:	9704      	str	r7, [sp, #16]
 80122c6:	d807      	bhi.n	80122d8 <__ieee754_rem_pio2+0x28>
 80122c8:	2200      	movs	r2, #0
 80122ca:	2300      	movs	r3, #0
 80122cc:	ed80 0b00 	vstr	d0, [r0]
 80122d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80122d4:	2500      	movs	r5, #0
 80122d6:	e028      	b.n	801232a <__ieee754_rem_pio2+0x7a>
 80122d8:	4bbe      	ldr	r3, [pc, #760]	@ (80125d4 <__ieee754_rem_pio2+0x324>)
 80122da:	4598      	cmp	r8, r3
 80122dc:	d878      	bhi.n	80123d0 <__ieee754_rem_pio2+0x120>
 80122de:	9b04      	ldr	r3, [sp, #16]
 80122e0:	4dbd      	ldr	r5, [pc, #756]	@ (80125d8 <__ieee754_rem_pio2+0x328>)
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	4630      	mov	r0, r6
 80122e6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012598 <__ieee754_rem_pio2+0x2e8>)
 80122e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ec:	4639      	mov	r1, r7
 80122ee:	dd38      	ble.n	8012362 <__ieee754_rem_pio2+0xb2>
 80122f0:	f7ed ffca 	bl	8000288 <__aeabi_dsub>
 80122f4:	45a8      	cmp	r8, r5
 80122f6:	4606      	mov	r6, r0
 80122f8:	460f      	mov	r7, r1
 80122fa:	d01a      	beq.n	8012332 <__ieee754_rem_pio2+0x82>
 80122fc:	a3a8      	add	r3, pc, #672	@ (adr r3, 80125a0 <__ieee754_rem_pio2+0x2f0>)
 80122fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012302:	f7ed ffc1 	bl	8000288 <__aeabi_dsub>
 8012306:	4602      	mov	r2, r0
 8012308:	460b      	mov	r3, r1
 801230a:	4680      	mov	r8, r0
 801230c:	4689      	mov	r9, r1
 801230e:	4630      	mov	r0, r6
 8012310:	4639      	mov	r1, r7
 8012312:	f7ed ffb9 	bl	8000288 <__aeabi_dsub>
 8012316:	a3a2      	add	r3, pc, #648	@ (adr r3, 80125a0 <__ieee754_rem_pio2+0x2f0>)
 8012318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231c:	f7ed ffb4 	bl	8000288 <__aeabi_dsub>
 8012320:	e9c4 8900 	strd	r8, r9, [r4]
 8012324:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012328:	2501      	movs	r5, #1
 801232a:	4628      	mov	r0, r5
 801232c:	b00d      	add	sp, #52	@ 0x34
 801232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012332:	a39d      	add	r3, pc, #628	@ (adr r3, 80125a8 <__ieee754_rem_pio2+0x2f8>)
 8012334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012338:	f7ed ffa6 	bl	8000288 <__aeabi_dsub>
 801233c:	a39c      	add	r3, pc, #624	@ (adr r3, 80125b0 <__ieee754_rem_pio2+0x300>)
 801233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012342:	4606      	mov	r6, r0
 8012344:	460f      	mov	r7, r1
 8012346:	f7ed ff9f 	bl	8000288 <__aeabi_dsub>
 801234a:	4602      	mov	r2, r0
 801234c:	460b      	mov	r3, r1
 801234e:	4680      	mov	r8, r0
 8012350:	4689      	mov	r9, r1
 8012352:	4630      	mov	r0, r6
 8012354:	4639      	mov	r1, r7
 8012356:	f7ed ff97 	bl	8000288 <__aeabi_dsub>
 801235a:	a395      	add	r3, pc, #596	@ (adr r3, 80125b0 <__ieee754_rem_pio2+0x300>)
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	e7dc      	b.n	801231c <__ieee754_rem_pio2+0x6c>
 8012362:	f7ed ff93 	bl	800028c <__adddf3>
 8012366:	45a8      	cmp	r8, r5
 8012368:	4606      	mov	r6, r0
 801236a:	460f      	mov	r7, r1
 801236c:	d018      	beq.n	80123a0 <__ieee754_rem_pio2+0xf0>
 801236e:	a38c      	add	r3, pc, #560	@ (adr r3, 80125a0 <__ieee754_rem_pio2+0x2f0>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	f7ed ff8a 	bl	800028c <__adddf3>
 8012378:	4602      	mov	r2, r0
 801237a:	460b      	mov	r3, r1
 801237c:	4680      	mov	r8, r0
 801237e:	4689      	mov	r9, r1
 8012380:	4630      	mov	r0, r6
 8012382:	4639      	mov	r1, r7
 8012384:	f7ed ff80 	bl	8000288 <__aeabi_dsub>
 8012388:	a385      	add	r3, pc, #532	@ (adr r3, 80125a0 <__ieee754_rem_pio2+0x2f0>)
 801238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238e:	f7ed ff7d 	bl	800028c <__adddf3>
 8012392:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8012396:	e9c4 8900 	strd	r8, r9, [r4]
 801239a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801239e:	e7c4      	b.n	801232a <__ieee754_rem_pio2+0x7a>
 80123a0:	a381      	add	r3, pc, #516	@ (adr r3, 80125a8 <__ieee754_rem_pio2+0x2f8>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	f7ed ff71 	bl	800028c <__adddf3>
 80123aa:	a381      	add	r3, pc, #516	@ (adr r3, 80125b0 <__ieee754_rem_pio2+0x300>)
 80123ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b0:	4606      	mov	r6, r0
 80123b2:	460f      	mov	r7, r1
 80123b4:	f7ed ff6a 	bl	800028c <__adddf3>
 80123b8:	4602      	mov	r2, r0
 80123ba:	460b      	mov	r3, r1
 80123bc:	4680      	mov	r8, r0
 80123be:	4689      	mov	r9, r1
 80123c0:	4630      	mov	r0, r6
 80123c2:	4639      	mov	r1, r7
 80123c4:	f7ed ff60 	bl	8000288 <__aeabi_dsub>
 80123c8:	a379      	add	r3, pc, #484	@ (adr r3, 80125b0 <__ieee754_rem_pio2+0x300>)
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	e7de      	b.n	801238e <__ieee754_rem_pio2+0xde>
 80123d0:	4b82      	ldr	r3, [pc, #520]	@ (80125dc <__ieee754_rem_pio2+0x32c>)
 80123d2:	4598      	cmp	r8, r3
 80123d4:	f200 80d1 	bhi.w	801257a <__ieee754_rem_pio2+0x2ca>
 80123d8:	f000 fe40 	bl	801305c <fabs>
 80123dc:	ec57 6b10 	vmov	r6, r7, d0
 80123e0:	a375      	add	r3, pc, #468	@ (adr r3, 80125b8 <__ieee754_rem_pio2+0x308>)
 80123e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e6:	4630      	mov	r0, r6
 80123e8:	4639      	mov	r1, r7
 80123ea:	f7ee f905 	bl	80005f8 <__aeabi_dmul>
 80123ee:	4b7c      	ldr	r3, [pc, #496]	@ (80125e0 <__ieee754_rem_pio2+0x330>)
 80123f0:	2200      	movs	r2, #0
 80123f2:	f7ed ff4b 	bl	800028c <__adddf3>
 80123f6:	f7ee fbaf 	bl	8000b58 <__aeabi_d2iz>
 80123fa:	4605      	mov	r5, r0
 80123fc:	f7ee f892 	bl	8000524 <__aeabi_i2d>
 8012400:	4602      	mov	r2, r0
 8012402:	460b      	mov	r3, r1
 8012404:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012408:	a363      	add	r3, pc, #396	@ (adr r3, 8012598 <__ieee754_rem_pio2+0x2e8>)
 801240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240e:	f7ee f8f3 	bl	80005f8 <__aeabi_dmul>
 8012412:	4602      	mov	r2, r0
 8012414:	460b      	mov	r3, r1
 8012416:	4630      	mov	r0, r6
 8012418:	4639      	mov	r1, r7
 801241a:	f7ed ff35 	bl	8000288 <__aeabi_dsub>
 801241e:	a360      	add	r3, pc, #384	@ (adr r3, 80125a0 <__ieee754_rem_pio2+0x2f0>)
 8012420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012424:	4682      	mov	sl, r0
 8012426:	468b      	mov	fp, r1
 8012428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801242c:	f7ee f8e4 	bl	80005f8 <__aeabi_dmul>
 8012430:	2d1f      	cmp	r5, #31
 8012432:	4606      	mov	r6, r0
 8012434:	460f      	mov	r7, r1
 8012436:	dc0c      	bgt.n	8012452 <__ieee754_rem_pio2+0x1a2>
 8012438:	4b6a      	ldr	r3, [pc, #424]	@ (80125e4 <__ieee754_rem_pio2+0x334>)
 801243a:	1e6a      	subs	r2, r5, #1
 801243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012440:	4543      	cmp	r3, r8
 8012442:	d006      	beq.n	8012452 <__ieee754_rem_pio2+0x1a2>
 8012444:	4632      	mov	r2, r6
 8012446:	463b      	mov	r3, r7
 8012448:	4650      	mov	r0, sl
 801244a:	4659      	mov	r1, fp
 801244c:	f7ed ff1c 	bl	8000288 <__aeabi_dsub>
 8012450:	e00e      	b.n	8012470 <__ieee754_rem_pio2+0x1c0>
 8012452:	463b      	mov	r3, r7
 8012454:	4632      	mov	r2, r6
 8012456:	4650      	mov	r0, sl
 8012458:	4659      	mov	r1, fp
 801245a:	f7ed ff15 	bl	8000288 <__aeabi_dsub>
 801245e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012462:	9305      	str	r3, [sp, #20]
 8012464:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012468:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801246c:	2b10      	cmp	r3, #16
 801246e:	dc02      	bgt.n	8012476 <__ieee754_rem_pio2+0x1c6>
 8012470:	e9c4 0100 	strd	r0, r1, [r4]
 8012474:	e039      	b.n	80124ea <__ieee754_rem_pio2+0x23a>
 8012476:	a34c      	add	r3, pc, #304	@ (adr r3, 80125a8 <__ieee754_rem_pio2+0x2f8>)
 8012478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012480:	f7ee f8ba 	bl	80005f8 <__aeabi_dmul>
 8012484:	4606      	mov	r6, r0
 8012486:	460f      	mov	r7, r1
 8012488:	4602      	mov	r2, r0
 801248a:	460b      	mov	r3, r1
 801248c:	4650      	mov	r0, sl
 801248e:	4659      	mov	r1, fp
 8012490:	f7ed fefa 	bl	8000288 <__aeabi_dsub>
 8012494:	4602      	mov	r2, r0
 8012496:	460b      	mov	r3, r1
 8012498:	4680      	mov	r8, r0
 801249a:	4689      	mov	r9, r1
 801249c:	4650      	mov	r0, sl
 801249e:	4659      	mov	r1, fp
 80124a0:	f7ed fef2 	bl	8000288 <__aeabi_dsub>
 80124a4:	4632      	mov	r2, r6
 80124a6:	463b      	mov	r3, r7
 80124a8:	f7ed feee 	bl	8000288 <__aeabi_dsub>
 80124ac:	a340      	add	r3, pc, #256	@ (adr r3, 80125b0 <__ieee754_rem_pio2+0x300>)
 80124ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b2:	4606      	mov	r6, r0
 80124b4:	460f      	mov	r7, r1
 80124b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124ba:	f7ee f89d 	bl	80005f8 <__aeabi_dmul>
 80124be:	4632      	mov	r2, r6
 80124c0:	463b      	mov	r3, r7
 80124c2:	f7ed fee1 	bl	8000288 <__aeabi_dsub>
 80124c6:	4602      	mov	r2, r0
 80124c8:	460b      	mov	r3, r1
 80124ca:	4606      	mov	r6, r0
 80124cc:	460f      	mov	r7, r1
 80124ce:	4640      	mov	r0, r8
 80124d0:	4649      	mov	r1, r9
 80124d2:	f7ed fed9 	bl	8000288 <__aeabi_dsub>
 80124d6:	9a05      	ldr	r2, [sp, #20]
 80124d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80124dc:	1ad3      	subs	r3, r2, r3
 80124de:	2b31      	cmp	r3, #49	@ 0x31
 80124e0:	dc20      	bgt.n	8012524 <__ieee754_rem_pio2+0x274>
 80124e2:	e9c4 0100 	strd	r0, r1, [r4]
 80124e6:	46c2      	mov	sl, r8
 80124e8:	46cb      	mov	fp, r9
 80124ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80124ee:	4650      	mov	r0, sl
 80124f0:	4642      	mov	r2, r8
 80124f2:	464b      	mov	r3, r9
 80124f4:	4659      	mov	r1, fp
 80124f6:	f7ed fec7 	bl	8000288 <__aeabi_dsub>
 80124fa:	463b      	mov	r3, r7
 80124fc:	4632      	mov	r2, r6
 80124fe:	f7ed fec3 	bl	8000288 <__aeabi_dsub>
 8012502:	9b04      	ldr	r3, [sp, #16]
 8012504:	2b00      	cmp	r3, #0
 8012506:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801250a:	f6bf af0e 	bge.w	801232a <__ieee754_rem_pio2+0x7a>
 801250e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012512:	6063      	str	r3, [r4, #4]
 8012514:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012518:	f8c4 8000 	str.w	r8, [r4]
 801251c:	60a0      	str	r0, [r4, #8]
 801251e:	60e3      	str	r3, [r4, #12]
 8012520:	426d      	negs	r5, r5
 8012522:	e702      	b.n	801232a <__ieee754_rem_pio2+0x7a>
 8012524:	a326      	add	r3, pc, #152	@ (adr r3, 80125c0 <__ieee754_rem_pio2+0x310>)
 8012526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801252e:	f7ee f863 	bl	80005f8 <__aeabi_dmul>
 8012532:	4606      	mov	r6, r0
 8012534:	460f      	mov	r7, r1
 8012536:	4602      	mov	r2, r0
 8012538:	460b      	mov	r3, r1
 801253a:	4640      	mov	r0, r8
 801253c:	4649      	mov	r1, r9
 801253e:	f7ed fea3 	bl	8000288 <__aeabi_dsub>
 8012542:	4602      	mov	r2, r0
 8012544:	460b      	mov	r3, r1
 8012546:	4682      	mov	sl, r0
 8012548:	468b      	mov	fp, r1
 801254a:	4640      	mov	r0, r8
 801254c:	4649      	mov	r1, r9
 801254e:	f7ed fe9b 	bl	8000288 <__aeabi_dsub>
 8012552:	4632      	mov	r2, r6
 8012554:	463b      	mov	r3, r7
 8012556:	f7ed fe97 	bl	8000288 <__aeabi_dsub>
 801255a:	a31b      	add	r3, pc, #108	@ (adr r3, 80125c8 <__ieee754_rem_pio2+0x318>)
 801255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012560:	4606      	mov	r6, r0
 8012562:	460f      	mov	r7, r1
 8012564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012568:	f7ee f846 	bl	80005f8 <__aeabi_dmul>
 801256c:	4632      	mov	r2, r6
 801256e:	463b      	mov	r3, r7
 8012570:	f7ed fe8a 	bl	8000288 <__aeabi_dsub>
 8012574:	4606      	mov	r6, r0
 8012576:	460f      	mov	r7, r1
 8012578:	e764      	b.n	8012444 <__ieee754_rem_pio2+0x194>
 801257a:	4b1b      	ldr	r3, [pc, #108]	@ (80125e8 <__ieee754_rem_pio2+0x338>)
 801257c:	4598      	cmp	r8, r3
 801257e:	d935      	bls.n	80125ec <__ieee754_rem_pio2+0x33c>
 8012580:	4632      	mov	r2, r6
 8012582:	463b      	mov	r3, r7
 8012584:	4630      	mov	r0, r6
 8012586:	4639      	mov	r1, r7
 8012588:	f7ed fe7e 	bl	8000288 <__aeabi_dsub>
 801258c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012590:	e9c4 0100 	strd	r0, r1, [r4]
 8012594:	e69e      	b.n	80122d4 <__ieee754_rem_pio2+0x24>
 8012596:	bf00      	nop
 8012598:	54400000 	.word	0x54400000
 801259c:	3ff921fb 	.word	0x3ff921fb
 80125a0:	1a626331 	.word	0x1a626331
 80125a4:	3dd0b461 	.word	0x3dd0b461
 80125a8:	1a600000 	.word	0x1a600000
 80125ac:	3dd0b461 	.word	0x3dd0b461
 80125b0:	2e037073 	.word	0x2e037073
 80125b4:	3ba3198a 	.word	0x3ba3198a
 80125b8:	6dc9c883 	.word	0x6dc9c883
 80125bc:	3fe45f30 	.word	0x3fe45f30
 80125c0:	2e000000 	.word	0x2e000000
 80125c4:	3ba3198a 	.word	0x3ba3198a
 80125c8:	252049c1 	.word	0x252049c1
 80125cc:	397b839a 	.word	0x397b839a
 80125d0:	3fe921fb 	.word	0x3fe921fb
 80125d4:	4002d97b 	.word	0x4002d97b
 80125d8:	3ff921fb 	.word	0x3ff921fb
 80125dc:	413921fb 	.word	0x413921fb
 80125e0:	3fe00000 	.word	0x3fe00000
 80125e4:	08013750 	.word	0x08013750
 80125e8:	7fefffff 	.word	0x7fefffff
 80125ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80125f0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80125f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80125f8:	4630      	mov	r0, r6
 80125fa:	460f      	mov	r7, r1
 80125fc:	f7ee faac 	bl	8000b58 <__aeabi_d2iz>
 8012600:	f7ed ff90 	bl	8000524 <__aeabi_i2d>
 8012604:	4602      	mov	r2, r0
 8012606:	460b      	mov	r3, r1
 8012608:	4630      	mov	r0, r6
 801260a:	4639      	mov	r1, r7
 801260c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012610:	f7ed fe3a 	bl	8000288 <__aeabi_dsub>
 8012614:	4b22      	ldr	r3, [pc, #136]	@ (80126a0 <__ieee754_rem_pio2+0x3f0>)
 8012616:	2200      	movs	r2, #0
 8012618:	f7ed ffee 	bl	80005f8 <__aeabi_dmul>
 801261c:	460f      	mov	r7, r1
 801261e:	4606      	mov	r6, r0
 8012620:	f7ee fa9a 	bl	8000b58 <__aeabi_d2iz>
 8012624:	f7ed ff7e 	bl	8000524 <__aeabi_i2d>
 8012628:	4602      	mov	r2, r0
 801262a:	460b      	mov	r3, r1
 801262c:	4630      	mov	r0, r6
 801262e:	4639      	mov	r1, r7
 8012630:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012634:	f7ed fe28 	bl	8000288 <__aeabi_dsub>
 8012638:	4b19      	ldr	r3, [pc, #100]	@ (80126a0 <__ieee754_rem_pio2+0x3f0>)
 801263a:	2200      	movs	r2, #0
 801263c:	f7ed ffdc 	bl	80005f8 <__aeabi_dmul>
 8012640:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8012644:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8012648:	f04f 0803 	mov.w	r8, #3
 801264c:	2600      	movs	r6, #0
 801264e:	2700      	movs	r7, #0
 8012650:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012654:	4632      	mov	r2, r6
 8012656:	463b      	mov	r3, r7
 8012658:	46c2      	mov	sl, r8
 801265a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801265e:	f7ee fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8012662:	2800      	cmp	r0, #0
 8012664:	d1f4      	bne.n	8012650 <__ieee754_rem_pio2+0x3a0>
 8012666:	4b0f      	ldr	r3, [pc, #60]	@ (80126a4 <__ieee754_rem_pio2+0x3f4>)
 8012668:	9301      	str	r3, [sp, #4]
 801266a:	2302      	movs	r3, #2
 801266c:	9300      	str	r3, [sp, #0]
 801266e:	462a      	mov	r2, r5
 8012670:	4653      	mov	r3, sl
 8012672:	4621      	mov	r1, r4
 8012674:	a806      	add	r0, sp, #24
 8012676:	f000 f817 	bl	80126a8 <__kernel_rem_pio2>
 801267a:	9b04      	ldr	r3, [sp, #16]
 801267c:	2b00      	cmp	r3, #0
 801267e:	4605      	mov	r5, r0
 8012680:	f6bf ae53 	bge.w	801232a <__ieee754_rem_pio2+0x7a>
 8012684:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012688:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801268c:	e9c4 2300 	strd	r2, r3, [r4]
 8012690:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8012694:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012698:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801269c:	e740      	b.n	8012520 <__ieee754_rem_pio2+0x270>
 801269e:	bf00      	nop
 80126a0:	41700000 	.word	0x41700000
 80126a4:	080137d0 	.word	0x080137d0

080126a8 <__kernel_rem_pio2>:
 80126a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ac:	ed2d 8b02 	vpush	{d8}
 80126b0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80126b4:	f112 0f14 	cmn.w	r2, #20
 80126b8:	9306      	str	r3, [sp, #24]
 80126ba:	9104      	str	r1, [sp, #16]
 80126bc:	4bbe      	ldr	r3, [pc, #760]	@ (80129b8 <__kernel_rem_pio2+0x310>)
 80126be:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80126c0:	9008      	str	r0, [sp, #32]
 80126c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80126c6:	9300      	str	r3, [sp, #0]
 80126c8:	9b06      	ldr	r3, [sp, #24]
 80126ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80126ce:	bfa8      	it	ge
 80126d0:	1ed4      	subge	r4, r2, #3
 80126d2:	9305      	str	r3, [sp, #20]
 80126d4:	bfb2      	itee	lt
 80126d6:	2400      	movlt	r4, #0
 80126d8:	2318      	movge	r3, #24
 80126da:	fb94 f4f3 	sdivge	r4, r4, r3
 80126de:	f06f 0317 	mvn.w	r3, #23
 80126e2:	fb04 3303 	mla	r3, r4, r3, r3
 80126e6:	eb03 0b02 	add.w	fp, r3, r2
 80126ea:	9b00      	ldr	r3, [sp, #0]
 80126ec:	9a05      	ldr	r2, [sp, #20]
 80126ee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80129a8 <__kernel_rem_pio2+0x300>
 80126f2:	eb03 0802 	add.w	r8, r3, r2
 80126f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80126f8:	1aa7      	subs	r7, r4, r2
 80126fa:	ae20      	add	r6, sp, #128	@ 0x80
 80126fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012700:	2500      	movs	r5, #0
 8012702:	4545      	cmp	r5, r8
 8012704:	dd13      	ble.n	801272e <__kernel_rem_pio2+0x86>
 8012706:	9b06      	ldr	r3, [sp, #24]
 8012708:	aa20      	add	r2, sp, #128	@ 0x80
 801270a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801270e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8012712:	f04f 0800 	mov.w	r8, #0
 8012716:	9b00      	ldr	r3, [sp, #0]
 8012718:	4598      	cmp	r8, r3
 801271a:	dc31      	bgt.n	8012780 <__kernel_rem_pio2+0xd8>
 801271c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80129a8 <__kernel_rem_pio2+0x300>
 8012720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012724:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012728:	462f      	mov	r7, r5
 801272a:	2600      	movs	r6, #0
 801272c:	e01b      	b.n	8012766 <__kernel_rem_pio2+0xbe>
 801272e:	42ef      	cmn	r7, r5
 8012730:	d407      	bmi.n	8012742 <__kernel_rem_pio2+0x9a>
 8012732:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012736:	f7ed fef5 	bl	8000524 <__aeabi_i2d>
 801273a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801273e:	3501      	adds	r5, #1
 8012740:	e7df      	b.n	8012702 <__kernel_rem_pio2+0x5a>
 8012742:	ec51 0b18 	vmov	r0, r1, d8
 8012746:	e7f8      	b.n	801273a <__kernel_rem_pio2+0x92>
 8012748:	e9d7 2300 	ldrd	r2, r3, [r7]
 801274c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012750:	f7ed ff52 	bl	80005f8 <__aeabi_dmul>
 8012754:	4602      	mov	r2, r0
 8012756:	460b      	mov	r3, r1
 8012758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801275c:	f7ed fd96 	bl	800028c <__adddf3>
 8012760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012764:	3601      	adds	r6, #1
 8012766:	9b05      	ldr	r3, [sp, #20]
 8012768:	429e      	cmp	r6, r3
 801276a:	f1a7 0708 	sub.w	r7, r7, #8
 801276e:	ddeb      	ble.n	8012748 <__kernel_rem_pio2+0xa0>
 8012770:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012774:	f108 0801 	add.w	r8, r8, #1
 8012778:	ecaa 7b02 	vstmia	sl!, {d7}
 801277c:	3508      	adds	r5, #8
 801277e:	e7ca      	b.n	8012716 <__kernel_rem_pio2+0x6e>
 8012780:	9b00      	ldr	r3, [sp, #0]
 8012782:	f8dd 8000 	ldr.w	r8, [sp]
 8012786:	aa0c      	add	r2, sp, #48	@ 0x30
 8012788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801278c:	930a      	str	r3, [sp, #40]	@ 0x28
 801278e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012790:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012794:	9309      	str	r3, [sp, #36]	@ 0x24
 8012796:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801279a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801279c:	ab98      	add	r3, sp, #608	@ 0x260
 801279e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80127a2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80127a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80127ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80127ae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80127b2:	46a1      	mov	r9, r4
 80127b4:	46c2      	mov	sl, r8
 80127b6:	f1ba 0f00 	cmp.w	sl, #0
 80127ba:	f1a5 0508 	sub.w	r5, r5, #8
 80127be:	dc77      	bgt.n	80128b0 <__kernel_rem_pio2+0x208>
 80127c0:	4658      	mov	r0, fp
 80127c2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80127c6:	f000 fc53 	bl	8013070 <scalbn>
 80127ca:	ec57 6b10 	vmov	r6, r7, d0
 80127ce:	2200      	movs	r2, #0
 80127d0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80127d4:	4630      	mov	r0, r6
 80127d6:	4639      	mov	r1, r7
 80127d8:	f7ed ff0e 	bl	80005f8 <__aeabi_dmul>
 80127dc:	ec41 0b10 	vmov	d0, r0, r1
 80127e0:	f000 fcc6 	bl	8013170 <floor>
 80127e4:	4b75      	ldr	r3, [pc, #468]	@ (80129bc <__kernel_rem_pio2+0x314>)
 80127e6:	ec51 0b10 	vmov	r0, r1, d0
 80127ea:	2200      	movs	r2, #0
 80127ec:	f7ed ff04 	bl	80005f8 <__aeabi_dmul>
 80127f0:	4602      	mov	r2, r0
 80127f2:	460b      	mov	r3, r1
 80127f4:	4630      	mov	r0, r6
 80127f6:	4639      	mov	r1, r7
 80127f8:	f7ed fd46 	bl	8000288 <__aeabi_dsub>
 80127fc:	460f      	mov	r7, r1
 80127fe:	4606      	mov	r6, r0
 8012800:	f7ee f9aa 	bl	8000b58 <__aeabi_d2iz>
 8012804:	9002      	str	r0, [sp, #8]
 8012806:	f7ed fe8d 	bl	8000524 <__aeabi_i2d>
 801280a:	4602      	mov	r2, r0
 801280c:	460b      	mov	r3, r1
 801280e:	4630      	mov	r0, r6
 8012810:	4639      	mov	r1, r7
 8012812:	f7ed fd39 	bl	8000288 <__aeabi_dsub>
 8012816:	f1bb 0f00 	cmp.w	fp, #0
 801281a:	4606      	mov	r6, r0
 801281c:	460f      	mov	r7, r1
 801281e:	dd6c      	ble.n	80128fa <__kernel_rem_pio2+0x252>
 8012820:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8012824:	ab0c      	add	r3, sp, #48	@ 0x30
 8012826:	9d02      	ldr	r5, [sp, #8]
 8012828:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801282c:	f1cb 0018 	rsb	r0, fp, #24
 8012830:	fa43 f200 	asr.w	r2, r3, r0
 8012834:	4415      	add	r5, r2
 8012836:	4082      	lsls	r2, r0
 8012838:	1a9b      	subs	r3, r3, r2
 801283a:	aa0c      	add	r2, sp, #48	@ 0x30
 801283c:	9502      	str	r5, [sp, #8]
 801283e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012842:	f1cb 0217 	rsb	r2, fp, #23
 8012846:	fa43 f902 	asr.w	r9, r3, r2
 801284a:	f1b9 0f00 	cmp.w	r9, #0
 801284e:	dd64      	ble.n	801291a <__kernel_rem_pio2+0x272>
 8012850:	9b02      	ldr	r3, [sp, #8]
 8012852:	2200      	movs	r2, #0
 8012854:	3301      	adds	r3, #1
 8012856:	9302      	str	r3, [sp, #8]
 8012858:	4615      	mov	r5, r2
 801285a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801285e:	4590      	cmp	r8, r2
 8012860:	f300 80b8 	bgt.w	80129d4 <__kernel_rem_pio2+0x32c>
 8012864:	f1bb 0f00 	cmp.w	fp, #0
 8012868:	dd07      	ble.n	801287a <__kernel_rem_pio2+0x1d2>
 801286a:	f1bb 0f01 	cmp.w	fp, #1
 801286e:	f000 80bf 	beq.w	80129f0 <__kernel_rem_pio2+0x348>
 8012872:	f1bb 0f02 	cmp.w	fp, #2
 8012876:	f000 80c6 	beq.w	8012a06 <__kernel_rem_pio2+0x35e>
 801287a:	f1b9 0f02 	cmp.w	r9, #2
 801287e:	d14c      	bne.n	801291a <__kernel_rem_pio2+0x272>
 8012880:	4632      	mov	r2, r6
 8012882:	463b      	mov	r3, r7
 8012884:	494e      	ldr	r1, [pc, #312]	@ (80129c0 <__kernel_rem_pio2+0x318>)
 8012886:	2000      	movs	r0, #0
 8012888:	f7ed fcfe 	bl	8000288 <__aeabi_dsub>
 801288c:	4606      	mov	r6, r0
 801288e:	460f      	mov	r7, r1
 8012890:	2d00      	cmp	r5, #0
 8012892:	d042      	beq.n	801291a <__kernel_rem_pio2+0x272>
 8012894:	4658      	mov	r0, fp
 8012896:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80129b0 <__kernel_rem_pio2+0x308>
 801289a:	f000 fbe9 	bl	8013070 <scalbn>
 801289e:	4630      	mov	r0, r6
 80128a0:	4639      	mov	r1, r7
 80128a2:	ec53 2b10 	vmov	r2, r3, d0
 80128a6:	f7ed fcef 	bl	8000288 <__aeabi_dsub>
 80128aa:	4606      	mov	r6, r0
 80128ac:	460f      	mov	r7, r1
 80128ae:	e034      	b.n	801291a <__kernel_rem_pio2+0x272>
 80128b0:	4b44      	ldr	r3, [pc, #272]	@ (80129c4 <__kernel_rem_pio2+0x31c>)
 80128b2:	2200      	movs	r2, #0
 80128b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128b8:	f7ed fe9e 	bl	80005f8 <__aeabi_dmul>
 80128bc:	f7ee f94c 	bl	8000b58 <__aeabi_d2iz>
 80128c0:	f7ed fe30 	bl	8000524 <__aeabi_i2d>
 80128c4:	4b40      	ldr	r3, [pc, #256]	@ (80129c8 <__kernel_rem_pio2+0x320>)
 80128c6:	2200      	movs	r2, #0
 80128c8:	4606      	mov	r6, r0
 80128ca:	460f      	mov	r7, r1
 80128cc:	f7ed fe94 	bl	80005f8 <__aeabi_dmul>
 80128d0:	4602      	mov	r2, r0
 80128d2:	460b      	mov	r3, r1
 80128d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128d8:	f7ed fcd6 	bl	8000288 <__aeabi_dsub>
 80128dc:	f7ee f93c 	bl	8000b58 <__aeabi_d2iz>
 80128e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80128e4:	f849 0b04 	str.w	r0, [r9], #4
 80128e8:	4639      	mov	r1, r7
 80128ea:	4630      	mov	r0, r6
 80128ec:	f7ed fcce 	bl	800028c <__adddf3>
 80128f0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80128f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128f8:	e75d      	b.n	80127b6 <__kernel_rem_pio2+0x10e>
 80128fa:	d107      	bne.n	801290c <__kernel_rem_pio2+0x264>
 80128fc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012900:	aa0c      	add	r2, sp, #48	@ 0x30
 8012902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012906:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801290a:	e79e      	b.n	801284a <__kernel_rem_pio2+0x1a2>
 801290c:	4b2f      	ldr	r3, [pc, #188]	@ (80129cc <__kernel_rem_pio2+0x324>)
 801290e:	2200      	movs	r2, #0
 8012910:	f7ee f8f8 	bl	8000b04 <__aeabi_dcmpge>
 8012914:	2800      	cmp	r0, #0
 8012916:	d143      	bne.n	80129a0 <__kernel_rem_pio2+0x2f8>
 8012918:	4681      	mov	r9, r0
 801291a:	2200      	movs	r2, #0
 801291c:	2300      	movs	r3, #0
 801291e:	4630      	mov	r0, r6
 8012920:	4639      	mov	r1, r7
 8012922:	f7ee f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8012926:	2800      	cmp	r0, #0
 8012928:	f000 80bf 	beq.w	8012aaa <__kernel_rem_pio2+0x402>
 801292c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012930:	2200      	movs	r2, #0
 8012932:	9900      	ldr	r1, [sp, #0]
 8012934:	428b      	cmp	r3, r1
 8012936:	da6e      	bge.n	8012a16 <__kernel_rem_pio2+0x36e>
 8012938:	2a00      	cmp	r2, #0
 801293a:	f000 8089 	beq.w	8012a50 <__kernel_rem_pio2+0x3a8>
 801293e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012942:	ab0c      	add	r3, sp, #48	@ 0x30
 8012944:	f1ab 0b18 	sub.w	fp, fp, #24
 8012948:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d0f6      	beq.n	801293e <__kernel_rem_pio2+0x296>
 8012950:	4658      	mov	r0, fp
 8012952:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80129b0 <__kernel_rem_pio2+0x308>
 8012956:	f000 fb8b 	bl	8013070 <scalbn>
 801295a:	f108 0301 	add.w	r3, r8, #1
 801295e:	00da      	lsls	r2, r3, #3
 8012960:	9205      	str	r2, [sp, #20]
 8012962:	ec55 4b10 	vmov	r4, r5, d0
 8012966:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012968:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80129c4 <__kernel_rem_pio2+0x31c>
 801296c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012970:	4646      	mov	r6, r8
 8012972:	f04f 0a00 	mov.w	sl, #0
 8012976:	2e00      	cmp	r6, #0
 8012978:	f280 80cf 	bge.w	8012b1a <__kernel_rem_pio2+0x472>
 801297c:	4644      	mov	r4, r8
 801297e:	2c00      	cmp	r4, #0
 8012980:	f2c0 80fd 	blt.w	8012b7e <__kernel_rem_pio2+0x4d6>
 8012984:	4b12      	ldr	r3, [pc, #72]	@ (80129d0 <__kernel_rem_pio2+0x328>)
 8012986:	461f      	mov	r7, r3
 8012988:	ab70      	add	r3, sp, #448	@ 0x1c0
 801298a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801298e:	9306      	str	r3, [sp, #24]
 8012990:	f04f 0a00 	mov.w	sl, #0
 8012994:	f04f 0b00 	mov.w	fp, #0
 8012998:	2600      	movs	r6, #0
 801299a:	eba8 0504 	sub.w	r5, r8, r4
 801299e:	e0e2      	b.n	8012b66 <__kernel_rem_pio2+0x4be>
 80129a0:	f04f 0902 	mov.w	r9, #2
 80129a4:	e754      	b.n	8012850 <__kernel_rem_pio2+0x1a8>
 80129a6:	bf00      	nop
	...
 80129b4:	3ff00000 	.word	0x3ff00000
 80129b8:	08013918 	.word	0x08013918
 80129bc:	40200000 	.word	0x40200000
 80129c0:	3ff00000 	.word	0x3ff00000
 80129c4:	3e700000 	.word	0x3e700000
 80129c8:	41700000 	.word	0x41700000
 80129cc:	3fe00000 	.word	0x3fe00000
 80129d0:	080138d8 	.word	0x080138d8
 80129d4:	f854 3b04 	ldr.w	r3, [r4], #4
 80129d8:	b945      	cbnz	r5, 80129ec <__kernel_rem_pio2+0x344>
 80129da:	b123      	cbz	r3, 80129e6 <__kernel_rem_pio2+0x33e>
 80129dc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80129e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80129e4:	2301      	movs	r3, #1
 80129e6:	3201      	adds	r2, #1
 80129e8:	461d      	mov	r5, r3
 80129ea:	e738      	b.n	801285e <__kernel_rem_pio2+0x1b6>
 80129ec:	1acb      	subs	r3, r1, r3
 80129ee:	e7f7      	b.n	80129e0 <__kernel_rem_pio2+0x338>
 80129f0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80129f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80129f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80129fe:	a90c      	add	r1, sp, #48	@ 0x30
 8012a00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012a04:	e739      	b.n	801287a <__kernel_rem_pio2+0x1d2>
 8012a06:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8012a0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8012a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012a14:	e7f3      	b.n	80129fe <__kernel_rem_pio2+0x356>
 8012a16:	a90c      	add	r1, sp, #48	@ 0x30
 8012a18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	430a      	orrs	r2, r1
 8012a20:	e787      	b.n	8012932 <__kernel_rem_pio2+0x28a>
 8012a22:	3401      	adds	r4, #1
 8012a24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012a28:	2a00      	cmp	r2, #0
 8012a2a:	d0fa      	beq.n	8012a22 <__kernel_rem_pio2+0x37a>
 8012a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012a32:	eb0d 0503 	add.w	r5, sp, r3
 8012a36:	9b06      	ldr	r3, [sp, #24]
 8012a38:	aa20      	add	r2, sp, #128	@ 0x80
 8012a3a:	4443      	add	r3, r8
 8012a3c:	f108 0701 	add.w	r7, r8, #1
 8012a40:	3d98      	subs	r5, #152	@ 0x98
 8012a42:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8012a46:	4444      	add	r4, r8
 8012a48:	42bc      	cmp	r4, r7
 8012a4a:	da04      	bge.n	8012a56 <__kernel_rem_pio2+0x3ae>
 8012a4c:	46a0      	mov	r8, r4
 8012a4e:	e6a2      	b.n	8012796 <__kernel_rem_pio2+0xee>
 8012a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a52:	2401      	movs	r4, #1
 8012a54:	e7e6      	b.n	8012a24 <__kernel_rem_pio2+0x37c>
 8012a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a58:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012a5c:	f7ed fd62 	bl	8000524 <__aeabi_i2d>
 8012a60:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8012d28 <__kernel_rem_pio2+0x680>
 8012a64:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012a70:	46b2      	mov	sl, r6
 8012a72:	f04f 0800 	mov.w	r8, #0
 8012a76:	9b05      	ldr	r3, [sp, #20]
 8012a78:	4598      	cmp	r8, r3
 8012a7a:	dd05      	ble.n	8012a88 <__kernel_rem_pio2+0x3e0>
 8012a7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a80:	3701      	adds	r7, #1
 8012a82:	eca5 7b02 	vstmia	r5!, {d7}
 8012a86:	e7df      	b.n	8012a48 <__kernel_rem_pio2+0x3a0>
 8012a88:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012a8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012a90:	f7ed fdb2 	bl	80005f8 <__aeabi_dmul>
 8012a94:	4602      	mov	r2, r0
 8012a96:	460b      	mov	r3, r1
 8012a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a9c:	f7ed fbf6 	bl	800028c <__adddf3>
 8012aa0:	f108 0801 	add.w	r8, r8, #1
 8012aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012aa8:	e7e5      	b.n	8012a76 <__kernel_rem_pio2+0x3ce>
 8012aaa:	f1cb 0000 	rsb	r0, fp, #0
 8012aae:	ec47 6b10 	vmov	d0, r6, r7
 8012ab2:	f000 fadd 	bl	8013070 <scalbn>
 8012ab6:	ec55 4b10 	vmov	r4, r5, d0
 8012aba:	4b9d      	ldr	r3, [pc, #628]	@ (8012d30 <__kernel_rem_pio2+0x688>)
 8012abc:	2200      	movs	r2, #0
 8012abe:	4620      	mov	r0, r4
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	f7ee f81f 	bl	8000b04 <__aeabi_dcmpge>
 8012ac6:	b300      	cbz	r0, 8012b0a <__kernel_rem_pio2+0x462>
 8012ac8:	4b9a      	ldr	r3, [pc, #616]	@ (8012d34 <__kernel_rem_pio2+0x68c>)
 8012aca:	2200      	movs	r2, #0
 8012acc:	4620      	mov	r0, r4
 8012ace:	4629      	mov	r1, r5
 8012ad0:	f7ed fd92 	bl	80005f8 <__aeabi_dmul>
 8012ad4:	f7ee f840 	bl	8000b58 <__aeabi_d2iz>
 8012ad8:	4606      	mov	r6, r0
 8012ada:	f7ed fd23 	bl	8000524 <__aeabi_i2d>
 8012ade:	4b94      	ldr	r3, [pc, #592]	@ (8012d30 <__kernel_rem_pio2+0x688>)
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	f7ed fd89 	bl	80005f8 <__aeabi_dmul>
 8012ae6:	460b      	mov	r3, r1
 8012ae8:	4602      	mov	r2, r0
 8012aea:	4629      	mov	r1, r5
 8012aec:	4620      	mov	r0, r4
 8012aee:	f7ed fbcb 	bl	8000288 <__aeabi_dsub>
 8012af2:	f7ee f831 	bl	8000b58 <__aeabi_d2iz>
 8012af6:	ab0c      	add	r3, sp, #48	@ 0x30
 8012af8:	f10b 0b18 	add.w	fp, fp, #24
 8012afc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012b00:	f108 0801 	add.w	r8, r8, #1
 8012b04:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8012b08:	e722      	b.n	8012950 <__kernel_rem_pio2+0x2a8>
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	4629      	mov	r1, r5
 8012b0e:	f7ee f823 	bl	8000b58 <__aeabi_d2iz>
 8012b12:	ab0c      	add	r3, sp, #48	@ 0x30
 8012b14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012b18:	e71a      	b.n	8012950 <__kernel_rem_pio2+0x2a8>
 8012b1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8012b1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012b20:	f7ed fd00 	bl	8000524 <__aeabi_i2d>
 8012b24:	4622      	mov	r2, r4
 8012b26:	462b      	mov	r3, r5
 8012b28:	f7ed fd66 	bl	80005f8 <__aeabi_dmul>
 8012b2c:	4652      	mov	r2, sl
 8012b2e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012b32:	465b      	mov	r3, fp
 8012b34:	4620      	mov	r0, r4
 8012b36:	4629      	mov	r1, r5
 8012b38:	f7ed fd5e 	bl	80005f8 <__aeabi_dmul>
 8012b3c:	3e01      	subs	r6, #1
 8012b3e:	4604      	mov	r4, r0
 8012b40:	460d      	mov	r5, r1
 8012b42:	e718      	b.n	8012976 <__kernel_rem_pio2+0x2ce>
 8012b44:	9906      	ldr	r1, [sp, #24]
 8012b46:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8012b4a:	9106      	str	r1, [sp, #24]
 8012b4c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8012b50:	f7ed fd52 	bl	80005f8 <__aeabi_dmul>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	4650      	mov	r0, sl
 8012b5a:	4659      	mov	r1, fp
 8012b5c:	f7ed fb96 	bl	800028c <__adddf3>
 8012b60:	3601      	adds	r6, #1
 8012b62:	4682      	mov	sl, r0
 8012b64:	468b      	mov	fp, r1
 8012b66:	9b00      	ldr	r3, [sp, #0]
 8012b68:	429e      	cmp	r6, r3
 8012b6a:	dc01      	bgt.n	8012b70 <__kernel_rem_pio2+0x4c8>
 8012b6c:	42b5      	cmp	r5, r6
 8012b6e:	dae9      	bge.n	8012b44 <__kernel_rem_pio2+0x49c>
 8012b70:	ab48      	add	r3, sp, #288	@ 0x120
 8012b72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012b76:	e9c5 ab00 	strd	sl, fp, [r5]
 8012b7a:	3c01      	subs	r4, #1
 8012b7c:	e6ff      	b.n	801297e <__kernel_rem_pio2+0x2d6>
 8012b7e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012b80:	2b02      	cmp	r3, #2
 8012b82:	dc0b      	bgt.n	8012b9c <__kernel_rem_pio2+0x4f4>
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	dc39      	bgt.n	8012bfc <__kernel_rem_pio2+0x554>
 8012b88:	d05d      	beq.n	8012c46 <__kernel_rem_pio2+0x59e>
 8012b8a:	9b02      	ldr	r3, [sp, #8]
 8012b8c:	f003 0007 	and.w	r0, r3, #7
 8012b90:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8012b94:	ecbd 8b02 	vpop	{d8}
 8012b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b9c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012b9e:	2b03      	cmp	r3, #3
 8012ba0:	d1f3      	bne.n	8012b8a <__kernel_rem_pio2+0x4e2>
 8012ba2:	9b05      	ldr	r3, [sp, #20]
 8012ba4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012ba8:	eb0d 0403 	add.w	r4, sp, r3
 8012bac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8012bb0:	4625      	mov	r5, r4
 8012bb2:	46c2      	mov	sl, r8
 8012bb4:	f1ba 0f00 	cmp.w	sl, #0
 8012bb8:	f1a5 0508 	sub.w	r5, r5, #8
 8012bbc:	dc6b      	bgt.n	8012c96 <__kernel_rem_pio2+0x5ee>
 8012bbe:	4645      	mov	r5, r8
 8012bc0:	2d01      	cmp	r5, #1
 8012bc2:	f1a4 0408 	sub.w	r4, r4, #8
 8012bc6:	f300 8087 	bgt.w	8012cd8 <__kernel_rem_pio2+0x630>
 8012bca:	9c05      	ldr	r4, [sp, #20]
 8012bcc:	ab48      	add	r3, sp, #288	@ 0x120
 8012bce:	441c      	add	r4, r3
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	2100      	movs	r1, #0
 8012bd4:	f1b8 0f01 	cmp.w	r8, #1
 8012bd8:	f300 809c 	bgt.w	8012d14 <__kernel_rem_pio2+0x66c>
 8012bdc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8012be0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8012be4:	f1b9 0f00 	cmp.w	r9, #0
 8012be8:	f040 80a6 	bne.w	8012d38 <__kernel_rem_pio2+0x690>
 8012bec:	9b04      	ldr	r3, [sp, #16]
 8012bee:	e9c3 7800 	strd	r7, r8, [r3]
 8012bf2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012bf6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012bfa:	e7c6      	b.n	8012b8a <__kernel_rem_pio2+0x4e2>
 8012bfc:	9d05      	ldr	r5, [sp, #20]
 8012bfe:	ab48      	add	r3, sp, #288	@ 0x120
 8012c00:	441d      	add	r5, r3
 8012c02:	4644      	mov	r4, r8
 8012c04:	2000      	movs	r0, #0
 8012c06:	2100      	movs	r1, #0
 8012c08:	2c00      	cmp	r4, #0
 8012c0a:	da35      	bge.n	8012c78 <__kernel_rem_pio2+0x5d0>
 8012c0c:	f1b9 0f00 	cmp.w	r9, #0
 8012c10:	d038      	beq.n	8012c84 <__kernel_rem_pio2+0x5dc>
 8012c12:	4602      	mov	r2, r0
 8012c14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012c18:	9c04      	ldr	r4, [sp, #16]
 8012c1a:	e9c4 2300 	strd	r2, r3, [r4]
 8012c1e:	4602      	mov	r2, r0
 8012c20:	460b      	mov	r3, r1
 8012c22:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8012c26:	f7ed fb2f 	bl	8000288 <__aeabi_dsub>
 8012c2a:	ad4a      	add	r5, sp, #296	@ 0x128
 8012c2c:	2401      	movs	r4, #1
 8012c2e:	45a0      	cmp	r8, r4
 8012c30:	da2b      	bge.n	8012c8a <__kernel_rem_pio2+0x5e2>
 8012c32:	f1b9 0f00 	cmp.w	r9, #0
 8012c36:	d002      	beq.n	8012c3e <__kernel_rem_pio2+0x596>
 8012c38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	9b04      	ldr	r3, [sp, #16]
 8012c40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012c44:	e7a1      	b.n	8012b8a <__kernel_rem_pio2+0x4e2>
 8012c46:	9c05      	ldr	r4, [sp, #20]
 8012c48:	ab48      	add	r3, sp, #288	@ 0x120
 8012c4a:	441c      	add	r4, r3
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	2100      	movs	r1, #0
 8012c50:	f1b8 0f00 	cmp.w	r8, #0
 8012c54:	da09      	bge.n	8012c6a <__kernel_rem_pio2+0x5c2>
 8012c56:	f1b9 0f00 	cmp.w	r9, #0
 8012c5a:	d002      	beq.n	8012c62 <__kernel_rem_pio2+0x5ba>
 8012c5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012c60:	4619      	mov	r1, r3
 8012c62:	9b04      	ldr	r3, [sp, #16]
 8012c64:	e9c3 0100 	strd	r0, r1, [r3]
 8012c68:	e78f      	b.n	8012b8a <__kernel_rem_pio2+0x4e2>
 8012c6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012c6e:	f7ed fb0d 	bl	800028c <__adddf3>
 8012c72:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012c76:	e7eb      	b.n	8012c50 <__kernel_rem_pio2+0x5a8>
 8012c78:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012c7c:	f7ed fb06 	bl	800028c <__adddf3>
 8012c80:	3c01      	subs	r4, #1
 8012c82:	e7c1      	b.n	8012c08 <__kernel_rem_pio2+0x560>
 8012c84:	4602      	mov	r2, r0
 8012c86:	460b      	mov	r3, r1
 8012c88:	e7c6      	b.n	8012c18 <__kernel_rem_pio2+0x570>
 8012c8a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012c8e:	f7ed fafd 	bl	800028c <__adddf3>
 8012c92:	3401      	adds	r4, #1
 8012c94:	e7cb      	b.n	8012c2e <__kernel_rem_pio2+0x586>
 8012c96:	ed95 7b00 	vldr	d7, [r5]
 8012c9a:	ed8d 7b00 	vstr	d7, [sp]
 8012c9e:	ed95 7b02 	vldr	d7, [r5, #8]
 8012ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ca6:	ec53 2b17 	vmov	r2, r3, d7
 8012caa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012cae:	f7ed faed 	bl	800028c <__adddf3>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	460b      	mov	r3, r1
 8012cb6:	4606      	mov	r6, r0
 8012cb8:	460f      	mov	r7, r1
 8012cba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cbe:	f7ed fae3 	bl	8000288 <__aeabi_dsub>
 8012cc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cc6:	f7ed fae1 	bl	800028c <__adddf3>
 8012cca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012cce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8012cd2:	e9c5 6700 	strd	r6, r7, [r5]
 8012cd6:	e76d      	b.n	8012bb4 <__kernel_rem_pio2+0x50c>
 8012cd8:	ed94 7b00 	vldr	d7, [r4]
 8012cdc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012ce0:	ec51 0b17 	vmov	r0, r1, d7
 8012ce4:	4652      	mov	r2, sl
 8012ce6:	465b      	mov	r3, fp
 8012ce8:	ed8d 7b00 	vstr	d7, [sp]
 8012cec:	f7ed face 	bl	800028c <__adddf3>
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	4606      	mov	r6, r0
 8012cf6:	460f      	mov	r7, r1
 8012cf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cfc:	f7ed fac4 	bl	8000288 <__aeabi_dsub>
 8012d00:	4652      	mov	r2, sl
 8012d02:	465b      	mov	r3, fp
 8012d04:	f7ed fac2 	bl	800028c <__adddf3>
 8012d08:	3d01      	subs	r5, #1
 8012d0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012d0e:	e9c4 6700 	strd	r6, r7, [r4]
 8012d12:	e755      	b.n	8012bc0 <__kernel_rem_pio2+0x518>
 8012d14:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d18:	f7ed fab8 	bl	800028c <__adddf3>
 8012d1c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012d20:	e758      	b.n	8012bd4 <__kernel_rem_pio2+0x52c>
 8012d22:	bf00      	nop
 8012d24:	f3af 8000 	nop.w
	...
 8012d30:	41700000 	.word	0x41700000
 8012d34:	3e700000 	.word	0x3e700000
 8012d38:	9b04      	ldr	r3, [sp, #16]
 8012d3a:	9a04      	ldr	r2, [sp, #16]
 8012d3c:	601f      	str	r7, [r3, #0]
 8012d3e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8012d42:	605c      	str	r4, [r3, #4]
 8012d44:	609d      	str	r5, [r3, #8]
 8012d46:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012d4a:	60d3      	str	r3, [r2, #12]
 8012d4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012d50:	6110      	str	r0, [r2, #16]
 8012d52:	6153      	str	r3, [r2, #20]
 8012d54:	e719      	b.n	8012b8a <__kernel_rem_pio2+0x4e2>
 8012d56:	bf00      	nop

08012d58 <__kernel_cos>:
 8012d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d5c:	ec57 6b10 	vmov	r6, r7, d0
 8012d60:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012d64:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012d68:	ed8d 1b00 	vstr	d1, [sp]
 8012d6c:	d206      	bcs.n	8012d7c <__kernel_cos+0x24>
 8012d6e:	4630      	mov	r0, r6
 8012d70:	4639      	mov	r1, r7
 8012d72:	f7ed fef1 	bl	8000b58 <__aeabi_d2iz>
 8012d76:	2800      	cmp	r0, #0
 8012d78:	f000 8088 	beq.w	8012e8c <__kernel_cos+0x134>
 8012d7c:	4632      	mov	r2, r6
 8012d7e:	463b      	mov	r3, r7
 8012d80:	4630      	mov	r0, r6
 8012d82:	4639      	mov	r1, r7
 8012d84:	f7ed fc38 	bl	80005f8 <__aeabi_dmul>
 8012d88:	4b51      	ldr	r3, [pc, #324]	@ (8012ed0 <__kernel_cos+0x178>)
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	4604      	mov	r4, r0
 8012d8e:	460d      	mov	r5, r1
 8012d90:	f7ed fc32 	bl	80005f8 <__aeabi_dmul>
 8012d94:	a340      	add	r3, pc, #256	@ (adr r3, 8012e98 <__kernel_cos+0x140>)
 8012d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d9a:	4682      	mov	sl, r0
 8012d9c:	468b      	mov	fp, r1
 8012d9e:	4620      	mov	r0, r4
 8012da0:	4629      	mov	r1, r5
 8012da2:	f7ed fc29 	bl	80005f8 <__aeabi_dmul>
 8012da6:	a33e      	add	r3, pc, #248	@ (adr r3, 8012ea0 <__kernel_cos+0x148>)
 8012da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dac:	f7ed fa6e 	bl	800028c <__adddf3>
 8012db0:	4622      	mov	r2, r4
 8012db2:	462b      	mov	r3, r5
 8012db4:	f7ed fc20 	bl	80005f8 <__aeabi_dmul>
 8012db8:	a33b      	add	r3, pc, #236	@ (adr r3, 8012ea8 <__kernel_cos+0x150>)
 8012dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbe:	f7ed fa63 	bl	8000288 <__aeabi_dsub>
 8012dc2:	4622      	mov	r2, r4
 8012dc4:	462b      	mov	r3, r5
 8012dc6:	f7ed fc17 	bl	80005f8 <__aeabi_dmul>
 8012dca:	a339      	add	r3, pc, #228	@ (adr r3, 8012eb0 <__kernel_cos+0x158>)
 8012dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd0:	f7ed fa5c 	bl	800028c <__adddf3>
 8012dd4:	4622      	mov	r2, r4
 8012dd6:	462b      	mov	r3, r5
 8012dd8:	f7ed fc0e 	bl	80005f8 <__aeabi_dmul>
 8012ddc:	a336      	add	r3, pc, #216	@ (adr r3, 8012eb8 <__kernel_cos+0x160>)
 8012dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de2:	f7ed fa51 	bl	8000288 <__aeabi_dsub>
 8012de6:	4622      	mov	r2, r4
 8012de8:	462b      	mov	r3, r5
 8012dea:	f7ed fc05 	bl	80005f8 <__aeabi_dmul>
 8012dee:	a334      	add	r3, pc, #208	@ (adr r3, 8012ec0 <__kernel_cos+0x168>)
 8012df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df4:	f7ed fa4a 	bl	800028c <__adddf3>
 8012df8:	4622      	mov	r2, r4
 8012dfa:	462b      	mov	r3, r5
 8012dfc:	f7ed fbfc 	bl	80005f8 <__aeabi_dmul>
 8012e00:	4622      	mov	r2, r4
 8012e02:	462b      	mov	r3, r5
 8012e04:	f7ed fbf8 	bl	80005f8 <__aeabi_dmul>
 8012e08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e0c:	4604      	mov	r4, r0
 8012e0e:	460d      	mov	r5, r1
 8012e10:	4630      	mov	r0, r6
 8012e12:	4639      	mov	r1, r7
 8012e14:	f7ed fbf0 	bl	80005f8 <__aeabi_dmul>
 8012e18:	460b      	mov	r3, r1
 8012e1a:	4602      	mov	r2, r0
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f7ed fa32 	bl	8000288 <__aeabi_dsub>
 8012e24:	4b2b      	ldr	r3, [pc, #172]	@ (8012ed4 <__kernel_cos+0x17c>)
 8012e26:	4598      	cmp	r8, r3
 8012e28:	4606      	mov	r6, r0
 8012e2a:	460f      	mov	r7, r1
 8012e2c:	d810      	bhi.n	8012e50 <__kernel_cos+0xf8>
 8012e2e:	4602      	mov	r2, r0
 8012e30:	460b      	mov	r3, r1
 8012e32:	4650      	mov	r0, sl
 8012e34:	4659      	mov	r1, fp
 8012e36:	f7ed fa27 	bl	8000288 <__aeabi_dsub>
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	4926      	ldr	r1, [pc, #152]	@ (8012ed8 <__kernel_cos+0x180>)
 8012e3e:	4602      	mov	r2, r0
 8012e40:	2000      	movs	r0, #0
 8012e42:	f7ed fa21 	bl	8000288 <__aeabi_dsub>
 8012e46:	ec41 0b10 	vmov	d0, r0, r1
 8012e4a:	b003      	add	sp, #12
 8012e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e50:	4b22      	ldr	r3, [pc, #136]	@ (8012edc <__kernel_cos+0x184>)
 8012e52:	4921      	ldr	r1, [pc, #132]	@ (8012ed8 <__kernel_cos+0x180>)
 8012e54:	4598      	cmp	r8, r3
 8012e56:	bf8c      	ite	hi
 8012e58:	4d21      	ldrhi	r5, [pc, #132]	@ (8012ee0 <__kernel_cos+0x188>)
 8012e5a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012e5e:	2400      	movs	r4, #0
 8012e60:	4622      	mov	r2, r4
 8012e62:	462b      	mov	r3, r5
 8012e64:	2000      	movs	r0, #0
 8012e66:	f7ed fa0f 	bl	8000288 <__aeabi_dsub>
 8012e6a:	4622      	mov	r2, r4
 8012e6c:	4680      	mov	r8, r0
 8012e6e:	4689      	mov	r9, r1
 8012e70:	462b      	mov	r3, r5
 8012e72:	4650      	mov	r0, sl
 8012e74:	4659      	mov	r1, fp
 8012e76:	f7ed fa07 	bl	8000288 <__aeabi_dsub>
 8012e7a:	4632      	mov	r2, r6
 8012e7c:	463b      	mov	r3, r7
 8012e7e:	f7ed fa03 	bl	8000288 <__aeabi_dsub>
 8012e82:	4602      	mov	r2, r0
 8012e84:	460b      	mov	r3, r1
 8012e86:	4640      	mov	r0, r8
 8012e88:	4649      	mov	r1, r9
 8012e8a:	e7da      	b.n	8012e42 <__kernel_cos+0xea>
 8012e8c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012ec8 <__kernel_cos+0x170>
 8012e90:	e7db      	b.n	8012e4a <__kernel_cos+0xf2>
 8012e92:	bf00      	nop
 8012e94:	f3af 8000 	nop.w
 8012e98:	be8838d4 	.word	0xbe8838d4
 8012e9c:	bda8fae9 	.word	0xbda8fae9
 8012ea0:	bdb4b1c4 	.word	0xbdb4b1c4
 8012ea4:	3e21ee9e 	.word	0x3e21ee9e
 8012ea8:	809c52ad 	.word	0x809c52ad
 8012eac:	3e927e4f 	.word	0x3e927e4f
 8012eb0:	19cb1590 	.word	0x19cb1590
 8012eb4:	3efa01a0 	.word	0x3efa01a0
 8012eb8:	16c15177 	.word	0x16c15177
 8012ebc:	3f56c16c 	.word	0x3f56c16c
 8012ec0:	5555554c 	.word	0x5555554c
 8012ec4:	3fa55555 	.word	0x3fa55555
 8012ec8:	00000000 	.word	0x00000000
 8012ecc:	3ff00000 	.word	0x3ff00000
 8012ed0:	3fe00000 	.word	0x3fe00000
 8012ed4:	3fd33332 	.word	0x3fd33332
 8012ed8:	3ff00000 	.word	0x3ff00000
 8012edc:	3fe90000 	.word	0x3fe90000
 8012ee0:	3fd20000 	.word	0x3fd20000
 8012ee4:	00000000 	.word	0x00000000

08012ee8 <__kernel_sin>:
 8012ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eec:	ec55 4b10 	vmov	r4, r5, d0
 8012ef0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012ef4:	b085      	sub	sp, #20
 8012ef6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012efa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012efe:	4680      	mov	r8, r0
 8012f00:	d205      	bcs.n	8012f0e <__kernel_sin+0x26>
 8012f02:	4620      	mov	r0, r4
 8012f04:	4629      	mov	r1, r5
 8012f06:	f7ed fe27 	bl	8000b58 <__aeabi_d2iz>
 8012f0a:	2800      	cmp	r0, #0
 8012f0c:	d052      	beq.n	8012fb4 <__kernel_sin+0xcc>
 8012f0e:	4622      	mov	r2, r4
 8012f10:	462b      	mov	r3, r5
 8012f12:	4620      	mov	r0, r4
 8012f14:	4629      	mov	r1, r5
 8012f16:	f7ed fb6f 	bl	80005f8 <__aeabi_dmul>
 8012f1a:	4682      	mov	sl, r0
 8012f1c:	468b      	mov	fp, r1
 8012f1e:	4602      	mov	r2, r0
 8012f20:	460b      	mov	r3, r1
 8012f22:	4620      	mov	r0, r4
 8012f24:	4629      	mov	r1, r5
 8012f26:	f7ed fb67 	bl	80005f8 <__aeabi_dmul>
 8012f2a:	a342      	add	r3, pc, #264	@ (adr r3, 8013034 <__kernel_sin+0x14c>)
 8012f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f30:	e9cd 0100 	strd	r0, r1, [sp]
 8012f34:	4650      	mov	r0, sl
 8012f36:	4659      	mov	r1, fp
 8012f38:	f7ed fb5e 	bl	80005f8 <__aeabi_dmul>
 8012f3c:	a33f      	add	r3, pc, #252	@ (adr r3, 801303c <__kernel_sin+0x154>)
 8012f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f42:	f7ed f9a1 	bl	8000288 <__aeabi_dsub>
 8012f46:	4652      	mov	r2, sl
 8012f48:	465b      	mov	r3, fp
 8012f4a:	f7ed fb55 	bl	80005f8 <__aeabi_dmul>
 8012f4e:	a33d      	add	r3, pc, #244	@ (adr r3, 8013044 <__kernel_sin+0x15c>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	f7ed f99a 	bl	800028c <__adddf3>
 8012f58:	4652      	mov	r2, sl
 8012f5a:	465b      	mov	r3, fp
 8012f5c:	f7ed fb4c 	bl	80005f8 <__aeabi_dmul>
 8012f60:	a33a      	add	r3, pc, #232	@ (adr r3, 801304c <__kernel_sin+0x164>)
 8012f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f66:	f7ed f98f 	bl	8000288 <__aeabi_dsub>
 8012f6a:	4652      	mov	r2, sl
 8012f6c:	465b      	mov	r3, fp
 8012f6e:	f7ed fb43 	bl	80005f8 <__aeabi_dmul>
 8012f72:	a338      	add	r3, pc, #224	@ (adr r3, 8013054 <__kernel_sin+0x16c>)
 8012f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f78:	f7ed f988 	bl	800028c <__adddf3>
 8012f7c:	4606      	mov	r6, r0
 8012f7e:	460f      	mov	r7, r1
 8012f80:	f1b8 0f00 	cmp.w	r8, #0
 8012f84:	d11b      	bne.n	8012fbe <__kernel_sin+0xd6>
 8012f86:	4602      	mov	r2, r0
 8012f88:	460b      	mov	r3, r1
 8012f8a:	4650      	mov	r0, sl
 8012f8c:	4659      	mov	r1, fp
 8012f8e:	f7ed fb33 	bl	80005f8 <__aeabi_dmul>
 8012f92:	a325      	add	r3, pc, #148	@ (adr r3, 8013028 <__kernel_sin+0x140>)
 8012f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f98:	f7ed f976 	bl	8000288 <__aeabi_dsub>
 8012f9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fa0:	f7ed fb2a 	bl	80005f8 <__aeabi_dmul>
 8012fa4:	4602      	mov	r2, r0
 8012fa6:	460b      	mov	r3, r1
 8012fa8:	4620      	mov	r0, r4
 8012faa:	4629      	mov	r1, r5
 8012fac:	f7ed f96e 	bl	800028c <__adddf3>
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	460d      	mov	r5, r1
 8012fb4:	ec45 4b10 	vmov	d0, r4, r5
 8012fb8:	b005      	add	sp, #20
 8012fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8013030 <__kernel_sin+0x148>)
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	f7ed fb17 	bl	80005f8 <__aeabi_dmul>
 8012fca:	4632      	mov	r2, r6
 8012fcc:	4680      	mov	r8, r0
 8012fce:	4689      	mov	r9, r1
 8012fd0:	463b      	mov	r3, r7
 8012fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fd6:	f7ed fb0f 	bl	80005f8 <__aeabi_dmul>
 8012fda:	4602      	mov	r2, r0
 8012fdc:	460b      	mov	r3, r1
 8012fde:	4640      	mov	r0, r8
 8012fe0:	4649      	mov	r1, r9
 8012fe2:	f7ed f951 	bl	8000288 <__aeabi_dsub>
 8012fe6:	4652      	mov	r2, sl
 8012fe8:	465b      	mov	r3, fp
 8012fea:	f7ed fb05 	bl	80005f8 <__aeabi_dmul>
 8012fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ff2:	f7ed f949 	bl	8000288 <__aeabi_dsub>
 8012ff6:	a30c      	add	r3, pc, #48	@ (adr r3, 8013028 <__kernel_sin+0x140>)
 8012ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffc:	4606      	mov	r6, r0
 8012ffe:	460f      	mov	r7, r1
 8013000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013004:	f7ed faf8 	bl	80005f8 <__aeabi_dmul>
 8013008:	4602      	mov	r2, r0
 801300a:	460b      	mov	r3, r1
 801300c:	4630      	mov	r0, r6
 801300e:	4639      	mov	r1, r7
 8013010:	f7ed f93c 	bl	800028c <__adddf3>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	4620      	mov	r0, r4
 801301a:	4629      	mov	r1, r5
 801301c:	f7ed f934 	bl	8000288 <__aeabi_dsub>
 8013020:	e7c6      	b.n	8012fb0 <__kernel_sin+0xc8>
 8013022:	bf00      	nop
 8013024:	f3af 8000 	nop.w
 8013028:	55555549 	.word	0x55555549
 801302c:	3fc55555 	.word	0x3fc55555
 8013030:	3fe00000 	.word	0x3fe00000
 8013034:	5acfd57c 	.word	0x5acfd57c
 8013038:	3de5d93a 	.word	0x3de5d93a
 801303c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013040:	3e5ae5e6 	.word	0x3e5ae5e6
 8013044:	57b1fe7d 	.word	0x57b1fe7d
 8013048:	3ec71de3 	.word	0x3ec71de3
 801304c:	19c161d5 	.word	0x19c161d5
 8013050:	3f2a01a0 	.word	0x3f2a01a0
 8013054:	1110f8a6 	.word	0x1110f8a6
 8013058:	3f811111 	.word	0x3f811111

0801305c <fabs>:
 801305c:	ec51 0b10 	vmov	r0, r1, d0
 8013060:	4602      	mov	r2, r0
 8013062:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013066:	ec43 2b10 	vmov	d0, r2, r3
 801306a:	4770      	bx	lr
 801306c:	0000      	movs	r0, r0
	...

08013070 <scalbn>:
 8013070:	b570      	push	{r4, r5, r6, lr}
 8013072:	ec55 4b10 	vmov	r4, r5, d0
 8013076:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801307a:	4606      	mov	r6, r0
 801307c:	462b      	mov	r3, r5
 801307e:	b991      	cbnz	r1, 80130a6 <scalbn+0x36>
 8013080:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013084:	4323      	orrs	r3, r4
 8013086:	d03d      	beq.n	8013104 <scalbn+0x94>
 8013088:	4b35      	ldr	r3, [pc, #212]	@ (8013160 <scalbn+0xf0>)
 801308a:	4620      	mov	r0, r4
 801308c:	4629      	mov	r1, r5
 801308e:	2200      	movs	r2, #0
 8013090:	f7ed fab2 	bl	80005f8 <__aeabi_dmul>
 8013094:	4b33      	ldr	r3, [pc, #204]	@ (8013164 <scalbn+0xf4>)
 8013096:	429e      	cmp	r6, r3
 8013098:	4604      	mov	r4, r0
 801309a:	460d      	mov	r5, r1
 801309c:	da0f      	bge.n	80130be <scalbn+0x4e>
 801309e:	a328      	add	r3, pc, #160	@ (adr r3, 8013140 <scalbn+0xd0>)
 80130a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a4:	e01e      	b.n	80130e4 <scalbn+0x74>
 80130a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80130aa:	4291      	cmp	r1, r2
 80130ac:	d10b      	bne.n	80130c6 <scalbn+0x56>
 80130ae:	4622      	mov	r2, r4
 80130b0:	4620      	mov	r0, r4
 80130b2:	4629      	mov	r1, r5
 80130b4:	f7ed f8ea 	bl	800028c <__adddf3>
 80130b8:	4604      	mov	r4, r0
 80130ba:	460d      	mov	r5, r1
 80130bc:	e022      	b.n	8013104 <scalbn+0x94>
 80130be:	460b      	mov	r3, r1
 80130c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80130c4:	3936      	subs	r1, #54	@ 0x36
 80130c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80130ca:	4296      	cmp	r6, r2
 80130cc:	dd0d      	ble.n	80130ea <scalbn+0x7a>
 80130ce:	2d00      	cmp	r5, #0
 80130d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013148 <scalbn+0xd8>)
 80130d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130d6:	da02      	bge.n	80130de <scalbn+0x6e>
 80130d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013150 <scalbn+0xe0>)
 80130da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130de:	a31a      	add	r3, pc, #104	@ (adr r3, 8013148 <scalbn+0xd8>)
 80130e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e4:	f7ed fa88 	bl	80005f8 <__aeabi_dmul>
 80130e8:	e7e6      	b.n	80130b8 <scalbn+0x48>
 80130ea:	1872      	adds	r2, r6, r1
 80130ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80130f0:	428a      	cmp	r2, r1
 80130f2:	dcec      	bgt.n	80130ce <scalbn+0x5e>
 80130f4:	2a00      	cmp	r2, #0
 80130f6:	dd08      	ble.n	801310a <scalbn+0x9a>
 80130f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80130fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013100:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013104:	ec45 4b10 	vmov	d0, r4, r5
 8013108:	bd70      	pop	{r4, r5, r6, pc}
 801310a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801310e:	da08      	bge.n	8013122 <scalbn+0xb2>
 8013110:	2d00      	cmp	r5, #0
 8013112:	a10b      	add	r1, pc, #44	@ (adr r1, 8013140 <scalbn+0xd0>)
 8013114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013118:	dac1      	bge.n	801309e <scalbn+0x2e>
 801311a:	a10f      	add	r1, pc, #60	@ (adr r1, 8013158 <scalbn+0xe8>)
 801311c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013120:	e7bd      	b.n	801309e <scalbn+0x2e>
 8013122:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013126:	3236      	adds	r2, #54	@ 0x36
 8013128:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801312c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013130:	4620      	mov	r0, r4
 8013132:	4b0d      	ldr	r3, [pc, #52]	@ (8013168 <scalbn+0xf8>)
 8013134:	4629      	mov	r1, r5
 8013136:	2200      	movs	r2, #0
 8013138:	e7d4      	b.n	80130e4 <scalbn+0x74>
 801313a:	bf00      	nop
 801313c:	f3af 8000 	nop.w
 8013140:	c2f8f359 	.word	0xc2f8f359
 8013144:	01a56e1f 	.word	0x01a56e1f
 8013148:	8800759c 	.word	0x8800759c
 801314c:	7e37e43c 	.word	0x7e37e43c
 8013150:	8800759c 	.word	0x8800759c
 8013154:	fe37e43c 	.word	0xfe37e43c
 8013158:	c2f8f359 	.word	0xc2f8f359
 801315c:	81a56e1f 	.word	0x81a56e1f
 8013160:	43500000 	.word	0x43500000
 8013164:	ffff3cb0 	.word	0xffff3cb0
 8013168:	3c900000 	.word	0x3c900000
 801316c:	00000000 	.word	0x00000000

08013170 <floor>:
 8013170:	ec51 0b10 	vmov	r0, r1, d0
 8013174:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801317c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013180:	2e13      	cmp	r6, #19
 8013182:	460c      	mov	r4, r1
 8013184:	4605      	mov	r5, r0
 8013186:	4680      	mov	r8, r0
 8013188:	dc34      	bgt.n	80131f4 <floor+0x84>
 801318a:	2e00      	cmp	r6, #0
 801318c:	da17      	bge.n	80131be <floor+0x4e>
 801318e:	a332      	add	r3, pc, #200	@ (adr r3, 8013258 <floor+0xe8>)
 8013190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013194:	f7ed f87a 	bl	800028c <__adddf3>
 8013198:	2200      	movs	r2, #0
 801319a:	2300      	movs	r3, #0
 801319c:	f7ed fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 80131a0:	b150      	cbz	r0, 80131b8 <floor+0x48>
 80131a2:	2c00      	cmp	r4, #0
 80131a4:	da55      	bge.n	8013252 <floor+0xe2>
 80131a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80131aa:	432c      	orrs	r4, r5
 80131ac:	2500      	movs	r5, #0
 80131ae:	42ac      	cmp	r4, r5
 80131b0:	4c2b      	ldr	r4, [pc, #172]	@ (8013260 <floor+0xf0>)
 80131b2:	bf08      	it	eq
 80131b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80131b8:	4621      	mov	r1, r4
 80131ba:	4628      	mov	r0, r5
 80131bc:	e023      	b.n	8013206 <floor+0x96>
 80131be:	4f29      	ldr	r7, [pc, #164]	@ (8013264 <floor+0xf4>)
 80131c0:	4137      	asrs	r7, r6
 80131c2:	ea01 0307 	and.w	r3, r1, r7
 80131c6:	4303      	orrs	r3, r0
 80131c8:	d01d      	beq.n	8013206 <floor+0x96>
 80131ca:	a323      	add	r3, pc, #140	@ (adr r3, 8013258 <floor+0xe8>)
 80131cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d0:	f7ed f85c 	bl	800028c <__adddf3>
 80131d4:	2200      	movs	r2, #0
 80131d6:	2300      	movs	r3, #0
 80131d8:	f7ed fc9e 	bl	8000b18 <__aeabi_dcmpgt>
 80131dc:	2800      	cmp	r0, #0
 80131de:	d0eb      	beq.n	80131b8 <floor+0x48>
 80131e0:	2c00      	cmp	r4, #0
 80131e2:	bfbe      	ittt	lt
 80131e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80131e8:	4133      	asrlt	r3, r6
 80131ea:	18e4      	addlt	r4, r4, r3
 80131ec:	ea24 0407 	bic.w	r4, r4, r7
 80131f0:	2500      	movs	r5, #0
 80131f2:	e7e1      	b.n	80131b8 <floor+0x48>
 80131f4:	2e33      	cmp	r6, #51	@ 0x33
 80131f6:	dd0a      	ble.n	801320e <floor+0x9e>
 80131f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80131fc:	d103      	bne.n	8013206 <floor+0x96>
 80131fe:	4602      	mov	r2, r0
 8013200:	460b      	mov	r3, r1
 8013202:	f7ed f843 	bl	800028c <__adddf3>
 8013206:	ec41 0b10 	vmov	d0, r0, r1
 801320a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801320e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013212:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013216:	40df      	lsrs	r7, r3
 8013218:	4207      	tst	r7, r0
 801321a:	d0f4      	beq.n	8013206 <floor+0x96>
 801321c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013258 <floor+0xe8>)
 801321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013222:	f7ed f833 	bl	800028c <__adddf3>
 8013226:	2200      	movs	r2, #0
 8013228:	2300      	movs	r3, #0
 801322a:	f7ed fc75 	bl	8000b18 <__aeabi_dcmpgt>
 801322e:	2800      	cmp	r0, #0
 8013230:	d0c2      	beq.n	80131b8 <floor+0x48>
 8013232:	2c00      	cmp	r4, #0
 8013234:	da0a      	bge.n	801324c <floor+0xdc>
 8013236:	2e14      	cmp	r6, #20
 8013238:	d101      	bne.n	801323e <floor+0xce>
 801323a:	3401      	adds	r4, #1
 801323c:	e006      	b.n	801324c <floor+0xdc>
 801323e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013242:	2301      	movs	r3, #1
 8013244:	40b3      	lsls	r3, r6
 8013246:	441d      	add	r5, r3
 8013248:	4545      	cmp	r5, r8
 801324a:	d3f6      	bcc.n	801323a <floor+0xca>
 801324c:	ea25 0507 	bic.w	r5, r5, r7
 8013250:	e7b2      	b.n	80131b8 <floor+0x48>
 8013252:	2500      	movs	r5, #0
 8013254:	462c      	mov	r4, r5
 8013256:	e7af      	b.n	80131b8 <floor+0x48>
 8013258:	8800759c 	.word	0x8800759c
 801325c:	7e37e43c 	.word	0x7e37e43c
 8013260:	bff00000 	.word	0xbff00000
 8013264:	000fffff 	.word	0x000fffff

08013268 <_init>:
 8013268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801326a:	bf00      	nop
 801326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801326e:	bc08      	pop	{r3}
 8013270:	469e      	mov	lr, r3
 8013272:	4770      	bx	lr

08013274 <_fini>:
 8013274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013276:	bf00      	nop
 8013278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801327a:	bc08      	pop	{r3}
 801327c:	469e      	mov	lr, r3
 801327e:	4770      	bx	lr
