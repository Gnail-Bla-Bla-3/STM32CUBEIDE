
HeroShooter2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800dfcc  0800dfcc  0000efcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e134  0800e134  0001007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e134  0800e134  0000f134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e13c  0800e13c  0001007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e13c  0800e13c  0000f13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e140  0800e140  0000f140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800e144  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001007c  2**0
                  CONTENTS
 10 .bss          00005734  2000007c  2000007c  0001007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200057b0  200057b0  0001007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c72  00000000  00000000  000100ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054d3  00000000  00000000  00035d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  0003b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001814  00000000  00000000  0003d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261e3  00000000  00000000  0003e8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d5c  00000000  00000000  00064ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0f80  00000000  00000000  0008a813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016b793  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000874c  00000000  00000000  0016b7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00173f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dfb4 	.word	0x0800dfb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800dfb4 	.word	0x0800dfb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <BMI088_ACCEL_NS_L+0x18>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <BMI088_ACCEL_NS_L+0x1c>)
 8000da6:	8811      	ldrh	r1, [r2, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 fcfa 	bl	80067a4 <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000004 	.word	0x20000004

08000dbc <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <BMI088_ACCEL_NS_H+0x18>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <BMI088_ACCEL_NS_H+0x1c>)
 8000dc6:	8811      	ldrh	r1, [r2, #0]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f005 fcea 	bl	80067a4 <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000004 	.word	0x20000004

08000ddc <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <BMI088_GYRO_NS_L+0x18>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <BMI088_GYRO_NS_L+0x1c>)
 8000de6:	8811      	ldrh	r1, [r2, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 fcda 	bl	80067a4 <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000008 	.word	0x20000008
 8000df8:	2000000c 	.word	0x2000000c

08000dfc <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <BMI088_GYRO_NS_H+0x18>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <BMI088_GYRO_NS_H+0x1c>)
 8000e06:	8811      	ldrh	r1, [r2, #0]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fcca 	bl	80067a4 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000008 	.word	0x20000008
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000e26:	f107 020f 	add.w	r2, r7, #15
 8000e2a:	1df9      	adds	r1, r7, #7
 8000e2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2301      	movs	r3, #1
 8000e34:	4803      	ldr	r0, [pc, #12]	@ (8000e44 <BMI088_read_write_byte+0x28>)
 8000e36:	f006 ffdd 	bl	8007df4 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000774 	.word	0x20000774

08000e48 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000e4c:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <IMU_get_temp+0x1c>)
 8000e4e:	4906      	ldr	r1, [pc, #24]	@ (8000e68 <IMU_get_temp+0x20>)
 8000e50:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <IMU_get_temp+0x24>)
 8000e52:	f000 f80d 	bl	8000e70 <BMI088_read>
	return temp;
 8000e56:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <IMU_get_temp+0x1c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	ee07 3a90 	vmov	s15, r3
}
 8000e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000b0 	.word	0x200000b0
 8000e68:	200000a4 	.word	0x200000a4
 8000e6c:	20000098 	.word	0x20000098

08000e70 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000e7c:	4a70      	ldr	r2, [pc, #448]	@ (8001040 <BMI088_read+0x1d0>)
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e86:	6018      	str	r0, [r3, #0]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	8019      	strh	r1, [r3, #0]
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	0c0a      	lsrs	r2, r1, #16
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	2300      	movs	r3, #0
 8000e94:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8000e96:	f7ff ff81 	bl	8000d9c <BMI088_ACCEL_NS_L>
 8000e9a:	2092      	movs	r0, #146	@ 0x92
 8000e9c:	f7ff ffbe 	bl	8000e1c <BMI088_read_write_byte>
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2206      	movs	r2, #6
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2012      	movs	r0, #18
 8000eaa:	f000 f8cf 	bl	800104c <BMI088_read_muli_reg>
 8000eae:	f7ff ff85 	bl	8000dbc <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000eb2:	7d7b      	ldrb	r3, [r7, #21]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	7d3b      	ldrb	r3, [r7, #20]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000ec0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ec4:	ee07 3a90 	vmov	s15, r3
 8000ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ecc:	4b5d      	ldr	r3, [pc, #372]	@ (8001044 <BMI088_read+0x1d4>)
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	7dbb      	ldrb	r3, [r7, #22]
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000eea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef6:	4b53      	ldr	r3, [pc, #332]	@ (8001044 <BMI088_read+0x1d4>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3304      	adds	r3, #4
 8000f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f04:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000f08:	7e7b      	ldrb	r3, [r7, #25]
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	7e3b      	ldrb	r3, [r7, #24]
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000f16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f22:	4b48      	ldr	r3, [pc, #288]	@ (8001044 <BMI088_read+0x1d4>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f30:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000f34:	f7ff ff52 	bl	8000ddc <BMI088_GYRO_NS_L>
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 f883 	bl	800104c <BMI088_read_muli_reg>
 8000f46:	f7ff ff59 	bl	8000dfc <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000f4a:	7d3b      	ldrb	r3, [r7, #20]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d140      	bne.n	8000fd2 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	7dbb      	ldrb	r3, [r7, #22]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000f5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6a:	4b37      	ldr	r3, [pc, #220]	@ (8001048 <BMI088_read+0x1d8>)
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000f7a:	7e7b      	ldrb	r3, [r7, #25]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	7e3b      	ldrb	r3, [r7, #24]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000f88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <BMI088_read+0x1d8>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa2:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8000fa6:	7efb      	ldrb	r3, [r7, #27]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	7ebb      	ldrb	r3, [r7, #26]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000fb4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc0:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <BMI088_read+0x1d8>)
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3308      	adds	r3, #8
 8000fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fce:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8000fd2:	f7ff fee3 	bl	8000d9c <BMI088_ACCEL_NS_L>
 8000fd6:	20a2      	movs	r0, #162	@ 0xa2
 8000fd8:	f7ff ff20 	bl	8000e1c <BMI088_read_write_byte>
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2022      	movs	r0, #34	@ 0x22
 8000fe6:	f000 f831 	bl	800104c <BMI088_read_muli_reg>
 8000fea:	f7ff fee7 	bl	8000dbc <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8000fee:	7d3b      	ldrb	r3, [r7, #20]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	7d7b      	ldrb	r3, [r7, #21]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001000:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001008:	db04      	blt.n	8001014 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 800100a:	8bfb      	ldrh	r3, [r7, #30]
 800100c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001010:	b29b      	uxth	r3, r3
 8001012:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001014:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001020:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001028:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 800102c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	edc3 7a00 	vstr	s15, [r3]
}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800dfcc 	.word	0x0800dfcc
 8001044:	20000010 	.word	0x20000010
 8001048:	20000014 	.word	0x20000014

0800104c <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fed9 	bl	8000e1c <BMI088_read_write_byte>

    while (len != 0)
 800106a:	e00c      	b.n	8001086 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 800106c:	2055      	movs	r0, #85	@ 0x55
 800106e:	f7ff fed5 	bl	8000e1c <BMI088_read_write_byte>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	701a      	strb	r2, [r3, #0]
        buf++;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	603b      	str	r3, [r7, #0]
        len--;
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	3b01      	subs	r3, #1
 8001084:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ef      	bne.n	800106c <BMI088_read_muli_reg+0x20>
    }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	@ 0x30
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	f107 0210 	add.w	r2, r7, #16
 80010a8:	2100      	movs	r1, #0
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f004 f963 	bl	8005376 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80010b6:	d813      	bhi.n	80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 80010b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010bc:	f240 809c 	bls.w	80011f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 80010c0:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	f200 8097 	bhi.w	80011f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 80010ca:	a201      	add	r2, pc, #4	@ (adr r2, 80010d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080011d5 	.word	0x080011d5
 80010d4:	080011e7 	.word	0x080011e7
 80010d8:	080011f9 	.word	0x080011f9
 80010dc:	080011f9 	.word	0x080011f9
 80010e0:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80010e4:	2b0a      	cmp	r3, #10
 80010e6:	f200 8087 	bhi.w	80011f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a44      	ldr	r2, [pc, #272]	@ (8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d131      	bne.n	8001160 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 80010fc:	7a3b      	ldrb	r3, [r7, #8]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	7a7b      	ldrb	r3, [r7, #9]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800110e:	b291      	uxth	r1, r2
 8001110:	4a3e      	ldr	r2, [pc, #248]	@ (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001112:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001116:	7abb      	ldrb	r3, [r7, #10]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b219      	sxth	r1, r3
 800111c:	7afb      	ldrb	r3, [r7, #11]
 800111e:	b21a      	sxth	r2, r3
 8001120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001124:	430a      	orrs	r2, r1
 8001126:	b211      	sxth	r1, r2
 8001128:	4a38      	ldr	r2, [pc, #224]	@ (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	460a      	mov	r2, r1
 8001130:	805a      	strh	r2, [r3, #2]
 8001132:	7b3b      	ldrb	r3, [r7, #12]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b219      	sxth	r1, r3
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	b21a      	sxth	r2, r3
 800113c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001140:	430a      	orrs	r2, r1
 8001142:	b211      	sxth	r1, r2
 8001144:	4a31      	ldr	r2, [pc, #196]	@ (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4413      	add	r3, r2
 800114a:	460a      	mov	r2, r1
 800114c:	809a      	strh	r2, [r3, #4]
 800114e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001152:	7bb9      	ldrb	r1, [r7, #14]
 8001154:	4a2d      	ldr	r2, [pc, #180]	@ (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	460a      	mov	r2, r1
 800115c:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 800115e:	e04d      	b.n	80011fc <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
            } else if (hcan == &hcan2) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a2b      	ldr	r2, [pc, #172]	@ (8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d149      	bne.n	80011fc <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8001168:	7a3b      	ldrb	r3, [r7, #8]
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21a      	sxth	r2, r3
 800116e:	7a7b      	ldrb	r3, [r7, #9]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21a      	sxth	r2, r3
 8001176:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800117a:	b291      	uxth	r1, r2
 800117c:	4a23      	ldr	r2, [pc, #140]	@ (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800117e:	330b      	adds	r3, #11
 8001180:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001184:	7abb      	ldrb	r3, [r7, #10]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b219      	sxth	r1, r3
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	b21a      	sxth	r2, r3
 800118e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001192:	430a      	orrs	r2, r1
 8001194:	b211      	sxth	r1, r2
 8001196:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001198:	330b      	adds	r3, #11
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	460a      	mov	r2, r1
 80011a0:	805a      	strh	r2, [r3, #2]
 80011a2:	7b3b      	ldrb	r3, [r7, #12]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b219      	sxth	r1, r3
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011b0:	430a      	orrs	r2, r1
 80011b2:	b211      	sxth	r1, r2
 80011b4:	4a15      	ldr	r2, [pc, #84]	@ (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80011b6:	330b      	adds	r3, #11
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4413      	add	r3, r2
 80011bc:	460a      	mov	r2, r1
 80011be:	809a      	strh	r2, [r3, #4]
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c4:	7bb9      	ldrb	r1, [r7, #14]
 80011c6:	4a11      	ldr	r2, [pc, #68]	@ (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80011c8:	330b      	adds	r3, #11
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	460a      	mov	r2, r1
 80011d0:	719a      	strb	r2, [r3, #6]
            break;
 80011d2:	e013      	b.n	80011fc <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011d6:	461a      	mov	r2, r3
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011e0:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 80011e4:	e00b      	b.n	80011fe <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011e8:	3308      	adds	r3, #8
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80011f6:	e002      	b.n	80011fe <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 80011f8:	bf00      	nop
 80011fa:	e000      	b.n	80011fe <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            break;
 80011fc:	bf00      	nop
        }
    }
}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	@ 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200006d0 	.word	0x200006d0
 800120c:	2000012c 	.word	0x2000012c
 8001210:	200006f8 	.word	0x200006f8
 8001214:	2000053c 	.word	0x2000053c

08001218 <otherSignals>:
/*
uint64_t allRCShove() {
	return 0;
}
*/
uint64_t otherSignals(uint16_t data1, int8_t switch1, int8_t switch2) {
 8001218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800121c:	b090      	sub	sp, #64	@ 0x40
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	81fb      	strh	r3, [r7, #14]
 8001224:	460b      	mov	r3, r1
 8001226:	737b      	strb	r3, [r7, #13]
 8001228:	4613      	mov	r3, r2
 800122a:	733b      	strb	r3, [r7, #12]
	uint64_t temp2[4] = {0, 0, 0, 0};
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2220      	movs	r2, #32
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00c f9e7 	bl	800d608 <memset>
	temp2[0] = (uint64_t)data1 << 48;
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	2200      	movs	r2, #0
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	040b      	lsls	r3, r1, #16
 800124e:	2200      	movs	r2, #0
 8001250:	e9c7 2304 	strd	r2, r3, [r7, #16]
	temp2[1] = (uint64_t)switch1 << 32;
 8001254:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001258:	17da      	asrs	r2, r3, #31
 800125a:	469a      	mov	sl, r3
 800125c:	4693      	mov	fp, r2
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	4653      	mov	r3, sl
 8001268:	2200      	movs	r2, #0
 800126a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	temp2[2] = (uint64_t)switch2 << 16;
 800126e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001272:	17da      	asrs	r2, r3, #31
 8001274:	461c      	mov	r4, r3
 8001276:	4615      	mov	r5, r2
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	042b      	lsls	r3, r5, #16
 8001282:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001286:	0422      	lsls	r2, r4, #16
 8001288:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp2[3] = 0;
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	uint64_t final = 0;;
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	for (int8_t i = 0; i < 4; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80012aa:	e018      	b.n	80012de <otherSignals+0xc6>
		final = final + temp2[i];
 80012ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	3338      	adds	r3, #56	@ 0x38
 80012b4:	f107 0208 	add.w	r2, r7, #8
 80012b8:	4413      	add	r3, r2
 80012ba:	3b30      	subs	r3, #48	@ 0x30
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80012c4:	eb10 0802 	adds.w	r8, r0, r2
 80012c8:	eb41 0903 	adc.w	r9, r1, r3
 80012cc:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	for (int8_t i = 0; i < 4; i++) {
 80012d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80012de:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	dde2      	ble.n	80012ac <otherSignals+0x94>
	}
	return final;
 80012e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
}
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	3740      	adds	r7, #64	@ 0x40
 80012f0:	46bd      	mov	sp, r7
 80012f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012f6 <fourBitShift>:

uint64_t fourBitShift(uint16_t data1, uint16_t data2, uint16_t data3, uint16_t data4) {
 80012f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012fa:	b095      	sub	sp, #84	@ 0x54
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4616      	mov	r6, r2
 8001300:	461a      	mov	r2, r3
 8001302:	4603      	mov	r3, r0
 8001304:	83fb      	strh	r3, [r7, #30]
 8001306:	460b      	mov	r3, r1
 8001308:	83bb      	strh	r3, [r7, #28]
 800130a:	4633      	mov	r3, r6
 800130c:	837b      	strh	r3, [r7, #26]
 800130e:	4613      	mov	r3, r2
 8001310:	833b      	strh	r3, [r7, #24]
	uint64_t temp1[4] = {0, 0, 0, 0};
 8001312:	f107 0020 	add.w	r0, r7, #32
 8001316:	2320      	movs	r3, #32
 8001318:	461a      	mov	r2, r3
 800131a:	2100      	movs	r1, #0
 800131c:	f00c f974 	bl	800d608 <memset>
	temp1[0] = (uint64_t)data1 << 48;
 8001320:	8bfb      	ldrh	r3, [r7, #30]
 8001322:	2200      	movs	r2, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	617a      	str	r2, [r7, #20]
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	6939      	ldr	r1, [r7, #16]
 8001332:	040b      	lsls	r3, r1, #16
 8001334:	2200      	movs	r2, #0
 8001336:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp1[1] = (uint64_t)data2 << 32;
 800133a:	8bbb      	ldrh	r3, [r7, #28]
 800133c:	2200      	movs	r2, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	60fa      	str	r2, [r7, #12]
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	000b      	movs	r3, r1
 800134e:	2200      	movs	r2, #0
 8001350:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	temp1[2] = (uint64_t)data3 << 16;
 8001354:	8b7b      	ldrh	r3, [r7, #26]
 8001356:	2200      	movs	r2, #0
 8001358:	461c      	mov	r4, r3
 800135a:	4615      	mov	r5, r2
 800135c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8001360:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8001364:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
	temp1[3] = (uint64_t)data4;
 8001368:	8b3b      	ldrh	r3, [r7, #24]
 800136a:	2200      	movs	r2, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001374:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38
	uint64_t final = 0;;
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	for (int8_t i = 0; i < 4; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800138a:	e018      	b.n	80013be <fourBitShift+0xc8>
		final = final + temp1[i];
 800138c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	3338      	adds	r3, #56	@ 0x38
 8001394:	f107 0218 	add.w	r2, r7, #24
 8001398:	4413      	add	r3, r2
 800139a:	3b30      	subs	r3, #48	@ 0x30
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80013a4:	eb10 0802 	adds.w	r8, r0, r2
 80013a8:	eb41 0903 	adc.w	r9, r1, r3
 80013ac:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
	for (int8_t i = 0; i < 4; i++) {
 80013b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80013be:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	dde2      	ble.n	800138c <fourBitShift+0x96>
	}
	return final;
 80013c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
}
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	3754      	adds	r7, #84	@ 0x54
 80013d0:	46bd      	mov	sp, r7
 80013d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080013d8 <CAN_transmit>:

// sends a single uint64_t int, can use fourBitShift to send 4 uint16_t integers"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint64_t data) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	e9c7 2300 	strd	r2, r3, [r7]
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	460b      	mov	r3, r1
 80013e8:	81bb      	strh	r3, [r7, #12]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 80013ea:	89bb      	ldrh	r3, [r7, #12]
 80013ec:	4a15      	ldr	r2, [pc, #84]	@ (8001444 <CAN_transmit+0x6c>)
 80013ee:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <CAN_transmit+0x6c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <CAN_transmit+0x6c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <CAN_transmit+0x6c>)
 80013fe:	2208      	movs	r2, #8
 8001400:	611a      	str	r2, [r3, #16]
    memcpy(&b2b_can_send_data[0], &data, 8);
 8001402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <CAN_transmit+0x70>)
 8001408:	4602      	mov	r2, r0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	460a      	mov	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
    if (bus == 1) {
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d107      	bne.n	8001426 <CAN_transmit+0x4e>
    	HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, b2b_can_send_data, &send_mail_box);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <CAN_transmit+0x70>)
 800141c:	4909      	ldr	r1, [pc, #36]	@ (8001444 <CAN_transmit+0x6c>)
 800141e:	480b      	ldr	r0, [pc, #44]	@ (800144c <CAN_transmit+0x74>)
 8001420:	f003 fece 	bl	80051c0 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, b2b_can_send_data, &send_mail_box);
    }
}
 8001424:	e009      	b.n	800143a <CAN_transmit+0x62>
    } else if (bus == 2) {
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d106      	bne.n	800143a <CAN_transmit+0x62>
    	HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, b2b_can_send_data, &send_mail_box);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <CAN_transmit+0x70>)
 8001432:	4904      	ldr	r1, [pc, #16]	@ (8001444 <CAN_transmit+0x6c>)
 8001434:	4806      	ldr	r0, [pc, #24]	@ (8001450 <CAN_transmit+0x78>)
 8001436:	f003 fec3 	bl	80051c0 <HAL_CAN_AddTxMessage>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200000b4 	.word	0x200000b4
 8001448:	200000cc 	.word	0x200000cc
 800144c:	200006d0 	.word	0x200006d0
 8001450:	200006f8 	.word	0x200006f8

08001454 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4623      	mov	r3, r4
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	4603      	mov	r3, r0
 8001468:	80bb      	strh	r3, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	4a27      	ldr	r2, [pc, #156]	@ (8001514 <CAN_DriveMotor+0xc0>)
 8001476:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8001478:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <CAN_DriveMotor+0xc0>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 800147e:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <CAN_DriveMotor+0xc0>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <CAN_DriveMotor+0xc0>)
 8001486:	2208      	movs	r2, #8
 8001488:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 800148a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800148e:	121b      	asrs	r3, r3, #8
 8001490:	b21b      	sxth	r3, r3
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <CAN_DriveMotor+0xc4>)
 8001496:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <CAN_DriveMotor+0xc4>)
 800149e:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 80014a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014a4:	121b      	asrs	r3, r3, #8
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <CAN_DriveMotor+0xc4>)
 80014ac:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 80014ae:	883b      	ldrh	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <CAN_DriveMotor+0xc4>)
 80014b4:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 80014b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014ba:	121b      	asrs	r3, r3, #8
 80014bc:	b21b      	sxth	r3, r3
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <CAN_DriveMotor+0xc4>)
 80014c2:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 80014c4:	8c3b      	ldrh	r3, [r7, #32]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <CAN_DriveMotor+0xc4>)
 80014ca:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 80014cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014d0:	121b      	asrs	r3, r3, #8
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <CAN_DriveMotor+0xc4>)
 80014d8:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 80014da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <CAN_DriveMotor+0xc4>)
 80014e0:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <CAN_DriveMotor+0xc4>)
 80014ee:	4909      	ldr	r1, [pc, #36]	@ (8001514 <CAN_DriveMotor+0xc0>)
 80014f0:	480a      	ldr	r0, [pc, #40]	@ (800151c <CAN_DriveMotor+0xc8>)
 80014f2:	f003 fe65 	bl	80051c0 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 80014f6:	e009      	b.n	800150c <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d106      	bne.n	800150c <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <CAN_DriveMotor+0xc4>)
 8001504:	4903      	ldr	r1, [pc, #12]	@ (8001514 <CAN_DriveMotor+0xc0>)
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <CAN_DriveMotor+0xcc>)
 8001508:	f003 fe5a 	bl	80051c0 <HAL_CAN_AddTxMessage>
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	200000dc 	.word	0x200000dc
 8001518:	200000f4 	.word	0x200000f4
 800151c:	200006d0 	.word	0x200006d0
 8001520:	200006f8 	.word	0x200006f8

08001524 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af02      	add	r7, sp, #8
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	71fb      	strb	r3, [r7, #7]
 8001536:	4603      	mov	r3, r0
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	460b      	mov	r3, r1
 800153c:	717b      	strb	r3, [r7, #5]
 800153e:	4613      	mov	r3, r2
 8001540:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	2b04      	cmp	r3, #4
 8001546:	f000 8142 	beq.w	80017ce <CAN_setMotorCtrlVal+0x2aa>
 800154a:	2b04      	cmp	r3, #4
 800154c:	f300 81e1 	bgt.w	8001912 <CAN_setMotorCtrlVal+0x3ee>
 8001550:	2b02      	cmp	r3, #2
 8001552:	dc02      	bgt.n	800155a <CAN_setMotorCtrlVal+0x36>
 8001554:	2b00      	cmp	r3, #0
 8001556:	dc04      	bgt.n	8001562 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8001558:	e1db      	b.n	8001912 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 800155a:	2b03      	cmp	r3, #3
 800155c:	f000 8097 	beq.w	800168e <CAN_setMotorCtrlVal+0x16a>
}
 8001560:	e1d7      	b.n	8001912 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001562:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001566:	2b04      	cmp	r3, #4
 8001568:	dc02      	bgt.n	8001570 <CAN_setMotorCtrlVal+0x4c>
 800156a:	2b00      	cmp	r3, #0
 800156c:	dc05      	bgt.n	800157a <CAN_setMotorCtrlVal+0x56>
					break;
 800156e:	e08c      	b.n	800168a <CAN_setMotorCtrlVal+0x166>
 8001570:	3b05      	subs	r3, #5
 8001572:	2b03      	cmp	r3, #3
 8001574:	f200 8089 	bhi.w	800168a <CAN_setMotorCtrlVal+0x166>
 8001578:	e042      	b.n	8001600 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001582:	1e59      	subs	r1, r3, #1
 8001584:	48bd      	ldr	r0, [pc, #756]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	887a      	ldrh	r2, [r7, #2]
 8001592:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	1e5a      	subs	r2, r3, #1
 800159a:	49b8      	ldr	r1, [pc, #736]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	1e5a      	subs	r2, r3, #1
 80015ae:	49b3      	ldr	r1, [pc, #716]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	3302      	adds	r3, #2
 80015bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	49ad      	ldr	r1, [pc, #692]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	440b      	add	r3, r1
 80015d0:	3304      	adds	r3, #4
 80015d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	48a8      	ldr	r0, [pc, #672]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4403      	add	r3, r0
 80015e6:	3306      	adds	r3, #6
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	79f8      	ldrb	r0, [r7, #7]
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	9100      	str	r1, [sp, #0]
 80015f2:	462b      	mov	r3, r5
 80015f4:	4622      	mov	r2, r4
 80015f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015fa:	f7ff ff2b 	bl	8001454 <CAN_DriveMotor>
					break;
 80015fe:	e045      	b.n	800168c <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	1e5a      	subs	r2, r3, #1
 8001604:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001608:	1f59      	subs	r1, r3, #5
 800160a:	489c      	ldr	r0, [pc, #624]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	3304      	adds	r3, #4
 8001618:	887a      	ldrh	r2, [r7, #2]
 800161a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	4996      	ldr	r1, [pc, #600]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	3308      	adds	r3, #8
 8001630:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	1e5a      	subs	r2, r3, #1
 8001638:	4990      	ldr	r1, [pc, #576]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	330a      	adds	r3, #10
 8001646:	f9b3 5000 	ldrsh.w	r5, [r3]
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	1e5a      	subs	r2, r3, #1
 800164e:	498b      	ldr	r1, [pc, #556]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	330c      	adds	r3, #12
 800165c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	4885      	ldr	r0, [pc, #532]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4403      	add	r3, r0
 8001670:	330e      	adds	r3, #14
 8001672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001676:	79f8      	ldrb	r0, [r7, #7]
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	9100      	str	r1, [sp, #0]
 800167c:	462b      	mov	r3, r5
 800167e:	4622      	mov	r2, r4
 8001680:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001684:	f7ff fee6 	bl	8001454 <CAN_DriveMotor>
					break;
 8001688:	e000      	b.n	800168c <CAN_setMotorCtrlVal+0x168>
					break;
 800168a:	bf00      	nop
			break;
 800168c:	e141      	b.n	8001912 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 800168e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001692:	2b08      	cmp	r3, #8
 8001694:	f000 8097 	beq.w	80017c6 <CAN_setMotorCtrlVal+0x2a2>
 8001698:	2b08      	cmp	r3, #8
 800169a:	f300 8096 	bgt.w	80017ca <CAN_setMotorCtrlVal+0x2a6>
 800169e:	2b04      	cmp	r3, #4
 80016a0:	dc02      	bgt.n	80016a8 <CAN_setMotorCtrlVal+0x184>
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	dc05      	bgt.n	80016b2 <CAN_setMotorCtrlVal+0x18e>
					break;
 80016a6:	e090      	b.n	80017ca <CAN_setMotorCtrlVal+0x2a6>
 80016a8:	3b05      	subs	r3, #5
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	f200 808d 	bhi.w	80017ca <CAN_setMotorCtrlVal+0x2a6>
 80016b0:	e044      	b.n	800173c <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016ba:	1e59      	subs	r1, r3, #1
 80016bc:	486f      	ldr	r0, [pc, #444]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3304      	adds	r3, #4
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	4969      	ldr	r1, [pc, #420]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3308      	adds	r3, #8
 80016e2:	f9b3 4000 	ldrsh.w	r4, [r3]
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	4964      	ldr	r1, [pc, #400]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	330a      	adds	r3, #10
 80016f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	1e5a      	subs	r2, r3, #1
 8001700:	495e      	ldr	r1, [pc, #376]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	440b      	add	r3, r1
 800170c:	330c      	adds	r3, #12
 800170e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	4859      	ldr	r0, [pc, #356]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4403      	add	r3, r0
 8001722:	330e      	adds	r3, #14
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	79f8      	ldrb	r0, [r7, #7]
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	9100      	str	r1, [sp, #0]
 800172e:	462b      	mov	r3, r5
 8001730:	4622      	mov	r2, r4
 8001732:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001736:	f7ff fe8d 	bl	8001454 <CAN_DriveMotor>
					break;
 800173a:	e047      	b.n	80017cc <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	1e5a      	subs	r2, r3, #1
 8001740:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001744:	1f59      	subs	r1, r3, #5
 8001746:	484d      	ldr	r0, [pc, #308]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3308      	adds	r3, #8
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	4947      	ldr	r1, [pc, #284]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3310      	adds	r3, #16
 800176c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	4941      	ldr	r1, [pc, #260]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	3312      	adds	r3, #18
 8001782:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	1e5a      	subs	r2, r3, #1
 800178a:	493c      	ldr	r1, [pc, #240]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3314      	adds	r3, #20
 8001798:	f9b3 1000 	ldrsh.w	r1, [r3]
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	4836      	ldr	r0, [pc, #216]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4403      	add	r3, r0
 80017ac:	3316      	adds	r3, #22
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b2:	79f8      	ldrb	r0, [r7, #7]
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	9100      	str	r1, [sp, #0]
 80017b8:	462b      	mov	r3, r5
 80017ba:	4622      	mov	r2, r4
 80017bc:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80017c0:	f7ff fe48 	bl	8001454 <CAN_DriveMotor>
					break;
 80017c4:	e002      	b.n	80017cc <CAN_setMotorCtrlVal+0x2a8>
					break;
 80017c6:	bf00      	nop
 80017c8:	e0a3      	b.n	8001912 <CAN_setMotorCtrlVal+0x3ee>
					break;
 80017ca:	bf00      	nop
			break;
 80017cc:	e0a1      	b.n	8001912 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80017ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	f000 8099 	beq.w	800190a <CAN_setMotorCtrlVal+0x3e6>
 80017d8:	2b08      	cmp	r3, #8
 80017da:	f300 8098 	bgt.w	800190e <CAN_setMotorCtrlVal+0x3ea>
 80017de:	2b04      	cmp	r3, #4
 80017e0:	dc02      	bgt.n	80017e8 <CAN_setMotorCtrlVal+0x2c4>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dc05      	bgt.n	80017f2 <CAN_setMotorCtrlVal+0x2ce>
					break;
 80017e6:	e092      	b.n	800190e <CAN_setMotorCtrlVal+0x3ea>
 80017e8:	3b05      	subs	r3, #5
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	f200 808f 	bhi.w	800190e <CAN_setMotorCtrlVal+0x3ea>
 80017f0:	e046      	b.n	8001880 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017fa:	1e59      	subs	r1, r3, #1
 80017fc:	481f      	ldr	r0, [pc, #124]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3304      	adds	r3, #4
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	4919      	ldr	r1, [pc, #100]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3308      	adds	r3, #8
 8001822:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	4914      	ldr	r1, [pc, #80]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	330a      	adds	r3, #10
 8001838:	f9b3 5000 	ldrsh.w	r5, [r3]
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	1e5a      	subs	r2, r3, #1
 8001840:	490e      	ldr	r1, [pc, #56]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	330c      	adds	r3, #12
 800184e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	4809      	ldr	r0, [pc, #36]	@ (800187c <CAN_setMotorCtrlVal+0x358>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4403      	add	r3, r0
 8001862:	330e      	adds	r3, #14
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	79f8      	ldrb	r0, [r7, #7]
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	9100      	str	r1, [sp, #0]
 800186e:	462b      	mov	r3, r5
 8001870:	4622      	mov	r2, r4
 8001872:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001876:	f7ff fded 	bl	8001454 <CAN_DriveMotor>
					break;
 800187a:	e049      	b.n	8001910 <CAN_setMotorCtrlVal+0x3ec>
 800187c:	200000fc 	.word	0x200000fc
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	1e5a      	subs	r2, r3, #1
 8001884:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001888:	1f59      	subs	r1, r3, #5
 800188a:	4824      	ldr	r0, [pc, #144]	@ (800191c <CAN_setMotorCtrlVal+0x3f8>)
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	3308      	adds	r3, #8
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	491e      	ldr	r1, [pc, #120]	@ (800191c <CAN_setMotorCtrlVal+0x3f8>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3310      	adds	r3, #16
 80018b0:	f9b3 4000 	ldrsh.w	r4, [r3]
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	1e5a      	subs	r2, r3, #1
 80018b8:	4918      	ldr	r1, [pc, #96]	@ (800191c <CAN_setMotorCtrlVal+0x3f8>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3312      	adds	r3, #18
 80018c6:	f9b3 5000 	ldrsh.w	r5, [r3]
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	4913      	ldr	r1, [pc, #76]	@ (800191c <CAN_setMotorCtrlVal+0x3f8>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	3314      	adds	r3, #20
 80018dc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	1e5a      	subs	r2, r3, #1
 80018e4:	480d      	ldr	r0, [pc, #52]	@ (800191c <CAN_setMotorCtrlVal+0x3f8>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4403      	add	r3, r0
 80018f0:	3316      	adds	r3, #22
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	79f8      	ldrb	r0, [r7, #7]
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	9100      	str	r1, [sp, #0]
 80018fc:	462b      	mov	r3, r5
 80018fe:	4622      	mov	r2, r4
 8001900:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001904:	f7ff fda6 	bl	8001454 <CAN_DriveMotor>
					break;
 8001908:	e002      	b.n	8001910 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800190a:	bf00      	nop
 800190c:	e000      	b.n	8001910 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800190e:	bf00      	nop
			break;
 8001910:	bf00      	nop
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bdb0      	pop	{r4, r5, r7, pc}
 800191a:	bf00      	nop
 800191c:	200000fc 	.word	0x200000fc

08001920 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b08b      	sub	sp, #44	@ 0x2c
 8001924:	af00      	add	r7, sp, #0
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	eef0 6a40 	vmov.f32	s13, s0
 8001932:	eeb0 7a60 	vmov.f32	s14, s1
 8001936:	eef0 7a41 	vmov.f32	s15, s2
 800193a:	4623      	mov	r3, r4
 800193c:	75fb      	strb	r3, [r7, #23]
 800193e:	4603      	mov	r3, r0
 8001940:	75bb      	strb	r3, [r7, #22]
 8001942:	460b      	mov	r3, r1
 8001944:	757b      	strb	r3, [r7, #21]
 8001946:	4613      	mov	r3, r2
 8001948:	827b      	strh	r3, [r7, #18]
 800194a:	edc7 6a01 	vstr	s13, [r7, #4]
 800194e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001952:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	3b01      	subs	r3, #1
 800195e:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	2b02      	cmp	r3, #2
 8001964:	dc02      	bgt.n	800196c <calcRPM_PID+0x4c>
 8001966:	2b00      	cmp	r3, #0
 8001968:	dc04      	bgt.n	8001974 <calcRPM_PID+0x54>
 800196a:	e00d      	b.n	8001988 <calcRPM_PID+0x68>
 800196c:	3b03      	subs	r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d80a      	bhi.n	8001988 <calcRPM_PID+0x68>
 8001972:	e004      	b.n	800197e <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001974:	7d7b      	ldrb	r3, [r7, #21]
 8001976:	3b01      	subs	r3, #1
 8001978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800197c:	e009      	b.n	8001992 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 800197e:	7d7b      	ldrb	r3, [r7, #21]
 8001980:	3303      	adds	r3, #3
 8001982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001986:	e004      	b.n	8001992 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 8001988:	7d7b      	ldrb	r3, [r7, #21]
 800198a:	3b01      	subs	r3, #1
 800198c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001990:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001992:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001996:	7ffa      	ldrb	r2, [r7, #31]
 8001998:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800199c:	4c70      	ldr	r4, [pc, #448]	@ (8001b60 <calcRPM_PID+0x240>)
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	4403      	add	r3, r0
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4423      	add	r3, r4
 80019ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b2:	7ffa      	ldrb	r2, [r7, #31]
 80019b4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80019b8:	1ac9      	subs	r1, r1, r3
 80019ba:	4c6a      	ldr	r4, [pc, #424]	@ (8001b64 <calcRPM_PID+0x244>)
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	4403      	add	r3, r0
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4423      	add	r3, r4
 80019cc:	3304      	adds	r3, #4
 80019ce:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80019d0:	7ffa      	ldrb	r2, [r7, #31]
 80019d2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80019d6:	4863      	ldr	r0, [pc, #396]	@ (8001b64 <calcRPM_PID+0x244>)
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	4403      	add	r3, r0
 80019e8:	3308      	adds	r3, #8
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	7ffa      	ldrb	r2, [r7, #31]
 80019ee:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80019f2:	4c5c      	ldr	r4, [pc, #368]	@ (8001b64 <calcRPM_PID+0x244>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	4403      	add	r3, r0
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4423      	add	r3, r4
 8001a04:	3304      	adds	r3, #4
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	7ffa      	ldrb	r2, [r7, #31]
 8001a0a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a0e:	4419      	add	r1, r3
 8001a10:	4c54      	ldr	r4, [pc, #336]	@ (8001b64 <calcRPM_PID+0x244>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4403      	add	r3, r0
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4423      	add	r3, r4
 8001a22:	3308      	adds	r3, #8
 8001a24:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8001a26:	7ffa      	ldrb	r2, [r7, #31]
 8001a28:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a2c:	484d      	ldr	r0, [pc, #308]	@ (8001b64 <calcRPM_PID+0x244>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4403      	add	r3, r0
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	7ffa      	ldrb	r2, [r7, #31]
 8001a42:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a46:	4c46      	ldr	r4, [pc, #280]	@ (8001b60 <calcRPM_PID+0x240>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	4403      	add	r3, r0
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4423      	add	r3, r4
 8001a58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a5c:	7ffa      	ldrb	r2, [r7, #31]
 8001a5e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a62:	1ac9      	subs	r1, r1, r3
 8001a64:	4c3f      	ldr	r4, [pc, #252]	@ (8001b64 <calcRPM_PID+0x244>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	4403      	add	r3, r0
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	4423      	add	r3, r4
 8001a76:	330c      	adds	r3, #12
 8001a78:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8001a7a:	7ffa      	ldrb	r2, [r7, #31]
 8001a7c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a80:	4837      	ldr	r0, [pc, #220]	@ (8001b60 <calcRPM_PID+0x240>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4403      	add	r3, r0
 8001a92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a96:	7ffa      	ldrb	r2, [r7, #31]
 8001a98:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	4831      	ldr	r0, [pc, #196]	@ (8001b64 <calcRPM_PID+0x244>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4403      	add	r3, r0
 8001ab0:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001ab2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ab6:	7ffa      	ldrb	r2, [r7, #31]
 8001ab8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001abc:	4829      	ldr	r0, [pc, #164]	@ (8001b64 <calcRPM_PID+0x244>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4403      	add	r3, r0
 8001ace:	3304      	adds	r3, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ae2:	7ffa      	ldrb	r2, [r7, #31]
 8001ae4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001ae8:	481e      	ldr	r0, [pc, #120]	@ (8001b64 <calcRPM_PID+0x244>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	4403      	add	r3, r0
 8001afa:	3308      	adds	r3, #8
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b12:	7ffa      	ldrb	r2, [r7, #31]
 8001b14:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001b18:	4812      	ldr	r0, [pc, #72]	@ (8001b64 <calcRPM_PID+0x244>)
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4403      	add	r3, r0
 8001b2a:	330c      	adds	r3, #12
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b42:	ee17 3a90 	vmov	r3, s15
 8001b46:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001b48:	7dbb      	ldrb	r3, [r7, #22]
 8001b4a:	6a39      	ldr	r1, [r7, #32]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 f997 	bl	8001e80 <applyCtrlLimit>
 8001b52:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001b54:	6a3b      	ldr	r3, [r7, #32]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	372c      	adds	r7, #44	@ 0x2c
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000012c 	.word	0x2000012c
 8001b64:	200001dc 	.word	0x200001dc

08001b68 <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b08b      	sub	sp, #44	@ 0x2c
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4604      	mov	r4, r0
 8001b70:	4608      	mov	r0, r1
 8001b72:	4611      	mov	r1, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	eef0 6a40 	vmov.f32	s13, s0
 8001b7a:	eeb0 7a60 	vmov.f32	s14, s1
 8001b7e:	eef0 7a41 	vmov.f32	s15, s2
 8001b82:	4623      	mov	r3, r4
 8001b84:	75fb      	strb	r3, [r7, #23]
 8001b86:	4603      	mov	r3, r0
 8001b88:	75bb      	strb	r3, [r7, #22]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	757b      	strb	r3, [r7, #21]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	827b      	strh	r3, [r7, #18]
 8001b92:	edc7 6a01 	vstr	s13, [r7, #4]
 8001b96:	ed87 7a02 	vstr	s14, [r7, #8]
 8001b9a:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 8001bb0:	7dbb      	ldrb	r3, [r7, #22]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	dc02      	bgt.n	8001bbc <calcPosition_PID+0x54>
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dc04      	bgt.n	8001bc4 <calcPosition_PID+0x5c>
 8001bba:	e00d      	b.n	8001bd8 <calcPosition_PID+0x70>
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d80a      	bhi.n	8001bd8 <calcPosition_PID+0x70>
 8001bc2:	e004      	b.n	8001bce <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001bc4:	7d7b      	ldrb	r3, [r7, #21]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001bcc:	e009      	b.n	8001be2 <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001bce:	7d7b      	ldrb	r3, [r7, #21]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001bd6:	e004      	b.n	8001be2 <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 8001bd8:	7d7b      	ldrb	r3, [r7, #21]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001be0:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 8001be2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001be6:	7ffa      	ldrb	r2, [r7, #31]
 8001be8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001bec:	4ca2      	ldr	r4, [pc, #648]	@ (8001e78 <calcPosition_PID+0x310>)
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4403      	add	r3, r0
 8001bfa:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001bfe:	1acb      	subs	r3, r1, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db10      	blt.n	8001c26 <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 8001c04:	8a79      	ldrh	r1, [r7, #18]
 8001c06:	7ffa      	ldrb	r2, [r7, #31]
 8001c08:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001c0c:	4c9a      	ldr	r4, [pc, #616]	@ (8001e78 <calcPosition_PID+0x310>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	4403      	add	r3, r0
 8001c1a:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001c1e:	1acb      	subs	r3, r1, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	83bb      	strh	r3, [r7, #28]
 8001c24:	e012      	b.n	8001c4c <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 8001c26:	8a79      	ldrh	r1, [r7, #18]
 8001c28:	7ffa      	ldrb	r2, [r7, #31]
 8001c2a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001c2e:	4c92      	ldr	r4, [pc, #584]	@ (8001e78 <calcPosition_PID+0x310>)
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	4403      	add	r3, r0
 8001c3c:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001c40:	1acb      	subs	r3, r1, r3
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8001c4c:	7ffa      	ldrb	r2, [r7, #31]
 8001c4e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001c52:	4889      	ldr	r0, [pc, #548]	@ (8001e78 <calcPosition_PID+0x310>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001c64:	461a      	mov	r2, r3
 8001c66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db10      	blt.n	8001c92 <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8001c70:	7ffa      	ldrb	r2, [r7, #31]
 8001c72:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001c76:	4880      	ldr	r0, [pc, #512]	@ (8001e78 <calcPosition_PID+0x310>)
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8001c88:	8a7b      	ldrh	r3, [r7, #18]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	837b      	strh	r3, [r7, #26]
 8001c90:	e012      	b.n	8001cb8 <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 8001c92:	7ffa      	ldrb	r2, [r7, #31]
 8001c94:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001c98:	4877      	ldr	r0, [pc, #476]	@ (8001e78 <calcPosition_PID+0x310>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8001caa:	8a7b      	ldrh	r3, [r7, #18]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 8001cb8:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001cbc:	7ffa      	ldrb	r2, [r7, #31]
 8001cbe:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001cc2:	4c6d      	ldr	r4, [pc, #436]	@ (8001e78 <calcPosition_PID+0x310>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	4403      	add	r3, r0
 8001cd0:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001cd4:	7ffa      	ldrb	r2, [r7, #31]
 8001cd6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001cda:	1ac9      	subs	r1, r1, r3
 8001cdc:	4c67      	ldr	r4, [pc, #412]	@ (8001e7c <calcPosition_PID+0x314>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4403      	add	r3, r0
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4423      	add	r3, r4
 8001cee:	3304      	adds	r3, #4
 8001cf0:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001cf2:	7ffa      	ldrb	r2, [r7, #31]
 8001cf4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001cf8:	4860      	ldr	r0, [pc, #384]	@ (8001e7c <calcPosition_PID+0x314>)
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4403      	add	r3, r0
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	7ffa      	ldrb	r2, [r7, #31]
 8001d10:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d14:	4c59      	ldr	r4, [pc, #356]	@ (8001e7c <calcPosition_PID+0x314>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	4403      	add	r3, r0
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4423      	add	r3, r4
 8001d26:	3304      	adds	r3, #4
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	7ffa      	ldrb	r2, [r7, #31]
 8001d2c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d30:	4419      	add	r1, r3
 8001d32:	4c52      	ldr	r4, [pc, #328]	@ (8001e7c <calcPosition_PID+0x314>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4403      	add	r3, r0
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4423      	add	r3, r4
 8001d44:	3308      	adds	r3, #8
 8001d46:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 8001d48:	7ffa      	ldrb	r2, [r7, #31]
 8001d4a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001d4e:	484b      	ldr	r0, [pc, #300]	@ (8001e7c <calcPosition_PID+0x314>)
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	4403      	add	r3, r0
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	7ffa      	ldrb	r2, [r7, #31]
 8001d64:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d68:	4c43      	ldr	r4, [pc, #268]	@ (8001e78 <calcPosition_PID+0x310>)
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	4403      	add	r3, r0
 8001d76:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001d7a:	7ffa      	ldrb	r2, [r7, #31]
 8001d7c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001d80:	1ac9      	subs	r1, r1, r3
 8001d82:	4c3e      	ldr	r4, [pc, #248]	@ (8001e7c <calcPosition_PID+0x314>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4403      	add	r3, r0
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4423      	add	r3, r4
 8001d94:	330c      	adds	r3, #12
 8001d96:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 8001d98:	7ffa      	ldrb	r2, [r7, #31]
 8001d9a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001d9e:	4836      	ldr	r0, [pc, #216]	@ (8001e78 <calcPosition_PID+0x310>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001db0:	7ffa      	ldrb	r2, [r7, #31]
 8001db2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001db6:	461c      	mov	r4, r3
 8001db8:	4830      	ldr	r0, [pc, #192]	@ (8001e7c <calcPosition_PID+0x314>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4403      	add	r3, r0
 8001dca:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001dcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001dd0:	7ffa      	ldrb	r2, [r7, #31]
 8001dd2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001dd6:	4829      	ldr	r0, [pc, #164]	@ (8001e7c <calcPosition_PID+0x314>)
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	4403      	add	r3, r0
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dfc:	7ffa      	ldrb	r2, [r7, #31]
 8001dfe:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e02:	481e      	ldr	r0, [pc, #120]	@ (8001e7c <calcPosition_PID+0x314>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4403      	add	r3, r0
 8001e14:	3308      	adds	r3, #8
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e28:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e2c:	7ffa      	ldrb	r2, [r7, #31]
 8001e2e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001e32:	4812      	ldr	r0, [pc, #72]	@ (8001e7c <calcPosition_PID+0x314>)
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	4403      	add	r3, r0
 8001e44:	330c      	adds	r3, #12
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5c:	ee17 3a90 	vmov	r3, s15
 8001e60:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001e62:	7dbb      	ldrb	r3, [r7, #22]
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f80a 	bl	8001e80 <applyCtrlLimit>
 8001e6c:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	372c      	adds	r7, #44	@ 0x2c
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	2000012c 	.word	0x2000012c
 8001e7c:	200001dc 	.word	0x200001dc

08001e80 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d009      	beq.n	8001ea6 <applyCtrlLimit+0x26>
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	dc29      	bgt.n	8001eea <applyCtrlLimit+0x6a>
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	dc02      	bgt.n	8001ea0 <applyCtrlLimit+0x20>
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	dc03      	bgt.n	8001ea6 <applyCtrlLimit+0x26>
 8001e9e:	e024      	b.n	8001eea <applyCtrlLimit+0x6a>
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d00f      	beq.n	8001ec4 <applyCtrlLimit+0x44>
 8001ea4:	e021      	b.n	8001eea <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001eac:	dd03      	ble.n	8001eb6 <applyCtrlLimit+0x36>
				val = 16384;
 8001eae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001eb2:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8001eb4:	e016      	b.n	8001ee4 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001ebc:	da12      	bge.n	8001ee4 <applyCtrlLimit+0x64>
				val = -16384;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <applyCtrlLimit+0x78>)
 8001ec0:	603b      	str	r3, [r7, #0]
			break;
 8001ec2:	e00f      	b.n	8001ee4 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	dd03      	ble.n	8001ed6 <applyCtrlLimit+0x56>
				val = 25000;
 8001ece:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001ed2:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8001ed4:	e008      	b.n	8001ee8 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <applyCtrlLimit+0x7c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	da04      	bge.n	8001ee8 <applyCtrlLimit+0x68>
				val = -25000;
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <applyCtrlLimit+0x7c>)
 8001ee0:	603b      	str	r3, [r7, #0]
			break;
 8001ee2:	e001      	b.n	8001ee8 <applyCtrlLimit+0x68>
			break;
 8001ee4:	bf00      	nop
 8001ee6:	e000      	b.n	8001eea <applyCtrlLimit+0x6a>
			break;
 8001ee8:	bf00      	nop
		}
	}
	return val;
 8001eea:	683b      	ldr	r3, [r7, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	ffffc000 	.word	0xffffc000
 8001efc:	ffff9e58 	.word	0xffff9e58

08001f00 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4604      	mov	r4, r0
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	eef0 6a40 	vmov.f32	s13, s0
 8001f12:	eeb0 7a60 	vmov.f32	s14, s1
 8001f16:	eef0 7a41 	vmov.f32	s15, s2
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	75fb      	strb	r3, [r7, #23]
 8001f1e:	4603      	mov	r3, r0
 8001f20:	75bb      	strb	r3, [r7, #22]
 8001f22:	460b      	mov	r3, r1
 8001f24:	757b      	strb	r3, [r7, #21]
 8001f26:	4613      	mov	r3, r2
 8001f28:	827b      	strh	r3, [r7, #18]
 8001f2a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f2e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f32:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8001f36:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f46:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001f4a:	7db9      	ldrb	r1, [r7, #22]
 8001f4c:	7df8      	ldrb	r0, [r7, #23]
 8001f4e:	eeb0 0a66 	vmov.f32	s0, s13
 8001f52:	eef0 0a47 	vmov.f32	s1, s14
 8001f56:	eeb0 1a67 	vmov.f32	s2, s15
 8001f5a:	f7ff fce1 	bl	8001920 <calcRPM_PID>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001f66:	7db9      	ldrb	r1, [r7, #22]
 8001f68:	7df8      	ldrb	r0, [r7, #23]
 8001f6a:	f7ff fadb 	bl	8001524 <CAN_setMotorCtrlVal>
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}

08001f76 <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8001f76:	b590      	push	{r4, r7, lr}
 8001f78:	b087      	sub	sp, #28
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	4608      	mov	r0, r1
 8001f80:	4611      	mov	r1, r2
 8001f82:	461a      	mov	r2, r3
 8001f84:	eef0 6a40 	vmov.f32	s13, s0
 8001f88:	eeb0 7a60 	vmov.f32	s14, s1
 8001f8c:	eef0 7a41 	vmov.f32	s15, s2
 8001f90:	4623      	mov	r3, r4
 8001f92:	75fb      	strb	r3, [r7, #23]
 8001f94:	4603      	mov	r3, r0
 8001f96:	75bb      	strb	r3, [r7, #22]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	757b      	strb	r3, [r7, #21]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	827b      	strh	r3, [r7, #18]
 8001fa0:	edc7 6a01 	vstr	s13, [r7, #4]
 8001fa4:	ed87 7a02 	vstr	s14, [r7, #8]
 8001fa8:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 8001fac:	edd7 6a01 	vldr	s13, [r7, #4]
 8001fb0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fbc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001fc0:	7db9      	ldrb	r1, [r7, #22]
 8001fc2:	7df8      	ldrb	r0, [r7, #23]
 8001fc4:	eeb0 0a66 	vmov.f32	s0, s13
 8001fc8:	eef0 0a47 	vmov.f32	s1, s14
 8001fcc:	eeb0 1a67 	vmov.f32	s2, s15
 8001fd0:	f7ff fdca 	bl	8001b68 <calcPosition_PID>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001fdc:	7db9      	ldrb	r1, [r7, #22]
 8001fde:	7df8      	ldrb	r0, [r7, #23]
 8001fe0:	f7ff faa0 	bl	8001524 <CAN_setMotorCtrlVal>
}
 8001fe4:	bf00      	nop
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <getRotorPosition>:

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	2b02      	cmp	r3, #2
 8002002:	dc02      	bgt.n	800200a <getRotorPosition+0x1e>
 8002004:	2b00      	cmp	r3, #0
 8002006:	dc04      	bgt.n	8002012 <getRotorPosition+0x26>
 8002008:	e034      	b.n	8002074 <getRotorPosition+0x88>
 800200a:	3b03      	subs	r3, #3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d831      	bhi.n	8002074 <getRotorPosition+0x88>
 8002010:	e016      	b.n	8002040 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8002012:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002016:	2b00      	cmp	r3, #0
 8002018:	dd29      	ble.n	800206e <getRotorPosition+0x82>
 800201a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800201e:	2b08      	cmp	r3, #8
 8002020:	dc25      	bgt.n	800206e <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800202a:	1e59      	subs	r1, r3, #1
 800202c:	4815      	ldr	r0, [pc, #84]	@ (8002084 <getRotorPosition+0x98>)
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	440b      	add	r3, r1
 800203a:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800203e:	e01b      	b.n	8002078 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002040:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002044:	2b00      	cmp	r3, #0
 8002046:	dd14      	ble.n	8002072 <getRotorPosition+0x86>
 8002048:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800204c:	2b07      	cmp	r3, #7
 800204e:	dc10      	bgt.n	8002072 <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002058:	1cd9      	adds	r1, r3, #3
 800205a:	480a      	ldr	r0, [pc, #40]	@ (8002084 <getRotorPosition+0x98>)
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	440b      	add	r3, r1
 8002068:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800206c:	e004      	b.n	8002078 <getRotorPosition+0x8c>
			break;
 800206e:	bf00      	nop
 8002070:	e000      	b.n	8002074 <getRotorPosition+0x88>
			}
			break;
 8002072:	bf00      	nop
		}
	}
	return -1;
 8002074:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	2000012c 	.word	0x2000012c

08002088 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 800208c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002090:	4905      	ldr	r1, [pc, #20]	@ (80020a8 <usart_Init+0x20>)
 8002092:	4806      	ldr	r0, [pc, #24]	@ (80020ac <usart_Init+0x24>)
 8002094:	f007 f98e 	bl	80093b4 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8002098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <usart_Init+0x28>)
 800209e:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <usart_Init+0x2c>)
 80020a0:	f007 f988 	bl	80093b4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000033c 	.word	0x2000033c
 80020ac:	20000934 	.word	0x20000934
 80020b0:	2000043c 	.word	0x2000043c
 80020b4:	200009bc 	.word	0x200009bc

080020b8 <usart_printf>:

void usart_printf(const char *fmt,...) {
 80020b8:	b40f      	push	{r0, r1, r2, r3}
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <usart_printf+0x3c>)
 80020c4:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <usart_printf+0x3c>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	480a      	ldr	r0, [pc, #40]	@ (80020f8 <usart_printf+0x40>)
 80020ce:	f00b fa91 	bl	800d5f4 <vsiprintf>
 80020d2:	4603      	mov	r3, r0
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <usart_printf+0x44>)
 80020d8:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 80020da:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <usart_printf+0x44>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	4905      	ldr	r1, [pc, #20]	@ (80020f8 <usart_printf+0x40>)
 80020e2:	4807      	ldr	r0, [pc, #28]	@ (8002100 <usart_printf+0x48>)
 80020e4:	f007 f8e8 	bl	80092b8 <HAL_UART_Transmit_DMA>
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020f0:	b004      	add	sp, #16
 80020f2:	4770      	bx	lr
 80020f4:	20000568 	.word	0x20000568
 80020f8:	2000056c 	.word	0x2000056c
 80020fc:	2000066c 	.word	0x2000066c
 8002100:	20000934 	.word	0x20000934

08002104 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8002122:	2301      	movs	r3, #1
 8002124:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800212a:	2301      	movs	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8002146:	463b      	mov	r3, r7
 8002148:	4619      	mov	r1, r3
 800214a:	480f      	ldr	r0, [pc, #60]	@ (8002188 <can_filter_init+0x6c>)
 800214c:	f002 ff14 	bl	8004f78 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8002150:	480d      	ldr	r0, [pc, #52]	@ (8002188 <can_filter_init+0x6c>)
 8002152:	f002 fff1 	bl	8005138 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002156:	2102      	movs	r1, #2
 8002158:	480b      	ldr	r0, [pc, #44]	@ (8002188 <can_filter_init+0x6c>)
 800215a:	f003 fa1e 	bl	800559a <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 800215e:	230e      	movs	r3, #14
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8002162:	230e      	movs	r3, #14
 8002164:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8002166:	463b      	mov	r3, r7
 8002168:	4619      	mov	r1, r3
 800216a:	4808      	ldr	r0, [pc, #32]	@ (800218c <can_filter_init+0x70>)
 800216c:	f002 ff04 	bl	8004f78 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8002170:	4806      	ldr	r0, [pc, #24]	@ (800218c <can_filter_init+0x70>)
 8002172:	f002 ffe1 	bl	8005138 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002176:	2102      	movs	r1, #2
 8002178:	4804      	ldr	r0, [pc, #16]	@ (800218c <can_filter_init+0x70>)
 800217a:	f003 fa0e 	bl	800559a <HAL_CAN_ActivateNotification>
}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200006d0 	.word	0x200006d0
 800218c:	200006f8 	.word	0x200006f8

08002190 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 800219a:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <imu_pwm_set+0x1c>)
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40014400 	.word	0x40014400

080021b0 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80021be:	4b27      	ldr	r3, [pc, #156]	@ (800225c <RC_init+0xac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	4b25      	ldr	r3, [pc, #148]	@ (800225c <RC_init+0xac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021cc:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 80021ce:	4b23      	ldr	r3, [pc, #140]	@ (800225c <RC_init+0xac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4b21      	ldr	r3, [pc, #132]	@ (800225c <RC_init+0xac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0210 	orr.w	r2, r2, #16
 80021dc:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 80021de:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <RC_init+0xb0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002260 <RC_init+0xb0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80021ee:	e007      	b.n	8002200 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <RC_init+0xb0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <RC_init+0xb0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002200:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <RC_init+0xb0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 800220e:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <RC_init+0xb0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a14      	ldr	r2, [pc, #80]	@ (8002264 <RC_init+0xb4>)
 8002214:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8002216:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <RC_init+0xb0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <RC_init+0xb0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <RC_init+0xb0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	88fa      	ldrh	r2, [r7, #6]
 800222c:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 800222e:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <RC_init+0xb0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <RC_init+0xb0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800223c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <RC_init+0xb0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <RC_init+0xb0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	601a      	str	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000978 	.word	0x20000978
 8002260:	20000ac0 	.word	0x20000ac0
 8002264:	40004804 	.word	0x40004804

08002268 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8002270:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002274:	f008 fafc 	bl	800a870 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8002278:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800231c <imu_temp_control_task+0xb4>
 800227c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002320 <imu_temp_control_task+0xb8>
 8002280:	4a28      	ldr	r2, [pc, #160]	@ (8002324 <imu_temp_control_task+0xbc>)
 8002282:	2100      	movs	r1, #0
 8002284:	4828      	ldr	r0, [pc, #160]	@ (8002328 <imu_temp_control_task+0xc0>)
 8002286:	f001 f8fd 	bl	8003484 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800228a:	4b28      	ldr	r3, [pc, #160]	@ (800232c <imu_temp_control_task+0xc4>)
 800228c:	2210      	movs	r2, #16
 800228e:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002290:	4826      	ldr	r0, [pc, #152]	@ (800232c <imu_temp_control_task+0xc4>)
 8002292:	f005 fd26 	bl	8007ce2 <HAL_SPI_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 800229c:	f001 f8ec 	bl	8003478 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80022a0:	2000      	movs	r0, #0
 80022a2:	f009 fc03 	bl	800baac <pcTaskGetName>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f009 fc93 	bl	800bbd4 <xTaskGetHandle>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002330 <imu_temp_control_task+0xc8>)
 80022b2:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002334 <imu_temp_control_task+0xcc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80022ba:	bf00      	nop
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022c0:	2001      	movs	r0, #1
 80022c2:	f00a f8b3 	bl	800c42c <ulTaskNotifyTake>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d1f7      	bne.n	80022bc <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 80022cc:	f7fe fdbc 	bl	8000e48 <IMU_get_temp>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002338 <imu_temp_control_task+0xd0>
 80022d8:	eeb0 0a67 	vmov.f32	s0, s15
 80022dc:	4812      	ldr	r0, [pc, #72]	@ (8002328 <imu_temp_control_task+0xc0>)
 80022de:	f001 f928 	bl	8003532 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <imu_temp_control_task+0xc0>)
 80022e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80022e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f0:	d503      	bpl.n	80022fa <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <imu_temp_control_task+0xc0>)
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <imu_temp_control_task+0xc0>)
 80022fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8002300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002304:	ee17 3a90 	vmov	r3, s15
 8002308:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff3f 	bl	8002190 <imu_pwm_set>
        osDelay(5);
 8002312:	2005      	movs	r0, #5
 8002314:	f008 faac 	bl	800a870 <osDelay>
    {
 8002318:	e7cf      	b.n	80022ba <imu_temp_control_task+0x52>
 800231a:	bf00      	nop
 800231c:	45898000 	.word	0x45898000
 8002320:	458ca000 	.word	0x458ca000
 8002324:	0800e044 	.word	0x0800e044
 8002328:	20000678 	.word	0x20000678
 800232c:	20000774 	.word	0x20000774
 8002330:	20000670 	.word	0x20000670
 8002334:	20000674 	.word	0x20000674
 8002338:	42200000 	.word	0x42200000

0800233c <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8002346:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <HAL_GPIO_EXTI_Callback+0x54>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	429a      	cmp	r2, r3
 800234e:	d11b      	bne.n	8002388 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8002350:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_GPIO_EXTI_Callback+0x58>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800235a:	f009 ffd9 	bl	800c310 <xTaskGetSchedulerState>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d011      	beq.n	8002388 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <HAL_GPIO_EXTI_Callback+0x60>)
 800236a:	4618      	mov	r0, r3
 800236c:	f00a f8aa 	bl	800c4c4 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002370:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_GPIO_EXTI_Callback+0x60>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_GPIO_EXTI_Callback+0x4c>
 8002378:	4b09      	ldr	r3, [pc, #36]	@ (80023a0 <HAL_GPIO_EXTI_Callback+0x64>)
 800237a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	2000000e 	.word	0x2000000e
 8002394:	20000674 	.word	0x20000674
 8002398:	20000670 	.word	0x20000670
 800239c:	200006c0 	.word	0x200006c0
 80023a0:	e000ed04 	.word	0xe000ed04

080023a4 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	2206      	movs	r2, #6
 80023b6:	4619      	mov	r1, r3
 80023b8:	2003      	movs	r0, #3
 80023ba:	f000 f845 	bl	8002448 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80023be:	7a7b      	ldrb	r3, [r7, #9]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	7a3b      	ldrb	r3, [r7, #8]
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80023cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023d0:	ee07 3a90 	vmov	s15, r3
 80023d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002444 <ist8310_read_mag+0xa0>
 80023dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	7abb      	ldrb	r3, [r7, #10]
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 80023f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002444 <ist8310_read_mag+0xa0>
 8002408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240c:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8002410:	7b7b      	ldrb	r3, [r7, #13]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	b21a      	sxth	r2, r3
 8002416:	7b3b      	ldrb	r3, [r7, #12]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800241e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3308      	adds	r3, #8
 800242e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002444 <ist8310_read_mag+0xa0>
 8002432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002436:	edc3 7a00 	vstr	s15, [r3]
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	3e99999a 	.word	0x3e99999a

08002448 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af04      	add	r7, sp, #16
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	4613      	mov	r3, r2
 8002456:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	b29a      	uxth	r2, r3
 800245c:	79bb      	ldrb	r3, [r7, #6]
 800245e:	b29b      	uxth	r3, r3
 8002460:	210a      	movs	r1, #10
 8002462:	9102      	str	r1, [sp, #8]
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2301      	movs	r3, #1
 800246c:	211c      	movs	r1, #28
 800246e:	4803      	ldr	r0, [pc, #12]	@ (800247c <ist8310_IIC_read_muli_reg+0x34>)
 8002470:	f004 fb0e 	bl	8006a90 <HAL_I2C_Mem_Read>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000720 	.word	0x20000720

08002480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002484:	f002 fc0a 	bl	8004c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002488:	f000 f868 	bl	800255c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248c:	f000 fcea 	bl	8002e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002490:	f000 fc9a 	bl	8002dc8 <MX_DMA_Init>
  MX_CAN1_Init();
 8002494:	f000 f8ce 	bl	8002634 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002498:	f000 f902 	bl	80026a0 <MX_CAN2_Init>
  MX_SPI1_Init();
 800249c:	f000 f964 	bl	8002768 <MX_SPI1_Init>
  MX_TIM4_Init();
 80024a0:	f000 fa40 	bl	8002924 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80024a4:	f000 fc10 	bl	8002cc8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80024a8:	f000 fc64 	bl	8002d74 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80024ac:	f000 f992 	bl	80027d4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80024b0:	f000 fb20 	bl	8002af4 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80024b4:	f000 fc32 	bl	8002d1c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80024b8:	f000 fbb8 	bl	8002c2c <MX_TIM10_Init>
  MX_I2C3_Init();
 80024bc:	f000 f926 	bl	800270c <MX_I2C3_Init>
  MX_TIM5_Init();
 80024c0:	f000 faa8 	bl	8002a14 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 80024c4:	f7ff fe2a 	bl	800211c <can_filter_init>
  remote_control_init();
 80024c8:	f001 fabc 	bl	8003a44 <remote_control_init>
  usart_Init();
 80024cc:	f7ff fddc 	bl	8002088 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 80024d0:	f001 fac6 	bl	8003a60 <get_remote_control_point>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <main+0xa8>)
 80024d8:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024da:	f008 f8ed 	bl	800a6b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 80024de:	4a13      	ldr	r2, [pc, #76]	@ (800252c <main+0xac>)
 80024e0:	2100      	movs	r1, #0
 80024e2:	4813      	ldr	r0, [pc, #76]	@ (8002530 <main+0xb0>)
 80024e4:	f008 f932 	bl	800a74c <osThreadNew>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <main+0xb4>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <main+0xb8>)
 80024f0:	2100      	movs	r1, #0
 80024f2:	4812      	ldr	r0, [pc, #72]	@ (800253c <main+0xbc>)
 80024f4:	f008 f92a 	bl	800a74c <osThreadNew>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <main+0xc0>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 80024fe:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <main+0xc4>)
 8002500:	2100      	movs	r1, #0
 8002502:	4811      	ldr	r0, [pc, #68]	@ (8002548 <main+0xc8>)
 8002504:	f008 f922 	bl	800a74c <osThreadNew>
 8002508:	4603      	mov	r3, r0
 800250a:	4a10      	ldr	r2, [pc, #64]	@ (800254c <main+0xcc>)
 800250c:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 800250e:	4a10      	ldr	r2, [pc, #64]	@ (8002550 <main+0xd0>)
 8002510:	2100      	movs	r1, #0
 8002512:	4810      	ldr	r0, [pc, #64]	@ (8002554 <main+0xd4>)
 8002514:	f008 f91a 	bl	800a74c <osThreadNew>
 8002518:	4603      	mov	r3, r0
 800251a:	4a0f      	ldr	r2, [pc, #60]	@ (8002558 <main+0xd8>)
 800251c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800251e:	f008 f8ef 	bl	800a700 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <main+0xa2>
 8002526:	bf00      	nop
 8002528:	20000bf0 	.word	0x20000bf0
 800252c:	0800e050 	.word	0x0800e050
 8002530:	08003071 	.word	0x08003071
 8002534:	20000be0 	.word	0x20000be0
 8002538:	0800e074 	.word	0x0800e074
 800253c:	08003081 	.word	0x08003081
 8002540:	20000be4 	.word	0x20000be4
 8002544:	0800e098 	.word	0x0800e098
 8002548:	08002269 	.word	0x08002269
 800254c:	20000be8 	.word	0x20000be8
 8002550:	0800e0bc 	.word	0x0800e0bc
 8002554:	08003469 	.word	0x08003469
 8002558:	20000bec 	.word	0x20000bec

0800255c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b094      	sub	sp, #80	@ 0x50
 8002560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002562:	f107 0320 	add.w	r3, r7, #32
 8002566:	2230      	movs	r2, #48	@ 0x30
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f00b f84c 	bl	800d608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002570:	f107 030c 	add.w	r3, r7, #12
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	4b29      	ldr	r3, [pc, #164]	@ (800262c <SystemClock_Config+0xd0>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	4a28      	ldr	r2, [pc, #160]	@ (800262c <SystemClock_Config+0xd0>)
 800258a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002590:	4b26      	ldr	r3, [pc, #152]	@ (800262c <SystemClock_Config+0xd0>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800259c:	2300      	movs	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <SystemClock_Config+0xd4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a22      	ldr	r2, [pc, #136]	@ (8002630 <SystemClock_Config+0xd4>)
 80025a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <SystemClock_Config+0xd4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025b8:	2301      	movs	r3, #1
 80025ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c2:	2302      	movs	r3, #2
 80025c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80025cc:	2306      	movs	r3, #6
 80025ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025d0:	23a8      	movs	r3, #168	@ 0xa8
 80025d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025d4:	2302      	movs	r3, #2
 80025d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025d8:	2304      	movs	r3, #4
 80025da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025dc:	f107 0320 	add.w	r3, r7, #32
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 feff 	bl	80073e4 <HAL_RCC_OscConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025ec:	f000 ff44 	bl	8003478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f0:	230f      	movs	r3, #15
 80025f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f4:	2302      	movs	r3, #2
 80025f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	2105      	movs	r1, #5
 800260e:	4618      	mov	r0, r3
 8002610:	f005 f960 	bl	80078d4 <HAL_RCC_ClockConfig>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800261a:	f000 ff2d 	bl	8003478 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800261e:	f005 fa3f 	bl	8007aa0 <HAL_RCC_EnableCSS>
}
 8002622:	bf00      	nop
 8002624:	3750      	adds	r7, #80	@ 0x50
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000

08002634 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002638:	4b17      	ldr	r3, [pc, #92]	@ (8002698 <MX_CAN1_Init+0x64>)
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <MX_CAN1_Init+0x68>)
 800263c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800263e:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <MX_CAN1_Init+0x64>)
 8002640:	2203      	movs	r2, #3
 8002642:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002644:	4b14      	ldr	r3, [pc, #80]	@ (8002698 <MX_CAN1_Init+0x64>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800264a:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <MX_CAN1_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002650:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <MX_CAN1_Init+0x64>)
 8002652:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002656:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <MX_CAN1_Init+0x64>)
 800265a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800265e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002660:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <MX_CAN1_Init+0x64>)
 8002662:	2200      	movs	r2, #0
 8002664:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002666:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <MX_CAN1_Init+0x64>)
 8002668:	2200      	movs	r2, #0
 800266a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800266c:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <MX_CAN1_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <MX_CAN1_Init+0x64>)
 8002674:	2200      	movs	r2, #0
 8002676:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002678:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <MX_CAN1_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <MX_CAN1_Init+0x64>)
 8002680:	2200      	movs	r2, #0
 8002682:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	@ (8002698 <MX_CAN1_Init+0x64>)
 8002686:	f002 fb7b 	bl	8004d80 <HAL_CAN_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002690:	f000 fef2 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200006d0 	.word	0x200006d0
 800269c:	40006400 	.word	0x40006400

080026a0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80026a4:	4b17      	ldr	r3, [pc, #92]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026a6:	4a18      	ldr	r2, [pc, #96]	@ (8002708 <MX_CAN2_Init+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80026aa:	4b16      	ldr	r3, [pc, #88]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026ac:	2203      	movs	r2, #3
 80026ae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80026b0:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026b6:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026be:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80026c2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026c6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80026ca:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80026cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80026d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026da:	2200      	movs	r2, #0
 80026dc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80026e4:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80026f0:	4804      	ldr	r0, [pc, #16]	@ (8002704 <MX_CAN2_Init+0x64>)
 80026f2:	f002 fb45 	bl	8004d80 <HAL_CAN_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80026fc:	f000 febc 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	200006f8 	.word	0x200006f8
 8002708:	40006800 	.word	0x40006800

0800270c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <MX_I2C3_Init+0x50>)
 8002712:	4a13      	ldr	r2, [pc, #76]	@ (8002760 <MX_I2C3_Init+0x54>)
 8002714:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002716:	4b11      	ldr	r3, [pc, #68]	@ (800275c <MX_I2C3_Init+0x50>)
 8002718:	4a12      	ldr	r2, [pc, #72]	@ (8002764 <MX_I2C3_Init+0x58>)
 800271a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800271c:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <MX_I2C3_Init+0x50>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <MX_I2C3_Init+0x50>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <MX_I2C3_Init+0x50>)
 800272a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800272e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <MX_I2C3_Init+0x50>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <MX_I2C3_Init+0x50>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800273c:	4b07      	ldr	r3, [pc, #28]	@ (800275c <MX_I2C3_Init+0x50>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <MX_I2C3_Init+0x50>)
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002748:	4804      	ldr	r0, [pc, #16]	@ (800275c <MX_I2C3_Init+0x50>)
 800274a:	f004 f85d 	bl	8006808 <HAL_I2C_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002754:	f000 fe90 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000720 	.word	0x20000720
 8002760:	40005c00 	.word	0x40005c00
 8002764:	00061a80 	.word	0x00061a80

08002768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <MX_SPI1_Init+0x64>)
 800276e:	4a18      	ldr	r2, [pc, #96]	@ (80027d0 <MX_SPI1_Init+0x68>)
 8002770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002772:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <MX_SPI1_Init+0x64>)
 8002774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <MX_SPI1_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <MX_SPI1_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <MX_SPI1_Init+0x64>)
 8002788:	2202      	movs	r2, #2
 800278a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <MX_SPI1_Init+0x64>)
 800278e:	2201      	movs	r2, #1
 8002790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <MX_SPI1_Init+0x64>)
 8002794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <MX_SPI1_Init+0x64>)
 800279c:	2238      	movs	r2, #56	@ 0x38
 800279e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027b4:	220a      	movs	r2, #10
 80027b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027b8:	4804      	ldr	r0, [pc, #16]	@ (80027cc <MX_SPI1_Init+0x64>)
 80027ba:	f005 fa92 	bl	8007ce2 <HAL_SPI_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027c4:	f000 fe58 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000774 	.word	0x20000774
 80027d0:	40013000 	.word	0x40013000

080027d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b092      	sub	sp, #72	@ 0x48
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
 80027f4:	615a      	str	r2, [r3, #20]
 80027f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2220      	movs	r2, #32
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f00a ff02 	bl	800d608 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002804:	4b45      	ldr	r3, [pc, #276]	@ (800291c <MX_TIM1_Init+0x148>)
 8002806:	4a46      	ldr	r2, [pc, #280]	@ (8002920 <MX_TIM1_Init+0x14c>)
 8002808:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800280a:	4b44      	ldr	r3, [pc, #272]	@ (800291c <MX_TIM1_Init+0x148>)
 800280c:	2253      	movs	r2, #83	@ 0x53
 800280e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002810:	4b42      	ldr	r3, [pc, #264]	@ (800291c <MX_TIM1_Init+0x148>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002816:	4b41      	ldr	r3, [pc, #260]	@ (800291c <MX_TIM1_Init+0x148>)
 8002818:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800281c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281e:	4b3f      	ldr	r3, [pc, #252]	@ (800291c <MX_TIM1_Init+0x148>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002824:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <MX_TIM1_Init+0x148>)
 8002826:	2200      	movs	r2, #0
 8002828:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282a:	4b3c      	ldr	r3, [pc, #240]	@ (800291c <MX_TIM1_Init+0x148>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002830:	483a      	ldr	r0, [pc, #232]	@ (800291c <MX_TIM1_Init+0x148>)
 8002832:	f005 fe03 	bl	800843c <HAL_TIM_PWM_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800283c:	f000 fe1c 	bl	8003478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002848:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800284c:	4619      	mov	r1, r3
 800284e:	4833      	ldr	r0, [pc, #204]	@ (800291c <MX_TIM1_Init+0x148>)
 8002850:	f006 fc16 	bl	8009080 <HAL_TIMEx_MasterConfigSynchronization>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800285a:	f000 fe0d 	bl	8003478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800285e:	2360      	movs	r3, #96	@ 0x60
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002866:	2300      	movs	r3, #0
 8002868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800286a:	2300      	movs	r3, #0
 800286c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800287a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800287e:	2200      	movs	r2, #0
 8002880:	4619      	mov	r1, r3
 8002882:	4826      	ldr	r0, [pc, #152]	@ (800291c <MX_TIM1_Init+0x148>)
 8002884:	f005 ff62 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800288e:	f000 fdf3 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002896:	2204      	movs	r2, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4820      	ldr	r0, [pc, #128]	@ (800291c <MX_TIM1_Init+0x148>)
 800289c:	f005 ff56 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80028a6:	f000 fde7 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ae:	2208      	movs	r2, #8
 80028b0:	4619      	mov	r1, r3
 80028b2:	481a      	ldr	r0, [pc, #104]	@ (800291c <MX_TIM1_Init+0x148>)
 80028b4:	f005 ff4a 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80028be:	f000 fddb 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c6:	220c      	movs	r2, #12
 80028c8:	4619      	mov	r1, r3
 80028ca:	4814      	ldr	r0, [pc, #80]	@ (800291c <MX_TIM1_Init+0x148>)
 80028cc:	f005 ff3e 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80028d6:	f000 fdcf 	bl	8003478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4807      	ldr	r0, [pc, #28]	@ (800291c <MX_TIM1_Init+0x148>)
 80028fe:	f006 fc3b 	bl	8009178 <HAL_TIMEx_ConfigBreakDeadTime>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002908:	f000 fdb6 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800290c:	4803      	ldr	r0, [pc, #12]	@ (800291c <MX_TIM1_Init+0x148>)
 800290e:	f001 fdcb 	bl	80044a8 <HAL_TIM_MspPostInit>

}
 8002912:	bf00      	nop
 8002914:	3748      	adds	r7, #72	@ 0x48
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200007cc 	.word	0x200007cc
 8002920:	40010000 	.word	0x40010000

08002924 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	@ 0x38
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800292a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002938:	f107 0320 	add.w	r3, r7, #32
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	615a      	str	r2, [r3, #20]
 8002952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002954:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 8002956:	4a2e      	ldr	r2, [pc, #184]	@ (8002a10 <MX_TIM4_Init+0xec>)
 8002958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800295a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8002966:	4b29      	ldr	r3, [pc, #164]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 8002968:	f245 2207 	movw	r2, #20999	@ 0x5207
 800296c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296e:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002974:	4b25      	ldr	r3, [pc, #148]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800297a:	4824      	ldr	r0, [pc, #144]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 800297c:	f005 fca6 	bl	80082cc <HAL_TIM_Base_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002986:	f000 fd77 	bl	8003478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002990:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002994:	4619      	mov	r1, r3
 8002996:	481d      	ldr	r0, [pc, #116]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 8002998:	f005 ff9a 	bl	80088d0 <HAL_TIM_ConfigClockSource>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80029a2:	f000 fd69 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029a6:	4819      	ldr	r0, [pc, #100]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 80029a8:	f005 fd48 	bl	800843c <HAL_TIM_PWM_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80029b2:	f000 fd61 	bl	8003478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029be:	f107 0320 	add.w	r3, r7, #32
 80029c2:	4619      	mov	r1, r3
 80029c4:	4811      	ldr	r0, [pc, #68]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 80029c6:	f006 fb5b 	bl	8009080 <HAL_TIMEx_MasterConfigSynchronization>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80029d0:	f000 fd52 	bl	8003478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029d4:	2360      	movs	r3, #96	@ 0x60
 80029d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80029d8:	f642 1303 	movw	r3, #10499	@ 0x2903
 80029dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	2208      	movs	r2, #8
 80029ea:	4619      	mov	r1, r3
 80029ec:	4807      	ldr	r0, [pc, #28]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 80029ee:	f005 fead 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80029f8:	f000 fd3e 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029fc:	4803      	ldr	r0, [pc, #12]	@ (8002a0c <MX_TIM4_Init+0xe8>)
 80029fe:	f001 fd53 	bl	80044a8 <HAL_TIM_MspPostInit>

}
 8002a02:	bf00      	nop
 8002a04:	3738      	adds	r7, #56	@ 0x38
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000814 	.word	0x20000814
 8002a10:	40000800 	.word	0x40000800

08002a14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1a:	f107 0320 	add.w	r3, r7, #32
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	615a      	str	r2, [r3, #20]
 8002a34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a36:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002a38:	4a2d      	ldr	r2, [pc, #180]	@ (8002af0 <MX_TIM5_Init+0xdc>)
 8002a3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002a3e:	222a      	movs	r2, #42	@ 0x2a
 8002a40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a42:	4b2a      	ldr	r3, [pc, #168]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8002a48:	4b28      	ldr	r3, [pc, #160]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002a4a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002a4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a50:	4b26      	ldr	r3, [pc, #152]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a56:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a5c:	4823      	ldr	r0, [pc, #140]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002a5e:	f005 fced 	bl	800843c <HAL_TIM_PWM_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002a68:	f000 fd06 	bl	8003478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a74:	f107 0320 	add.w	r3, r7, #32
 8002a78:	4619      	mov	r1, r3
 8002a7a:	481c      	ldr	r0, [pc, #112]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002a7c:	f006 fb00 	bl	8009080 <HAL_TIMEx_MasterConfigSynchronization>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002a86:	f000 fcf7 	bl	8003478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a8a:	2360      	movs	r3, #96	@ 0x60
 8002a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4812      	ldr	r0, [pc, #72]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002aa2:	f005 fe53 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002aac:	f000 fce4 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	480d      	ldr	r0, [pc, #52]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002ab8:	f005 fe48 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002ac2:	f000 fcd9 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	2208      	movs	r2, #8
 8002aca:	4619      	mov	r1, r3
 8002acc:	4807      	ldr	r0, [pc, #28]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002ace:	f005 fe3d 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002ad8:	f000 fcce 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002adc:	4803      	ldr	r0, [pc, #12]	@ (8002aec <MX_TIM5_Init+0xd8>)
 8002ade:	f001 fce3 	bl	80044a8 <HAL_TIM_MspPostInit>

}
 8002ae2:	bf00      	nop
 8002ae4:	3728      	adds	r7, #40	@ 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000085c 	.word	0x2000085c
 8002af0:	40000c00 	.word	0x40000c00

08002af4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b092      	sub	sp, #72	@ 0x48
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002afa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
 8002b14:	615a      	str	r2, [r3, #20]
 8002b16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f00a fd72 	bl	800d608 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002b24:	4b3f      	ldr	r3, [pc, #252]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b26:	4a40      	ldr	r2, [pc, #256]	@ (8002c28 <MX_TIM8_Init+0x134>)
 8002b28:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b2c:	2253      	movs	r2, #83	@ 0x53
 8002b2e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b30:	4b3c      	ldr	r3, [pc, #240]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002b36:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b38:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002b3c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3e:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002b44:	4b37      	ldr	r3, [pc, #220]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b4a:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b4c:	2280      	movs	r2, #128	@ 0x80
 8002b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b50:	4834      	ldr	r0, [pc, #208]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b52:	f005 fc73 	bl	800843c <HAL_TIM_PWM_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002b5c:	f000 fc8c 	bl	8003478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482d      	ldr	r0, [pc, #180]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002b70:	f006 fa86 	bl	8009080 <HAL_TIMEx_MasterConfigSynchronization>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002b7a:	f000 fc7d 	bl	8003478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b7e:	2360      	movs	r3, #96	@ 0x60
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4820      	ldr	r0, [pc, #128]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002ba4:	f005 fdd2 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002bae:	f000 fc63 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	481a      	ldr	r0, [pc, #104]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002bbc:	f005 fdc6 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002bc6:	f000 fc57 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bce:	2208      	movs	r2, #8
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4814      	ldr	r0, [pc, #80]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002bd4:	f005 fdba 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002bde:	f000 fc4b 	bl	8003478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4807      	ldr	r0, [pc, #28]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002c06:	f006 fab7 	bl	8009178 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8002c10:	f000 fc32 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002c14:	4803      	ldr	r0, [pc, #12]	@ (8002c24 <MX_TIM8_Init+0x130>)
 8002c16:	f001 fc47 	bl	80044a8 <HAL_TIM_MspPostInit>

}
 8002c1a:	bf00      	nop
 8002c1c:	3748      	adds	r7, #72	@ 0x48
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200008a4 	.word	0x200008a4
 8002c28:	40010400 	.word	0x40010400

08002c2c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
 8002c40:	615a      	str	r2, [r3, #20]
 8002c42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002c44:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002c46:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc4 <MX_TIM10_Init+0x98>)
 8002c48:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002c58:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002c5c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5e:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c64:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002c6a:	4815      	ldr	r0, [pc, #84]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002c6c:	f005 fb2e 	bl	80082cc <HAL_TIM_Base_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002c76:	f000 fbff 	bl	8003478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002c7a:	4811      	ldr	r0, [pc, #68]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002c7c:	f005 fbde 	bl	800843c <HAL_TIM_PWM_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002c86:	f000 fbf7 	bl	8003478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c8a:	2360      	movs	r3, #96	@ 0x60
 8002c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4807      	ldr	r0, [pc, #28]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002ca2:	f005 fd53 	bl	800874c <HAL_TIM_PWM_ConfigChannel>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002cac:	f000 fbe4 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002cb0:	4803      	ldr	r0, [pc, #12]	@ (8002cc0 <MX_TIM10_Init+0x94>)
 8002cb2:	f001 fbf9 	bl	80044a8 <HAL_TIM_MspPostInit>

}
 8002cb6:	bf00      	nop
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200008ec 	.word	0x200008ec
 8002cc4:	40014400 	.word	0x40014400

08002cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	@ (8002d18 <MX_USART1_UART_Init+0x50>)
 8002cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cd2:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cec:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cee:	220c      	movs	r2, #12
 8002cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cfe:	4805      	ldr	r0, [pc, #20]	@ (8002d14 <MX_USART1_UART_Init+0x4c>)
 8002d00:	f006 fa8c 	bl	800921c <HAL_UART_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d0a:	f000 fbb5 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000934 	.word	0x20000934
 8002d18:	40011000 	.word	0x40011000

08002d1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	@ (8002d6c <MX_USART3_UART_Init+0x50>)
 8002d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d28:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <MX_USART3_UART_Init+0x54>)
 8002d2a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d32:	4b0d      	ldr	r3, [pc, #52]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d40:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d42:	220c      	movs	r2, #12
 8002d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d46:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d52:	4805      	ldr	r0, [pc, #20]	@ (8002d68 <MX_USART3_UART_Init+0x4c>)
 8002d54:	f006 fa62 	bl	800921c <HAL_UART_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d5e:	f000 fb8b 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000978 	.word	0x20000978
 8002d6c:	40004800 	.word	0x40004800
 8002d70:	000186a0 	.word	0x000186a0

08002d74 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d78:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002d7a:	4a12      	ldr	r2, [pc, #72]	@ (8002dc4 <MX_USART6_UART_Init+0x50>)
 8002d7c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d84:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d86:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d98:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da4:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002daa:	4805      	ldr	r0, [pc, #20]	@ (8002dc0 <MX_USART6_UART_Init+0x4c>)
 8002dac:	f006 fa36 	bl	800921c <HAL_UART_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002db6:	f000 fb5f 	bl	8003478 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200009bc 	.word	0x200009bc
 8002dc4:	40011400 	.word	0x40011400

08002dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	4b23      	ldr	r3, [pc, #140]	@ (8002e60 <MX_DMA_Init+0x98>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	4a22      	ldr	r2, [pc, #136]	@ (8002e60 <MX_DMA_Init+0x98>)
 8002dd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dde:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <MX_DMA_Init+0x98>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <MX_DMA_Init+0x98>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e60 <MX_DMA_Init+0x98>)
 8002df4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <MX_DMA_Init+0x98>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2105      	movs	r1, #5
 8002e0a:	200c      	movs	r0, #12
 8002e0c:	f002 fef5 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002e10:	200c      	movs	r0, #12
 8002e12:	f002 ff0e 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2105      	movs	r1, #5
 8002e1a:	2039      	movs	r0, #57	@ 0x39
 8002e1c:	f002 feed 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002e20:	2039      	movs	r0, #57	@ 0x39
 8002e22:	f002 ff06 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2105      	movs	r1, #5
 8002e2a:	203a      	movs	r0, #58	@ 0x3a
 8002e2c:	f002 fee5 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002e30:	203a      	movs	r0, #58	@ 0x3a
 8002e32:	f002 fefe 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2105      	movs	r1, #5
 8002e3a:	2045      	movs	r0, #69	@ 0x45
 8002e3c:	f002 fedd 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002e40:	2045      	movs	r0, #69	@ 0x45
 8002e42:	f002 fef6 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2105      	movs	r1, #5
 8002e4a:	2046      	movs	r0, #70	@ 0x46
 8002e4c:	f002 fed5 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002e50:	2046      	movs	r0, #70	@ 0x46
 8002e52:	f002 feee 	bl	8005c32 <HAL_NVIC_EnableIRQ>

}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800

08002e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08e      	sub	sp, #56	@ 0x38
 8002e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
 8002e7e:	4b77      	ldr	r3, [pc, #476]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	4a76      	ldr	r2, [pc, #472]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8a:	4b74      	ldr	r3, [pc, #464]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	4b70      	ldr	r3, [pc, #448]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	4a6f      	ldr	r2, [pc, #444]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	4b69      	ldr	r3, [pc, #420]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	4a68      	ldr	r2, [pc, #416]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec2:	4b66      	ldr	r3, [pc, #408]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	4b62      	ldr	r3, [pc, #392]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a61      	ldr	r2, [pc, #388]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ed8:	f043 0308 	orr.w	r3, r3, #8
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b5f      	ldr	r3, [pc, #380]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	4b5b      	ldr	r3, [pc, #364]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efa:	4b58      	ldr	r3, [pc, #352]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	4b54      	ldr	r3, [pc, #336]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	4a53      	ldr	r2, [pc, #332]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f16:	4b51      	ldr	r3, [pc, #324]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b4d      	ldr	r3, [pc, #308]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	4a4c      	ldr	r2, [pc, #304]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f32:	4b4a      	ldr	r3, [pc, #296]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	4b46      	ldr	r3, [pc, #280]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	4a45      	ldr	r2, [pc, #276]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f48:	f043 0320 	orr.w	r3, r3, #32
 8002f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4e:	4b43      	ldr	r3, [pc, #268]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	4a3e      	ldr	r2, [pc, #248]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f64:	f043 0310 	orr.w	r3, r3, #16
 8002f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6a:	4b3c      	ldr	r3, [pc, #240]	@ (800305c <MX_GPIO_Init+0x1f8>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2140      	movs	r1, #64	@ 0x40
 8002f7a:	4839      	ldr	r0, [pc, #228]	@ (8003060 <MX_GPIO_Init+0x1fc>)
 8002f7c:	f003 fc12 	bl	80067a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2110      	movs	r1, #16
 8002f84:	4837      	ldr	r0, [pc, #220]	@ (8003064 <MX_GPIO_Init+0x200>)
 8002f86:	f003 fc0d 	bl	80067a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4836      	ldr	r0, [pc, #216]	@ (8003068 <MX_GPIO_Init+0x204>)
 8002f90:	f003 fc08 	bl	80067a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f94:	2340      	movs	r3, #64	@ 0x40
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa8:	4619      	mov	r1, r3
 8002faa:	482d      	ldr	r0, [pc, #180]	@ (8003060 <MX_GPIO_Init+0x1fc>)
 8002fac:	f003 fa5e 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4826      	ldr	r0, [pc, #152]	@ (8003060 <MX_GPIO_Init+0x1fc>)
 8002fc6:	f003 fa51 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4821      	ldr	r0, [pc, #132]	@ (8003064 <MX_GPIO_Init+0x200>)
 8002fde:	f003 fa45 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	481a      	ldr	r0, [pc, #104]	@ (8003064 <MX_GPIO_Init+0x200>)
 8002ffa:	f003 fa37 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8002ffe:	2330      	movs	r3, #48	@ 0x30
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003002:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003006:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003010:	4619      	mov	r1, r3
 8003012:	4816      	ldr	r0, [pc, #88]	@ (800306c <MX_GPIO_Init+0x208>)
 8003014:	f003 fa2a 	bl	800646c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003018:	2301      	movs	r3, #1
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301c:	2301      	movs	r3, #1
 800301e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800302c:	4619      	mov	r1, r3
 800302e:	480e      	ldr	r0, [pc, #56]	@ (8003068 <MX_GPIO_Init+0x204>)
 8003030:	f003 fa1c 	bl	800646c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003034:	2200      	movs	r2, #0
 8003036:	2105      	movs	r1, #5
 8003038:	2009      	movs	r0, #9
 800303a:	f002 fdde 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800303e:	2009      	movs	r0, #9
 8003040:	f002 fdf7 	bl	8005c32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2105      	movs	r1, #5
 8003048:	200a      	movs	r0, #10
 800304a:	f002 fdd6 	bl	8005bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800304e:	200a      	movs	r0, #10
 8003050:	f002 fdef 	bl	8005c32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003054:	bf00      	nop
 8003056:	3738      	adds	r7, #56	@ 0x38
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	40021800 	.word	0x40021800
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400
 800306c:	40020800 	.word	0x40020800

08003070 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	for(;;) {
		osDelay(5);
 8003078:	2005      	movs	r0, #5
 800307a:	f007 fbf9 	bl	800a870 <osDelay>
 800307e:	e7fb      	b.n	8003078 <TaskMain+0x8>

08003080 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b097      	sub	sp, #92	@ 0x5c
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8003088:	4bc7      	ldr	r3, [pc, #796]	@ (80033a8 <TaskChassis+0x328>)
 800308a:	4ac8      	ldr	r2, [pc, #800]	@ (80033ac <TaskChassis+0x32c>)
 800308c:	49c8      	ldr	r1, [pc, #800]	@ (80033b0 <TaskChassis+0x330>)
 800308e:	48c9      	ldr	r0, [pc, #804]	@ (80033b4 <TaskChassis+0x334>)
 8003090:	f000 fb98 	bl	80037c4 <PWMInit>

	PID_preset_t fondler = {3.0, 0.0, 0.0};
 8003094:	4bc8      	ldr	r3, [pc, #800]	@ (80033b8 <TaskChassis+0x338>)
 8003096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	643b      	str	r3, [r7, #64]	@ 0x40
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	647b      	str	r3, [r7, #68]	@ 0x44
	PID_preset_t flywheels = {7.0, 0.0, 0.0};
 80030a4:	4bc5      	ldr	r3, [pc, #788]	@ (80033bc <TaskChassis+0x33c>)
 80030a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	PID_preset_t yawPresetVoltageRPM = {18.0, 0.0, 0.0};
 80030b4:	4bc2      	ldr	r3, [pc, #776]	@ (80033c0 <TaskChassis+0x340>)
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// D = 100
	PID_preset_t pitchBoi = {60.0, 0.0, 40.0};
 80030c4:	4abf      	ldr	r2, [pc, #764]	@ (80033c4 <TaskChassis+0x344>)
 80030c6:	f107 0318 	add.w	r3, r7, #24
 80030ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80030cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t yawBoi = {80.0, 0.0, 0.0};
 80030d0:	4bbd      	ldr	r3, [pc, #756]	@ (80033c8 <TaskChassis+0x348>)
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

	int16_t returnScaler = 2;
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	// int8_t fondlerVars[2][5] = {{0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}};
	int16_t upAdd = 400;
 80030e6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80030ea:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	int16_t currentAim = 5500+upAdd;
 80030ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80030f2:	f503 53ab 	add.w	r3, r3, #5472	@ 0x1560
 80030f6:	331c      	adds	r3, #28
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  /* Infinite loop */
    for(;;) {

        CAN_transmit(Bus1, 0x104, fourBitShift((uint16_t)(getRCchannel(0)+660), (uint16_t)(getRCchannel(1)+660), (uint16_t)(getRCchannel(2)+660), (uint16_t)(getRCchannel(3)+660)));
 80030fe:	2000      	movs	r0, #0
 8003100:	f000 fe64 	bl	8003dcc <getRCchannel>
 8003104:	4603      	mov	r3, r0
 8003106:	b29b      	uxth	r3, r3
 8003108:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800310c:	b29c      	uxth	r4, r3
 800310e:	2001      	movs	r0, #1
 8003110:	f000 fe5c 	bl	8003dcc <getRCchannel>
 8003114:	4603      	mov	r3, r0
 8003116:	b29b      	uxth	r3, r3
 8003118:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800311c:	b29d      	uxth	r5, r3
 800311e:	2002      	movs	r0, #2
 8003120:	f000 fe54 	bl	8003dcc <getRCchannel>
 8003124:	4603      	mov	r3, r0
 8003126:	b29b      	uxth	r3, r3
 8003128:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800312c:	b29e      	uxth	r6, r3
 800312e:	2003      	movs	r0, #3
 8003130:	f000 fe4c 	bl	8003dcc <getRCchannel>
 8003134:	4603      	mov	r3, r0
 8003136:	b29b      	uxth	r3, r3
 8003138:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800313c:	b29b      	uxth	r3, r3
 800313e:	4632      	mov	r2, r6
 8003140:	4629      	mov	r1, r5
 8003142:	4620      	mov	r0, r4
 8003144:	f7fe f8d7 	bl	80012f6 <fourBitShift>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8003150:	2001      	movs	r0, #1
 8003152:	f7fe f941 	bl	80013d8 <CAN_transmit>
        CAN_transmit(Bus1, 0x105, otherSignals((uint16_t)(getRCchannel(4)+660), getRCswitch(0), getRCswitch(1)));
 8003156:	2004      	movs	r0, #4
 8003158:	f000 fe38 	bl	8003dcc <getRCchannel>
 800315c:	4603      	mov	r3, r0
 800315e:	b29b      	uxth	r3, r3
 8003160:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003164:	b29c      	uxth	r4, r3
 8003166:	2000      	movs	r0, #0
 8003168:	f000 fe44 	bl	8003df4 <getRCswitch>
 800316c:	4603      	mov	r3, r0
 800316e:	461d      	mov	r5, r3
 8003170:	2001      	movs	r0, #1
 8003172:	f000 fe3f 	bl	8003df4 <getRCswitch>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	4629      	mov	r1, r5
 800317c:	4620      	mov	r0, r4
 800317e:	f7fe f84b 	bl	8001218 <otherSignals>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	f240 1105 	movw	r1, #261	@ 0x105
 800318a:	2001      	movs	r0, #1
 800318c:	f7fe f924 	bl	80013d8 <CAN_transmit>
    	// DELTA PITCH = 1200


    	// FLywheel ID = 1, 2, 3
    	// Pitch = 3
        usart_printf("%d\r\n",getRotorPosition(Bus2, GM6020, 1));
 8003190:	2201      	movs	r2, #1
 8003192:	2103      	movs	r1, #3
 8003194:	2002      	movs	r0, #2
 8003196:	f7fe ff29 	bl	8001fec <getRotorPosition>
 800319a:	4603      	mov	r3, r0
 800319c:	4619      	mov	r1, r3
 800319e:	488b      	ldr	r0, [pc, #556]	@ (80033cc <TaskChassis+0x34c>)
 80031a0:	f7fe ff8a 	bl	80020b8 <usart_printf>
    	int16_t currentPos = getRCchannel(1);
 80031a4:	2001      	movs	r0, #1
 80031a6:	f000 fe11 	bl	8003dcc <getRCchannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    	if (getRCswitch(0) >= 2) {
 80031b0:	2000      	movs	r0, #0
 80031b2:	f000 fe1f 	bl	8003df4 <getRCswitch>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	dd42      	ble.n	8003242 <TaskChassis+0x1c2>
    		uint16_t togoVal = ((currentPos)*0.75)+5500+upAdd;
 80031bc:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f9af 	bl	8000524 <__aeabi_i2d>
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	4b81      	ldr	r3, [pc, #516]	@ (80033d0 <TaskChassis+0x350>)
 80031cc:	f7fd fa14 	bl	80005f8 <__aeabi_dmul>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	a36f      	add	r3, pc, #444	@ (adr r3, 8003398 <TaskChassis+0x318>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd f855 	bl	800028c <__adddf3>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4614      	mov	r4, r2
 80031e8:	461d      	mov	r5, r3
 80031ea:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f998 	bl	8000524 <__aeabi_i2d>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	4629      	mov	r1, r5
 80031fc:	f7fd f846 	bl	800028c <__adddf3>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	f7fd fc30 	bl	8000a6c <__aeabi_d2uiz>
 800320c:	4603      	mov	r3, r0
 800320e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    		currentAim = togoVal;
 8003212:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003216:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    		setMotorPosition(Bus2, GM6020, 1, togoVal, pitchBoi);
 800321a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800321e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003222:	ed97 7a07 	vldr	s14, [r7, #28]
 8003226:	edd7 7a08 	vldr	s15, [r7, #32]
 800322a:	eeb0 0a66 	vmov.f32	s0, s13
 800322e:	eef0 0a47 	vmov.f32	s1, s14
 8003232:	eeb0 1a67 	vmov.f32	s2, s15
 8003236:	2201      	movs	r2, #1
 8003238:	2103      	movs	r1, #3
 800323a:	2002      	movs	r0, #2
 800323c:	f7fe fe9b 	bl	8001f76 <setMotorPosition>
 8003240:	e052      	b.n	80032e8 <TaskChassis+0x268>
    	} else {
    	// usart_printf("%d\r\n", getRotorPosition(Bus1, GM6020, 3));
    		int16_t currentPos1 = getRCchannel(1)*0.1;
 8003242:	2001      	movs	r0, #1
 8003244:	f000 fdc2 	bl	8003dcc <getRCchannel>
 8003248:	4603      	mov	r3, r0
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f96a 	bl	8000524 <__aeabi_i2d>
 8003250:	a353      	add	r3, pc, #332	@ (adr r3, 80033a0 <TaskChassis+0x320>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fd f9cf 	bl	80005f8 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f7fd fbdb 	bl	8000a1c <__aeabi_d2iz>
 8003266:	4603      	mov	r3, r0
 8003268:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    		currentAim -= currentPos1;
 800326c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8003270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	b29b      	uxth	r3, r3
 8003278:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    		if (currentAim > 6000+upAdd) {
 800327c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 8003280:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8003284:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8003288:	3310      	adds	r3, #16
 800328a:	429a      	cmp	r2, r3
 800328c:	dd08      	ble.n	80032a0 <TaskChassis+0x220>
    			currentAim = 6000+upAdd;
 800328e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003292:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8003296:	3310      	adds	r3, #16
 8003298:	b29b      	uxth	r3, r3
 800329a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800329e:	e010      	b.n	80032c2 <TaskChassis+0x242>
    		} else if (currentAim < 5000+upAdd) {
 80032a0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80032a4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80032a8:	3307      	adds	r3, #7
 80032aa:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 80032ae:	4293      	cmp	r3, r2
 80032b0:	db07      	blt.n	80032c2 <TaskChassis+0x242>
    			currentAim = 5000+upAdd;
 80032b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80032b6:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80032ba:	3308      	adds	r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    		}
    		setMotorPosition(Bus2, GM6020, 1, currentAim, pitchBoi);
 80032c2:	edd7 6a06 	vldr	s13, [r7, #24]
 80032c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80032ce:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80032d2:	eeb0 0a66 	vmov.f32	s0, s13
 80032d6:	eef0 0a47 	vmov.f32	s1, s14
 80032da:	eeb0 1a67 	vmov.f32	s2, s15
 80032de:	2201      	movs	r2, #1
 80032e0:	2103      	movs	r1, #3
 80032e2:	2002      	movs	r0, #2
 80032e4:	f7fe fe47 	bl	8001f76 <setMotorPosition>
    	// setMotorPosition(Bus2, GM6020, 1, togoVal, pitchBoi);
    	// usart_printf("%d\r\n", getRotorPosition(Bus1, GM6020, 3));

    	// usart_printf("%d\r\n", getRotorPosition(Bus1, GM6020, 6));
    	// usart_printf("%d %d %d %d\r\n", -1*getMotorRPM(Bus1, M3508, 1), getMotorRPM(Bus1, M3508, 2), getMotorRPM(Bus1, M3508, 3), -1*getMotorRPM(Bus1, M3508, 4));
        uint16_t speed = 7500;
 80032e8:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 80032ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        // CAN_transmit(Bus2, 0x105, 0x11223344);
        osDelay(2);
 80032f0:	2002      	movs	r0, #2
 80032f2:	f007 fabd 	bl	800a870 <osDelay>

        if (getRCswitch(1) > 1) {
 80032f6:	2001      	movs	r0, #1
 80032f8:	f000 fd7c 	bl	8003df4 <getRCswitch>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	dd68      	ble.n	80033d4 <TaskChassis+0x354>
            // setMotorRPM(Bus1, M3508, 1, -1*speed, yawPresetVoltageRPM);
            setMotorRPM(Bus2, M3508, 1, -1*speed, flywheels);
 8003302:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003306:	425b      	negs	r3, r3
 8003308:	b29b      	uxth	r3, r3
 800330a:	b21b      	sxth	r3, r3
 800330c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8003310:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003314:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003318:	eeb0 0a66 	vmov.f32	s0, s13
 800331c:	eef0 0a47 	vmov.f32	s1, s14
 8003320:	eeb0 1a67 	vmov.f32	s2, s15
 8003324:	2201      	movs	r2, #1
 8003326:	2101      	movs	r1, #1
 8003328:	2002      	movs	r0, #2
 800332a:	f7fe fde9 	bl	8001f00 <setMotorRPM>
            osDelay(2);
 800332e:	2002      	movs	r0, #2
 8003330:	f007 fa9e 	bl	800a870 <osDelay>
            setMotorRPM(Bus2, M3508, 2, speed, flywheels);
 8003334:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003338:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800333c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003340:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003344:	eeb0 0a66 	vmov.f32	s0, s13
 8003348:	eef0 0a47 	vmov.f32	s1, s14
 800334c:	eeb0 1a67 	vmov.f32	s2, s15
 8003350:	2202      	movs	r2, #2
 8003352:	2101      	movs	r1, #1
 8003354:	2002      	movs	r0, #2
 8003356:	f7fe fdd3 	bl	8001f00 <setMotorRPM>
            osDelay(2);
 800335a:	2002      	movs	r0, #2
 800335c:	f007 fa88 	bl	800a870 <osDelay>
            setMotorRPM(Bus2, M3508, 3, -1*speed, flywheels);
 8003360:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003364:	425b      	negs	r3, r3
 8003366:	b29b      	uxth	r3, r3
 8003368:	b21b      	sxth	r3, r3
 800336a:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800336e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003372:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003376:	eeb0 0a66 	vmov.f32	s0, s13
 800337a:	eef0 0a47 	vmov.f32	s1, s14
 800337e:	eeb0 1a67 	vmov.f32	s2, s15
 8003382:	2203      	movs	r2, #3
 8003384:	2101      	movs	r1, #1
 8003386:	2002      	movs	r0, #2
 8003388:	f7fe fdba 	bl	8001f00 <setMotorRPM>
            osDelay(2);
 800338c:	2002      	movs	r0, #2
 800338e:	f007 fa6f 	bl	800a870 <osDelay>
 8003392:	e05b      	b.n	800344c <TaskChassis+0x3cc>
 8003394:	f3af 8000 	nop.w
 8003398:	00000000 	.word	0x00000000
 800339c:	40b57c00 	.word	0x40b57c00
 80033a0:	9999999a 	.word	0x9999999a
 80033a4:	3fb99999 	.word	0x3fb99999
 80033a8:	200008a4 	.word	0x200008a4
 80033ac:	2000085c 	.word	0x2000085c
 80033b0:	20000814 	.word	0x20000814
 80033b4:	200007cc 	.word	0x200007cc
 80033b8:	40400000 	.word	0x40400000
 80033bc:	40e00000 	.word	0x40e00000
 80033c0:	41900000 	.word	0x41900000
 80033c4:	0800e020 	.word	0x0800e020
 80033c8:	42a00000 	.word	0x42a00000
 80033cc:	0800e018 	.word	0x0800e018
 80033d0:	3fe80000 	.word	0x3fe80000
            // usart_printf("On\r\n");
        } else {
        	// setMotorRPM(Bus1, M3508, 1, 0, yawPresetVoltageRPM);
        	setMotorRPM(Bus2, M3508, 1, 0, flywheels);
 80033d4:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80033d8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80033dc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80033e0:	eeb0 0a66 	vmov.f32	s0, s13
 80033e4:	eef0 0a47 	vmov.f32	s1, s14
 80033e8:	eeb0 1a67 	vmov.f32	s2, s15
 80033ec:	2300      	movs	r3, #0
 80033ee:	2201      	movs	r2, #1
 80033f0:	2101      	movs	r1, #1
 80033f2:	2002      	movs	r0, #2
 80033f4:	f7fe fd84 	bl	8001f00 <setMotorRPM>
        	osDelay(2);
 80033f8:	2002      	movs	r0, #2
 80033fa:	f007 fa39 	bl	800a870 <osDelay>
        	setMotorRPM(Bus2, M3508, 2, 0, flywheels);
 80033fe:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8003402:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003406:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800340a:	eeb0 0a66 	vmov.f32	s0, s13
 800340e:	eef0 0a47 	vmov.f32	s1, s14
 8003412:	eeb0 1a67 	vmov.f32	s2, s15
 8003416:	2300      	movs	r3, #0
 8003418:	2202      	movs	r2, #2
 800341a:	2101      	movs	r1, #1
 800341c:	2002      	movs	r0, #2
 800341e:	f7fe fd6f 	bl	8001f00 <setMotorRPM>
        	osDelay(2);
 8003422:	2002      	movs	r0, #2
 8003424:	f007 fa24 	bl	800a870 <osDelay>
        	setMotorRPM(Bus2, M3508, 3, 0, flywheels);
 8003428:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800342c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003430:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003434:	eeb0 0a66 	vmov.f32	s0, s13
 8003438:	eef0 0a47 	vmov.f32	s1, s14
 800343c:	eeb0 1a67 	vmov.f32	s2, s15
 8003440:	2300      	movs	r3, #0
 8003442:	2203      	movs	r2, #3
 8003444:	2101      	movs	r1, #1
 8003446:	2002      	movs	r0, #2
 8003448:	f7fe fd5a 	bl	8001f00 <setMotorRPM>
        	// usart_printf("Off\r\n");
        }
        osDelay(2);
 800344c:	2002      	movs	r0, #2
 800344e:	f007 fa0f 	bl	800a870 <osDelay>


        osDelay(2);
 8003452:	2002      	movs	r0, #2
 8003454:	f007 fa0c 	bl	800a870 <osDelay>
		PWMTimerStarter();
 8003458:	f000 f9e8 	bl	800382c <PWMTimerStarter>
		RCkeysRefresh();
 800345c:	f000 fcde 	bl	8003e1c <RCkeysRefresh>
        osDelay(10);
 8003460:	200a      	movs	r0, #10
 8003462:	f007 fa05 	bl	800a870 <osDelay>
    for(;;) {
 8003466:	e64a      	b.n	80030fe <TaskChassis+0x7e>

08003468 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8003470:	2005      	movs	r0, #5
 8003472:	f007 f9fd 	bl	800a870 <osDelay>
 8003476:	e7fb      	b.n	8003470 <TaskTurret+0x8>

08003478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800347c:	b672      	cpsid	i
}
 800347e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <Error_Handler+0x8>

08003484 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6178      	str	r0, [r7, #20]
 800348c:	460b      	mov	r3, r1
 800348e:	60fa      	str	r2, [r7, #12]
 8003490:	ed87 0a02 	vstr	s0, [r7, #8]
 8003494:	edc7 0a01 	vstr	s1, [r7, #4]
 8003498:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d042      	beq.n	8003526 <PID_init+0xa2>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d03f      	beq.n	8003526 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	7cfa      	ldrb	r2, [r7, #19]
 80034aa:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3304      	adds	r3, #4
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3308      	adds	r3, #8
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	639a      	str	r2, [r3, #56]	@ 0x38
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	621a      	str	r2, [r3, #32]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	629a      	str	r2, [r3, #40]	@ 0x28
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	645a      	str	r2, [r3, #68]	@ 0x44
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003524:	e000      	b.n	8003528 <PID_init+0xa4>
        return;
 8003526:	bf00      	nop
}
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	ed87 0a02 	vstr	s0, [r7, #8]
 800353e:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <PID_calc+0x1c>
    {
        return 0.0f;
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e130      	b.n	80037b0 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800356a:	ed97 7a01 	vldr	s14, [r7, #4]
 800356e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 8095 	bne.w	80036b0 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	ed93 7a01 	vldr	s14, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80035ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80035d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	edd3 7a05 	vldr	s15, [r3, #20]
 8003604:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360c:	dd04      	ble.n	8003618 <PID_calc+0xe6>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	629a      	str	r2, [r3, #40]	@ 0x28
 8003616:	e014      	b.n	8003642 <PID_calc+0x110>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	edd3 7a05 	vldr	s15, [r3, #20]
 8003624:	eef1 7a67 	vneg.f32	s15, s15
 8003628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003630:	d507      	bpl.n	8003642 <PID_calc+0x110>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	edd3 7a05 	vldr	s15, [r3, #20]
 8003638:	eef1 7a67 	vneg.f32	s15, s15
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800364e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	ed93 7a08 	vldr	s14, [r3, #32]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	edd3 7a04 	vldr	s15, [r3, #16]
 800366e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003676:	dd04      	ble.n	8003682 <PID_calc+0x150>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	621a      	str	r2, [r3, #32]
 8003680:	e094      	b.n	80037ac <PID_calc+0x27a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	ed93 7a08 	vldr	s14, [r3, #32]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	edd3 7a04 	vldr	s15, [r3, #16]
 800368e:	eef1 7a67 	vneg.f32	s15, s15
 8003692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	f140 8087 	bpl.w	80037ac <PID_calc+0x27a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80036a4:	eef1 7a67 	vneg.f32	s15, s15
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	edc3 7a08 	vstr	s15, [r3, #32]
 80036ae:	e07d      	b.n	80037ac <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d179      	bne.n	80037ac <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80036ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	ed93 7a02 	vldr	s14, [r3, #8]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80036e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800370a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800370e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	ed93 7a03 	vldr	s14, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	ed93 7a08 	vldr	s14, [r3, #32]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800374a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	ed93 7a08 	vldr	s14, [r3, #32]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	edd3 7a04 	vldr	s15, [r3, #16]
 800376e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	dd04      	ble.n	8003782 <PID_calc+0x250>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]
 8003780:	e014      	b.n	80037ac <PID_calc+0x27a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	ed93 7a08 	vldr	s14, [r3, #32]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	edd3 7a04 	vldr	s15, [r3, #16]
 800378e:	eef1 7a67 	vneg.f32	s15, s15
 8003792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	d507      	bpl.n	80037ac <PID_calc+0x27a>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	edd3 7a04 	vldr	s15, [r3, #16]
 80037a2:	eef1 7a67 	vneg.f32	s15, s15
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
}
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eeb0 0a67 	vmov.f32	s0, s15
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 80037d2:	4a12      	ldr	r2, [pc, #72]	@ (800381c <PWMInit+0x58>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 80037d8:	4a11      	ldr	r2, [pc, #68]	@ (8003820 <PWMInit+0x5c>)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 80037de:	4a11      	ldr	r2, [pc, #68]	@ (8003824 <PWMInit+0x60>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 80037e4:	4a10      	ldr	r2, [pc, #64]	@ (8003828 <PWMInit+0x64>)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 80037ea:	4b0c      	ldr	r3, [pc, #48]	@ (800381c <PWMInit+0x58>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f004 fdbc 	bl	800836c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 80037f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <PWMInit+0x5c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 fdb7 	bl	800836c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 80037fe:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <PWMInit+0x60>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f004 fdb2 	bl	800836c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8003808:	4b07      	ldr	r3, [pc, #28]	@ (8003828 <PWMInit+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f004 fdad 	bl	800836c <HAL_TIM_Base_Start>
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000bf4 	.word	0x20000bf4
 8003820:	20000bf8 	.word	0x20000bf8
 8003824:	20000bfc 	.word	0x20000bfc
 8003828:	20000c00 	.word	0x20000c00

0800382c <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	e0f1      	b.n	8003a1c <PWMTimerStarter+0x1f0>
		switch (i) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b0a      	cmp	r3, #10
 800383c:	f200 80eb 	bhi.w	8003a16 <PWMTimerStarter+0x1ea>
 8003840:	a201      	add	r2, pc, #4	@ (adr r2, 8003848 <PWMTimerStarter+0x1c>)
 8003842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003846:	bf00      	nop
 8003848:	08003875 	.word	0x08003875
 800384c:	0800389b 	.word	0x0800389b
 8003850:	080038c1 	.word	0x080038c1
 8003854:	080038e7 	.word	0x080038e7
 8003858:	0800390d 	.word	0x0800390d
 800385c:	08003933 	.word	0x08003933
 8003860:	08003959 	.word	0x08003959
 8003864:	0800397f 	.word	0x0800397f
 8003868:	080039a5 	.word	0x080039a5
 800386c:	080039cb 	.word	0x080039cb
 8003870:	080039f1 	.word	0x080039f1
		case 0:
			if (whichPWMisOn[0] == 1) {
 8003874:	4b6e      	ldr	r3, [pc, #440]	@ (8003a30 <PWMTimerStarter+0x204>)
 8003876:	f993 3000 	ldrsb.w	r3, [r3]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d106      	bne.n	800388c <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 800387e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a34 <PWMTimerStarter+0x208>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f004 fe29 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 800388a:	e0c4      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 800388c:	4b69      	ldr	r3, [pc, #420]	@ (8003a34 <PWMTimerStarter+0x208>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f004 feea 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 8003898:	e0bd      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 800389a:	4b65      	ldr	r3, [pc, #404]	@ (8003a30 <PWMTimerStarter+0x204>)
 800389c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d106      	bne.n	80038b2 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 80038a4:	4b63      	ldr	r3, [pc, #396]	@ (8003a34 <PWMTimerStarter+0x208>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2104      	movs	r1, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fe16 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 80038b0:	e0b1      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 80038b2:	4b60      	ldr	r3, [pc, #384]	@ (8003a34 <PWMTimerStarter+0x208>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2104      	movs	r1, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f004 fed7 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 80038be:	e0aa      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 80038c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003a30 <PWMTimerStarter+0x204>)
 80038c2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d106      	bne.n	80038d8 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 80038ca:	4b5a      	ldr	r3, [pc, #360]	@ (8003a34 <PWMTimerStarter+0x208>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2108      	movs	r1, #8
 80038d0:	4618      	mov	r0, r3
 80038d2:	f004 fe03 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 80038d6:	e09e      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 80038d8:	4b56      	ldr	r3, [pc, #344]	@ (8003a34 <PWMTimerStarter+0x208>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2108      	movs	r1, #8
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 fec4 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 80038e4:	e097      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 80038e6:	4b52      	ldr	r3, [pc, #328]	@ (8003a30 <PWMTimerStarter+0x204>)
 80038e8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d106      	bne.n	80038fe <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 80038f0:	4b50      	ldr	r3, [pc, #320]	@ (8003a34 <PWMTimerStarter+0x208>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	210c      	movs	r1, #12
 80038f6:	4618      	mov	r0, r3
 80038f8:	f004 fdf0 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 80038fc:	e08b      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 80038fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003a34 <PWMTimerStarter+0x208>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	210c      	movs	r1, #12
 8003904:	4618      	mov	r0, r3
 8003906:	f004 feb1 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 800390a:	e084      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 800390c:	4b48      	ldr	r3, [pc, #288]	@ (8003a30 <PWMTimerStarter+0x204>)
 800390e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d106      	bne.n	8003924 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8003916:	4b48      	ldr	r3, [pc, #288]	@ (8003a38 <PWMTimerStarter+0x20c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f004 fddd 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8003922:	e078      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8003924:	4b44      	ldr	r3, [pc, #272]	@ (8003a38 <PWMTimerStarter+0x20c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f004 fe9e 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 8003930:	e071      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8003932:	4b3f      	ldr	r3, [pc, #252]	@ (8003a30 <PWMTimerStarter+0x204>)
 8003934:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d106      	bne.n	800394a <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 800393c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a38 <PWMTimerStarter+0x20c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2104      	movs	r1, #4
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fdca 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8003948:	e065      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 800394a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <PWMTimerStarter+0x20c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2104      	movs	r1, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f004 fe8b 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 8003956:	e05e      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8003958:	4b35      	ldr	r3, [pc, #212]	@ (8003a30 <PWMTimerStarter+0x204>)
 800395a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d106      	bne.n	8003970 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8003962:	4b35      	ldr	r3, [pc, #212]	@ (8003a38 <PWMTimerStarter+0x20c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2108      	movs	r1, #8
 8003968:	4618      	mov	r0, r3
 800396a:	f004 fdb7 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 800396e:	e052      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8003970:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <PWMTimerStarter+0x20c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2108      	movs	r1, #8
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fe78 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 800397c:	e04b      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 800397e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a30 <PWMTimerStarter+0x204>)
 8003980:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8003988:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <PWMTimerStarter+0x210>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f004 fda4 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8003994:	e03f      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8003996:	4b29      	ldr	r3, [pc, #164]	@ (8003a3c <PWMTimerStarter+0x210>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f004 fe65 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 80039a2:	e038      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 80039a4:	4b22      	ldr	r3, [pc, #136]	@ (8003a30 <PWMTimerStarter+0x204>)
 80039a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d106      	bne.n	80039bc <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 80039ae:	4b23      	ldr	r3, [pc, #140]	@ (8003a3c <PWMTimerStarter+0x210>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2104      	movs	r1, #4
 80039b4:	4618      	mov	r0, r3
 80039b6:	f004 fd91 	bl	80084dc <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 80039ba:	e02c      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 80039bc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a3c <PWMTimerStarter+0x210>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2104      	movs	r1, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f004 fe52 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 80039c8:	e025      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 80039ca:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <PWMTimerStarter+0x204>)
 80039cc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d106      	bne.n	80039e2 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 80039d4:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <PWMTimerStarter+0x210>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2108      	movs	r1, #8
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 fd7e 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 80039e0:	e019      	b.n	8003a16 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 80039e2:	4b16      	ldr	r3, [pc, #88]	@ (8003a3c <PWMTimerStarter+0x210>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2108      	movs	r1, #8
 80039e8:	4618      	mov	r0, r3
 80039ea:	f004 fe3f 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 80039ee:	e012      	b.n	8003a16 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 80039f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a30 <PWMTimerStarter+0x204>)
 80039f2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d106      	bne.n	8003a08 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 80039fa:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <PWMTimerStarter+0x214>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2108      	movs	r1, #8
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fd6b 	bl	80084dc <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8003a06:	e005      	b.n	8003a14 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8003a08:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <PWMTimerStarter+0x214>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2108      	movs	r1, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 fe2c 	bl	800866c <HAL_TIM_PWM_Stop>
			break;
 8003a14:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b0a      	cmp	r3, #10
 8003a20:	f77f af0a 	ble.w	8003838 <PWMTimerStarter+0xc>
		}
	}
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000c04 	.word	0x20000c04
 8003a34:	20000bf4 	.word	0x20000bf4
 8003a38:	20000c00 	.word	0x20000c00
 8003a3c:	20000bfc 	.word	0x20000bfc
 8003a40:	20000bf8 	.word	0x20000bf8

08003a44 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8003a48:	2224      	movs	r2, #36	@ 0x24
 8003a4a:	4903      	ldr	r1, [pc, #12]	@ (8003a58 <remote_control_init+0x14>)
 8003a4c:	4803      	ldr	r0, [pc, #12]	@ (8003a5c <remote_control_init+0x18>)
 8003a4e:	f7fe fbaf 	bl	80021b0 <RC_init>
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000c4c 	.word	0x20000c4c
 8003a5c:	20000c28 	.word	0x20000c28

08003a60 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003a64:	4b02      	ldr	r3, [pc, #8]	@ (8003a70 <get_remote_control_point+0x10>)
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20000c10 	.word	0x20000c10

08003a74 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8003a7a:	4b44      	ldr	r3, [pc, #272]	@ (8003b8c <USART3_IRQHandler+0x118>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b8c <USART3_IRQHandler+0x118>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	4b3d      	ldr	r3, [pc, #244]	@ (8003b8c <USART3_IRQHandler+0x118>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8003a9e:	e070      	b.n	8003b82 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <USART3_IRQHandler+0x11c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d06a      	beq.n	8003b82 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003aac:	2300      	movs	r3, #0
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <USART3_IRQHandler+0x118>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <USART3_IRQHandler+0x118>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003ac2:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d12d      	bne.n	8003b2c <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003ad0:	4b30      	ldr	r3, [pc, #192]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	4b2a      	ldr	r3, [pc, #168]	@ (8003b98 <USART3_IRQHandler+0x124>)
 8003af0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003af2:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2224      	movs	r2, #36	@ 0x24
 8003af8:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8003afa:	4b26      	ldr	r3, [pc, #152]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003b08:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003b98 <USART3_IRQHandler+0x124>)
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	2b12      	cmp	r3, #18
 8003b20:	d12f      	bne.n	8003b82 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8003b22:	491e      	ldr	r1, [pc, #120]	@ (8003b9c <USART3_IRQHandler+0x128>)
 8003b24:	481e      	ldr	r0, [pc, #120]	@ (8003ba0 <USART3_IRQHandler+0x12c>)
 8003b26:	f000 f841 	bl	8003bac <sbus_to_rc>
}
 8003b2a:	e02a      	b.n	8003b82 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003b2c:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b18      	ldr	r3, [pc, #96]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003b3c:	4b15      	ldr	r3, [pc, #84]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <USART3_IRQHandler+0x124>)
 8003b4c:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8003b4e:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2224      	movs	r2, #36	@ 0x24
 8003b54:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8003b56:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <USART3_IRQHandler+0x130>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <USART3_IRQHandler+0x130>)
 8003b5c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003b60:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003b62:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <USART3_IRQHandler+0x120>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8003b72:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <USART3_IRQHandler+0x124>)
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	2b12      	cmp	r3, #18
 8003b78:	d103      	bne.n	8003b82 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8003b7a:	4908      	ldr	r1, [pc, #32]	@ (8003b9c <USART3_IRQHandler+0x128>)
 8003b7c:	480a      	ldr	r0, [pc, #40]	@ (8003ba8 <USART3_IRQHandler+0x134>)
 8003b7e:	f000 f815 	bl	8003bac <sbus_to_rc>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000978 	.word	0x20000978
 8003b90:	40004800 	.word	0x40004800
 8003b94:	20000ac0 	.word	0x20000ac0
 8003b98:	20000c70 	.word	0x20000c70
 8003b9c:	20000c10 	.word	0x20000c10
 8003ba0:	20000c28 	.word	0x20000c28
 8003ba4:	40026028 	.word	0x40026028
 8003ba8:	20000c4c 	.word	0x20000c4c

08003bac <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8101 	beq.w	8003dc0 <sbus_to_rc+0x214>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80fd 	beq.w	8003dc0 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	b21a      	sxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	b21b      	sxth	r3, r3
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003be2:	b21a      	sxth	r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3301      	adds	r3, #1
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	b21a      	sxth	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	015b      	lsls	r3, r3, #5
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c0a:	b21a      	sxth	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3302      	adds	r3, #2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	b21a      	sxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3303      	adds	r3, #3
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8003c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c42:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3305      	adds	r3, #5
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	01db      	lsls	r3, r3, #7
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6a:	b21a      	sxth	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3305      	adds	r3, #5
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3305      	adds	r3, #5
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	109b      	asrs	r3, r3, #2
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3306      	adds	r3, #6
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	b21a      	sxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3307      	adds	r3, #7
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	b21b      	sxth	r3, r3
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	b21a      	sxth	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	b21a      	sxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3309      	adds	r3, #9
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	b21b      	sxth	r3, r3
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	b21a      	sxth	r2, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	330a      	adds	r3, #10
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	b21a      	sxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	330b      	adds	r3, #11
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b21a      	sxth	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	330d      	adds	r3, #13
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	330e      	adds	r3, #14
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	b21a      	sxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	330f      	adds	r3, #15
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3310      	adds	r3, #16
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3311      	adds	r3, #17
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	b21a      	sxth	r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d56:	b21b      	sxth	r3, r3
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b21a      	sxth	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d6c:	b21b      	sxth	r3, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	b21a      	sxth	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d82:	b21b      	sxth	r3, r3
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	b21a      	sxth	r2, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d98:	b21b      	sxth	r3, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b21a      	sxth	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	b21a      	sxth	r2, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	811a      	strh	r2, [r3, #8]
 8003dbe:	e000      	b.n	8003dc2 <sbus_to_rc+0x216>
        return;
 8003dc0:	bf00      	nop
}
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <getRCchannel+0x24>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003dde:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003de2:	b21b      	sxth	r3, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	20000018 	.word	0x20000018

08003df4 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <getRCswitch+0x24>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	4413      	add	r3, r2
 8003e08:	7a9b      	ldrb	r3, [r3, #10]
 8003e0a:	b25b      	sxtb	r3, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	20000018 	.word	0x20000018

08003e1c <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8003e22:	4b85      	ldr	r3, [pc, #532]	@ (8004038 <RCkeysRefresh+0x21c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	7d1a      	ldrb	r2, [r3, #20]
 8003e28:	7d5b      	ldrb	r3, [r3, #21]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8003e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	da07      	bge.n	8003e48 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8003e38:	4b80      	ldr	r3, [pc, #512]	@ (800403c <RCkeysRefresh+0x220>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003e44:	80fb      	strh	r3, [r7, #6]
 8003e46:	e002      	b.n	8003e4e <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8003e48:	4b7c      	ldr	r3, [pc, #496]	@ (800403c <RCkeysRefresh+0x220>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e54:	d307      	bcc.n	8003e66 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8003e56:	4b79      	ldr	r3, [pc, #484]	@ (800403c <RCkeysRefresh+0x220>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8003e62:	80fb      	strh	r3, [r7, #6]
 8003e64:	e002      	b.n	8003e6c <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 8003e66:	4b75      	ldr	r3, [pc, #468]	@ (800403c <RCkeysRefresh+0x220>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e72:	d307      	bcc.n	8003e84 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8003e74:	4b71      	ldr	r3, [pc, #452]	@ (800403c <RCkeysRefresh+0x220>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003e80:	80fb      	strh	r3, [r7, #6]
 8003e82:	e002      	b.n	8003e8a <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8003e84:	4b6d      	ldr	r3, [pc, #436]	@ (800403c <RCkeysRefresh+0x220>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e90:	d307      	bcc.n	8003ea2 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 8003e92:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <RCkeysRefresh+0x220>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8003e9e:	80fb      	strh	r3, [r7, #6]
 8003ea0:	e002      	b.n	8003ea8 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 8003ea2:	4b66      	ldr	r3, [pc, #408]	@ (800403c <RCkeysRefresh+0x220>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eae:	d307      	bcc.n	8003ec0 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8003eb0:	4b62      	ldr	r3, [pc, #392]	@ (800403c <RCkeysRefresh+0x220>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003ebc:	80fb      	strh	r3, [r7, #6]
 8003ebe:	e002      	b.n	8003ec6 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8003ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800403c <RCkeysRefresh+0x220>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ecc:	d307      	bcc.n	8003ede <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 8003ece:	4b5b      	ldr	r3, [pc, #364]	@ (800403c <RCkeysRefresh+0x220>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003eda:	80fb      	strh	r3, [r7, #6]
 8003edc:	e002      	b.n	8003ee4 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 8003ede:	4b57      	ldr	r3, [pc, #348]	@ (800403c <RCkeysRefresh+0x220>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eea:	d307      	bcc.n	8003efc <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8003eec:	4b53      	ldr	r3, [pc, #332]	@ (800403c <RCkeysRefresh+0x220>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003ef8:	80fb      	strh	r3, [r7, #6]
 8003efa:	e002      	b.n	8003f02 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8003efc:	4b4f      	ldr	r3, [pc, #316]	@ (800403c <RCkeysRefresh+0x220>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	2bff      	cmp	r3, #255	@ 0xff
 8003f06:	d907      	bls.n	8003f18 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8003f08:	4b4c      	ldr	r3, [pc, #304]	@ (800403c <RCkeysRefresh+0x220>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f14:	80fb      	strh	r3, [r7, #6]
 8003f16:	e002      	b.n	8003f1e <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8003f18:	4b48      	ldr	r3, [pc, #288]	@ (800403c <RCkeysRefresh+0x220>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f22:	d906      	bls.n	8003f32 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8003f24:	4b45      	ldr	r3, [pc, #276]	@ (800403c <RCkeysRefresh+0x220>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	3b80      	subs	r3, #128	@ 0x80
 8003f2e:	80fb      	strh	r3, [r7, #6]
 8003f30:	e002      	b.n	8003f38 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 8003f32:	4b42      	ldr	r3, [pc, #264]	@ (800403c <RCkeysRefresh+0x220>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f3c:	d906      	bls.n	8003f4c <RCkeysRefresh+0x130>
		pc_control.q = 1;
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800403c <RCkeysRefresh+0x220>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	3b40      	subs	r3, #64	@ 0x40
 8003f48:	80fb      	strh	r3, [r7, #6]
 8003f4a:	e002      	b.n	8003f52 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800403c <RCkeysRefresh+0x220>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b1f      	cmp	r3, #31
 8003f56:	d906      	bls.n	8003f66 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8003f58:	4b38      	ldr	r3, [pc, #224]	@ (800403c <RCkeysRefresh+0x220>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	3b20      	subs	r3, #32
 8003f62:	80fb      	strh	r3, [r7, #6]
 8003f64:	e002      	b.n	8003f6c <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 8003f66:	4b35      	ldr	r3, [pc, #212]	@ (800403c <RCkeysRefresh+0x220>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	d906      	bls.n	8003f80 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 8003f72:	4b32      	ldr	r3, [pc, #200]	@ (800403c <RCkeysRefresh+0x220>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	3b10      	subs	r3, #16
 8003f7c:	80fb      	strh	r3, [r7, #6]
 8003f7e:	e002      	b.n	8003f86 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 8003f80:	4b2e      	ldr	r3, [pc, #184]	@ (800403c <RCkeysRefresh+0x220>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d906      	bls.n	8003f9a <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <RCkeysRefresh+0x220>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	3b08      	subs	r3, #8
 8003f96:	80fb      	strh	r3, [r7, #6]
 8003f98:	e002      	b.n	8003fa0 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 8003f9a:	4b28      	ldr	r3, [pc, #160]	@ (800403c <RCkeysRefresh+0x220>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d906      	bls.n	8003fb4 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 8003fa6:	4b25      	ldr	r3, [pc, #148]	@ (800403c <RCkeysRefresh+0x220>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	3b04      	subs	r3, #4
 8003fb0:	80fb      	strh	r3, [r7, #6]
 8003fb2:	e002      	b.n	8003fba <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 8003fb4:	4b21      	ldr	r3, [pc, #132]	@ (800403c <RCkeysRefresh+0x220>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d906      	bls.n	8003fce <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <RCkeysRefresh+0x220>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	3b02      	subs	r3, #2
 8003fca:	80fb      	strh	r3, [r7, #6]
 8003fcc:	e002      	b.n	8003fd4 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <RCkeysRefresh+0x220>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 8003fda:	4b18      	ldr	r3, [pc, #96]	@ (800403c <RCkeysRefresh+0x220>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	731a      	strb	r2, [r3, #12]
 8003fe0:	e002      	b.n	8003fe8 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 8003fe2:	4b16      	ldr	r3, [pc, #88]	@ (800403c <RCkeysRefresh+0x220>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 8003fe8:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <RCkeysRefresh+0x21c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ff0:	b21a      	sxth	r2, r3
 8003ff2:	4b12      	ldr	r3, [pc, #72]	@ (800403c <RCkeysRefresh+0x220>)
 8003ff4:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 8003ff6:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <RCkeysRefresh+0x21c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003ffe:	b21a      	sxth	r2, r3
 8004000:	4b0e      	ldr	r3, [pc, #56]	@ (800403c <RCkeysRefresh+0x220>)
 8004002:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8004004:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <RCkeysRefresh+0x21c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800400c:	b21a      	sxth	r2, r3
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <RCkeysRefresh+0x220>)
 8004010:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 8004012:	4b09      	ldr	r3, [pc, #36]	@ (8004038 <RCkeysRefresh+0x21c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	7c9b      	ldrb	r3, [r3, #18]
 8004018:	b25a      	sxtb	r2, r3
 800401a:	4b08      	ldr	r3, [pc, #32]	@ (800403c <RCkeysRefresh+0x220>)
 800401c:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 800401e:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <RCkeysRefresh+0x21c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	7cdb      	ldrb	r3, [r3, #19]
 8004024:	b25a      	sxtb	r2, r3
 8004026:	4b05      	ldr	r3, [pc, #20]	@ (800403c <RCkeysRefresh+0x220>)
 8004028:	71da      	strb	r2, [r3, #7]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20000018 	.word	0x20000018
 800403c:	2000054c 	.word	0x2000054c

08004040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <HAL_MspInit+0x54>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <HAL_MspInit+0x54>)
 8004050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004054:	6453      	str	r3, [r2, #68]	@ 0x44
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_MspInit+0x54>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800405e:	607b      	str	r3, [r7, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4b0b      	ldr	r3, [pc, #44]	@ (8004094 <HAL_MspInit+0x54>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	4a0a      	ldr	r2, [pc, #40]	@ (8004094 <HAL_MspInit+0x54>)
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004070:	6413      	str	r3, [r2, #64]	@ 0x40
 8004072:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <HAL_MspInit+0x54>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800407e:	2200      	movs	r2, #0
 8004080:	210f      	movs	r1, #15
 8004082:	f06f 0001 	mvn.w	r0, #1
 8004086:	f001 fdb8 	bl	8005bfa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023800 	.word	0x40023800

08004098 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	@ 0x30
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f107 031c 	add.w	r3, r7, #28
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a4a      	ldr	r2, [pc, #296]	@ (80041e0 <HAL_CAN_MspInit+0x148>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d13d      	bne.n	8004136 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80040ba:	4b4a      	ldr	r3, [pc, #296]	@ (80041e4 <HAL_CAN_MspInit+0x14c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3301      	adds	r3, #1
 80040c0:	4a48      	ldr	r2, [pc, #288]	@ (80041e4 <HAL_CAN_MspInit+0x14c>)
 80040c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80040c4:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <HAL_CAN_MspInit+0x14c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10d      	bne.n	80040e8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	4b45      	ldr	r3, [pc, #276]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	4a44      	ldr	r2, [pc, #272]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 80040d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040da:	6413      	str	r3, [r2, #64]	@ 0x40
 80040dc:	4b42      	ldr	r3, [pc, #264]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	4b3e      	ldr	r3, [pc, #248]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f0:	4a3d      	ldr	r2, [pc, #244]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 80040f2:	f043 0308 	orr.w	r3, r3, #8
 80040f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80040f8:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004104:	2303      	movs	r3, #3
 8004106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004108:	2302      	movs	r3, #2
 800410a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410c:	2300      	movs	r3, #0
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004110:	2303      	movs	r3, #3
 8004112:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004114:	2309      	movs	r3, #9
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004118:	f107 031c 	add.w	r3, r7, #28
 800411c:	4619      	mov	r1, r3
 800411e:	4833      	ldr	r0, [pc, #204]	@ (80041ec <HAL_CAN_MspInit+0x154>)
 8004120:	f002 f9a4 	bl	800646c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004124:	2200      	movs	r2, #0
 8004126:	2105      	movs	r1, #5
 8004128:	2014      	movs	r0, #20
 800412a:	f001 fd66 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800412e:	2014      	movs	r0, #20
 8004130:	f001 fd7f 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004134:	e04f      	b.n	80041d6 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2d      	ldr	r2, [pc, #180]	@ (80041f0 <HAL_CAN_MspInit+0x158>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d14a      	bne.n	80041d6 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	4b28      	ldr	r3, [pc, #160]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	4a27      	ldr	r2, [pc, #156]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 800414a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800414e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004150:	4b25      	ldr	r3, [pc, #148]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800415c:	4b21      	ldr	r3, [pc, #132]	@ (80041e4 <HAL_CAN_MspInit+0x14c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	4a20      	ldr	r2, [pc, #128]	@ (80041e4 <HAL_CAN_MspInit+0x14c>)
 8004164:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004166:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <HAL_CAN_MspInit+0x14c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d10d      	bne.n	800418a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b1d      	ldr	r3, [pc, #116]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	4a1c      	ldr	r2, [pc, #112]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 8004178:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800417c:	6413      	str	r3, [r2, #64]	@ 0x40
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4a15      	ldr	r2, [pc, #84]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	6313      	str	r3, [r2, #48]	@ 0x30
 800419a:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <HAL_CAN_MspInit+0x150>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80041a6:	2360      	movs	r3, #96	@ 0x60
 80041a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b2:	2303      	movs	r3, #3
 80041b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80041b6:	2309      	movs	r3, #9
 80041b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ba:	f107 031c 	add.w	r3, r7, #28
 80041be:	4619      	mov	r1, r3
 80041c0:	480c      	ldr	r0, [pc, #48]	@ (80041f4 <HAL_CAN_MspInit+0x15c>)
 80041c2:	f002 f953 	bl	800646c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2105      	movs	r1, #5
 80041ca:	2040      	movs	r0, #64	@ 0x40
 80041cc:	f001 fd15 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80041d0:	2040      	movs	r0, #64	@ 0x40
 80041d2:	f001 fd2e 	bl	8005c32 <HAL_NVIC_EnableIRQ>
}
 80041d6:	bf00      	nop
 80041d8:	3730      	adds	r7, #48	@ 0x30
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40006400 	.word	0x40006400
 80041e4:	20000c74 	.word	0x20000c74
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40006800 	.word	0x40006800
 80041f4:	40020400 	.word	0x40020400

080041f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	@ 0x28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a29      	ldr	r2, [pc, #164]	@ (80042bc <HAL_I2C_MspInit+0xc4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d14b      	bne.n	80042b2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	4b28      	ldr	r3, [pc, #160]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	4a27      	ldr	r2, [pc, #156]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6313      	str	r3, [r2, #48]	@ 0x30
 800422a:	4b25      	ldr	r3, [pc, #148]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	4a20      	ldr	r2, [pc, #128]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6313      	str	r3, [r2, #48]	@ 0x30
 8004246:	4b1e      	ldr	r3, [pc, #120]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004258:	2312      	movs	r3, #18
 800425a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004260:	2303      	movs	r3, #3
 8004262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004264:	2304      	movs	r3, #4
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	4619      	mov	r1, r3
 800426e:	4815      	ldr	r0, [pc, #84]	@ (80042c4 <HAL_I2C_MspInit+0xcc>)
 8004270:	f002 f8fc 	bl	800646c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800427a:	2312      	movs	r3, #18
 800427c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004282:	2303      	movs	r3, #3
 8004284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004286:	2304      	movs	r3, #4
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428a:	f107 0314 	add.w	r3, r7, #20
 800428e:	4619      	mov	r1, r3
 8004290:	480d      	ldr	r0, [pc, #52]	@ (80042c8 <HAL_I2C_MspInit+0xd0>)
 8004292:	f002 f8eb 	bl	800646c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	4b09      	ldr	r3, [pc, #36]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	4a08      	ldr	r2, [pc, #32]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 80042a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <HAL_I2C_MspInit+0xc8>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80042b2:	bf00      	nop
 80042b4:	3728      	adds	r7, #40	@ 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40005c00 	.word	0x40005c00
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40020800 	.word	0x40020800
 80042c8:	40020000 	.word	0x40020000

080042cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	@ 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a28      	ldr	r2, [pc, #160]	@ (800438c <HAL_SPI_MspInit+0xc0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d149      	bne.n	8004382 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	4b27      	ldr	r3, [pc, #156]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f6:	4a26      	ldr	r2, [pc, #152]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 80042f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80042fe:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	4a1f      	ldr	r2, [pc, #124]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	6313      	str	r3, [r2, #48]	@ 0x30
 800431a:	4b1d      	ldr	r3, [pc, #116]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	4b19      	ldr	r3, [pc, #100]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6313      	str	r3, [r2, #48]	@ 0x30
 8004336:	4b16      	ldr	r3, [pc, #88]	@ (8004390 <HAL_SPI_MspInit+0xc4>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8004342:	2318      	movs	r3, #24
 8004344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004346:	2302      	movs	r3, #2
 8004348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434e:	2303      	movs	r3, #3
 8004350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004352:	2305      	movs	r3, #5
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	f107 0314 	add.w	r3, r7, #20
 800435a:	4619      	mov	r1, r3
 800435c:	480d      	ldr	r0, [pc, #52]	@ (8004394 <HAL_SPI_MspInit+0xc8>)
 800435e:	f002 f885 	bl	800646c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004366:	2302      	movs	r3, #2
 8004368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436e:	2303      	movs	r3, #3
 8004370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004372:	2305      	movs	r3, #5
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004376:	f107 0314 	add.w	r3, r7, #20
 800437a:	4619      	mov	r1, r3
 800437c:	4806      	ldr	r0, [pc, #24]	@ (8004398 <HAL_SPI_MspInit+0xcc>)
 800437e:	f002 f875 	bl	800646c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004382:	bf00      	nop
 8004384:	3728      	adds	r7, #40	@ 0x28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40013000 	.word	0x40013000
 8004390:	40023800 	.word	0x40023800
 8004394:	40020400 	.word	0x40020400
 8004398:	40020000 	.word	0x40020000

0800439c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004428 <HAL_TIM_PWM_MspInit+0x8c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d10e      	bne.n	80043cc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	4b1e      	ldr	r3, [pc, #120]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80043be:	4b1b      	ldr	r3, [pc, #108]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80043ca:	e026      	b.n	800441a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a17      	ldr	r2, [pc, #92]	@ (8004430 <HAL_TIM_PWM_MspInit+0x94>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	4b14      	ldr	r3, [pc, #80]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	4a13      	ldr	r2, [pc, #76]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 80043e0:	f043 0308 	orr.w	r3, r3, #8
 80043e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043e6:	4b11      	ldr	r3, [pc, #68]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	693b      	ldr	r3, [r7, #16]
}
 80043f2:	e012      	b.n	800441a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004434 <HAL_TIM_PWM_MspInit+0x98>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d10d      	bne.n	800441a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	4b0a      	ldr	r3, [pc, #40]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	4a09      	ldr	r2, [pc, #36]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	6453      	str	r3, [r2, #68]	@ 0x44
 800440e:	4b07      	ldr	r3, [pc, #28]	@ (800442c <HAL_TIM_PWM_MspInit+0x90>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40023800 	.word	0x40023800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40010400 	.word	0x40010400

08004438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a15      	ldr	r2, [pc, #84]	@ (800449c <HAL_TIM_Base_MspInit+0x64>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	4b14      	ldr	r3, [pc, #80]	@ (80044a0 <HAL_TIM_Base_MspInit+0x68>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	4a13      	ldr	r2, [pc, #76]	@ (80044a0 <HAL_TIM_Base_MspInit+0x68>)
 8004454:	f043 0304 	orr.w	r3, r3, #4
 8004458:	6413      	str	r3, [r2, #64]	@ 0x40
 800445a:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <HAL_TIM_Base_MspInit+0x68>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004466:	e012      	b.n	800448e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <HAL_TIM_Base_MspInit+0x6c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d10d      	bne.n	800448e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	4b0a      	ldr	r3, [pc, #40]	@ (80044a0 <HAL_TIM_Base_MspInit+0x68>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447a:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <HAL_TIM_Base_MspInit+0x68>)
 800447c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004480:	6453      	str	r3, [r2, #68]	@ 0x44
 8004482:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <HAL_TIM_Base_MspInit+0x68>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
}
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40000800 	.word	0x40000800
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40014400 	.word	0x40014400

080044a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08e      	sub	sp, #56	@ 0x38
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	60da      	str	r2, [r3, #12]
 80044be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004670 <HAL_TIM_MspPostInit+0x1c8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d11f      	bne.n	800450a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	623b      	str	r3, [r7, #32]
 80044ce:	4b69      	ldr	r3, [pc, #420]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	4a68      	ldr	r2, [pc, #416]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80044d4:	f043 0310 	orr.w	r3, r3, #16
 80044d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044da:	4b66      	ldr	r3, [pc, #408]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80044e6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ec:	2302      	movs	r3, #2
 80044ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f4:	2300      	movs	r3, #0
 80044f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80044f8:	2301      	movs	r3, #1
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004500:	4619      	mov	r1, r3
 8004502:	485d      	ldr	r0, [pc, #372]	@ (8004678 <HAL_TIM_MspPostInit+0x1d0>)
 8004504:	f001 ffb2 	bl	800646c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004508:	e0ae      	b.n	8004668 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5b      	ldr	r2, [pc, #364]	@ (800467c <HAL_TIM_MspPostInit+0x1d4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d11f      	bne.n	8004554 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004514:	2300      	movs	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	4b56      	ldr	r3, [pc, #344]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	4a55      	ldr	r2, [pc, #340]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 800451e:	f043 0308 	orr.w	r3, r3, #8
 8004522:	6313      	str	r3, [r2, #48]	@ 0x30
 8004524:	4b53      	ldr	r3, [pc, #332]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004530:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004536:	2302      	movs	r3, #2
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453e:	2300      	movs	r3, #0
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004542:	2302      	movs	r3, #2
 8004544:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800454a:	4619      	mov	r1, r3
 800454c:	484c      	ldr	r0, [pc, #304]	@ (8004680 <HAL_TIM_MspPostInit+0x1d8>)
 800454e:	f001 ff8d 	bl	800646c <HAL_GPIO_Init>
}
 8004552:	e089      	b.n	8004668 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a4a      	ldr	r2, [pc, #296]	@ (8004684 <HAL_TIM_MspPostInit+0x1dc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d11f      	bne.n	800459e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	4b44      	ldr	r3, [pc, #272]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	4a43      	ldr	r2, [pc, #268]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 8004568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800456c:	6313      	str	r3, [r2, #48]	@ 0x30
 800456e:	4b41      	ldr	r3, [pc, #260]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800457a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004588:	2300      	movs	r3, #0
 800458a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800458c:	2302      	movs	r3, #2
 800458e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004594:	4619      	mov	r1, r3
 8004596:	483c      	ldr	r0, [pc, #240]	@ (8004688 <HAL_TIM_MspPostInit+0x1e0>)
 8004598:	f001 ff68 	bl	800646c <HAL_GPIO_Init>
}
 800459c:	e064      	b.n	8004668 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a3a      	ldr	r2, [pc, #232]	@ (800468c <HAL_TIM_MspPostInit+0x1e4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d13c      	bne.n	8004622 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	4b31      	ldr	r3, [pc, #196]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	4a30      	ldr	r2, [pc, #192]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80045b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	4a29      	ldr	r2, [pc, #164]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80045ce:	f043 0304 	orr.w	r3, r3, #4
 80045d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80045d4:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80045e0:	23c0      	movs	r3, #192	@ 0xc0
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e4:	2302      	movs	r3, #2
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ec:	2300      	movs	r3, #0
 80045ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80045f0:	2303      	movs	r3, #3
 80045f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80045f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045f8:	4619      	mov	r1, r3
 80045fa:	4825      	ldr	r0, [pc, #148]	@ (8004690 <HAL_TIM_MspPostInit+0x1e8>)
 80045fc:	f001 ff36 	bl	800646c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004600:	2340      	movs	r3, #64	@ 0x40
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004610:	2303      	movs	r3, #3
 8004612:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004618:	4619      	mov	r1, r3
 800461a:	481e      	ldr	r0, [pc, #120]	@ (8004694 <HAL_TIM_MspPostInit+0x1ec>)
 800461c:	f001 ff26 	bl	800646c <HAL_GPIO_Init>
}
 8004620:	e022      	b.n	8004668 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1c      	ldr	r2, [pc, #112]	@ (8004698 <HAL_TIM_MspPostInit+0x1f0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d11d      	bne.n	8004668 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	4a0f      	ldr	r2, [pc, #60]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 8004636:	f043 0320 	orr.w	r3, r3, #32
 800463a:	6313      	str	r3, [r2, #48]	@ 0x30
 800463c:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <HAL_TIM_MspPostInit+0x1cc>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004648:	2340      	movs	r3, #64	@ 0x40
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464c:	2302      	movs	r3, #2
 800464e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004650:	2301      	movs	r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004654:	2302      	movs	r3, #2
 8004656:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004658:	2303      	movs	r3, #3
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800465c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004660:	4619      	mov	r1, r3
 8004662:	480e      	ldr	r0, [pc, #56]	@ (800469c <HAL_TIM_MspPostInit+0x1f4>)
 8004664:	f001 ff02 	bl	800646c <HAL_GPIO_Init>
}
 8004668:	bf00      	nop
 800466a:	3738      	adds	r7, #56	@ 0x38
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40010000 	.word	0x40010000
 8004674:	40023800 	.word	0x40023800
 8004678:	40021000 	.word	0x40021000
 800467c:	40000800 	.word	0x40000800
 8004680:	40020c00 	.word	0x40020c00
 8004684:	40000c00 	.word	0x40000c00
 8004688:	40021c00 	.word	0x40021c00
 800468c:	40010400 	.word	0x40010400
 8004690:	40022000 	.word	0x40022000
 8004694:	40020800 	.word	0x40020800
 8004698:	40014400 	.word	0x40014400
 800469c:	40021400 	.word	0x40021400

080046a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08e      	sub	sp, #56	@ 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	60da      	str	r2, [r3, #12]
 80046b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a90      	ldr	r2, [pc, #576]	@ (8004900 <HAL_UART_MspInit+0x260>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	f040 80b2 	bne.w	8004828 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046c4:	2300      	movs	r3, #0
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	4b8e      	ldr	r3, [pc, #568]	@ (8004904 <HAL_UART_MspInit+0x264>)
 80046ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046cc:	4a8d      	ldr	r2, [pc, #564]	@ (8004904 <HAL_UART_MspInit+0x264>)
 80046ce:	f043 0310 	orr.w	r3, r3, #16
 80046d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80046d4:	4b8b      	ldr	r3, [pc, #556]	@ (8004904 <HAL_UART_MspInit+0x264>)
 80046d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e0:	2300      	movs	r3, #0
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	4b87      	ldr	r3, [pc, #540]	@ (8004904 <HAL_UART_MspInit+0x264>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	4a86      	ldr	r2, [pc, #536]	@ (8004904 <HAL_UART_MspInit+0x264>)
 80046ea:	f043 0302 	orr.w	r3, r3, #2
 80046ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80046f0:	4b84      	ldr	r3, [pc, #528]	@ (8004904 <HAL_UART_MspInit+0x264>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	4b80      	ldr	r3, [pc, #512]	@ (8004904 <HAL_UART_MspInit+0x264>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004704:	4a7f      	ldr	r2, [pc, #508]	@ (8004904 <HAL_UART_MspInit+0x264>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6313      	str	r3, [r2, #48]	@ 0x30
 800470c:	4b7d      	ldr	r3, [pc, #500]	@ (8004904 <HAL_UART_MspInit+0x264>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004718:	2380      	movs	r3, #128	@ 0x80
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471c:	2302      	movs	r3, #2
 800471e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004720:	2300      	movs	r3, #0
 8004722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004724:	2303      	movs	r3, #3
 8004726:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004728:	2307      	movs	r3, #7
 800472a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004730:	4619      	mov	r1, r3
 8004732:	4875      	ldr	r0, [pc, #468]	@ (8004908 <HAL_UART_MspInit+0x268>)
 8004734:	f001 fe9a 	bl	800646c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473e:	2302      	movs	r3, #2
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004742:	2300      	movs	r3, #0
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004746:	2303      	movs	r3, #3
 8004748:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800474a:	2307      	movs	r3, #7
 800474c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800474e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004752:	4619      	mov	r1, r3
 8004754:	486d      	ldr	r0, [pc, #436]	@ (800490c <HAL_UART_MspInit+0x26c>)
 8004756:	f001 fe89 	bl	800646c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800475a:	4b6d      	ldr	r3, [pc, #436]	@ (8004910 <HAL_UART_MspInit+0x270>)
 800475c:	4a6d      	ldr	r2, [pc, #436]	@ (8004914 <HAL_UART_MspInit+0x274>)
 800475e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004760:	4b6b      	ldr	r3, [pc, #428]	@ (8004910 <HAL_UART_MspInit+0x270>)
 8004762:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004766:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004768:	4b69      	ldr	r3, [pc, #420]	@ (8004910 <HAL_UART_MspInit+0x270>)
 800476a:	2240      	movs	r2, #64	@ 0x40
 800476c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800476e:	4b68      	ldr	r3, [pc, #416]	@ (8004910 <HAL_UART_MspInit+0x270>)
 8004770:	2200      	movs	r2, #0
 8004772:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004774:	4b66      	ldr	r3, [pc, #408]	@ (8004910 <HAL_UART_MspInit+0x270>)
 8004776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800477a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477c:	4b64      	ldr	r3, [pc, #400]	@ (8004910 <HAL_UART_MspInit+0x270>)
 800477e:	2200      	movs	r2, #0
 8004780:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004782:	4b63      	ldr	r3, [pc, #396]	@ (8004910 <HAL_UART_MspInit+0x270>)
 8004784:	2200      	movs	r2, #0
 8004786:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004788:	4b61      	ldr	r3, [pc, #388]	@ (8004910 <HAL_UART_MspInit+0x270>)
 800478a:	2200      	movs	r2, #0
 800478c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800478e:	4b60      	ldr	r3, [pc, #384]	@ (8004910 <HAL_UART_MspInit+0x270>)
 8004790:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004794:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004796:	4b5e      	ldr	r3, [pc, #376]	@ (8004910 <HAL_UART_MspInit+0x270>)
 8004798:	2200      	movs	r2, #0
 800479a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800479c:	485c      	ldr	r0, [pc, #368]	@ (8004910 <HAL_UART_MspInit+0x270>)
 800479e:	f001 fa63 	bl	8005c68 <HAL_DMA_Init>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80047a8:	f7fe fe66 	bl	8003478 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a58      	ldr	r2, [pc, #352]	@ (8004910 <HAL_UART_MspInit+0x270>)
 80047b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80047b2:	4a57      	ldr	r2, [pc, #348]	@ (8004910 <HAL_UART_MspInit+0x270>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80047b8:	4b57      	ldr	r3, [pc, #348]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047ba:	4a58      	ldr	r2, [pc, #352]	@ (800491c <HAL_UART_MspInit+0x27c>)
 80047bc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80047be:	4b56      	ldr	r3, [pc, #344]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80047c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c6:	4b54      	ldr	r3, [pc, #336]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047cc:	4b52      	ldr	r3, [pc, #328]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047d2:	4b51      	ldr	r3, [pc, #324]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047da:	4b4f      	ldr	r3, [pc, #316]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047dc:	2200      	movs	r2, #0
 80047de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80047e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80047ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80047f2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f4:	4b48      	ldr	r3, [pc, #288]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80047fa:	4847      	ldr	r0, [pc, #284]	@ (8004918 <HAL_UART_MspInit+0x278>)
 80047fc:	f001 fa34 	bl	8005c68 <HAL_DMA_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8004806:	f7fe fe37 	bl	8003478 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a42      	ldr	r2, [pc, #264]	@ (8004918 <HAL_UART_MspInit+0x278>)
 800480e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004810:	4a41      	ldr	r2, [pc, #260]	@ (8004918 <HAL_UART_MspInit+0x278>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2105      	movs	r1, #5
 800481a:	2025      	movs	r0, #37	@ 0x25
 800481c:	f001 f9ed 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004820:	2025      	movs	r0, #37	@ 0x25
 8004822:	f001 fa06 	bl	8005c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004826:	e11c      	b.n	8004a62 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a3c      	ldr	r2, [pc, #240]	@ (8004920 <HAL_UART_MspInit+0x280>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d17e      	bne.n	8004930 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	4b33      	ldr	r3, [pc, #204]	@ (8004904 <HAL_UART_MspInit+0x264>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <HAL_UART_MspInit+0x264>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004840:	6413      	str	r3, [r2, #64]	@ 0x40
 8004842:	4b30      	ldr	r3, [pc, #192]	@ (8004904 <HAL_UART_MspInit+0x264>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <HAL_UART_MspInit+0x264>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	4a2b      	ldr	r2, [pc, #172]	@ (8004904 <HAL_UART_MspInit+0x264>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6313      	str	r3, [r2, #48]	@ 0x30
 800485e:	4b29      	ldr	r3, [pc, #164]	@ (8004904 <HAL_UART_MspInit+0x264>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800486a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004870:	2302      	movs	r3, #2
 8004872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004874:	2300      	movs	r3, #0
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004878:	2303      	movs	r3, #3
 800487a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800487c:	2307      	movs	r3, #7
 800487e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004884:	4619      	mov	r1, r3
 8004886:	4827      	ldr	r0, [pc, #156]	@ (8004924 <HAL_UART_MspInit+0x284>)
 8004888:	f001 fdf0 	bl	800646c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800488c:	4b26      	ldr	r3, [pc, #152]	@ (8004928 <HAL_UART_MspInit+0x288>)
 800488e:	4a27      	ldr	r2, [pc, #156]	@ (800492c <HAL_UART_MspInit+0x28c>)
 8004890:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004892:	4b25      	ldr	r3, [pc, #148]	@ (8004928 <HAL_UART_MspInit+0x288>)
 8004894:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004898:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800489a:	4b23      	ldr	r3, [pc, #140]	@ (8004928 <HAL_UART_MspInit+0x288>)
 800489c:	2200      	movs	r2, #0
 800489e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048a0:	4b21      	ldr	r3, [pc, #132]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048a6:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80048ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048c0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80048c2:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048c4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80048c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048ca:	4b17      	ldr	r3, [pc, #92]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80048d0:	4815      	ldr	r0, [pc, #84]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048d2:	f001 f9c9 	bl	8005c68 <HAL_DMA_Init>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80048dc:	f7fe fdcc 	bl	8003478 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a11      	ldr	r2, [pc, #68]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80048e6:	4a10      	ldr	r2, [pc, #64]	@ (8004928 <HAL_UART_MspInit+0x288>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80048ec:	2200      	movs	r2, #0
 80048ee:	2105      	movs	r1, #5
 80048f0:	2027      	movs	r0, #39	@ 0x27
 80048f2:	f001 f982 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80048f6:	2027      	movs	r0, #39	@ 0x27
 80048f8:	f001 f99b 	bl	8005c32 <HAL_NVIC_EnableIRQ>
}
 80048fc:	e0b1      	b.n	8004a62 <HAL_UART_MspInit+0x3c2>
 80048fe:	bf00      	nop
 8004900:	40011000 	.word	0x40011000
 8004904:	40023800 	.word	0x40023800
 8004908:	40020400 	.word	0x40020400
 800490c:	40020000 	.word	0x40020000
 8004910:	20000a00 	.word	0x20000a00
 8004914:	400264b8 	.word	0x400264b8
 8004918:	20000a60 	.word	0x20000a60
 800491c:	40026440 	.word	0x40026440
 8004920:	40004800 	.word	0x40004800
 8004924:	40020800 	.word	0x40020800
 8004928:	20000ac0 	.word	0x20000ac0
 800492c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a4d      	ldr	r2, [pc, #308]	@ (8004a6c <HAL_UART_MspInit+0x3cc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	f040 8093 	bne.w	8004a62 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	4b4b      	ldr	r3, [pc, #300]	@ (8004a70 <HAL_UART_MspInit+0x3d0>)
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	4a4a      	ldr	r2, [pc, #296]	@ (8004a70 <HAL_UART_MspInit+0x3d0>)
 8004946:	f043 0320 	orr.w	r3, r3, #32
 800494a:	6453      	str	r3, [r2, #68]	@ 0x44
 800494c:	4b48      	ldr	r3, [pc, #288]	@ (8004a70 <HAL_UART_MspInit+0x3d0>)
 800494e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	4b44      	ldr	r3, [pc, #272]	@ (8004a70 <HAL_UART_MspInit+0x3d0>)
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	4a43      	ldr	r2, [pc, #268]	@ (8004a70 <HAL_UART_MspInit+0x3d0>)
 8004962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004966:	6313      	str	r3, [r2, #48]	@ 0x30
 8004968:	4b41      	ldr	r3, [pc, #260]	@ (8004a70 <HAL_UART_MspInit+0x3d0>)
 800496a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004974:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497a:	2302      	movs	r3, #2
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004982:	2303      	movs	r3, #3
 8004984:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004986:	2308      	movs	r3, #8
 8004988:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800498a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800498e:	4619      	mov	r1, r3
 8004990:	4838      	ldr	r0, [pc, #224]	@ (8004a74 <HAL_UART_MspInit+0x3d4>)
 8004992:	f001 fd6b 	bl	800646c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004996:	4b38      	ldr	r3, [pc, #224]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 8004998:	4a38      	ldr	r2, [pc, #224]	@ (8004a7c <HAL_UART_MspInit+0x3dc>)
 800499a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800499c:	4b36      	ldr	r3, [pc, #216]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 800499e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80049a2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049a4:	4b34      	ldr	r3, [pc, #208]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049aa:	4b33      	ldr	r3, [pc, #204]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049b0:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049b6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049be:	4b2e      	ldr	r3, [pc, #184]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80049c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80049d0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049d2:	4b29      	ldr	r3, [pc, #164]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80049d8:	4827      	ldr	r0, [pc, #156]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049da:	f001 f945 	bl	8005c68 <HAL_DMA_Init>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_MspInit+0x348>
      Error_Handler();
 80049e4:	f7fe fd48 	bl	8003478 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a23      	ldr	r2, [pc, #140]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80049ee:	4a22      	ldr	r2, [pc, #136]	@ (8004a78 <HAL_UART_MspInit+0x3d8>)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80049f4:	4b22      	ldr	r3, [pc, #136]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 80049f6:	4a23      	ldr	r2, [pc, #140]	@ (8004a84 <HAL_UART_MspInit+0x3e4>)
 80049f8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80049fa:	4b21      	ldr	r3, [pc, #132]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 80049fc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004a00:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a02:	4b1f      	ldr	r3, [pc, #124]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a04:	2240      	movs	r2, #64	@ 0x40
 8004a06:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a08:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a14:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a16:	4b1a      	ldr	r3, [pc, #104]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a1c:	4b18      	ldr	r3, [pc, #96]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004a22:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a28:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004a2e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a30:	4b13      	ldr	r3, [pc, #76]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004a36:	4812      	ldr	r0, [pc, #72]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a38:	f001 f916 	bl	8005c68 <HAL_DMA_Init>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004a42:	f7fe fd19 	bl	8003478 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a0d      	ldr	r2, [pc, #52]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a80 <HAL_UART_MspInit+0x3e0>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004a52:	2200      	movs	r2, #0
 8004a54:	2105      	movs	r1, #5
 8004a56:	2047      	movs	r0, #71	@ 0x47
 8004a58:	f001 f8cf 	bl	8005bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004a5c:	2047      	movs	r0, #71	@ 0x47
 8004a5e:	f001 f8e8 	bl	8005c32 <HAL_NVIC_EnableIRQ>
}
 8004a62:	bf00      	nop
 8004a64:	3738      	adds	r7, #56	@ 0x38
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40011400 	.word	0x40011400
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40021800 	.word	0x40021800
 8004a78:	20000b20 	.word	0x20000b20
 8004a7c:	40026428 	.word	0x40026428
 8004a80:	20000b80 	.word	0x20000b80
 8004a84:	400264a0 	.word	0x400264a0

08004a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004a8c:	f003 f90e 	bl	8007cac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <NMI_Handler+0x8>

08004a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <HardFault_Handler+0x4>

08004a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004aa0:	bf00      	nop
 8004aa2:	e7fd      	b.n	8004aa0 <MemManage_Handler+0x4>

08004aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004aa8:	bf00      	nop
 8004aaa:	e7fd      	b.n	8004aa8 <BusFault_Handler+0x4>

08004aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <UsageFault_Handler+0x4>

08004ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ac6:	f000 f93b 	bl	8004d40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004aca:	f007 fc21 	bl	800c310 <xTaskGetSchedulerState>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004ad4:	f008 faf8 	bl	800d0c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ad8:	bf00      	nop
 8004ada:	bd80      	pop	{r7, pc}

08004adc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004ae0:	2008      	movs	r0, #8
 8004ae2:	f001 fe79 	bl	80067d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8004ae6:	4802      	ldr	r0, [pc, #8]	@ (8004af0 <EXTI3_IRQHandler+0x14>)
 8004ae8:	f7fd fc5c 	bl	80023a4 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8004aec:	bf00      	nop
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	200006c4 	.word	0x200006c4

08004af4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8004af8:	2010      	movs	r0, #16
 8004afa:	f001 fe6d 	bl	80067d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004b08:	4802      	ldr	r0, [pc, #8]	@ (8004b14 <DMA1_Stream1_IRQHandler+0x10>)
 8004b0a:	f001 fa45 	bl	8005f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004b0e:	bf00      	nop
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000ac0 	.word	0x20000ac0

08004b18 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004b1c:	4802      	ldr	r0, [pc, #8]	@ (8004b28 <CAN1_RX0_IRQHandler+0x10>)
 8004b1e:	f000 fd62 	bl	80055e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	200006d0 	.word	0x200006d0

08004b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b30:	4802      	ldr	r0, [pc, #8]	@ (8004b3c <USART1_IRQHandler+0x10>)
 8004b32:	f004 fca5 	bl	8009480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000934 	.word	0x20000934

08004b40 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004b44:	4802      	ldr	r0, [pc, #8]	@ (8004b50 <DMA2_Stream1_IRQHandler+0x10>)
 8004b46:	f001 fa27 	bl	8005f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000b20 	.word	0x20000b20

08004b54 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004b58:	4802      	ldr	r0, [pc, #8]	@ (8004b64 <DMA2_Stream2_IRQHandler+0x10>)
 8004b5a:	f001 fa1d 	bl	8005f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000a60 	.word	0x20000a60

08004b68 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004b6c:	4802      	ldr	r0, [pc, #8]	@ (8004b78 <CAN2_RX0_IRQHandler+0x10>)
 8004b6e:	f000 fd3a 	bl	80055e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200006f8 	.word	0x200006f8

08004b7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004b80:	4802      	ldr	r0, [pc, #8]	@ (8004b8c <DMA2_Stream6_IRQHandler+0x10>)
 8004b82:	f001 fa09 	bl	8005f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000b80 	.word	0x20000b80

08004b90 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004b94:	4802      	ldr	r0, [pc, #8]	@ (8004ba0 <DMA2_Stream7_IRQHandler+0x10>)
 8004b96:	f001 f9ff 	bl	8005f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000a00 	.word	0x20000a00

08004ba4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004ba8:	4802      	ldr	r0, [pc, #8]	@ (8004bb4 <USART6_IRQHandler+0x10>)
 8004baa:	f004 fc69 	bl	8009480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200009bc 	.word	0x200009bc

08004bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bc0:	4a14      	ldr	r2, [pc, #80]	@ (8004c14 <_sbrk+0x5c>)
 8004bc2:	4b15      	ldr	r3, [pc, #84]	@ (8004c18 <_sbrk+0x60>)
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bcc:	4b13      	ldr	r3, [pc, #76]	@ (8004c1c <_sbrk+0x64>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bd4:	4b11      	ldr	r3, [pc, #68]	@ (8004c1c <_sbrk+0x64>)
 8004bd6:	4a12      	ldr	r2, [pc, #72]	@ (8004c20 <_sbrk+0x68>)
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bda:	4b10      	ldr	r3, [pc, #64]	@ (8004c1c <_sbrk+0x64>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d207      	bcs.n	8004bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004be8:	f008 fd6c 	bl	800d6c4 <__errno>
 8004bec:	4603      	mov	r3, r0
 8004bee:	220c      	movs	r2, #12
 8004bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bf6:	e009      	b.n	8004c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bf8:	4b08      	ldr	r3, [pc, #32]	@ (8004c1c <_sbrk+0x64>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bfe:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <_sbrk+0x64>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	4a05      	ldr	r2, [pc, #20]	@ (8004c1c <_sbrk+0x64>)
 8004c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20020000 	.word	0x20020000
 8004c18:	00000400 	.word	0x00000400
 8004c1c:	20000c78 	.word	0x20000c78
 8004c20:	200057b0 	.word	0x200057b0

08004c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c28:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <SystemInit+0x20>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2e:	4a05      	ldr	r2, [pc, #20]	@ (8004c44 <SystemInit+0x20>)
 8004c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c4c:	480d      	ldr	r0, [pc, #52]	@ (8004c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c4e:	490e      	ldr	r1, [pc, #56]	@ (8004c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c50:	4a0e      	ldr	r2, [pc, #56]	@ (8004c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c54:	e002      	b.n	8004c5c <LoopCopyDataInit>

08004c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c5a:	3304      	adds	r3, #4

08004c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c60:	d3f9      	bcc.n	8004c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c62:	4a0b      	ldr	r2, [pc, #44]	@ (8004c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c64:	4c0b      	ldr	r4, [pc, #44]	@ (8004c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c68:	e001      	b.n	8004c6e <LoopFillZerobss>

08004c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c6c:	3204      	adds	r2, #4

08004c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c70:	d3fb      	bcc.n	8004c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c72:	f7ff ffd7 	bl	8004c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c76:	f008 fd2b 	bl	800d6d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c7a:	f7fd fc01 	bl	8002480 <main>
  bx  lr    
 8004c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c88:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004c8c:	0800e144 	.word	0x0800e144
  ldr r2, =_sbss
 8004c90:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004c94:	200057b0 	.word	0x200057b0

08004c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c98:	e7fe      	b.n	8004c98 <ADC_IRQHandler>
	...

08004c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8004cdc <HAL_Init+0x40>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8004cdc <HAL_Init+0x40>)
 8004ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cac:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_Init+0x40>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <HAL_Init+0x40>)
 8004cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cb8:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <HAL_Init+0x40>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a07      	ldr	r2, [pc, #28]	@ (8004cdc <HAL_Init+0x40>)
 8004cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cc4:	2003      	movs	r0, #3
 8004cc6:	f000 ff8d 	bl	8005be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cca:	200f      	movs	r0, #15
 8004ccc:	f000 f808 	bl	8004ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cd0:	f7ff f9b6 	bl	8004040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40023c00 	.word	0x40023c00

08004ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ce8:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <HAL_InitTick+0x54>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <HAL_InitTick+0x58>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 ffa5 	bl	8005c4e <HAL_SYSTICK_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e00e      	b.n	8004d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b0f      	cmp	r3, #15
 8004d12:	d80a      	bhi.n	8004d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d14:	2200      	movs	r2, #0
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d1c:	f000 ff6d 	bl	8005bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d20:	4a06      	ldr	r2, [pc, #24]	@ (8004d3c <HAL_InitTick+0x5c>)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	e000      	b.n	8004d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	2000001c 	.word	0x2000001c
 8004d38:	20000024 	.word	0x20000024
 8004d3c:	20000020 	.word	0x20000020

08004d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_IncTick+0x20>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <HAL_IncTick+0x24>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4413      	add	r3, r2
 8004d50:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <HAL_IncTick+0x24>)
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000024 	.word	0x20000024
 8004d64:	20000c7c 	.word	0x20000c7c

08004d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d6c:	4b03      	ldr	r3, [pc, #12]	@ (8004d7c <HAL_GetTick+0x14>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000c7c 	.word	0x20000c7c

08004d80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e0ed      	b.n	8004f6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff f97a 	bl	8004098 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004db4:	f7ff ffd8 	bl	8004d68 <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004dba:	e012      	b.n	8004de2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004dbc:	f7ff ffd4 	bl	8004d68 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b0a      	cmp	r3, #10
 8004dc8:	d90b      	bls.n	8004de2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2205      	movs	r2, #5
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e0c5      	b.n	8004f6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0e5      	beq.n	8004dbc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0202 	bic.w	r2, r2, #2
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e00:	f7ff ffb2 	bl	8004d68 <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e06:	e012      	b.n	8004e2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e08:	f7ff ffae 	bl	8004d68 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b0a      	cmp	r3, #10
 8004e14:	d90b      	bls.n	8004e2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2205      	movs	r2, #5
 8004e26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e09f      	b.n	8004f6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e5      	bne.n	8004e08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	7e1b      	ldrb	r3, [r3, #24]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d108      	bne.n	8004e56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e007      	b.n	8004e66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7e5b      	ldrb	r3, [r3, #25]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d108      	bne.n	8004e80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e007      	b.n	8004e90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7e9b      	ldrb	r3, [r3, #26]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d108      	bne.n	8004eaa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0220 	orr.w	r2, r2, #32
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e007      	b.n	8004eba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0220 	bic.w	r2, r2, #32
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7edb      	ldrb	r3, [r3, #27]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d108      	bne.n	8004ed4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0210 	bic.w	r2, r2, #16
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e007      	b.n	8004ee4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0210 	orr.w	r2, r2, #16
 8004ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	7f1b      	ldrb	r3, [r3, #28]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d108      	bne.n	8004efe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0208 	orr.w	r2, r2, #8
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e007      	b.n	8004f0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0208 	bic.w	r2, r2, #8
 8004f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	7f5b      	ldrb	r3, [r3, #29]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d108      	bne.n	8004f28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0204 	orr.w	r2, r2, #4
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e007      	b.n	8004f38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0204 	bic.w	r2, r2, #4
 8004f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	ea42 0103 	orr.w	r1, r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	1e5a      	subs	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d003      	beq.n	8004f9e <HAL_CAN_ConfigFilter+0x26>
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	f040 80be 	bne.w	800511a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004f9e:	4b65      	ldr	r3, [pc, #404]	@ (8005134 <HAL_CAN_ConfigFilter+0x1bc>)
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004fa8:	f043 0201 	orr.w	r2, r3, #1
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004fb8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2201      	movs	r2, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d123      	bne.n	8005048 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	43db      	mvns	r3, r3
 800500a:	401a      	ands	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005022:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3248      	adds	r2, #72	@ 0x48
 8005028:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800503c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800503e:	6979      	ldr	r1, [r7, #20]
 8005040:	3348      	adds	r3, #72	@ 0x48
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	440b      	add	r3, r1
 8005046:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d122      	bne.n	8005096 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	431a      	orrs	r2, r3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005070:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3248      	adds	r2, #72	@ 0x48
 8005076:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800508a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800508c:	6979      	ldr	r1, [r7, #20]
 800508e:	3348      	adds	r3, #72	@ 0x48
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	440b      	add	r3, r1
 8005094:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	401a      	ands	r2, r3
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80050b0:	e007      	b.n	80050c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	43db      	mvns	r3, r3
 80050d4:	401a      	ands	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80050dc:	e007      	b.n	80050ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d107      	bne.n	8005106 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	431a      	orrs	r2, r3
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800510c:	f023 0201 	bic.w	r2, r3, #1
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	e006      	b.n	8005128 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40006400 	.word	0x40006400

08005138 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d12e      	bne.n	80051aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005164:	f7ff fe00 	bl	8004d68 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800516a:	e012      	b.n	8005192 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800516c:	f7ff fdfc 	bl	8004d68 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b0a      	cmp	r3, #10
 8005178:	d90b      	bls.n	8005192 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2205      	movs	r2, #5
 800518a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e012      	b.n	80051b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e5      	bne.n	800516c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e006      	b.n	80051b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	@ 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80051de:	7ffb      	ldrb	r3, [r7, #31]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d003      	beq.n	80051ec <HAL_CAN_AddTxMessage+0x2c>
 80051e4:	7ffb      	ldrb	r3, [r7, #31]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	f040 80b8 	bne.w	800535c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80a0 	beq.w	800534c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	0e1b      	lsrs	r3, r3, #24
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d907      	bls.n	800522c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e09e      	b.n	800536a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800522c:	2201      	movs	r2, #1
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	409a      	lsls	r2, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10d      	bne.n	800525a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005248:	68f9      	ldr	r1, [r7, #12]
 800524a:	6809      	ldr	r1, [r1, #0]
 800524c:	431a      	orrs	r2, r3
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3318      	adds	r3, #24
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	440b      	add	r3, r1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e00f      	b.n	800527a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005264:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800526a:	68f9      	ldr	r1, [r7, #12]
 800526c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800526e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3318      	adds	r3, #24
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	440b      	add	r3, r1
 8005278:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6819      	ldr	r1, [r3, #0]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3318      	adds	r3, #24
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	440b      	add	r3, r1
 800528a:	3304      	adds	r3, #4
 800528c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	7d1b      	ldrb	r3, [r3, #20]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d111      	bne.n	80052ba <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	3318      	adds	r3, #24
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	4413      	add	r3, r2
 80052a2:	3304      	adds	r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	6811      	ldr	r1, [r2, #0]
 80052aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3318      	adds	r3, #24
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	440b      	add	r3, r1
 80052b6:	3304      	adds	r3, #4
 80052b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3307      	adds	r3, #7
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	061a      	lsls	r2, r3, #24
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3306      	adds	r3, #6
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3305      	adds	r3, #5
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	4313      	orrs	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	3204      	adds	r2, #4
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	4610      	mov	r0, r2
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	6811      	ldr	r1, [r2, #0]
 80052e2:	ea43 0200 	orr.w	r2, r3, r0
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	440b      	add	r3, r1
 80052ec:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80052f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3303      	adds	r3, #3
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	061a      	lsls	r2, r3, #24
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3302      	adds	r3, #2
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3301      	adds	r3, #1
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	4313      	orrs	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	4610      	mov	r0, r2
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	6811      	ldr	r1, [r2, #0]
 8005318:	ea43 0200 	orr.w	r2, r3, r0
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	440b      	add	r3, r1
 8005322:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005326:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	3318      	adds	r3, #24
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	4413      	add	r3, r2
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	6811      	ldr	r1, [r2, #0]
 800533a:	f043 0201 	orr.w	r2, r3, #1
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3318      	adds	r3, #24
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	440b      	add	r3, r1
 8005346:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e00e      	b.n	800536a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e006      	b.n	800536a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3724      	adds	r7, #36	@ 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005376:	b480      	push	{r7}
 8005378:	b087      	sub	sp, #28
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800538a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d003      	beq.n	800539a <HAL_CAN_GetRxMessage+0x24>
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b02      	cmp	r3, #2
 8005396:	f040 80f3 	bne.w	8005580 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10e      	bne.n	80053be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d116      	bne.n	80053dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0e7      	b.n	800558e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d107      	bne.n	80053dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e0d8      	b.n	800558e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	331b      	adds	r3, #27
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	4413      	add	r3, r2
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0204 	and.w	r2, r3, #4
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10c      	bne.n	8005414 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	331b      	adds	r3, #27
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	4413      	add	r3, r2
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	0d5b      	lsrs	r3, r3, #21
 800540a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e00b      	b.n	800542c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	331b      	adds	r3, #27
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4413      	add	r3, r2
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	08db      	lsrs	r3, r3, #3
 8005424:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	331b      	adds	r3, #27
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	4413      	add	r3, r2
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0202 	and.w	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	331b      	adds	r3, #27
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	4413      	add	r3, r2
 800544e:	3304      	adds	r3, #4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 020f 	and.w	r2, r3, #15
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	331b      	adds	r3, #27
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	4413      	add	r3, r2
 8005466:	3304      	adds	r3, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	b2da      	uxtb	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	331b      	adds	r3, #27
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4413      	add	r3, r2
 800547e:	3304      	adds	r3, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	0c1b      	lsrs	r3, r3, #16
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	4413      	add	r3, r2
 8005494:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	0a1a      	lsrs	r2, r3, #8
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	0c1a      	lsrs	r2, r3, #16
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	3302      	adds	r3, #2
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	4413      	add	r3, r2
 80054de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	0e1a      	lsrs	r2, r3, #24
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	3303      	adds	r3, #3
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	3304      	adds	r3, #4
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	4413      	add	r3, r2
 8005510:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	0a1a      	lsrs	r2, r3, #8
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	3305      	adds	r3, #5
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4413      	add	r3, r2
 800552a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	0c1a      	lsrs	r2, r3, #16
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	3306      	adds	r3, #6
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	4413      	add	r3, r2
 8005544:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	0e1a      	lsrs	r2, r3, #24
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	3307      	adds	r3, #7
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0220 	orr.w	r2, r2, #32
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	e007      	b.n	800557c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0220 	orr.w	r2, r2, #32
 800557a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e006      	b.n	800558e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
  }
}
 800558e:	4618      	mov	r0, r3
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055aa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d002      	beq.n	80055b8 <HAL_CAN_ActivateNotification+0x1e>
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d109      	bne.n	80055cc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e006      	b.n	80055da <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b08a      	sub	sp, #40	@ 0x28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d07c      	beq.n	8005726 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d023      	beq.n	800567e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f983 	bl	8005954 <HAL_CAN_TxMailbox0CompleteCallback>
 800564e:	e016      	b.n	800567e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d004      	beq.n	8005664 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
 8005662:	e00c      	b.n	800567e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
 8005676:	e002      	b.n	800567e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f989 	bl	8005990 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d024      	beq.n	80056d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005690:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f963 	bl	8005968 <HAL_CAN_TxMailbox1CompleteCallback>
 80056a2:	e016      	b.n	80056d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b6:	e00c      	b.n	80056d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d004      	beq.n	80056cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ca:	e002      	b.n	80056d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f969 	bl	80059a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d024      	beq.n	8005726 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80056e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f943 	bl	800597c <HAL_CAN_TxMailbox2CompleteCallback>
 80056f6:	e016      	b.n	8005726 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005708:	627b      	str	r3, [r7, #36]	@ 0x24
 800570a:	e00c      	b.n	8005726 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
 800571e:	e002      	b.n	8005726 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f949 	bl	80059b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2210      	movs	r2, #16
 8005748:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2208      	movs	r2, #8
 8005764:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f930 	bl	80059cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7fb fc87 	bl	8001098 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00c      	beq.n	80057ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f003 0310 	and.w	r3, r3, #16
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2210      	movs	r2, #16
 80057ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2208      	movs	r2, #8
 80057c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f912 	bl	80059f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d009      	beq.n	80057ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8f9 	bl	80059e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d006      	beq.n	8005810 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2210      	movs	r2, #16
 8005808:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8fc 	bl	8005a08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d006      	beq.n	8005832 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2208      	movs	r2, #8
 800582a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f8f5 	bl	8005a1c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d07b      	beq.n	8005934 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d072      	beq.n	800592c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	f043 0301 	orr.w	r3, r3, #1
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	f043 0304 	orr.w	r3, r3, #4
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d043      	beq.n	800592c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d03e      	beq.n	800592c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058b4:	2b60      	cmp	r3, #96	@ 0x60
 80058b6:	d02b      	beq.n	8005910 <HAL_CAN_IRQHandler+0x32a>
 80058b8:	2b60      	cmp	r3, #96	@ 0x60
 80058ba:	d82e      	bhi.n	800591a <HAL_CAN_IRQHandler+0x334>
 80058bc:	2b50      	cmp	r3, #80	@ 0x50
 80058be:	d022      	beq.n	8005906 <HAL_CAN_IRQHandler+0x320>
 80058c0:	2b50      	cmp	r3, #80	@ 0x50
 80058c2:	d82a      	bhi.n	800591a <HAL_CAN_IRQHandler+0x334>
 80058c4:	2b40      	cmp	r3, #64	@ 0x40
 80058c6:	d019      	beq.n	80058fc <HAL_CAN_IRQHandler+0x316>
 80058c8:	2b40      	cmp	r3, #64	@ 0x40
 80058ca:	d826      	bhi.n	800591a <HAL_CAN_IRQHandler+0x334>
 80058cc:	2b30      	cmp	r3, #48	@ 0x30
 80058ce:	d010      	beq.n	80058f2 <HAL_CAN_IRQHandler+0x30c>
 80058d0:	2b30      	cmp	r3, #48	@ 0x30
 80058d2:	d822      	bhi.n	800591a <HAL_CAN_IRQHandler+0x334>
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d002      	beq.n	80058de <HAL_CAN_IRQHandler+0x2f8>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d005      	beq.n	80058e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80058dc:	e01d      	b.n	800591a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	f043 0308 	orr.w	r3, r3, #8
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058e6:	e019      	b.n	800591c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	f043 0310 	orr.w	r3, r3, #16
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058f0:	e014      	b.n	800591c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	f043 0320 	orr.w	r3, r3, #32
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80058fa:	e00f      	b.n	800591c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005904:	e00a      	b.n	800591c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800590e:	e005      	b.n	800591c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005918:	e000      	b.n	800591c <HAL_CAN_IRQHandler+0x336>
            break;
 800591a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800592a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2204      	movs	r2, #4
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f872 	bl	8005a30 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800594c:	bf00      	nop
 800594e:	3728      	adds	r7, #40	@ 0x28
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a54:	4b0c      	ldr	r3, [pc, #48]	@ (8005a88 <__NVIC_SetPriorityGrouping+0x44>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a60:	4013      	ands	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a76:	4a04      	ldr	r2, [pc, #16]	@ (8005a88 <__NVIC_SetPriorityGrouping+0x44>)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	60d3      	str	r3, [r2, #12]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a90:	4b04      	ldr	r3, [pc, #16]	@ (8005aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f003 0307 	and.w	r3, r3, #7
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000ed00 	.word	0xe000ed00

08005aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	db0b      	blt.n	8005ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	f003 021f 	and.w	r2, r3, #31
 8005ac0:	4907      	ldr	r1, [pc, #28]	@ (8005ae0 <__NVIC_EnableIRQ+0x38>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	2001      	movs	r0, #1
 8005aca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000e100 	.word	0xe000e100

08005ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	6039      	str	r1, [r7, #0]
 8005aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	db0a      	blt.n	8005b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	490c      	ldr	r1, [pc, #48]	@ (8005b30 <__NVIC_SetPriority+0x4c>)
 8005afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b02:	0112      	lsls	r2, r2, #4
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	440b      	add	r3, r1
 8005b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b0c:	e00a      	b.n	8005b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	4908      	ldr	r1, [pc, #32]	@ (8005b34 <__NVIC_SetPriority+0x50>)
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	3b04      	subs	r3, #4
 8005b1c:	0112      	lsls	r2, r2, #4
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	440b      	add	r3, r1
 8005b22:	761a      	strb	r2, [r3, #24]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	e000e100 	.word	0xe000e100
 8005b34:	e000ed00 	.word	0xe000ed00

08005b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	@ 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f1c3 0307 	rsb	r3, r3, #7
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	bf28      	it	cs
 8005b56:	2304      	movcs	r3, #4
 8005b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2b06      	cmp	r3, #6
 8005b60:	d902      	bls.n	8005b68 <NVIC_EncodePriority+0x30>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3b03      	subs	r3, #3
 8005b66:	e000      	b.n	8005b6a <NVIC_EncodePriority+0x32>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43da      	mvns	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	43d9      	mvns	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b90:	4313      	orrs	r3, r2
         );
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3724      	adds	r7, #36	@ 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bb0:	d301      	bcc.n	8005bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e00f      	b.n	8005bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005be0 <SysTick_Config+0x40>)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bbe:	210f      	movs	r1, #15
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bc4:	f7ff ff8e 	bl	8005ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bc8:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <SysTick_Config+0x40>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bce:	4b04      	ldr	r3, [pc, #16]	@ (8005be0 <SysTick_Config+0x40>)
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	e000e010 	.word	0xe000e010

08005be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff29 	bl	8005a44 <__NVIC_SetPriorityGrouping>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	4603      	mov	r3, r0
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c0c:	f7ff ff3e 	bl	8005a8c <__NVIC_GetPriorityGrouping>
 8005c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	6978      	ldr	r0, [r7, #20]
 8005c18:	f7ff ff8e 	bl	8005b38 <NVIC_EncodePriority>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff5d 	bl	8005ae4 <__NVIC_SetPriority>
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	4603      	mov	r3, r0
 8005c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff31 	bl	8005aa8 <__NVIC_EnableIRQ>
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff ffa2 	bl	8005ba0 <SysTick_Config>
 8005c5c:	4603      	mov	r3, r0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c74:	f7ff f878 	bl	8004d68 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e099      	b.n	8005db8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ca4:	e00f      	b.n	8005cc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ca6:	f7ff f85f 	bl	8004d68 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b05      	cmp	r3, #5
 8005cb2:	d908      	bls.n	8005cc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e078      	b.n	8005db8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e8      	bne.n	8005ca6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4b38      	ldr	r3, [pc, #224]	@ (8005dc0 <HAL_DMA_Init+0x158>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d107      	bne.n	8005d30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0307 	bic.w	r3, r3, #7
 8005d46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d117      	bne.n	8005d8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fb01 	bl	8006374 <DMA_CheckFifoParam>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2240      	movs	r2, #64	@ 0x40
 8005d7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005d86:	2301      	movs	r3, #1
 8005d88:	e016      	b.n	8005db8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fab8 	bl	8006308 <DMA_CalcBaseAndBitshift>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da0:	223f      	movs	r2, #63	@ 0x3f
 8005da2:	409a      	lsls	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	f010803f 	.word	0xf010803f

08005dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_DMA_Start_IT+0x26>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e040      	b.n	8005e6c <HAL_DMA_Start_IT+0xa8>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d12f      	bne.n	8005e5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa4a 	bl	80062ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1c:	223f      	movs	r2, #63	@ 0x3f
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0216 	orr.w	r2, r2, #22
 8005e32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0208 	orr.w	r2, r2, #8
 8005e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e005      	b.n	8005e6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
 8005e68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e82:	f7fe ff71 	bl	8004d68 <HAL_GetTick>
 8005e86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d008      	beq.n	8005ea6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2280      	movs	r2, #128	@ 0x80
 8005e98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e052      	b.n	8005f4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0216 	bic.w	r2, r2, #22
 8005eb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ec4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <HAL_DMA_Abort+0x62>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0208 	bic.w	r2, r2, #8
 8005ee4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ef6:	e013      	b.n	8005f20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ef8:	f7fe ff36 	bl	8004d68 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d90c      	bls.n	8005f20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2203      	movs	r2, #3
 8005f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e015      	b.n	8005f4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e4      	bne.n	8005ef8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f32:	223f      	movs	r2, #63	@ 0x3f
 8005f34:	409a      	lsls	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d004      	beq.n	8005f72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2280      	movs	r2, #128	@ 0x80
 8005f6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e00c      	b.n	8005f8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2205      	movs	r2, #5
 8005f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80061e0 <HAL_DMA_IRQHandler+0x248>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a8e      	ldr	r2, [pc, #568]	@ (80061e4 <HAL_DMA_IRQHandler+0x24c>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	0a9b      	lsrs	r3, r3, #10
 8005fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01a      	beq.n	8006004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d013      	beq.n	8006004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0204 	bic.w	r2, r2, #4
 8005fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffc:	f043 0201 	orr.w	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006008:	2201      	movs	r2, #1
 800600a:	409a      	lsls	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4013      	ands	r3, r2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d012      	beq.n	800603a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006026:	2201      	movs	r2, #1
 8006028:	409a      	lsls	r2, r3
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006032:	f043 0202 	orr.w	r2, r3, #2
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603e:	2204      	movs	r2, #4
 8006040:	409a      	lsls	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d012      	beq.n	8006070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605c:	2204      	movs	r2, #4
 800605e:	409a      	lsls	r2, r3
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006068:	f043 0204 	orr.w	r2, r3, #4
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006074:	2210      	movs	r2, #16
 8006076:	409a      	lsls	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d043      	beq.n	8006108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d03c      	beq.n	8006108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006092:	2210      	movs	r2, #16
 8006094:	409a      	lsls	r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d018      	beq.n	80060da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d108      	bne.n	80060c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d024      	beq.n	8006108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
 80060c6:	e01f      	b.n	8006108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01b      	beq.n	8006108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
 80060d8:	e016      	b.n	8006108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d107      	bne.n	80060f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0208 	bic.w	r2, r2, #8
 80060f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800610c:	2220      	movs	r2, #32
 800610e:	409a      	lsls	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 808f 	beq.w	8006238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8087 	beq.w	8006238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612e:	2220      	movs	r2, #32
 8006130:	409a      	lsls	r2, r3
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b05      	cmp	r3, #5
 8006140:	d136      	bne.n	80061b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0216 	bic.w	r2, r2, #22
 8006150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695a      	ldr	r2, [r3, #20]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <HAL_DMA_IRQHandler+0x1da>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0208 	bic.w	r2, r2, #8
 8006180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006186:	223f      	movs	r2, #63	@ 0x3f
 8006188:	409a      	lsls	r2, r3
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d07e      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
        }
        return;
 80061ae:	e079      	b.n	80062a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01d      	beq.n	80061fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10d      	bne.n	80061e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d031      	beq.n	8006238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
 80061dc:	e02c      	b.n	8006238 <HAL_DMA_IRQHandler+0x2a0>
 80061de:	bf00      	nop
 80061e0:	2000001c 	.word	0x2000001c
 80061e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d023      	beq.n	8006238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
 80061f8:	e01e      	b.n	8006238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10f      	bne.n	8006228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0210 	bic.w	r2, r2, #16
 8006216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623c:	2b00      	cmp	r3, #0
 800623e:	d032      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d022      	beq.n	8006292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2205      	movs	r2, #5
 8006250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	3301      	adds	r3, #1
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	429a      	cmp	r2, r3
 800626e:	d307      	bcc.n	8006280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f2      	bne.n	8006264 <HAL_DMA_IRQHandler+0x2cc>
 800627e:	e000      	b.n	8006282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
 80062a2:	e000      	b.n	80062a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80062a4:	bf00      	nop
    }
  }
}
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80062c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b40      	cmp	r3, #64	@ 0x40
 80062d8:	d108      	bne.n	80062ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062ea:	e007      	b.n	80062fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	60da      	str	r2, [r3, #12]
}
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	3b10      	subs	r3, #16
 8006318:	4a14      	ldr	r2, [pc, #80]	@ (800636c <DMA_CalcBaseAndBitshift+0x64>)
 800631a:	fba2 2303 	umull	r2, r3, r2, r3
 800631e:	091b      	lsrs	r3, r3, #4
 8006320:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006322:	4a13      	ldr	r2, [pc, #76]	@ (8006370 <DMA_CalcBaseAndBitshift+0x68>)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d909      	bls.n	800634a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	1d1a      	adds	r2, r3, #4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	659a      	str	r2, [r3, #88]	@ 0x58
 8006348:	e007      	b.n	800635a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	aaaaaaab 	.word	0xaaaaaaab
 8006370:	0800e0f8 	.word	0x0800e0f8

08006374 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006384:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d11f      	bne.n	80063ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d856      	bhi.n	8006442 <DMA_CheckFifoParam+0xce>
 8006394:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <DMA_CheckFifoParam+0x28>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063bf 	.word	0x080063bf
 80063a4:	080063ad 	.word	0x080063ad
 80063a8:	08006443 	.word	0x08006443
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d046      	beq.n	8006446 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063bc:	e043      	b.n	8006446 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063c6:	d140      	bne.n	800644a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063cc:	e03d      	b.n	800644a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d6:	d121      	bne.n	800641c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d837      	bhi.n	800644e <DMA_CheckFifoParam+0xda>
 80063de:	a201      	add	r2, pc, #4	@ (adr r2, 80063e4 <DMA_CheckFifoParam+0x70>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	080063fb 	.word	0x080063fb
 80063ec:	080063f5 	.word	0x080063f5
 80063f0:	0800640d 	.word	0x0800640d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
      break;
 80063f8:	e030      	b.n	800645c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d025      	beq.n	8006452 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800640a:	e022      	b.n	8006452 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006414:	d11f      	bne.n	8006456 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800641a:	e01c      	b.n	8006456 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d903      	bls.n	800642a <DMA_CheckFifoParam+0xb6>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b03      	cmp	r3, #3
 8006426:	d003      	beq.n	8006430 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006428:	e018      	b.n	800645c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]
      break;
 800642e:	e015      	b.n	800645c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00e      	beq.n	800645a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
      break;
 8006440:	e00b      	b.n	800645a <DMA_CheckFifoParam+0xe6>
      break;
 8006442:	bf00      	nop
 8006444:	e00a      	b.n	800645c <DMA_CheckFifoParam+0xe8>
      break;
 8006446:	bf00      	nop
 8006448:	e008      	b.n	800645c <DMA_CheckFifoParam+0xe8>
      break;
 800644a:	bf00      	nop
 800644c:	e006      	b.n	800645c <DMA_CheckFifoParam+0xe8>
      break;
 800644e:	bf00      	nop
 8006450:	e004      	b.n	800645c <DMA_CheckFifoParam+0xe8>
      break;
 8006452:	bf00      	nop
 8006454:	e002      	b.n	800645c <DMA_CheckFifoParam+0xe8>
      break;   
 8006456:	bf00      	nop
 8006458:	e000      	b.n	800645c <DMA_CheckFifoParam+0xe8>
      break;
 800645a:	bf00      	nop
    }
  } 
  
  return status; 
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop

0800646c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800646c:	b480      	push	{r7}
 800646e:	b089      	sub	sp, #36	@ 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800647a:	2300      	movs	r3, #0
 800647c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	e16b      	b.n	8006760 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006488:	2201      	movs	r2, #1
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4013      	ands	r3, r2
 800649a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	f040 815a 	bne.w	800675a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d005      	beq.n	80064be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d130      	bne.n	8006520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	2203      	movs	r2, #3
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43db      	mvns	r3, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4013      	ands	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064f4:	2201      	movs	r2, #1
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4013      	ands	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	091b      	lsrs	r3, r3, #4
 800650a:	f003 0201 	and.w	r2, r3, #1
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	4313      	orrs	r3, r2
 8006518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	2b03      	cmp	r3, #3
 800652a:	d017      	beq.n	800655c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	2203      	movs	r2, #3
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	43db      	mvns	r3, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4013      	ands	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	4313      	orrs	r3, r2
 8006554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d123      	bne.n	80065b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	08da      	lsrs	r2, r3, #3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3208      	adds	r2, #8
 8006570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	220f      	movs	r2, #15
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4013      	ands	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	08da      	lsrs	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3208      	adds	r2, #8
 80065aa:	69b9      	ldr	r1, [r7, #24]
 80065ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	2203      	movs	r2, #3
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	43db      	mvns	r3, r3
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	4013      	ands	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f003 0203 	and.w	r2, r3, #3
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4313      	orrs	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80b4 	beq.w	800675a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	4b60      	ldr	r3, [pc, #384]	@ (8006778 <HAL_GPIO_Init+0x30c>)
 80065f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fa:	4a5f      	ldr	r2, [pc, #380]	@ (8006778 <HAL_GPIO_Init+0x30c>)
 80065fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006600:	6453      	str	r3, [r2, #68]	@ 0x44
 8006602:	4b5d      	ldr	r3, [pc, #372]	@ (8006778 <HAL_GPIO_Init+0x30c>)
 8006604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800660e:	4a5b      	ldr	r2, [pc, #364]	@ (800677c <HAL_GPIO_Init+0x310>)
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	089b      	lsrs	r3, r3, #2
 8006614:	3302      	adds	r3, #2
 8006616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	220f      	movs	r2, #15
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43db      	mvns	r3, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	4013      	ands	r3, r2
 8006630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a52      	ldr	r2, [pc, #328]	@ (8006780 <HAL_GPIO_Init+0x314>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d02b      	beq.n	8006692 <HAL_GPIO_Init+0x226>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a51      	ldr	r2, [pc, #324]	@ (8006784 <HAL_GPIO_Init+0x318>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d025      	beq.n	800668e <HAL_GPIO_Init+0x222>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a50      	ldr	r2, [pc, #320]	@ (8006788 <HAL_GPIO_Init+0x31c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01f      	beq.n	800668a <HAL_GPIO_Init+0x21e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a4f      	ldr	r2, [pc, #316]	@ (800678c <HAL_GPIO_Init+0x320>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d019      	beq.n	8006686 <HAL_GPIO_Init+0x21a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a4e      	ldr	r2, [pc, #312]	@ (8006790 <HAL_GPIO_Init+0x324>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <HAL_GPIO_Init+0x216>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a4d      	ldr	r2, [pc, #308]	@ (8006794 <HAL_GPIO_Init+0x328>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00d      	beq.n	800667e <HAL_GPIO_Init+0x212>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a4c      	ldr	r2, [pc, #304]	@ (8006798 <HAL_GPIO_Init+0x32c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d007      	beq.n	800667a <HAL_GPIO_Init+0x20e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a4b      	ldr	r2, [pc, #300]	@ (800679c <HAL_GPIO_Init+0x330>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d101      	bne.n	8006676 <HAL_GPIO_Init+0x20a>
 8006672:	2307      	movs	r3, #7
 8006674:	e00e      	b.n	8006694 <HAL_GPIO_Init+0x228>
 8006676:	2308      	movs	r3, #8
 8006678:	e00c      	b.n	8006694 <HAL_GPIO_Init+0x228>
 800667a:	2306      	movs	r3, #6
 800667c:	e00a      	b.n	8006694 <HAL_GPIO_Init+0x228>
 800667e:	2305      	movs	r3, #5
 8006680:	e008      	b.n	8006694 <HAL_GPIO_Init+0x228>
 8006682:	2304      	movs	r3, #4
 8006684:	e006      	b.n	8006694 <HAL_GPIO_Init+0x228>
 8006686:	2303      	movs	r3, #3
 8006688:	e004      	b.n	8006694 <HAL_GPIO_Init+0x228>
 800668a:	2302      	movs	r3, #2
 800668c:	e002      	b.n	8006694 <HAL_GPIO_Init+0x228>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_GPIO_Init+0x228>
 8006692:	2300      	movs	r3, #0
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	f002 0203 	and.w	r2, r2, #3
 800669a:	0092      	lsls	r2, r2, #2
 800669c:	4093      	lsls	r3, r2
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066a4:	4935      	ldr	r1, [pc, #212]	@ (800677c <HAL_GPIO_Init+0x310>)
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	089b      	lsrs	r3, r3, #2
 80066aa:	3302      	adds	r3, #2
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066b2:	4b3b      	ldr	r3, [pc, #236]	@ (80067a0 <HAL_GPIO_Init+0x334>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066d6:	4a32      	ldr	r2, [pc, #200]	@ (80067a0 <HAL_GPIO_Init+0x334>)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066dc:	4b30      	ldr	r3, [pc, #192]	@ (80067a0 <HAL_GPIO_Init+0x334>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006700:	4a27      	ldr	r2, [pc, #156]	@ (80067a0 <HAL_GPIO_Init+0x334>)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006706:	4b26      	ldr	r3, [pc, #152]	@ (80067a0 <HAL_GPIO_Init+0x334>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	43db      	mvns	r3, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4013      	ands	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800672a:	4a1d      	ldr	r2, [pc, #116]	@ (80067a0 <HAL_GPIO_Init+0x334>)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006730:	4b1b      	ldr	r3, [pc, #108]	@ (80067a0 <HAL_GPIO_Init+0x334>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	43db      	mvns	r3, r3
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	4013      	ands	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006754:	4a12      	ldr	r2, [pc, #72]	@ (80067a0 <HAL_GPIO_Init+0x334>)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3301      	adds	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b0f      	cmp	r3, #15
 8006764:	f67f ae90 	bls.w	8006488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	3724      	adds	r7, #36	@ 0x24
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800
 800677c:	40013800 	.word	0x40013800
 8006780:	40020000 	.word	0x40020000
 8006784:	40020400 	.word	0x40020400
 8006788:	40020800 	.word	0x40020800
 800678c:	40020c00 	.word	0x40020c00
 8006790:	40021000 	.word	0x40021000
 8006794:	40021400 	.word	0x40021400
 8006798:	40021800 	.word	0x40021800
 800679c:	40021c00 	.word	0x40021c00
 80067a0:	40013c00 	.word	0x40013c00

080067a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	807b      	strh	r3, [r7, #2]
 80067b0:	4613      	mov	r3, r2
 80067b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067b4:	787b      	ldrb	r3, [r7, #1]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ba:	887a      	ldrh	r2, [r7, #2]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067c0:	e003      	b.n	80067ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067c2:	887b      	ldrh	r3, [r7, #2]
 80067c4:	041a      	lsls	r2, r3, #16
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	619a      	str	r2, [r3, #24]
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067e2:	4b08      	ldr	r3, [pc, #32]	@ (8006804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d006      	beq.n	80067fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ee:	4a05      	ldr	r2, [pc, #20]	@ (8006804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067f4:	88fb      	ldrh	r3, [r7, #6]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fb fda0 	bl	800233c <HAL_GPIO_EXTI_Callback>
  }
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40013c00 	.word	0x40013c00

08006808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e12b      	b.n	8006a72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fd fce2 	bl	80041f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2224      	movs	r2, #36	@ 0x24
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800685a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800686a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800686c:	f001 f9f6 	bl	8007c5c <HAL_RCC_GetPCLK1Freq>
 8006870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4a81      	ldr	r2, [pc, #516]	@ (8006a7c <HAL_I2C_Init+0x274>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d807      	bhi.n	800688c <HAL_I2C_Init+0x84>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a80      	ldr	r2, [pc, #512]	@ (8006a80 <HAL_I2C_Init+0x278>)
 8006880:	4293      	cmp	r3, r2
 8006882:	bf94      	ite	ls
 8006884:	2301      	movls	r3, #1
 8006886:	2300      	movhi	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	e006      	b.n	800689a <HAL_I2C_Init+0x92>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a7d      	ldr	r2, [pc, #500]	@ (8006a84 <HAL_I2C_Init+0x27c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	bf94      	ite	ls
 8006894:	2301      	movls	r3, #1
 8006896:	2300      	movhi	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e0e7      	b.n	8006a72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4a78      	ldr	r2, [pc, #480]	@ (8006a88 <HAL_I2C_Init+0x280>)
 80068a6:	fba2 2303 	umull	r2, r3, r2, r3
 80068aa:	0c9b      	lsrs	r3, r3, #18
 80068ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	4a6a      	ldr	r2, [pc, #424]	@ (8006a7c <HAL_I2C_Init+0x274>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d802      	bhi.n	80068dc <HAL_I2C_Init+0xd4>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	3301      	adds	r3, #1
 80068da:	e009      	b.n	80068f0 <HAL_I2C_Init+0xe8>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	4a69      	ldr	r2, [pc, #420]	@ (8006a8c <HAL_I2C_Init+0x284>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	099b      	lsrs	r3, r3, #6
 80068ee:	3301      	adds	r3, #1
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006902:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	495c      	ldr	r1, [pc, #368]	@ (8006a7c <HAL_I2C_Init+0x274>)
 800690c:	428b      	cmp	r3, r1
 800690e:	d819      	bhi.n	8006944 <HAL_I2C_Init+0x13c>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	1e59      	subs	r1, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	fbb1 f3f3 	udiv	r3, r1, r3
 800691e:	1c59      	adds	r1, r3, #1
 8006920:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006924:	400b      	ands	r3, r1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_I2C_Init+0x138>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1e59      	subs	r1, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	fbb1 f3f3 	udiv	r3, r1, r3
 8006938:	3301      	adds	r3, #1
 800693a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693e:	e051      	b.n	80069e4 <HAL_I2C_Init+0x1dc>
 8006940:	2304      	movs	r3, #4
 8006942:	e04f      	b.n	80069e4 <HAL_I2C_Init+0x1dc>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d111      	bne.n	8006970 <HAL_I2C_Init+0x168>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	1e58      	subs	r0, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	440b      	add	r3, r1
 800695a:	fbb0 f3f3 	udiv	r3, r0, r3
 800695e:	3301      	adds	r3, #1
 8006960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf0c      	ite	eq
 8006968:	2301      	moveq	r3, #1
 800696a:	2300      	movne	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	e012      	b.n	8006996 <HAL_I2C_Init+0x18e>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1e58      	subs	r0, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6859      	ldr	r1, [r3, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	0099      	lsls	r1, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	fbb0 f3f3 	udiv	r3, r0, r3
 8006986:	3301      	adds	r3, #1
 8006988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <HAL_I2C_Init+0x196>
 800699a:	2301      	movs	r3, #1
 800699c:	e022      	b.n	80069e4 <HAL_I2C_Init+0x1dc>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10e      	bne.n	80069c4 <HAL_I2C_Init+0x1bc>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1e58      	subs	r0, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6859      	ldr	r1, [r3, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	440b      	add	r3, r1
 80069b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b8:	3301      	adds	r3, #1
 80069ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c2:	e00f      	b.n	80069e4 <HAL_I2C_Init+0x1dc>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1e58      	subs	r0, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6859      	ldr	r1, [r3, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	0099      	lsls	r1, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069da:	3301      	adds	r3, #1
 80069dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	6809      	ldr	r1, [r1, #0]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006a12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6911      	ldr	r1, [r2, #16]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68d2      	ldr	r2, [r2, #12]
 8006a1e:	4311      	orrs	r1, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	000186a0 	.word	0x000186a0
 8006a80:	001e847f 	.word	0x001e847f
 8006a84:	003d08ff 	.word	0x003d08ff
 8006a88:	431bde83 	.word	0x431bde83
 8006a8c:	10624dd3 	.word	0x10624dd3

08006a90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08c      	sub	sp, #48	@ 0x30
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	817b      	strh	r3, [r7, #10]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	813b      	strh	r3, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006aaa:	f7fe f95d 	bl	8004d68 <HAL_GetTick>
 8006aae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	f040 8208 	bne.w	8006ece <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	2319      	movs	r3, #25
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	497b      	ldr	r1, [pc, #492]	@ (8006cb4 <HAL_I2C_Mem_Read+0x224>)
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 faef 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e1fb      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_I2C_Mem_Read+0x56>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e1f4      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d007      	beq.n	8006b0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2222      	movs	r2, #34	@ 0x22
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2240      	movs	r2, #64	@ 0x40
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8006cb8 <HAL_I2C_Mem_Read+0x228>)
 8006b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b4e:	88f8      	ldrh	r0, [r7, #6]
 8006b50:	893a      	ldrh	r2, [r7, #8]
 8006b52:	8979      	ldrh	r1, [r7, #10]
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f9bc 	bl	8006edc <I2C_RequestMemoryRead>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e1b0      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d113      	bne.n	8006b9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b76:	2300      	movs	r3, #0
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	623b      	str	r3, [r7, #32]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	623b      	str	r3, [r7, #32]
 8006b8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e184      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d11b      	bne.n	8006bde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	e164      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d11b      	bne.n	8006c1e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	e144      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c34:	e138      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	f200 80f1 	bhi.w	8006e22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d123      	bne.n	8006c90 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fb44 	bl	80072da <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e139      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c8e:	e10b      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d14e      	bne.n	8006d36 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4906      	ldr	r1, [pc, #24]	@ (8006cbc <HAL_I2C_Mem_Read+0x22c>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fa02 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e10e      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
 8006cb2:	bf00      	nop
 8006cb4:	00100002 	.word	0x00100002
 8006cb8:	ffff0000 	.word	0xffff0000
 8006cbc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d34:	e0b8      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	4966      	ldr	r1, [pc, #408]	@ (8006ed8 <HAL_I2C_Mem_Read+0x448>)
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f9b3 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0bf      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	2200      	movs	r2, #0
 8006d9a:	494f      	ldr	r1, [pc, #316]	@ (8006ed8 <HAL_I2C_Mem_Read+0x448>)
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f985 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e091      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e20:	e042      	b.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 fa57 	bl	80072da <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e04c      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d118      	bne.n	8006ea8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f47f aec2 	bne.w	8006c36 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e000      	b.n	8006ed0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006ece:	2302      	movs	r3, #2
  }
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3728      	adds	r7, #40	@ 0x28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	00010004 	.word	0x00010004

08006edc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	817b      	strh	r3, [r7, #10]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	813b      	strh	r3, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 f8c2 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00d      	beq.n	8006f4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f3c:	d103      	bne.n	8006f46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e0aa      	b.n	80070a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f4a:	897b      	ldrh	r3, [r7, #10]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	6a3a      	ldr	r2, [r7, #32]
 8006f5e:	4952      	ldr	r1, [pc, #328]	@ (80070a8 <I2C_RequestMemoryRead+0x1cc>)
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f8fa 	bl	800715a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e097      	b.n	80070a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f88:	6a39      	ldr	r1, [r7, #32]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f964 	bl	8007258 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00d      	beq.n	8006fb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d107      	bne.n	8006fae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e076      	b.n	80070a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d105      	bne.n	8006fc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fb8:	893b      	ldrh	r3, [r7, #8]
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	611a      	str	r2, [r3, #16]
 8006fc2:	e021      	b.n	8007008 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fc4:	893b      	ldrh	r3, [r7, #8]
 8006fc6:	0a1b      	lsrs	r3, r3, #8
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd4:	6a39      	ldr	r1, [r7, #32]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 f93e 	bl	8007258 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00d      	beq.n	8006ffe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d107      	bne.n	8006ffa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e050      	b.n	80070a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ffe:	893b      	ldrh	r3, [r7, #8]
 8007000:	b2da      	uxtb	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800700a:	6a39      	ldr	r1, [r7, #32]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f923 	bl	8007258 <I2C_WaitOnTXEFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00d      	beq.n	8007034 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701c:	2b04      	cmp	r3, #4
 800701e:	d107      	bne.n	8007030 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800702e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e035      	b.n	80070a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007042:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2200      	movs	r2, #0
 800704c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f82b 	bl	80070ac <I2C_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00d      	beq.n	8007078 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800706a:	d103      	bne.n	8007074 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007072:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e013      	b.n	80070a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007078:	897b      	ldrh	r3, [r7, #10]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	b2da      	uxtb	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	6a3a      	ldr	r2, [r7, #32]
 800708c:	4906      	ldr	r1, [pc, #24]	@ (80070a8 <I2C_RequestMemoryRead+0x1cc>)
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 f863 	bl	800715a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	00010002 	.word	0x00010002

080070ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070bc:	e025      	b.n	800710a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070c4:	d021      	beq.n	800710a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c6:	f7fd fe4f 	bl	8004d68 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d302      	bcc.n	80070dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d116      	bne.n	800710a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f6:	f043 0220 	orr.w	r2, r3, #32
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e023      	b.n	8007152 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d10d      	bne.n	8007130 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	43da      	mvns	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4013      	ands	r3, r2
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	bf0c      	ite	eq
 8007126:	2301      	moveq	r3, #1
 8007128:	2300      	movne	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	e00c      	b.n	800714a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	43da      	mvns	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4013      	ands	r3, r2
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	bf0c      	ite	eq
 8007142:	2301      	moveq	r3, #1
 8007144:	2300      	movne	r3, #0
 8007146:	b2db      	uxtb	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	429a      	cmp	r2, r3
 800714e:	d0b6      	beq.n	80070be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007168:	e051      	b.n	800720e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007178:	d123      	bne.n	80071c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007188:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007192:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ae:	f043 0204 	orr.w	r2, r3, #4
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e046      	b.n	8007250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071c8:	d021      	beq.n	800720e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ca:	f7fd fdcd 	bl	8004d68 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d302      	bcc.n	80071e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d116      	bne.n	800720e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fa:	f043 0220 	orr.w	r2, r3, #32
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e020      	b.n	8007250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d10c      	bne.n	8007232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	43da      	mvns	r2, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4013      	ands	r3, r2
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	bf14      	ite	ne
 800722a:	2301      	movne	r3, #1
 800722c:	2300      	moveq	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	e00b      	b.n	800724a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	43da      	mvns	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4013      	ands	r3, r2
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d18d      	bne.n	800716a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007264:	e02d      	b.n	80072c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f88d 	bl	8007386 <I2C_IsAcknowledgeFailed>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e02d      	b.n	80072d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800727c:	d021      	beq.n	80072c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800727e:	f7fd fd73 	bl	8004d68 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	429a      	cmp	r2, r3
 800728c:	d302      	bcc.n	8007294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d116      	bne.n	80072c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2220      	movs	r2, #32
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	f043 0220 	orr.w	r2, r3, #32
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e007      	b.n	80072d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072cc:	2b80      	cmp	r3, #128	@ 0x80
 80072ce:	d1ca      	bne.n	8007266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072e6:	e042      	b.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0310 	and.w	r3, r3, #16
 80072f2:	2b10      	cmp	r3, #16
 80072f4:	d119      	bne.n	800732a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f06f 0210 	mvn.w	r2, #16
 80072fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e029      	b.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fd fd1d 	bl	8004d68 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d116      	bne.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e007      	b.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007378:	2b40      	cmp	r3, #64	@ 0x40
 800737a:	d1b5      	bne.n	80072e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739c:	d11b      	bne.n	80073d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	f043 0204 	orr.w	r2, r3, #4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e267      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d075      	beq.n	80074ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007402:	4b88      	ldr	r3, [pc, #544]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 030c 	and.w	r3, r3, #12
 800740a:	2b04      	cmp	r3, #4
 800740c:	d00c      	beq.n	8007428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800740e:	4b85      	ldr	r3, [pc, #532]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007416:	2b08      	cmp	r3, #8
 8007418:	d112      	bne.n	8007440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800741a:	4b82      	ldr	r3, [pc, #520]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007422:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007426:	d10b      	bne.n	8007440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007428:	4b7e      	ldr	r3, [pc, #504]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d05b      	beq.n	80074ec <HAL_RCC_OscConfig+0x108>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d157      	bne.n	80074ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e242      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007448:	d106      	bne.n	8007458 <HAL_RCC_OscConfig+0x74>
 800744a:	4b76      	ldr	r3, [pc, #472]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a75      	ldr	r2, [pc, #468]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	e01d      	b.n	8007494 <HAL_RCC_OscConfig+0xb0>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007460:	d10c      	bne.n	800747c <HAL_RCC_OscConfig+0x98>
 8007462:	4b70      	ldr	r3, [pc, #448]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a6f      	ldr	r2, [pc, #444]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	4b6d      	ldr	r3, [pc, #436]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a6c      	ldr	r2, [pc, #432]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	e00b      	b.n	8007494 <HAL_RCC_OscConfig+0xb0>
 800747c:	4b69      	ldr	r3, [pc, #420]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a68      	ldr	r2, [pc, #416]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	4b66      	ldr	r3, [pc, #408]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a65      	ldr	r2, [pc, #404]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 800748e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d013      	beq.n	80074c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800749c:	f7fd fc64 	bl	8004d68 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074a4:	f7fd fc60 	bl	8004d68 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b64      	cmp	r3, #100	@ 0x64
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e207      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0f0      	beq.n	80074a4 <HAL_RCC_OscConfig+0xc0>
 80074c2:	e014      	b.n	80074ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c4:	f7fd fc50 	bl	8004d68 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074cc:	f7fd fc4c 	bl	8004d68 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b64      	cmp	r3, #100	@ 0x64
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e1f3      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074de:	4b51      	ldr	r3, [pc, #324]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0xe8>
 80074ea:	e000      	b.n	80074ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d063      	beq.n	80075c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80074fa:	4b4a      	ldr	r3, [pc, #296]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 030c 	and.w	r3, r3, #12
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007506:	4b47      	ldr	r3, [pc, #284]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800750e:	2b08      	cmp	r3, #8
 8007510:	d11c      	bne.n	800754c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007512:	4b44      	ldr	r3, [pc, #272]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d116      	bne.n	800754c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800751e:	4b41      	ldr	r3, [pc, #260]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <HAL_RCC_OscConfig+0x152>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d001      	beq.n	8007536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e1c7      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007536:	4b3b      	ldr	r3, [pc, #236]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	4937      	ldr	r1, [pc, #220]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007546:	4313      	orrs	r3, r2
 8007548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800754a:	e03a      	b.n	80075c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d020      	beq.n	8007596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007554:	4b34      	ldr	r3, [pc, #208]	@ (8007628 <HAL_RCC_OscConfig+0x244>)
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755a:	f7fd fc05 	bl	8004d68 <HAL_GetTick>
 800755e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007560:	e008      	b.n	8007574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007562:	f7fd fc01 	bl	8004d68 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e1a8      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007574:	4b2b      	ldr	r3, [pc, #172]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0f0      	beq.n	8007562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007580:	4b28      	ldr	r3, [pc, #160]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	4925      	ldr	r1, [pc, #148]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 8007590:	4313      	orrs	r3, r2
 8007592:	600b      	str	r3, [r1, #0]
 8007594:	e015      	b.n	80075c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007596:	4b24      	ldr	r3, [pc, #144]	@ (8007628 <HAL_RCC_OscConfig+0x244>)
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759c:	f7fd fbe4 	bl	8004d68 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075a2:	e008      	b.n	80075b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075a4:	f7fd fbe0 	bl	8004d68 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e187      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f0      	bne.n	80075a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d036      	beq.n	800763c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d016      	beq.n	8007604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075d6:	4b15      	ldr	r3, [pc, #84]	@ (800762c <HAL_RCC_OscConfig+0x248>)
 80075d8:	2201      	movs	r2, #1
 80075da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075dc:	f7fd fbc4 	bl	8004d68 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075e4:	f7fd fbc0 	bl	8004d68 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e167      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007624 <HAL_RCC_OscConfig+0x240>)
 80075f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0f0      	beq.n	80075e4 <HAL_RCC_OscConfig+0x200>
 8007602:	e01b      	b.n	800763c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007604:	4b09      	ldr	r3, [pc, #36]	@ (800762c <HAL_RCC_OscConfig+0x248>)
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800760a:	f7fd fbad 	bl	8004d68 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007610:	e00e      	b.n	8007630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007612:	f7fd fba9 	bl	8004d68 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d907      	bls.n	8007630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e150      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
 8007624:	40023800 	.word	0x40023800
 8007628:	42470000 	.word	0x42470000
 800762c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007630:	4b88      	ldr	r3, [pc, #544]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 8007632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1ea      	bne.n	8007612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 8097 	beq.w	8007778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800764e:	4b81      	ldr	r3, [pc, #516]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10f      	bne.n	800767a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800765a:	2300      	movs	r3, #0
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	4b7d      	ldr	r3, [pc, #500]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	4a7c      	ldr	r2, [pc, #496]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 8007664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007668:	6413      	str	r3, [r2, #64]	@ 0x40
 800766a:	4b7a      	ldr	r3, [pc, #488]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 800766c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007672:	60bb      	str	r3, [r7, #8]
 8007674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007676:	2301      	movs	r3, #1
 8007678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800767a:	4b77      	ldr	r3, [pc, #476]	@ (8007858 <HAL_RCC_OscConfig+0x474>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007682:	2b00      	cmp	r3, #0
 8007684:	d118      	bne.n	80076b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007686:	4b74      	ldr	r3, [pc, #464]	@ (8007858 <HAL_RCC_OscConfig+0x474>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a73      	ldr	r2, [pc, #460]	@ (8007858 <HAL_RCC_OscConfig+0x474>)
 800768c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007692:	f7fd fb69 	bl	8004d68 <HAL_GetTick>
 8007696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800769a:	f7fd fb65 	bl	8004d68 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e10c      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ac:	4b6a      	ldr	r3, [pc, #424]	@ (8007858 <HAL_RCC_OscConfig+0x474>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d106      	bne.n	80076ce <HAL_RCC_OscConfig+0x2ea>
 80076c0:	4b64      	ldr	r3, [pc, #400]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c4:	4a63      	ldr	r2, [pc, #396]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80076cc:	e01c      	b.n	8007708 <HAL_RCC_OscConfig+0x324>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b05      	cmp	r3, #5
 80076d4:	d10c      	bne.n	80076f0 <HAL_RCC_OscConfig+0x30c>
 80076d6:	4b5f      	ldr	r3, [pc, #380]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076da:	4a5e      	ldr	r2, [pc, #376]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076dc:	f043 0304 	orr.w	r3, r3, #4
 80076e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80076e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e6:	4a5b      	ldr	r2, [pc, #364]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076e8:	f043 0301 	orr.w	r3, r3, #1
 80076ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ee:	e00b      	b.n	8007708 <HAL_RCC_OscConfig+0x324>
 80076f0:	4b58      	ldr	r3, [pc, #352]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f4:	4a57      	ldr	r2, [pc, #348]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076f6:	f023 0301 	bic.w	r3, r3, #1
 80076fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80076fc:	4b55      	ldr	r3, [pc, #340]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80076fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007700:	4a54      	ldr	r2, [pc, #336]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 8007702:	f023 0304 	bic.w	r3, r3, #4
 8007706:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d015      	beq.n	800773c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007710:	f7fd fb2a 	bl	8004d68 <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007716:	e00a      	b.n	800772e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007718:	f7fd fb26 	bl	8004d68 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007726:	4293      	cmp	r3, r2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e0cb      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800772e:	4b49      	ldr	r3, [pc, #292]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 8007730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0ee      	beq.n	8007718 <HAL_RCC_OscConfig+0x334>
 800773a:	e014      	b.n	8007766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800773c:	f7fd fb14 	bl	8004d68 <HAL_GetTick>
 8007740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007742:	e00a      	b.n	800775a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007744:	f7fd fb10 	bl	8004d68 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e0b5      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800775a:	4b3e      	ldr	r3, [pc, #248]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ee      	bne.n	8007744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d105      	bne.n	8007778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800776c:	4b39      	ldr	r3, [pc, #228]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 800776e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007770:	4a38      	ldr	r2, [pc, #224]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 8007772:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007776:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80a1 	beq.w	80078c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007782:	4b34      	ldr	r3, [pc, #208]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b08      	cmp	r3, #8
 800778c:	d05c      	beq.n	8007848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d141      	bne.n	800781a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007796:	4b31      	ldr	r3, [pc, #196]	@ (800785c <HAL_RCC_OscConfig+0x478>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779c:	f7fd fae4 	bl	8004d68 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077a4:	f7fd fae0 	bl	8004d68 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e087      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b6:	4b27      	ldr	r3, [pc, #156]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69da      	ldr	r2, [r3, #28]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d0:	019b      	lsls	r3, r3, #6
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	3b01      	subs	r3, #1
 80077dc:	041b      	lsls	r3, r3, #16
 80077de:	431a      	orrs	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e4:	061b      	lsls	r3, r3, #24
 80077e6:	491b      	ldr	r1, [pc, #108]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077ec:	4b1b      	ldr	r3, [pc, #108]	@ (800785c <HAL_RCC_OscConfig+0x478>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f2:	f7fd fab9 	bl	8004d68 <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077fa:	f7fd fab5 	bl	8004d68 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e05c      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800780c:	4b11      	ldr	r3, [pc, #68]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0f0      	beq.n	80077fa <HAL_RCC_OscConfig+0x416>
 8007818:	e054      	b.n	80078c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781a:	4b10      	ldr	r3, [pc, #64]	@ (800785c <HAL_RCC_OscConfig+0x478>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007820:	f7fd faa2 	bl	8004d68 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007828:	f7fd fa9e 	bl	8004d68 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e045      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783a:	4b06      	ldr	r3, [pc, #24]	@ (8007854 <HAL_RCC_OscConfig+0x470>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <HAL_RCC_OscConfig+0x444>
 8007846:	e03d      	b.n	80078c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d107      	bne.n	8007860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e038      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
 8007854:	40023800 	.word	0x40023800
 8007858:	40007000 	.word	0x40007000
 800785c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007860:	4b1b      	ldr	r3, [pc, #108]	@ (80078d0 <HAL_RCC_OscConfig+0x4ec>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d028      	beq.n	80078c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007878:	429a      	cmp	r2, r3
 800787a:	d121      	bne.n	80078c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007886:	429a      	cmp	r2, r3
 8007888:	d11a      	bne.n	80078c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007890:	4013      	ands	r3, r2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007898:	4293      	cmp	r3, r2
 800789a:	d111      	bne.n	80078c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	3b01      	subs	r3, #1
 80078aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d107      	bne.n	80078c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078bc:	429a      	cmp	r2, r3
 80078be:	d001      	beq.n	80078c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e000      	b.n	80078c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	40023800 	.word	0x40023800

080078d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e0cc      	b.n	8007a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078e8:	4b68      	ldr	r3, [pc, #416]	@ (8007a8c <HAL_RCC_ClockConfig+0x1b8>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d90c      	bls.n	8007910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078f6:	4b65      	ldr	r3, [pc, #404]	@ (8007a8c <HAL_RCC_ClockConfig+0x1b8>)
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fe:	4b63      	ldr	r3, [pc, #396]	@ (8007a8c <HAL_RCC_ClockConfig+0x1b8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d001      	beq.n	8007910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e0b8      	b.n	8007a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d020      	beq.n	800795e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007928:	4b59      	ldr	r3, [pc, #356]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4a58      	ldr	r2, [pc, #352]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 800792e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0308 	and.w	r3, r3, #8
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007940:	4b53      	ldr	r3, [pc, #332]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	4a52      	ldr	r2, [pc, #328]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800794a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800794c:	4b50      	ldr	r3, [pc, #320]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	494d      	ldr	r1, [pc, #308]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 800795a:	4313      	orrs	r3, r2
 800795c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d044      	beq.n	80079f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d107      	bne.n	8007982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007972:	4b47      	ldr	r3, [pc, #284]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d119      	bne.n	80079b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e07f      	b.n	8007a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b02      	cmp	r3, #2
 8007988:	d003      	beq.n	8007992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800798e:	2b03      	cmp	r3, #3
 8007990:	d107      	bne.n	80079a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007992:	4b3f      	ldr	r3, [pc, #252]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d109      	bne.n	80079b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e06f      	b.n	8007a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079a2:	4b3b      	ldr	r3, [pc, #236]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e067      	b.n	8007a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079b2:	4b37      	ldr	r3, [pc, #220]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f023 0203 	bic.w	r2, r3, #3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	4934      	ldr	r1, [pc, #208]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079c4:	f7fd f9d0 	bl	8004d68 <HAL_GetTick>
 80079c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ca:	e00a      	b.n	80079e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079cc:	f7fd f9cc 	bl	8004d68 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079da:	4293      	cmp	r3, r2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e04f      	b.n	8007a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079e2:	4b2b      	ldr	r3, [pc, #172]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 020c 	and.w	r2, r3, #12
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d1eb      	bne.n	80079cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079f4:	4b25      	ldr	r3, [pc, #148]	@ (8007a8c <HAL_RCC_ClockConfig+0x1b8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0307 	and.w	r3, r3, #7
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d20c      	bcs.n	8007a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a02:	4b22      	ldr	r3, [pc, #136]	@ (8007a8c <HAL_RCC_ClockConfig+0x1b8>)
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a0a:	4b20      	ldr	r3, [pc, #128]	@ (8007a8c <HAL_RCC_ClockConfig+0x1b8>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d001      	beq.n	8007a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e032      	b.n	8007a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d008      	beq.n	8007a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a28:	4b19      	ldr	r3, [pc, #100]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	4916      	ldr	r1, [pc, #88]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a46:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	490e      	ldr	r1, [pc, #56]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a5a:	f000 f82d 	bl	8007ab8 <HAL_RCC_GetSysClockFreq>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	4b0b      	ldr	r3, [pc, #44]	@ (8007a90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	091b      	lsrs	r3, r3, #4
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	490a      	ldr	r1, [pc, #40]	@ (8007a94 <HAL_RCC_ClockConfig+0x1c0>)
 8007a6c:	5ccb      	ldrb	r3, [r1, r3]
 8007a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a72:	4a09      	ldr	r2, [pc, #36]	@ (8007a98 <HAL_RCC_ClockConfig+0x1c4>)
 8007a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a76:	4b09      	ldr	r3, [pc, #36]	@ (8007a9c <HAL_RCC_ClockConfig+0x1c8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd f930 	bl	8004ce0 <HAL_InitTick>

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	40023c00 	.word	0x40023c00
 8007a90:	40023800 	.word	0x40023800
 8007a94:	0800e0e0 	.word	0x0800e0e0
 8007a98:	2000001c 	.word	0x2000001c
 8007a9c:	20000020 	.word	0x20000020

08007aa0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007aa4:	4b03      	ldr	r3, [pc, #12]	@ (8007ab4 <HAL_RCC_EnableCSS+0x14>)
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]
}
 8007aaa:	bf00      	nop
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	4247004c 	.word	0x4247004c

08007ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007abc:	b090      	sub	sp, #64	@ 0x40
 8007abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ac8:	2300      	movs	r3, #0
 8007aca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ad0:	4b59      	ldr	r3, [pc, #356]	@ (8007c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f003 030c 	and.w	r3, r3, #12
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d00d      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0x40>
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	f200 80a1 	bhi.w	8007c24 <HAL_RCC_GetSysClockFreq+0x16c>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <HAL_RCC_GetSysClockFreq+0x34>
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d003      	beq.n	8007af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007aea:	e09b      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007aec:	4b53      	ldr	r3, [pc, #332]	@ (8007c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8007aee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007af0:	e09b      	b.n	8007c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007af2:	4b53      	ldr	r3, [pc, #332]	@ (8007c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8007af4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007af6:	e098      	b.n	8007c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007af8:	4b4f      	ldr	r3, [pc, #316]	@ (8007c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b02:	4b4d      	ldr	r3, [pc, #308]	@ (8007c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d028      	beq.n	8007b60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8007c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	099b      	lsrs	r3, r3, #6
 8007b14:	2200      	movs	r2, #0
 8007b16:	623b      	str	r3, [r7, #32]
 8007b18:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007b20:	2100      	movs	r1, #0
 8007b22:	4b47      	ldr	r3, [pc, #284]	@ (8007c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b24:	fb03 f201 	mul.w	r2, r3, r1
 8007b28:	2300      	movs	r3, #0
 8007b2a:	fb00 f303 	mul.w	r3, r0, r3
 8007b2e:	4413      	add	r3, r2
 8007b30:	4a43      	ldr	r2, [pc, #268]	@ (8007c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b32:	fba0 1202 	umull	r1, r2, r0, r2
 8007b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b38:	460a      	mov	r2, r1
 8007b3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b3e:	4413      	add	r3, r2
 8007b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b44:	2200      	movs	r2, #0
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	61fa      	str	r2, [r7, #28]
 8007b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007b52:	f7f8 ffab 	bl	8000aac <__aeabi_uldivmod>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b5e:	e053      	b.n	8007c08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b60:	4b35      	ldr	r3, [pc, #212]	@ (8007c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	099b      	lsrs	r3, r3, #6
 8007b66:	2200      	movs	r2, #0
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	617a      	str	r2, [r7, #20]
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007b72:	f04f 0b00 	mov.w	fp, #0
 8007b76:	4652      	mov	r2, sl
 8007b78:	465b      	mov	r3, fp
 8007b7a:	f04f 0000 	mov.w	r0, #0
 8007b7e:	f04f 0100 	mov.w	r1, #0
 8007b82:	0159      	lsls	r1, r3, #5
 8007b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b88:	0150      	lsls	r0, r2, #5
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	ebb2 080a 	subs.w	r8, r2, sl
 8007b92:	eb63 090b 	sbc.w	r9, r3, fp
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007ba2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007ba6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007baa:	ebb2 0408 	subs.w	r4, r2, r8
 8007bae:	eb63 0509 	sbc.w	r5, r3, r9
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	f04f 0300 	mov.w	r3, #0
 8007bba:	00eb      	lsls	r3, r5, #3
 8007bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bc0:	00e2      	lsls	r2, r4, #3
 8007bc2:	4614      	mov	r4, r2
 8007bc4:	461d      	mov	r5, r3
 8007bc6:	eb14 030a 	adds.w	r3, r4, sl
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	eb45 030b 	adc.w	r3, r5, fp
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	f04f 0300 	mov.w	r3, #0
 8007bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bde:	4629      	mov	r1, r5
 8007be0:	028b      	lsls	r3, r1, #10
 8007be2:	4621      	mov	r1, r4
 8007be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007be8:	4621      	mov	r1, r4
 8007bea:	028a      	lsls	r2, r1, #10
 8007bec:	4610      	mov	r0, r2
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
 8007bf6:	60fa      	str	r2, [r7, #12]
 8007bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bfc:	f7f8 ff56 	bl	8000aac <__aeabi_uldivmod>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4613      	mov	r3, r2
 8007c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c08:	4b0b      	ldr	r3, [pc, #44]	@ (8007c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	0c1b      	lsrs	r3, r3, #16
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	3301      	adds	r3, #1
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007c18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c22:	e002      	b.n	8007c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c24:	4b05      	ldr	r3, [pc, #20]	@ (8007c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8007c26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3740      	adds	r7, #64	@ 0x40
 8007c30:	46bd      	mov	sp, r7
 8007c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c36:	bf00      	nop
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	00f42400 	.word	0x00f42400
 8007c40:	00b71b00 	.word	0x00b71b00

08007c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c48:	4b03      	ldr	r3, [pc, #12]	@ (8007c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	2000001c 	.word	0x2000001c

08007c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c60:	f7ff fff0 	bl	8007c44 <HAL_RCC_GetHCLKFreq>
 8007c64:	4602      	mov	r2, r0
 8007c66:	4b05      	ldr	r3, [pc, #20]	@ (8007c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	0a9b      	lsrs	r3, r3, #10
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	4903      	ldr	r1, [pc, #12]	@ (8007c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c72:	5ccb      	ldrb	r3, [r1, r3]
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	0800e0f0 	.word	0x0800e0f0

08007c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c88:	f7ff ffdc 	bl	8007c44 <HAL_RCC_GetHCLKFreq>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	4b05      	ldr	r3, [pc, #20]	@ (8007ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	0b5b      	lsrs	r3, r3, #13
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	4903      	ldr	r1, [pc, #12]	@ (8007ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c9a:	5ccb      	ldrb	r3, [r1, r3]
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	0800e0f0 	.word	0x0800e0f0

08007cac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007cb0:	4b06      	ldr	r3, [pc, #24]	@ (8007ccc <HAL_RCC_NMI_IRQHandler+0x20>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb8:	2b80      	cmp	r3, #128	@ 0x80
 8007cba:	d104      	bne.n	8007cc6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007cbc:	f000 f80a 	bl	8007cd4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007cc0:	4b03      	ldr	r3, [pc, #12]	@ (8007cd0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007cc2:	2280      	movs	r2, #128	@ 0x80
 8007cc4:	701a      	strb	r2, [r3, #0]
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	4002380e 	.word	0x4002380e

08007cd4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e07b      	b.n	8007dec <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d108      	bne.n	8007d0e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d04:	d009      	beq.n	8007d1a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	61da      	str	r2, [r3, #28]
 8007d0c:	e005      	b.n	8007d1a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d106      	bne.n	8007d3a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fc fac9 	bl	80042cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d94:	431a      	orrs	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d9e:	ea42 0103 	orr.w	r1, r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	f003 0104 	and.w	r1, r3, #4
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc0:	f003 0210 	and.w	r2, r3, #16
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69da      	ldr	r2, [r3, #28]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007dda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	@ 0x30
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e02:	2301      	movs	r3, #1
 8007e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x26>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e18a      	b.n	8008130 <HAL_SPI_TransmitReceive+0x33c>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e22:	f7fc ffa1 	bl	8004d68 <HAL_GetTick>
 8007e26:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e38:	887b      	ldrh	r3, [r7, #2]
 8007e3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d00f      	beq.n	8007e64 <HAL_SPI_TransmitReceive+0x70>
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e4a:	d107      	bne.n	8007e5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d103      	bne.n	8007e5c <HAL_SPI_TransmitReceive+0x68>
 8007e54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d003      	beq.n	8007e64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007e62:	e15b      	b.n	800811c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <HAL_SPI_TransmitReceive+0x82>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_SPI_TransmitReceive+0x82>
 8007e70:	887b      	ldrh	r3, [r7, #2]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d103      	bne.n	8007e7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007e7c:	e14e      	b.n	800811c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d003      	beq.n	8007e92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2205      	movs	r2, #5
 8007e8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	887a      	ldrh	r2, [r7, #2]
 8007ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	887a      	ldrh	r2, [r7, #2]
 8007ea8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	887a      	ldrh	r2, [r7, #2]
 8007eb4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	887a      	ldrh	r2, [r7, #2]
 8007eba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed2:	2b40      	cmp	r3, #64	@ 0x40
 8007ed4:	d007      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eee:	d178      	bne.n	8007fe2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x10a>
 8007ef8:	8b7b      	ldrh	r3, [r7, #26]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d166      	bne.n	8007fcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f02:	881a      	ldrh	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0e:	1c9a      	adds	r2, r3, #2
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f22:	e053      	b.n	8007fcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d11b      	bne.n	8007f6a <HAL_SPI_TransmitReceive+0x176>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d016      	beq.n	8007f6a <HAL_SPI_TransmitReceive+0x176>
 8007f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d113      	bne.n	8007f6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f46:	881a      	ldrh	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f52:	1c9a      	adds	r2, r3, #2
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d119      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x1b8>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d014      	beq.n	8007fac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8c:	b292      	uxth	r2, r2
 8007f8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f94:	1c9a      	adds	r2, r3, #2
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007fac:	f7fc fedc 	bl	8004d68 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d807      	bhi.n	8007fcc <HAL_SPI_TransmitReceive+0x1d8>
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fc2:	d003      	beq.n	8007fcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007fca:	e0a7      	b.n	800811c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1a6      	bne.n	8007f24 <HAL_SPI_TransmitReceive+0x130>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1a1      	bne.n	8007f24 <HAL_SPI_TransmitReceive+0x130>
 8007fe0:	e07c      	b.n	80080dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_SPI_TransmitReceive+0x1fc>
 8007fea:	8b7b      	ldrh	r3, [r7, #26]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d16b      	bne.n	80080c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	7812      	ldrb	r2, [r2, #0]
 8007ffc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800800c:	b29b      	uxth	r3, r3
 800800e:	3b01      	subs	r3, #1
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008016:	e057      	b.n	80080c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b02      	cmp	r3, #2
 8008024:	d11c      	bne.n	8008060 <HAL_SPI_TransmitReceive+0x26c>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d017      	beq.n	8008060 <HAL_SPI_TransmitReceive+0x26c>
 8008030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008032:	2b01      	cmp	r3, #1
 8008034:	d114      	bne.n	8008060 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	330c      	adds	r3, #12
 8008040:	7812      	ldrb	r2, [r2, #0]
 8008042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b01      	cmp	r3, #1
 800806c:	d119      	bne.n	80080a2 <HAL_SPI_TransmitReceive+0x2ae>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d014      	beq.n	80080a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800809e:	2301      	movs	r3, #1
 80080a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080a2:	f7fc fe61 	bl	8004d68 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d803      	bhi.n	80080ba <HAL_SPI_TransmitReceive+0x2c6>
 80080b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080b8:	d102      	bne.n	80080c0 <HAL_SPI_TransmitReceive+0x2cc>
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80080c6:	e029      	b.n	800811c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1a2      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x224>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d19d      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 f8b1 	bl	8008248 <SPI_EndRxTxTransaction>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d006      	beq.n	80080fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80080f8:	e010      	b.n	800811c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10b      	bne.n	800811a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	617b      	str	r3, [r7, #20]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	e000      	b.n	800811c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800811a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800812c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008130:	4618      	mov	r0, r3
 8008132:	3730      	adds	r7, #48	@ 0x30
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	4613      	mov	r3, r2
 8008146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008148:	f7fc fe0e 	bl	8004d68 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	1a9b      	subs	r3, r3, r2
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4413      	add	r3, r2
 8008156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008158:	f7fc fe06 	bl	8004d68 <HAL_GetTick>
 800815c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800815e:	4b39      	ldr	r3, [pc, #228]	@ (8008244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	015b      	lsls	r3, r3, #5
 8008164:	0d1b      	lsrs	r3, r3, #20
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	fb02 f303 	mul.w	r3, r2, r3
 800816c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800816e:	e054      	b.n	800821a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008176:	d050      	beq.n	800821a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008178:	f7fc fdf6 	bl	8004d68 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	429a      	cmp	r2, r3
 8008186:	d902      	bls.n	800818e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d13d      	bne.n	800820a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800819c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081a6:	d111      	bne.n	80081cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081b0:	d004      	beq.n	80081bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ba:	d107      	bne.n	80081cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081d4:	d10f      	bne.n	80081f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e017      	b.n	800823a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	3b01      	subs	r3, #1
 8008218:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4013      	ands	r3, r2
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	bf0c      	ite	eq
 800822a:	2301      	moveq	r3, #1
 800822c:	2300      	movne	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	429a      	cmp	r2, r3
 8008236:	d19b      	bne.n	8008170 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	2000001c 	.word	0x2000001c

08008248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af02      	add	r7, sp, #8
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008254:	4b1b      	ldr	r3, [pc, #108]	@ (80082c4 <SPI_EndRxTxTransaction+0x7c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a1b      	ldr	r2, [pc, #108]	@ (80082c8 <SPI_EndRxTxTransaction+0x80>)
 800825a:	fba2 2303 	umull	r2, r3, r2, r3
 800825e:	0d5b      	lsrs	r3, r3, #21
 8008260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008264:	fb02 f303 	mul.w	r3, r2, r3
 8008268:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008272:	d112      	bne.n	800829a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2200      	movs	r2, #0
 800827c:	2180      	movs	r1, #128	@ 0x80
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff ff5a 	bl	8008138 <SPI_WaitFlagStateUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d016      	beq.n	80082b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828e:	f043 0220 	orr.w	r2, r3, #32
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e00f      	b.n	80082ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082b0:	2b80      	cmp	r3, #128	@ 0x80
 80082b2:	d0f2      	beq.n	800829a <SPI_EndRxTxTransaction+0x52>
 80082b4:	e000      	b.n	80082b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80082b6:	bf00      	nop
  }

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	2000001c 	.word	0x2000001c
 80082c8:	165e9f81 	.word	0x165e9f81

080082cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e041      	b.n	8008362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fc f8a0 	bl	8004438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3304      	adds	r3, #4
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f000 fba8 	bl	8008a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b01      	cmp	r3, #1
 800837e:	d001      	beq.n	8008384 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e046      	b.n	8008412 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a23      	ldr	r2, [pc, #140]	@ (8008420 <HAL_TIM_Base_Start+0xb4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d022      	beq.n	80083dc <HAL_TIM_Base_Start+0x70>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800839e:	d01d      	beq.n	80083dc <HAL_TIM_Base_Start+0x70>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008424 <HAL_TIM_Base_Start+0xb8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d018      	beq.n	80083dc <HAL_TIM_Base_Start+0x70>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008428 <HAL_TIM_Base_Start+0xbc>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d013      	beq.n	80083dc <HAL_TIM_Base_Start+0x70>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1c      	ldr	r2, [pc, #112]	@ (800842c <HAL_TIM_Base_Start+0xc0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00e      	beq.n	80083dc <HAL_TIM_Base_Start+0x70>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008430 <HAL_TIM_Base_Start+0xc4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d009      	beq.n	80083dc <HAL_TIM_Base_Start+0x70>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a19      	ldr	r2, [pc, #100]	@ (8008434 <HAL_TIM_Base_Start+0xc8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d004      	beq.n	80083dc <HAL_TIM_Base_Start+0x70>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a18      	ldr	r2, [pc, #96]	@ (8008438 <HAL_TIM_Base_Start+0xcc>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d111      	bne.n	8008400 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b06      	cmp	r3, #6
 80083ec:	d010      	beq.n	8008410 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f042 0201 	orr.w	r2, r2, #1
 80083fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083fe:	e007      	b.n	8008410 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0201 	orr.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40010000 	.word	0x40010000
 8008424:	40000400 	.word	0x40000400
 8008428:	40000800 	.word	0x40000800
 800842c:	40000c00 	.word	0x40000c00
 8008430:	40010400 	.word	0x40010400
 8008434:	40014000 	.word	0x40014000
 8008438:	40001800 	.word	0x40001800

0800843c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e041      	b.n	80084d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7fb ff9a 	bl	800439c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3304      	adds	r3, #4
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	f000 faf0 	bl	8008a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d109      	bne.n	8008500 <HAL_TIM_PWM_Start+0x24>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	e022      	b.n	8008546 <HAL_TIM_PWM_Start+0x6a>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b04      	cmp	r3, #4
 8008504:	d109      	bne.n	800851a <HAL_TIM_PWM_Start+0x3e>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	bf14      	ite	ne
 8008512:	2301      	movne	r3, #1
 8008514:	2300      	moveq	r3, #0
 8008516:	b2db      	uxtb	r3, r3
 8008518:	e015      	b.n	8008546 <HAL_TIM_PWM_Start+0x6a>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b08      	cmp	r3, #8
 800851e:	d109      	bne.n	8008534 <HAL_TIM_PWM_Start+0x58>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	bf14      	ite	ne
 800852c:	2301      	movne	r3, #1
 800852e:	2300      	moveq	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	e008      	b.n	8008546 <HAL_TIM_PWM_Start+0x6a>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b01      	cmp	r3, #1
 800853e:	bf14      	ite	ne
 8008540:	2301      	movne	r3, #1
 8008542:	2300      	moveq	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e07c      	b.n	8008648 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <HAL_TIM_PWM_Start+0x82>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800855c:	e013      	b.n	8008586 <HAL_TIM_PWM_Start+0xaa>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b04      	cmp	r3, #4
 8008562:	d104      	bne.n	800856e <HAL_TIM_PWM_Start+0x92>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800856c:	e00b      	b.n	8008586 <HAL_TIM_PWM_Start+0xaa>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b08      	cmp	r3, #8
 8008572:	d104      	bne.n	800857e <HAL_TIM_PWM_Start+0xa2>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800857c:	e003      	b.n	8008586 <HAL_TIM_PWM_Start+0xaa>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2202      	movs	r2, #2
 8008582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2201      	movs	r2, #1
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fd50 	bl	8009034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a2d      	ldr	r2, [pc, #180]	@ (8008650 <HAL_TIM_PWM_Start+0x174>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d004      	beq.n	80085a8 <HAL_TIM_PWM_Start+0xcc>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a2c      	ldr	r2, [pc, #176]	@ (8008654 <HAL_TIM_PWM_Start+0x178>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d101      	bne.n	80085ac <HAL_TIM_PWM_Start+0xd0>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <HAL_TIM_PWM_Start+0xd2>
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80085c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a22      	ldr	r2, [pc, #136]	@ (8008650 <HAL_TIM_PWM_Start+0x174>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d022      	beq.n	8008612 <HAL_TIM_PWM_Start+0x136>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d4:	d01d      	beq.n	8008612 <HAL_TIM_PWM_Start+0x136>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a1f      	ldr	r2, [pc, #124]	@ (8008658 <HAL_TIM_PWM_Start+0x17c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d018      	beq.n	8008612 <HAL_TIM_PWM_Start+0x136>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a1d      	ldr	r2, [pc, #116]	@ (800865c <HAL_TIM_PWM_Start+0x180>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <HAL_TIM_PWM_Start+0x136>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008660 <HAL_TIM_PWM_Start+0x184>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00e      	beq.n	8008612 <HAL_TIM_PWM_Start+0x136>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a16      	ldr	r2, [pc, #88]	@ (8008654 <HAL_TIM_PWM_Start+0x178>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_TIM_PWM_Start+0x136>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a18      	ldr	r2, [pc, #96]	@ (8008664 <HAL_TIM_PWM_Start+0x188>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <HAL_TIM_PWM_Start+0x136>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a16      	ldr	r2, [pc, #88]	@ (8008668 <HAL_TIM_PWM_Start+0x18c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d111      	bne.n	8008636 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b06      	cmp	r3, #6
 8008622:	d010      	beq.n	8008646 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f042 0201 	orr.w	r2, r2, #1
 8008632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008634:	e007      	b.n	8008646 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f042 0201 	orr.w	r2, r2, #1
 8008644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	40010000 	.word	0x40010000
 8008654:	40010400 	.word	0x40010400
 8008658:	40000400 	.word	0x40000400
 800865c:	40000800 	.word	0x40000800
 8008660:	40000c00 	.word	0x40000c00
 8008664:	40014000 	.word	0x40014000
 8008668:	40001800 	.word	0x40001800

0800866c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2200      	movs	r2, #0
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fcd8 	bl	8009034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a2e      	ldr	r2, [pc, #184]	@ (8008744 <HAL_TIM_PWM_Stop+0xd8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d004      	beq.n	8008698 <HAL_TIM_PWM_Stop+0x2c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a2d      	ldr	r2, [pc, #180]	@ (8008748 <HAL_TIM_PWM_Stop+0xdc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d101      	bne.n	800869c <HAL_TIM_PWM_Stop+0x30>
 8008698:	2301      	movs	r3, #1
 800869a:	e000      	b.n	800869e <HAL_TIM_PWM_Stop+0x32>
 800869c:	2300      	movs	r3, #0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d017      	beq.n	80086d2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a1a      	ldr	r2, [r3, #32]
 80086a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086ac:	4013      	ands	r3, r2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10f      	bne.n	80086d2 <HAL_TIM_PWM_Stop+0x66>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6a1a      	ldr	r2, [r3, #32]
 80086b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80086bc:	4013      	ands	r3, r2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d107      	bne.n	80086d2 <HAL_TIM_PWM_Stop+0x66>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6a1a      	ldr	r2, [r3, #32]
 80086d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086dc:	4013      	ands	r3, r2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10f      	bne.n	8008702 <HAL_TIM_PWM_Stop+0x96>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6a1a      	ldr	r2, [r3, #32]
 80086e8:	f240 4344 	movw	r3, #1092	@ 0x444
 80086ec:	4013      	ands	r3, r2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d107      	bne.n	8008702 <HAL_TIM_PWM_Stop+0x96>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0201 	bic.w	r2, r2, #1
 8008700:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <HAL_TIM_PWM_Stop+0xa6>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008710:	e013      	b.n	800873a <HAL_TIM_PWM_Stop+0xce>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b04      	cmp	r3, #4
 8008716:	d104      	bne.n	8008722 <HAL_TIM_PWM_Stop+0xb6>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008720:	e00b      	b.n	800873a <HAL_TIM_PWM_Stop+0xce>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b08      	cmp	r3, #8
 8008726:	d104      	bne.n	8008732 <HAL_TIM_PWM_Stop+0xc6>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008730:	e003      	b.n	800873a <HAL_TIM_PWM_Stop+0xce>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	40010000 	.word	0x40010000
 8008748:	40010400 	.word	0x40010400

0800874c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008766:	2302      	movs	r3, #2
 8008768:	e0ae      	b.n	80088c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b0c      	cmp	r3, #12
 8008776:	f200 809f 	bhi.w	80088b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800877a:	a201      	add	r2, pc, #4	@ (adr r2, 8008780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	080087b5 	.word	0x080087b5
 8008784:	080088b9 	.word	0x080088b9
 8008788:	080088b9 	.word	0x080088b9
 800878c:	080088b9 	.word	0x080088b9
 8008790:	080087f5 	.word	0x080087f5
 8008794:	080088b9 	.word	0x080088b9
 8008798:	080088b9 	.word	0x080088b9
 800879c:	080088b9 	.word	0x080088b9
 80087a0:	08008837 	.word	0x08008837
 80087a4:	080088b9 	.word	0x080088b9
 80087a8:	080088b9 	.word	0x080088b9
 80087ac:	080088b9 	.word	0x080088b9
 80087b0:	08008877 	.word	0x08008877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 f9f0 	bl	8008ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0208 	orr.w	r2, r2, #8
 80087ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0204 	bic.w	r2, r2, #4
 80087de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6999      	ldr	r1, [r3, #24]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	691a      	ldr	r2, [r3, #16]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	619a      	str	r2, [r3, #24]
      break;
 80087f2:	e064      	b.n	80088be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fa40 	bl	8008c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699a      	ldr	r2, [r3, #24]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800880e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699a      	ldr	r2, [r3, #24]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800881e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6999      	ldr	r1, [r3, #24]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	021a      	lsls	r2, r3, #8
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	619a      	str	r2, [r3, #24]
      break;
 8008834:	e043      	b.n	80088be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	4618      	mov	r0, r3
 800883e:	f000 fa95 	bl	8008d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0208 	orr.w	r2, r2, #8
 8008850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0204 	bic.w	r2, r2, #4
 8008860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69d9      	ldr	r1, [r3, #28]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	61da      	str	r2, [r3, #28]
      break;
 8008874:	e023      	b.n	80088be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fae9 	bl	8008e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69da      	ldr	r2, [r3, #28]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69d9      	ldr	r1, [r3, #28]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	021a      	lsls	r2, r3, #8
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	61da      	str	r2, [r3, #28]
      break;
 80088b6:	e002      	b.n	80088be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
      break;
 80088bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_TIM_ConfigClockSource+0x1c>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e0b4      	b.n	8008a56 <HAL_TIM_ConfigClockSource+0x186>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800890a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008924:	d03e      	beq.n	80089a4 <HAL_TIM_ConfigClockSource+0xd4>
 8008926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800892a:	f200 8087 	bhi.w	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
 800892e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008932:	f000 8086 	beq.w	8008a42 <HAL_TIM_ConfigClockSource+0x172>
 8008936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800893a:	d87f      	bhi.n	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
 800893c:	2b70      	cmp	r3, #112	@ 0x70
 800893e:	d01a      	beq.n	8008976 <HAL_TIM_ConfigClockSource+0xa6>
 8008940:	2b70      	cmp	r3, #112	@ 0x70
 8008942:	d87b      	bhi.n	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
 8008944:	2b60      	cmp	r3, #96	@ 0x60
 8008946:	d050      	beq.n	80089ea <HAL_TIM_ConfigClockSource+0x11a>
 8008948:	2b60      	cmp	r3, #96	@ 0x60
 800894a:	d877      	bhi.n	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
 800894c:	2b50      	cmp	r3, #80	@ 0x50
 800894e:	d03c      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0xfa>
 8008950:	2b50      	cmp	r3, #80	@ 0x50
 8008952:	d873      	bhi.n	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
 8008954:	2b40      	cmp	r3, #64	@ 0x40
 8008956:	d058      	beq.n	8008a0a <HAL_TIM_ConfigClockSource+0x13a>
 8008958:	2b40      	cmp	r3, #64	@ 0x40
 800895a:	d86f      	bhi.n	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
 800895c:	2b30      	cmp	r3, #48	@ 0x30
 800895e:	d064      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x15a>
 8008960:	2b30      	cmp	r3, #48	@ 0x30
 8008962:	d86b      	bhi.n	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
 8008964:	2b20      	cmp	r3, #32
 8008966:	d060      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x15a>
 8008968:	2b20      	cmp	r3, #32
 800896a:	d867      	bhi.n	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
 800896c:	2b00      	cmp	r3, #0
 800896e:	d05c      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x15a>
 8008970:	2b10      	cmp	r3, #16
 8008972:	d05a      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x15a>
 8008974:	e062      	b.n	8008a3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	6899      	ldr	r1, [r3, #8]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f000 fb35 	bl	8008ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	609a      	str	r2, [r3, #8]
      break;
 80089a2:	e04f      	b.n	8008a44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6818      	ldr	r0, [r3, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	6899      	ldr	r1, [r3, #8]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f000 fb1e 	bl	8008ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689a      	ldr	r2, [r3, #8]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089c6:	609a      	str	r2, [r3, #8]
      break;
 80089c8:	e03c      	b.n	8008a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	6859      	ldr	r1, [r3, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	461a      	mov	r2, r3
 80089d8:	f000 fa92 	bl	8008f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2150      	movs	r1, #80	@ 0x50
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 faeb 	bl	8008fbe <TIM_ITRx_SetConfig>
      break;
 80089e8:	e02c      	b.n	8008a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6859      	ldr	r1, [r3, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	461a      	mov	r2, r3
 80089f8:	f000 fab1 	bl	8008f5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2160      	movs	r1, #96	@ 0x60
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 fadb 	bl	8008fbe <TIM_ITRx_SetConfig>
      break;
 8008a08:	e01c      	b.n	8008a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6859      	ldr	r1, [r3, #4]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f000 fa72 	bl	8008f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2140      	movs	r1, #64	@ 0x40
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 facb 	bl	8008fbe <TIM_ITRx_SetConfig>
      break;
 8008a28:	e00c      	b.n	8008a44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4619      	mov	r1, r3
 8008a34:	4610      	mov	r0, r2
 8008a36:	f000 fac2 	bl	8008fbe <TIM_ITRx_SetConfig>
      break;
 8008a3a:	e003      	b.n	8008a44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a40:	e000      	b.n	8008a44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a40      	ldr	r2, [pc, #256]	@ (8008b74 <TIM_Base_SetConfig+0x114>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d013      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a7e:	d00f      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a3d      	ldr	r2, [pc, #244]	@ (8008b78 <TIM_Base_SetConfig+0x118>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00b      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8008b7c <TIM_Base_SetConfig+0x11c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d007      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a3b      	ldr	r2, [pc, #236]	@ (8008b80 <TIM_Base_SetConfig+0x120>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d003      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8008b84 <TIM_Base_SetConfig+0x124>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d108      	bne.n	8008ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8008b74 <TIM_Base_SetConfig+0x114>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d02b      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ac0:	d027      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8008b78 <TIM_Base_SetConfig+0x118>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d023      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a2b      	ldr	r2, [pc, #172]	@ (8008b7c <TIM_Base_SetConfig+0x11c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d01f      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8008b80 <TIM_Base_SetConfig+0x120>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01b      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a29      	ldr	r2, [pc, #164]	@ (8008b84 <TIM_Base_SetConfig+0x124>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d017      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a28      	ldr	r2, [pc, #160]	@ (8008b88 <TIM_Base_SetConfig+0x128>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d013      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a27      	ldr	r2, [pc, #156]	@ (8008b8c <TIM_Base_SetConfig+0x12c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00f      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a26      	ldr	r2, [pc, #152]	@ (8008b90 <TIM_Base_SetConfig+0x130>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00b      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a25      	ldr	r2, [pc, #148]	@ (8008b94 <TIM_Base_SetConfig+0x134>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d007      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a24      	ldr	r2, [pc, #144]	@ (8008b98 <TIM_Base_SetConfig+0x138>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d003      	beq.n	8008b12 <TIM_Base_SetConfig+0xb2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a23      	ldr	r2, [pc, #140]	@ (8008b9c <TIM_Base_SetConfig+0x13c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d108      	bne.n	8008b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008b74 <TIM_Base_SetConfig+0x114>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_Base_SetConfig+0xf8>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a0c      	ldr	r2, [pc, #48]	@ (8008b84 <TIM_Base_SetConfig+0x124>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d103      	bne.n	8008b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	691a      	ldr	r2, [r3, #16]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	615a      	str	r2, [r3, #20]
}
 8008b66:	bf00      	nop
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40010000 	.word	0x40010000
 8008b78:	40000400 	.word	0x40000400
 8008b7c:	40000800 	.word	0x40000800
 8008b80:	40000c00 	.word	0x40000c00
 8008b84:	40010400 	.word	0x40010400
 8008b88:	40014000 	.word	0x40014000
 8008b8c:	40014400 	.word	0x40014400
 8008b90:	40014800 	.word	0x40014800
 8008b94:	40001800 	.word	0x40001800
 8008b98:	40001c00 	.word	0x40001c00
 8008b9c:	40002000 	.word	0x40002000

08008ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a1b      	ldr	r3, [r3, #32]
 8008bae:	f023 0201 	bic.w	r2, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f023 0302 	bic.w	r3, r3, #2
 8008be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a20      	ldr	r2, [pc, #128]	@ (8008c78 <TIM_OC1_SetConfig+0xd8>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d003      	beq.n	8008c04 <TIM_OC1_SetConfig+0x64>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8008c7c <TIM_OC1_SetConfig+0xdc>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d10c      	bne.n	8008c1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f023 0308 	bic.w	r3, r3, #8
 8008c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f023 0304 	bic.w	r3, r3, #4
 8008c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a15      	ldr	r2, [pc, #84]	@ (8008c78 <TIM_OC1_SetConfig+0xd8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d003      	beq.n	8008c2e <TIM_OC1_SetConfig+0x8e>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a14      	ldr	r2, [pc, #80]	@ (8008c7c <TIM_OC1_SetConfig+0xdc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d111      	bne.n	8008c52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	695b      	ldr	r3, [r3, #20]
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	621a      	str	r2, [r3, #32]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	40010000 	.word	0x40010000
 8008c7c:	40010400 	.word	0x40010400

08008c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	f023 0210 	bic.w	r2, r3, #16
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	021b      	lsls	r3, r3, #8
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f023 0320 	bic.w	r3, r3, #32
 8008cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	011b      	lsls	r3, r3, #4
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a22      	ldr	r2, [pc, #136]	@ (8008d64 <TIM_OC2_SetConfig+0xe4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_OC2_SetConfig+0x68>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a21      	ldr	r2, [pc, #132]	@ (8008d68 <TIM_OC2_SetConfig+0xe8>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d10d      	bne.n	8008d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a17      	ldr	r2, [pc, #92]	@ (8008d64 <TIM_OC2_SetConfig+0xe4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC2_SetConfig+0x94>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a16      	ldr	r2, [pc, #88]	@ (8008d68 <TIM_OC2_SetConfig+0xe8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d113      	bne.n	8008d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40010000 	.word	0x40010000
 8008d68:	40010400 	.word	0x40010400

08008d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b087      	sub	sp, #28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0303 	bic.w	r3, r3, #3
 8008da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a21      	ldr	r2, [pc, #132]	@ (8008e4c <TIM_OC3_SetConfig+0xe0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d003      	beq.n	8008dd2 <TIM_OC3_SetConfig+0x66>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a20      	ldr	r2, [pc, #128]	@ (8008e50 <TIM_OC3_SetConfig+0xe4>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d10d      	bne.n	8008dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a16      	ldr	r2, [pc, #88]	@ (8008e4c <TIM_OC3_SetConfig+0xe0>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d003      	beq.n	8008dfe <TIM_OC3_SetConfig+0x92>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a15      	ldr	r2, [pc, #84]	@ (8008e50 <TIM_OC3_SetConfig+0xe4>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d113      	bne.n	8008e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	011b      	lsls	r3, r3, #4
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	621a      	str	r2, [r3, #32]
}
 8008e40:	bf00      	nop
 8008e42:	371c      	adds	r7, #28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	40010000 	.word	0x40010000
 8008e50:	40010400 	.word	0x40010400

08008e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	031b      	lsls	r3, r3, #12
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a12      	ldr	r2, [pc, #72]	@ (8008ef8 <TIM_OC4_SetConfig+0xa4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d003      	beq.n	8008ebc <TIM_OC4_SetConfig+0x68>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a11      	ldr	r2, [pc, #68]	@ (8008efc <TIM_OC4_SetConfig+0xa8>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d109      	bne.n	8008ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	019b      	lsls	r3, r3, #6
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	40010400 	.word	0x40010400

08008f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	f023 0201 	bic.w	r2, r3, #1
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	011b      	lsls	r3, r3, #4
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f023 030a 	bic.w	r3, r3, #10
 8008f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	621a      	str	r2, [r3, #32]
}
 8008f52:	bf00      	nop
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b087      	sub	sp, #28
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f023 0210 	bic.w	r2, r3, #16
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	031b      	lsls	r3, r3, #12
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	011b      	lsls	r3, r3, #4
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b085      	sub	sp, #20
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	f043 0307 	orr.w	r3, r3, #7
 8008fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	609a      	str	r2, [r3, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800900e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	021a      	lsls	r2, r3, #8
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	431a      	orrs	r2, r3
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	4313      	orrs	r3, r2
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	609a      	str	r2, [r3, #8]
}
 8009028:	bf00      	nop
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f003 031f 	and.w	r3, r3, #31
 8009046:	2201      	movs	r2, #1
 8009048:	fa02 f303 	lsl.w	r3, r2, r3
 800904c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a1a      	ldr	r2, [r3, #32]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	43db      	mvns	r3, r3
 8009056:	401a      	ands	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6a1a      	ldr	r2, [r3, #32]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	f003 031f 	and.w	r3, r3, #31
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	fa01 f303 	lsl.w	r3, r1, r3
 800906c:	431a      	orrs	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	621a      	str	r2, [r3, #32]
}
 8009072:	bf00      	nop
 8009074:	371c      	adds	r7, #28
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
	...

08009080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009090:	2b01      	cmp	r3, #1
 8009092:	d101      	bne.n	8009098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009094:	2302      	movs	r3, #2
 8009096:	e05a      	b.n	800914e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a21      	ldr	r2, [pc, #132]	@ (800915c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d022      	beq.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090e4:	d01d      	beq.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a1d      	ldr	r2, [pc, #116]	@ (8009160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d018      	beq.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d00e      	beq.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a18      	ldr	r2, [pc, #96]	@ (800916c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d009      	beq.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a17      	ldr	r2, [pc, #92]	@ (8009170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d004      	beq.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a15      	ldr	r2, [pc, #84]	@ (8009174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d10c      	bne.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	4313      	orrs	r3, r2
 8009132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40010000 	.word	0x40010000
 8009160:	40000400 	.word	0x40000400
 8009164:	40000800 	.word	0x40000800
 8009168:	40000c00 	.word	0x40000c00
 800916c:	40010400 	.word	0x40010400
 8009170:	40014000 	.word	0x40014000
 8009174:	40001800 	.word	0x40001800

08009178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800918c:	2b01      	cmp	r3, #1
 800918e:	d101      	bne.n	8009194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009190:	2302      	movs	r3, #2
 8009192:	e03d      	b.n	8009210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e03f      	b.n	80092ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fb fa2c 	bl	80046a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2224      	movs	r2, #36	@ 0x24
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800925e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 ff81 	bl	800a168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	691a      	ldr	r2, [r3, #16]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	695a      	ldr	r2, [r3, #20]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2220      	movs	r2, #32
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08c      	sub	sp, #48	@ 0x30
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b20      	cmp	r3, #32
 80092d0:	d165      	bne.n	800939e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <HAL_UART_Transmit_DMA+0x26>
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e05e      	b.n	80093a0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_UART_Transmit_DMA+0x38>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e057      	b.n	80093a0 <HAL_UART_Transmit_DMA+0xe8>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	88fa      	ldrh	r2, [r7, #6]
 8009302:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2221      	movs	r2, #33	@ 0x21
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800931c:	4a22      	ldr	r2, [pc, #136]	@ (80093a8 <HAL_UART_Transmit_DMA+0xf0>)
 800931e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009324:	4a21      	ldr	r2, [pc, #132]	@ (80093ac <HAL_UART_Transmit_DMA+0xf4>)
 8009326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932c:	4a20      	ldr	r2, [pc, #128]	@ (80093b0 <HAL_UART_Transmit_DMA+0xf8>)
 800932e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009334:	2200      	movs	r2, #0
 8009336:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009338:	f107 0308 	add.w	r3, r7, #8
 800933c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	6819      	ldr	r1, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3304      	adds	r3, #4
 800934c:	461a      	mov	r2, r3
 800934e:	88fb      	ldrh	r3, [r7, #6]
 8009350:	f7fc fd38 	bl	8005dc4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800935c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3314      	adds	r3, #20
 800936c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	617b      	str	r3, [r7, #20]
   return(result);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800937c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3314      	adds	r3, #20
 8009384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009386:	627a      	str	r2, [r7, #36]	@ 0x24
 8009388:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6a39      	ldr	r1, [r7, #32]
 800938c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	61fb      	str	r3, [r7, #28]
   return(result);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	e000      	b.n	80093a0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800939e:	2302      	movs	r3, #2
  }
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3730      	adds	r7, #48	@ 0x30
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	08009a01 	.word	0x08009a01
 80093ac:	08009a9b 	.word	0x08009a9b
 80093b0:	08009c13 	.word	0x08009c13

080093b4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08c      	sub	sp, #48	@ 0x30
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	4613      	mov	r3, r2
 80093c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d152      	bne.n	8009474 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80093d4:	88fb      	ldrh	r3, [r7, #6]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e04b      	b.n	8009476 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d101      	bne.n	80093ec <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e044      	b.n	8009476 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2201      	movs	r2, #1
 80093f8:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80093fa:	88fb      	ldrh	r3, [r7, #6]
 80093fc:	461a      	mov	r2, r3
 80093fe:	68b9      	ldr	r1, [r7, #8]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 fc51 	bl	8009ca8 <UART_Start_Receive_DMA>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800940c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009410:	2b00      	cmp	r3, #0
 8009412:	d12c      	bne.n	800946e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009418:	2b01      	cmp	r3, #1
 800941a:	d125      	bne.n	8009468 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800941c:	2300      	movs	r3, #0
 800941e:	613b      	str	r3, [r7, #16]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	613b      	str	r3, [r7, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	613b      	str	r3, [r7, #16]
 8009430:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	330c      	adds	r3, #12
 8009438:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	617b      	str	r3, [r7, #20]
   return(result);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f043 0310 	orr.w	r3, r3, #16
 8009448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	330c      	adds	r3, #12
 8009450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009452:	627a      	str	r2, [r7, #36]	@ 0x24
 8009454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	6a39      	ldr	r1, [r7, #32]
 8009458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e5      	bne.n	8009432 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009466:	e002      	b.n	800946e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800946e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009472:	e000      	b.n	8009476 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009474:	2302      	movs	r3, #2
  }
}
 8009476:	4618      	mov	r0, r3
 8009478:	3730      	adds	r7, #48	@ 0x30
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b0ba      	sub	sp, #232	@ 0xe8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094b6:	f003 030f 	and.w	r3, r3, #15
 80094ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80094be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10f      	bne.n	80094e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d009      	beq.n	80094e6 <HAL_UART_IRQHandler+0x66>
 80094d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d6:	f003 0320 	and.w	r3, r3, #32
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fd87 	bl	8009ff2 <UART_Receive_IT>
      return;
 80094e4:	e256      	b.n	8009994 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80094e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 80de 	beq.w	80096ac <HAL_UART_IRQHandler+0x22c>
 80094f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d106      	bne.n	800950a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80094fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009500:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 80d1 	beq.w	80096ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00b      	beq.n	800952e <HAL_UART_IRQHandler+0xae>
 8009516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800951a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800951e:	2b00      	cmp	r3, #0
 8009520:	d005      	beq.n	800952e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009526:	f043 0201 	orr.w	r2, r3, #1
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800952e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009532:	f003 0304 	and.w	r3, r3, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <HAL_UART_IRQHandler+0xd2>
 800953a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954a:	f043 0202 	orr.w	r2, r3, #2
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <HAL_UART_IRQHandler+0xf6>
 800955e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956e:	f043 0204 	orr.w	r2, r3, #4
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800957a:	f003 0308 	and.w	r3, r3, #8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d011      	beq.n	80095a6 <HAL_UART_IRQHandler+0x126>
 8009582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009586:	f003 0320 	and.w	r3, r3, #32
 800958a:	2b00      	cmp	r3, #0
 800958c:	d105      	bne.n	800959a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800958e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d005      	beq.n	80095a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800959e:	f043 0208 	orr.w	r2, r3, #8
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 81ed 	beq.w	800998a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d008      	beq.n	80095ce <HAL_UART_IRQHandler+0x14e>
 80095bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fd12 	bl	8009ff2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d8:	2b40      	cmp	r3, #64	@ 0x40
 80095da:	bf0c      	ite	eq
 80095dc:	2301      	moveq	r3, #1
 80095de:	2300      	movne	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d103      	bne.n	80095fa <HAL_UART_IRQHandler+0x17a>
 80095f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d04f      	beq.n	800969a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fc1a 	bl	8009e34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800960a:	2b40      	cmp	r3, #64	@ 0x40
 800960c:	d141      	bne.n	8009692 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3314      	adds	r3, #20
 8009614:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009624:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009628:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800962c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3314      	adds	r3, #20
 8009636:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800963a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800963e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009646:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1d9      	bne.n	800960e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965e:	2b00      	cmp	r3, #0
 8009660:	d013      	beq.n	800968a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009666:	4a7d      	ldr	r2, [pc, #500]	@ (800985c <HAL_UART_IRQHandler+0x3dc>)
 8009668:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966e:	4618      	mov	r0, r3
 8009670:	f7fc fc70 	bl	8005f54 <HAL_DMA_Abort_IT>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d016      	beq.n	80096a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009684:	4610      	mov	r0, r2
 8009686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009688:	e00e      	b.n	80096a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f9ae 	bl	80099ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009690:	e00a      	b.n	80096a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f9aa 	bl	80099ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009698:	e006      	b.n	80096a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f9a6 	bl	80099ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80096a6:	e170      	b.n	800998a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a8:	bf00      	nop
    return;
 80096aa:	e16e      	b.n	800998a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	f040 814a 	bne.w	800994a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096ba:	f003 0310 	and.w	r3, r3, #16
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 8143 	beq.w	800994a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80096c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c8:	f003 0310 	and.w	r3, r3, #16
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 813c 	beq.w	800994a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096d2:	2300      	movs	r3, #0
 80096d4:	60bb      	str	r3, [r7, #8]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60bb      	str	r3, [r7, #8]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	60bb      	str	r3, [r7, #8]
 80096e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096f2:	2b40      	cmp	r3, #64	@ 0x40
 80096f4:	f040 80b4 	bne.w	8009860 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009704:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 8140 	beq.w	800998e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009716:	429a      	cmp	r2, r3
 8009718:	f080 8139 	bcs.w	800998e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009722:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800972e:	f000 8088 	beq.w	8009842 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	330c      	adds	r3, #12
 8009738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009748:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800974c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	330c      	adds	r3, #12
 800975a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800975e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009766:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800976a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1d9      	bne.n	8009732 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3314      	adds	r3, #20
 8009784:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800978e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009790:	f023 0301 	bic.w	r3, r3, #1
 8009794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3314      	adds	r3, #20
 800979e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80097a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80097a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80097aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097ae:	e841 2300 	strex	r3, r2, [r1]
 80097b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80097b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e1      	bne.n	800977e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3314      	adds	r3, #20
 80097c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3314      	adds	r3, #20
 80097da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80097de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80097ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1e3      	bne.n	80097ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	330c      	adds	r3, #12
 8009806:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009812:	f023 0310 	bic.w	r3, r3, #16
 8009816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	330c      	adds	r3, #12
 8009820:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009824:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009826:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800982a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e3      	bne.n	8009800 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983c:	4618      	mov	r0, r3
 800983e:	f7fc fb19 	bl	8005e74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800984a:	b29b      	uxth	r3, r3
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	b29b      	uxth	r3, r3
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7f8 fc56 	bl	8002104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009858:	e099      	b.n	800998e <HAL_UART_IRQHandler+0x50e>
 800985a:	bf00      	nop
 800985c:	08009efb 	.word	0x08009efb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009868:	b29b      	uxth	r3, r3
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009874:	b29b      	uxth	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 808b 	beq.w	8009992 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800987c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 8086 	beq.w	8009992 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	330c      	adds	r3, #12
 800988c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800989c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
 80098a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80098aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80098ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1e3      	bne.n	8009886 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3314      	adds	r3, #20
 80098c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	623b      	str	r3, [r7, #32]
   return(result);
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	f023 0301 	bic.w	r3, r3, #1
 80098d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3314      	adds	r3, #20
 80098de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80098e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80098e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e3      	bne.n	80098be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	330c      	adds	r3, #12
 800990a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	e853 3f00 	ldrex	r3, [r3]
 8009912:	60fb      	str	r3, [r7, #12]
   return(result);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f023 0310 	bic.w	r3, r3, #16
 800991a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	330c      	adds	r3, #12
 8009924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009928:	61fa      	str	r2, [r7, #28]
 800992a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	69b9      	ldr	r1, [r7, #24]
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	617b      	str	r3, [r7, #20]
   return(result);
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e3      	bne.n	8009904 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800993c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7f8 fbde 	bl	8002104 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009948:	e023      	b.n	8009992 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800994a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800994e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <HAL_UART_IRQHandler+0x4ea>
 8009956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800995a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fadd 	bl	8009f22 <UART_Transmit_IT>
    return;
 8009968:	e014      	b.n	8009994 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800996a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800996e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00e      	beq.n	8009994 <HAL_UART_IRQHandler+0x514>
 8009976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800997a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800997e:	2b00      	cmp	r3, #0
 8009980:	d008      	beq.n	8009994 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fb1d 	bl	8009fc2 <UART_EndTransmit_IT>
    return;
 8009988:	e004      	b.n	8009994 <HAL_UART_IRQHandler+0x514>
    return;
 800998a:	bf00      	nop
 800998c:	e002      	b.n	8009994 <HAL_UART_IRQHandler+0x514>
      return;
 800998e:	bf00      	nop
 8009990:	e000      	b.n	8009994 <HAL_UART_IRQHandler+0x514>
      return;
 8009992:	bf00      	nop
  }
}
 8009994:	37e8      	adds	r7, #232	@ 0xe8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop

0800999c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b090      	sub	sp, #64	@ 0x40
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d137      	bne.n	8009a8c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1e:	2200      	movs	r2, #0
 8009a20:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	3314      	adds	r3, #20
 8009a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	623b      	str	r3, [r7, #32]
   return(result);
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3314      	adds	r3, #20
 8009a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a42:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e5      	bne.n	8009a22 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	330c      	adds	r3, #12
 8009a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	330c      	adds	r3, #12
 8009a74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a76:	61fa      	str	r2, [r7, #28]
 8009a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	69b9      	ldr	r1, [r7, #24]
 8009a7c:	69fa      	ldr	r2, [r7, #28]
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	617b      	str	r3, [r7, #20]
   return(result);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e5      	bne.n	8009a56 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a8a:	e002      	b.n	8009a92 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009a8c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009a8e:	f7ff ff85 	bl	800999c <HAL_UART_TxCpltCallback>
}
 8009a92:	bf00      	nop
 8009a94:	3740      	adds	r7, #64	@ 0x40
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f7ff ff81 	bl	80099b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aae:	bf00      	nop
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b09c      	sub	sp, #112	@ 0x70
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d172      	bne.n	8009bb8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	330c      	adds	r3, #12
 8009ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ae2:	e853 3f00 	ldrex	r3, [r3]
 8009ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	330c      	adds	r3, #12
 8009af6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009af8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009afa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009afe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e5      	bne.n	8009ad8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3314      	adds	r3, #20
 8009b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	e853 3f00 	ldrex	r3, [r3]
 8009b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1e:	f023 0301 	bic.w	r3, r3, #1
 8009b22:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3314      	adds	r3, #20
 8009b2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b2c:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b2e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b34:	e841 2300 	strex	r3, r2, [r1]
 8009b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e5      	bne.n	8009b0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3314      	adds	r3, #20
 8009b46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4a:	e853 3f00 	ldrex	r3, [r3]
 8009b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b56:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3314      	adds	r3, #20
 8009b5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009b60:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b68:	e841 2300 	strex	r3, r2, [r1]
 8009b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e5      	bne.n	8009b40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b76:	2220      	movs	r2, #32
 8009b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d119      	bne.n	8009bb8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	330c      	adds	r3, #12
 8009b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0310 	bic.w	r3, r3, #16
 8009b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009ba4:	61fa      	str	r2, [r7, #28]
 8009ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	69b9      	ldr	r1, [r7, #24]
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e5      	bne.n	8009b84 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d106      	bne.n	8009bce <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bc2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009bc8:	f7f8 fa9c 	bl	8002104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bcc:	e002      	b.n	8009bd4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009bce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009bd0:	f7ff fef8 	bl	80099c4 <HAL_UART_RxCpltCallback>
}
 8009bd4:	bf00      	nop
 8009bd6:	3770      	adds	r7, #112	@ 0x70
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d108      	bne.n	8009c04 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bf6:	085b      	lsrs	r3, r3, #1
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7f8 fa81 	bl	8002104 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c02:	e002      	b.n	8009c0a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7ff fee7 	bl	80099d8 <HAL_UART_RxHalfCpltCallback>
}
 8009c0a:	bf00      	nop
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c22:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c2e:	2b80      	cmp	r3, #128	@ 0x80
 8009c30:	bf0c      	ite	eq
 8009c32:	2301      	moveq	r3, #1
 8009c34:	2300      	movne	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b21      	cmp	r3, #33	@ 0x21
 8009c44:	d108      	bne.n	8009c58 <UART_DMAError+0x46>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d005      	beq.n	8009c58 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009c52:	68b8      	ldr	r0, [r7, #8]
 8009c54:	f000 f8c6 	bl	8009de4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c62:	2b40      	cmp	r3, #64	@ 0x40
 8009c64:	bf0c      	ite	eq
 8009c66:	2301      	moveq	r3, #1
 8009c68:	2300      	movne	r3, #0
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b22      	cmp	r3, #34	@ 0x22
 8009c78:	d108      	bne.n	8009c8c <UART_DMAError+0x7a>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d005      	beq.n	8009c8c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009c86:	68b8      	ldr	r0, [r7, #8]
 8009c88:	f000 f8d4 	bl	8009e34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c90:	f043 0210 	orr.w	r2, r3, #16
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c98:	68b8      	ldr	r0, [r7, #8]
 8009c9a:	f7ff fea7 	bl	80099ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b098      	sub	sp, #96	@ 0x60
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2222      	movs	r2, #34	@ 0x22
 8009ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd4:	4a40      	ldr	r2, [pc, #256]	@ (8009dd8 <UART_Start_Receive_DMA+0x130>)
 8009cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ddc <UART_Start_Receive_DMA+0x134>)
 8009cde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8009de0 <UART_Start_Receive_DMA+0x138>)
 8009ce6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cec:	2200      	movs	r2, #0
 8009cee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009cf0:	f107 0308 	add.w	r3, r7, #8
 8009cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4619      	mov	r1, r3
 8009d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	88fb      	ldrh	r3, [r7, #6]
 8009d08:	f7fc f85c 	bl	8005dc4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	613b      	str	r3, [r7, #16]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	613b      	str	r3, [r7, #16]
 8009d20:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d019      	beq.n	8009d66 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	330c      	adds	r3, #12
 8009d38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	330c      	adds	r3, #12
 8009d50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d52:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009d54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009d58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d5a:	e841 2300 	strex	r3, r2, [r1]
 8009d5e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1e5      	bne.n	8009d32 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3314      	adds	r3, #20
 8009d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d78:	f043 0301 	orr.w	r3, r3, #1
 8009d7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	3314      	adds	r3, #20
 8009d84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d86:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009d88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009d8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d8e:	e841 2300 	strex	r3, r2, [r1]
 8009d92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1e5      	bne.n	8009d66 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3314      	adds	r3, #20
 8009da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	617b      	str	r3, [r7, #20]
   return(result);
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3314      	adds	r3, #20
 8009db8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009dba:	627a      	str	r2, [r7, #36]	@ 0x24
 8009dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	6a39      	ldr	r1, [r7, #32]
 8009dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e5      	bne.n	8009d9a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3760      	adds	r7, #96	@ 0x60
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	08009ab7 	.word	0x08009ab7
 8009ddc:	08009bdd 	.word	0x08009bdd
 8009de0:	08009c13 	.word	0x08009c13

08009de4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b089      	sub	sp, #36	@ 0x24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	330c      	adds	r3, #12
 8009df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	e853 3f00 	ldrex	r3, [r3]
 8009dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e02:	61fb      	str	r3, [r7, #28]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	330c      	adds	r3, #12
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	61ba      	str	r2, [r7, #24]
 8009e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	6979      	ldr	r1, [r7, #20]
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	e841 2300 	strex	r3, r2, [r1]
 8009e18:	613b      	str	r3, [r7, #16]
   return(result);
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e5      	bne.n	8009dec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8009e28:	bf00      	nop
 8009e2a:	3724      	adds	r7, #36	@ 0x24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b095      	sub	sp, #84	@ 0x54
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	330c      	adds	r3, #12
 8009e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e46:	e853 3f00 	ldrex	r3, [r3]
 8009e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	330c      	adds	r3, #12
 8009e5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e64:	e841 2300 	strex	r3, r2, [r1]
 8009e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1e5      	bne.n	8009e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3314      	adds	r3, #20
 8009e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	e853 3f00 	ldrex	r3, [r3]
 8009e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	f023 0301 	bic.w	r3, r3, #1
 8009e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3314      	adds	r3, #20
 8009e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e5      	bne.n	8009e70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d119      	bne.n	8009ee0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	330c      	adds	r3, #12
 8009eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f023 0310 	bic.w	r3, r3, #16
 8009ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	330c      	adds	r3, #12
 8009eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ecc:	61ba      	str	r2, [r7, #24]
 8009ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6979      	ldr	r1, [r7, #20]
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e5      	bne.n	8009eac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009eee:	bf00      	nop
 8009ef0:	3754      	adds	r7, #84	@ 0x54
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff fd69 	bl	80099ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f1a:	bf00      	nop
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b085      	sub	sp, #20
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b21      	cmp	r3, #33	@ 0x21
 8009f34:	d13e      	bne.n	8009fb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f3e:	d114      	bne.n	8009f6a <UART_Transmit_IT+0x48>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d110      	bne.n	8009f6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	1c9a      	adds	r2, r3, #2
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	621a      	str	r2, [r3, #32]
 8009f68:	e008      	b.n	8009f7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	1c59      	adds	r1, r3, #1
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	6211      	str	r1, [r2, #32]
 8009f74:	781a      	ldrb	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	3b01      	subs	r3, #1
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10f      	bne.n	8009fb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e000      	b.n	8009fb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009fb4:	2302      	movs	r3, #2
  }
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68da      	ldr	r2, [r3, #12]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7ff fcda 	bl	800999c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b08c      	sub	sp, #48	@ 0x30
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b22      	cmp	r3, #34	@ 0x22
 800a004:	f040 80ab 	bne.w	800a15e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a010:	d117      	bne.n	800a042 <UART_Receive_IT+0x50>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d113      	bne.n	800a042 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a022:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a030:	b29a      	uxth	r2, r3
 800a032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a034:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03a:	1c9a      	adds	r2, r3, #2
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a040:	e026      	b.n	800a090 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a046:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a048:	2300      	movs	r3, #0
 800a04a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a054:	d007      	beq.n	800a066 <UART_Receive_IT+0x74>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <UART_Receive_IT+0x82>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d106      	bne.n	800a074 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	e008      	b.n	800a086 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a080:	b2da      	uxtb	r2, r3
 800a082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a084:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a094:	b29b      	uxth	r3, r3
 800a096:	3b01      	subs	r3, #1
 800a098:	b29b      	uxth	r3, r3
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	4619      	mov	r1, r3
 800a09e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d15a      	bne.n	800a15a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 0220 	bic.w	r2, r2, #32
 800a0b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	695a      	ldr	r2, [r3, #20]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0201 	bic.w	r2, r2, #1
 800a0d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d135      	bne.n	800a150 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	330c      	adds	r3, #12
 800a0f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f023 0310 	bic.w	r3, r3, #16
 800a100:	627b      	str	r3, [r7, #36]	@ 0x24
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	330c      	adds	r3, #12
 800a108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a10a:	623a      	str	r2, [r7, #32]
 800a10c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	69f9      	ldr	r1, [r7, #28]
 800a110:	6a3a      	ldr	r2, [r7, #32]
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	61bb      	str	r3, [r7, #24]
   return(result);
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e5      	bne.n	800a0ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0310 	and.w	r3, r3, #16
 800a128:	2b10      	cmp	r3, #16
 800a12a:	d10a      	bne.n	800a142 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7f7 ffdb 	bl	8002104 <HAL_UARTEx_RxEventCallback>
 800a14e:	e002      	b.n	800a156 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fc37 	bl	80099c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	e002      	b.n	800a160 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	e000      	b.n	800a160 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a15e:	2302      	movs	r3, #2
  }
}
 800a160:	4618      	mov	r0, r3
 800a162:	3730      	adds	r7, #48	@ 0x30
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a16c:	b0c0      	sub	sp, #256	@ 0x100
 800a16e:	af00      	add	r7, sp, #0
 800a170:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a184:	68d9      	ldr	r1, [r3, #12]
 800a186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	ea40 0301 	orr.w	r3, r0, r1
 800a190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a1c0:	f021 010c 	bic.w	r1, r1, #12
 800a1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a1d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a1de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1e2:	6999      	ldr	r1, [r3, #24]
 800a1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	ea40 0301 	orr.w	r3, r0, r1
 800a1ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4b8f      	ldr	r3, [pc, #572]	@ (800a434 <UART_SetConfig+0x2cc>)
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d005      	beq.n	800a208 <UART_SetConfig+0xa0>
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4b8d      	ldr	r3, [pc, #564]	@ (800a438 <UART_SetConfig+0x2d0>)
 800a204:	429a      	cmp	r2, r3
 800a206:	d104      	bne.n	800a212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a208:	f7fd fd3c 	bl	8007c84 <HAL_RCC_GetPCLK2Freq>
 800a20c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a210:	e003      	b.n	800a21a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a212:	f7fd fd23 	bl	8007c5c <HAL_RCC_GetPCLK1Freq>
 800a216:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a224:	f040 810c 	bne.w	800a440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a22c:	2200      	movs	r2, #0
 800a22e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a232:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a23a:	4622      	mov	r2, r4
 800a23c:	462b      	mov	r3, r5
 800a23e:	1891      	adds	r1, r2, r2
 800a240:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a242:	415b      	adcs	r3, r3
 800a244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a24a:	4621      	mov	r1, r4
 800a24c:	eb12 0801 	adds.w	r8, r2, r1
 800a250:	4629      	mov	r1, r5
 800a252:	eb43 0901 	adc.w	r9, r3, r1
 800a256:	f04f 0200 	mov.w	r2, #0
 800a25a:	f04f 0300 	mov.w	r3, #0
 800a25e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a26a:	4690      	mov	r8, r2
 800a26c:	4699      	mov	r9, r3
 800a26e:	4623      	mov	r3, r4
 800a270:	eb18 0303 	adds.w	r3, r8, r3
 800a274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a278:	462b      	mov	r3, r5
 800a27a:	eb49 0303 	adc.w	r3, r9, r3
 800a27e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a28e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a296:	460b      	mov	r3, r1
 800a298:	18db      	adds	r3, r3, r3
 800a29a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a29c:	4613      	mov	r3, r2
 800a29e:	eb42 0303 	adc.w	r3, r2, r3
 800a2a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a2a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a2ac:	f7f6 fbfe 	bl	8000aac <__aeabi_uldivmod>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4b61      	ldr	r3, [pc, #388]	@ (800a43c <UART_SetConfig+0x2d4>)
 800a2b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a2ba:	095b      	lsrs	r3, r3, #5
 800a2bc:	011c      	lsls	r4, r3, #4
 800a2be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a2cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	1891      	adds	r1, r2, r2
 800a2d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a2d8:	415b      	adcs	r3, r3
 800a2da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	eb12 0a01 	adds.w	sl, r2, r1
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	eb43 0b01 	adc.w	fp, r3, r1
 800a2ec:	f04f 0200 	mov.w	r2, #0
 800a2f0:	f04f 0300 	mov.w	r3, #0
 800a2f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a2f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a2fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a300:	4692      	mov	sl, r2
 800a302:	469b      	mov	fp, r3
 800a304:	4643      	mov	r3, r8
 800a306:	eb1a 0303 	adds.w	r3, sl, r3
 800a30a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a30e:	464b      	mov	r3, r9
 800a310:	eb4b 0303 	adc.w	r3, fp, r3
 800a314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a324:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a32c:	460b      	mov	r3, r1
 800a32e:	18db      	adds	r3, r3, r3
 800a330:	643b      	str	r3, [r7, #64]	@ 0x40
 800a332:	4613      	mov	r3, r2
 800a334:	eb42 0303 	adc.w	r3, r2, r3
 800a338:	647b      	str	r3, [r7, #68]	@ 0x44
 800a33a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a33e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a342:	f7f6 fbb3 	bl	8000aac <__aeabi_uldivmod>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	4611      	mov	r1, r2
 800a34c:	4b3b      	ldr	r3, [pc, #236]	@ (800a43c <UART_SetConfig+0x2d4>)
 800a34e:	fba3 2301 	umull	r2, r3, r3, r1
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	2264      	movs	r2, #100	@ 0x64
 800a356:	fb02 f303 	mul.w	r3, r2, r3
 800a35a:	1acb      	subs	r3, r1, r3
 800a35c:	00db      	lsls	r3, r3, #3
 800a35e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a362:	4b36      	ldr	r3, [pc, #216]	@ (800a43c <UART_SetConfig+0x2d4>)
 800a364:	fba3 2302 	umull	r2, r3, r3, r2
 800a368:	095b      	lsrs	r3, r3, #5
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a370:	441c      	add	r4, r3
 800a372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a376:	2200      	movs	r2, #0
 800a378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a37c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a384:	4642      	mov	r2, r8
 800a386:	464b      	mov	r3, r9
 800a388:	1891      	adds	r1, r2, r2
 800a38a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a38c:	415b      	adcs	r3, r3
 800a38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a394:	4641      	mov	r1, r8
 800a396:	1851      	adds	r1, r2, r1
 800a398:	6339      	str	r1, [r7, #48]	@ 0x30
 800a39a:	4649      	mov	r1, r9
 800a39c:	414b      	adcs	r3, r1
 800a39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3a0:	f04f 0200 	mov.w	r2, #0
 800a3a4:	f04f 0300 	mov.w	r3, #0
 800a3a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a3ac:	4659      	mov	r1, fp
 800a3ae:	00cb      	lsls	r3, r1, #3
 800a3b0:	4651      	mov	r1, sl
 800a3b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3b6:	4651      	mov	r1, sl
 800a3b8:	00ca      	lsls	r2, r1, #3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4642      	mov	r2, r8
 800a3c2:	189b      	adds	r3, r3, r2
 800a3c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3c8:	464b      	mov	r3, r9
 800a3ca:	460a      	mov	r2, r1
 800a3cc:	eb42 0303 	adc.w	r3, r2, r3
 800a3d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a3e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a3e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	18db      	adds	r3, r3, r3
 800a3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	eb42 0303 	adc.w	r3, r2, r3
 800a3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a3fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a3fe:	f7f6 fb55 	bl	8000aac <__aeabi_uldivmod>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4b0d      	ldr	r3, [pc, #52]	@ (800a43c <UART_SetConfig+0x2d4>)
 800a408:	fba3 1302 	umull	r1, r3, r3, r2
 800a40c:	095b      	lsrs	r3, r3, #5
 800a40e:	2164      	movs	r1, #100	@ 0x64
 800a410:	fb01 f303 	mul.w	r3, r1, r3
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	3332      	adds	r3, #50	@ 0x32
 800a41a:	4a08      	ldr	r2, [pc, #32]	@ (800a43c <UART_SetConfig+0x2d4>)
 800a41c:	fba2 2303 	umull	r2, r3, r2, r3
 800a420:	095b      	lsrs	r3, r3, #5
 800a422:	f003 0207 	and.w	r2, r3, #7
 800a426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4422      	add	r2, r4
 800a42e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a430:	e106      	b.n	800a640 <UART_SetConfig+0x4d8>
 800a432:	bf00      	nop
 800a434:	40011000 	.word	0x40011000
 800a438:	40011400 	.word	0x40011400
 800a43c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a444:	2200      	movs	r2, #0
 800a446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a44a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a44e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a452:	4642      	mov	r2, r8
 800a454:	464b      	mov	r3, r9
 800a456:	1891      	adds	r1, r2, r2
 800a458:	6239      	str	r1, [r7, #32]
 800a45a:	415b      	adcs	r3, r3
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a45e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a462:	4641      	mov	r1, r8
 800a464:	1854      	adds	r4, r2, r1
 800a466:	4649      	mov	r1, r9
 800a468:	eb43 0501 	adc.w	r5, r3, r1
 800a46c:	f04f 0200 	mov.w	r2, #0
 800a470:	f04f 0300 	mov.w	r3, #0
 800a474:	00eb      	lsls	r3, r5, #3
 800a476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a47a:	00e2      	lsls	r2, r4, #3
 800a47c:	4614      	mov	r4, r2
 800a47e:	461d      	mov	r5, r3
 800a480:	4643      	mov	r3, r8
 800a482:	18e3      	adds	r3, r4, r3
 800a484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a488:	464b      	mov	r3, r9
 800a48a:	eb45 0303 	adc.w	r3, r5, r3
 800a48e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a49e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a4a2:	f04f 0200 	mov.w	r2, #0
 800a4a6:	f04f 0300 	mov.w	r3, #0
 800a4aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	008b      	lsls	r3, r1, #2
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	008a      	lsls	r2, r1, #2
 800a4bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a4c0:	f7f6 faf4 	bl	8000aac <__aeabi_uldivmod>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4b60      	ldr	r3, [pc, #384]	@ (800a64c <UART_SetConfig+0x4e4>)
 800a4ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a4ce:	095b      	lsrs	r3, r3, #5
 800a4d0:	011c      	lsls	r4, r3, #4
 800a4d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a4dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a4e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a4e4:	4642      	mov	r2, r8
 800a4e6:	464b      	mov	r3, r9
 800a4e8:	1891      	adds	r1, r2, r2
 800a4ea:	61b9      	str	r1, [r7, #24]
 800a4ec:	415b      	adcs	r3, r3
 800a4ee:	61fb      	str	r3, [r7, #28]
 800a4f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4f4:	4641      	mov	r1, r8
 800a4f6:	1851      	adds	r1, r2, r1
 800a4f8:	6139      	str	r1, [r7, #16]
 800a4fa:	4649      	mov	r1, r9
 800a4fc:	414b      	adcs	r3, r1
 800a4fe:	617b      	str	r3, [r7, #20]
 800a500:	f04f 0200 	mov.w	r2, #0
 800a504:	f04f 0300 	mov.w	r3, #0
 800a508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a50c:	4659      	mov	r1, fp
 800a50e:	00cb      	lsls	r3, r1, #3
 800a510:	4651      	mov	r1, sl
 800a512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a516:	4651      	mov	r1, sl
 800a518:	00ca      	lsls	r2, r1, #3
 800a51a:	4610      	mov	r0, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	4603      	mov	r3, r0
 800a520:	4642      	mov	r2, r8
 800a522:	189b      	adds	r3, r3, r2
 800a524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a528:	464b      	mov	r3, r9
 800a52a:	460a      	mov	r2, r1
 800a52c:	eb42 0303 	adc.w	r3, r2, r3
 800a530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a53e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a54c:	4649      	mov	r1, r9
 800a54e:	008b      	lsls	r3, r1, #2
 800a550:	4641      	mov	r1, r8
 800a552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a556:	4641      	mov	r1, r8
 800a558:	008a      	lsls	r2, r1, #2
 800a55a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a55e:	f7f6 faa5 	bl	8000aac <__aeabi_uldivmod>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4611      	mov	r1, r2
 800a568:	4b38      	ldr	r3, [pc, #224]	@ (800a64c <UART_SetConfig+0x4e4>)
 800a56a:	fba3 2301 	umull	r2, r3, r3, r1
 800a56e:	095b      	lsrs	r3, r3, #5
 800a570:	2264      	movs	r2, #100	@ 0x64
 800a572:	fb02 f303 	mul.w	r3, r2, r3
 800a576:	1acb      	subs	r3, r1, r3
 800a578:	011b      	lsls	r3, r3, #4
 800a57a:	3332      	adds	r3, #50	@ 0x32
 800a57c:	4a33      	ldr	r2, [pc, #204]	@ (800a64c <UART_SetConfig+0x4e4>)
 800a57e:	fba2 2303 	umull	r2, r3, r2, r3
 800a582:	095b      	lsrs	r3, r3, #5
 800a584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a588:	441c      	add	r4, r3
 800a58a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a58e:	2200      	movs	r2, #0
 800a590:	673b      	str	r3, [r7, #112]	@ 0x70
 800a592:	677a      	str	r2, [r7, #116]	@ 0x74
 800a594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a598:	4642      	mov	r2, r8
 800a59a:	464b      	mov	r3, r9
 800a59c:	1891      	adds	r1, r2, r2
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	415b      	adcs	r3, r3
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	1851      	adds	r1, r2, r1
 800a5ac:	6039      	str	r1, [r7, #0]
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	414b      	adcs	r3, r1
 800a5b2:	607b      	str	r3, [r7, #4]
 800a5b4:	f04f 0200 	mov.w	r2, #0
 800a5b8:	f04f 0300 	mov.w	r3, #0
 800a5bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a5c0:	4659      	mov	r1, fp
 800a5c2:	00cb      	lsls	r3, r1, #3
 800a5c4:	4651      	mov	r1, sl
 800a5c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5ca:	4651      	mov	r1, sl
 800a5cc:	00ca      	lsls	r2, r1, #3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	189b      	adds	r3, r3, r2
 800a5d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5da:	464b      	mov	r3, r9
 800a5dc:	460a      	mov	r2, r1
 800a5de:	eb42 0303 	adc.w	r3, r2, r3
 800a5e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5ee:	667a      	str	r2, [r7, #100]	@ 0x64
 800a5f0:	f04f 0200 	mov.w	r2, #0
 800a5f4:	f04f 0300 	mov.w	r3, #0
 800a5f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	008b      	lsls	r3, r1, #2
 800a600:	4641      	mov	r1, r8
 800a602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a606:	4641      	mov	r1, r8
 800a608:	008a      	lsls	r2, r1, #2
 800a60a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a60e:	f7f6 fa4d 	bl	8000aac <__aeabi_uldivmod>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4b0d      	ldr	r3, [pc, #52]	@ (800a64c <UART_SetConfig+0x4e4>)
 800a618:	fba3 1302 	umull	r1, r3, r3, r2
 800a61c:	095b      	lsrs	r3, r3, #5
 800a61e:	2164      	movs	r1, #100	@ 0x64
 800a620:	fb01 f303 	mul.w	r3, r1, r3
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	011b      	lsls	r3, r3, #4
 800a628:	3332      	adds	r3, #50	@ 0x32
 800a62a:	4a08      	ldr	r2, [pc, #32]	@ (800a64c <UART_SetConfig+0x4e4>)
 800a62c:	fba2 2303 	umull	r2, r3, r2, r3
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	f003 020f 	and.w	r2, r3, #15
 800a636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4422      	add	r2, r4
 800a63e:	609a      	str	r2, [r3, #8]
}
 800a640:	bf00      	nop
 800a642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a646:	46bd      	mov	sp, r7
 800a648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a64c:	51eb851f 	.word	0x51eb851f

0800a650 <__NVIC_SetPriority>:
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	6039      	str	r1, [r7, #0]
 800a65a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a65c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a660:	2b00      	cmp	r3, #0
 800a662:	db0a      	blt.n	800a67a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	b2da      	uxtb	r2, r3
 800a668:	490c      	ldr	r1, [pc, #48]	@ (800a69c <__NVIC_SetPriority+0x4c>)
 800a66a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a66e:	0112      	lsls	r2, r2, #4
 800a670:	b2d2      	uxtb	r2, r2
 800a672:	440b      	add	r3, r1
 800a674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a678:	e00a      	b.n	800a690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	4908      	ldr	r1, [pc, #32]	@ (800a6a0 <__NVIC_SetPriority+0x50>)
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	f003 030f 	and.w	r3, r3, #15
 800a686:	3b04      	subs	r3, #4
 800a688:	0112      	lsls	r2, r2, #4
 800a68a:	b2d2      	uxtb	r2, r2
 800a68c:	440b      	add	r3, r1
 800a68e:	761a      	strb	r2, [r3, #24]
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	e000e100 	.word	0xe000e100
 800a6a0:	e000ed00 	.word	0xe000ed00

0800a6a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	f06f 0004 	mvn.w	r0, #4
 800a6ae:	f7ff ffcf 	bl	800a650 <__NVIC_SetPriority>
#endif
}
 800a6b2:	bf00      	nop
 800a6b4:	bd80      	pop	{r7, pc}
	...

0800a6b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6be:	f3ef 8305 	mrs	r3, IPSR
 800a6c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a6c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a6ca:	f06f 0305 	mvn.w	r3, #5
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	e00c      	b.n	800a6ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6fc <osKernelInitialize+0x44>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d105      	bne.n	800a6e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6da:	4b08      	ldr	r3, [pc, #32]	@ (800a6fc <osKernelInitialize+0x44>)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	607b      	str	r3, [r7, #4]
 800a6e4:	e002      	b.n	800a6ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a6e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6ec:	687b      	ldr	r3, [r7, #4]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	20000c80 	.word	0x20000c80

0800a700 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a706:	f3ef 8305 	mrs	r3, IPSR
 800a70a:	603b      	str	r3, [r7, #0]
  return(result);
 800a70c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a712:	f06f 0305 	mvn.w	r3, #5
 800a716:	607b      	str	r3, [r7, #4]
 800a718:	e010      	b.n	800a73c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a71a:	4b0b      	ldr	r3, [pc, #44]	@ (800a748 <osKernelStart+0x48>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d109      	bne.n	800a736 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a722:	f7ff ffbf 	bl	800a6a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a726:	4b08      	ldr	r3, [pc, #32]	@ (800a748 <osKernelStart+0x48>)
 800a728:	2202      	movs	r2, #2
 800a72a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a72c:	f001 f892 	bl	800b854 <vTaskStartScheduler>
      stat = osOK;
 800a730:	2300      	movs	r3, #0
 800a732:	607b      	str	r3, [r7, #4]
 800a734:	e002      	b.n	800a73c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a73a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a73c:	687b      	ldr	r3, [r7, #4]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20000c80 	.word	0x20000c80

0800a74c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b08e      	sub	sp, #56	@ 0x38
 800a750:	af04      	add	r7, sp, #16
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a758:	2300      	movs	r3, #0
 800a75a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a75c:	f3ef 8305 	mrs	r3, IPSR
 800a760:	617b      	str	r3, [r7, #20]
  return(result);
 800a762:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a764:	2b00      	cmp	r3, #0
 800a766:	d17e      	bne.n	800a866 <osThreadNew+0x11a>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d07b      	beq.n	800a866 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a76e:	2380      	movs	r3, #128	@ 0x80
 800a770:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a772:	2318      	movs	r3, #24
 800a774:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a77a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a77e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d045      	beq.n	800a812 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <osThreadNew+0x48>
        name = attr->name;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d008      	beq.n	800a7ba <osThreadNew+0x6e>
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	2b38      	cmp	r3, #56	@ 0x38
 800a7ac:	d805      	bhi.n	800a7ba <osThreadNew+0x6e>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <osThreadNew+0x72>
        return (NULL);
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e054      	b.n	800a868 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	695b      	ldr	r3, [r3, #20]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	089b      	lsrs	r3, r3, #2
 800a7cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00e      	beq.n	800a7f4 <osThreadNew+0xa8>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	2ba7      	cmp	r3, #167	@ 0xa7
 800a7dc:	d90a      	bls.n	800a7f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d006      	beq.n	800a7f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <osThreadNew+0xa8>
        mem = 1;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	61bb      	str	r3, [r7, #24]
 800a7f2:	e010      	b.n	800a816 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10c      	bne.n	800a816 <osThreadNew+0xca>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d108      	bne.n	800a816 <osThreadNew+0xca>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <osThreadNew+0xca>
          mem = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	61bb      	str	r3, [r7, #24]
 800a810:	e001      	b.n	800a816 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d110      	bne.n	800a83e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a824:	9202      	str	r2, [sp, #8]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	6a3a      	ldr	r2, [r7, #32]
 800a830:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f000 fe1a 	bl	800b46c <xTaskCreateStatic>
 800a838:	4603      	mov	r3, r0
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	e013      	b.n	800a866 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d110      	bne.n	800a866 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	b29a      	uxth	r2, r3
 800a848:	f107 0310 	add.w	r3, r7, #16
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 fe68 	bl	800b52c <xTaskCreate>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d001      	beq.n	800a866 <osThreadNew+0x11a>
            hTask = NULL;
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a866:	693b      	ldr	r3, [r7, #16]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3728      	adds	r7, #40	@ 0x28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a878:	f3ef 8305 	mrs	r3, IPSR
 800a87c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a87e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a880:	2b00      	cmp	r3, #0
 800a882:	d003      	beq.n	800a88c <osDelay+0x1c>
    stat = osErrorISR;
 800a884:	f06f 0305 	mvn.w	r3, #5
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	e007      	b.n	800a89c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 ffa6 	bl	800b7e8 <vTaskDelay>
    }
  }

  return (stat);
 800a89c:	68fb      	ldr	r3, [r7, #12]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4a07      	ldr	r2, [pc, #28]	@ (800a8d4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a8b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	4a06      	ldr	r2, [pc, #24]	@ (800a8d8 <vApplicationGetIdleTaskMemory+0x30>)
 800a8be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2280      	movs	r2, #128	@ 0x80
 800a8c4:	601a      	str	r2, [r3, #0]
}
 800a8c6:	bf00      	nop
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	20000c84 	.word	0x20000c84
 800a8d8:	20000d2c 	.word	0x20000d2c

0800a8dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4a07      	ldr	r2, [pc, #28]	@ (800a908 <vApplicationGetTimerTaskMemory+0x2c>)
 800a8ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	4a06      	ldr	r2, [pc, #24]	@ (800a90c <vApplicationGetTimerTaskMemory+0x30>)
 800a8f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8fa:	601a      	str	r2, [r3, #0]
}
 800a8fc:	bf00      	nop
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	20000f2c 	.word	0x20000f2c
 800a90c:	20000fd4 	.word	0x20000fd4

0800a910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f103 0208 	add.w	r2, r3, #8
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f103 0208 	add.w	r2, r3, #8
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f103 0208 	add.w	r2, r3, #8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a95e:	bf00      	nop
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	601a      	str	r2, [r3, #0]
}
 800a9a6:	bf00      	nop
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9c8:	d103      	bne.n	800a9d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e00c      	b.n	800a9ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	e002      	b.n	800a9e0 <vListInsert+0x2e>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d2f6      	bcs.n	800a9da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	601a      	str	r2, [r3, #0]
}
 800aa18:	bf00      	nop
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6892      	ldr	r2, [r2, #8]
 800aa3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	6852      	ldr	r2, [r2, #4]
 800aa44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d103      	bne.n	800aa58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	1e5a      	subs	r2, r3, #1
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10b      	bne.n	800aaa4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa9e:	bf00      	nop
 800aaa0:	bf00      	nop
 800aaa2:	e7fd      	b.n	800aaa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aaa4:	f002 fa80 	bl	800cfa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aab0:	68f9      	ldr	r1, [r7, #12]
 800aab2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aab4:	fb01 f303 	mul.w	r3, r1, r3
 800aab8:	441a      	add	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aad4:	3b01      	subs	r3, #1
 800aad6:	68f9      	ldr	r1, [r7, #12]
 800aad8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aada:	fb01 f303 	mul.w	r3, r1, r3
 800aade:	441a      	add	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	22ff      	movs	r2, #255	@ 0xff
 800aae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	22ff      	movs	r2, #255	@ 0xff
 800aaf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d114      	bne.n	800ab24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01a      	beq.n	800ab38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3310      	adds	r3, #16
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 fa3c 	bl	800bf84 <xTaskRemoveFromEventList>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d012      	beq.n	800ab38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab12:	4b0d      	ldr	r3, [pc, #52]	@ (800ab48 <xQueueGenericReset+0xd0>)
 800ab14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	e009      	b.n	800ab38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3310      	adds	r3, #16
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff fef1 	bl	800a910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3324      	adds	r3, #36	@ 0x24
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff feec 	bl	800a910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab38:	f002 fa68 	bl	800d00c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab3c:	2301      	movs	r3, #1
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08e      	sub	sp, #56	@ 0x38
 800ab50:	af02      	add	r7, sp, #8
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10b      	bne.n	800ab78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab72:	bf00      	nop
 800ab74:	bf00      	nop
 800ab76:	e7fd      	b.n	800ab74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10b      	bne.n	800ab96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab90:	bf00      	nop
 800ab92:	bf00      	nop
 800ab94:	e7fd      	b.n	800ab92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <xQueueGenericCreateStatic+0x56>
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <xQueueGenericCreateStatic+0x5a>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e000      	b.n	800aba8 <xQueueGenericCreateStatic+0x5c>
 800aba6:	2300      	movs	r3, #0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10b      	bne.n	800abc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	623b      	str	r3, [r7, #32]
}
 800abbe:	bf00      	nop
 800abc0:	bf00      	nop
 800abc2:	e7fd      	b.n	800abc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <xQueueGenericCreateStatic+0x84>
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <xQueueGenericCreateStatic+0x88>
 800abd0:	2301      	movs	r3, #1
 800abd2:	e000      	b.n	800abd6 <xQueueGenericCreateStatic+0x8a>
 800abd4:	2300      	movs	r3, #0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10b      	bne.n	800abf2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	61fb      	str	r3, [r7, #28]
}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	e7fd      	b.n	800abee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abf2:	2350      	movs	r3, #80	@ 0x50
 800abf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b50      	cmp	r3, #80	@ 0x50
 800abfa:	d00b      	beq.n	800ac14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	61bb      	str	r3, [r7, #24]
}
 800ac0e:	bf00      	nop
 800ac10:	bf00      	nop
 800ac12:	e7fd      	b.n	800ac10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ac1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00d      	beq.n	800ac3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	4613      	mov	r3, r2
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	68b9      	ldr	r1, [r7, #8]
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 f805 	bl	800ac46 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3730      	adds	r7, #48	@ 0x30
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	60b9      	str	r1, [r7, #8]
 800ac50:	607a      	str	r2, [r7, #4]
 800ac52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d103      	bne.n	800ac62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	e002      	b.n	800ac68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac74:	2101      	movs	r1, #1
 800ac76:	69b8      	ldr	r0, [r7, #24]
 800ac78:	f7ff fefe 	bl	800aa78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	78fa      	ldrb	r2, [r7, #3]
 800ac80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac84:	bf00      	nop
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08e      	sub	sp, #56	@ 0x38
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <xQueueGenericSend+0x34>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d103      	bne.n	800acce <xQueueGenericSend+0x42>
 800acc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <xQueueGenericSend+0x46>
 800acce:	2301      	movs	r3, #1
 800acd0:	e000      	b.n	800acd4 <xQueueGenericSend+0x48>
 800acd2:	2300      	movs	r3, #0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10b      	bne.n	800acf0 <xQueueGenericSend+0x64>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800acea:	bf00      	nop
 800acec:	bf00      	nop
 800acee:	e7fd      	b.n	800acec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d103      	bne.n	800acfe <xQueueGenericSend+0x72>
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d101      	bne.n	800ad02 <xQueueGenericSend+0x76>
 800acfe:	2301      	movs	r3, #1
 800ad00:	e000      	b.n	800ad04 <xQueueGenericSend+0x78>
 800ad02:	2300      	movs	r3, #0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10b      	bne.n	800ad20 <xQueueGenericSend+0x94>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	623b      	str	r3, [r7, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	bf00      	nop
 800ad1e:	e7fd      	b.n	800ad1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad20:	f001 faf6 	bl	800c310 <xTaskGetSchedulerState>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d102      	bne.n	800ad30 <xQueueGenericSend+0xa4>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <xQueueGenericSend+0xa8>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e000      	b.n	800ad36 <xQueueGenericSend+0xaa>
 800ad34:	2300      	movs	r3, #0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10b      	bne.n	800ad52 <xQueueGenericSend+0xc6>
	__asm volatile
 800ad3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	61fb      	str	r3, [r7, #28]
}
 800ad4c:	bf00      	nop
 800ad4e:	bf00      	nop
 800ad50:	e7fd      	b.n	800ad4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad52:	f002 f929 	bl	800cfa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d302      	bcc.n	800ad68 <xQueueGenericSend+0xdc>
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d129      	bne.n	800adbc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	68b9      	ldr	r1, [r7, #8]
 800ad6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad6e:	f000 fa0f 	bl	800b190 <prvCopyDataToQueue>
 800ad72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d010      	beq.n	800ad9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7e:	3324      	adds	r3, #36	@ 0x24
 800ad80:	4618      	mov	r0, r3
 800ad82:	f001 f8ff 	bl	800bf84 <xTaskRemoveFromEventList>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d013      	beq.n	800adb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad8c:	4b3f      	ldr	r3, [pc, #252]	@ (800ae8c <xQueueGenericSend+0x200>)
 800ad8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	e00a      	b.n	800adb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d007      	beq.n	800adb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ada4:	4b39      	ldr	r3, [pc, #228]	@ (800ae8c <xQueueGenericSend+0x200>)
 800ada6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800adb4:	f002 f92a 	bl	800d00c <vPortExitCritical>
				return pdPASS;
 800adb8:	2301      	movs	r3, #1
 800adba:	e063      	b.n	800ae84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d103      	bne.n	800adca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adc2:	f002 f923 	bl	800d00c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	e05c      	b.n	800ae84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d106      	bne.n	800adde <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800add0:	f107 0314 	add.w	r3, r7, #20
 800add4:	4618      	mov	r0, r3
 800add6:	f001 f939 	bl	800c04c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adda:	2301      	movs	r3, #1
 800addc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adde:	f002 f915 	bl	800d00c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ade2:	f000 fda7 	bl	800b934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ade6:	f002 f8df 	bl	800cfa8 <vPortEnterCritical>
 800adea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adf6:	d103      	bne.n	800ae00 <xQueueGenericSend+0x174>
 800adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae06:	b25b      	sxtb	r3, r3
 800ae08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae0c:	d103      	bne.n	800ae16 <xQueueGenericSend+0x18a>
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae16:	f002 f8f9 	bl	800d00c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae1a:	1d3a      	adds	r2, r7, #4
 800ae1c:	f107 0314 	add.w	r3, r7, #20
 800ae20:	4611      	mov	r1, r2
 800ae22:	4618      	mov	r0, r3
 800ae24:	f001 f928 	bl	800c078 <xTaskCheckForTimeOut>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d124      	bne.n	800ae78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae30:	f000 faa6 	bl	800b380 <prvIsQueueFull>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d018      	beq.n	800ae6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3c:	3310      	adds	r3, #16
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	4611      	mov	r1, r2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f001 f84c 	bl	800bee0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae4a:	f000 fa31 	bl	800b2b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae4e:	f000 fd7f 	bl	800b950 <xTaskResumeAll>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f47f af7c 	bne.w	800ad52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ae5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae8c <xQueueGenericSend+0x200>)
 800ae5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	e772      	b.n	800ad52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae6e:	f000 fa1f 	bl	800b2b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae72:	f000 fd6d 	bl	800b950 <xTaskResumeAll>
 800ae76:	e76c      	b.n	800ad52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae7a:	f000 fa19 	bl	800b2b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae7e:	f000 fd67 	bl	800b950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3738      	adds	r7, #56	@ 0x38
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	e000ed04 	.word	0xe000ed04

0800ae90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b090      	sub	sp, #64	@ 0x40
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
 800ae9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10b      	bne.n	800aec0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aeba:	bf00      	nop
 800aebc:	bf00      	nop
 800aebe:	e7fd      	b.n	800aebc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <xQueueGenericSendFromISR+0x3e>
 800aec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <xQueueGenericSendFromISR+0x42>
 800aece:	2301      	movs	r3, #1
 800aed0:	e000      	b.n	800aed4 <xQueueGenericSendFromISR+0x44>
 800aed2:	2300      	movs	r3, #0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10b      	bne.n	800aef0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aeea:	bf00      	nop
 800aeec:	bf00      	nop
 800aeee:	e7fd      	b.n	800aeec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d103      	bne.n	800aefe <xQueueGenericSendFromISR+0x6e>
 800aef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d101      	bne.n	800af02 <xQueueGenericSendFromISR+0x72>
 800aefe:	2301      	movs	r3, #1
 800af00:	e000      	b.n	800af04 <xQueueGenericSendFromISR+0x74>
 800af02:	2300      	movs	r3, #0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10b      	bne.n	800af20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	623b      	str	r3, [r7, #32]
}
 800af1a:	bf00      	nop
 800af1c:	bf00      	nop
 800af1e:	e7fd      	b.n	800af1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af20:	f002 f922 	bl	800d168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af24:	f3ef 8211 	mrs	r2, BASEPRI
 800af28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	61fa      	str	r2, [r7, #28]
 800af3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af48:	429a      	cmp	r2, r3
 800af4a:	d302      	bcc.n	800af52 <xQueueGenericSendFromISR+0xc2>
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d12f      	bne.n	800afb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800af68:	f000 f912 	bl	800b190 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af74:	d112      	bne.n	800af9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d016      	beq.n	800afac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af80:	3324      	adds	r3, #36	@ 0x24
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fffe 	bl	800bf84 <xTaskRemoveFromEventList>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00e      	beq.n	800afac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	e007      	b.n	800afac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800afa0:	3301      	adds	r3, #1
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	b25a      	sxtb	r2, r3
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800afac:	2301      	movs	r3, #1
 800afae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800afb0:	e001      	b.n	800afb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800afc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800afc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3740      	adds	r7, #64	@ 0x40
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08c      	sub	sp, #48	@ 0x30
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800afd8:	2300      	movs	r3, #0
 800afda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800afe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10b      	bne.n	800affe <xQueueReceive+0x32>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	623b      	str	r3, [r7, #32]
}
 800aff8:	bf00      	nop
 800affa:	bf00      	nop
 800affc:	e7fd      	b.n	800affa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d103      	bne.n	800b00c <xQueueReceive+0x40>
 800b004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <xQueueReceive+0x44>
 800b00c:	2301      	movs	r3, #1
 800b00e:	e000      	b.n	800b012 <xQueueReceive+0x46>
 800b010:	2300      	movs	r3, #0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10b      	bne.n	800b02e <xQueueReceive+0x62>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	61fb      	str	r3, [r7, #28]
}
 800b028:	bf00      	nop
 800b02a:	bf00      	nop
 800b02c:	e7fd      	b.n	800b02a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b02e:	f001 f96f 	bl	800c310 <xTaskGetSchedulerState>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <xQueueReceive+0x72>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <xQueueReceive+0x76>
 800b03e:	2301      	movs	r3, #1
 800b040:	e000      	b.n	800b044 <xQueueReceive+0x78>
 800b042:	2300      	movs	r3, #0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10b      	bne.n	800b060 <xQueueReceive+0x94>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	61bb      	str	r3, [r7, #24]
}
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
 800b05e:	e7fd      	b.n	800b05c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b060:	f001 ffa2 	bl	800cfa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b068:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d01f      	beq.n	800b0b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b074:	f000 f8f6 	bl	800b264 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07a:	1e5a      	subs	r2, r3, #1
 800b07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b082:	691b      	ldr	r3, [r3, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00f      	beq.n	800b0a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08a:	3310      	adds	r3, #16
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 ff79 	bl	800bf84 <xTaskRemoveFromEventList>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d007      	beq.n	800b0a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b098:	4b3c      	ldr	r3, [pc, #240]	@ (800b18c <xQueueReceive+0x1c0>)
 800b09a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b0a8:	f001 ffb0 	bl	800d00c <vPortExitCritical>
				return pdPASS;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e069      	b.n	800b184 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d103      	bne.n	800b0be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0b6:	f001 ffa9 	bl	800d00c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e062      	b.n	800b184 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0c4:	f107 0310 	add.w	r3, r7, #16
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 ffbf 	bl	800c04c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0d2:	f001 ff9b 	bl	800d00c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0d6:	f000 fc2d 	bl	800b934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0da:	f001 ff65 	bl	800cfa8 <vPortEnterCritical>
 800b0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0e4:	b25b      	sxtb	r3, r3
 800b0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0ea:	d103      	bne.n	800b0f4 <xQueueReceive+0x128>
 800b0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0fa:	b25b      	sxtb	r3, r3
 800b0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b100:	d103      	bne.n	800b10a <xQueueReceive+0x13e>
 800b102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b104:	2200      	movs	r2, #0
 800b106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b10a:	f001 ff7f 	bl	800d00c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b10e:	1d3a      	adds	r2, r7, #4
 800b110:	f107 0310 	add.w	r3, r7, #16
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f000 ffae 	bl	800c078 <xTaskCheckForTimeOut>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d123      	bne.n	800b16a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b124:	f000 f916 	bl	800b354 <prvIsQueueEmpty>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d017      	beq.n	800b15e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b130:	3324      	adds	r3, #36	@ 0x24
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	4611      	mov	r1, r2
 800b136:	4618      	mov	r0, r3
 800b138:	f000 fed2 	bl	800bee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b13c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b13e:	f000 f8b7 	bl	800b2b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b142:	f000 fc05 	bl	800b950 <xTaskResumeAll>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d189      	bne.n	800b060 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b14c:	4b0f      	ldr	r3, [pc, #60]	@ (800b18c <xQueueReceive+0x1c0>)
 800b14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	e780      	b.n	800b060 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b15e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b160:	f000 f8a6 	bl	800b2b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b164:	f000 fbf4 	bl	800b950 <xTaskResumeAll>
 800b168:	e77a      	b.n	800b060 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b16a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b16c:	f000 f8a0 	bl	800b2b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b170:	f000 fbee 	bl	800b950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b176:	f000 f8ed 	bl	800b354 <prvIsQueueEmpty>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f43f af6f 	beq.w	800b060 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b182:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b184:	4618      	mov	r0, r3
 800b186:	3730      	adds	r7, #48	@ 0x30
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	e000ed04 	.word	0xe000ed04

0800b190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10d      	bne.n	800b1ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d14d      	bne.n	800b252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 f8c6 	bl	800c34c <xTaskPriorityDisinherit>
 800b1c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	609a      	str	r2, [r3, #8]
 800b1c8:	e043      	b.n	800b252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d119      	bne.n	800b204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6858      	ldr	r0, [r3, #4]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d8:	461a      	mov	r2, r3
 800b1da:	68b9      	ldr	r1, [r7, #8]
 800b1dc:	f002 fa9e 	bl	800d71c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	685a      	ldr	r2, [r3, #4]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e8:	441a      	add	r2, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d32b      	bcc.n	800b252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	605a      	str	r2, [r3, #4]
 800b202:	e026      	b.n	800b252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68d8      	ldr	r0, [r3, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20c:	461a      	mov	r2, r3
 800b20e:	68b9      	ldr	r1, [r7, #8]
 800b210:	f002 fa84 	bl	800d71c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b21c:	425b      	negs	r3, r3
 800b21e:	441a      	add	r2, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	68da      	ldr	r2, [r3, #12]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d207      	bcs.n	800b240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	689a      	ldr	r2, [r3, #8]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b238:	425b      	negs	r3, r3
 800b23a:	441a      	add	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2b02      	cmp	r3, #2
 800b244:	d105      	bne.n	800b252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	3b01      	subs	r3, #1
 800b250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	1c5a      	adds	r2, r3, #1
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b25a:	697b      	ldr	r3, [r7, #20]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d018      	beq.n	800b2a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b27e:	441a      	add	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68da      	ldr	r2, [r3, #12]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d303      	bcc.n	800b298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68d9      	ldr	r1, [r3, #12]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	6838      	ldr	r0, [r7, #0]
 800b2a4:	f002 fa3a 	bl	800d71c <memcpy>
	}
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2b8:	f001 fe76 	bl	800cfa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2c4:	e011      	b.n	800b2ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d012      	beq.n	800b2f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3324      	adds	r3, #36	@ 0x24
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 fe56 	bl	800bf84 <xTaskRemoveFromEventList>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2de:	f000 ff2f 	bl	800c140 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	dce9      	bgt.n	800b2c6 <prvUnlockQueue+0x16>
 800b2f2:	e000      	b.n	800b2f6 <prvUnlockQueue+0x46>
					break;
 800b2f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	22ff      	movs	r2, #255	@ 0xff
 800b2fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b2fe:	f001 fe85 	bl	800d00c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b302:	f001 fe51 	bl	800cfa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b30c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b30e:	e011      	b.n	800b334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d012      	beq.n	800b33e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3310      	adds	r3, #16
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 fe31 	bl	800bf84 <xTaskRemoveFromEventList>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b328:	f000 ff0a 	bl	800c140 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	3b01      	subs	r3, #1
 800b330:	b2db      	uxtb	r3, r3
 800b332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	dce9      	bgt.n	800b310 <prvUnlockQueue+0x60>
 800b33c:	e000      	b.n	800b340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b33e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	22ff      	movs	r2, #255	@ 0xff
 800b344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b348:	f001 fe60 	bl	800d00c <vPortExitCritical>
}
 800b34c:	bf00      	nop
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b35c:	f001 fe24 	bl	800cfa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b368:	2301      	movs	r3, #1
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	e001      	b.n	800b372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b36e:	2300      	movs	r3, #0
 800b370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b372:	f001 fe4b 	bl	800d00c <vPortExitCritical>

	return xReturn;
 800b376:	68fb      	ldr	r3, [r7, #12]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b388:	f001 fe0e 	bl	800cfa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b394:	429a      	cmp	r2, r3
 800b396:	d102      	bne.n	800b39e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b398:	2301      	movs	r3, #1
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	e001      	b.n	800b3a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3a2:	f001 fe33 	bl	800d00c <vPortExitCritical>

	return xReturn;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	e014      	b.n	800b3ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3c0:	4a0f      	ldr	r2, [pc, #60]	@ (800b400 <vQueueAddToRegistry+0x50>)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10b      	bne.n	800b3e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3cc:	490c      	ldr	r1, [pc, #48]	@ (800b400 <vQueueAddToRegistry+0x50>)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3d6:	4a0a      	ldr	r2, [pc, #40]	@ (800b400 <vQueueAddToRegistry+0x50>)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	00db      	lsls	r3, r3, #3
 800b3dc:	4413      	add	r3, r2
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3e2:	e006      	b.n	800b3f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b07      	cmp	r3, #7
 800b3ee:	d9e7      	bls.n	800b3c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3f0:	bf00      	nop
 800b3f2:	bf00      	nop
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	200013d4 	.word	0x200013d4

0800b404 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b414:	f001 fdc8 	bl	800cfa8 <vPortEnterCritical>
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b41e:	b25b      	sxtb	r3, r3
 800b420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b424:	d103      	bne.n	800b42e <vQueueWaitForMessageRestricted+0x2a>
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b434:	b25b      	sxtb	r3, r3
 800b436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b43a:	d103      	bne.n	800b444 <vQueueWaitForMessageRestricted+0x40>
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b444:	f001 fde2 	bl	800d00c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	3324      	adds	r3, #36	@ 0x24
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 fd67 	bl	800bf2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b45e:	6978      	ldr	r0, [r7, #20]
 800b460:	f7ff ff26 	bl	800b2b0 <prvUnlockQueue>
	}
 800b464:	bf00      	nop
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b08e      	sub	sp, #56	@ 0x38
 800b470:	af04      	add	r7, sp, #16
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10b      	bne.n	800b498 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	623b      	str	r3, [r7, #32]
}
 800b492:	bf00      	nop
 800b494:	bf00      	nop
 800b496:	e7fd      	b.n	800b494 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10b      	bne.n	800b4b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	61fb      	str	r3, [r7, #28]
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	e7fd      	b.n	800b4b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4b6:	23a8      	movs	r3, #168	@ 0xa8
 800b4b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	2ba8      	cmp	r3, #168	@ 0xa8
 800b4be:	d00b      	beq.n	800b4d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	61bb      	str	r3, [r7, #24]
}
 800b4d2:	bf00      	nop
 800b4d4:	bf00      	nop
 800b4d6:	e7fd      	b.n	800b4d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d01e      	beq.n	800b51e <xTaskCreateStatic+0xb2>
 800b4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d01b      	beq.n	800b51e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	9303      	str	r3, [sp, #12]
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fe:	9302      	str	r3, [sp, #8]
 800b500:	f107 0314 	add.w	r3, r7, #20
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 f851 	bl	800b5b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b516:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b518:	f000 f8f6 	bl	800b708 <prvAddNewTaskToReadyList>
 800b51c:	e001      	b.n	800b522 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b522:	697b      	ldr	r3, [r7, #20]
	}
 800b524:	4618      	mov	r0, r3
 800b526:	3728      	adds	r7, #40	@ 0x28
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08c      	sub	sp, #48	@ 0x30
 800b530:	af04      	add	r7, sp, #16
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	603b      	str	r3, [r7, #0]
 800b538:	4613      	mov	r3, r2
 800b53a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b53c:	88fb      	ldrh	r3, [r7, #6]
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4618      	mov	r0, r3
 800b542:	f001 fe53 	bl	800d1ec <pvPortMalloc>
 800b546:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00e      	beq.n	800b56c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b54e:	20a8      	movs	r0, #168	@ 0xa8
 800b550:	f001 fe4c 	bl	800d1ec <pvPortMalloc>
 800b554:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	631a      	str	r2, [r3, #48]	@ 0x30
 800b562:	e005      	b.n	800b570 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b564:	6978      	ldr	r0, [r7, #20]
 800b566:	f001 ff0f 	bl	800d388 <vPortFree>
 800b56a:	e001      	b.n	800b570 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b56c:	2300      	movs	r3, #0
 800b56e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d017      	beq.n	800b5a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b57e:	88fa      	ldrh	r2, [r7, #6]
 800b580:	2300      	movs	r3, #0
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	9302      	str	r3, [sp, #8]
 800b588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58a:	9301      	str	r3, [sp, #4]
 800b58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	68b9      	ldr	r1, [r7, #8]
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f000 f80f 	bl	800b5b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b59a:	69f8      	ldr	r0, [r7, #28]
 800b59c:	f000 f8b4 	bl	800b708 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	61bb      	str	r3, [r7, #24]
 800b5a4:	e002      	b.n	800b5ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b5aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5ac:	69bb      	ldr	r3, [r7, #24]
	}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3720      	adds	r7, #32
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
	...

0800b5b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	21a5      	movs	r1, #165	@ 0xa5
 800b5d2:	f002 f819 	bl	800d608 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	f023 0307 	bic.w	r3, r3, #7
 800b5ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	f003 0307 	and.w	r3, r3, #7
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00b      	beq.n	800b612 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	617b      	str	r3, [r7, #20]
}
 800b60c:	bf00      	nop
 800b60e:	bf00      	nop
 800b610:	e7fd      	b.n	800b60e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d01f      	beq.n	800b658 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b618:	2300      	movs	r3, #0
 800b61a:	61fb      	str	r3, [r7, #28]
 800b61c:	e012      	b.n	800b644 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	4413      	add	r3, r2
 800b624:	7819      	ldrb	r1, [r3, #0]
 800b626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	4413      	add	r3, r2
 800b62c:	3334      	adds	r3, #52	@ 0x34
 800b62e:	460a      	mov	r2, r1
 800b630:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	4413      	add	r3, r2
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d006      	beq.n	800b64c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	3301      	adds	r3, #1
 800b642:	61fb      	str	r3, [r7, #28]
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	2b0f      	cmp	r3, #15
 800b648:	d9e9      	bls.n	800b61e <prvInitialiseNewTask+0x66>
 800b64a:	e000      	b.n	800b64e <prvInitialiseNewTask+0x96>
			{
				break;
 800b64c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b650:	2200      	movs	r2, #0
 800b652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b656:	e003      	b.n	800b660 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b662:	2b37      	cmp	r3, #55	@ 0x37
 800b664:	d901      	bls.n	800b66a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b666:	2337      	movs	r3, #55	@ 0x37
 800b668:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b66e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b674:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b678:	2200      	movs	r2, #0
 800b67a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67e:	3304      	adds	r3, #4
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff f965 	bl	800a950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b688:	3318      	adds	r3, #24
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff f960 	bl	800a950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b694:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b8:	3354      	adds	r3, #84	@ 0x54
 800b6ba:	224c      	movs	r2, #76	@ 0x4c
 800b6bc:	2100      	movs	r1, #0
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 ffa2 	bl	800d608 <memset>
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c6:	4a0d      	ldr	r2, [pc, #52]	@ (800b6fc <prvInitialiseNewTask+0x144>)
 800b6c8:	659a      	str	r2, [r3, #88]	@ 0x58
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6cc:	4a0c      	ldr	r2, [pc, #48]	@ (800b700 <prvInitialiseNewTask+0x148>)
 800b6ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b704 <prvInitialiseNewTask+0x14c>)
 800b6d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	68f9      	ldr	r1, [r7, #12]
 800b6da:	69b8      	ldr	r0, [r7, #24]
 800b6dc:	f001 fb36 	bl	800cd4c <pxPortInitialiseStack>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6f2:	bf00      	nop
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20005668 	.word	0x20005668
 800b700:	200056d0 	.word	0x200056d0
 800b704:	20005738 	.word	0x20005738

0800b708 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b710:	f001 fc4a 	bl	800cfa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b714:	4b2d      	ldr	r3, [pc, #180]	@ (800b7cc <prvAddNewTaskToReadyList+0xc4>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3301      	adds	r3, #1
 800b71a:	4a2c      	ldr	r2, [pc, #176]	@ (800b7cc <prvAddNewTaskToReadyList+0xc4>)
 800b71c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b71e:	4b2c      	ldr	r3, [pc, #176]	@ (800b7d0 <prvAddNewTaskToReadyList+0xc8>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d109      	bne.n	800b73a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b726:	4a2a      	ldr	r2, [pc, #168]	@ (800b7d0 <prvAddNewTaskToReadyList+0xc8>)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b72c:	4b27      	ldr	r3, [pc, #156]	@ (800b7cc <prvAddNewTaskToReadyList+0xc4>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d110      	bne.n	800b756 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b734:	f000 fd28 	bl	800c188 <prvInitialiseTaskLists>
 800b738:	e00d      	b.n	800b756 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b73a:	4b26      	ldr	r3, [pc, #152]	@ (800b7d4 <prvAddNewTaskToReadyList+0xcc>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d109      	bne.n	800b756 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b742:	4b23      	ldr	r3, [pc, #140]	@ (800b7d0 <prvAddNewTaskToReadyList+0xc8>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d802      	bhi.n	800b756 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b750:	4a1f      	ldr	r2, [pc, #124]	@ (800b7d0 <prvAddNewTaskToReadyList+0xc8>)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b756:	4b20      	ldr	r3, [pc, #128]	@ (800b7d8 <prvAddNewTaskToReadyList+0xd0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	3301      	adds	r3, #1
 800b75c:	4a1e      	ldr	r2, [pc, #120]	@ (800b7d8 <prvAddNewTaskToReadyList+0xd0>)
 800b75e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b760:	4b1d      	ldr	r3, [pc, #116]	@ (800b7d8 <prvAddNewTaskToReadyList+0xd0>)
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b76c:	4b1b      	ldr	r3, [pc, #108]	@ (800b7dc <prvAddNewTaskToReadyList+0xd4>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d903      	bls.n	800b77c <prvAddNewTaskToReadyList+0x74>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b778:	4a18      	ldr	r2, [pc, #96]	@ (800b7dc <prvAddNewTaskToReadyList+0xd4>)
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b780:	4613      	mov	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4413      	add	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4a15      	ldr	r2, [pc, #84]	@ (800b7e0 <prvAddNewTaskToReadyList+0xd8>)
 800b78a:	441a      	add	r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3304      	adds	r3, #4
 800b790:	4619      	mov	r1, r3
 800b792:	4610      	mov	r0, r2
 800b794:	f7ff f8e9 	bl	800a96a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b798:	f001 fc38 	bl	800d00c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b79c:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d4 <prvAddNewTaskToReadyList+0xcc>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00e      	beq.n	800b7c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b7d0 <prvAddNewTaskToReadyList+0xc8>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d207      	bcs.n	800b7c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b7e4 <prvAddNewTaskToReadyList+0xdc>)
 800b7b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7b8:	601a      	str	r2, [r3, #0]
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	200018e8 	.word	0x200018e8
 800b7d0:	20001414 	.word	0x20001414
 800b7d4:	200018f4 	.word	0x200018f4
 800b7d8:	20001904 	.word	0x20001904
 800b7dc:	200018f0 	.word	0x200018f0
 800b7e0:	20001418 	.word	0x20001418
 800b7e4:	e000ed04 	.word	0xe000ed04

0800b7e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d018      	beq.n	800b82c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7fa:	4b14      	ldr	r3, [pc, #80]	@ (800b84c <vTaskDelay+0x64>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00b      	beq.n	800b81a <vTaskDelay+0x32>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	60bb      	str	r3, [r7, #8]
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop
 800b818:	e7fd      	b.n	800b816 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b81a:	f000 f88b 	bl	800b934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b81e:	2100      	movs	r1, #0
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fee5 	bl	800c5f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b826:	f000 f893 	bl	800b950 <xTaskResumeAll>
 800b82a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d107      	bne.n	800b842 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b832:	4b07      	ldr	r3, [pc, #28]	@ (800b850 <vTaskDelay+0x68>)
 800b834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b838:	601a      	str	r2, [r3, #0]
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b842:	bf00      	nop
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	20001910 	.word	0x20001910
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	@ 0x28
 800b858:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b85e:	2300      	movs	r3, #0
 800b860:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b862:	463a      	mov	r2, r7
 800b864:	1d39      	adds	r1, r7, #4
 800b866:	f107 0308 	add.w	r3, r7, #8
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff f81c 	bl	800a8a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	9202      	str	r2, [sp, #8]
 800b878:	9301      	str	r3, [sp, #4]
 800b87a:	2300      	movs	r3, #0
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	2300      	movs	r3, #0
 800b880:	460a      	mov	r2, r1
 800b882:	4924      	ldr	r1, [pc, #144]	@ (800b914 <vTaskStartScheduler+0xc0>)
 800b884:	4824      	ldr	r0, [pc, #144]	@ (800b918 <vTaskStartScheduler+0xc4>)
 800b886:	f7ff fdf1 	bl	800b46c <xTaskCreateStatic>
 800b88a:	4603      	mov	r3, r0
 800b88c:	4a23      	ldr	r2, [pc, #140]	@ (800b91c <vTaskStartScheduler+0xc8>)
 800b88e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b890:	4b22      	ldr	r3, [pc, #136]	@ (800b91c <vTaskStartScheduler+0xc8>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b898:	2301      	movs	r3, #1
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	e001      	b.n	800b8a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d102      	bne.n	800b8ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8a8:	f000 fef6 	bl	800c698 <xTimerCreateTimerTask>
 800b8ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d11b      	bne.n	800b8ec <vTaskStartScheduler+0x98>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	613b      	str	r3, [r7, #16]
}
 800b8c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8c8:	4b15      	ldr	r3, [pc, #84]	@ (800b920 <vTaskStartScheduler+0xcc>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3354      	adds	r3, #84	@ 0x54
 800b8ce:	4a15      	ldr	r2, [pc, #84]	@ (800b924 <vTaskStartScheduler+0xd0>)
 800b8d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8d2:	4b15      	ldr	r3, [pc, #84]	@ (800b928 <vTaskStartScheduler+0xd4>)
 800b8d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b8d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8da:	4b14      	ldr	r3, [pc, #80]	@ (800b92c <vTaskStartScheduler+0xd8>)
 800b8dc:	2201      	movs	r2, #1
 800b8de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8e0:	4b13      	ldr	r3, [pc, #76]	@ (800b930 <vTaskStartScheduler+0xdc>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8e6:	f001 fabb 	bl	800ce60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8ea:	e00f      	b.n	800b90c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8f2:	d10b      	bne.n	800b90c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	60fb      	str	r3, [r7, #12]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <vTaskStartScheduler+0xb4>
}
 800b90c:	bf00      	nop
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	0800e02c 	.word	0x0800e02c
 800b918:	0800c159 	.word	0x0800c159
 800b91c:	2000190c 	.word	0x2000190c
 800b920:	20001414 	.word	0x20001414
 800b924:	2000002c 	.word	0x2000002c
 800b928:	20001908 	.word	0x20001908
 800b92c:	200018f4 	.word	0x200018f4
 800b930:	200018ec 	.word	0x200018ec

0800b934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b934:	b480      	push	{r7}
 800b936:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b938:	4b04      	ldr	r3, [pc, #16]	@ (800b94c <vTaskSuspendAll+0x18>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3301      	adds	r3, #1
 800b93e:	4a03      	ldr	r2, [pc, #12]	@ (800b94c <vTaskSuspendAll+0x18>)
 800b940:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b942:	bf00      	nop
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	20001910 	.word	0x20001910

0800b950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b95a:	2300      	movs	r3, #0
 800b95c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b95e:	4b42      	ldr	r3, [pc, #264]	@ (800ba68 <xTaskResumeAll+0x118>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10b      	bne.n	800b97e <xTaskResumeAll+0x2e>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	603b      	str	r3, [r7, #0]
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	e7fd      	b.n	800b97a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b97e:	f001 fb13 	bl	800cfa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b982:	4b39      	ldr	r3, [pc, #228]	@ (800ba68 <xTaskResumeAll+0x118>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3b01      	subs	r3, #1
 800b988:	4a37      	ldr	r2, [pc, #220]	@ (800ba68 <xTaskResumeAll+0x118>)
 800b98a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b98c:	4b36      	ldr	r3, [pc, #216]	@ (800ba68 <xTaskResumeAll+0x118>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d162      	bne.n	800ba5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b994:	4b35      	ldr	r3, [pc, #212]	@ (800ba6c <xTaskResumeAll+0x11c>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d05e      	beq.n	800ba5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b99c:	e02f      	b.n	800b9fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b99e:	4b34      	ldr	r3, [pc, #208]	@ (800ba70 <xTaskResumeAll+0x120>)
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3318      	adds	r3, #24
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff f83a 	bl	800aa24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff f835 	bl	800aa24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9be:	4b2d      	ldr	r3, [pc, #180]	@ (800ba74 <xTaskResumeAll+0x124>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d903      	bls.n	800b9ce <xTaskResumeAll+0x7e>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ca:	4a2a      	ldr	r2, [pc, #168]	@ (800ba74 <xTaskResumeAll+0x124>)
 800b9cc:	6013      	str	r3, [r2, #0]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4a27      	ldr	r2, [pc, #156]	@ (800ba78 <xTaskResumeAll+0x128>)
 800b9dc:	441a      	add	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	f7fe ffc0 	bl	800a96a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ee:	4b23      	ldr	r3, [pc, #140]	@ (800ba7c <xTaskResumeAll+0x12c>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d302      	bcc.n	800b9fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b9f8:	4b21      	ldr	r3, [pc, #132]	@ (800ba80 <xTaskResumeAll+0x130>)
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9fe:	4b1c      	ldr	r3, [pc, #112]	@ (800ba70 <xTaskResumeAll+0x120>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1cb      	bne.n	800b99e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba0c:	f000 fc60 	bl	800c2d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba10:	4b1c      	ldr	r3, [pc, #112]	@ (800ba84 <xTaskResumeAll+0x134>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d010      	beq.n	800ba3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba1c:	f000 f940 	bl	800bca0 <xTaskIncrementTick>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba26:	4b16      	ldr	r3, [pc, #88]	@ (800ba80 <xTaskResumeAll+0x130>)
 800ba28:	2201      	movs	r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1f1      	bne.n	800ba1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ba38:	4b12      	ldr	r3, [pc, #72]	@ (800ba84 <xTaskResumeAll+0x134>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba3e:	4b10      	ldr	r3, [pc, #64]	@ (800ba80 <xTaskResumeAll+0x130>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d009      	beq.n	800ba5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba46:	2301      	movs	r3, #1
 800ba48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba88 <xTaskResumeAll+0x138>)
 800ba4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba5a:	f001 fad7 	bl	800d00c <vPortExitCritical>

	return xAlreadyYielded;
 800ba5e:	68bb      	ldr	r3, [r7, #8]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	20001910 	.word	0x20001910
 800ba6c:	200018e8 	.word	0x200018e8
 800ba70:	200018a8 	.word	0x200018a8
 800ba74:	200018f0 	.word	0x200018f0
 800ba78:	20001418 	.word	0x20001418
 800ba7c:	20001414 	.word	0x20001414
 800ba80:	200018fc 	.word	0x200018fc
 800ba84:	200018f8 	.word	0x200018f8
 800ba88:	e000ed04 	.word	0xe000ed04

0800ba8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba92:	4b05      	ldr	r3, [pc, #20]	@ (800baa8 <xTaskGetTickCount+0x1c>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba98:	687b      	ldr	r3, [r7, #4]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	200018ec 	.word	0x200018ec

0800baac <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d102      	bne.n	800bac0 <pcTaskGetName+0x14>
 800baba:	4b0e      	ldr	r3, [pc, #56]	@ (800baf4 <pcTaskGetName+0x48>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	e000      	b.n	800bac2 <pcTaskGetName+0x16>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10b      	bne.n	800bae2 <pcTaskGetName+0x36>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	60bb      	str	r3, [r7, #8]
}
 800badc:	bf00      	nop
 800bade:	bf00      	nop
 800bae0:	e7fd      	b.n	800bade <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	3334      	adds	r3, #52	@ 0x34
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20001414 	.word	0x20001414

0800baf8 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800baf8:	b480      	push	{r7}
 800bafa:	b08b      	sub	sp, #44	@ 0x2c
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d05b      	beq.n	800bbc6 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	61bb      	str	r3, [r7, #24]
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	685a      	ldr	r2, [r3, #4]
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	605a      	str	r2, [r3, #4]
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	685a      	ldr	r2, [r3, #4]
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	3308      	adds	r3, #8
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d104      	bne.n	800bb32 <prvSearchForNameWithinSingleList+0x3a>
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	605a      	str	r2, [r3, #4]
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	613b      	str	r3, [r7, #16]
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	605a      	str	r2, [r3, #4]
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	3308      	adds	r3, #8
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d104      	bne.n	800bb5e <prvSearchForNameWithinSingleList+0x66>
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	605a      	str	r2, [r3, #4]
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800bb66:	2300      	movs	r3, #0
 800bb68:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	623b      	str	r3, [r7, #32]
 800bb6e:	e01c      	b.n	800bbaa <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	4413      	add	r3, r2
 800bb76:	3334      	adds	r3, #52	@ 0x34
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	4413      	add	r3, r2
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	7afa      	ldrb	r2, [r7, #11]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d002      	beq.n	800bb90 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	61fb      	str	r3, [r7, #28]
 800bb8e:	e006      	b.n	800bb9e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800bb90:	7afb      	ldrb	r3, [r7, #11]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d103      	bne.n	800bb9e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d106      	bne.n	800bbb2 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	3301      	adds	r3, #1
 800bba8:	623b      	str	r3, [r7, #32]
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	2b0f      	cmp	r3, #15
 800bbae:	d9df      	bls.n	800bb70 <prvSearchForNameWithinSingleList+0x78>
 800bbb0:	e000      	b.n	800bbb4 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800bbb2:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d104      	bne.n	800bbc4 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d1bb      	bne.n	800bb3a <prvSearchForNameWithinSingleList+0x42>
 800bbc2:	e000      	b.n	800bbc6 <prvSearchForNameWithinSingleList+0xce>
					break;
 800bbc4:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	372c      	adds	r7, #44	@ 0x2c
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800bbdc:	2338      	movs	r3, #56	@ 0x38
 800bbde:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7f4 faf5 	bl	80001d0 <strlen>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b0f      	cmp	r3, #15
 800bbea:	d90b      	bls.n	800bc04 <xTaskGetHandle+0x30>
	__asm volatile
 800bbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf0:	f383 8811 	msr	BASEPRI, r3
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	60fb      	str	r3, [r7, #12]
}
 800bbfe:	bf00      	nop
 800bc00:	bf00      	nop
 800bc02:	e7fd      	b.n	800bc00 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800bc04:	f7ff fe96 	bl	800b934 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	4613      	mov	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4a1c      	ldr	r2, [pc, #112]	@ (800bc8c <xTaskGetHandle+0xb8>)
 800bc1a:	4413      	add	r3, r2
 800bc1c:	6879      	ldr	r1, [r7, #4]
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff ff6a 	bl	800baf8 <prvSearchForNameWithinSingleList>
 800bc24:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d103      	bne.n	800bc34 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1ea      	bne.n	800bc08 <xTaskGetHandle+0x34>
 800bc32:	e000      	b.n	800bc36 <xTaskGetHandle+0x62>
					break;
 800bc34:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800bc3c:	4b14      	ldr	r3, [pc, #80]	@ (800bc90 <xTaskGetHandle+0xbc>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff ff58 	bl	800baf8 <prvSearchForNameWithinSingleList>
 800bc48:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d106      	bne.n	800bc5e <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800bc50:	4b10      	ldr	r3, [pc, #64]	@ (800bc94 <xTaskGetHandle+0xc0>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6879      	ldr	r1, [r7, #4]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7ff ff4e 	bl	800baf8 <prvSearchForNameWithinSingleList>
 800bc5c:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d104      	bne.n	800bc6e <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	480c      	ldr	r0, [pc, #48]	@ (800bc98 <xTaskGetHandle+0xc4>)
 800bc68:	f7ff ff46 	bl	800baf8 <prvSearchForNameWithinSingleList>
 800bc6c:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d104      	bne.n	800bc7e <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800bc74:	6879      	ldr	r1, [r7, #4]
 800bc76:	4809      	ldr	r0, [pc, #36]	@ (800bc9c <xTaskGetHandle+0xc8>)
 800bc78:	f7ff ff3e 	bl	800baf8 <prvSearchForNameWithinSingleList>
 800bc7c:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800bc7e:	f7ff fe67 	bl	800b950 <xTaskResumeAll>

		return pxTCB;
 800bc82:	693b      	ldr	r3, [r7, #16]
	}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20001418 	.word	0x20001418
 800bc90:	200018a0 	.word	0x200018a0
 800bc94:	200018a4 	.word	0x200018a4
 800bc98:	200018d4 	.word	0x200018d4
 800bc9c:	200018bc 	.word	0x200018bc

0800bca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bca6:	2300      	movs	r3, #0
 800bca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcaa:	4b4f      	ldr	r3, [pc, #316]	@ (800bde8 <xTaskIncrementTick+0x148>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f040 8090 	bne.w	800bdd4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bcb4:	4b4d      	ldr	r3, [pc, #308]	@ (800bdec <xTaskIncrementTick+0x14c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bcbc:	4a4b      	ldr	r2, [pc, #300]	@ (800bdec <xTaskIncrementTick+0x14c>)
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d121      	bne.n	800bd0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bcc8:	4b49      	ldr	r3, [pc, #292]	@ (800bdf0 <xTaskIncrementTick+0x150>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00b      	beq.n	800bcea <xTaskIncrementTick+0x4a>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	603b      	str	r3, [r7, #0]
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop
 800bce8:	e7fd      	b.n	800bce6 <xTaskIncrementTick+0x46>
 800bcea:	4b41      	ldr	r3, [pc, #260]	@ (800bdf0 <xTaskIncrementTick+0x150>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	4b40      	ldr	r3, [pc, #256]	@ (800bdf4 <xTaskIncrementTick+0x154>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a3e      	ldr	r2, [pc, #248]	@ (800bdf0 <xTaskIncrementTick+0x150>)
 800bcf6:	6013      	str	r3, [r2, #0]
 800bcf8:	4a3e      	ldr	r2, [pc, #248]	@ (800bdf4 <xTaskIncrementTick+0x154>)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	4b3e      	ldr	r3, [pc, #248]	@ (800bdf8 <xTaskIncrementTick+0x158>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	3301      	adds	r3, #1
 800bd04:	4a3c      	ldr	r2, [pc, #240]	@ (800bdf8 <xTaskIncrementTick+0x158>)
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	f000 fae2 	bl	800c2d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd0c:	4b3b      	ldr	r3, [pc, #236]	@ (800bdfc <xTaskIncrementTick+0x15c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d349      	bcc.n	800bdaa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd16:	4b36      	ldr	r3, [pc, #216]	@ (800bdf0 <xTaskIncrementTick+0x150>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d104      	bne.n	800bd2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd20:	4b36      	ldr	r3, [pc, #216]	@ (800bdfc <xTaskIncrementTick+0x15c>)
 800bd22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd26:	601a      	str	r2, [r3, #0]
					break;
 800bd28:	e03f      	b.n	800bdaa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd2a:	4b31      	ldr	r3, [pc, #196]	@ (800bdf0 <xTaskIncrementTick+0x150>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d203      	bcs.n	800bd4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd42:	4a2e      	ldr	r2, [pc, #184]	@ (800bdfc <xTaskIncrementTick+0x15c>)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd48:	e02f      	b.n	800bdaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe fe68 	bl	800aa24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	3318      	adds	r3, #24
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fe fe5f 	bl	800aa24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd6a:	4b25      	ldr	r3, [pc, #148]	@ (800be00 <xTaskIncrementTick+0x160>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d903      	bls.n	800bd7a <xTaskIncrementTick+0xda>
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd76:	4a22      	ldr	r2, [pc, #136]	@ (800be00 <xTaskIncrementTick+0x160>)
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd7e:	4613      	mov	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4a1f      	ldr	r2, [pc, #124]	@ (800be04 <xTaskIncrementTick+0x164>)
 800bd88:	441a      	add	r2, r3
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4610      	mov	r0, r2
 800bd92:	f7fe fdea 	bl	800a96a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	@ (800be08 <xTaskIncrementTick+0x168>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d3b8      	bcc.n	800bd16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bda4:	2301      	movs	r3, #1
 800bda6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bda8:	e7b5      	b.n	800bd16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bdaa:	4b17      	ldr	r3, [pc, #92]	@ (800be08 <xTaskIncrementTick+0x168>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb0:	4914      	ldr	r1, [pc, #80]	@ (800be04 <xTaskIncrementTick+0x164>)
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	440b      	add	r3, r1
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d901      	bls.n	800bdc6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bdc6:	4b11      	ldr	r3, [pc, #68]	@ (800be0c <xTaskIncrementTick+0x16c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d007      	beq.n	800bdde <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	617b      	str	r3, [r7, #20]
 800bdd2:	e004      	b.n	800bdde <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bdd4:	4b0e      	ldr	r3, [pc, #56]	@ (800be10 <xTaskIncrementTick+0x170>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	4a0d      	ldr	r2, [pc, #52]	@ (800be10 <xTaskIncrementTick+0x170>)
 800bddc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bdde:	697b      	ldr	r3, [r7, #20]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20001910 	.word	0x20001910
 800bdec:	200018ec 	.word	0x200018ec
 800bdf0:	200018a0 	.word	0x200018a0
 800bdf4:	200018a4 	.word	0x200018a4
 800bdf8:	20001900 	.word	0x20001900
 800bdfc:	20001908 	.word	0x20001908
 800be00:	200018f0 	.word	0x200018f0
 800be04:	20001418 	.word	0x20001418
 800be08:	20001414 	.word	0x20001414
 800be0c:	200018fc 	.word	0x200018fc
 800be10:	200018f8 	.word	0x200018f8

0800be14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be1a:	4b2b      	ldr	r3, [pc, #172]	@ (800bec8 <vTaskSwitchContext+0xb4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d003      	beq.n	800be2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be22:	4b2a      	ldr	r3, [pc, #168]	@ (800becc <vTaskSwitchContext+0xb8>)
 800be24:	2201      	movs	r2, #1
 800be26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be28:	e047      	b.n	800beba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800be2a:	4b28      	ldr	r3, [pc, #160]	@ (800becc <vTaskSwitchContext+0xb8>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be30:	4b27      	ldr	r3, [pc, #156]	@ (800bed0 <vTaskSwitchContext+0xbc>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	60fb      	str	r3, [r7, #12]
 800be36:	e011      	b.n	800be5c <vTaskSwitchContext+0x48>
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10b      	bne.n	800be56 <vTaskSwitchContext+0x42>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	607b      	str	r3, [r7, #4]
}
 800be50:	bf00      	nop
 800be52:	bf00      	nop
 800be54:	e7fd      	b.n	800be52 <vTaskSwitchContext+0x3e>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3b01      	subs	r3, #1
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	491d      	ldr	r1, [pc, #116]	@ (800bed4 <vTaskSwitchContext+0xc0>)
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	4613      	mov	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	440b      	add	r3, r1
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0e3      	beq.n	800be38 <vTaskSwitchContext+0x24>
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	4613      	mov	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4a16      	ldr	r2, [pc, #88]	@ (800bed4 <vTaskSwitchContext+0xc0>)
 800be7c:	4413      	add	r3, r2
 800be7e:	60bb      	str	r3, [r7, #8]
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	605a      	str	r2, [r3, #4]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	3308      	adds	r3, #8
 800be92:	429a      	cmp	r2, r3
 800be94:	d104      	bne.n	800bea0 <vTaskSwitchContext+0x8c>
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	605a      	str	r2, [r3, #4]
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	4a0c      	ldr	r2, [pc, #48]	@ (800bed8 <vTaskSwitchContext+0xc4>)
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	4a09      	ldr	r2, [pc, #36]	@ (800bed0 <vTaskSwitchContext+0xbc>)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800beb0:	4b09      	ldr	r3, [pc, #36]	@ (800bed8 <vTaskSwitchContext+0xc4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3354      	adds	r3, #84	@ 0x54
 800beb6:	4a09      	ldr	r2, [pc, #36]	@ (800bedc <vTaskSwitchContext+0xc8>)
 800beb8:	6013      	str	r3, [r2, #0]
}
 800beba:	bf00      	nop
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	20001910 	.word	0x20001910
 800becc:	200018fc 	.word	0x200018fc
 800bed0:	200018f0 	.word	0x200018f0
 800bed4:	20001418 	.word	0x20001418
 800bed8:	20001414 	.word	0x20001414
 800bedc:	2000002c 	.word	0x2000002c

0800bee0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10b      	bne.n	800bf08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	60fb      	str	r3, [r7, #12]
}
 800bf02:	bf00      	nop
 800bf04:	bf00      	nop
 800bf06:	e7fd      	b.n	800bf04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf08:	4b07      	ldr	r3, [pc, #28]	@ (800bf28 <vTaskPlaceOnEventList+0x48>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3318      	adds	r3, #24
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7fe fd4e 	bl	800a9b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf16:	2101      	movs	r1, #1
 800bf18:	6838      	ldr	r0, [r7, #0]
 800bf1a:	f000 fb69 	bl	800c5f0 <prvAddCurrentTaskToDelayedList>
}
 800bf1e:	bf00      	nop
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20001414 	.word	0x20001414

0800bf2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10b      	bne.n	800bf56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	617b      	str	r3, [r7, #20]
}
 800bf50:	bf00      	nop
 800bf52:	bf00      	nop
 800bf54:	e7fd      	b.n	800bf52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf56:	4b0a      	ldr	r3, [pc, #40]	@ (800bf80 <vTaskPlaceOnEventListRestricted+0x54>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3318      	adds	r3, #24
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7fe fd03 	bl	800a96a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bf6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf70:	6879      	ldr	r1, [r7, #4]
 800bf72:	68b8      	ldr	r0, [r7, #8]
 800bf74:	f000 fb3c 	bl	800c5f0 <prvAddCurrentTaskToDelayedList>
	}
 800bf78:	bf00      	nop
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	20001414 	.word	0x20001414

0800bf84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10b      	bne.n	800bfb2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	60fb      	str	r3, [r7, #12]
}
 800bfac:	bf00      	nop
 800bfae:	bf00      	nop
 800bfb0:	e7fd      	b.n	800bfae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	3318      	adds	r3, #24
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fe fd34 	bl	800aa24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfbc:	4b1d      	ldr	r3, [pc, #116]	@ (800c034 <xTaskRemoveFromEventList+0xb0>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d11d      	bne.n	800c000 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe fd2b 	bl	800aa24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfd2:	4b19      	ldr	r3, [pc, #100]	@ (800c038 <xTaskRemoveFromEventList+0xb4>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d903      	bls.n	800bfe2 <xTaskRemoveFromEventList+0x5e>
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfde:	4a16      	ldr	r2, [pc, #88]	@ (800c038 <xTaskRemoveFromEventList+0xb4>)
 800bfe0:	6013      	str	r3, [r2, #0]
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	4a13      	ldr	r2, [pc, #76]	@ (800c03c <xTaskRemoveFromEventList+0xb8>)
 800bff0:	441a      	add	r2, r3
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	3304      	adds	r3, #4
 800bff6:	4619      	mov	r1, r3
 800bff8:	4610      	mov	r0, r2
 800bffa:	f7fe fcb6 	bl	800a96a <vListInsertEnd>
 800bffe:	e005      	b.n	800c00c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	3318      	adds	r3, #24
 800c004:	4619      	mov	r1, r3
 800c006:	480e      	ldr	r0, [pc, #56]	@ (800c040 <xTaskRemoveFromEventList+0xbc>)
 800c008:	f7fe fcaf 	bl	800a96a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c010:	4b0c      	ldr	r3, [pc, #48]	@ (800c044 <xTaskRemoveFromEventList+0xc0>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c016:	429a      	cmp	r2, r3
 800c018:	d905      	bls.n	800c026 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c01a:	2301      	movs	r3, #1
 800c01c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c01e:	4b0a      	ldr	r3, [pc, #40]	@ (800c048 <xTaskRemoveFromEventList+0xc4>)
 800c020:	2201      	movs	r2, #1
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	e001      	b.n	800c02a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c026:	2300      	movs	r3, #0
 800c028:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c02a:	697b      	ldr	r3, [r7, #20]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20001910 	.word	0x20001910
 800c038:	200018f0 	.word	0x200018f0
 800c03c:	20001418 	.word	0x20001418
 800c040:	200018a8 	.word	0x200018a8
 800c044:	20001414 	.word	0x20001414
 800c048:	200018fc 	.word	0x200018fc

0800c04c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c054:	4b06      	ldr	r3, [pc, #24]	@ (800c070 <vTaskInternalSetTimeOutState+0x24>)
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c05c:	4b05      	ldr	r3, [pc, #20]	@ (800c074 <vTaskInternalSetTimeOutState+0x28>)
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	605a      	str	r2, [r3, #4]
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	20001900 	.word	0x20001900
 800c074:	200018ec 	.word	0x200018ec

0800c078 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b088      	sub	sp, #32
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10b      	bne.n	800c0a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08c:	f383 8811 	msr	BASEPRI, r3
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	613b      	str	r3, [r7, #16]
}
 800c09a:	bf00      	nop
 800c09c:	bf00      	nop
 800c09e:	e7fd      	b.n	800c09c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10b      	bne.n	800c0be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	60fb      	str	r3, [r7, #12]
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop
 800c0bc:	e7fd      	b.n	800c0ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c0be:	f000 ff73 	bl	800cfa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c0c2:	4b1d      	ldr	r3, [pc, #116]	@ (800c138 <xTaskCheckForTimeOut+0xc0>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	69ba      	ldr	r2, [r7, #24]
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0da:	d102      	bne.n	800c0e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61fb      	str	r3, [r7, #28]
 800c0e0:	e023      	b.n	800c12a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	4b15      	ldr	r3, [pc, #84]	@ (800c13c <xTaskCheckForTimeOut+0xc4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d007      	beq.n	800c0fe <xTaskCheckForTimeOut+0x86>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d302      	bcc.n	800c0fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	61fb      	str	r3, [r7, #28]
 800c0fc:	e015      	b.n	800c12a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	429a      	cmp	r2, r3
 800c106:	d20b      	bcs.n	800c120 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff ff99 	bl	800c04c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c11a:	2300      	movs	r3, #0
 800c11c:	61fb      	str	r3, [r7, #28]
 800c11e:	e004      	b.n	800c12a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2200      	movs	r2, #0
 800c124:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c126:	2301      	movs	r3, #1
 800c128:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c12a:	f000 ff6f 	bl	800d00c <vPortExitCritical>

	return xReturn;
 800c12e:	69fb      	ldr	r3, [r7, #28]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3720      	adds	r7, #32
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	200018ec 	.word	0x200018ec
 800c13c:	20001900 	.word	0x20001900

0800c140 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c140:	b480      	push	{r7}
 800c142:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c144:	4b03      	ldr	r3, [pc, #12]	@ (800c154 <vTaskMissedYield+0x14>)
 800c146:	2201      	movs	r2, #1
 800c148:	601a      	str	r2, [r3, #0]
}
 800c14a:	bf00      	nop
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	200018fc 	.word	0x200018fc

0800c158 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c160:	f000 f852 	bl	800c208 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c164:	4b06      	ldr	r3, [pc, #24]	@ (800c180 <prvIdleTask+0x28>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d9f9      	bls.n	800c160 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c16c:	4b05      	ldr	r3, [pc, #20]	@ (800c184 <prvIdleTask+0x2c>)
 800c16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c17c:	e7f0      	b.n	800c160 <prvIdleTask+0x8>
 800c17e:	bf00      	nop
 800c180:	20001418 	.word	0x20001418
 800c184:	e000ed04 	.word	0xe000ed04

0800c188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c18e:	2300      	movs	r3, #0
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	e00c      	b.n	800c1ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4a12      	ldr	r2, [pc, #72]	@ (800c1e8 <prvInitialiseTaskLists+0x60>)
 800c1a0:	4413      	add	r3, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fe fbb4 	bl	800a910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	607b      	str	r3, [r7, #4]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b37      	cmp	r3, #55	@ 0x37
 800c1b2:	d9ef      	bls.n	800c194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c1b4:	480d      	ldr	r0, [pc, #52]	@ (800c1ec <prvInitialiseTaskLists+0x64>)
 800c1b6:	f7fe fbab 	bl	800a910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c1ba:	480d      	ldr	r0, [pc, #52]	@ (800c1f0 <prvInitialiseTaskLists+0x68>)
 800c1bc:	f7fe fba8 	bl	800a910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c1c0:	480c      	ldr	r0, [pc, #48]	@ (800c1f4 <prvInitialiseTaskLists+0x6c>)
 800c1c2:	f7fe fba5 	bl	800a910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1c6:	480c      	ldr	r0, [pc, #48]	@ (800c1f8 <prvInitialiseTaskLists+0x70>)
 800c1c8:	f7fe fba2 	bl	800a910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1cc:	480b      	ldr	r0, [pc, #44]	@ (800c1fc <prvInitialiseTaskLists+0x74>)
 800c1ce:	f7fe fb9f 	bl	800a910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c200 <prvInitialiseTaskLists+0x78>)
 800c1d4:	4a05      	ldr	r2, [pc, #20]	@ (800c1ec <prvInitialiseTaskLists+0x64>)
 800c1d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c204 <prvInitialiseTaskLists+0x7c>)
 800c1da:	4a05      	ldr	r2, [pc, #20]	@ (800c1f0 <prvInitialiseTaskLists+0x68>)
 800c1dc:	601a      	str	r2, [r3, #0]
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20001418 	.word	0x20001418
 800c1ec:	20001878 	.word	0x20001878
 800c1f0:	2000188c 	.word	0x2000188c
 800c1f4:	200018a8 	.word	0x200018a8
 800c1f8:	200018bc 	.word	0x200018bc
 800c1fc:	200018d4 	.word	0x200018d4
 800c200:	200018a0 	.word	0x200018a0
 800c204:	200018a4 	.word	0x200018a4

0800c208 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c20e:	e019      	b.n	800c244 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c210:	f000 feca 	bl	800cfa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c214:	4b10      	ldr	r3, [pc, #64]	@ (800c258 <prvCheckTasksWaitingTermination+0x50>)
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3304      	adds	r3, #4
 800c220:	4618      	mov	r0, r3
 800c222:	f7fe fbff 	bl	800aa24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c226:	4b0d      	ldr	r3, [pc, #52]	@ (800c25c <prvCheckTasksWaitingTermination+0x54>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	4a0b      	ldr	r2, [pc, #44]	@ (800c25c <prvCheckTasksWaitingTermination+0x54>)
 800c22e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c230:	4b0b      	ldr	r3, [pc, #44]	@ (800c260 <prvCheckTasksWaitingTermination+0x58>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3b01      	subs	r3, #1
 800c236:	4a0a      	ldr	r2, [pc, #40]	@ (800c260 <prvCheckTasksWaitingTermination+0x58>)
 800c238:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c23a:	f000 fee7 	bl	800d00c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f810 	bl	800c264 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c244:	4b06      	ldr	r3, [pc, #24]	@ (800c260 <prvCheckTasksWaitingTermination+0x58>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1e1      	bne.n	800c210 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c24c:	bf00      	nop
 800c24e:	bf00      	nop
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	200018bc 	.word	0x200018bc
 800c25c:	200018e8 	.word	0x200018e8
 800c260:	200018d0 	.word	0x200018d0

0800c264 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3354      	adds	r3, #84	@ 0x54
 800c270:	4618      	mov	r0, r3
 800c272:	f001 f9d1 	bl	800d618 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d108      	bne.n	800c292 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c284:	4618      	mov	r0, r3
 800c286:	f001 f87f 	bl	800d388 <vPortFree>
				vPortFree( pxTCB );
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f001 f87c 	bl	800d388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c290:	e019      	b.n	800c2c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d103      	bne.n	800c2a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f001 f873 	bl	800d388 <vPortFree>
	}
 800c2a2:	e010      	b.n	800c2c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d00b      	beq.n	800c2c6 <prvDeleteTCB+0x62>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	60fb      	str	r3, [r7, #12]
}
 800c2c0:	bf00      	nop
 800c2c2:	bf00      	nop
 800c2c4:	e7fd      	b.n	800c2c2 <prvDeleteTCB+0x5e>
	}
 800c2c6:	bf00      	nop
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c308 <prvResetNextTaskUnblockTime+0x38>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d104      	bne.n	800c2ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c30c <prvResetNextTaskUnblockTime+0x3c>)
 800c2e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c2e8:	e008      	b.n	800c2fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ea:	4b07      	ldr	r3, [pc, #28]	@ (800c308 <prvResetNextTaskUnblockTime+0x38>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4a04      	ldr	r2, [pc, #16]	@ (800c30c <prvResetNextTaskUnblockTime+0x3c>)
 800c2fa:	6013      	str	r3, [r2, #0]
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	200018a0 	.word	0x200018a0
 800c30c:	20001908 	.word	0x20001908

0800c310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c316:	4b0b      	ldr	r3, [pc, #44]	@ (800c344 <xTaskGetSchedulerState+0x34>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d102      	bne.n	800c324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c31e:	2301      	movs	r3, #1
 800c320:	607b      	str	r3, [r7, #4]
 800c322:	e008      	b.n	800c336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c324:	4b08      	ldr	r3, [pc, #32]	@ (800c348 <xTaskGetSchedulerState+0x38>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d102      	bne.n	800c332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c32c:	2302      	movs	r3, #2
 800c32e:	607b      	str	r3, [r7, #4]
 800c330:	e001      	b.n	800c336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c332:	2300      	movs	r3, #0
 800c334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c336:	687b      	ldr	r3, [r7, #4]
	}
 800c338:	4618      	mov	r0, r3
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	200018f4 	.word	0x200018f4
 800c348:	20001910 	.word	0x20001910

0800c34c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c358:	2300      	movs	r3, #0
 800c35a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d058      	beq.n	800c414 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c362:	4b2f      	ldr	r3, [pc, #188]	@ (800c420 <xTaskPriorityDisinherit+0xd4>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d00b      	beq.n	800c384 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	60fb      	str	r3, [r7, #12]
}
 800c37e:	bf00      	nop
 800c380:	bf00      	nop
 800c382:	e7fd      	b.n	800c380 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10b      	bne.n	800c3a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	60bb      	str	r3, [r7, #8]
}
 800c39e:	bf00      	nop
 800c3a0:	bf00      	nop
 800c3a2:	e7fd      	b.n	800c3a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3a8:	1e5a      	subs	r2, r3, #1
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d02c      	beq.n	800c414 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d128      	bne.n	800c414 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe fb2c 	bl	800aa24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c424 <xTaskPriorityDisinherit+0xd8>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d903      	bls.n	800c3f4 <xTaskPriorityDisinherit+0xa8>
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f0:	4a0c      	ldr	r2, [pc, #48]	@ (800c424 <xTaskPriorityDisinherit+0xd8>)
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	4a09      	ldr	r2, [pc, #36]	@ (800c428 <xTaskPriorityDisinherit+0xdc>)
 800c402:	441a      	add	r2, r3
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	3304      	adds	r3, #4
 800c408:	4619      	mov	r1, r3
 800c40a:	4610      	mov	r0, r2
 800c40c:	f7fe faad 	bl	800a96a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c410:	2301      	movs	r3, #1
 800c412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c414:	697b      	ldr	r3, [r7, #20]
	}
 800c416:	4618      	mov	r0, r3
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	20001414 	.word	0x20001414
 800c424:	200018f0 	.word	0x200018f0
 800c428:	20001418 	.word	0x20001418

0800c42c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c436:	f000 fdb7 	bl	800cfa8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c43a:	4b20      	ldr	r3, [pc, #128]	@ (800c4bc <ulTaskNotifyTake+0x90>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d113      	bne.n	800c46e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c446:	4b1d      	ldr	r3, [pc, #116]	@ (800c4bc <ulTaskNotifyTake+0x90>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00b      	beq.n	800c46e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c456:	2101      	movs	r1, #1
 800c458:	6838      	ldr	r0, [r7, #0]
 800c45a:	f000 f8c9 	bl	800c5f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c45e:	4b18      	ldr	r3, [pc, #96]	@ (800c4c0 <ulTaskNotifyTake+0x94>)
 800c460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c46e:	f000 fdcd 	bl	800d00c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c472:	f000 fd99 	bl	800cfa8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c476:	4b11      	ldr	r3, [pc, #68]	@ (800c4bc <ulTaskNotifyTake+0x90>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c47e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00e      	beq.n	800c4a4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c48c:	4b0b      	ldr	r3, [pc, #44]	@ (800c4bc <ulTaskNotifyTake+0x90>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2200      	movs	r2, #0
 800c492:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c496:	e005      	b.n	800c4a4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c498:	4b08      	ldr	r3, [pc, #32]	@ (800c4bc <ulTaskNotifyTake+0x90>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	3a01      	subs	r2, #1
 800c4a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4a4:	4b05      	ldr	r3, [pc, #20]	@ (800c4bc <ulTaskNotifyTake+0x90>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800c4ae:	f000 fdad 	bl	800d00c <vPortExitCritical>

		return ulReturn;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
	}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20001414 	.word	0x20001414
 800c4c0:	e000ed04 	.word	0xe000ed04

0800c4c4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08a      	sub	sp, #40	@ 0x28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10b      	bne.n	800c4ec <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	61bb      	str	r3, [r7, #24]
}
 800c4e6:	bf00      	nop
 800c4e8:	bf00      	nop
 800c4ea:	e7fd      	b.n	800c4e8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4ec:	f000 fe3c 	bl	800d168 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800c4f4:	f3ef 8211 	mrs	r2, BASEPRI
 800c4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	617a      	str	r2, [r7, #20]
 800c50a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c50c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c50e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c512:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c516:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51a:	2202      	movs	r2, #2
 800c51c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c522:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c52e:	7ffb      	ldrb	r3, [r7, #31]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d147      	bne.n	800c5c4 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00b      	beq.n	800c554 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	60fb      	str	r3, [r7, #12]
}
 800c54e:	bf00      	nop
 800c550:	bf00      	nop
 800c552:	e7fd      	b.n	800c550 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c554:	4b20      	ldr	r3, [pc, #128]	@ (800c5d8 <vTaskNotifyGiveFromISR+0x114>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d11d      	bne.n	800c598 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55e:	3304      	adds	r3, #4
 800c560:	4618      	mov	r0, r3
 800c562:	f7fe fa5f 	bl	800aa24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c56a:	4b1c      	ldr	r3, [pc, #112]	@ (800c5dc <vTaskNotifyGiveFromISR+0x118>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d903      	bls.n	800c57a <vTaskNotifyGiveFromISR+0xb6>
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c576:	4a19      	ldr	r2, [pc, #100]	@ (800c5dc <vTaskNotifyGiveFromISR+0x118>)
 800c578:	6013      	str	r3, [r2, #0]
 800c57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c57e:	4613      	mov	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4413      	add	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4a16      	ldr	r2, [pc, #88]	@ (800c5e0 <vTaskNotifyGiveFromISR+0x11c>)
 800c588:	441a      	add	r2, r3
 800c58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58c:	3304      	adds	r3, #4
 800c58e:	4619      	mov	r1, r3
 800c590:	4610      	mov	r0, r2
 800c592:	f7fe f9ea 	bl	800a96a <vListInsertEnd>
 800c596:	e005      	b.n	800c5a4 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59a:	3318      	adds	r3, #24
 800c59c:	4619      	mov	r1, r3
 800c59e:	4811      	ldr	r0, [pc, #68]	@ (800c5e4 <vTaskNotifyGiveFromISR+0x120>)
 800c5a0:	f7fe f9e3 	bl	800a96a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e8 <vTaskNotifyGiveFromISR+0x124>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d908      	bls.n	800c5c4 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c5be:	4b0b      	ldr	r3, [pc, #44]	@ (800c5ec <vTaskNotifyGiveFromISR+0x128>)
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	6a3b      	ldr	r3, [r7, #32]
 800c5c6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f383 8811 	msr	BASEPRI, r3
}
 800c5ce:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c5d0:	bf00      	nop
 800c5d2:	3728      	adds	r7, #40	@ 0x28
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	20001910 	.word	0x20001910
 800c5dc:	200018f0 	.word	0x200018f0
 800c5e0:	20001418 	.word	0x20001418
 800c5e4:	200018a8 	.word	0x200018a8
 800c5e8:	20001414 	.word	0x20001414
 800c5ec:	200018fc 	.word	0x200018fc

0800c5f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5fa:	4b21      	ldr	r3, [pc, #132]	@ (800c680 <prvAddCurrentTaskToDelayedList+0x90>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c600:	4b20      	ldr	r3, [pc, #128]	@ (800c684 <prvAddCurrentTaskToDelayedList+0x94>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3304      	adds	r3, #4
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe fa0c 	bl	800aa24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c612:	d10a      	bne.n	800c62a <prvAddCurrentTaskToDelayedList+0x3a>
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d007      	beq.n	800c62a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c61a:	4b1a      	ldr	r3, [pc, #104]	@ (800c684 <prvAddCurrentTaskToDelayedList+0x94>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3304      	adds	r3, #4
 800c620:	4619      	mov	r1, r3
 800c622:	4819      	ldr	r0, [pc, #100]	@ (800c688 <prvAddCurrentTaskToDelayedList+0x98>)
 800c624:	f7fe f9a1 	bl	800a96a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c628:	e026      	b.n	800c678 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4413      	add	r3, r2
 800c630:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c632:	4b14      	ldr	r3, [pc, #80]	@ (800c684 <prvAddCurrentTaskToDelayedList+0x94>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d209      	bcs.n	800c656 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c642:	4b12      	ldr	r3, [pc, #72]	@ (800c68c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	4b0f      	ldr	r3, [pc, #60]	@ (800c684 <prvAddCurrentTaskToDelayedList+0x94>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3304      	adds	r3, #4
 800c64c:	4619      	mov	r1, r3
 800c64e:	4610      	mov	r0, r2
 800c650:	f7fe f9af 	bl	800a9b2 <vListInsert>
}
 800c654:	e010      	b.n	800c678 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c656:	4b0e      	ldr	r3, [pc, #56]	@ (800c690 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4b0a      	ldr	r3, [pc, #40]	@ (800c684 <prvAddCurrentTaskToDelayedList+0x94>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	3304      	adds	r3, #4
 800c660:	4619      	mov	r1, r3
 800c662:	4610      	mov	r0, r2
 800c664:	f7fe f9a5 	bl	800a9b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c668:	4b0a      	ldr	r3, [pc, #40]	@ (800c694 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d202      	bcs.n	800c678 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c672:	4a08      	ldr	r2, [pc, #32]	@ (800c694 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	6013      	str	r3, [r2, #0]
}
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	200018ec 	.word	0x200018ec
 800c684:	20001414 	.word	0x20001414
 800c688:	200018d4 	.word	0x200018d4
 800c68c:	200018a4 	.word	0x200018a4
 800c690:	200018a0 	.word	0x200018a0
 800c694:	20001908 	.word	0x20001908

0800c698 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08a      	sub	sp, #40	@ 0x28
 800c69c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6a2:	f000 fb13 	bl	800cccc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6a6:	4b1d      	ldr	r3, [pc, #116]	@ (800c71c <xTimerCreateTimerTask+0x84>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d021      	beq.n	800c6f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c6b6:	1d3a      	adds	r2, r7, #4
 800c6b8:	f107 0108 	add.w	r1, r7, #8
 800c6bc:	f107 030c 	add.w	r3, r7, #12
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe f90b 	bl	800a8dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6c6:	6879      	ldr	r1, [r7, #4]
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	68fa      	ldr	r2, [r7, #12]
 800c6cc:	9202      	str	r2, [sp, #8]
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	460a      	mov	r2, r1
 800c6d8:	4911      	ldr	r1, [pc, #68]	@ (800c720 <xTimerCreateTimerTask+0x88>)
 800c6da:	4812      	ldr	r0, [pc, #72]	@ (800c724 <xTimerCreateTimerTask+0x8c>)
 800c6dc:	f7fe fec6 	bl	800b46c <xTaskCreateStatic>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	4a11      	ldr	r2, [pc, #68]	@ (800c728 <xTimerCreateTimerTask+0x90>)
 800c6e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6e6:	4b10      	ldr	r3, [pc, #64]	@ (800c728 <xTimerCreateTimerTask+0x90>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10b      	bne.n	800c710 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	613b      	str	r3, [r7, #16]
}
 800c70a:	bf00      	nop
 800c70c:	bf00      	nop
 800c70e:	e7fd      	b.n	800c70c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c710:	697b      	ldr	r3, [r7, #20]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20001944 	.word	0x20001944
 800c720:	0800e034 	.word	0x0800e034
 800c724:	0800c865 	.word	0x0800c865
 800c728:	20001948 	.word	0x20001948

0800c72c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	@ 0x28
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10b      	bne.n	800c75c <xTimerGenericCommand+0x30>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	623b      	str	r3, [r7, #32]
}
 800c756:	bf00      	nop
 800c758:	bf00      	nop
 800c75a:	e7fd      	b.n	800c758 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c75c:	4b19      	ldr	r3, [pc, #100]	@ (800c7c4 <xTimerGenericCommand+0x98>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d02a      	beq.n	800c7ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b05      	cmp	r3, #5
 800c774:	dc18      	bgt.n	800c7a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c776:	f7ff fdcb 	bl	800c310 <xTaskGetSchedulerState>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d109      	bne.n	800c794 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c780:	4b10      	ldr	r3, [pc, #64]	@ (800c7c4 <xTimerGenericCommand+0x98>)
 800c782:	6818      	ldr	r0, [r3, #0]
 800c784:	f107 0110 	add.w	r1, r7, #16
 800c788:	2300      	movs	r3, #0
 800c78a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c78c:	f7fe fa7e 	bl	800ac8c <xQueueGenericSend>
 800c790:	6278      	str	r0, [r7, #36]	@ 0x24
 800c792:	e012      	b.n	800c7ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c794:	4b0b      	ldr	r3, [pc, #44]	@ (800c7c4 <xTimerGenericCommand+0x98>)
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	f107 0110 	add.w	r1, r7, #16
 800c79c:	2300      	movs	r3, #0
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f7fe fa74 	bl	800ac8c <xQueueGenericSend>
 800c7a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c7a6:	e008      	b.n	800c7ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7a8:	4b06      	ldr	r3, [pc, #24]	@ (800c7c4 <xTimerGenericCommand+0x98>)
 800c7aa:	6818      	ldr	r0, [r3, #0]
 800c7ac:	f107 0110 	add.w	r1, r7, #16
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	f7fe fb6c 	bl	800ae90 <xQueueGenericSendFromISR>
 800c7b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3728      	adds	r7, #40	@ 0x28
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	20001944 	.word	0x20001944

0800c7c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af02      	add	r7, sp, #8
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7d2:	4b23      	ldr	r3, [pc, #140]	@ (800c860 <prvProcessExpiredTimer+0x98>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	3304      	adds	r3, #4
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe f91f 	bl	800aa24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7ec:	f003 0304 	and.w	r3, r3, #4
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d023      	beq.n	800c83c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	699a      	ldr	r2, [r3, #24]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	18d1      	adds	r1, r2, r3
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	6978      	ldr	r0, [r7, #20]
 800c802:	f000 f8d5 	bl	800c9b0 <prvInsertTimerInActiveList>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d020      	beq.n	800c84e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c80c:	2300      	movs	r3, #0
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	2300      	movs	r3, #0
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	2100      	movs	r1, #0
 800c816:	6978      	ldr	r0, [r7, #20]
 800c818:	f7ff ff88 	bl	800c72c <xTimerGenericCommand>
 800c81c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d114      	bne.n	800c84e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	60fb      	str	r3, [r7, #12]
}
 800c836:	bf00      	nop
 800c838:	bf00      	nop
 800c83a:	e7fd      	b.n	800c838 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c842:	f023 0301 	bic.w	r3, r3, #1
 800c846:	b2da      	uxtb	r2, r3
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	6a1b      	ldr	r3, [r3, #32]
 800c852:	6978      	ldr	r0, [r7, #20]
 800c854:	4798      	blx	r3
}
 800c856:	bf00      	nop
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	2000193c 	.word	0x2000193c

0800c864 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c86c:	f107 0308 	add.w	r3, r7, #8
 800c870:	4618      	mov	r0, r3
 800c872:	f000 f859 	bl	800c928 <prvGetNextExpireTime>
 800c876:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	4619      	mov	r1, r3
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f000 f805 	bl	800c88c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c882:	f000 f8d7 	bl	800ca34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c886:	bf00      	nop
 800c888:	e7f0      	b.n	800c86c <prvTimerTask+0x8>
	...

0800c88c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c896:	f7ff f84d 	bl	800b934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c89a:	f107 0308 	add.w	r3, r7, #8
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 f866 	bl	800c970 <prvSampleTimeNow>
 800c8a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d130      	bne.n	800c90e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10a      	bne.n	800c8c8 <prvProcessTimerOrBlockTask+0x3c>
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d806      	bhi.n	800c8c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c8ba:	f7ff f849 	bl	800b950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c8be:	68f9      	ldr	r1, [r7, #12]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7ff ff81 	bl	800c7c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c8c6:	e024      	b.n	800c912 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d008      	beq.n	800c8e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8ce:	4b13      	ldr	r3, [pc, #76]	@ (800c91c <prvProcessTimerOrBlockTask+0x90>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <prvProcessTimerOrBlockTask+0x50>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e000      	b.n	800c8de <prvProcessTimerOrBlockTask+0x52>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c920 <prvProcessTimerOrBlockTask+0x94>)
 800c8e2:	6818      	ldr	r0, [r3, #0]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	f7fe fd89 	bl	800b404 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8f2:	f7ff f82d 	bl	800b950 <xTaskResumeAll>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d10a      	bne.n	800c912 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8fc:	4b09      	ldr	r3, [pc, #36]	@ (800c924 <prvProcessTimerOrBlockTask+0x98>)
 800c8fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	f3bf 8f6f 	isb	sy
}
 800c90c:	e001      	b.n	800c912 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c90e:	f7ff f81f 	bl	800b950 <xTaskResumeAll>
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20001940 	.word	0x20001940
 800c920:	20001944 	.word	0x20001944
 800c924:	e000ed04 	.word	0xe000ed04

0800c928 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c930:	4b0e      	ldr	r3, [pc, #56]	@ (800c96c <prvGetNextExpireTime+0x44>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <prvGetNextExpireTime+0x16>
 800c93a:	2201      	movs	r2, #1
 800c93c:	e000      	b.n	800c940 <prvGetNextExpireTime+0x18>
 800c93e:	2200      	movs	r2, #0
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d105      	bne.n	800c958 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c94c:	4b07      	ldr	r3, [pc, #28]	@ (800c96c <prvGetNextExpireTime+0x44>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	60fb      	str	r3, [r7, #12]
 800c956:	e001      	b.n	800c95c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c958:	2300      	movs	r3, #0
 800c95a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c95c:	68fb      	ldr	r3, [r7, #12]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	2000193c 	.word	0x2000193c

0800c970 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c978:	f7ff f888 	bl	800ba8c <xTaskGetTickCount>
 800c97c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c97e:	4b0b      	ldr	r3, [pc, #44]	@ (800c9ac <prvSampleTimeNow+0x3c>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	429a      	cmp	r2, r3
 800c986:	d205      	bcs.n	800c994 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c988:	f000 f93a 	bl	800cc00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	e002      	b.n	800c99a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c99a:	4a04      	ldr	r2, [pc, #16]	@ (800c9ac <prvSampleTimeNow+0x3c>)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	2000194c 	.word	0x2000194c

0800c9b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d812      	bhi.n	800c9fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	1ad2      	subs	r2, r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d302      	bcc.n	800c9ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	617b      	str	r3, [r7, #20]
 800c9e8:	e01b      	b.n	800ca22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9ea:	4b10      	ldr	r3, [pc, #64]	@ (800ca2c <prvInsertTimerInActiveList+0x7c>)
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	f7fd ffdc 	bl	800a9b2 <vListInsert>
 800c9fa:	e012      	b.n	800ca22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d206      	bcs.n	800ca12 <prvInsertTimerInActiveList+0x62>
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d302      	bcc.n	800ca12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	617b      	str	r3, [r7, #20]
 800ca10:	e007      	b.n	800ca22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca12:	4b07      	ldr	r3, [pc, #28]	@ (800ca30 <prvInsertTimerInActiveList+0x80>)
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	4610      	mov	r0, r2
 800ca1e:	f7fd ffc8 	bl	800a9b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca22:	697b      	ldr	r3, [r7, #20]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3718      	adds	r7, #24
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	20001940 	.word	0x20001940
 800ca30:	2000193c 	.word	0x2000193c

0800ca34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08e      	sub	sp, #56	@ 0x38
 800ca38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca3a:	e0ce      	b.n	800cbda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	da19      	bge.n	800ca76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca42:	1d3b      	adds	r3, r7, #4
 800ca44:	3304      	adds	r3, #4
 800ca46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10b      	bne.n	800ca66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	61fb      	str	r3, [r7, #28]
}
 800ca60:	bf00      	nop
 800ca62:	bf00      	nop
 800ca64:	e7fd      	b.n	800ca62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca6c:	6850      	ldr	r0, [r2, #4]
 800ca6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca70:	6892      	ldr	r2, [r2, #8]
 800ca72:	4611      	mov	r1, r2
 800ca74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f2c0 80ae 	blt.w	800cbda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d004      	beq.n	800ca94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fd ffc8 	bl	800aa24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca94:	463b      	mov	r3, r7
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7ff ff6a 	bl	800c970 <prvSampleTimeNow>
 800ca9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b09      	cmp	r3, #9
 800caa2:	f200 8097 	bhi.w	800cbd4 <prvProcessReceivedCommands+0x1a0>
 800caa6:	a201      	add	r2, pc, #4	@ (adr r2, 800caac <prvProcessReceivedCommands+0x78>)
 800caa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caac:	0800cad5 	.word	0x0800cad5
 800cab0:	0800cad5 	.word	0x0800cad5
 800cab4:	0800cad5 	.word	0x0800cad5
 800cab8:	0800cb4b 	.word	0x0800cb4b
 800cabc:	0800cb5f 	.word	0x0800cb5f
 800cac0:	0800cbab 	.word	0x0800cbab
 800cac4:	0800cad5 	.word	0x0800cad5
 800cac8:	0800cad5 	.word	0x0800cad5
 800cacc:	0800cb4b 	.word	0x0800cb4b
 800cad0:	0800cb5f 	.word	0x0800cb5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cada:	f043 0301 	orr.w	r3, r3, #1
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cae6:	68ba      	ldr	r2, [r7, #8]
 800cae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	18d1      	adds	r1, r2, r3
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caf4:	f7ff ff5c 	bl	800c9b0 <prvInsertTimerInActiveList>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d06c      	beq.n	800cbd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb0c:	f003 0304 	and.w	r3, r3, #4
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d061      	beq.n	800cbd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	441a      	add	r2, r3
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	2300      	movs	r3, #0
 800cb22:	2100      	movs	r1, #0
 800cb24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb26:	f7ff fe01 	bl	800c72c <xTimerGenericCommand>
 800cb2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d152      	bne.n	800cbd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cb32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	61bb      	str	r3, [r7, #24]
}
 800cb44:	bf00      	nop
 800cb46:	bf00      	nop
 800cb48:	e7fd      	b.n	800cb46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb50:	f023 0301 	bic.w	r3, r3, #1
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cb5c:	e03d      	b.n	800cbda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb64:	f043 0301 	orr.w	r3, r3, #1
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10b      	bne.n	800cb96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	617b      	str	r3, [r7, #20]
}
 800cb90:	bf00      	nop
 800cb92:	bf00      	nop
 800cb94:	e7fd      	b.n	800cb92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9c:	18d1      	adds	r1, r2, r3
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cba4:	f7ff ff04 	bl	800c9b0 <prvInsertTimerInActiveList>
					break;
 800cba8:	e017      	b.n	800cbda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbb0:	f003 0302 	and.w	r3, r3, #2
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d103      	bne.n	800cbc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cbb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbba:	f000 fbe5 	bl	800d388 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cbbe:	e00c      	b.n	800cbda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbc6:	f023 0301 	bic.w	r3, r3, #1
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cbd2:	e002      	b.n	800cbda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cbd4:	bf00      	nop
 800cbd6:	e000      	b.n	800cbda <prvProcessReceivedCommands+0x1a6>
					break;
 800cbd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbda:	4b08      	ldr	r3, [pc, #32]	@ (800cbfc <prvProcessReceivedCommands+0x1c8>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	1d39      	adds	r1, r7, #4
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe f9f2 	bl	800afcc <xQueueReceive>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f47f af26 	bne.w	800ca3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	3730      	adds	r7, #48	@ 0x30
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20001944 	.word	0x20001944

0800cc00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc06:	e049      	b.n	800cc9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc08:	4b2e      	ldr	r3, [pc, #184]	@ (800ccc4 <prvSwitchTimerLists+0xc4>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc12:	4b2c      	ldr	r3, [pc, #176]	@ (800ccc4 <prvSwitchTimerLists+0xc4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3304      	adds	r3, #4
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fd feff 	bl	800aa24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d02f      	beq.n	800cc9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	4413      	add	r3, r2
 800cc44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d90e      	bls.n	800cc6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc5a:	4b1a      	ldr	r3, [pc, #104]	@ (800ccc4 <prvSwitchTimerLists+0xc4>)
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3304      	adds	r3, #4
 800cc62:	4619      	mov	r1, r3
 800cc64:	4610      	mov	r0, r2
 800cc66:	f7fd fea4 	bl	800a9b2 <vListInsert>
 800cc6a:	e017      	b.n	800cc9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	2300      	movs	r3, #0
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	2100      	movs	r1, #0
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7ff fd58 	bl	800c72c <xTimerGenericCommand>
 800cc7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10b      	bne.n	800cc9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	603b      	str	r3, [r7, #0]
}
 800cc96:	bf00      	nop
 800cc98:	bf00      	nop
 800cc9a:	e7fd      	b.n	800cc98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc9c:	4b09      	ldr	r3, [pc, #36]	@ (800ccc4 <prvSwitchTimerLists+0xc4>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1b0      	bne.n	800cc08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cca6:	4b07      	ldr	r3, [pc, #28]	@ (800ccc4 <prvSwitchTimerLists+0xc4>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccac:	4b06      	ldr	r3, [pc, #24]	@ (800ccc8 <prvSwitchTimerLists+0xc8>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a04      	ldr	r2, [pc, #16]	@ (800ccc4 <prvSwitchTimerLists+0xc4>)
 800ccb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ccb4:	4a04      	ldr	r2, [pc, #16]	@ (800ccc8 <prvSwitchTimerLists+0xc8>)
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	6013      	str	r3, [r2, #0]
}
 800ccba:	bf00      	nop
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	2000193c 	.word	0x2000193c
 800ccc8:	20001940 	.word	0x20001940

0800cccc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ccd2:	f000 f969 	bl	800cfa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ccd6:	4b15      	ldr	r3, [pc, #84]	@ (800cd2c <prvCheckForValidListAndQueue+0x60>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d120      	bne.n	800cd20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ccde:	4814      	ldr	r0, [pc, #80]	@ (800cd30 <prvCheckForValidListAndQueue+0x64>)
 800cce0:	f7fd fe16 	bl	800a910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cce4:	4813      	ldr	r0, [pc, #76]	@ (800cd34 <prvCheckForValidListAndQueue+0x68>)
 800cce6:	f7fd fe13 	bl	800a910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ccea:	4b13      	ldr	r3, [pc, #76]	@ (800cd38 <prvCheckForValidListAndQueue+0x6c>)
 800ccec:	4a10      	ldr	r2, [pc, #64]	@ (800cd30 <prvCheckForValidListAndQueue+0x64>)
 800ccee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ccf0:	4b12      	ldr	r3, [pc, #72]	@ (800cd3c <prvCheckForValidListAndQueue+0x70>)
 800ccf2:	4a10      	ldr	r2, [pc, #64]	@ (800cd34 <prvCheckForValidListAndQueue+0x68>)
 800ccf4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	4b11      	ldr	r3, [pc, #68]	@ (800cd40 <prvCheckForValidListAndQueue+0x74>)
 800ccfc:	4a11      	ldr	r2, [pc, #68]	@ (800cd44 <prvCheckForValidListAndQueue+0x78>)
 800ccfe:	2110      	movs	r1, #16
 800cd00:	200a      	movs	r0, #10
 800cd02:	f7fd ff23 	bl	800ab4c <xQueueGenericCreateStatic>
 800cd06:	4603      	mov	r3, r0
 800cd08:	4a08      	ldr	r2, [pc, #32]	@ (800cd2c <prvCheckForValidListAndQueue+0x60>)
 800cd0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd0c:	4b07      	ldr	r3, [pc, #28]	@ (800cd2c <prvCheckForValidListAndQueue+0x60>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d005      	beq.n	800cd20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd14:	4b05      	ldr	r3, [pc, #20]	@ (800cd2c <prvCheckForValidListAndQueue+0x60>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	490b      	ldr	r1, [pc, #44]	@ (800cd48 <prvCheckForValidListAndQueue+0x7c>)
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7fe fb48 	bl	800b3b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd20:	f000 f974 	bl	800d00c <vPortExitCritical>
}
 800cd24:	bf00      	nop
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	20001944 	.word	0x20001944
 800cd30:	20001914 	.word	0x20001914
 800cd34:	20001928 	.word	0x20001928
 800cd38:	2000193c 	.word	0x2000193c
 800cd3c:	20001940 	.word	0x20001940
 800cd40:	200019f0 	.word	0x200019f0
 800cd44:	20001950 	.word	0x20001950
 800cd48:	0800e03c 	.word	0x0800e03c

0800cd4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	3b04      	subs	r3, #4
 800cd5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cd64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3b04      	subs	r3, #4
 800cd6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	f023 0201 	bic.w	r2, r3, #1
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	3b04      	subs	r3, #4
 800cd7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd7c:	4a0c      	ldr	r2, [pc, #48]	@ (800cdb0 <pxPortInitialiseStack+0x64>)
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3b14      	subs	r3, #20
 800cd86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3b04      	subs	r3, #4
 800cd92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f06f 0202 	mvn.w	r2, #2
 800cd9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3b20      	subs	r3, #32
 800cda0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cda2:	68fb      	ldr	r3, [r7, #12]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	0800cdb5 	.word	0x0800cdb5

0800cdb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cdbe:	4b13      	ldr	r3, [pc, #76]	@ (800ce0c <prvTaskExitError+0x58>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdc6:	d00b      	beq.n	800cde0 <prvTaskExitError+0x2c>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	60fb      	str	r3, [r7, #12]
}
 800cdda:	bf00      	nop
 800cddc:	bf00      	nop
 800cdde:	e7fd      	b.n	800cddc <prvTaskExitError+0x28>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	60bb      	str	r3, [r7, #8]
}
 800cdf2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cdf4:	bf00      	nop
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d0fc      	beq.n	800cdf6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cdfc:	bf00      	nop
 800cdfe:	bf00      	nop
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	20000028 	.word	0x20000028

0800ce10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce10:	4b07      	ldr	r3, [pc, #28]	@ (800ce30 <pxCurrentTCBConst2>)
 800ce12:	6819      	ldr	r1, [r3, #0]
 800ce14:	6808      	ldr	r0, [r1, #0]
 800ce16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	f380 8809 	msr	PSP, r0
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f04f 0000 	mov.w	r0, #0
 800ce26:	f380 8811 	msr	BASEPRI, r0
 800ce2a:	4770      	bx	lr
 800ce2c:	f3af 8000 	nop.w

0800ce30 <pxCurrentTCBConst2>:
 800ce30:	20001414 	.word	0x20001414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop

0800ce38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce38:	4808      	ldr	r0, [pc, #32]	@ (800ce5c <prvPortStartFirstTask+0x24>)
 800ce3a:	6800      	ldr	r0, [r0, #0]
 800ce3c:	6800      	ldr	r0, [r0, #0]
 800ce3e:	f380 8808 	msr	MSP, r0
 800ce42:	f04f 0000 	mov.w	r0, #0
 800ce46:	f380 8814 	msr	CONTROL, r0
 800ce4a:	b662      	cpsie	i
 800ce4c:	b661      	cpsie	f
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	df00      	svc	0
 800ce58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce5a:	bf00      	nop
 800ce5c:	e000ed08 	.word	0xe000ed08

0800ce60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce66:	4b47      	ldr	r3, [pc, #284]	@ (800cf84 <xPortStartScheduler+0x124>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a47      	ldr	r2, [pc, #284]	@ (800cf88 <xPortStartScheduler+0x128>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d10b      	bne.n	800ce88 <xPortStartScheduler+0x28>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	613b      	str	r3, [r7, #16]
}
 800ce82:	bf00      	nop
 800ce84:	bf00      	nop
 800ce86:	e7fd      	b.n	800ce84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce88:	4b3e      	ldr	r3, [pc, #248]	@ (800cf84 <xPortStartScheduler+0x124>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a3f      	ldr	r2, [pc, #252]	@ (800cf8c <xPortStartScheduler+0x12c>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d10b      	bne.n	800ceaa <xPortStartScheduler+0x4a>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	60fb      	str	r3, [r7, #12]
}
 800cea4:	bf00      	nop
 800cea6:	bf00      	nop
 800cea8:	e7fd      	b.n	800cea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ceaa:	4b39      	ldr	r3, [pc, #228]	@ (800cf90 <xPortStartScheduler+0x130>)
 800ceac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	22ff      	movs	r2, #255	@ 0xff
 800ceba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cec4:	78fb      	ldrb	r3, [r7, #3]
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	4b31      	ldr	r3, [pc, #196]	@ (800cf94 <xPortStartScheduler+0x134>)
 800ced0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ced2:	4b31      	ldr	r3, [pc, #196]	@ (800cf98 <xPortStartScheduler+0x138>)
 800ced4:	2207      	movs	r2, #7
 800ced6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ced8:	e009      	b.n	800ceee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ceda:	4b2f      	ldr	r3, [pc, #188]	@ (800cf98 <xPortStartScheduler+0x138>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3b01      	subs	r3, #1
 800cee0:	4a2d      	ldr	r2, [pc, #180]	@ (800cf98 <xPortStartScheduler+0x138>)
 800cee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cee4:	78fb      	ldrb	r3, [r7, #3]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cef6:	2b80      	cmp	r3, #128	@ 0x80
 800cef8:	d0ef      	beq.n	800ceda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cefa:	4b27      	ldr	r3, [pc, #156]	@ (800cf98 <xPortStartScheduler+0x138>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f1c3 0307 	rsb	r3, r3, #7
 800cf02:	2b04      	cmp	r3, #4
 800cf04:	d00b      	beq.n	800cf1e <xPortStartScheduler+0xbe>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	60bb      	str	r3, [r7, #8]
}
 800cf18:	bf00      	nop
 800cf1a:	bf00      	nop
 800cf1c:	e7fd      	b.n	800cf1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf1e:	4b1e      	ldr	r3, [pc, #120]	@ (800cf98 <xPortStartScheduler+0x138>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	021b      	lsls	r3, r3, #8
 800cf24:	4a1c      	ldr	r2, [pc, #112]	@ (800cf98 <xPortStartScheduler+0x138>)
 800cf26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf28:	4b1b      	ldr	r3, [pc, #108]	@ (800cf98 <xPortStartScheduler+0x138>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cf30:	4a19      	ldr	r2, [pc, #100]	@ (800cf98 <xPortStartScheduler+0x138>)
 800cf32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf3c:	4b17      	ldr	r3, [pc, #92]	@ (800cf9c <xPortStartScheduler+0x13c>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a16      	ldr	r2, [pc, #88]	@ (800cf9c <xPortStartScheduler+0x13c>)
 800cf42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cf46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf48:	4b14      	ldr	r3, [pc, #80]	@ (800cf9c <xPortStartScheduler+0x13c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a13      	ldr	r2, [pc, #76]	@ (800cf9c <xPortStartScheduler+0x13c>)
 800cf4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cf52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf54:	f000 f8da 	bl	800d10c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf58:	4b11      	ldr	r3, [pc, #68]	@ (800cfa0 <xPortStartScheduler+0x140>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf5e:	f000 f8f9 	bl	800d154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf62:	4b10      	ldr	r3, [pc, #64]	@ (800cfa4 <xPortStartScheduler+0x144>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a0f      	ldr	r2, [pc, #60]	@ (800cfa4 <xPortStartScheduler+0x144>)
 800cf68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cf6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf6e:	f7ff ff63 	bl	800ce38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf72:	f7fe ff4f 	bl	800be14 <vTaskSwitchContext>
	prvTaskExitError();
 800cf76:	f7ff ff1d 	bl	800cdb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3718      	adds	r7, #24
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	e000ed00 	.word	0xe000ed00
 800cf88:	410fc271 	.word	0x410fc271
 800cf8c:	410fc270 	.word	0x410fc270
 800cf90:	e000e400 	.word	0xe000e400
 800cf94:	20001a40 	.word	0x20001a40
 800cf98:	20001a44 	.word	0x20001a44
 800cf9c:	e000ed20 	.word	0xe000ed20
 800cfa0:	20000028 	.word	0x20000028
 800cfa4:	e000ef34 	.word	0xe000ef34

0800cfa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	607b      	str	r3, [r7, #4]
}
 800cfc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cfc2:	4b10      	ldr	r3, [pc, #64]	@ (800d004 <vPortEnterCritical+0x5c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	4a0e      	ldr	r2, [pc, #56]	@ (800d004 <vPortEnterCritical+0x5c>)
 800cfca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cfcc:	4b0d      	ldr	r3, [pc, #52]	@ (800d004 <vPortEnterCritical+0x5c>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d110      	bne.n	800cff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800d008 <vPortEnterCritical+0x60>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00b      	beq.n	800cff6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	603b      	str	r3, [r7, #0]
}
 800cff0:	bf00      	nop
 800cff2:	bf00      	nop
 800cff4:	e7fd      	b.n	800cff2 <vPortEnterCritical+0x4a>
	}
}
 800cff6:	bf00      	nop
 800cff8:	370c      	adds	r7, #12
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	20000028 	.word	0x20000028
 800d008:	e000ed04 	.word	0xe000ed04

0800d00c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d012:	4b12      	ldr	r3, [pc, #72]	@ (800d05c <vPortExitCritical+0x50>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10b      	bne.n	800d032 <vPortExitCritical+0x26>
	__asm volatile
 800d01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01e:	f383 8811 	msr	BASEPRI, r3
 800d022:	f3bf 8f6f 	isb	sy
 800d026:	f3bf 8f4f 	dsb	sy
 800d02a:	607b      	str	r3, [r7, #4]
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	e7fd      	b.n	800d02e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d032:	4b0a      	ldr	r3, [pc, #40]	@ (800d05c <vPortExitCritical+0x50>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3b01      	subs	r3, #1
 800d038:	4a08      	ldr	r2, [pc, #32]	@ (800d05c <vPortExitCritical+0x50>)
 800d03a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d03c:	4b07      	ldr	r3, [pc, #28]	@ (800d05c <vPortExitCritical+0x50>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d105      	bne.n	800d050 <vPortExitCritical+0x44>
 800d044:	2300      	movs	r3, #0
 800d046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	f383 8811 	msr	BASEPRI, r3
}
 800d04e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	20000028 	.word	0x20000028

0800d060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d060:	f3ef 8009 	mrs	r0, PSP
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	4b15      	ldr	r3, [pc, #84]	@ (800d0c0 <pxCurrentTCBConst>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	f01e 0f10 	tst.w	lr, #16
 800d070:	bf08      	it	eq
 800d072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07a:	6010      	str	r0, [r2, #0]
 800d07c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d084:	f380 8811 	msr	BASEPRI, r0
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f7fe fec0 	bl	800be14 <vTaskSwitchContext>
 800d094:	f04f 0000 	mov.w	r0, #0
 800d098:	f380 8811 	msr	BASEPRI, r0
 800d09c:	bc09      	pop	{r0, r3}
 800d09e:	6819      	ldr	r1, [r3, #0]
 800d0a0:	6808      	ldr	r0, [r1, #0]
 800d0a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a6:	f01e 0f10 	tst.w	lr, #16
 800d0aa:	bf08      	it	eq
 800d0ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d0b0:	f380 8809 	msr	PSP, r0
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	f3af 8000 	nop.w

0800d0c0 <pxCurrentTCBConst>:
 800d0c0:	20001414 	.word	0x20001414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d0c4:	bf00      	nop
 800d0c6:	bf00      	nop

0800d0c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	607b      	str	r3, [r7, #4]
}
 800d0e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0e2:	f7fe fddd 	bl	800bca0 <xTaskIncrementTick>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d003      	beq.n	800d0f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0ec:	4b06      	ldr	r3, [pc, #24]	@ (800d108 <xPortSysTickHandler+0x40>)
 800d0ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	f383 8811 	msr	BASEPRI, r3
}
 800d0fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	e000ed04 	.word	0xe000ed04

0800d10c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d10c:	b480      	push	{r7}
 800d10e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d110:	4b0b      	ldr	r3, [pc, #44]	@ (800d140 <vPortSetupTimerInterrupt+0x34>)
 800d112:	2200      	movs	r2, #0
 800d114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d116:	4b0b      	ldr	r3, [pc, #44]	@ (800d144 <vPortSetupTimerInterrupt+0x38>)
 800d118:	2200      	movs	r2, #0
 800d11a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d11c:	4b0a      	ldr	r3, [pc, #40]	@ (800d148 <vPortSetupTimerInterrupt+0x3c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a0a      	ldr	r2, [pc, #40]	@ (800d14c <vPortSetupTimerInterrupt+0x40>)
 800d122:	fba2 2303 	umull	r2, r3, r2, r3
 800d126:	099b      	lsrs	r3, r3, #6
 800d128:	4a09      	ldr	r2, [pc, #36]	@ (800d150 <vPortSetupTimerInterrupt+0x44>)
 800d12a:	3b01      	subs	r3, #1
 800d12c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d12e:	4b04      	ldr	r3, [pc, #16]	@ (800d140 <vPortSetupTimerInterrupt+0x34>)
 800d130:	2207      	movs	r2, #7
 800d132:	601a      	str	r2, [r3, #0]
}
 800d134:	bf00      	nop
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	e000e010 	.word	0xe000e010
 800d144:	e000e018 	.word	0xe000e018
 800d148:	2000001c 	.word	0x2000001c
 800d14c:	10624dd3 	.word	0x10624dd3
 800d150:	e000e014 	.word	0xe000e014

0800d154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d164 <vPortEnableVFP+0x10>
 800d158:	6801      	ldr	r1, [r0, #0]
 800d15a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d15e:	6001      	str	r1, [r0, #0]
 800d160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d162:	bf00      	nop
 800d164:	e000ed88 	.word	0xe000ed88

0800d168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d16e:	f3ef 8305 	mrs	r3, IPSR
 800d172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b0f      	cmp	r3, #15
 800d178:	d915      	bls.n	800d1a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d17a:	4a18      	ldr	r2, [pc, #96]	@ (800d1dc <vPortValidateInterruptPriority+0x74>)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	4413      	add	r3, r2
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d184:	4b16      	ldr	r3, [pc, #88]	@ (800d1e0 <vPortValidateInterruptPriority+0x78>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	7afa      	ldrb	r2, [r7, #11]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d20b      	bcs.n	800d1a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	607b      	str	r3, [r7, #4]
}
 800d1a0:	bf00      	nop
 800d1a2:	bf00      	nop
 800d1a4:	e7fd      	b.n	800d1a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d1a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d1e4 <vPortValidateInterruptPriority+0x7c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d1ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d1e8 <vPortValidateInterruptPriority+0x80>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d90b      	bls.n	800d1ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	603b      	str	r3, [r7, #0]
}
 800d1c8:	bf00      	nop
 800d1ca:	bf00      	nop
 800d1cc:	e7fd      	b.n	800d1ca <vPortValidateInterruptPriority+0x62>
	}
 800d1ce:	bf00      	nop
 800d1d0:	3714      	adds	r7, #20
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
 800d1da:	bf00      	nop
 800d1dc:	e000e3f0 	.word	0xe000e3f0
 800d1e0:	20001a40 	.word	0x20001a40
 800d1e4:	e000ed0c 	.word	0xe000ed0c
 800d1e8:	20001a44 	.word	0x20001a44

0800d1ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b08a      	sub	sp, #40	@ 0x28
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1f8:	f7fe fb9c 	bl	800b934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1fc:	4b5c      	ldr	r3, [pc, #368]	@ (800d370 <pvPortMalloc+0x184>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d101      	bne.n	800d208 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d204:	f000 f924 	bl	800d450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d208:	4b5a      	ldr	r3, [pc, #360]	@ (800d374 <pvPortMalloc+0x188>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4013      	ands	r3, r2
 800d210:	2b00      	cmp	r3, #0
 800d212:	f040 8095 	bne.w	800d340 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d01e      	beq.n	800d25a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d21c:	2208      	movs	r2, #8
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4413      	add	r3, r2
 800d222:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f003 0307 	and.w	r3, r3, #7
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d015      	beq.n	800d25a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f023 0307 	bic.w	r3, r3, #7
 800d234:	3308      	adds	r3, #8
 800d236:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f003 0307 	and.w	r3, r3, #7
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00b      	beq.n	800d25a <pvPortMalloc+0x6e>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	617b      	str	r3, [r7, #20]
}
 800d254:	bf00      	nop
 800d256:	bf00      	nop
 800d258:	e7fd      	b.n	800d256 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d06f      	beq.n	800d340 <pvPortMalloc+0x154>
 800d260:	4b45      	ldr	r3, [pc, #276]	@ (800d378 <pvPortMalloc+0x18c>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	429a      	cmp	r2, r3
 800d268:	d86a      	bhi.n	800d340 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d26a:	4b44      	ldr	r3, [pc, #272]	@ (800d37c <pvPortMalloc+0x190>)
 800d26c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d26e:	4b43      	ldr	r3, [pc, #268]	@ (800d37c <pvPortMalloc+0x190>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d274:	e004      	b.n	800d280 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	429a      	cmp	r2, r3
 800d288:	d903      	bls.n	800d292 <pvPortMalloc+0xa6>
 800d28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1f1      	bne.n	800d276 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d292:	4b37      	ldr	r3, [pc, #220]	@ (800d370 <pvPortMalloc+0x184>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d298:	429a      	cmp	r2, r3
 800d29a:	d051      	beq.n	800d340 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d29c:	6a3b      	ldr	r3, [r7, #32]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2208      	movs	r2, #8
 800d2a2:	4413      	add	r3, r2
 800d2a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b0:	685a      	ldr	r2, [r3, #4]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	1ad2      	subs	r2, r2, r3
 800d2b6:	2308      	movs	r3, #8
 800d2b8:	005b      	lsls	r3, r3, #1
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d920      	bls.n	800d300 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	f003 0307 	and.w	r3, r3, #7
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00b      	beq.n	800d2e8 <pvPortMalloc+0xfc>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	613b      	str	r3, [r7, #16]
}
 800d2e2:	bf00      	nop
 800d2e4:	bf00      	nop
 800d2e6:	e7fd      	b.n	800d2e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	1ad2      	subs	r2, r2, r3
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2fa:	69b8      	ldr	r0, [r7, #24]
 800d2fc:	f000 f90a 	bl	800d514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d300:	4b1d      	ldr	r3, [pc, #116]	@ (800d378 <pvPortMalloc+0x18c>)
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	1ad3      	subs	r3, r2, r3
 800d30a:	4a1b      	ldr	r2, [pc, #108]	@ (800d378 <pvPortMalloc+0x18c>)
 800d30c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d30e:	4b1a      	ldr	r3, [pc, #104]	@ (800d378 <pvPortMalloc+0x18c>)
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	4b1b      	ldr	r3, [pc, #108]	@ (800d380 <pvPortMalloc+0x194>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	429a      	cmp	r2, r3
 800d318:	d203      	bcs.n	800d322 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d31a:	4b17      	ldr	r3, [pc, #92]	@ (800d378 <pvPortMalloc+0x18c>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a18      	ldr	r2, [pc, #96]	@ (800d380 <pvPortMalloc+0x194>)
 800d320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	4b13      	ldr	r3, [pc, #76]	@ (800d374 <pvPortMalloc+0x188>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	431a      	orrs	r2, r3
 800d32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d332:	2200      	movs	r2, #0
 800d334:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d336:	4b13      	ldr	r3, [pc, #76]	@ (800d384 <pvPortMalloc+0x198>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3301      	adds	r3, #1
 800d33c:	4a11      	ldr	r2, [pc, #68]	@ (800d384 <pvPortMalloc+0x198>)
 800d33e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d340:	f7fe fb06 	bl	800b950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	f003 0307 	and.w	r3, r3, #7
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00b      	beq.n	800d366 <pvPortMalloc+0x17a>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	60fb      	str	r3, [r7, #12]
}
 800d360:	bf00      	nop
 800d362:	bf00      	nop
 800d364:	e7fd      	b.n	800d362 <pvPortMalloc+0x176>
	return pvReturn;
 800d366:	69fb      	ldr	r3, [r7, #28]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3728      	adds	r7, #40	@ 0x28
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	20005650 	.word	0x20005650
 800d374:	20005664 	.word	0x20005664
 800d378:	20005654 	.word	0x20005654
 800d37c:	20005648 	.word	0x20005648
 800d380:	20005658 	.word	0x20005658
 800d384:	2000565c 	.word	0x2000565c

0800d388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d04f      	beq.n	800d43a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d39a:	2308      	movs	r3, #8
 800d39c:	425b      	negs	r3, r3
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	4b25      	ldr	r3, [pc, #148]	@ (800d444 <vPortFree+0xbc>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10b      	bne.n	800d3ce <vPortFree+0x46>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	60fb      	str	r3, [r7, #12]
}
 800d3c8:	bf00      	nop
 800d3ca:	bf00      	nop
 800d3cc:	e7fd      	b.n	800d3ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00b      	beq.n	800d3ee <vPortFree+0x66>
	__asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	60bb      	str	r3, [r7, #8]
}
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	e7fd      	b.n	800d3ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	685a      	ldr	r2, [r3, #4]
 800d3f2:	4b14      	ldr	r3, [pc, #80]	@ (800d444 <vPortFree+0xbc>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4013      	ands	r3, r2
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d01e      	beq.n	800d43a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d11a      	bne.n	800d43a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	685a      	ldr	r2, [r3, #4]
 800d408:	4b0e      	ldr	r3, [pc, #56]	@ (800d444 <vPortFree+0xbc>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	43db      	mvns	r3, r3
 800d40e:	401a      	ands	r2, r3
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d414:	f7fe fa8e 	bl	800b934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	4b0a      	ldr	r3, [pc, #40]	@ (800d448 <vPortFree+0xc0>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4413      	add	r3, r2
 800d422:	4a09      	ldr	r2, [pc, #36]	@ (800d448 <vPortFree+0xc0>)
 800d424:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d426:	6938      	ldr	r0, [r7, #16]
 800d428:	f000 f874 	bl	800d514 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d42c:	4b07      	ldr	r3, [pc, #28]	@ (800d44c <vPortFree+0xc4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3301      	adds	r3, #1
 800d432:	4a06      	ldr	r2, [pc, #24]	@ (800d44c <vPortFree+0xc4>)
 800d434:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d436:	f7fe fa8b 	bl	800b950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d43a:	bf00      	nop
 800d43c:	3718      	adds	r7, #24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	20005664 	.word	0x20005664
 800d448:	20005654 	.word	0x20005654
 800d44c:	20005660 	.word	0x20005660

0800d450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d456:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d45a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d45c:	4b27      	ldr	r3, [pc, #156]	@ (800d4fc <prvHeapInit+0xac>)
 800d45e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00c      	beq.n	800d484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	3307      	adds	r3, #7
 800d46e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f023 0307 	bic.w	r3, r3, #7
 800d476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	4a1f      	ldr	r2, [pc, #124]	@ (800d4fc <prvHeapInit+0xac>)
 800d480:	4413      	add	r3, r2
 800d482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d488:	4a1d      	ldr	r2, [pc, #116]	@ (800d500 <prvHeapInit+0xb0>)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d48e:	4b1c      	ldr	r3, [pc, #112]	@ (800d500 <prvHeapInit+0xb0>)
 800d490:	2200      	movs	r2, #0
 800d492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	4413      	add	r3, r2
 800d49a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d49c:	2208      	movs	r2, #8
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	1a9b      	subs	r3, r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f023 0307 	bic.w	r3, r3, #7
 800d4aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4a15      	ldr	r2, [pc, #84]	@ (800d504 <prvHeapInit+0xb4>)
 800d4b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d4b2:	4b14      	ldr	r3, [pc, #80]	@ (800d504 <prvHeapInit+0xb4>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d4ba:	4b12      	ldr	r3, [pc, #72]	@ (800d504 <prvHeapInit+0xb4>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	1ad2      	subs	r2, r2, r3
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d504 <prvHeapInit+0xb4>)
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	4a0a      	ldr	r2, [pc, #40]	@ (800d508 <prvHeapInit+0xb8>)
 800d4de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	4a09      	ldr	r2, [pc, #36]	@ (800d50c <prvHeapInit+0xbc>)
 800d4e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4e8:	4b09      	ldr	r3, [pc, #36]	@ (800d510 <prvHeapInit+0xc0>)
 800d4ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d4ee:	601a      	str	r2, [r3, #0]
}
 800d4f0:	bf00      	nop
 800d4f2:	3714      	adds	r7, #20
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	20001a48 	.word	0x20001a48
 800d500:	20005648 	.word	0x20005648
 800d504:	20005650 	.word	0x20005650
 800d508:	20005658 	.word	0x20005658
 800d50c:	20005654 	.word	0x20005654
 800d510:	20005664 	.word	0x20005664

0800d514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d51c:	4b28      	ldr	r3, [pc, #160]	@ (800d5c0 <prvInsertBlockIntoFreeList+0xac>)
 800d51e:	60fb      	str	r3, [r7, #12]
 800d520:	e002      	b.n	800d528 <prvInsertBlockIntoFreeList+0x14>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d8f7      	bhi.n	800d522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	4413      	add	r3, r2
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	429a      	cmp	r2, r3
 800d542:	d108      	bne.n	800d556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	441a      	add	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	441a      	add	r2, r3
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	429a      	cmp	r2, r3
 800d568:	d118      	bne.n	800d59c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	4b15      	ldr	r3, [pc, #84]	@ (800d5c4 <prvInsertBlockIntoFreeList+0xb0>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	d00d      	beq.n	800d592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	685a      	ldr	r2, [r3, #4]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	441a      	add	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	e008      	b.n	800d5a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d592:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c4 <prvInsertBlockIntoFreeList+0xb0>)
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	e003      	b.n	800d5a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d002      	beq.n	800d5b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5b2:	bf00      	nop
 800d5b4:	3714      	adds	r7, #20
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	20005648 	.word	0x20005648
 800d5c4:	20005650 	.word	0x20005650

0800d5c8 <_vsiprintf_r>:
 800d5c8:	b500      	push	{lr}
 800d5ca:	b09b      	sub	sp, #108	@ 0x6c
 800d5cc:	9100      	str	r1, [sp, #0]
 800d5ce:	9104      	str	r1, [sp, #16]
 800d5d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d5d4:	9105      	str	r1, [sp, #20]
 800d5d6:	9102      	str	r1, [sp, #8]
 800d5d8:	4905      	ldr	r1, [pc, #20]	@ (800d5f0 <_vsiprintf_r+0x28>)
 800d5da:	9103      	str	r1, [sp, #12]
 800d5dc:	4669      	mov	r1, sp
 800d5de:	f000 f951 	bl	800d884 <_svfiprintf_r>
 800d5e2:	9b00      	ldr	r3, [sp, #0]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	701a      	strb	r2, [r3, #0]
 800d5e8:	b01b      	add	sp, #108	@ 0x6c
 800d5ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5ee:	bf00      	nop
 800d5f0:	ffff0208 	.word	0xffff0208

0800d5f4 <vsiprintf>:
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	460a      	mov	r2, r1
 800d5f8:	4601      	mov	r1, r0
 800d5fa:	4802      	ldr	r0, [pc, #8]	@ (800d604 <vsiprintf+0x10>)
 800d5fc:	6800      	ldr	r0, [r0, #0]
 800d5fe:	f7ff bfe3 	b.w	800d5c8 <_vsiprintf_r>
 800d602:	bf00      	nop
 800d604:	2000002c 	.word	0x2000002c

0800d608 <memset>:
 800d608:	4402      	add	r2, r0
 800d60a:	4603      	mov	r3, r0
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d100      	bne.n	800d612 <memset+0xa>
 800d610:	4770      	bx	lr
 800d612:	f803 1b01 	strb.w	r1, [r3], #1
 800d616:	e7f9      	b.n	800d60c <memset+0x4>

0800d618 <_reclaim_reent>:
 800d618:	4b29      	ldr	r3, [pc, #164]	@ (800d6c0 <_reclaim_reent+0xa8>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4283      	cmp	r3, r0
 800d61e:	b570      	push	{r4, r5, r6, lr}
 800d620:	4604      	mov	r4, r0
 800d622:	d04b      	beq.n	800d6bc <_reclaim_reent+0xa4>
 800d624:	69c3      	ldr	r3, [r0, #28]
 800d626:	b1ab      	cbz	r3, 800d654 <_reclaim_reent+0x3c>
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	b16b      	cbz	r3, 800d648 <_reclaim_reent+0x30>
 800d62c:	2500      	movs	r5, #0
 800d62e:	69e3      	ldr	r3, [r4, #28]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	5959      	ldr	r1, [r3, r5]
 800d634:	2900      	cmp	r1, #0
 800d636:	d13b      	bne.n	800d6b0 <_reclaim_reent+0x98>
 800d638:	3504      	adds	r5, #4
 800d63a:	2d80      	cmp	r5, #128	@ 0x80
 800d63c:	d1f7      	bne.n	800d62e <_reclaim_reent+0x16>
 800d63e:	69e3      	ldr	r3, [r4, #28]
 800d640:	4620      	mov	r0, r4
 800d642:	68d9      	ldr	r1, [r3, #12]
 800d644:	f000 f878 	bl	800d738 <_free_r>
 800d648:	69e3      	ldr	r3, [r4, #28]
 800d64a:	6819      	ldr	r1, [r3, #0]
 800d64c:	b111      	cbz	r1, 800d654 <_reclaim_reent+0x3c>
 800d64e:	4620      	mov	r0, r4
 800d650:	f000 f872 	bl	800d738 <_free_r>
 800d654:	6961      	ldr	r1, [r4, #20]
 800d656:	b111      	cbz	r1, 800d65e <_reclaim_reent+0x46>
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 f86d 	bl	800d738 <_free_r>
 800d65e:	69e1      	ldr	r1, [r4, #28]
 800d660:	b111      	cbz	r1, 800d668 <_reclaim_reent+0x50>
 800d662:	4620      	mov	r0, r4
 800d664:	f000 f868 	bl	800d738 <_free_r>
 800d668:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d66a:	b111      	cbz	r1, 800d672 <_reclaim_reent+0x5a>
 800d66c:	4620      	mov	r0, r4
 800d66e:	f000 f863 	bl	800d738 <_free_r>
 800d672:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d674:	b111      	cbz	r1, 800d67c <_reclaim_reent+0x64>
 800d676:	4620      	mov	r0, r4
 800d678:	f000 f85e 	bl	800d738 <_free_r>
 800d67c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d67e:	b111      	cbz	r1, 800d686 <_reclaim_reent+0x6e>
 800d680:	4620      	mov	r0, r4
 800d682:	f000 f859 	bl	800d738 <_free_r>
 800d686:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d688:	b111      	cbz	r1, 800d690 <_reclaim_reent+0x78>
 800d68a:	4620      	mov	r0, r4
 800d68c:	f000 f854 	bl	800d738 <_free_r>
 800d690:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d692:	b111      	cbz	r1, 800d69a <_reclaim_reent+0x82>
 800d694:	4620      	mov	r0, r4
 800d696:	f000 f84f 	bl	800d738 <_free_r>
 800d69a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d69c:	b111      	cbz	r1, 800d6a4 <_reclaim_reent+0x8c>
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f000 f84a 	bl	800d738 <_free_r>
 800d6a4:	6a23      	ldr	r3, [r4, #32]
 800d6a6:	b14b      	cbz	r3, 800d6bc <_reclaim_reent+0xa4>
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6ae:	4718      	bx	r3
 800d6b0:	680e      	ldr	r6, [r1, #0]
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f000 f840 	bl	800d738 <_free_r>
 800d6b8:	4631      	mov	r1, r6
 800d6ba:	e7bb      	b.n	800d634 <_reclaim_reent+0x1c>
 800d6bc:	bd70      	pop	{r4, r5, r6, pc}
 800d6be:	bf00      	nop
 800d6c0:	2000002c 	.word	0x2000002c

0800d6c4 <__errno>:
 800d6c4:	4b01      	ldr	r3, [pc, #4]	@ (800d6cc <__errno+0x8>)
 800d6c6:	6818      	ldr	r0, [r3, #0]
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	2000002c 	.word	0x2000002c

0800d6d0 <__libc_init_array>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	4d0d      	ldr	r5, [pc, #52]	@ (800d708 <__libc_init_array+0x38>)
 800d6d4:	4c0d      	ldr	r4, [pc, #52]	@ (800d70c <__libc_init_array+0x3c>)
 800d6d6:	1b64      	subs	r4, r4, r5
 800d6d8:	10a4      	asrs	r4, r4, #2
 800d6da:	2600      	movs	r6, #0
 800d6dc:	42a6      	cmp	r6, r4
 800d6de:	d109      	bne.n	800d6f4 <__libc_init_array+0x24>
 800d6e0:	4d0b      	ldr	r5, [pc, #44]	@ (800d710 <__libc_init_array+0x40>)
 800d6e2:	4c0c      	ldr	r4, [pc, #48]	@ (800d714 <__libc_init_array+0x44>)
 800d6e4:	f000 fc66 	bl	800dfb4 <_init>
 800d6e8:	1b64      	subs	r4, r4, r5
 800d6ea:	10a4      	asrs	r4, r4, #2
 800d6ec:	2600      	movs	r6, #0
 800d6ee:	42a6      	cmp	r6, r4
 800d6f0:	d105      	bne.n	800d6fe <__libc_init_array+0x2e>
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
 800d6f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6f8:	4798      	blx	r3
 800d6fa:	3601      	adds	r6, #1
 800d6fc:	e7ee      	b.n	800d6dc <__libc_init_array+0xc>
 800d6fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d702:	4798      	blx	r3
 800d704:	3601      	adds	r6, #1
 800d706:	e7f2      	b.n	800d6ee <__libc_init_array+0x1e>
 800d708:	0800e13c 	.word	0x0800e13c
 800d70c:	0800e13c 	.word	0x0800e13c
 800d710:	0800e13c 	.word	0x0800e13c
 800d714:	0800e140 	.word	0x0800e140

0800d718 <__retarget_lock_acquire_recursive>:
 800d718:	4770      	bx	lr

0800d71a <__retarget_lock_release_recursive>:
 800d71a:	4770      	bx	lr

0800d71c <memcpy>:
 800d71c:	440a      	add	r2, r1
 800d71e:	4291      	cmp	r1, r2
 800d720:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d724:	d100      	bne.n	800d728 <memcpy+0xc>
 800d726:	4770      	bx	lr
 800d728:	b510      	push	{r4, lr}
 800d72a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d72e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d732:	4291      	cmp	r1, r2
 800d734:	d1f9      	bne.n	800d72a <memcpy+0xe>
 800d736:	bd10      	pop	{r4, pc}

0800d738 <_free_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4605      	mov	r5, r0
 800d73c:	2900      	cmp	r1, #0
 800d73e:	d041      	beq.n	800d7c4 <_free_r+0x8c>
 800d740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d744:	1f0c      	subs	r4, r1, #4
 800d746:	2b00      	cmp	r3, #0
 800d748:	bfb8      	it	lt
 800d74a:	18e4      	addlt	r4, r4, r3
 800d74c:	f000 fbc6 	bl	800dedc <__malloc_lock>
 800d750:	4a1d      	ldr	r2, [pc, #116]	@ (800d7c8 <_free_r+0x90>)
 800d752:	6813      	ldr	r3, [r2, #0]
 800d754:	b933      	cbnz	r3, 800d764 <_free_r+0x2c>
 800d756:	6063      	str	r3, [r4, #4]
 800d758:	6014      	str	r4, [r2, #0]
 800d75a:	4628      	mov	r0, r5
 800d75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d760:	f000 bbc2 	b.w	800dee8 <__malloc_unlock>
 800d764:	42a3      	cmp	r3, r4
 800d766:	d908      	bls.n	800d77a <_free_r+0x42>
 800d768:	6820      	ldr	r0, [r4, #0]
 800d76a:	1821      	adds	r1, r4, r0
 800d76c:	428b      	cmp	r3, r1
 800d76e:	bf01      	itttt	eq
 800d770:	6819      	ldreq	r1, [r3, #0]
 800d772:	685b      	ldreq	r3, [r3, #4]
 800d774:	1809      	addeq	r1, r1, r0
 800d776:	6021      	streq	r1, [r4, #0]
 800d778:	e7ed      	b.n	800d756 <_free_r+0x1e>
 800d77a:	461a      	mov	r2, r3
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	b10b      	cbz	r3, 800d784 <_free_r+0x4c>
 800d780:	42a3      	cmp	r3, r4
 800d782:	d9fa      	bls.n	800d77a <_free_r+0x42>
 800d784:	6811      	ldr	r1, [r2, #0]
 800d786:	1850      	adds	r0, r2, r1
 800d788:	42a0      	cmp	r0, r4
 800d78a:	d10b      	bne.n	800d7a4 <_free_r+0x6c>
 800d78c:	6820      	ldr	r0, [r4, #0]
 800d78e:	4401      	add	r1, r0
 800d790:	1850      	adds	r0, r2, r1
 800d792:	4283      	cmp	r3, r0
 800d794:	6011      	str	r1, [r2, #0]
 800d796:	d1e0      	bne.n	800d75a <_free_r+0x22>
 800d798:	6818      	ldr	r0, [r3, #0]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	6053      	str	r3, [r2, #4]
 800d79e:	4408      	add	r0, r1
 800d7a0:	6010      	str	r0, [r2, #0]
 800d7a2:	e7da      	b.n	800d75a <_free_r+0x22>
 800d7a4:	d902      	bls.n	800d7ac <_free_r+0x74>
 800d7a6:	230c      	movs	r3, #12
 800d7a8:	602b      	str	r3, [r5, #0]
 800d7aa:	e7d6      	b.n	800d75a <_free_r+0x22>
 800d7ac:	6820      	ldr	r0, [r4, #0]
 800d7ae:	1821      	adds	r1, r4, r0
 800d7b0:	428b      	cmp	r3, r1
 800d7b2:	bf04      	itt	eq
 800d7b4:	6819      	ldreq	r1, [r3, #0]
 800d7b6:	685b      	ldreq	r3, [r3, #4]
 800d7b8:	6063      	str	r3, [r4, #4]
 800d7ba:	bf04      	itt	eq
 800d7bc:	1809      	addeq	r1, r1, r0
 800d7be:	6021      	streq	r1, [r4, #0]
 800d7c0:	6054      	str	r4, [r2, #4]
 800d7c2:	e7ca      	b.n	800d75a <_free_r+0x22>
 800d7c4:	bd38      	pop	{r3, r4, r5, pc}
 800d7c6:	bf00      	nop
 800d7c8:	200057ac 	.word	0x200057ac

0800d7cc <__ssputs_r>:
 800d7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7d0:	688e      	ldr	r6, [r1, #8]
 800d7d2:	461f      	mov	r7, r3
 800d7d4:	42be      	cmp	r6, r7
 800d7d6:	680b      	ldr	r3, [r1, #0]
 800d7d8:	4682      	mov	sl, r0
 800d7da:	460c      	mov	r4, r1
 800d7dc:	4690      	mov	r8, r2
 800d7de:	d82d      	bhi.n	800d83c <__ssputs_r+0x70>
 800d7e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d7e8:	d026      	beq.n	800d838 <__ssputs_r+0x6c>
 800d7ea:	6965      	ldr	r5, [r4, #20]
 800d7ec:	6909      	ldr	r1, [r1, #16]
 800d7ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7f2:	eba3 0901 	sub.w	r9, r3, r1
 800d7f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7fa:	1c7b      	adds	r3, r7, #1
 800d7fc:	444b      	add	r3, r9
 800d7fe:	106d      	asrs	r5, r5, #1
 800d800:	429d      	cmp	r5, r3
 800d802:	bf38      	it	cc
 800d804:	461d      	movcc	r5, r3
 800d806:	0553      	lsls	r3, r2, #21
 800d808:	d527      	bpl.n	800d85a <__ssputs_r+0x8e>
 800d80a:	4629      	mov	r1, r5
 800d80c:	f000 f958 	bl	800dac0 <_malloc_r>
 800d810:	4606      	mov	r6, r0
 800d812:	b360      	cbz	r0, 800d86e <__ssputs_r+0xa2>
 800d814:	6921      	ldr	r1, [r4, #16]
 800d816:	464a      	mov	r2, r9
 800d818:	f7ff ff80 	bl	800d71c <memcpy>
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d826:	81a3      	strh	r3, [r4, #12]
 800d828:	6126      	str	r6, [r4, #16]
 800d82a:	6165      	str	r5, [r4, #20]
 800d82c:	444e      	add	r6, r9
 800d82e:	eba5 0509 	sub.w	r5, r5, r9
 800d832:	6026      	str	r6, [r4, #0]
 800d834:	60a5      	str	r5, [r4, #8]
 800d836:	463e      	mov	r6, r7
 800d838:	42be      	cmp	r6, r7
 800d83a:	d900      	bls.n	800d83e <__ssputs_r+0x72>
 800d83c:	463e      	mov	r6, r7
 800d83e:	6820      	ldr	r0, [r4, #0]
 800d840:	4632      	mov	r2, r6
 800d842:	4641      	mov	r1, r8
 800d844:	f000 fb84 	bl	800df50 <memmove>
 800d848:	68a3      	ldr	r3, [r4, #8]
 800d84a:	1b9b      	subs	r3, r3, r6
 800d84c:	60a3      	str	r3, [r4, #8]
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	4433      	add	r3, r6
 800d852:	6023      	str	r3, [r4, #0]
 800d854:	2000      	movs	r0, #0
 800d856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d85a:	462a      	mov	r2, r5
 800d85c:	f000 fb4a 	bl	800def4 <_realloc_r>
 800d860:	4606      	mov	r6, r0
 800d862:	2800      	cmp	r0, #0
 800d864:	d1e0      	bne.n	800d828 <__ssputs_r+0x5c>
 800d866:	6921      	ldr	r1, [r4, #16]
 800d868:	4650      	mov	r0, sl
 800d86a:	f7ff ff65 	bl	800d738 <_free_r>
 800d86e:	230c      	movs	r3, #12
 800d870:	f8ca 3000 	str.w	r3, [sl]
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d87a:	81a3      	strh	r3, [r4, #12]
 800d87c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d880:	e7e9      	b.n	800d856 <__ssputs_r+0x8a>
	...

0800d884 <_svfiprintf_r>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	4698      	mov	r8, r3
 800d88a:	898b      	ldrh	r3, [r1, #12]
 800d88c:	061b      	lsls	r3, r3, #24
 800d88e:	b09d      	sub	sp, #116	@ 0x74
 800d890:	4607      	mov	r7, r0
 800d892:	460d      	mov	r5, r1
 800d894:	4614      	mov	r4, r2
 800d896:	d510      	bpl.n	800d8ba <_svfiprintf_r+0x36>
 800d898:	690b      	ldr	r3, [r1, #16]
 800d89a:	b973      	cbnz	r3, 800d8ba <_svfiprintf_r+0x36>
 800d89c:	2140      	movs	r1, #64	@ 0x40
 800d89e:	f000 f90f 	bl	800dac0 <_malloc_r>
 800d8a2:	6028      	str	r0, [r5, #0]
 800d8a4:	6128      	str	r0, [r5, #16]
 800d8a6:	b930      	cbnz	r0, 800d8b6 <_svfiprintf_r+0x32>
 800d8a8:	230c      	movs	r3, #12
 800d8aa:	603b      	str	r3, [r7, #0]
 800d8ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8b0:	b01d      	add	sp, #116	@ 0x74
 800d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b6:	2340      	movs	r3, #64	@ 0x40
 800d8b8:	616b      	str	r3, [r5, #20]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8be:	2320      	movs	r3, #32
 800d8c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8c8:	2330      	movs	r3, #48	@ 0x30
 800d8ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da68 <_svfiprintf_r+0x1e4>
 800d8ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8d2:	f04f 0901 	mov.w	r9, #1
 800d8d6:	4623      	mov	r3, r4
 800d8d8:	469a      	mov	sl, r3
 800d8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8de:	b10a      	cbz	r2, 800d8e4 <_svfiprintf_r+0x60>
 800d8e0:	2a25      	cmp	r2, #37	@ 0x25
 800d8e2:	d1f9      	bne.n	800d8d8 <_svfiprintf_r+0x54>
 800d8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d8e8:	d00b      	beq.n	800d902 <_svfiprintf_r+0x7e>
 800d8ea:	465b      	mov	r3, fp
 800d8ec:	4622      	mov	r2, r4
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	4638      	mov	r0, r7
 800d8f2:	f7ff ff6b 	bl	800d7cc <__ssputs_r>
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	f000 80a7 	beq.w	800da4a <_svfiprintf_r+0x1c6>
 800d8fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8fe:	445a      	add	r2, fp
 800d900:	9209      	str	r2, [sp, #36]	@ 0x24
 800d902:	f89a 3000 	ldrb.w	r3, [sl]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f000 809f 	beq.w	800da4a <_svfiprintf_r+0x1c6>
 800d90c:	2300      	movs	r3, #0
 800d90e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d916:	f10a 0a01 	add.w	sl, sl, #1
 800d91a:	9304      	str	r3, [sp, #16]
 800d91c:	9307      	str	r3, [sp, #28]
 800d91e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d922:	931a      	str	r3, [sp, #104]	@ 0x68
 800d924:	4654      	mov	r4, sl
 800d926:	2205      	movs	r2, #5
 800d928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92c:	484e      	ldr	r0, [pc, #312]	@ (800da68 <_svfiprintf_r+0x1e4>)
 800d92e:	f7f2 fc57 	bl	80001e0 <memchr>
 800d932:	9a04      	ldr	r2, [sp, #16]
 800d934:	b9d8      	cbnz	r0, 800d96e <_svfiprintf_r+0xea>
 800d936:	06d0      	lsls	r0, r2, #27
 800d938:	bf44      	itt	mi
 800d93a:	2320      	movmi	r3, #32
 800d93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d940:	0711      	lsls	r1, r2, #28
 800d942:	bf44      	itt	mi
 800d944:	232b      	movmi	r3, #43	@ 0x2b
 800d946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d94a:	f89a 3000 	ldrb.w	r3, [sl]
 800d94e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d950:	d015      	beq.n	800d97e <_svfiprintf_r+0xfa>
 800d952:	9a07      	ldr	r2, [sp, #28]
 800d954:	4654      	mov	r4, sl
 800d956:	2000      	movs	r0, #0
 800d958:	f04f 0c0a 	mov.w	ip, #10
 800d95c:	4621      	mov	r1, r4
 800d95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d962:	3b30      	subs	r3, #48	@ 0x30
 800d964:	2b09      	cmp	r3, #9
 800d966:	d94b      	bls.n	800da00 <_svfiprintf_r+0x17c>
 800d968:	b1b0      	cbz	r0, 800d998 <_svfiprintf_r+0x114>
 800d96a:	9207      	str	r2, [sp, #28]
 800d96c:	e014      	b.n	800d998 <_svfiprintf_r+0x114>
 800d96e:	eba0 0308 	sub.w	r3, r0, r8
 800d972:	fa09 f303 	lsl.w	r3, r9, r3
 800d976:	4313      	orrs	r3, r2
 800d978:	9304      	str	r3, [sp, #16]
 800d97a:	46a2      	mov	sl, r4
 800d97c:	e7d2      	b.n	800d924 <_svfiprintf_r+0xa0>
 800d97e:	9b03      	ldr	r3, [sp, #12]
 800d980:	1d19      	adds	r1, r3, #4
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	9103      	str	r1, [sp, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	bfbb      	ittet	lt
 800d98a:	425b      	neglt	r3, r3
 800d98c:	f042 0202 	orrlt.w	r2, r2, #2
 800d990:	9307      	strge	r3, [sp, #28]
 800d992:	9307      	strlt	r3, [sp, #28]
 800d994:	bfb8      	it	lt
 800d996:	9204      	strlt	r2, [sp, #16]
 800d998:	7823      	ldrb	r3, [r4, #0]
 800d99a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d99c:	d10a      	bne.n	800d9b4 <_svfiprintf_r+0x130>
 800d99e:	7863      	ldrb	r3, [r4, #1]
 800d9a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9a2:	d132      	bne.n	800da0a <_svfiprintf_r+0x186>
 800d9a4:	9b03      	ldr	r3, [sp, #12]
 800d9a6:	1d1a      	adds	r2, r3, #4
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	9203      	str	r2, [sp, #12]
 800d9ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9b0:	3402      	adds	r4, #2
 800d9b2:	9305      	str	r3, [sp, #20]
 800d9b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da78 <_svfiprintf_r+0x1f4>
 800d9b8:	7821      	ldrb	r1, [r4, #0]
 800d9ba:	2203      	movs	r2, #3
 800d9bc:	4650      	mov	r0, sl
 800d9be:	f7f2 fc0f 	bl	80001e0 <memchr>
 800d9c2:	b138      	cbz	r0, 800d9d4 <_svfiprintf_r+0x150>
 800d9c4:	9b04      	ldr	r3, [sp, #16]
 800d9c6:	eba0 000a 	sub.w	r0, r0, sl
 800d9ca:	2240      	movs	r2, #64	@ 0x40
 800d9cc:	4082      	lsls	r2, r0
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	3401      	adds	r4, #1
 800d9d2:	9304      	str	r3, [sp, #16]
 800d9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d8:	4824      	ldr	r0, [pc, #144]	@ (800da6c <_svfiprintf_r+0x1e8>)
 800d9da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9de:	2206      	movs	r2, #6
 800d9e0:	f7f2 fbfe 	bl	80001e0 <memchr>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	d036      	beq.n	800da56 <_svfiprintf_r+0x1d2>
 800d9e8:	4b21      	ldr	r3, [pc, #132]	@ (800da70 <_svfiprintf_r+0x1ec>)
 800d9ea:	bb1b      	cbnz	r3, 800da34 <_svfiprintf_r+0x1b0>
 800d9ec:	9b03      	ldr	r3, [sp, #12]
 800d9ee:	3307      	adds	r3, #7
 800d9f0:	f023 0307 	bic.w	r3, r3, #7
 800d9f4:	3308      	adds	r3, #8
 800d9f6:	9303      	str	r3, [sp, #12]
 800d9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9fa:	4433      	add	r3, r6
 800d9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9fe:	e76a      	b.n	800d8d6 <_svfiprintf_r+0x52>
 800da00:	fb0c 3202 	mla	r2, ip, r2, r3
 800da04:	460c      	mov	r4, r1
 800da06:	2001      	movs	r0, #1
 800da08:	e7a8      	b.n	800d95c <_svfiprintf_r+0xd8>
 800da0a:	2300      	movs	r3, #0
 800da0c:	3401      	adds	r4, #1
 800da0e:	9305      	str	r3, [sp, #20]
 800da10:	4619      	mov	r1, r3
 800da12:	f04f 0c0a 	mov.w	ip, #10
 800da16:	4620      	mov	r0, r4
 800da18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da1c:	3a30      	subs	r2, #48	@ 0x30
 800da1e:	2a09      	cmp	r2, #9
 800da20:	d903      	bls.n	800da2a <_svfiprintf_r+0x1a6>
 800da22:	2b00      	cmp	r3, #0
 800da24:	d0c6      	beq.n	800d9b4 <_svfiprintf_r+0x130>
 800da26:	9105      	str	r1, [sp, #20]
 800da28:	e7c4      	b.n	800d9b4 <_svfiprintf_r+0x130>
 800da2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800da2e:	4604      	mov	r4, r0
 800da30:	2301      	movs	r3, #1
 800da32:	e7f0      	b.n	800da16 <_svfiprintf_r+0x192>
 800da34:	ab03      	add	r3, sp, #12
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	462a      	mov	r2, r5
 800da3a:	4b0e      	ldr	r3, [pc, #56]	@ (800da74 <_svfiprintf_r+0x1f0>)
 800da3c:	a904      	add	r1, sp, #16
 800da3e:	4638      	mov	r0, r7
 800da40:	f3af 8000 	nop.w
 800da44:	1c42      	adds	r2, r0, #1
 800da46:	4606      	mov	r6, r0
 800da48:	d1d6      	bne.n	800d9f8 <_svfiprintf_r+0x174>
 800da4a:	89ab      	ldrh	r3, [r5, #12]
 800da4c:	065b      	lsls	r3, r3, #25
 800da4e:	f53f af2d 	bmi.w	800d8ac <_svfiprintf_r+0x28>
 800da52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da54:	e72c      	b.n	800d8b0 <_svfiprintf_r+0x2c>
 800da56:	ab03      	add	r3, sp, #12
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	462a      	mov	r2, r5
 800da5c:	4b05      	ldr	r3, [pc, #20]	@ (800da74 <_svfiprintf_r+0x1f0>)
 800da5e:	a904      	add	r1, sp, #16
 800da60:	4638      	mov	r0, r7
 800da62:	f000 f91b 	bl	800dc9c <_printf_i>
 800da66:	e7ed      	b.n	800da44 <_svfiprintf_r+0x1c0>
 800da68:	0800e100 	.word	0x0800e100
 800da6c:	0800e10a 	.word	0x0800e10a
 800da70:	00000000 	.word	0x00000000
 800da74:	0800d7cd 	.word	0x0800d7cd
 800da78:	0800e106 	.word	0x0800e106

0800da7c <sbrk_aligned>:
 800da7c:	b570      	push	{r4, r5, r6, lr}
 800da7e:	4e0f      	ldr	r6, [pc, #60]	@ (800dabc <sbrk_aligned+0x40>)
 800da80:	460c      	mov	r4, r1
 800da82:	6831      	ldr	r1, [r6, #0]
 800da84:	4605      	mov	r5, r0
 800da86:	b911      	cbnz	r1, 800da8e <sbrk_aligned+0x12>
 800da88:	f000 fa7c 	bl	800df84 <_sbrk_r>
 800da8c:	6030      	str	r0, [r6, #0]
 800da8e:	4621      	mov	r1, r4
 800da90:	4628      	mov	r0, r5
 800da92:	f000 fa77 	bl	800df84 <_sbrk_r>
 800da96:	1c43      	adds	r3, r0, #1
 800da98:	d103      	bne.n	800daa2 <sbrk_aligned+0x26>
 800da9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800da9e:	4620      	mov	r0, r4
 800daa0:	bd70      	pop	{r4, r5, r6, pc}
 800daa2:	1cc4      	adds	r4, r0, #3
 800daa4:	f024 0403 	bic.w	r4, r4, #3
 800daa8:	42a0      	cmp	r0, r4
 800daaa:	d0f8      	beq.n	800da9e <sbrk_aligned+0x22>
 800daac:	1a21      	subs	r1, r4, r0
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 fa68 	bl	800df84 <_sbrk_r>
 800dab4:	3001      	adds	r0, #1
 800dab6:	d1f2      	bne.n	800da9e <sbrk_aligned+0x22>
 800dab8:	e7ef      	b.n	800da9a <sbrk_aligned+0x1e>
 800daba:	bf00      	nop
 800dabc:	200057a8 	.word	0x200057a8

0800dac0 <_malloc_r>:
 800dac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac4:	1ccd      	adds	r5, r1, #3
 800dac6:	f025 0503 	bic.w	r5, r5, #3
 800daca:	3508      	adds	r5, #8
 800dacc:	2d0c      	cmp	r5, #12
 800dace:	bf38      	it	cc
 800dad0:	250c      	movcc	r5, #12
 800dad2:	2d00      	cmp	r5, #0
 800dad4:	4606      	mov	r6, r0
 800dad6:	db01      	blt.n	800dadc <_malloc_r+0x1c>
 800dad8:	42a9      	cmp	r1, r5
 800dada:	d904      	bls.n	800dae6 <_malloc_r+0x26>
 800dadc:	230c      	movs	r3, #12
 800dade:	6033      	str	r3, [r6, #0]
 800dae0:	2000      	movs	r0, #0
 800dae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dbbc <_malloc_r+0xfc>
 800daea:	f000 f9f7 	bl	800dedc <__malloc_lock>
 800daee:	f8d8 3000 	ldr.w	r3, [r8]
 800daf2:	461c      	mov	r4, r3
 800daf4:	bb44      	cbnz	r4, 800db48 <_malloc_r+0x88>
 800daf6:	4629      	mov	r1, r5
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7ff ffbf 	bl	800da7c <sbrk_aligned>
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	4604      	mov	r4, r0
 800db02:	d158      	bne.n	800dbb6 <_malloc_r+0xf6>
 800db04:	f8d8 4000 	ldr.w	r4, [r8]
 800db08:	4627      	mov	r7, r4
 800db0a:	2f00      	cmp	r7, #0
 800db0c:	d143      	bne.n	800db96 <_malloc_r+0xd6>
 800db0e:	2c00      	cmp	r4, #0
 800db10:	d04b      	beq.n	800dbaa <_malloc_r+0xea>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	4639      	mov	r1, r7
 800db16:	4630      	mov	r0, r6
 800db18:	eb04 0903 	add.w	r9, r4, r3
 800db1c:	f000 fa32 	bl	800df84 <_sbrk_r>
 800db20:	4581      	cmp	r9, r0
 800db22:	d142      	bne.n	800dbaa <_malloc_r+0xea>
 800db24:	6821      	ldr	r1, [r4, #0]
 800db26:	1a6d      	subs	r5, r5, r1
 800db28:	4629      	mov	r1, r5
 800db2a:	4630      	mov	r0, r6
 800db2c:	f7ff ffa6 	bl	800da7c <sbrk_aligned>
 800db30:	3001      	adds	r0, #1
 800db32:	d03a      	beq.n	800dbaa <_malloc_r+0xea>
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	442b      	add	r3, r5
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	f8d8 3000 	ldr.w	r3, [r8]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	bb62      	cbnz	r2, 800db9c <_malloc_r+0xdc>
 800db42:	f8c8 7000 	str.w	r7, [r8]
 800db46:	e00f      	b.n	800db68 <_malloc_r+0xa8>
 800db48:	6822      	ldr	r2, [r4, #0]
 800db4a:	1b52      	subs	r2, r2, r5
 800db4c:	d420      	bmi.n	800db90 <_malloc_r+0xd0>
 800db4e:	2a0b      	cmp	r2, #11
 800db50:	d917      	bls.n	800db82 <_malloc_r+0xc2>
 800db52:	1961      	adds	r1, r4, r5
 800db54:	42a3      	cmp	r3, r4
 800db56:	6025      	str	r5, [r4, #0]
 800db58:	bf18      	it	ne
 800db5a:	6059      	strne	r1, [r3, #4]
 800db5c:	6863      	ldr	r3, [r4, #4]
 800db5e:	bf08      	it	eq
 800db60:	f8c8 1000 	streq.w	r1, [r8]
 800db64:	5162      	str	r2, [r4, r5]
 800db66:	604b      	str	r3, [r1, #4]
 800db68:	4630      	mov	r0, r6
 800db6a:	f000 f9bd 	bl	800dee8 <__malloc_unlock>
 800db6e:	f104 000b 	add.w	r0, r4, #11
 800db72:	1d23      	adds	r3, r4, #4
 800db74:	f020 0007 	bic.w	r0, r0, #7
 800db78:	1ac2      	subs	r2, r0, r3
 800db7a:	bf1c      	itt	ne
 800db7c:	1a1b      	subne	r3, r3, r0
 800db7e:	50a3      	strne	r3, [r4, r2]
 800db80:	e7af      	b.n	800dae2 <_malloc_r+0x22>
 800db82:	6862      	ldr	r2, [r4, #4]
 800db84:	42a3      	cmp	r3, r4
 800db86:	bf0c      	ite	eq
 800db88:	f8c8 2000 	streq.w	r2, [r8]
 800db8c:	605a      	strne	r2, [r3, #4]
 800db8e:	e7eb      	b.n	800db68 <_malloc_r+0xa8>
 800db90:	4623      	mov	r3, r4
 800db92:	6864      	ldr	r4, [r4, #4]
 800db94:	e7ae      	b.n	800daf4 <_malloc_r+0x34>
 800db96:	463c      	mov	r4, r7
 800db98:	687f      	ldr	r7, [r7, #4]
 800db9a:	e7b6      	b.n	800db0a <_malloc_r+0x4a>
 800db9c:	461a      	mov	r2, r3
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	42a3      	cmp	r3, r4
 800dba2:	d1fb      	bne.n	800db9c <_malloc_r+0xdc>
 800dba4:	2300      	movs	r3, #0
 800dba6:	6053      	str	r3, [r2, #4]
 800dba8:	e7de      	b.n	800db68 <_malloc_r+0xa8>
 800dbaa:	230c      	movs	r3, #12
 800dbac:	6033      	str	r3, [r6, #0]
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f000 f99a 	bl	800dee8 <__malloc_unlock>
 800dbb4:	e794      	b.n	800dae0 <_malloc_r+0x20>
 800dbb6:	6005      	str	r5, [r0, #0]
 800dbb8:	e7d6      	b.n	800db68 <_malloc_r+0xa8>
 800dbba:	bf00      	nop
 800dbbc:	200057ac 	.word	0x200057ac

0800dbc0 <_printf_common>:
 800dbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc4:	4616      	mov	r6, r2
 800dbc6:	4698      	mov	r8, r3
 800dbc8:	688a      	ldr	r2, [r1, #8]
 800dbca:	690b      	ldr	r3, [r1, #16]
 800dbcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	bfb8      	it	lt
 800dbd4:	4613      	movlt	r3, r2
 800dbd6:	6033      	str	r3, [r6, #0]
 800dbd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dbdc:	4607      	mov	r7, r0
 800dbde:	460c      	mov	r4, r1
 800dbe0:	b10a      	cbz	r2, 800dbe6 <_printf_common+0x26>
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	6033      	str	r3, [r6, #0]
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	0699      	lsls	r1, r3, #26
 800dbea:	bf42      	ittt	mi
 800dbec:	6833      	ldrmi	r3, [r6, #0]
 800dbee:	3302      	addmi	r3, #2
 800dbf0:	6033      	strmi	r3, [r6, #0]
 800dbf2:	6825      	ldr	r5, [r4, #0]
 800dbf4:	f015 0506 	ands.w	r5, r5, #6
 800dbf8:	d106      	bne.n	800dc08 <_printf_common+0x48>
 800dbfa:	f104 0a19 	add.w	sl, r4, #25
 800dbfe:	68e3      	ldr	r3, [r4, #12]
 800dc00:	6832      	ldr	r2, [r6, #0]
 800dc02:	1a9b      	subs	r3, r3, r2
 800dc04:	42ab      	cmp	r3, r5
 800dc06:	dc26      	bgt.n	800dc56 <_printf_common+0x96>
 800dc08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc0c:	6822      	ldr	r2, [r4, #0]
 800dc0e:	3b00      	subs	r3, #0
 800dc10:	bf18      	it	ne
 800dc12:	2301      	movne	r3, #1
 800dc14:	0692      	lsls	r2, r2, #26
 800dc16:	d42b      	bmi.n	800dc70 <_printf_common+0xb0>
 800dc18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc1c:	4641      	mov	r1, r8
 800dc1e:	4638      	mov	r0, r7
 800dc20:	47c8      	blx	r9
 800dc22:	3001      	adds	r0, #1
 800dc24:	d01e      	beq.n	800dc64 <_printf_common+0xa4>
 800dc26:	6823      	ldr	r3, [r4, #0]
 800dc28:	6922      	ldr	r2, [r4, #16]
 800dc2a:	f003 0306 	and.w	r3, r3, #6
 800dc2e:	2b04      	cmp	r3, #4
 800dc30:	bf02      	ittt	eq
 800dc32:	68e5      	ldreq	r5, [r4, #12]
 800dc34:	6833      	ldreq	r3, [r6, #0]
 800dc36:	1aed      	subeq	r5, r5, r3
 800dc38:	68a3      	ldr	r3, [r4, #8]
 800dc3a:	bf0c      	ite	eq
 800dc3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc40:	2500      	movne	r5, #0
 800dc42:	4293      	cmp	r3, r2
 800dc44:	bfc4      	itt	gt
 800dc46:	1a9b      	subgt	r3, r3, r2
 800dc48:	18ed      	addgt	r5, r5, r3
 800dc4a:	2600      	movs	r6, #0
 800dc4c:	341a      	adds	r4, #26
 800dc4e:	42b5      	cmp	r5, r6
 800dc50:	d11a      	bne.n	800dc88 <_printf_common+0xc8>
 800dc52:	2000      	movs	r0, #0
 800dc54:	e008      	b.n	800dc68 <_printf_common+0xa8>
 800dc56:	2301      	movs	r3, #1
 800dc58:	4652      	mov	r2, sl
 800dc5a:	4641      	mov	r1, r8
 800dc5c:	4638      	mov	r0, r7
 800dc5e:	47c8      	blx	r9
 800dc60:	3001      	adds	r0, #1
 800dc62:	d103      	bne.n	800dc6c <_printf_common+0xac>
 800dc64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6c:	3501      	adds	r5, #1
 800dc6e:	e7c6      	b.n	800dbfe <_printf_common+0x3e>
 800dc70:	18e1      	adds	r1, r4, r3
 800dc72:	1c5a      	adds	r2, r3, #1
 800dc74:	2030      	movs	r0, #48	@ 0x30
 800dc76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc7a:	4422      	add	r2, r4
 800dc7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc84:	3302      	adds	r3, #2
 800dc86:	e7c7      	b.n	800dc18 <_printf_common+0x58>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	4641      	mov	r1, r8
 800dc8e:	4638      	mov	r0, r7
 800dc90:	47c8      	blx	r9
 800dc92:	3001      	adds	r0, #1
 800dc94:	d0e6      	beq.n	800dc64 <_printf_common+0xa4>
 800dc96:	3601      	adds	r6, #1
 800dc98:	e7d9      	b.n	800dc4e <_printf_common+0x8e>
	...

0800dc9c <_printf_i>:
 800dc9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dca0:	7e0f      	ldrb	r7, [r1, #24]
 800dca2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dca4:	2f78      	cmp	r7, #120	@ 0x78
 800dca6:	4691      	mov	r9, r2
 800dca8:	4680      	mov	r8, r0
 800dcaa:	460c      	mov	r4, r1
 800dcac:	469a      	mov	sl, r3
 800dcae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcb2:	d807      	bhi.n	800dcc4 <_printf_i+0x28>
 800dcb4:	2f62      	cmp	r7, #98	@ 0x62
 800dcb6:	d80a      	bhi.n	800dcce <_printf_i+0x32>
 800dcb8:	2f00      	cmp	r7, #0
 800dcba:	f000 80d2 	beq.w	800de62 <_printf_i+0x1c6>
 800dcbe:	2f58      	cmp	r7, #88	@ 0x58
 800dcc0:	f000 80b9 	beq.w	800de36 <_printf_i+0x19a>
 800dcc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dccc:	e03a      	b.n	800dd44 <_printf_i+0xa8>
 800dcce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcd2:	2b15      	cmp	r3, #21
 800dcd4:	d8f6      	bhi.n	800dcc4 <_printf_i+0x28>
 800dcd6:	a101      	add	r1, pc, #4	@ (adr r1, 800dcdc <_printf_i+0x40>)
 800dcd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcdc:	0800dd35 	.word	0x0800dd35
 800dce0:	0800dd49 	.word	0x0800dd49
 800dce4:	0800dcc5 	.word	0x0800dcc5
 800dce8:	0800dcc5 	.word	0x0800dcc5
 800dcec:	0800dcc5 	.word	0x0800dcc5
 800dcf0:	0800dcc5 	.word	0x0800dcc5
 800dcf4:	0800dd49 	.word	0x0800dd49
 800dcf8:	0800dcc5 	.word	0x0800dcc5
 800dcfc:	0800dcc5 	.word	0x0800dcc5
 800dd00:	0800dcc5 	.word	0x0800dcc5
 800dd04:	0800dcc5 	.word	0x0800dcc5
 800dd08:	0800de49 	.word	0x0800de49
 800dd0c:	0800dd73 	.word	0x0800dd73
 800dd10:	0800de03 	.word	0x0800de03
 800dd14:	0800dcc5 	.word	0x0800dcc5
 800dd18:	0800dcc5 	.word	0x0800dcc5
 800dd1c:	0800de6b 	.word	0x0800de6b
 800dd20:	0800dcc5 	.word	0x0800dcc5
 800dd24:	0800dd73 	.word	0x0800dd73
 800dd28:	0800dcc5 	.word	0x0800dcc5
 800dd2c:	0800dcc5 	.word	0x0800dcc5
 800dd30:	0800de0b 	.word	0x0800de0b
 800dd34:	6833      	ldr	r3, [r6, #0]
 800dd36:	1d1a      	adds	r2, r3, #4
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	6032      	str	r2, [r6, #0]
 800dd3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd44:	2301      	movs	r3, #1
 800dd46:	e09d      	b.n	800de84 <_printf_i+0x1e8>
 800dd48:	6833      	ldr	r3, [r6, #0]
 800dd4a:	6820      	ldr	r0, [r4, #0]
 800dd4c:	1d19      	adds	r1, r3, #4
 800dd4e:	6031      	str	r1, [r6, #0]
 800dd50:	0606      	lsls	r6, r0, #24
 800dd52:	d501      	bpl.n	800dd58 <_printf_i+0xbc>
 800dd54:	681d      	ldr	r5, [r3, #0]
 800dd56:	e003      	b.n	800dd60 <_printf_i+0xc4>
 800dd58:	0645      	lsls	r5, r0, #25
 800dd5a:	d5fb      	bpl.n	800dd54 <_printf_i+0xb8>
 800dd5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	da03      	bge.n	800dd6c <_printf_i+0xd0>
 800dd64:	232d      	movs	r3, #45	@ 0x2d
 800dd66:	426d      	negs	r5, r5
 800dd68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd6c:	4859      	ldr	r0, [pc, #356]	@ (800ded4 <_printf_i+0x238>)
 800dd6e:	230a      	movs	r3, #10
 800dd70:	e011      	b.n	800dd96 <_printf_i+0xfa>
 800dd72:	6821      	ldr	r1, [r4, #0]
 800dd74:	6833      	ldr	r3, [r6, #0]
 800dd76:	0608      	lsls	r0, r1, #24
 800dd78:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd7c:	d402      	bmi.n	800dd84 <_printf_i+0xe8>
 800dd7e:	0649      	lsls	r1, r1, #25
 800dd80:	bf48      	it	mi
 800dd82:	b2ad      	uxthmi	r5, r5
 800dd84:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd86:	4853      	ldr	r0, [pc, #332]	@ (800ded4 <_printf_i+0x238>)
 800dd88:	6033      	str	r3, [r6, #0]
 800dd8a:	bf14      	ite	ne
 800dd8c:	230a      	movne	r3, #10
 800dd8e:	2308      	moveq	r3, #8
 800dd90:	2100      	movs	r1, #0
 800dd92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd96:	6866      	ldr	r6, [r4, #4]
 800dd98:	60a6      	str	r6, [r4, #8]
 800dd9a:	2e00      	cmp	r6, #0
 800dd9c:	bfa2      	ittt	ge
 800dd9e:	6821      	ldrge	r1, [r4, #0]
 800dda0:	f021 0104 	bicge.w	r1, r1, #4
 800dda4:	6021      	strge	r1, [r4, #0]
 800dda6:	b90d      	cbnz	r5, 800ddac <_printf_i+0x110>
 800dda8:	2e00      	cmp	r6, #0
 800ddaa:	d04b      	beq.n	800de44 <_printf_i+0x1a8>
 800ddac:	4616      	mov	r6, r2
 800ddae:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddb2:	fb03 5711 	mls	r7, r3, r1, r5
 800ddb6:	5dc7      	ldrb	r7, [r0, r7]
 800ddb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddbc:	462f      	mov	r7, r5
 800ddbe:	42bb      	cmp	r3, r7
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	d9f4      	bls.n	800ddae <_printf_i+0x112>
 800ddc4:	2b08      	cmp	r3, #8
 800ddc6:	d10b      	bne.n	800dde0 <_printf_i+0x144>
 800ddc8:	6823      	ldr	r3, [r4, #0]
 800ddca:	07df      	lsls	r7, r3, #31
 800ddcc:	d508      	bpl.n	800dde0 <_printf_i+0x144>
 800ddce:	6923      	ldr	r3, [r4, #16]
 800ddd0:	6861      	ldr	r1, [r4, #4]
 800ddd2:	4299      	cmp	r1, r3
 800ddd4:	bfde      	ittt	le
 800ddd6:	2330      	movle	r3, #48	@ 0x30
 800ddd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dddc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dde0:	1b92      	subs	r2, r2, r6
 800dde2:	6122      	str	r2, [r4, #16]
 800dde4:	f8cd a000 	str.w	sl, [sp]
 800dde8:	464b      	mov	r3, r9
 800ddea:	aa03      	add	r2, sp, #12
 800ddec:	4621      	mov	r1, r4
 800ddee:	4640      	mov	r0, r8
 800ddf0:	f7ff fee6 	bl	800dbc0 <_printf_common>
 800ddf4:	3001      	adds	r0, #1
 800ddf6:	d14a      	bne.n	800de8e <_printf_i+0x1f2>
 800ddf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddfc:	b004      	add	sp, #16
 800ddfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	f043 0320 	orr.w	r3, r3, #32
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	4833      	ldr	r0, [pc, #204]	@ (800ded8 <_printf_i+0x23c>)
 800de0c:	2778      	movs	r7, #120	@ 0x78
 800de0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	6831      	ldr	r1, [r6, #0]
 800de16:	061f      	lsls	r7, r3, #24
 800de18:	f851 5b04 	ldr.w	r5, [r1], #4
 800de1c:	d402      	bmi.n	800de24 <_printf_i+0x188>
 800de1e:	065f      	lsls	r7, r3, #25
 800de20:	bf48      	it	mi
 800de22:	b2ad      	uxthmi	r5, r5
 800de24:	6031      	str	r1, [r6, #0]
 800de26:	07d9      	lsls	r1, r3, #31
 800de28:	bf44      	itt	mi
 800de2a:	f043 0320 	orrmi.w	r3, r3, #32
 800de2e:	6023      	strmi	r3, [r4, #0]
 800de30:	b11d      	cbz	r5, 800de3a <_printf_i+0x19e>
 800de32:	2310      	movs	r3, #16
 800de34:	e7ac      	b.n	800dd90 <_printf_i+0xf4>
 800de36:	4827      	ldr	r0, [pc, #156]	@ (800ded4 <_printf_i+0x238>)
 800de38:	e7e9      	b.n	800de0e <_printf_i+0x172>
 800de3a:	6823      	ldr	r3, [r4, #0]
 800de3c:	f023 0320 	bic.w	r3, r3, #32
 800de40:	6023      	str	r3, [r4, #0]
 800de42:	e7f6      	b.n	800de32 <_printf_i+0x196>
 800de44:	4616      	mov	r6, r2
 800de46:	e7bd      	b.n	800ddc4 <_printf_i+0x128>
 800de48:	6833      	ldr	r3, [r6, #0]
 800de4a:	6825      	ldr	r5, [r4, #0]
 800de4c:	6961      	ldr	r1, [r4, #20]
 800de4e:	1d18      	adds	r0, r3, #4
 800de50:	6030      	str	r0, [r6, #0]
 800de52:	062e      	lsls	r6, r5, #24
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	d501      	bpl.n	800de5c <_printf_i+0x1c0>
 800de58:	6019      	str	r1, [r3, #0]
 800de5a:	e002      	b.n	800de62 <_printf_i+0x1c6>
 800de5c:	0668      	lsls	r0, r5, #25
 800de5e:	d5fb      	bpl.n	800de58 <_printf_i+0x1bc>
 800de60:	8019      	strh	r1, [r3, #0]
 800de62:	2300      	movs	r3, #0
 800de64:	6123      	str	r3, [r4, #16]
 800de66:	4616      	mov	r6, r2
 800de68:	e7bc      	b.n	800dde4 <_printf_i+0x148>
 800de6a:	6833      	ldr	r3, [r6, #0]
 800de6c:	1d1a      	adds	r2, r3, #4
 800de6e:	6032      	str	r2, [r6, #0]
 800de70:	681e      	ldr	r6, [r3, #0]
 800de72:	6862      	ldr	r2, [r4, #4]
 800de74:	2100      	movs	r1, #0
 800de76:	4630      	mov	r0, r6
 800de78:	f7f2 f9b2 	bl	80001e0 <memchr>
 800de7c:	b108      	cbz	r0, 800de82 <_printf_i+0x1e6>
 800de7e:	1b80      	subs	r0, r0, r6
 800de80:	6060      	str	r0, [r4, #4]
 800de82:	6863      	ldr	r3, [r4, #4]
 800de84:	6123      	str	r3, [r4, #16]
 800de86:	2300      	movs	r3, #0
 800de88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de8c:	e7aa      	b.n	800dde4 <_printf_i+0x148>
 800de8e:	6923      	ldr	r3, [r4, #16]
 800de90:	4632      	mov	r2, r6
 800de92:	4649      	mov	r1, r9
 800de94:	4640      	mov	r0, r8
 800de96:	47d0      	blx	sl
 800de98:	3001      	adds	r0, #1
 800de9a:	d0ad      	beq.n	800ddf8 <_printf_i+0x15c>
 800de9c:	6823      	ldr	r3, [r4, #0]
 800de9e:	079b      	lsls	r3, r3, #30
 800dea0:	d413      	bmi.n	800deca <_printf_i+0x22e>
 800dea2:	68e0      	ldr	r0, [r4, #12]
 800dea4:	9b03      	ldr	r3, [sp, #12]
 800dea6:	4298      	cmp	r0, r3
 800dea8:	bfb8      	it	lt
 800deaa:	4618      	movlt	r0, r3
 800deac:	e7a6      	b.n	800ddfc <_printf_i+0x160>
 800deae:	2301      	movs	r3, #1
 800deb0:	4632      	mov	r2, r6
 800deb2:	4649      	mov	r1, r9
 800deb4:	4640      	mov	r0, r8
 800deb6:	47d0      	blx	sl
 800deb8:	3001      	adds	r0, #1
 800deba:	d09d      	beq.n	800ddf8 <_printf_i+0x15c>
 800debc:	3501      	adds	r5, #1
 800debe:	68e3      	ldr	r3, [r4, #12]
 800dec0:	9903      	ldr	r1, [sp, #12]
 800dec2:	1a5b      	subs	r3, r3, r1
 800dec4:	42ab      	cmp	r3, r5
 800dec6:	dcf2      	bgt.n	800deae <_printf_i+0x212>
 800dec8:	e7eb      	b.n	800dea2 <_printf_i+0x206>
 800deca:	2500      	movs	r5, #0
 800decc:	f104 0619 	add.w	r6, r4, #25
 800ded0:	e7f5      	b.n	800debe <_printf_i+0x222>
 800ded2:	bf00      	nop
 800ded4:	0800e111 	.word	0x0800e111
 800ded8:	0800e122 	.word	0x0800e122

0800dedc <__malloc_lock>:
 800dedc:	4801      	ldr	r0, [pc, #4]	@ (800dee4 <__malloc_lock+0x8>)
 800dede:	f7ff bc1b 	b.w	800d718 <__retarget_lock_acquire_recursive>
 800dee2:	bf00      	nop
 800dee4:	200057a4 	.word	0x200057a4

0800dee8 <__malloc_unlock>:
 800dee8:	4801      	ldr	r0, [pc, #4]	@ (800def0 <__malloc_unlock+0x8>)
 800deea:	f7ff bc16 	b.w	800d71a <__retarget_lock_release_recursive>
 800deee:	bf00      	nop
 800def0:	200057a4 	.word	0x200057a4

0800def4 <_realloc_r>:
 800def4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def8:	4680      	mov	r8, r0
 800defa:	4615      	mov	r5, r2
 800defc:	460c      	mov	r4, r1
 800defe:	b921      	cbnz	r1, 800df0a <_realloc_r+0x16>
 800df00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df04:	4611      	mov	r1, r2
 800df06:	f7ff bddb 	b.w	800dac0 <_malloc_r>
 800df0a:	b92a      	cbnz	r2, 800df18 <_realloc_r+0x24>
 800df0c:	f7ff fc14 	bl	800d738 <_free_r>
 800df10:	2400      	movs	r4, #0
 800df12:	4620      	mov	r0, r4
 800df14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df18:	f000 f844 	bl	800dfa4 <_malloc_usable_size_r>
 800df1c:	4285      	cmp	r5, r0
 800df1e:	4606      	mov	r6, r0
 800df20:	d802      	bhi.n	800df28 <_realloc_r+0x34>
 800df22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800df26:	d8f4      	bhi.n	800df12 <_realloc_r+0x1e>
 800df28:	4629      	mov	r1, r5
 800df2a:	4640      	mov	r0, r8
 800df2c:	f7ff fdc8 	bl	800dac0 <_malloc_r>
 800df30:	4607      	mov	r7, r0
 800df32:	2800      	cmp	r0, #0
 800df34:	d0ec      	beq.n	800df10 <_realloc_r+0x1c>
 800df36:	42b5      	cmp	r5, r6
 800df38:	462a      	mov	r2, r5
 800df3a:	4621      	mov	r1, r4
 800df3c:	bf28      	it	cs
 800df3e:	4632      	movcs	r2, r6
 800df40:	f7ff fbec 	bl	800d71c <memcpy>
 800df44:	4621      	mov	r1, r4
 800df46:	4640      	mov	r0, r8
 800df48:	f7ff fbf6 	bl	800d738 <_free_r>
 800df4c:	463c      	mov	r4, r7
 800df4e:	e7e0      	b.n	800df12 <_realloc_r+0x1e>

0800df50 <memmove>:
 800df50:	4288      	cmp	r0, r1
 800df52:	b510      	push	{r4, lr}
 800df54:	eb01 0402 	add.w	r4, r1, r2
 800df58:	d902      	bls.n	800df60 <memmove+0x10>
 800df5a:	4284      	cmp	r4, r0
 800df5c:	4623      	mov	r3, r4
 800df5e:	d807      	bhi.n	800df70 <memmove+0x20>
 800df60:	1e43      	subs	r3, r0, #1
 800df62:	42a1      	cmp	r1, r4
 800df64:	d008      	beq.n	800df78 <memmove+0x28>
 800df66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df6e:	e7f8      	b.n	800df62 <memmove+0x12>
 800df70:	4402      	add	r2, r0
 800df72:	4601      	mov	r1, r0
 800df74:	428a      	cmp	r2, r1
 800df76:	d100      	bne.n	800df7a <memmove+0x2a>
 800df78:	bd10      	pop	{r4, pc}
 800df7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df82:	e7f7      	b.n	800df74 <memmove+0x24>

0800df84 <_sbrk_r>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	4d06      	ldr	r5, [pc, #24]	@ (800dfa0 <_sbrk_r+0x1c>)
 800df88:	2300      	movs	r3, #0
 800df8a:	4604      	mov	r4, r0
 800df8c:	4608      	mov	r0, r1
 800df8e:	602b      	str	r3, [r5, #0]
 800df90:	f7f6 fe12 	bl	8004bb8 <_sbrk>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_sbrk_r+0x1a>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_sbrk_r+0x1a>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	200057a0 	.word	0x200057a0

0800dfa4 <_malloc_usable_size_r>:
 800dfa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfa8:	1f18      	subs	r0, r3, #4
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	bfbc      	itt	lt
 800dfae:	580b      	ldrlt	r3, [r1, r0]
 800dfb0:	18c0      	addlt	r0, r0, r3
 800dfb2:	4770      	bx	lr

0800dfb4 <_init>:
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	bf00      	nop
 800dfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfba:	bc08      	pop	{r3}
 800dfbc:	469e      	mov	lr, r3
 800dfbe:	4770      	bx	lr

0800dfc0 <_fini>:
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc2:	bf00      	nop
 800dfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfc6:	bc08      	pop	{r3}
 800dfc8:	469e      	mov	lr, r3
 800dfca:	4770      	bx	lr
